

-   s/items/entries/

-   or binder:

        a || b <- x

        A, B, X, X' A'
        0, 0, 0, 0,    no change
        0, 1, 1, 0,    B must become false
        1, 0, 1, 0,    A must become false
        1, 1, 1, 0,    A and B must become false
                       summary: a <- false, b <- false
        0, 0, 0, 1, 1  either A or B must become true (A by convention)
        0, 1, 1, 1, 0  no change
        1, 0, 1, 1, 1  no change
        1, 1, 1, 1, 1  no change
                       summary: a <- a || !b

-   and binder

        a && b <- x

        A, B, X, X' A'
        0, 0, 0, 0, 0  no change
        0, 1, 0, 0, 0  no change
        1, 0, 0, 0, 1  no change
        1, 1, 1, 0, 0  either A or B must become false (A by convention)
                       summary: a <- a && !b
        0, 0, 0, 1,    A and B must become true
        0, 1, 0, 1,    A must become true
        1, 0, 0, 1,    B must become true
        1, 1, 1, 1,    no change
                       summary: a <- true, b <- true

-   filter binder:
        filteredValues <- values.filter{predicate}
            projecting each value in values:
                if predicate becomes true, add predicate to filteredValues in its relative position
                if predicate becomes false, remove predicate from filteredValues in its relative position
        values.filter{predicate} <- filteredValues
            projecting each value in filteredValues
            values.enumerate() produces [index, value] pairs
            values.enumerate().map{[.0, .1, .1|predicate]}
                (value) predicate <- filteredValues.has(value) (at respective position)
                    filteredValues[indexRef.index] == value
        [value, predicateValue, valueIndex, filterIndex]
            observing value
            observing predicateValue

        observeValues
            map [value, predicateValue, valueIndex, filterIndex]
            produce initial presumed filteredValues
            observeFilteredValues

-   map binder:
        mappedValues <- values.map{relation}
            projecting each value in values:
        values.map{relation} <- mappedValues
            projecting each value in mappedValues
                bind (value) relation <- mappedValue
            each time a value is removed
                cancel the binding
            each time a value is added
                no source value exists, so creating one is a bit problematic.
                perhaps fill the void with a undefined and skip the binding

