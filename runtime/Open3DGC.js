// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
  Module.test;
} catch(e) {
  this['Module'] = Module = {};
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (typeof module === "object") {
  module.exports = Module;
}
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}
if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  Module['read'] = read;
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }
  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  Module['load'] = importScripts;
}
if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (type == 'i64' || type == 'double' || vararg) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = ((((STATICTOP)+7)>>3)<<3); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = ((((DYNAMICTOP)+7)>>3)<<3); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? (((low)>>>(0))+(((high)>>>(0))*4294967296)) : (((low)>>>(0))+(((high)|(0))*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = globalScope['Module']['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  Module.printErr('Warning: Enlarging memory arrays, this is not fast, and ALLOW_MEMORY_GROWTH is not fully tested with all optimizations on! ' + [DYNAMICTOP, TOTAL_MEMORY]); // We perform safe elimination instead of elimination in this mode, but if you see this error, try to disable it and other optimizations entirely
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite
  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic. Override enlargeMemory() if your program has something more optimal for it
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  assert(TOTAL_MEMORY <= Math.pow(2, 30)); // 2^30==1GB is a practical maximum - 2^31 is already close to possible negative numbers etc.
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var runtimeInitialized = false;
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledInit = false, calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
function addPreRun(func) {
  if (!Module['preRun']) Module['preRun'] = [];
  else if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
  Module['preRun'].push(func);
}
var awaitingMemoryInitializer = false;
function loadMemoryInitializer(filename) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
    runPostSets();
  }
  // always do this asynchronously, to keep shell and web as similar as possible
  addPreRun(function() {
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
      applyData(Module['readBinary'](filename));
    } else {
      Browser.asyncLoad(filename, function(data) {
        applyData(data);
      }, function(data) {
        throw 'could not load memory initializer ' + filename;
      });
    }
  });
  awaitingMemoryInitializer = false;
}
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 20552;
var _stdout;
var _stdin;
var _stderr;
__ATINIT__ = __ATINIT__.concat([
  { func: function() { __GLOBAL__I_a() } },
  { func: function() { __GLOBAL__I_a113() } },
  { func: function() { __GLOBAL__I_a147() } }
]);
var ___fsmu8;
var ___dso_handle;
var __ZTVN10__cxxabiv120__si_class_type_infoE;
var __ZTVN10__cxxabiv117__class_type_infoE;
var __ZTIt;
var __ZTIs;
var __ZTIm;
var __ZTIl;
var __ZTIj;
var __ZTIi;
var __ZTIh;
var __ZTIf;
var __ZTId;
var __ZTIc;
var __ZTIa;
var __ZN38EmscriptenBindingInitializer_my_moduleC1Ev;
var __ZN3ogc16Arithmetic_CodecC1Ev;
var __ZN3ogc16Arithmetic_CodecD1Ev;
var __ZN3ogc16Static_Bit_ModelC1Ev;
var __ZN3ogc18Adaptive_Bit_ModelC1Ev;
var __ZN3ogc19Adaptive_Data_ModelC1Ej;
var __ZN3ogc19Adaptive_Data_ModelD1Ev;
var __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC1Ev;
var __ZNSt3__18ios_base4InitC1Ev;
var __ZNSt3__18ios_base4InitD1Ev;
var __ZNSt3__114__shared_countD1Ev;
var __ZNSt11logic_errorD1Ev;
var __ZNSt13runtime_errorC1EPKc;
var __ZNSt13runtime_errorD1Ev;
var __ZNSt12length_errorD1Ev;
var __ZNSt12length_errorD2Ev;
var __ZN12_GLOBAL__N_114__libcpp_nmstrD1Ev;
var __ZN12_GLOBAL__N_114__libcpp_nmstrC1EPKc;
var __ZNSt3__114error_categoryD1Ev;
var __ZNSt3__112system_errorD1Ev;
var __ZNSt3__18ios_base7failureC1EPKcRKNS_10error_codeE;
var __ZNSt3__18ios_base7failureD1Ev;
var __ZNSt3__18ios_baseD1Ev;
var __ZNSt3__16locale5__impC1Ej;
var __ZNSt3__16locale5__impD1Ev;
var __ZNSt3__16localeC1Ev;
var __ZNSt3__16localeC1ERKS0_;
var __ZNSt3__16localeD1Ev;
var __ZNSt3__16locale5facetD1Ev;
var __ZNSt3__15ctypeIwED1Ev;
var __ZNSt3__15ctypeIwED2Ev;
var __ZNSt3__15ctypeIcEC1EPKtbj;
var __ZNSt3__15ctypeIcED1Ev;
var __ZNSt3__17codecvtIcc10_mbstate_tED1Ev;
var __ZNSt3__17codecvtIcc10_mbstate_tED2Ev;
var __ZNSt3__17codecvtIwc10_mbstate_tEC1Ej;
var __ZNSt3__17codecvtIwc10_mbstate_tED1Ev;
var __ZNSt3__17codecvtIDsc10_mbstate_tED1Ev;
var __ZNSt3__17codecvtIDsc10_mbstate_tED2Ev;
var __ZNSt3__17codecvtIDic10_mbstate_tED1Ev;
var __ZNSt3__17codecvtIDic10_mbstate_tED2Ev;
var __ZNSt3__116__narrow_to_utf8ILj32EED1Ev;
var __ZNSt3__116__narrow_to_utf8ILj32EED2Ev;
var __ZNSt3__117__widen_from_utf8ILj32EED1Ev;
var __ZNSt3__117__widen_from_utf8ILj32EED2Ev;
var __ZNSt3__18numpunctIcEC1Ej;
var __ZNSt3__18numpunctIwEC1Ej;
var __ZNSt3__18numpunctIcED1Ev;
var __ZNSt3__18numpunctIwED1Ev;
var __ZNSt3__15tupleIJNS_12_GLOBAL__N_111__fake_bindEEEC1IJS2_ELb0EEEDpOT_;
var __ZNSt3__112__tuple_implINS_15__tuple_indicesIJLj0EEEEJNS_12_GLOBAL__N_111__fake_bindEEEC1IJLj0EEJS4_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS8_IJDpT2_EEEDpOT3_;
var __ZNSt3__117__call_once_paramINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEC1EOS4_;
var __ZNSt3__15tupleIJNS_12_GLOBAL__N_111__fake_bindEEEC1IS3_Lb0EEEOT_;
var __ZNSt3__112__tuple_implINS_15__tuple_indicesIJLj0EEEEJNS_12_GLOBAL__N_111__fake_bindEEEC1INS_5tupleIJS4_EEEvEEOT_;
var __ZNSt3__110unique_ptrINS_6locale5facetENS_12_GLOBAL__N_17releaseEED1Ev;
var __ZNSt3__110unique_ptrINS_6locale5facetENS_12_GLOBAL__N_17releaseEEC1EPS2_;
var __ZNSt3__117__compressed_pairIPNS_6locale5facetENS_12_GLOBAL__N_17releaseEEC1ES3_;
var __ZNSt3__112_GLOBAL__N_111__fake_bindC1EMNS_6locale2idEFvvEPS3_;
var __ZNSt8bad_castC1Ev;
var __ZNSt8bad_castD1Ev;
var __ZN10__cxxabiv123__fundamental_type_infoD1Ev;
var __ZN10__cxxabiv123__fundamental_type_infoD2Ev;
var __ZN10__cxxabiv117__class_type_infoD1Ev;
var __ZN10__cxxabiv117__class_type_infoD2Ev;
var __ZN10__cxxabiv120__si_class_type_infoD1Ev;
var __ZN10__cxxabiv120__si_class_type_infoD2Ev;
var __ZN10__cxxabiv121__vmi_class_type_infoD1Ev;
var __ZN10__cxxabiv121__vmi_class_type_infoD2Ev;
var __ZNSt9bad_allocC1Ev;
var __ZNSt9bad_allocD1Ev;
var _stdout = _stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stdin = _stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr = _stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,16,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIt=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIs=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIm=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIl=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIj=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIi=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIh=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIf=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTId=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIc=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTIa=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,1,0,0,0,0,0,0,116,3,0,0,0,0,0,0,74,117,108,0,0,0,0,0,74,117,110,0,0,0,0,0,65,112,114,0,0,0,0,0,77,97,114,0,0,0,0,0,70,101,98,0,0,0,0,0,74,97,110,0,0,0,0,0,118,111,105,100,0,0,0,0,97,32,60,32,79,71,67,95,83,67,51,68,77,67,95,77,65,88,95,78,85,77,95,70,76,79,65,84,95,65,84,84,82,73,66,85,84,69,83,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,108,111,110,103,0,0,0,0,79,99,116,111,98,101,114,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,105,116,101,114,97,116,111,114,32,60,32,109,95,111,112,101,114,97,116,105,111,110,115,46,71,101,116,83,105,122,101,40,41,0,0,0,0,0,0,0,65,117,103,117,115,116,0,0,74,117,108,121,0,0,0,0,74,117,110,101,0,0,0,0,77,97,121,0,0,0,0,0,65,112,114,105,108,0,0,0,77,97,114,99,104,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,47,85,115,101,114,115,47,102,97,98,114,105,99,101,114,111,98,105,110,101,116,47,83,105,116,101,115,47,84,69,83,84,47,114,101,115,116,51,100,47,115,101,114,118,101,114,47,111,112,101,110,103,99,47,115,114,99,47,111,112,101,110,103,99,95,99,111,109,109,111,110,95,108,105,98,47,105,110,99,47,111,103,99,86,101,99,116,111,114,46,104,0,0,0,0,0,47,85,115,101,114,115,47,102,97,98,114,105,99,101,114,111,98,105,110,101,116,47,83,105,116,101,115,47,84,69,83,84,47,114,101,115,116,51,100,47,115,101,114,118,101,114,47,111,112,101,110,103,99,47,115,114,99,47,111,112,101,110,103,99,95,99,111,109,109,111,110,95,108,105,98,47,105,110,99,47,111,103,99,83,67,51,68,77,67,69,110,99,111,100,101,80,97,114,97,109,115,46,104,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,105,116,101,114,97,116,111,114,32,60,32,109,95,105,110,100,105,99,101,115,46,71,101,116,83,105,122,101,40,41,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,97,32,60,32,79,71,67,95,83,67,51,68,77,67,95,77,65,88,95,78,85,77,95,73,78,84,95,65,84,84,82,73,66,85,84,69,83,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,105,110,116,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,118,101,114,116,101,120,32,62,61,32,48,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,47,85,115,101,114,115,47,102,97,98,114,105,99,101,114,111,98,105,110,101,116,47,83,105,116,101,115,47,84,69,83,84,47,114,101,115,116,51,100,47,115,101,114,118,101,114,47,111,112,101,110,103,99,47,115,114,99,47,111,112,101,110,103,99,95,99,111,109,109,111,110,95,108,105,98,47,105,110,99,47,111,103,99,73,110,100,101,120,101,100,70,97,99,101,83,101,116,46,104,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,118,101,114,116,101,120,32,60,32,109,95,110,117,109,86,101,114,116,105,99,101,115,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,47,85,115,101,114,115,47,102,97,98,114,105,99,101,114,111,98,105,110,101,116,47,83,105,116,101,115,47,84,69,83,84,47,114,101,115,116,51,100,47,115,101,114,118,101,114,47,111,112,101,110,103,99,47,115,114,99,47,111,112,101,110,103,99,95,100,101,99,111,100,101,95,108,105,98,47,115,114,99,47,111,103,99,84,114,105,97,110,103,108,101,76,105,115,116,68,101,99,111,100,101,114,46,99,112,112,0,0,0,0,0,0,115,104,111,114,116,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,80,77,0,0,0,0,0,0,99,97,110,110,111,116,32,115,116,97,114,116,32,100,101,99,111,100,101,114,0,0,0,0,65,77,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,47,85,115,101,114,115,47,102,97,98,114,105,99,101,114,111,98,105,110,101,116,47,83,105,116,101,115,47,84,69,83,84,47,114,101,115,116,51,100,47,115,101,114,118,101,114,47,111,112,101,110,103,99,47,115,114,99,47,111,112,101,110,103,99,95,99,111,109,109,111,110,95,108,105,98,47,105,110,99,47,111,103,99,84,114,105,97,110,103,108,101,70,97,110,115,46,104,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,118,101,114,116,105,99,101,115,83,105,122,101,32,62,32,48,0,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,110,111,32,99,111,100,101,32,98,117,102,102,101,114,32,115,101,116,0,0,0,0,0,0,105,110,118,97,108,105,100,32,99,111,100,101,99,32,98,117,102,102,101,114,32,115,105,122,101,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,109,95,110,117,109,78,101,105,103,104,98,111,114,115,91,101,108,101,109,101,110,116,93,32,60,61,32,109,95,110,117,109,78,101,105,103,104,98,111,114,115,91,109,95,110,117,109,69,108,101,109,101,110,116,115,45,49,93,0,0,0,0,0,0,115,105,122,101,84,70,65,78,32,62,32,48,0,0,0,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,47,85,115,101,114,115,47,102,97,98,114,105,99,101,114,111,98,105,110,101,116,47,83,105,116,101,115,47,84,69,83,84,47,114,101,115,116,51,100,47,115,101,114,118,101,114,47,111,112,101,110,103,99,47,115,114,99,47,111,112,101,110,103,99,95,99,111,109,109,111,110,95,108,105,98,47,105,110,99,47,111,103,99,65,100,106,97,99,101,110,99,121,73,110,102,111,46,104,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,47,85,115,101,114,115,47,102,97,98,114,105,99,101,114,111,98,105,110,101,116,47,83,105,116,101,115,47,84,69,83,84,47,114,101,115,116,51,100,47,115,101,114,118,101,114,47,111,112,101,110,103,99,47,115,114,99,47,111,112,101,110,103,99,95,99,111,109,109,111,110,95,108,105,98,47,105,110,99,47,111,103,99,84,114,105,97,110,103,108,101,70,97,110,115,46,104,0,0,0,0,0,0,0,99,104,97,114,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,110,117,109,84,114,105,97,110,103,108,101,115,32,62,32,48,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,116,114,117,101,0,0,0,0,99,97,110,110,111,116,32,97,115,115,105,103,110,32,109,101,109,111,114,121,32,102,111,114,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,32,98,117,102,102,101,114,0,115,116,100,58,58,101,120,99,101,112,116,105,111,110,0,0,58,32,0,0,0,0,0,0,37,112,0,0,0,0,0,0,108,108,0,0,0,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,47,85,115,101,114,115,47,102,97,98,114,105,99,101,114,111,98,105,110,101,116,47,83,105,116,101,115,47,84,69,83,84,47,114,101,115,116,51,100,47,115,101,114,118,101,114,47,111,112,101,110,103,99,47,115,114,99,47,111,112,101,110,103,99,95,100,101,99,111,100,101,95,108,105,98,47,115,114,99,47,111,103,99,83,67,51,68,77,67,68,101,99,111,100,101,114,46,99,112,112,0,0,0,0,118,101,114,116,105,99,101,115,83,105,122,101,32,62,32,48,0,0,0,0,0,0,0,0,115,105,122,101,32,60,61,32,109,95,97,108,108,111,99,97,116,101,100,0,0,0,0,0,98,111,111,108,0,0,0,0,115,105,122,101,84,70,65,78,32,62,32,48,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,109,95,115,105,122,101,32,60,32,109,95,97,108,108,111,99,97,116,101,100,0,0,0,0,101,108,101,109,101,110,116,32,60,32,109,95,110,117,109,69,108,101,109,101,110,116,115,0,10,32,69,120,101,99,117,116,105,111,110,32,116,101,114,109,105,110,97,116,101,100,33,10,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,101,108,101,109,101,110,116,32,62,61,32,48,0,0,0,0,110,117,109,86,101,114,116,105,99,101,115,32,62,32,48,0,10,10,32,45,62,32,65,114,105,116,104,109,101,116,105,99,32,99,111,100,105,110,103,32,101,114,114,111,114,58,32,0,118,101,99,116,111,114,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,0,101,108,101,109,101,110,116,32,60,32,109,95,110,101,105,103,104,98,111,114,115,83,105,122,101,0,0,0,0,0,0,0,112,111,115,105,116,105,111,110,32,60,32,109,95,115,116,114,101,97,109,46,71,101,116,83,105,122,101,40,41,32,45,32,79,71,67,95,66,73,78,65,82,89,95,83,84,82,69,65,77,95,78,85,77,95,83,89,77,66,79,76,83,95,85,73,78,84,51,50,0,0,0,0,37,46,48,76,102,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,105,116,101,114,97,116,111,114,32,60,32,109,95,110,117,109,84,70,65,78,115,46,71,101,116,83,105,122,101,40,41,0,99,97,110,110,111,116,32,115,101,116,32,98,117,102,102,101,114,32,119,104,105,108,101,32,101,110,99,111,100,105,110,103,32,111,114,32,100,101,99,111,100,105,110,103,0,0,0,0,112,111,115,105,116,105,111,110,32,60,32,109,95,115,116,114,101,97,109,46,71,101,116,83,105,122,101,40,41,32,45,32,52,0,0,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,105,116,101,114,97,116,111,114,32,60,32,109,95,100,101,103,114,101,101,115,46,71,101,116,83,105,122,101,40,41,0,0,99,97,110,110,111,116,32,97,115,115,105,103,110,32,109,111,100,101,108,32,109,101,109,111,114,121,0,0,0,0,0,0,83,97,116,0,0,0,0,0,47,85,115,101,114,115,47,102,97,98,114,105,99,101,114,111,98,105,110,101,116,47,83,105,116,101,115,47,84,69,83,84,47,114,101,115,116,51,100,47,115,101,114,118,101,114,47,111,112,101,110,103,99,47,115,114,99,47,111,112,101,110,103,99,95,99,111,109,109,111,110,95,108,105,98,47,105,110,99,47,111,103,99,66,105,110,97,114,121,83,116,114,101,97,109,46,104,0,0,0,0,0,0,0,70,114,105,0,0,0,0,0,37,76,102,0,0,0,0,0,84,104,117,0,0,0,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,87,101,100,0,0,0,0,0,84,117,101,0,0,0,0,0,105,116,101,114,97,116,111,114,32,60,32,109,95,99,111,110,102,105,103,115,46,71,101,116,83,105,122,101,40,41,0,0,77,111,110,0,0,0,0,0,83,117,110,0,0,0,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,105,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,100,97,116,97,32,115,121,109,98,111,108,115,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,110,117,109,70,108,111,97,116,65,116,116,114,105,98,117,116,101,115,32,60,32,79,71,67,95,83,67,51,68,77,67,95,77,65,88,95,78,85,77,95,70,76,79,65,84,95,65,84,84,82,73,66,85,84,69,83,0,0,0,0,0,0,0,0,84,117,101,115,100,97,121,0,108,0,0,0,0,0,0,0,77,111,110,100,97,121,0,0,100,105,109,70,108,111,97,116,65,114,114,97,121,32,60,32,79,71,67,95,83,67,51,68,77,67,95,77,65,88,95,68,73,77,95,70,76,79,65,84,95,65,84,84,82,73,66,85,84,69,83,0,0,0,0,0,100,111,117,98,108,101,0,0,83,117,110,100,97,121,0,0,109,95,110,117,109,86,101,114,116,105,99,101,115,32,62,61,32,48,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,110,117,109,73,110,116,65,116,116,114,105,98,117,116,101,115,32,60,32,79,71,67,95,83,67,51,68,77,67,95,77,65,88,95,78,85,77,95,73,78,84,95,65,84,84,82,73,66,85,84,69,83,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,102,108,111,97,116,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,109,95,110,117,109,84,70,65,78,115,32,60,32,109,95,115,105,122,101,84,70,65,78,65,108,108,111,99,97,116,101,100,83,105,122,101,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,68,101,99,0,0,0,0,0,100,105,109,32,60,32,79,71,67,95,83,67,51,68,77,67,95,77,65,88,95,68,73,77,95,70,76,79,65,84,95,65,84,84,82,73,66,85,84,69,83,0,0,0,0,0,0,0,78,111,118,0,0,0,0,0,79,99,116,0,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,83,101,112,0,0,0,0,0,65,117,103,0,0,0,0,0,109,95,110,117,109,84,70,65,78,115,32,62,61,32,48,0,47,85,115,101,114,115,47,102,97,98,114,105,99,101,114,111,98,105,110,101,116,47,83,105,116,101,115,47,84,69,83,84,47,114,101,115,116,51,100,47,115,101,114,118,101,114,47,111,112,101,110,103,99,47,115,114,99,47,111,112,101,110,103,99,95,99,111,109,109,111,110,95,108,105,98,47,105,110,99,47,111,103,99,86,101,99,116,111,114,46,104,0,0,0,0,0,116,101,115,116,68,101,99,111,100,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,111,110,103,32,111,103,99,58,58,67,111,109,112,114,101,115,115,101,100,84,114,105,97,110,103,108,101,70,97,110,115,58,58,82,101,97,100,73,110,100,101,120,40,117,110,115,105,103,110,101,100,32,108,111,110,103,32,38,41,32,99,111,110,115,116,0,0,0,0,0,0,108,111,110,103,32,111,103,99,58,58,67,111,109,112,114,101,115,115,101,100,84,114,105,97,110,103,108,101,70,97,110,115,58,58,82,101,97,100,79,112,101,114,97,116,105,111,110,40,117,110,115,105,103,110,101,100,32,108,111,110,103,32,38,41,32,99,111,110,115,116,0,0,108,111,110,103,32,111,103,99,58,58,67,111,109,112,114,101,115,115,101,100,84,114,105,97,110,103,108,101,70,97,110,115,58,58,82,101,97,100,78,117,109,84,70,97,110,115,40,117,110,115,105,103,110,101,100,32,108,111,110,103,32,38,41,32,99,111,110,115,116,0,0,0,108,111,110,103,32,111,103,99,58,58,67,111,109,112,114,101,115,115,101,100,84,114,105,97,110,103,108,101,70,97,110,115,58,58,82,101,97,100,68,101,103,114,101,101,40,117,110,115,105,103,110,101,100,32,108,111,110,103,32,38,41,32,99,111,110,115,116,0,0,0,0,0,108,111,110,103,32,111,103,99,58,58,67,111,109,112,114,101,115,115,101,100,84,114,105,97,110,103,108,101,70,97,110,115,58,58,82,101,97,100,67,111,110,102,105,103,40,117,110,115,105,103,110,101,100,32,108,111,110,103,32,38,41,32,99,111,110,115,116,0,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,111,103,99,58,58,83,67,51,68,77,67,69,110,99,111,100,101,80,97,114,97,109,115,58,58,71,101,116,70,108,111,97,116,65,116,116,114,105,98,117,116,101,81,117,97,110,116,66,105,116,115,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,99,111,110,115,116,0,0,111,103,99,58,58,79,71,67,83,67,51,68,77,67,80,114,101,100,105,99,116,105,111,110,77,111,100,101,32,111,103,99,58,58,83,67,51,68,77,67,69,110,99,111,100,101,80,97,114,97,109,115,58,58,71,101,116,70,108,111,97,116,65,116,116,114,105,98,117,116,101,80,114,101,100,77,111,100,101,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,99,111,110,115,116,0,0,0,0,99,111,110,115,116,32,82,101,97,108,32,42,99,111,110,115,116,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,71,101,116,70,108,111,97,116,65,116,116,114,105,98,117,116,101,77,105,110,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,99,111,110,115,116,0,0,0,0,0,0,0,0,99,111,110,115,116,32,82,101,97,108,32,42,99,111,110,115,116,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,71,101,116,70,108,111,97,116,65,116,116,114,105,98,117,116,101,77,97,120,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,99,111,110,115,116,0,0,0,0,0,0,0,0,99,111,110,115,116,32,117,110,115,105,103,110,101,100,32,108,111,110,103,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,71,101,116,70,108,111,97,116,65,116,116,114,105,98,117,116,101,68,105,109,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,99,111,110,115,116,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,71,101,116,78,70,108,111,97,116,65,116,116,114,105,98,117,116,101,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,99,111,110,115,116,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,71,101,116,73,110,116,65,116,116,114,105,98,117,116,101,68,105,109,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,99,111,110,115,116,0,0,0,0,0,0,82,101,97,108,32,42,99,111,110,115,116,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,71,101,116,70,108,111,97,116,65,116,116,114,105,98,117,116,101,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,99,111,110,115,116,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,71,101,116,78,73,110,116,65,116,116,114,105,98,117,116,101,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,99,111,110,115,116,0,0,0,0,0,0,0,0,108,111,110,103,32,42,99,111,110,115,116,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,71,101,116,73,110,116,65,116,116,114,105,98,117,116,101,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,99,111,110,115,116,0,0,0,108,111,110,103,32,111,103,99,58,58,65,100,106,97,99,101,110,99,121,73,110,102,111,58,58,66,101,103,105,110,40,108,111,110,103,41,32,99,111,110,115,116,0,0,0,0,0,0,108,111,110,103,32,111,103,99,58,58,65,100,106,97,99,101,110,99,121,73,110,102,111,58,58,69,110,100,40,108,111,110,103,41,32,99,111,110,115,116,0,0,0,0,0,0,0,0,108,111,110,103,32,111,103,99,58,58,65,100,106,97,99,101,110,99,121,73,110,102,111,58,58,71,101,116,78,101,105,103,104,98,111,114,40,108,111,110,103,41,32,99,111,110,115,116,0,0,0,0,0,0,0,0,108,111,110,103,32,111,103,99,58,58,84,114,105,97,110,103,108,101,70,97,110,115,58,58,71,101,116,86,101,114,116,101,120,40,108,111,110,103,41,32,99,111,110,115,116,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,111,103,99,58,58,66,105,110,97,114,121,83,116,114,101,97,109,58,58,82,101,97,100,85,73,110,116,51,50,65,83,67,73,73,40,117,110,115,105,103,110,101,100,32,108,111,110,103,32,38,41,32,99,111,110,115,116,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,111,103,99,58,58,66,105,110,97,114,121,83,116,114,101,97,109,58,58,82,101,97,100,85,73,110,116,51,50,66,105,110,40,117,110,115,105,103,110,101,100,32,108,111,110,103,32,38,41,32,99,111,110,115,116,0,0,0,118,111,105,100,32,111,103,99,58,58,86,101,99,116,111,114,60,108,111,110,103,62,58,58,80,117,115,104,66,97,99,107,40,99,111,110,115,116,32,84,32,38,41,32,91,84,32,61,32,108,111,110,103,93,0,0,118,111,105,100,32,111,103,99,58,58,86,101,99,116,111,114,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,58,58,83,101,116,83,105,122,101,40,115,105,122,101,95,116,41,32,91,84,32,61,32,117,110,115,105,103,110,101,100,32,99,104,97,114,93,0,0,0,0,111,103,99,58,58,79,71,67,69,114,114,111,114,67,111,100,101,32,111,103,99,58,58,67,111,109,112,114,101,115,115,101,100,84,114,105,97,110,103,108,101,70,97,110,115,58,58,65,108,108,111,99,97,116,101,40,108,111,110,103,41,0,0,0,111,103,99,58,58,79,71,67,69,114,114,111,114,67,111,100,101,32,111,103,99,58,58,84,114,105,97,110,103,108,101,76,105,115,116,68,101,99,111,100,101,114,58,58,73,110,105,116,40,108,111,110,103,32,42,99,111,110,115,116,44,32,99,111,110,115,116,32,108,111,110,103,44,32,99,111,110,115,116,32,108,111,110,103,44,32,99,111,110,115,116,32,108,111,110,103,41,0,0,0,0,0,0,0,118,111,105,100,32,111,103,99,58,58,83,67,51,68,77,67,69,110,99,111,100,101,80,97,114,97,109,115,58,58,83,101,116,70,108,111,97,116,65,116,116,114,105,98,117,116,101,81,117,97,110,116,66,105,116,115,40,117,110,115,105,103,110,101,100,32,108,111,110,103,44,32,117,110,115,105,103,110,101,100,32,108,111,110,103,41,0,0,118,111,105,100,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,83,101,116,78,117,109,70,108,111,97,116,65,116,116,114,105,98,117,116,101,115,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,0,0,118,111,105,100,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,83,101,116,70,108,111,97,116,65,116,116,114,105,98,117,116,101,77,105,110,40,117,110,115,105,103,110,101,100,32,108,111,110,103,44,32,117,110,115,105,103,110,101,100,32,108,111,110,103,44,32,82,101,97,108,41,0,0,0,0,0,0,118,111,105,100,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,83,101,116,70,108,111,97,116,65,116,116,114,105,98,117,116,101,77,97,120,40,117,110,115,105,103,110,101,100,32,108,111,110,103,44,32,117,110,115,105,103,110,101,100,32,108,111,110,103,44,32,82,101,97,108,41,0,0,0,0,0,0,118,111,105,100,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,83,101,116,70,108,111,97,116,65,116,116,114,105,98,117,116,101,68,105,109,40,117,110,115,105,103,110,101,100,32,108,111,110,103,44,32,117,110,115,105,103,110,101,100,32,108,111,110,103,41,0,0,0,0,118,111,105,100,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,83,101,116,78,117,109,73,110,116,65,116,116,114,105,98,117,116,101,115,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,0,0,0,0,118,111,105,100,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,83,101,116,78,70,108,111,97,116,65,116,116,114,105,98,117,116,101,40,117,110,115,105,103,110,101,100,32,108,111,110,103,44,32,117,110,115,105,103,110,101,100,32,108,111,110,103,41,0,0,0,0,0,0,118,111,105,100,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,83,101,116,73,110,116,65,116,116,114,105,98,117,116,101,68,105,109,40,117,110,115,105,103,110,101,100,32,108,111,110,103,44,32,117,110,115,105,103,110,101,100,32,108,111,110,103,41,0,0,0,0,0,0,118,111,105,100,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,58,58,83,101,116,78,73,110,116,65,116,116,114,105,98,117,116,101,40,117,110,115,105,103,110,101,100,32,108,111,110,103,44,32,117,110,115,105,103,110,101,100,32,108,111,110,103,41,0,0,0,0,0,0,0,0,111,103,99,58,58,79,71,67,69,114,114,111,114,67,111,100,101,32,111,103,99,58,58,83,67,51,68,77,67,68,101,99,111,100,101,114,58,58,68,101,99,111,100,101,70,108,111,97,116,65,114,114,97,121,40,82,101,97,108,32,42,99,111,110,115,116,44,32,117,110,115,105,103,110,101,100,32,108,111,110,103,44,32,117,110,115,105,103,110,101,100,32,108,111,110,103,44,32,99,111,110,115,116,32,82,101,97,108,32,42,99,111,110,115,116,44,32,99,111,110,115,116,32,82,101,97,108,32,42,99,111,110,115,116,44,32,117,110,115,105,103,110,101,100,32,108,111,110,103,44,32,99,111,110,115,116,32,111,103,99,58,58,73,110,100,101,120,101,100,70,97,99,101,83,101,116,32,38,44,32,111,103,99,58,58,79,71,67,83,67,51,68,77,67,80,114,101,100,105,99,116,105,111,110,77,111,100,101,44,32,99,111,110,115,116,32,111,103,99,58,58,66,105,110,97,114,121,83,116,114,101,97,109,32,38,41,0,0,0,0,111,103,99,58,58,79,71,67,69,114,114,111,114,67,111,100,101,32,111,103,99,58,58,65,100,106,97,99,101,110,99,121,73,110,102,111,58,58,65,100,100,78,101,105,103,104,98,111,114,40,108,111,110,103,44,32,108,111,110,103,41,0,0,0,111,103,99,58,58,84,114,105,97,110,103,108,101,70,97,110,115,58,58,84,114,105,97,110,103,108,101,70,97,110,115,40,108,111,110,103,44,32,108,111,110,103,41,0,0,0,0,0,111,103,99,58,58,79,71,67,69,114,114,111,114,67,111,100,101,32,111,103,99,58,58,84,114,105,97,110,103,108,101,70,97,110,115,58,58,65,100,100,86,101,114,116,101,120,40,108,111,110,103,41,0,0,0,0,111,103,99,58,58,79,71,67,69,114,114,111,114,67,111,100,101,32,111,103,99,58,58,84,114,105,97,110,103,108,101,70,97,110,115,58,58,65,108,108,111,99,97,116,101,40,108,111,110,103,44,32,108,111,110,103,41,0,0,0,0,0,0,0,111,103,99,58,58,79,71,67,69,114,114,111,114,67,111,100,101,32,111,103,99,58,58,84,114,105,97,110,103,108,101,70,97,110,115,58,58,65,100,100,84,70,65,78,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0].concat([48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,4,0,0,0,0,2,3,0,4,0,0,0,0,2,3,0,4,0,0,0,0,2,3,0,4,0,0,0,0,2,3,0,4,0,0,0,0,2,3,0,4,0,0,0,0,2,3,0,4,0,0,0,0,2,3,0,4,0,0,0,0,0,0,0,0,184,67,0,0,206,0,0,0,82,3,0,0,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,67,0,0,168,1,0,0,138,1,0,0,170,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,67,0,0,200,1,0,0,24,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,67,0,0,54,0,0,0,132,3,0,0,14,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,67,0,0,94,0,0,0,24,0,0,0,222,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,10,0,0,0,52,0,0,0,222,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,68,0,0,32,2,0,0,20,1,0,0,148,0,0,0,78,2,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,68,0,0,40,3,0,0,88,2,0,0,148,0,0,0,76,3,0,0,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,68,0,0,22,2,0,0,92,2,0,0,148,0,0,0,80,2,0,0,98,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,68,0,0,122,3,0,0,214,1,0,0,148,0,0,0,66,2,0,0,146,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,68,0,0,214,0,0,0,74,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,68,0,0,220,2,0,0,150,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,69,0,0,108,3,0,0,48,0,0,0,148,0,0,0,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,69,0,0,18,2,0,0,122,1,0,0,148,0,0,0,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,69,0,0,114,0,0,0,124,1,0,0,148,0,0,0,10,3,0,0,30,0,0,0,84,0,0,0,38,0,0,0,252,0,0,0,12,3,0,0,30,1,0,0,248,255,255,255,88,69,0,0,144,0,0,0,60,0,0,0,228,0,0,0,100,0,0,0,12,0,0,0,210,0,0,0,44,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,69,0,0,90,3,0,0,22,3,0,0,148,0,0,0,140,0,0,0,162,0,0,0,46,3,0,0,228,1,0,0,208,0,0,0,22,0,0,0,246,2,0,0,248,255,255,255,128,69,0,0,196,1,0,0,190,2,0,0,248,2,0,0,30,3,0,0,144,1,0,0,42,1,0,0,88,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,69,0,0,42,2,0,0,100,2,0,0,148,0,0,0,66,1,0,0,26,1,0,0,146,0,0,0,202,1,0,0,48,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,69,0,0,156,0,0,0,222,0,0,0,148,0,0,0,36,1,0,0,84,2,0,0,202,0,0,0,72,2,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,69,0,0,94,3,0,0,2,0,0,0,148,0,0,0,242,1,0,0,114,3,0,0,164,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,69,0,0,142,0,0,0,16,0,0,0,148,0,0,0,20,3,0,0,6,1,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,70,0,0,204,1,0,0,134,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,70,0,0,14,2,0,0,212,1,0,0,14,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,70,0,0,20,0,0,0,40,2,0,0,148,0,0,0,10,2,0,0,112,0,0,0,104,0,0,0,110,0,0,0,102,0,0,0,122,0,0,0,120,0,0,0,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,70,0,0,62,1,0,0,50,0,0,0,148,0,0,0,132,2,0,0,136,2,0,0,126,2,0,0,134,2,0,0,60,1,0,0,130,2,0,0,128,2,0,0,46,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,70,0,0,116,0,0,0,62,0,0,0,148,0,0,0,204,2,0,0,200,2,0,0,186,2,0,0,192,2,0,0,82,2,0,0,198,2,0,0,184,2,0,0,210,2,0,0,208,2,0,0,206,2,0,0,180,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,70,0,0,168,0,0,0,6,0,0,0,148,0,0,0,86,3,0,0,58,0,0,0,68,3,0,0,70,3,0,0,38,3,0,0,72,3,0,0,66,3,0,0,84,3,0,0,80,3,0,0,78,3,0,0,194,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,70,0,0,250,0,0,0,44,1,0,0,148,0,0,0,176,1,0,0,122,2,0,0,126,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,70,0,0,78,0,0,0,50,2,0,0,148,0,0,0,114,2,0,0,236,2,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,70,0,0,186,0,0,0,188,1,0,0,148,0,0,0,118,2,0,0,174,0,0,0,112,2,0,0,126,0,0,0,142,1,0,0,138,0,0,0,236,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,70,0,0,48,3,0,0,200,0,0,0,148,0,0,0,68,0,0,0,114,1,0,0,212,0,0,0,212,2,0,0,162,2,0,0,64,1,0,0,156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,166,0,0,0,194,1,0,0,148,0,0,0,110,3,0,0,180,0,0,0,92,0,0,0,118,3,0,0,48,1,0,0,50,1,0,0,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,71,0,0,230,0,0,0,244,1,0,0,148,0,0,0,160,1,0,0,166,1,0,0,144,2,0,0,244,0,0,0,230,1,0,0,188,0,0,0,164,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,71,0,0,160,0,0,0,96,0,0,0,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,71,0,0,198,1,0,0,0,2,0,0,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,71,0,0,112,3,0,0,12,1,0,0,148,0,0,0,218,1,0,0,236,0,0,0,158,1,0,0,202,2,0,0,240,0,0,0,148,2,0,0,104,2,0,0,74,0,0,0,150,0,0,0,252,2,0,0,94,1,0,0,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,71,0,0,2,1,0,0,108,0,0,0,148,0,0,0,32,0,0,0,66,0,0,0,182,1,0,0,244,2,0,0,182,0,0,0,186,1,0,0,26,2,0,0,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,71,0,0,144,0,0,0,60,0,0,0,228,0,0,0,100,0,0,0,12,0,0,0,210,0,0,0,44,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,71,0,0,196,1,0,0,190,2,0,0,248,2,0,0,30,3,0,0,144,1,0,0,42,1,0,0,88,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,71,0,0,226,0,0,0,14,3,0,0,6,2,0,0,154,2,0,0,146,1,0,0,238,2,0,0,224,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,71,0,0,28,2,0,0,22,1,0,0,148,0,0,0,160,1,0,0,166,1,0,0,144,2,0,0,244,0,0,0,230,1,0,0,188,0,0,0,164,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,71,0,0,136,3,0,0,232,1,0,0,148,0,0,0,160,1,0,0,166,1,0,0,144,2,0,0,244,0,0,0,230,1,0,0,188,0,0,0,164,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,71,0,0,172,1,0,0,56,3,0,0,18,3,0,0,240,1,0,0,54,1,0,0,76,2,0,0,106,2,0,0,176,2,0,0,216,2,0,0,192,0,0,0,170,0,0,0,120,3,0,0,28,0,0,0,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,71,0,0,26,0,0,0,140,1,0,0,102,2,0,0,72,1,0,0,28,3,0,0,128,1,0,0,68,1,0,0,90,2,0,0,178,1,0,0,42,0,0,0,76,0,0,0,60,3,0,0,154,1,0,0,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,71,0,0,226,1,0,0,124,2,0,0,98,2,0,0,154,2,0,0,146,1,0,0,238,2,0,0,98,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,196,2,0,0,104,3,0,0,98,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,32,72,0,0,134,0,0,0,230,2,0,0,252,255,255,255,252,255,255,255,32,72,0,0,222,1,0,0,170,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,56,72,0,0,4,3,0,0,62,3,0,0,252,255,255,255,252,255,255,255,56,72,0,0,116,1,0,0,150,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,80,72,0,0,34,1,0,0,134,3,0,0,248,255,255,255,248,255,255,255,80,72,0,0,62,2,0,0,52,3,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,104,72,0,0,112,1,0,0,180,2,0,0,248,255,255,255,248,255,255,255,104,72,0,0,206,1,0,0,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,72,0,0,246,1,0,0,64,2,0,0,14,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,72,0,0,96,1,0,0,116,2,0,0,98,2,0,0,154,2,0,0,146,1,0,0,238,2,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,72,0,0,96,3,0,0,68,2,0,0,232,0,0,0,240,1,0,0,54,1,0,0,76,2,0,0,98,1,0,0,176,2,0,0,216,2,0,0,192,0,0,0,170,0,0,0,120,3,0,0,28,0,0,0,64,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,72,0,0,248,1,0,0,56,2,0,0,130,1,0,0,72,1,0,0,28,3,0,0,128,1,0,0,108,2,0,0,90,2,0,0,178,1,0,0,42,0,0,0,76,0,0,0,60,3,0,0,154,1,0,0,86,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,73,0,0,16,3,0,0,220,1,0,0,148,0,0,0,192,1,0,0,254,2,0,0,224,1,0,0,106,3,0,0,72,0,0,0,82,1,0,0,80,1,0,0,10,1,0,0,184,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,73,0,0,102,1,0,0,184,0,0,0,148,0,0,0,234,2,0,0,242,2,0,0,172,2,0,0,246,0,0,0,36,3,0,0,38,1,0,0,240,2,0,0,52,2,0,0,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,73,0,0,24,3,0,0,136,1,0,0,148,0,0,0,124,0,0,0,132,1,0,0,16,2,0,0,252,1,0,0,176,0,0,0,54,2,0,0,142,2,0,0,74,2,0,0,104,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,73,0,0,4,1,0,0,36,2,0,0,148,0,0,0,178,2,0,0,214,2,0,0,76,1,0,0,250,2,0,0,46,1,0,0,248,0,0,0,8,2,0,0,228,2,0,0,218,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,73,0,0,120,2,0,0,44,0,0,0,128,0,0,0,240,1,0,0,54,1,0,0,76,2,0,0,106,2,0,0,176,2,0,0,216,2,0,0,210,1,0,0,70,2,0,0,216,0,0,0,28,0,0,0,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,73,0,0,36,0,0,0,6,3,0,0,166,2,0,0,72,1,0,0,28,3,0,0,128,1,0,0,68,1,0,0,90,2,0,0,178,1,0,0,152,2,0,0,158,0,0,0,40,0,0,0,154,1,0,0,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,73,0,0,218,0,0,0,24,1,0,0,204,0,0,0,238,1,0,0,174,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,73,0,0,118,1,0,0,140,2,0,0,204,0,0,0,238,1,0,0,254,0,0,0,88,0,0,0,0,3,0,0,84,1,0,0,0,0,0,0,0,0,0,0,236,50,0,0,0,51,0,0,28,51,0,0,48,51,0,0,76,51,0,0,96,51,0,0,124,51,0,0,144,51,0,0,118,0,0,0,0,0,0,0,116,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,48,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,48,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,48,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,48,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,24,54,0,0,136,54,0,0,24,54,0,0,224,54,0,0,0,0,0,0,240,54,0,0,0,0,0,0,0,55,0,0,0,0,0,0,16,55,0,0,184,67,0,0,0,0,0,0,0,0,0,0,32,55,0,0,184,67,0,0,0,0,0,0,0,0,0,0,48,55,0,0,184,67,0,0,0,0,0,0,0,0,0,0,72,55,0,0,0,68,0,0,0,0,0,0,0,0,0,0,96,55,0,0,184,67,0,0,0,0,0,0,0,0,0,0,112,55,0,0,64,54,0,0,136,55,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,248,72,0,0,0,0,0,0,64,54,0,0,208,55,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,0,73,0,0,0,0,0,0,64,54,0,0,24,56,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,8,73,0,0,0,0,0,0,64,54,0,0,96,56,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,16,73,0,0,0,0,0,0,0,0,0,0,168,56,0,0,8,70,0,0,0,0,0,0,0,0,0,0,216,56,0,0,8,70,0,0,0,0,0,0,64,54,0,0,8,57,0,0,0,0,0,0,1,0,0,0,8,72,0,0,0,0,0,0,64,54,0,0,32,57,0,0,0,0,0,0,1,0,0,0,8,72,0,0,0,0,0,0,64,54,0,0,56,57,0,0,0,0,0,0,1,0,0,0,16,72,0,0,0,0,0,0,64,54,0,0,80,57,0,0,0,0,0,0,1,0,0,0,16,72,0,0,0,0,0,0,64,54,0,0,104,57,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,168,73,0,0,0,8,0,0,64,54,0,0,176,57,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,168,73,0,0,0,8,0,0,64,54,0,0,248,57,0,0,0,0,0,0,3,0,0,0,64,71,0,0,2,0,0,0,16,68,0,0,2,0,0,0,168,71,0,0,0,8,0,0,64,54,0,0,64,58,0,0,0,0,0,0,3,0,0,0,64,71,0,0,2,0,0,0,16,68,0,0,2,0,0,0,176,71,0,0,0,8,0,0,0,0,0,0,136,58,0,0,64,71,0,0,0,0,0,0,0,0,0,0,160,58,0,0,64,71,0,0,0,0,0,0,64,54,0,0,184,58,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,24,72,0,0,2,0,0,0,64,54,0,0,208,58,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,24,72,0,0,2,0,0,0,0,0,0,0,232,58,0,0,0,0,0,0,0,59,0,0,128,72,0,0,0,0,0,0,64,54,0,0,32,59,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,184,68,0,0,0,0,0,0,64,54,0,0,104,59,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,208,68,0,0,0,0,0,0,64,54,0,0,176,59,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,232,68,0,0,0,0,0,0,64,54,0,0,248,59,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,64,60,0,0,64,71,0,0,0,0,0,0,0,0,0,0,88,60,0,0,64,71,0,0,0,0,0,0,64,54,0,0,112,60,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,144,72,0,0,2,0,0,0,64,54,0,0,152,60,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,144,72,0,0,2,0,0,0,64,54,0,0,192,60,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,144,72,0,0,2,0,0,0,64,54,0,0,232,60,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,144,72,0,0,2,0,0,0,0,0,0,0,16,61,0,0,0,72,0,0,0,0,0,0,0,0,0,0,40,61,0,0,64,71,0,0,0,0,0,0,64,54,0,0,64,61,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,160,73,0,0,2,0,0,0,64,54,0,0,88,61,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,160,73,0,0,2,0,0,0,0,0,0,0,112,61,0,0,0,0,0,0,152,61,0,0,0,0,0,0,192,61,0,0,0,0,0,0,232,61,0,0,200,72,0,0,0,0,0,0,0,0,0,0,8,62,0,0,32,71,0,0,0,0,0,0,0,0,0,0,48,62,0,0,32,71,0,0,0,0,0,0,0,0,0,0,88,62,0,0,0,0,0,0,144,62,0,0,0,0,0,0,200,62,0,0,0,0,0,0,232,62,0,0,0,0,0,0,8,63,0,0,0,0,0,0,40,63,0,0,0,0,0,0,72,63,0,0,64,54,0,0,96,63,0,0,0,0,0,0,1,0,0,0,152,68,0,0,3,244,255,255,64,54,0,0,144,63,0,0,0,0,0,0,1,0,0,0,168,68,0,0,3,244,255,255,64,54,0,0,192,63,0,0,0,0,0,0,1,0,0,0,152,68,0,0,3,244,255,255,64,54,0,0,240,63,0,0,0,0,0,0,1,0,0,0,168,68,0,0,3,244,255,255,0,0,0,0,32,64,0,0,224,67,0,0,0,0,0,0,0,0,0,0,56,64,0,0,64,54,0,0,80,64,0,0,0,0,0,0,1,0,0,0,160,71,0,0,0,0,0,0,64,54,0,0,144,64,0,0,0,0,0,0,1,0,0,0,160,71,0,0,0,0,0,0,0,0,0,0,208,64,0,0,248,71,0,0,0,0,0,0,0,0,0,0,232,64,0,0,232,71,0,0,0,0,0,0,0,0,0,0,8,65,0,0,240,71,0,0,0,0,0,0,0,0,0,0,40,65,0,0,0,0,0,0,72,65,0,0,0,0,0,0,104,65,0,0,0,0,0,0,136,65,0,0,64,54,0,0,168,65,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,152,73,0,0,2,0,0,0,64,54,0,0,200,65,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,152,73,0,0,2,0,0,0,64,54,0,0,232,65,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,152,73,0,0,2,0,0,0,64,54,0,0,8,66,0,0,0,0,0,0,2,0,0,0,64,71,0,0,2,0,0,0,152,73,0,0,2,0,0,0,0,0,0,0,40,66,0,0,0,0,0,0,64,66,0,0,0,0,0,0,88,66,0,0,0,0,0,0,112,66,0,0,232,71,0,0,0,0,0,0,0,0,0,0,136,66,0,0,240,71,0,0,0,0,0,0,0,0,0,0,160,66,0,0,0,0,0,0,184,66,0,0,0,0,0,0,216,66,0,0,32,74,0,0,0,0,0,0,0,0,0,0,0,67,0,0,16,74,0,0,0,0,0,0,0,0,0,0,40,67,0,0,16,74,0,0,0,0,0,0,0,0,0,0,80,67,0,0,32,74,0,0,0,0,0,0,0,0,0,0,120,67,0,0,176,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
.concat([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(8))>>2)]=(376);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(12))>>2)]=(430);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(16))>>2)]=(204);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(20))>>2)]=(494);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(24))>>2)]=(254);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(28))>>2)]=(130);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(32))>>2)]=(296);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(36))>>2)]=(334);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(8))>>2)]=(570);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(12))>>2)]=(860);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(16))>>2)]=(204);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(20))>>2)]=(494);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(24))>>2)]=(254);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(28))>>2)]=(670);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(32))>>2)]=(326);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(36))>>2)]=(514);
HEAP32[((__ZTIt)>>2)]=(((13848)|0));
HEAP32[(((__ZTIt)+(4))>>2)]=((13968)|0);
HEAP32[((__ZTIs)>>2)]=(((13848)|0));
HEAP32[(((__ZTIs)+(4))>>2)]=((13976)|0);
HEAP32[((__ZTIm)>>2)]=(((13848)|0));
HEAP32[(((__ZTIm)+(4))>>2)]=((13984)|0);
HEAP32[((__ZTIl)>>2)]=(((13848)|0));
HEAP32[(((__ZTIl)+(4))>>2)]=((13992)|0);
HEAP32[((__ZTIj)>>2)]=(((13848)|0));
HEAP32[(((__ZTIj)+(4))>>2)]=((14000)|0);
HEAP32[((__ZTIi)>>2)]=(((13848)|0));
HEAP32[(((__ZTIi)+(4))>>2)]=((14008)|0);
HEAP32[((__ZTIh)>>2)]=(((13848)|0));
HEAP32[(((__ZTIh)+(4))>>2)]=((14016)|0);
HEAP32[((__ZTIf)>>2)]=(((13848)|0));
HEAP32[(((__ZTIf)+(4))>>2)]=((14024)|0);
HEAP32[((__ZTId)>>2)]=(((13848)|0));
HEAP32[(((__ZTId)+(4))>>2)]=((14032)|0);
HEAP32[((__ZTIc)>>2)]=(((13848)|0));
HEAP32[(((__ZTIc)+(4))>>2)]=((14040)|0);
HEAP32[((__ZTIa)>>2)]=(((13848)|0));
HEAP32[(((__ZTIa)+(4))>>2)]=((14056)|0);
HEAP32[((17328)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17336)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17344)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17360)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17376)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17392)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17408)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17424)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17560)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17576)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17832)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17848)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((17928)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((17936)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18080)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18096)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18240)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18256)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18336)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18344)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18352)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18360)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18376)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18392)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18408)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18416)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18424)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18432)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18440)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18448)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18456)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18560)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18576)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18632)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18648)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18664)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18680)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18688)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18696)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18704)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18840)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18848)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18856)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18864)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18880)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18896)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18904)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((18912)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18928)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18944)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18960)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((18976)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
__ZN38EmscriptenBindingInitializer_my_moduleC1Ev = 694;
__ZN3ogc16Arithmetic_CodecC1Ev = 404;
__ZN3ogc16Arithmetic_CodecD1Ev = 464;
__ZN3ogc16Static_Bit_ModelC1Ev = 178;
__ZN3ogc18Adaptive_Bit_ModelC1Ev = 532;
__ZN3ogc19Adaptive_Data_ModelC1Ej = 46;
__ZN3ogc19Adaptive_Data_ModelD1Ev = 802;
__ZN53EmscriptenBindingInitializer_native_and_builtin_typesC1Ev = 364;
__ZNSt3__18ios_base4InitC1Ev = 744;
__ZNSt3__18ios_base4InitD1Ev = 472;
__ZNSt3__114__shared_countD1Ev = 516;
__ZNSt11logic_errorD1Ev = 308;
__ZNSt13runtime_errorC1EPKc = 510;
__ZNSt13runtime_errorD1Ev = 238;
__ZNSt12length_errorD1Ev = 356;
__ZNSt12length_errorD2Ev = (308);
__ZN12_GLOBAL__N_114__libcpp_nmstrD1Ev = 446;
__ZN12_GLOBAL__N_114__libcpp_nmstrC1EPKc = 86;
__ZNSt3__114error_categoryD1Ev = 330;
__ZNSt3__112system_errorD1Ev = 680;
__ZNSt3__18ios_base7failureC1EPKcRKNS_10error_codeE = 194;
__ZNSt3__18ios_base7failureD1Ev = 80;
__ZNSt3__18ios_baseD1Ev = 770;
__ZNSt3__16locale5__impC1Ej = 598;
__ZNSt3__16locale5__impD1Ev = 190;
__ZNSt3__16localeC1Ev = 776;
__ZNSt3__16localeC1ERKS0_ = 348;
__ZNSt3__16localeD1Ev = 524;
__ZNSt3__16locale5facetD1Ev = 572;
__ZNSt3__15ctypeIwED1Ev = 606;
__ZNSt3__15ctypeIwED2Ev = (572);
__ZNSt3__15ctypeIcEC1EPKtbj = 822;
__ZNSt3__15ctypeIcED1Ev = 898;
__ZNSt3__17codecvtIcc10_mbstate_tED1Ev = 556;
__ZNSt3__17codecvtIcc10_mbstate_tED2Ev = (572);
__ZNSt3__17codecvtIwc10_mbstate_tEC1Ej = 366;
__ZNSt3__17codecvtIwc10_mbstate_tED1Ev = 800;
__ZNSt3__17codecvtIDsc10_mbstate_tED1Ev = 894;
__ZNSt3__17codecvtIDsc10_mbstate_tED2Ev = (572);
__ZNSt3__17codecvtIDic10_mbstate_tED1Ev = 870;
__ZNSt3__17codecvtIDic10_mbstate_tED2Ev = (572);
__ZNSt3__116__narrow_to_utf8ILj32EED1Ev = 274;
__ZNSt3__116__narrow_to_utf8ILj32EED2Ev = (870);
__ZNSt3__117__widen_from_utf8ILj32EED1Ev = 818;
__ZNSt3__117__widen_from_utf8ILj32EED2Ev = (870);
__ZNSt3__18numpunctIcEC1Ej = 738;
__ZNSt3__18numpunctIwEC1Ej = 82;
__ZNSt3__18numpunctIcED1Ev = 198;
__ZNSt3__18numpunctIwED1Ev = 264;
__ZNSt3__15tupleIJNS_12_GLOBAL__N_111__fake_bindEEEC1IJS2_ELb0EEEDpOT_ = 4;
__ZNSt3__112__tuple_implINS_15__tuple_indicesIJLj0EEEEJNS_12_GLOBAL__N_111__fake_bindEEEC1IJLj0EEJS4_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS8_IJDpT2_EEEDpOT3_ = 346;
__ZNSt3__117__call_once_paramINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEC1EOS4_ = 810;
__ZNSt3__15tupleIJNS_12_GLOBAL__N_111__fake_bindEEEC1IS3_Lb0EEEOT_ = 14;
__ZNSt3__112__tuple_implINS_15__tuple_indicesIJLj0EEEEJNS_12_GLOBAL__N_111__fake_bindEEEC1INS_5tupleIJS4_EEEvEEOT_ = 224;
__ZNSt3__110unique_ptrINS_6locale5facetENS_12_GLOBAL__N_17releaseEED1Ev = 506;
__ZNSt3__110unique_ptrINS_6locale5facetENS_12_GLOBAL__N_17releaseEEC1EPS2_ = 550;
__ZNSt3__117__compressed_pairIPNS_6locale5facetENS_12_GLOBAL__N_17releaseEEC1ES3_ = 106;
__ZNSt3__112_GLOBAL__N_111__fake_bindC1EMNS_6locale2idEFvvEPS3_ = 18;
__ZNSt8bad_castC1Ev = 118;
__ZNSt8bad_castD1Ev = 650;
__ZN10__cxxabiv123__fundamental_type_infoD1Ev = 826;
__ZN10__cxxabiv123__fundamental_type_infoD2Ev = (868);
__ZN10__cxxabiv117__class_type_infoD1Ev = 288;
__ZN10__cxxabiv117__class_type_infoD2Ev = (868);
__ZN10__cxxabiv120__si_class_type_infoD1Ev = 892;
__ZN10__cxxabiv120__si_class_type_infoD2Ev = (288);
__ZN10__cxxabiv121__vmi_class_type_infoD1Ev = 70;
__ZN10__cxxabiv121__vmi_class_type_infoD2Ev = (288);
__ZNSt9bad_allocC1Ev = 672;
__ZNSt9bad_allocD1Ev = 90;
}
if (!awaitingMemoryInitializer) runPostSets();
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  function ___gxx_personality_v0() {
    }
;
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      function ExitStatus() {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
        Module.print('Exit Status: ' + status);
      };
      ExitStatus.prototype = new Error();
      ExitStatus.prototype.constructor = ExitStatus;
      exitRuntime();
      ABORT = true;
      throw new ExitStatus();
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }
  function ___assert_func(filename, line, func, condition) {
      throw 'Assertion failed: ' + (condition ? Pointer_stringify(condition) : 'unknown condition') + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + new Error().stack;
    }
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32=_memset;
  function _llvm_umul_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x*y > 4294967295,(x*y)>>>0;
    }
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:35,EIDRM:36,ECHRNG:37,EL2NSYNC:38,EL3HLT:39,EL3RST:40,ELNRNG:41,EUNATCH:42,ENOCSI:43,EL2HLT:44,EDEADLK:45,ENOLCK:46,EBADE:50,EBADR:51,EXFULL:52,ENOANO:53,EBADRQC:54,EBADSLT:55,EDEADLOCK:56,EBFONT:57,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:74,ELBIN:75,EDOTDOT:76,EBADMSG:77,EFTYPE:79,ENOTUNIQ:80,EBADFD:81,EREMCHG:82,ELIBACC:83,ELIBBAD:84,ELIBSCN:85,ELIBMAX:86,ELIBEXEC:87,ENOSYS:88,ENMFILE:89,ENOTEMPTY:90,ENAMETOOLONG:91,ELOOP:92,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:106,EPROTOTYPE:107,ENOTSOCK:108,ENOPROTOOPT:109,ESHUTDOWN:110,ECONNREFUSED:111,EADDRINUSE:112,ECONNABORTED:113,ENETUNREACH:114,ENETDOWN:115,ETIMEDOUT:116,EHOSTDOWN:117,EHOSTUNREACH:118,EINPROGRESS:119,EALREADY:120,EDESTADDRREQ:121,EMSGSIZE:122,EPROTONOSUPPORT:123,ESOCKTNOSUPPORT:124,EADDRNOTAVAIL:125,ENETRESET:126,EISCONN:127,ENOTCONN:128,ETOOMANYREFS:129,EPROCLIM:130,EUSERS:131,EDQUOT:132,ESTALE:133,ENOTSUP:134,ENOMEDIUM:135,ENOSHARE:136,ECASECLASH:137,EILSEQ:138,EOVERFLOW:139,ECANCELED:140,ENOTRECOVERABLE:141,EOWNERDEAD:142,ESTRPIPE:143};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  var __impure_ptr=allocate(1, "i32*", ALLOC_STATIC);var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) if (FS.streams.hasOwnProperty(i)) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,createFileHandle:function (stream, fd) {
        if (typeof stream === 'undefined') {
          stream = null;
        }
        if (!fd) {
          if (stream && stream.socket) {
            for (var i = 1; i < 64; i++) {
              if (!FS.streams[i]) {
                fd = i;
                break;
              }
            }
            assert(fd, 'ran out of low fds for sockets');
          } else {
            fd = Math.max(FS.streams.length, 64);
            for (var i = FS.streams.length; i < fd; i++) {
              FS.streams[i] = null; // Keep dense
            }
          }
        }
        // Close WebSocket first if we are about to replace the fd (i.e. dup2)
        if (FS.streams[fd] && FS.streams[fd].socket && FS.streams[fd].socket.close) {
          FS.streams[fd].socket.close();
        }
        FS.streams[fd] = stream;
        return fd;
      },removeFileHandle:function (fd) {
        FS.streams[fd] = null;
      },joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.init();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureRoot();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === 10) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
        FS.createDevice(devFolder, 'null', function(){}, function(){});
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        // TODO: put these low in memory like we used to assert on: assert(Math.max(_stdin, _stdout, _stderr) < 15000); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        // see previous TODO on stdin etc.: assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_NORMAL) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output(10);
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output(10);
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  function _recv(fd, buf, len, flags) {
      var info = FS.streams[fd];
      if (!info) return -1;
      if (!info.hasData()) {
        ___setErrNo(ERRNO_CODES.EAGAIN); // no data, and all sockets are nonblocking, so this is the right behavior
        return -1;
      }
      var buffer = info.inQueue.shift();
      if (len < buffer.length) {
        if (info.stream) {
          // This is tcp (reliable), so if not all was read, keep it
          info.inQueue.unshift(buffer.subarray(len));
        }
        buffer = buffer.subarray(0, len);
      }
      HEAPU8.set(buffer, buf);
      return buffer.length;
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[((buf++)|0)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray) { // typed array
          HEAPU8.set(contents.subarray(offset, offset+size), buf);
        } else
        if (contents.slice) { // normal array
          for (var i = 0; i < size; i++) {
            HEAP8[(((buf)+(i))|0)]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[(((buf)+(i))|0)]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (stream && ('socket' in stream)) {
        return _recv(fildes, buf, nbyte, 0);
      } else if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[((buf++)|0)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === undefined && bytesRead === 0) {
                ___setErrNo(ERRNO_CODES.EAGAIN);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[(((buf)+(i))|0)]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc=_fgetc;
  function _send(fd, buf, len, flags) {
      var info = FS.streams[fd];
      if (!info) return -1;
      info.sender(HEAPU8.subarray(buf, buf+len));
      return len;
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (stream && ('socket' in stream)) {
          return _send(fildes, buf, nbyte, 0);
      } else if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (flagAlwaysSigned) {
                if (currArg < 0) {
                  prefix = '-' + prefix;
                } else {
                  prefix = '+' + prefix;
                }
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (flagAlwaysSigned && currArg >= 0) {
                  argText = '+' + argText;
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  function _strdup(ptr) {
      var len = _strlen(ptr);
      var newStr = _malloc(len + 1);
      (_memcpy(newStr, ptr, len)|0);
      HEAP8[(((newStr)+(len))|0)]=0;
      return newStr;
    }
;
;
;
;
;
;
;
;
  function _pthread_mutex_lock() {}
  function _pthread_mutex_unlock() {}
  function _pthread_cond_broadcast() {
      return 0;
    }
  function _pthread_cond_wait() {
      return 0;
    }
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;
  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  function ___resumeException(ptr) {
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      throw ptr;;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = HEAP32[((_llvm_eh_exception.buf)>>2)];
      if (throwntype == -1) throwntype = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;;
    }
  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }
  function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      var flush = function(filedes) {
        // Right now we write all data directly, except for output devices.
        if (FS.streams[filedes] && FS.streams[filedes].object.output) {
          if (!FS.streams[filedes].isTerminal) { // don't flush terminals, it would cause a \n to also appear
            FS.streams[filedes].object.output(null);
          }
        }
      };
      try {
        if (stream === 0) {
          for (var i = 0; i < FS.streams.length; i++) if (FS.streams[i]) flush(i);
        } else {
          flush(stream);
        }
        return 0;
      } catch (e) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      if (FS.streams[stream]) {
        c = unSign(c & 0xFF);
        FS.streams[stream].ungotten.push(c);
        return c;
      } else {
        return -1;
      }
    }
  var _llvm_memcpy_p0i8_p0i8_i64=_memcpy;
  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }
  function ___errno_location() {
      return ___errno_state;
    }var ___errno=___errno_location;
  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"No message of desired type",36:"Identifier removed",37:"Channel number out of range",38:"Level 2 not synchronized",39:"Level 3 halted",40:"Level 3 reset",41:"Link number out of range",42:"Protocol driver not attached",43:"No CSI structure available",44:"Level 2 halted",45:"Deadlock condition",46:"No record locks available",50:"Invalid exchange",51:"Invalid request descriptor",52:"Exchange full",53:"No anode",54:"Invalid request code",55:"Invalid slot",56:"File locking deadlock error",57:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",74:"Multihop attempted",75:"Inode is remote (not really error)",76:"Cross mount point (not really error)",77:"Trying to read unreadable message",79:"Inappropriate file type or format",80:"Given log. name not unique",81:"f.d. invalid for this operation",82:"Remote address changed",83:"Can\t access a needed shared lib",84:"Accessing a corrupted shared lib",85:".lib section in a.out corrupted",86:"Attempting to link in too many libs",87:"Attempting to exec a shared library",88:"Function not implemented",89:"No more files",90:"Directory not empty",91:"File or path name too long",92:"Too many symbolic links",95:"Operation not supported on transport endpoint",96:"Protocol family not supported",104:"Connection reset by peer",105:"No buffer space available",106:"Address family not supported by protocol family",107:"Protocol wrong type for socket",108:"Socket operation on non-socket",109:"Protocol not available",110:"Can't send after socket shutdown",111:"Connection refused",112:"Address already in use",113:"Connection aborted",114:"Network is unreachable",115:"Network interface is not configured",116:"Connection timed out",117:"Host is down",118:"Host is unreachable",119:"Connection already in progress",120:"Socket already connected",121:"Destination address required",122:"Message too long",123:"Unknown protocol",124:"Socket type not supported",125:"Address not available",126:"ENETRESET",127:"Socket is already connected",128:"Socket is not connected",129:"TOOMANYREFS",130:"EPROCLIM",131:"EUSERS",132:"EDQUOT",133:"ESTALE",134:"Not supported",135:"No medium (in tape drive)",136:"No such host or network path",137:"Filename exists with different case",138:"EILSEQ",139:"Value too large for defined data type",140:"Operation canceled",141:"State not recoverable",142:"Previous owner died",143:"Streams pipe error"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[(((strerrbuf)+(i))|0)]=msg.charCodeAt(i)
          }
          HEAP8[(((strerrbuf)+(i))|0)]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num) | 0;
      }
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      throw HEAP32[((_llvm_eh_exception.buf)>>2)];;
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
        case 10: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }var _isxdigit_l=_isxdigit;
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }var _isdigit_l=_isdigit;
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
        __scanString.whiteSpace[' '] = 1;
        __scanString.whiteSpace['\t'] = 1;
        __scanString.whiteSpace['\n'] = 1;
        __scanString.whiteSpace['\v'] = 1;
        __scanString.whiteSpace['\f'] = 1;
        __scanString.whiteSpace['\r'] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
        // TODO: Support strings like "%5c" etc.
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'c') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          fields++;
          next = get();
          HEAP8[(argPtr)]=next
          formatIndex += 2;
          continue;
        }
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            var last = 0;
            next = get();
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,Math.min(Math.floor((parseInt(text, 10))/4294967296), 4294967295)>>>0],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text)
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex] in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      var get = function() { return HEAP8[(((s)+(index++))|0)]; };
      var unget = function() { index--; };
      return __scanString(format, get, unget, varargs);
    }
  function __Z7catopenPKci() { throw 'catopen not implemented' }
  function __Z7catgetsP8_nl_catdiiPKc() { throw 'catgets not implemented' }
  function __Z8catcloseP8_nl_catd() { throw 'catclose not implemented' }
  function _newlocale(mask, locale, base) {
      return 0;
    }
  function _freelocale(locale) {}
  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i]
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function _strftime(s, maxsize, format, timeptr) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      // TODO: Implement.
      return 0;
    }var _strftime_l=_strftime;
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      start = str;
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return tempRet0 = 0,0;
      }
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
      return tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP32[((tempDoublePtr)>>2)];
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }var _strtoull_l=_strtoull;
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }var _strtoll_l=_strtoll;
  function _uselocale(locale) {
      return 0;
    }
  function ___locale_mb_cur_max() { throw '__locale_mb_cur_max not implemented' }
  var _llvm_va_start=undefined;
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _llvm_va_end() {}
  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }
  function _vsprintf(s, format, va_arg) {
      return _sprintf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }
  var _llvm_memset_p0i8_i64=_memset;
  var _llvm_expect_i32=undefined;
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(name.lastIndexOf('.')+1)];
        }
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x = event.pageX - (window.scrollX + rect.left);
          var y = event.pageY - (window.scrollY + rect.top);
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0,0,__ZNSt3__18messagesIwED0Ev,0,__ZNSt3__15tupleIJNS_12_GLOBAL__N_111__fake_bindEEEC2IJS2_ELb0EEEDpOT_,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNKSt3__18numpunctIcE12do_falsenameEv,0,__ZNSt11logic_errorD2Ev
,0,__ZNKSt3__120__time_get_c_storageIwE3__rEv,0,__ZNSt3__15tupleIJNS_12_GLOBAL__N_111__fake_bindEEEC2IS3_Lb0EEEOT_,0,__ZNSt3__18messagesIcED0Ev,0,__ZNSt3__112_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev
,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt12length_errorD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm
,0,__ZNKSt3__15ctypeIcE10do_toupperEc,0,__ZNSt3__16locale2id6__initEv,0,__ZNSt3__110__stdinbufIcED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__110__stdinbufIcE9pbackfailEi
,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNSt3__110__stdinbufIwED0Ev,0,__ZN3ogc19Adaptive_Data_ModelC2Ej,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
,0,__ZNSt11logic_errorD0Ev,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__17collateIcE7do_hashEPKcS3_,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv
,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,0,__ZNKSt3__17codecvtIcc10_mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,0,__ZN10__cxxabiv116__shim_type_infoD2Ev
,0,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,0,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,0,__ZNSt3__17collateIcED1Ev,0,__ZNSt3__18ios_base7failureD2Ev
,0,__ZNSt3__18numpunctIwEC2Ej,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZN12_GLOBAL__N_114__libcpp_nmstrC2EPKc,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNSt9bad_allocD2Ev
,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__16locale5facetD0Ev,0,__ZNKSt3__112__do_message7messageEi,0,__ZNKSt3__120__time_get_c_storageIwE3__cEv
,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,0,__ZNSt3__117__compressed_pairIPNS_6locale5facetENS_12_GLOBAL__N_17releaseEEC2ES3_,0,__ZNSt3__15ctypeIcED0Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm
,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castC2Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe
,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,0,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIwc10_mbstate_tE11do_encodingEv,0,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib
,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE13do_max_lengthEv,0,__ZNKSt3__17codecvtIwc10_mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv
,0,__ZNSt3__18messagesIcED1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,0,__ZNKSt3__18numpunctIwE11do_groupingEv,0,__ZNSt3__16locale5facet16__on_zero_sharedEv,0,__ZNKSt3__15ctypeIwE8do_widenEc
,0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,0,__ZNKSt9exception4whatEv,0,__ZNSt3__18numpunctIcED2Ev,0,__ZNSt3__110__stdinbufIcE5uflowEv,0,__ZNSt3__16locale5facetD2Ev
,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv
,0,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,0,__ZNKSt3__17codecvtIwc10_mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,0,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,0,__ZN3ogc16Static_Bit_ModelC2Ev,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_
,0,__ZNKSt3__15ctypeIcE8do_widenEc,0,__ZNSt3__110moneypunctIwLb0EED0Ev,0,__ZNSt3__17codecvtIwc10_mbstate_tED2Ev,0,__ZNKSt3__17codecvtIDic10_mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__16locale5__impD2Ev
,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,0,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,0,__ZNSt3__18numpunctIcED2Ev,0,__ZNSt3__17codecvtIcc10_mbstate_tED0Ev
,0,__ZNKSt3__18numpunctIcE11do_groupingEv,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,__ZNSt9exceptionD1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__120__time_get_c_storageIwE3__xEv
,0,__ZNKSt3__17codecvtIcc10_mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__19basic_iosIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__110__stdinbufIwE9pbackfailEi,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc
,0,__ZNSt3__18numpunctIcED0Ev,0,__ZNSt3__112__tuple_implINS_15__tuple_indicesIJLj0EEEEJNS_12_GLOBAL__N_111__fake_bindEEEC2INS_5tupleIJS4_EEEvEEOT_,0,__ZNSt3__119__iostream_categoryD1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,0,__ZNSt3__16locale5facetD2Ev
,0,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__18messagesIcE8do_closeEi,0,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__15ctypeIwE10do_toupperEw
,0,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,0,__ZNKSt3__17codecvtIDic10_mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,0,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,0,__ZNSt3__17collateIwED1Ev
,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNKSt8bad_cast4whatEv,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt3__110moneypunctIcLb0EED1Ev
,0,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,0,__ZNSt3__15ctypeIwED0Ev,0,__ZNKSt13runtime_error4whatEv
,0,_free,0,__ZNSt3__16locale5facetD2Ev,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,0,__ZN10__cxxabiv123__fundamental_type_infoD0Ev
,0,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,0,_uselocale,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev
,0,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__120__time_get_c_storageIcE3__xEv,0,__ZNSt3__17collateIwED0Ev
,0,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE16do_always_noconvEv,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj
,0,__ZNSt3__18ios_base4InitD2Ev,0,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__17codecvtIcc10_mbstate_tE9do_lengthERS1_PKcS5_j
,0,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,0,__ZNSt3__114error_categoryD2Ev
,0,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,0,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi
,0,__ZNSt3__111__stdoutbufIcE8overflowEi,0,__ZNKSt3__120__time_get_c_storageIcE3__XEv,0,__ZNSt3__112__tuple_implINS_15__tuple_indicesIJLj0EEEEJNS_12_GLOBAL__N_111__fake_bindEEEC2IJLj0EEJS4_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS8_IJDpT2_EEEDpOT3_,0,__ZNSt3__16localeC2ERKS0_,0,__ZNKSt3__15ctypeIwE9do_narrowEwc
,0,__ZNSt3__112__do_messageD1Ev,0,__ZNSt3__111__stdoutbufIwE4syncEv,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__110moneypunctIwLb0EED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv
,0,__Z10testDecodeNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev,0,__ZNSt3__17codecvtIwc10_mbstate_tEC2Ej,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__17codecvtIcc10_mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_
,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev
,0,__ZNKSt3__17collateIwE7do_hashEPKwS3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI10_mbstate_tEEj,0,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,0,__ZNSt3__18ios_baseD0Ev
,0,__ZNSt3__110moneypunctIcLb1EED0Ev,0,__ZNSt9bad_allocD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__17codecvtIwc10_mbstate_tE16do_always_noconvEv,0,__ZNKSt3__120__time_get_c_storageIcE3__rEv
,0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,0,__ZN3ogc16Arithmetic_CodecC2Ev,0,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,0,___cxx_global_array_dtor53,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci
,0,___cxx_global_array_dtor56,0,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,0,__ZNKSt3__17codecvtIDic10_mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,0,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,0,__ZNKSt3__17codecvtIDic10_mbstate_tE13do_max_lengthEv
,0,__ZNKSt3__17codecvtIDic10_mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,0,__ZNSt9bad_allocD2Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev
,0,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__15ctypeIcE10do_tolowerEc,0,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv
,0,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,0,__ZNSt3__17codecvtIwc10_mbstate_tED0Ev,0,__ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,0,__ZNSt3__17codecvtIDsc10_mbstate_tED0Ev
,0,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,0,__ZNSt3__16locale5__impD2Ev,0,__ZNSt8bad_castD2Ev,0,__ZNKSt3__18numpunctIwE11do_truenameEv,0,__ZNSt3__18ios_baseD2Ev
,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZN3ogc16Arithmetic_CodecD2Ev,0,__ZNSt3__110__stdinbufIwE9underflowEv,0,__ZNSt3__18ios_base7failureD0Ev,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
,0,__ZNSt3__18ios_base4InitD2Ev,0,__ZNKSt3__15ctypeIwE5do_isEtw,0,__ZNSt3__110moneypunctIwLb1EED0Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv
,0,__ZNSt3__114error_categoryD2Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__17codecvtIDic10_mbstate_tE16do_always_noconvEv,0,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,0,___cxx_global_array_dtor105
,0,__ZNKSt3__17codecvtIwc10_mbstate_tE13do_max_lengthEv,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,0,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__17codecvtIDic10_mbstate_tED0Ev
,0,__ZNSt3__112system_errorD2Ev,0,__ZNSt3__111__stdoutbufIcED1Ev,0,__ZNSt3__110unique_ptrINS_6locale5facetENS_12_GLOBAL__N_17releaseEED2Ev,0,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,0,__ZNSt13runtime_errorC2EPKc
,0,__ZNSt3__16locale5__impD0Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNSt3__114__shared_countD2Ev,0,__ZNKSt3__119__iostream_category4nameEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv
,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,0,__ZNSt3__16localeD2Ev,0,__ZNSt3__18ios_base7failureD2Ev,0,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev
,0,__ZN3ogc18Adaptive_Bit_ModelC2Ev,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castD0Ev,0,__ZNKSt3__15ctypeIcE9do_narrowEcc,0,__ZNSt3__16locale5facetD2Ev
,0,__ZNSt3__112__do_nothingEPv,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,___cxx_global_array_dtor81,0,__ZNSt3__110moneypunctIcLb0EED0Ev,0,__ZNSt3__110unique_ptrINS_6locale5facetENS_12_GLOBAL__N_17releaseEEC2EPS2_
,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,0,__ZNKSt3__18numpunctIwE12do_falsenameEv
,0,__ZNSt3__17collateIcED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,0,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,0,__ZNSt3__111__stdoutbufIcED0Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev
,0,__ZNSt3__16locale5facetD2Ev,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__112system_errorD0Ev,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__111__stdoutbufIwED0Ev
,0,__ZNSt3__110__stdinbufIwE5uflowEv,0,__ZNKSt3__18numpunctIcE11do_truenameEv,0,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI10_mbstate_tEEj,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe
,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,0,__ZNSt3__16locale5__impC2Ej,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEi,0,___cxa_pure_virtual
,0,__ZNSt3__18numpunctIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt3__15ctypeIwE10do_tolowerEw,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,0,__ZNSt3__111__stdoutbufIcE4syncEv
,0,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,0,__ZNKSt3__17codecvtIwc10_mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,0,__ZNSt3__112__do_messageD0Ev,0,__ZNKSt3__17codecvtIwc10_mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_
,0,__ZNSt3__110__stdinbufIwED1Ev,0,__ZNKSt3__17collateIwE12do_transformEPKwS3_,0,__ZNSt3__114error_categoryD0Ev,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce
,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,0,__ZNSt8bad_castD2Ev
,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIDic10_mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw
,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__110__stdinbufIcE9underflowEv,0,__ZNKSt3__114error_category23default_error_conditionEi,0,__ZNKSt3__17codecvtIcc10_mbstate_tE13do_max_lengthEv,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib
,0,__ZNSt9bad_allocC2Ev,0,__ZNKSt3__17codecvtIcc10_mbstate_tE16do_always_noconvEv,0,__ZNKSt3__18messagesIwE8do_closeEi,0,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,0,__ZNSt3__112system_errorD2Ev
,0,__ZNKSt9bad_alloc4whatEv,0,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,0,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv
,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZN38EmscriptenBindingInitializer_my_moduleC2Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,___ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_EE6invokeEPFS8_S8_EPNS0_11BindingTypeIS8_E3$_0E_
,0,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNSt3__114__shared_countD2Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm
,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd
,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__17codecvtIcc10_mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,0,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv
,0,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt11logic_error4whatEv,0,__ZNKSt3__119__iostream_category7messageEi,0,__ZNSt3__18numpunctIcEC2Ej,0,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv
,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__18ios_base4InitC2Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,0,__ZNKSt3__17collateIcE12do_transformEPKcS3_,0,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi
,0,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,0,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv
,0,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,0,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,0,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNSt3__18ios_baseD2Ev
,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIcED0Ev,0,__ZNSt3__16localeC2Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm
,0,__ZNSt3__119__iostream_categoryD0Ev,0,__ZNSt3__110moneypunctIwLb1EED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,0,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
,0,__ZNSt3__110moneypunctIcLb1EED1Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__120__time_get_c_storageIcE3__cEv,0,__ZNSt3__17codecvtIwc10_mbstate_tED2Ev
,0,__ZN3ogc19Adaptive_Data_ModelD2Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__117__call_once_paramINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEC2EOS4_
,0,__ZNKSt3__120__time_get_c_storageIwE3__XEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__16locale5facetD2Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev
,0,__ZNSt3__15ctypeIcEC2EPKtbj,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev
,0,__ZNSt3__111__stdoutbufIwE8overflowEi,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm
,0,__ZNSt3__19basic_iosIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNSt9exceptionD0Ev
,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,___cxx_global_array_dtor,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZN10__cxxabiv117__class_type_infoD0Ev
,0,__ZNSt3__18messagesIwED1Ev,0,__ZNSt3__111__stdoutbufIwED1Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNSt3__16locale5facetD2Ev
,0,__ZNSt3__114__shared_countD0Ev,0,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,0,__ZNSt3__16locale5facetD2Ev
,0,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,0,___getTypeName,0,__ZNKSt3__17codecvtIDsc10_mbstate_tE11do_encodingEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEi,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev
,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt13runtime_errorD0Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__16locale5facetD2Ev,0,___cxx_global_array_dtor120];
// EMSCRIPTEN_START_FUNCS
function __ZNK3ogc14IndexedFaceSet9GetNCoordEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc14IndexedFaceSet10GetNNormalEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc14IndexedFaceSet12GetNTexCoordEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+20)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc14IndexedFaceSet14GetNCoordIndexEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN3ogc14IndexedFaceSet13SetCoordIndexEPl($this, $coordIndex) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$coordIndex;
 var $3=$1;
 var $4=$2;
 var $5=(($3+4)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc14IndexedFaceSet8SetCoordEPf($this, $coord) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$coord;
 var $3=$1;
 var $4=$2;
 var $5=(($3+112)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc14IndexedFaceSet9SetNormalEPf($this, $normal) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$normal;
 var $3=$1;
 var $4=$2;
 var $5=(($3+116)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc14IndexedFaceSet11SetTexCoordEPf($this, $texCoord) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$texCoord;
 var $3=$1;
 var $4=$2;
 var $5=(($3+124)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __Z10testDecodeNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result, $stream) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 26016)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $decoder=__stackBase__;
   var $bstream=(__stackBase__)+(3328);
   var $83;
   var $84;
   var $ifs=(__stackBase__)+(3344);
   var $vertexSize;
   var $normalSize;
   var $texcoordSize;
   var $indicesSize;
   var $85;
   var $86;
   __ZN3ogc13SC3DMCDecoderC1Ev($decoder);
   (function() { try { __THREW__ = 0; return __ZN3ogc12BinaryStreamC1Ej($bstream, 4096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 35; break; }
  case 2: 
   (function() { try { __THREW__ = 0; return __ZN3ogc14IndexedFaceSetC1Ev($ifs) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 36; break; }
  case 3: 
   $82=$stream;
   var $89=$82;
   $81=$89;
   var $90=$81;
   $80=$90;
   var $91=$80;
   $79=$91;
   var $92=$79;
   var $93=(($92)|0);
   $78=$93;
   var $94=$78;
   var $95=$94;
   $77=$95;
   var $96=$77;
   var $97=(($96)|0);
   var $98=(($97)|0);
   var $99=$98;
   var $100=(($99)|0);
   var $101=$100;
   var $102=HEAP8[($101)];
   var $103=(($102)&(255));
   var $104=$103 & 1;
   var $105=(($104)|(0))!=0;
   if ($105) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $73=$91;
   var $107=$73;
   var $108=(($107)|0);
   $72=$108;
   var $109=$72;
   var $110=$109;
   $71=$110;
   var $111=$71;
   var $112=(($111)|0);
   var $113=(($112)|0);
   var $114=$113;
   var $115=(($114+8)|0);
   var $116=HEAP32[(($115)>>2)];
   var $128 = $116;label = 6; break;
  case 5: 
   $76=$91;
   var $118=$76;
   var $119=(($118)|0);
   $75=$119;
   var $120=$75;
   var $121=$120;
   $74=$121;
   var $122=$74;
   var $123=(($122)|0);
   var $124=(($123)|0);
   var $125=$124;
   var $126=(($125+1)|0);
   var $127=(($126)|0);
   var $128 = $127;label = 6; break;
  case 6: 
   var $128;
   $70=$stream;
   var $129=$70;
   $69=$129;
   var $130=$69;
   $68=$130;
   var $131=$68;
   var $132=(($131)|0);
   $67=$132;
   var $133=$67;
   var $134=$133;
   $66=$134;
   var $135=$66;
   var $136=(($135)|0);
   var $137=(($136)|0);
   var $138=$137;
   var $139=(($138)|0);
   var $140=$139;
   var $141=HEAP8[($140)];
   var $142=(($141)&(255));
   var $143=$142 & 1;
   var $144=(($143)|(0))!=0;
   if ($144) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $62=$130;
   var $146=$62;
   var $147=(($146)|0);
   $61=$147;
   var $148=$61;
   var $149=$148;
   $60=$149;
   var $150=$60;
   var $151=(($150)|0);
   var $152=(($151)|0);
   var $153=$152;
   var $154=(($153+4)|0);
   var $155=HEAP32[(($154)>>2)];
   var $170 = $155;label = 9; break;
  case 8: 
   $65=$130;
   var $157=$65;
   var $158=(($157)|0);
   $64=$158;
   var $159=$64;
   var $160=$159;
   $63=$160;
   var $161=$63;
   var $162=(($161)|0);
   var $163=(($162)|0);
   var $164=$163;
   var $165=(($164)|0);
   var $166=$165;
   var $167=HEAP8[($166)];
   var $168=(($167)&(255));
   var $169=$168 >> 1;
   var $170 = $169;label = 9; break;
  case 9: 
   var $170;
   var $171 = (function() { try { __THREW__ = 0; return __ZN3ogc12BinaryStream14LoadFromBufferEPhm($bstream, $128, $170) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 37; break; }
  case 10: 
   var $173 = (function() { try { __THREW__ = 0; return __ZN3ogc13SC3DMCDecoder12DecodeHeaderERNS_14IndexedFaceSetERKNS_12BinaryStreamE($decoder, $ifs, $bstream) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 37; break; }
  case 11: 
   var $175 = (function() { try { __THREW__ = 0; return __ZNK3ogc14IndexedFaceSet9GetNCoordEv($ifs) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 37; break; }
  case 12: 
   var $177=((($175)*(3))&-1);
   var $178=($177<<2);
   $vertexSize=$178;
   var $179 = (function() { try { __THREW__ = 0; return __ZNK3ogc14IndexedFaceSet10GetNNormalEv($ifs) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 37; break; }
  case 13: 
   var $181=((($179)*(3))&-1);
   var $182=($181<<2);
   $normalSize=$182;
   var $183 = (function() { try { __THREW__ = 0; return __ZNK3ogc14IndexedFaceSet12GetNTexCoordEv($ifs) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 37; break; }
  case 14: 
   var $185=($183<<1);
   var $186=($185<<2);
   $texcoordSize=$186;
   var $187 = (function() { try { __THREW__ = 0; return __ZNK3ogc14IndexedFaceSet14GetNCoordIndexEv($ifs) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 37; break; }
  case 15: 
   var $189=((($187)*(3))&-1);
   var $190=($189<<2);
   $indicesSize=$190;
   $85=0;
   $59=$agg_result;
   var $191=$59;
   $58=$191;
   var $192=$58;
   var $193=$192;
   var $194=(($192)|0);
   $57=$194;
   var $195=$57;
   $56=$195;
   var $196=$56;
   var $197=$196;
   $55=$197;
   var $198=$55;
   var $199=$198;
   $54=$199;
   var $200=$54;
   var $201=(($198)|0);
   $53=$192;
   var $202=$53;
   var $203=(($202)|0);
   $52=$203;
   var $204=$52;
   var $205=$204;
   $51=$205;
   var $206=$51;
   var $207=(($206)|0);
   var $208=(($207)|0);
   var $209=$208;
   var $210=(($209)|0);
   $__a_i_i_i=$210;
   $__i_i_i_i=0;
   label = 16; break;
  case 16: 
   var $212=$__i_i_i_i;
   var $213=(($212)>>>(0)) < 3;
   if ($213) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $215=$__i_i_i_i;
   var $216=$__a_i_i_i;
   var $217=(($216+($215<<2))|0);
   HEAP32[(($217)>>2)]=0;
   var $218=$__i_i_i_i;
   var $219=((($218)+(1))|0);
   $__i_i_i_i=$219;
   label = 16; break;
  case 18: 
   var $220=$vertexSize;
   var $221=$normalSize;
   var $222=((($220)+($221))|0);
   var $223=$texcoordSize;
   var $224=((($222)+($223))|0);
   var $225=$indicesSize;
   var $226=((($224)+($225))|0);
   $49=$agg_result;
   $50=$226;
   var $227=$49;
   var $228=$50;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($227, $228, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 38; break; }
  case 19: 
   label = 20; break;
  case 20: 
   $48=$agg_result;
   var $230=$48;
   $47=$230;
   var $231=$47;
   $46=$231;
   var $232=$46;
   $45=$232;
   var $233=$45;
   var $234=(($233)|0);
   $44=$234;
   var $235=$44;
   var $236=$235;
   $43=$236;
   var $237=$43;
   var $238=(($237)|0);
   var $239=(($238)|0);
   var $240=$239;
   var $241=(($240)|0);
   var $242=$241;
   var $243=HEAP8[($242)];
   var $244=(($243)&(255));
   var $245=$244 & 1;
   var $246=(($245)|(0))!=0;
   if ($246) { label = 21; break; } else { label = 22; break; }
  case 21: 
   $39=$232;
   var $248=$39;
   var $249=(($248)|0);
   $38=$249;
   var $250=$38;
   var $251=$250;
   $37=$251;
   var $252=$37;
   var $253=(($252)|0);
   var $254=(($253)|0);
   var $255=$254;
   var $256=(($255+8)|0);
   var $257=HEAP32[(($256)>>2)];
   var $269 = $257;label = 23; break;
  case 22: 
   $42=$232;
   var $259=$42;
   var $260=(($259)|0);
   $41=$260;
   var $261=$41;
   var $262=$261;
   $40=$262;
   var $263=$40;
   var $264=(($263)|0);
   var $265=(($264)|0);
   var $266=$265;
   var $267=(($266+1)|0);
   var $268=(($267)|0);
   var $269 = $268;label = 23; break;
  case 23: 
   var $269;
   var $270=$269;
   (function() { try { __THREW__ = 0; return __ZN3ogc14IndexedFaceSet13SetCoordIndexEPl($ifs, $270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 38; break; }
  case 24: 
   $36=$agg_result;
   var $272=$36;
   $35=$272;
   var $273=$35;
   $34=$273;
   var $274=$34;
   $33=$274;
   var $275=$33;
   var $276=(($275)|0);
   $32=$276;
   var $277=$32;
   var $278=$277;
   $31=$278;
   var $279=$31;
   var $280=(($279)|0);
   var $281=(($280)|0);
   var $282=$281;
   var $283=(($282)|0);
   var $284=$283;
   var $285=HEAP8[($284)];
   var $286=(($285)&(255));
   var $287=$286 & 1;
   var $288=(($287)|(0))!=0;
   if ($288) { label = 25; break; } else { label = 26; break; }
  case 25: 
   $27=$274;
   var $290=$27;
   var $291=(($290)|0);
   $26=$291;
   var $292=$26;
   var $293=$292;
   $25=$293;
   var $294=$25;
   var $295=(($294)|0);
   var $296=(($295)|0);
   var $297=$296;
   var $298=(($297+8)|0);
   var $299=HEAP32[(($298)>>2)];
   var $311 = $299;label = 27; break;
  case 26: 
   $30=$274;
   var $301=$30;
   var $302=(($301)|0);
   $29=$302;
   var $303=$29;
   var $304=$303;
   $28=$304;
   var $305=$28;
   var $306=(($305)|0);
   var $307=(($306)|0);
   var $308=$307;
   var $309=(($308+1)|0);
   var $310=(($309)|0);
   var $311 = $310;label = 27; break;
  case 27: 
   var $311;
   var $312=$indicesSize;
   var $313=(($311+$312)|0);
   var $314=$313;
   (function() { try { __THREW__ = 0; return __ZN3ogc14IndexedFaceSet8SetCoordEPf($ifs, $314) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 38; break; }
  case 28: 
   var $316 = (function() { try { __THREW__ = 0; return __ZNK3ogc14IndexedFaceSet10GetNNormalEv($ifs) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 38; break; }
  case 29: 
   var $318=(($316)>>>(0)) > 0;
   if ($318) { label = 30; break; } else { label = 39; break; }
  case 30: 
   $24=$agg_result;
   var $320=$24;
   $23=$320;
   var $321=$23;
   $22=$321;
   var $322=$22;
   $21=$322;
   var $323=$21;
   var $324=(($323)|0);
   $20=$324;
   var $325=$20;
   var $326=$325;
   $19=$326;
   var $327=$19;
   var $328=(($327)|0);
   var $329=(($328)|0);
   var $330=$329;
   var $331=(($330)|0);
   var $332=$331;
   var $333=HEAP8[($332)];
   var $334=(($333)&(255));
   var $335=$334 & 1;
   var $336=(($335)|(0))!=0;
   if ($336) { label = 31; break; } else { label = 32; break; }
  case 31: 
   $15=$322;
   var $338=$15;
   var $339=(($338)|0);
   $14=$339;
   var $340=$14;
   var $341=$340;
   $13=$341;
   var $342=$13;
   var $343=(($342)|0);
   var $344=(($343)|0);
   var $345=$344;
   var $346=(($345+8)|0);
   var $347=HEAP32[(($346)>>2)];
   var $359 = $347;label = 33; break;
  case 32: 
   $18=$322;
   var $349=$18;
   var $350=(($349)|0);
   $17=$350;
   var $351=$17;
   var $352=$351;
   $16=$352;
   var $353=$16;
   var $354=(($353)|0);
   var $355=(($354)|0);
   var $356=$355;
   var $357=(($356+1)|0);
   var $358=(($357)|0);
   var $359 = $358;label = 33; break;
  case 33: 
   var $359;
   var $360=$indicesSize;
   var $361=(($359+$360)|0);
   var $362=$vertexSize;
   var $363=(($361+$362)|0);
   var $364=$363;
   (function() { try { __THREW__ = 0; return __ZN3ogc14IndexedFaceSet9SetNormalEPf($ifs, $364) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 38; break; }
  case 34: 
   label = 39; break;
  case 35: 
   var $367$0 = ___cxa_find_matching_catch(-1, -1); $367$1 = tempRet0;
   var $368=$367$0;
   $83=$368;
   var $369=$367$1;
   $84=$369;
   label = 52; break;
  case 36: 
   var $371$0 = ___cxa_find_matching_catch(-1, -1); $371$1 = tempRet0;
   var $372=$371$0;
   $83=$372;
   var $373=$371$1;
   $84=$373;
   label = 51; break;
  case 37: 
   var $375$0 = ___cxa_find_matching_catch(-1, -1); $375$1 = tempRet0;
   var $376=$375$0;
   $83=$376;
   var $377=$375$1;
   $84=$377;
   label = 50; break;
  case 38: 
   var $379$0 = ___cxa_find_matching_catch(-1, -1); $379$1 = tempRet0;
   var $380=$379$0;
   $83=$380;
   var $381=$379$1;
   $84=$381;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result);
   label = 50; break;
  case 39: 
   var $383 = (function() { try { __THREW__ = 0; return __ZNK3ogc14IndexedFaceSet12GetNTexCoordEv($ifs) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 40; break; } else { label = 38; break; }
  case 40: 
   var $385=(($383)>>>(0)) > 0;
   if ($385) { label = 41; break; } else { label = 46; break; }
  case 41: 
   $12=$agg_result;
   var $387=$12;
   $11=$387;
   var $388=$11;
   $10=$388;
   var $389=$10;
   $9=$389;
   var $390=$9;
   var $391=(($390)|0);
   $8=$391;
   var $392=$8;
   var $393=$392;
   $7=$393;
   var $394=$7;
   var $395=(($394)|0);
   var $396=(($395)|0);
   var $397=$396;
   var $398=(($397)|0);
   var $399=$398;
   var $400=HEAP8[($399)];
   var $401=(($400)&(255));
   var $402=$401 & 1;
   var $403=(($402)|(0))!=0;
   if ($403) { label = 42; break; } else { label = 43; break; }
  case 42: 
   $3=$389;
   var $405=$3;
   var $406=(($405)|0);
   $2=$406;
   var $407=$2;
   var $408=$407;
   $1=$408;
   var $409=$1;
   var $410=(($409)|0);
   var $411=(($410)|0);
   var $412=$411;
   var $413=(($412+8)|0);
   var $414=HEAP32[(($413)>>2)];
   var $426 = $414;label = 44; break;
  case 43: 
   $6=$389;
   var $416=$6;
   var $417=(($416)|0);
   $5=$417;
   var $418=$5;
   var $419=$418;
   $4=$419;
   var $420=$4;
   var $421=(($420)|0);
   var $422=(($421)|0);
   var $423=$422;
   var $424=(($423+1)|0);
   var $425=(($424)|0);
   var $426 = $425;label = 44; break;
  case 44: 
   var $426;
   var $427=$indicesSize;
   var $428=(($426+$427)|0);
   var $429=$vertexSize;
   var $430=(($428+$429)|0);
   var $431=$normalSize;
   var $432=(($430+$431)|0);
   var $433=$432;
   (function() { try { __THREW__ = 0; return __ZN3ogc14IndexedFaceSet11SetTexCoordEPf($ifs, $433) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 38; break; }
  case 45: 
   label = 46; break;
  case 46: 
   var $436 = (function() { try { __THREW__ = 0; return __ZN3ogc13SC3DMCDecoder14DecodePlayloadERNS_14IndexedFaceSetERKNS_12BinaryStreamE($decoder, $ifs, $bstream) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 47; break; } else { label = 38; break; }
  case 47: 
   $85=1;
   $86=1;
   var $438=$85;
   if ($438) { label = 49; break; } else { label = 48; break; }
  case 48: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result);
   label = 49; break;
  case 49: 
   __ZN3ogc14IndexedFaceSetD1Ev($ifs);
   __ZN3ogc12BinaryStreamD1Ev($bstream);
   __ZN3ogc13SC3DMCDecoderD1Ev($decoder);
   STACKTOP = __stackBase__;
   return;
  case 50: 
   __ZN3ogc14IndexedFaceSetD1Ev($ifs);
   label = 51; break;
  case 51: 
   __ZN3ogc12BinaryStreamD1Ev($bstream);
   label = 52; break;
  case 52: 
   __ZN3ogc13SC3DMCDecoderD1Ev($decoder);
   label = 53; break;
  case 53: 
   var $445=$83;
   var $446=$84;
   var $447$0=$445;
   var $447$1=0;
   var $448$0=$447$0;
   var $448$1=$446;
   ___resumeException($448$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc13SC3DMCDecoderC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc13SC3DMCDecoderC2Ev($2);
 return;
}
function __ZN3ogc12BinaryStreamC1Ej($this, $size) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$size;
 var $3=$1;
 var $4=$2;
 __ZN3ogc12BinaryStreamC2Ej($3, $4);
 return;
}
function __ZN3ogc14IndexedFaceSetC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc14IndexedFaceSetC2Ev($2);
 return;
}
function __ZN3ogc12BinaryStream14LoadFromBufferEPhm($this, $buffer, $bufferSize) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$buffer;
 $3=$bufferSize;
 var $4=$1;
 var $5=(($4)|0);
 var $6=$3;
 __ZN3ogc6VectorIhE8AllocateEj($5, $6);
 var $7=(($4)|0);
 var $8=__ZN3ogc6VectorIhE9GetBufferEv($7);
 var $9=$2;
 var $10=$3;
 assert($10 % 1 === 0);(_memcpy($8, $9, $10)|0);
 var $11=(($4)|0);
 var $12=$3;
 __ZN3ogc6VectorIhE7SetSizeEj($11, $12);
 return 0;
}
function __ZN3ogc14IndexedFaceSetD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc14IndexedFaceSetD2Ev($2);
 return;
}
function __ZN3ogc12BinaryStreamD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc12BinaryStreamD2Ev($2);
 return;
}
function __ZN3ogc13SC3DMCDecoderD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc13SC3DMCDecoderD2Ev($2);
 return;
}
function ___cxx_global_var_init() {
 var label = 0;
 __ZN38EmscriptenBindingInitializer_my_moduleC2Ev(20352);
 return;
}
function __ZN38EmscriptenBindingInitializer_my_moduleC2Ev($this) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2=__stackBase__;
 $1=$this;
 var $3=$1;
 __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_(((4664)|0), 362, $2);
 STACKTOP = __stackBase__;
 return;
}
function __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_($name, $fn, $0) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0 = STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);;;HEAP8[($0)]=HEAP8[(tempParam)];
 var $2;
 var $3;
 var $args=__stackBase__;
 $2=$name;
 $3=$fn;
 __ZN10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEESB_EEC1Ev($args);
 var $4=$2;
 var $5=(($args)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($args+4)|0);
 var $8=(($7)|0);
 var $9=$3;
 var $10=$9;
 __embind_register_function($4, $6, $8, (700), $10);
 STACKTOP = __stackBase__;
 return;
}
function __ZN10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEESB_EEC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEESB_EEC2Ev($2);
 return;
}
function ___ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_EE6invokeEPFS8_S8_EPNS0_11BindingTypeIS8_E3$_0E_($fn, $args) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3=__stackBase__;
   var $4=(__stackBase__)+(16);
   var $5;
   var $6;
   $1=$fn;
   $2=$args;
   var $7=$1;
   var $8=$2;
   ___ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_3$_0E_($4, $8);
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$7]($3, $4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $10 = (function() { try { __THREW__ = 0; return __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
  case 3: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
   STACKTOP = __stackBase__;
   return $10;
  case 4: 
   var $13$0 = ___cxa_find_matching_catch(-1, -1); $13$1 = tempRet0;
   var $14=$13$0;
   $5=$14;
   var $15=$13$1;
   $6=$15;
   label = 6; break;
  case 5: 
   var $17$0 = ___cxa_find_matching_catch(-1, -1); $17$1 = tempRet0;
   var $18=$17$0;
   $5=$18;
   var $19=$17$1;
   $6=$19;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
   label = 6; break;
  case 6: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
   label = 7; break;
  case 7: 
   var $22=$5;
   var $23=$6;
   var $24$0=$22;
   var $24$1=0;
   var $25$0=$24$0;
   var $25$1=$23;
   ___resumeException($25$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0;
 return 18608;
}
function __ZN10emscripten8internal8ArgTypesILi2EJEE4fillIJNS_18allow_raw_pointersEEEEvPPKNS0_7_TYPEIDE($argTypes) {
 var label = 0;
 var $1;
 $1=$argTypes;
 return;
}
function __ZN3ogc18SC3DMCEncodeParamsD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZN3ogc14IndexedFaceSetD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZN3ogc16SystemEndiannessEv() {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $num=__stackBase__;
 HEAP32[(($num)>>2)]=1;
 var $1=$num;
 var $2=HEAP8[($1)];
 var $3=(($2 << 24) >> 24);
 var $4=(($3)|(0))==1;
 var $5=$4 ? 1 : 0;
 STACKTOP = __stackBase__;
 return $5;
}
function __ZN3ogc6VectorIhE9GetBufferEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN3ogc6VectorIhEC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($2+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($2)|0);
 HEAP32[(($5)>>2)]=0;
 return;
}
function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($v) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $wt;
   $45=$v;
   var $46=$45;
   $44=$46;
   var $47=$44;
   $43=$47;
   var $48=$43;
   $42=$48;
   var $49=$42;
   var $50=(($49)|0);
   $41=$50;
   var $51=$41;
   var $52=$51;
   $40=$52;
   var $53=$40;
   var $54=(($53)|0);
   var $55=(($54)|0);
   var $56=$55;
   var $57=(($56)|0);
   var $58=$57;
   var $59=HEAP8[($58)];
   var $60=(($59)&(255));
   var $61=$60 & 1;
   var $62=(($61)|(0))!=0;
   if ($62) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $36=$48;
   var $64=$36;
   var $65=(($64)|0);
   $35=$65;
   var $66=$35;
   var $67=$66;
   $34=$67;
   var $68=$34;
   var $69=(($68)|0);
   var $70=(($69)|0);
   var $71=$70;
   var $72=(($71+4)|0);
   var $73=HEAP32[(($72)>>2)];
   var $88 = $73;label = 4; break;
  case 3: 
   $39=$48;
   var $75=$39;
   var $76=(($75)|0);
   $38=$76;
   var $77=$38;
   var $78=$77;
   $37=$78;
   var $79=$37;
   var $80=(($79)|0);
   var $81=(($80)|0);
   var $82=$81;
   var $83=(($82)|0);
   var $84=$83;
   var $85=HEAP8[($84)];
   var $86=(($85)&(255));
   var $87=$86 >> 1;
   var $88 = $87;label = 4; break;
  case 4: 
   var $88;
   var $89=((($88)+(4))|0);
   var $90=_malloc($89);
   var $91=$90;
   $wt=$91;
   var $92=$45;
   $11=$92;
   var $93=$11;
   $10=$93;
   var $94=$10;
   $9=$94;
   var $95=$9;
   var $96=(($95)|0);
   $8=$96;
   var $97=$8;
   var $98=$97;
   $7=$98;
   var $99=$7;
   var $100=(($99)|0);
   var $101=(($100)|0);
   var $102=$101;
   var $103=(($102)|0);
   var $104=$103;
   var $105=HEAP8[($104)];
   var $106=(($105)&(255));
   var $107=$106 & 1;
   var $108=(($107)|(0))!=0;
   if ($108) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $3=$94;
   var $110=$3;
   var $111=(($110)|0);
   $2=$111;
   var $112=$2;
   var $113=$112;
   $1=$113;
   var $114=$1;
   var $115=(($114)|0);
   var $116=(($115)|0);
   var $117=$116;
   var $118=(($117+4)|0);
   var $119=HEAP32[(($118)>>2)];
   var $134 = $119;label = 7; break;
  case 6: 
   $6=$94;
   var $121=$6;
   var $122=(($121)|0);
   $5=$122;
   var $123=$5;
   var $124=$123;
   $4=$124;
   var $125=$4;
   var $126=(($125)|0);
   var $127=(($126)|0);
   var $128=$127;
   var $129=(($128)|0);
   var $130=$129;
   var $131=HEAP8[($130)];
   var $132=(($131)&(255));
   var $133=$132 >> 1;
   var $134 = $133;label = 7; break;
  case 7: 
   var $134;
   var $135=$wt;
   var $136=(($135)|0);
   HEAP32[(($136)>>2)]=$134;
   var $137=$wt;
   var $138=(($137+4)|0);
   var $139=$138;
   var $140=$45;
   $22=$140;
   var $141=$22;
   $21=$141;
   var $142=$21;
   $20=$142;
   var $143=$20;
   var $144=(($143)|0);
   $19=$144;
   var $145=$19;
   var $146=$145;
   $18=$146;
   var $147=$18;
   var $148=(($147)|0);
   var $149=(($148)|0);
   var $150=$149;
   var $151=(($150)|0);
   var $152=$151;
   var $153=HEAP8[($152)];
   var $154=(($153)&(255));
   var $155=$154 & 1;
   var $156=(($155)|(0))!=0;
   if ($156) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $14=$142;
   var $158=$14;
   var $159=(($158)|0);
   $13=$159;
   var $160=$13;
   var $161=$160;
   $12=$161;
   var $162=$12;
   var $163=(($162)|0);
   var $164=(($163)|0);
   var $165=$164;
   var $166=(($165+8)|0);
   var $167=HEAP32[(($166)>>2)];
   var $179 = $167;label = 10; break;
  case 9: 
   $17=$142;
   var $169=$17;
   var $170=(($169)|0);
   $16=$170;
   var $171=$16;
   var $172=$171;
   $15=$172;
   var $173=$15;
   var $174=(($173)|0);
   var $175=(($174)|0);
   var $176=$175;
   var $177=(($176+1)|0);
   var $178=(($177)|0);
   var $179 = $178;label = 10; break;
  case 10: 
   var $179;
   var $180=$45;
   $33=$180;
   var $181=$33;
   $32=$181;
   var $182=$32;
   $31=$182;
   var $183=$31;
   var $184=(($183)|0);
   $30=$184;
   var $185=$30;
   var $186=$185;
   $29=$186;
   var $187=$29;
   var $188=(($187)|0);
   var $189=(($188)|0);
   var $190=$189;
   var $191=(($190)|0);
   var $192=$191;
   var $193=HEAP8[($192)];
   var $194=(($193)&(255));
   var $195=$194 & 1;
   var $196=(($195)|(0))!=0;
   if ($196) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $25=$182;
   var $198=$25;
   var $199=(($198)|0);
   $24=$199;
   var $200=$24;
   var $201=$200;
   $23=$201;
   var $202=$23;
   var $203=(($202)|0);
   var $204=(($203)|0);
   var $205=$204;
   var $206=(($205+4)|0);
   var $207=HEAP32[(($206)>>2)];
   var $222 = $207;label = 13; break;
  case 12: 
   $28=$182;
   var $209=$28;
   var $210=(($209)|0);
   $27=$210;
   var $211=$27;
   var $212=$211;
   $26=$212;
   var $213=$26;
   var $214=(($213)|0);
   var $215=(($214)|0);
   var $216=$215;
   var $217=(($216)|0);
   var $218=$217;
   var $219=HEAP8[($218)];
   var $220=(($219)&(255));
   var $221=$220 >> 1;
   var $222 = $221;label = 13; break;
  case 13: 
   var $222;
   assert($222 % 1 === 0);(_memcpy($139, $179, $222)|0);
   var $223=$wt;
   return $223;
  default: assert(0, "bad label: " + label);
 }
}
function ___ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_3$_0E_($agg_result, $v) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 $11=$v;
 var $12=$11;
 var $13=(($12+4)|0);
 var $14=(($13)|0);
 var $15=$11;
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 $8=$agg_result;
 $9=$14;
 $10=$17;
 var $18=$8;
 var $19=$9;
 var $20=$10;
 $5=$18;
 $6=$19;
 $7=$20;
 var $21=$5;
 var $22=$21;
 var $23=(($21)|0);
 $4=$23;
 var $24=$4;
 $3=$24;
 var $25=$3;
 var $26=$25;
 $2=$26;
 var $27=$2;
 var $28=$27;
 $1=$28;
 var $29=$1;
 var $30=(($27)|0);
 var $31=$6;
 var $32=$7;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($21, $31, $32);
 return;
}
function __ZN10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEESB_EEC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=2;
 var $4=(($2+4)|0);
 var $5=(($4)|0);
 __ZN10emscripten8internal8ArgTypesILi0EJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_EE4fillIJNS_18allow_raw_pointersEEEEvPPKNS0_7_TYPEIDE($5);
 return;
}
function __ZN10emscripten8internal8ArgTypesILi0EJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_EE4fillIJNS_18allow_raw_pointersEEEEvPPKNS0_7_TYPEIDE($argTypes) {
 var label = 0;
 var $1;
 $1=$argTypes;
 var $2=__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv();
 var $3=$1;
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=(($4+4)|0);
 __ZN10emscripten8internal8ArgTypesILi1EJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE4fillIJNS_18allow_raw_pointersEEEEvPPKNS0_7_TYPEIDE($5);
 return;
}
function __ZN10emscripten8internal8ArgTypesILi1EJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE4fillIJNS_18allow_raw_pointersEEEEvPPKNS0_7_TYPEIDE($argTypes) {
 var label = 0;
 var $1;
 $1=$argTypes;
 var $2=__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv();
 var $3=$1;
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=(($4+4)|0);
 __ZN10emscripten8internal8ArgTypesILi2EJEE4fillIJNS_18allow_raw_pointersEEEEvPPKNS0_7_TYPEIDE($5);
 return;
}
function __ZN3ogc13SC3DMCDecoderD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+3312)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=$4;
   __ZdaPv($7);
   label = 3; break;
  case 3: 
   var $9=(($2+3128)|0);
   __ZN3ogc19TriangleListDecoderD1Ev($9);
   var $10=(($2+8)|0);
   __ZN3ogc18SC3DMCEncodeParamsD1Ev($10);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc19TriangleListDecoderD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc19TriangleListDecoderD2Ev($2);
 return;
}
function __ZN3ogc18SC3DMCEncodeParamsD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc18SC3DMCEncodeParamsD2Ev($2);
 return;
}
function __ZN3ogc19TriangleListDecoderD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+156)|0);
 __ZN3ogc12TriangleFansD1Ev($3);
 var $4=(($2+84)|0);
 __ZN3ogc22CompressedTriangleFansD1Ev($4);
 var $5=(($2+64)|0);
 __ZN3ogc13AdjacencyInfoD1Ev($5);
 return;
}
function __ZN3ogc12TriangleFansD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc12TriangleFansD2Ev($2);
 return;
}
function __ZN3ogc22CompressedTriangleFansD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc22CompressedTriangleFansD2Ev($2);
 return;
}
function __ZN3ogc13AdjacencyInfoD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc13AdjacencyInfoD2Ev($2);
 return;
}
function __ZN3ogc13AdjacencyInfoD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+12)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=$4;
   __ZdaPv($7);
   label = 3; break;
  case 3: 
   var $9=(($2+16)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==0;
   if ($11) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $13=$10;
   __ZdaPv($13);
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc22CompressedTriangleFansD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+60)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   __ZdaPv($4);
   label = 3; break;
  case 3: 
   var $8=(($2+48)|0);
   __ZN3ogc6VectorIlED1Ev($8);
   var $9=(($2+36)|0);
   __ZN3ogc6VectorIlED1Ev($9);
   var $10=(($2+24)|0);
   __ZN3ogc6VectorIlED1Ev($10);
   var $11=(($2+12)|0);
   __ZN3ogc6VectorIlED1Ev($11);
   var $12=(($2)|0);
   __ZN3ogc6VectorIlED1Ev($12);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc6VectorIlED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc6VectorIlED2Ev($2);
 return;
}
function __ZN3ogc6VectorIlED2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=$4;
   __ZdaPv($7);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc12TriangleFansD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+16)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=$4;
   __ZdaPv($7);
   label = 3; break;
  case 3: 
   var $9=(($2+20)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==0;
   if ($11) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $13=$10;
   __ZdaPv($13);
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc12BinaryStreamD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZN3ogc6VectorIhED1Ev($3);
 return;
}
function __ZN3ogc6VectorIhED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc6VectorIhED2Ev($2);
 return;
}
function __ZN3ogc6VectorIhED2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   __ZdaPv($4);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc6VectorIhE8AllocateEj($this, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $tmp;
   $1=$this;
   $2=$size;
   var $3=$1;
   var $4=$2;
   var $5=(($3+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($4)>>>(0)) > (($6)>>>(0));
   if ($7) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $9=$2;
   var $10=(($3+4)|0);
   HEAP32[(($10)>>2)]=$9;
   var $11=(($3+4)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=__Znaj($12);
   $tmp=$13;
   var $14=(($3+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)>>>(0)) > 0;
   if ($16) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $18=$tmp;
   var $19=(($3)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($3+8)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$22;
   assert($23 % 1 === 0);(_memcpy($18, $20, $23)|0);
   var $24=(($3)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0))==0;
   if ($26) { label = 5; break; } else { label = 4; break; }
  case 4: 
   __ZdaPv($25);
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $30=$tmp;
   var $31=(($3)|0);
   HEAP32[(($31)>>2)]=$30;
   label = 7; break;
  case 7: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc14IndexedFaceSetC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 _memset($3, 0, 22672);
 var $4=(($2+22668)|0);
 HEAP8[($4)]=1;
 var $5=(($2+22669)|0);
 HEAP8[($5)]=1;
 var $6=(($2+22670)|0);
 HEAP8[($6)]=1;
 var $7=(($2+22671)|0);
 HEAP8[($7)]=1;
 var $8=(($2+22664)|0);
 HEAPF32[(($8)>>2)]=30;
 return;
}
function __ZN3ogc12BinaryStreamC2Ej($this, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$size;
   var $5=$1;
   var $6=(($5)|0);
   __ZN3ogc6VectorIhEC1Ev($6);
   var $7 = (function() { try { __THREW__ = 0; return __ZN3ogc16SystemEndiannessEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $9=(($5+12)|0);
   HEAP32[(($9)>>2)]=$7;
   var $10=(($5)|0);
   var $11=$2;
   (function() { try { __THREW__ = 0; return __ZN3ogc6VectorIhE8AllocateEj($10, $11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
  case 3: 
   return;
  case 4: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
   var $15=$14$0;
   $3=$15;
   var $16=$14$1;
   $4=$16;
   __ZN3ogc6VectorIhED1Ev($6);
   label = 5; break;
  case 5: 
   var $18=$3;
   var $19=$4;
   var $20$0=$18;
   var $20$1=0;
   var $21$0=$20$0;
   var $21$1=$19;
   ___resumeException($21$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc6VectorIhEC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc6VectorIhEC2Ev($2);
 return;
}
function __ZN3ogc13SC3DMCDecoderC2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=(($4+8)|0);
   __ZN3ogc18SC3DMCEncodeParamsC1Ev($5);
   var $6=(($4+3128)|0);
   (function() { try { __THREW__ = 0; return __ZN3ogc19TriangleListDecoderC1Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=(($4)|0);
   HEAP32[(($8)>>2)]=0;
   var $9=(($4+4)|0);
   HEAP32[(($9)>>2)]=0;
   var $10=(($4+3312)|0);
   HEAP32[(($10)>>2)]=0;
   var $11=(($4+3316)|0);
   HEAP32[(($11)>>2)]=0;
   var $12=(($4+3320)|0);
   HEAP32[(($12)>>2)]=0;
   return;
  case 3: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
   var $15=$14$0;
   $2=$15;
   var $16=$14$1;
   $3=$16;
   __ZN3ogc18SC3DMCEncodeParamsD1Ev($5);
   label = 4; break;
  case 4: 
   var $18=$2;
   var $19=$3;
   var $20$0=$18;
   var $20$1=0;
   var $21$0=$20$0;
   var $21$1=$19;
   ___resumeException($21$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc18SC3DMCEncodeParamsC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc18SC3DMCEncodeParamsC2Ev($2);
 return;
}
function __ZN3ogc19TriangleListDecoderC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc19TriangleListDecoderC2Ev($2);
 return;
}
function __ZN3ogc19TriangleListDecoderC2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=(($4+64)|0);
   __ZN3ogc13AdjacencyInfoC1Ell($5, 16, 16);
   var $6=(($4+84)|0);
   (function() { try { __THREW__ = 0; return __ZN3ogc22CompressedTriangleFansC1Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $8=(($4+156)|0);
   (function() { try { __THREW__ = 0; return __ZN3ogc12TriangleFansC1Ell($8, 8, 128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $10=(($4+40)|0);
   HEAP32[(($10)>>2)]=0;
   var $11=(($4+44)|0);
   HEAP32[(($11)>>2)]=0;
   var $12=(($4+28)|0);
   HEAP32[(($12)>>2)]=0;
   var $13=(($4+32)|0);
   HEAP32[(($13)>>2)]=0;
   var $14=(($4+36)|0);
   HEAP32[(($14)>>2)]=0;
   var $15=(($4+48)|0);
   HEAP32[(($15)>>2)]=0;
   var $16=(($4+52)|0);
   HEAP32[(($16)>>2)]=0;
   var $17=(($4+56)|0);
   HEAP32[(($17)>>2)]=0;
   var $18=(($4+60)|0);
   HEAP32[(($18)>>2)]=0;
   var $19=(($4+20)|0);
   HEAP32[(($19)>>2)]=0;
   var $20=(($4+24)|0);
   HEAP32[(($20)>>2)]=0;
   var $21=(($4)|0);
   HEAP32[(($21)>>2)]=0;
   var $22=(($4+4)|0);
   HEAP32[(($22)>>2)]=0;
   var $23=(($4+8)|0);
   HEAP32[(($23)>>2)]=0;
   var $24=(($4+12)|0);
   HEAP32[(($24)>>2)]=0;
   var $25=(($4+16)|0);
   HEAP32[(($25)>>2)]=0;
   return;
  case 4: 
   var $27$0 = ___cxa_find_matching_catch(-1, -1); $27$1 = tempRet0;
   var $28=$27$0;
   $2=$28;
   var $29=$27$1;
   $3=$29;
   label = 6; break;
  case 5: 
   var $31$0 = ___cxa_find_matching_catch(-1, -1); $31$1 = tempRet0;
   var $32=$31$0;
   $2=$32;
   var $33=$31$1;
   $3=$33;
   __ZN3ogc22CompressedTriangleFansD1Ev($6);
   label = 6; break;
  case 6: 
   __ZN3ogc13AdjacencyInfoD1Ev($5);
   label = 7; break;
  case 7: 
   var $36=$2;
   var $37=$3;
   var $38$0=$36;
   var $38$1=0;
   var $39$0=$38$0;
   var $39$1=$37;
   ___resumeException($39$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc13AdjacencyInfoC1Ell($this, $numNeighborsSize, $neighborsSize) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$numNeighborsSize;
 $3=$neighborsSize;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 __ZN3ogc13AdjacencyInfoC2Ell($4, $5, $6);
 return;
}
function __ZN3ogc22CompressedTriangleFansC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc22CompressedTriangleFansC2Ev($2);
 return;
}
function __ZN3ogc12TriangleFansC1Ell($this, $sizeTFAN, $verticesSize) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$sizeTFAN;
 $3=$verticesSize;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 __ZN3ogc12TriangleFansC2Ell($4, $5, $6);
 return;
}
function __ZN3ogc6VectorIhE7SetSizeEj($this, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$size;
   var $3=$1;
   var $4=$2;
   var $5=(($3+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($4)>>>(0)) <= (($6)>>>(0));
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((4568)|0), 96, ((6752)|0), ((2848)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $12=$2;
   var $13=(($3+8)|0);
   HEAP32[(($13)>>2)]=$12;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc6VectorIlEC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($2+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($2)|0);
 HEAP32[(($5)>>2)]=0;
 return;
}
function __ZN3ogc22CompressedTriangleFans13SetStreamTypeENS_19OGCSC3DMCStreamTypeE($this, $streamType) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$streamType;
 var $3=$1;
 var $4=$2;
 var $5=(($3+68)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc22CompressedTriangleFansC2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=(($4)|0);
   __ZN3ogc6VectorIlEC1Ev($5);
   var $6=(($4+12)|0);
   (function() { try { __THREW__ = 0; return __ZN3ogc6VectorIlEC1Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $8=(($4+24)|0);
   (function() { try { __THREW__ = 0; return __ZN3ogc6VectorIlEC1Ev($8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $10=(($4+36)|0);
   (function() { try { __THREW__ = 0; return __ZN3ogc6VectorIlEC1Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $12=(($4+48)|0);
   (function() { try { __THREW__ = 0; return __ZN3ogc6VectorIlEC1Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $14=(($4+68)|0);
   HEAP32[(($14)>>2)]=0;
   var $15=(($4+60)|0);
   HEAP32[(($15)>>2)]=0;
   var $16=(($4+64)|0);
   HEAP32[(($16)>>2)]=0;
   return;
  case 6: 
   var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
   var $19=$18$0;
   $2=$19;
   var $20=$18$1;
   $3=$20;
   label = 12; break;
  case 7: 
   var $22$0 = ___cxa_find_matching_catch(-1, -1); $22$1 = tempRet0;
   var $23=$22$0;
   $2=$23;
   var $24=$22$1;
   $3=$24;
   label = 11; break;
  case 8: 
   var $26$0 = ___cxa_find_matching_catch(-1, -1); $26$1 = tempRet0;
   var $27=$26$0;
   $2=$27;
   var $28=$26$1;
   $3=$28;
   label = 10; break;
  case 9: 
   var $30$0 = ___cxa_find_matching_catch(-1, -1); $30$1 = tempRet0;
   var $31=$30$0;
   $2=$31;
   var $32=$30$1;
   $3=$32;
   __ZN3ogc6VectorIlED1Ev($10);
   label = 10; break;
  case 10: 
   __ZN3ogc6VectorIlED1Ev($8);
   label = 11; break;
  case 11: 
   __ZN3ogc6VectorIlED1Ev($6);
   label = 12; break;
  case 12: 
   __ZN3ogc6VectorIlED1Ev($5);
   label = 13; break;
  case 13: 
   var $37=$2;
   var $38=$3;
   var $39$0=$37;
   var $39$1=0;
   var $40$0=$39$0;
   var $40$1=$38;
   ___resumeException($40$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc6VectorIlEC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc6VectorIlEC2Ev($2);
 return;
}
function __ZN3ogc13AdjacencyInfoC2Ell($this, $numNeighborsSize, $neighborsSize) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$numNeighborsSize;
 $3=$neighborsSize;
 var $4=$1;
 var $5=(($4+8)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=$3;
 var $7=(($4)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=$2;
 var $9=(($4+4)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=(($4+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12$0=_llvm_umul_with_overflow_i32($11, 4);
 var $12$1=tempRet0;
 var $13=$12$1;
 var $14=$12$0;
 var $15=$13 ? -1 : $14;
 var $16=__Znaj($15);
 var $17=$16;
 var $18=(($4+16)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21$0=_llvm_umul_with_overflow_i32($20, 4);
 var $21$1=tempRet0;
 var $22=$21$1;
 var $23=$21$0;
 var $24=$22 ? -1 : $23;
 var $25=__Znaj($24);
 var $26=$25;
 var $27=(($4+12)|0);
 HEAP32[(($27)>>2)]=$26;
 return;
}
function __ZN3ogc18SC3DMCEncodeParamsC2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   var $a1;
   $1=$this;
   var $2=$1;
   var $3=$2;
   _memset($3, 0, 3120);
   var $4=(($2+3116)|0);
   HEAP32[(($4)>>2)]=2;
   var $5=(($2+3112)|0);
   HEAP32[(($5)>>2)]=1;
   var $6=(($2+8)|0);
   HEAP32[(($6)>>2)]=12;
   var $7=(($2+12)|0);
   HEAP32[(($7)>>2)]=10;
   var $8=(($2+16)|0);
   HEAP32[(($8)>>2)]=10;
   var $9=(($2+20)|0);
   HEAP32[(($9)>>2)]=10;
   var $10=(($2+1048)|0);
   HEAP32[(($10)>>2)]=5;
   var $11=(($2+1052)|0);
   HEAP32[(($11)>>2)]=5;
   var $12=(($2+1056)|0);
   HEAP32[(($12)>>2)]=1;
   var $13=(($2+1060)|0);
   HEAP32[(($13)>>2)]=1;
   $a=0;
   label = 2; break;
  case 2: 
   var $15=$a;
   var $16=(($15)>>>(0)) < 256;
   if ($16) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $18=$a;
   var $19=(($2+1064)|0);
   var $20=(($19+($18<<2))|0);
   HEAP32[(($20)>>2)]=1;
   label = 4; break;
  case 4: 
   var $22=$a;
   var $23=((($22)+(1))|0);
   $a=$23;
   label = 2; break;
  case 5: 
   $a1=0;
   label = 6; break;
  case 6: 
   var $26=$a1;
   var $27=(($26)>>>(0)) < 256;
   if ($27) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $29=$a1;
   var $30=(($2+2088)|0);
   var $31=(($30+($29<<2))|0);
   HEAP32[(($31)>>2)]=0;
   label = 8; break;
  case 8: 
   var $33=$a1;
   var $34=((($33)+(1))|0);
   $a1=$34;
   label = 6; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __GLOBAL__I_a() {
 var label = 0;
 ___cxx_global_var_init();
 return;
}
function __ZN3ogc13AdjacencyInfo25AllocateNumNeighborsArrayEl($this, $numElements) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$numElements;
   var $3=$1;
   var $4=$2;
   var $5=(($3+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($4)|(0)) > (($6)|(0));
   if ($7) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $9=(($3+16)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==0;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $13=$10;
   __ZdaPv($13);
   label = 4; break;
  case 4: 
   var $15=$2;
   var $16=(($3+4)|0);
   HEAP32[(($16)>>2)]=$15;
   var $17=(($3+4)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19$0=_llvm_umul_with_overflow_i32($18, 4);
   var $19$1=tempRet0;
   var $20=$19$1;
   var $21=$19$0;
   var $22=$20 ? -1 : $21;
   var $23=__Znaj($22);
   var $24=$23;
   var $25=(($3+16)|0);
   HEAP32[(($25)>>2)]=$24;
   label = 5; break;
  case 5: 
   var $27=$2;
   var $28=(($3+8)|0);
   HEAP32[(($28)>>2)]=$27;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc13AdjacencyInfo22AllocateNeighborsArrayEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   $1=$this;
   var $2=$1;
   $i=1;
   label = 2; break;
  case 2: 
   var $4=$i;
   var $5=(($2+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($4)|(0)) < (($6)|(0));
   if ($7) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $9=$i;
   var $10=((($9)-(1))|0);
   var $11=(($2+16)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12+($10<<2))|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$i;
   var $16=(($2+16)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17+($15<<2))|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=((($19)+($14))|0);
   HEAP32[(($18)>>2)]=$20;
   label = 4; break;
  case 4: 
   var $22=$i;
   var $23=((($22)+(1))|0);
   $i=$23;
   label = 2; break;
  case 5: 
   var $25=(($2+8)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=((($26)-(1))|0);
   var $28=(($2+16)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+($27<<2))|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($2)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($31)|(0)) > (($33)|(0));
   if ($34) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $36=(($2+12)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37)|(0))==0;
   if ($38) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $40=$37;
   __ZdaPv($40);
   label = 8; break;
  case 8: 
   var $42=(($2+8)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=((($43)-(1))|0);
   var $45=(($2+16)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46+($44<<2))|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($2)|0);
   HEAP32[(($49)>>2)]=$48;
   var $50=(($2)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52$0=_llvm_umul_with_overflow_i32($51, 4);
   var $52$1=tempRet0;
   var $53=$52$1;
   var $54=$52$0;
   var $55=$53 ? -1 : $54;
   var $56=__Znaj($55);
   var $57=$56;
   var $58=(($2+12)|0);
   HEAP32[(($58)>>2)]=$57;
   label = 9; break;
  case 9: 
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc13AdjacencyInfo19ClearNeighborsArrayEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($2)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7<<2);
 _memset($5, -1, $8);
 return 0;
}
function __ZN3ogc19TriangleListDecoder10DecompressEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $focusVertex;
   $1=$this;
   var $2=$1;
   $focusVertex=0;
   label = 2; break;
  case 2: 
   var $4=$focusVertex;
   var $5=(($2+32)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($4)|(0)) < (($6)|(0));
   if ($7) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $9=$focusVertex;
   var $10=(($2+40)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($9)|(0))==(($11)|(0));
   if ($12) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $14=(($2+40)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=((($15)+(1))|0);
   HEAP32[(($14)>>2)]=$16;
   label = 5; break;
  case 5: 
   var $18=$focusVertex;
   var $19=__ZN3ogc19TriangleListDecoder27CompueLocalConnectivityInfoEl($2, $18);
   var $20=$focusVertex;
   var $21=__ZN3ogc19TriangleListDecoder14DecompressTFANEl($2, $20);
   label = 6; break;
  case 6: 
   var $23=$focusVertex;
   var $24=((($23)+(1))|0);
   $focusVertex=$24;
   label = 2; break;
  case 7: 
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc12TriangleFansC2Ell($this, $sizeTFAN, $verticesSize) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   $2=$sizeTFAN;
   $3=$verticesSize;
   var $4=$1;
   var $5=$2;
   var $6=(($5)|(0)) > 0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((2416)|0), 160, ((8008)|0), ((1944)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $11=$3;
   var $12=(($11)|(0)) > 0;
   if ($12) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 7; break;
  case 6: 
   ___assert_func(((2416)|0), 161, ((8008)|0), ((1776)|0));
   throw "Reached an unreachable!";
   label = 7; break;
  case 7: 
   var $17=(($4+8)|0);
   HEAP32[(($17)>>2)]=0;
   var $18=(($4+12)|0);
   HEAP32[(($18)>>2)]=0;
   var $19=$3;
   var $20=(($4)|0);
   HEAP32[(($20)>>2)]=$19;
   var $21=$2;
   var $22=(($4+4)|0);
   HEAP32[(($22)>>2)]=$21;
   var $23=(($4+4)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25$0=_llvm_umul_with_overflow_i32($24, 4);
   var $25$1=tempRet0;
   var $26=$25$1;
   var $27=$25$0;
   var $28=$26 ? -1 : $27;
   var $29=__Znaj($28);
   var $30=$29;
   var $31=(($4+20)|0);
   HEAP32[(($31)>>2)]=$30;
   var $32=(($4)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34$0=_llvm_umul_with_overflow_i32($33, 4);
   var $34$1=tempRet0;
   var $35=$34$1;
   var $36=$34$0;
   var $37=$35 ? -1 : $36;
   var $38=__Znaj($37);
   var $39=$38;
   var $40=(($4+16)|0);
   HEAP32[(($40)>>2)]=$39;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc19TriangleListDecoder4InitEPllll($this, $triangles, $numTriangles, $numVertices, $maxSizeV2T) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   $1=$this;
   $2=$triangles;
   $3=$numTriangles;
   $4=$numVertices;
   $5=$maxSizeV2T;
   var $6=$1;
   var $7=$4;
   var $8=(($7)|(0)) > 0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1384)|0), 39, ((6888)|0), ((3016)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $13=$3;
   var $14=(($13)|(0)) > 0;
   if ($14) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 7; break;
  case 6: 
   ___assert_func(((1384)|0), 40, ((6888)|0), ((2552)|0));
   throw "Reached an unreachable!";
   label = 7; break;
  case 7: 
   var $19=$3;
   var $20=(($6+28)|0);
   HEAP32[(($20)>>2)]=$19;
   var $21=$4;
   var $22=(($6+32)|0);
   HEAP32[(($22)>>2)]=$21;
   var $23=$2;
   var $24=(($6+36)|0);
   HEAP32[(($24)>>2)]=$23;
   var $25=(($6+40)|0);
   HEAP32[(($25)>>2)]=0;
   var $26=(($6+44)|0);
   HEAP32[(($26)>>2)]=0;
   var $27=(($6)|0);
   HEAP32[(($27)>>2)]=0;
   var $28=(($6+4)|0);
   HEAP32[(($28)>>2)]=0;
   var $29=(($6+8)|0);
   HEAP32[(($29)>>2)]=0;
   var $30=(($6+12)|0);
   HEAP32[(($30)>>2)]=0;
   var $31=(($6+16)|0);
   HEAP32[(($31)>>2)]=0;
   var $32=(($6+32)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($6+20)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($33)|(0)) > (($35)|(0));
   if ($36) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $38=(($6+32)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($6+20)|0);
   HEAP32[(($40)>>2)]=$39;
   var $41=(($6+60)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($42)|(0))==0;
   if ($43) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $45=$42;
   __ZdaPv($45);
   label = 10; break;
  case 10: 
   var $47=(($6+56)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48)|(0))==0;
   if ($49) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $51=$48;
   __ZdaPv($51);
   label = 12; break;
  case 12: 
   var $53=(($6+32)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55$0=_llvm_umul_with_overflow_i32($54, 4);
   var $55$1=tempRet0;
   var $56=$55$1;
   var $57=$55$0;
   var $58=$56 ? -1 : $57;
   var $59=__Znaj($58);
   var $60=$59;
   var $61=(($6+60)|0);
   HEAP32[(($61)>>2)]=$60;
   var $62=(($6+32)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64$0=_llvm_umul_with_overflow_i32($63, 4);
   var $64$1=tempRet0;
   var $65=$64$1;
   var $66=$64$0;
   var $67=$65 ? -1 : $66;
   var $68=__Znaj($67);
   var $69=$68;
   var $70=(($6+56)|0);
   HEAP32[(($70)>>2)]=$69;
   label = 13; break;
  case 13: 
   var $72=(($6+84)|0);
   var $73=(($6+180)|0);
   var $74=HEAP32[(($73)>>2)];
   __ZN3ogc22CompressedTriangleFans13SetStreamTypeENS_19OGCSC3DMCStreamTypeE($72, $74);
   var $75=(($6+84)|0);
   var $76=(($6+32)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=__ZN3ogc22CompressedTriangleFans8AllocateEl($75, $77);
   var $79=(($6+156)|0);
   var $80=(($6+32)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=($81<<1);
   var $83=(($6+32)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=($84<<3);
   var $86=__ZN3ogc12TriangleFans8AllocateEll($79, $82, $85);
   var $87=(($6+64)|0);
   var $88=$4;
   var $89=__ZN3ogc13AdjacencyInfo25AllocateNumNeighborsArrayEl($87, $88);
   $i=0;
   label = 14; break;
  case 14: 
   var $91=$i;
   var $92=$4;
   var $93=(($91)|(0)) < (($92)|(0));
   if ($93) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $95=$5;
   var $96=$i;
   var $97=(($6+64)|0);
   var $98=(($97+16)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99+($96<<2))|0);
   HEAP32[(($100)>>2)]=$95;
   label = 16; break;
  case 16: 
   var $102=$i;
   var $103=((($102)+(1))|0);
   $i=$103;
   label = 14; break;
  case 17: 
   var $105=(($6+64)|0);
   var $106=__ZN3ogc13AdjacencyInfo22AllocateNeighborsArrayEv($105);
   var $107=(($6+64)|0);
   var $108=__ZN3ogc13AdjacencyInfo19ClearNeighborsArrayEv($107);
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc22CompressedTriangleFans8AllocateEl($this, $numVertices) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$numVertices;
   var $3=$1;
   var $4=$2;
   var $5=(($4)|(0)) > 0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1656)|0), 58, ((6824)|0), ((3016)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=(($3)|0);
   var $11=$2;
   __ZN3ogc6VectorIlE8AllocateEj($10, $11);
   var $12=(($3+12)|0);
   var $13=$2;
   var $14=($13<<1);
   __ZN3ogc6VectorIlE8AllocateEj($12, $14);
   var $15=(($3+24)|0);
   var $16=$2;
   var $17=($16<<1);
   __ZN3ogc6VectorIlE8AllocateEj($15, $17);
   var $18=(($3+36)|0);
   var $19=$2;
   var $20=($19<<1);
   __ZN3ogc6VectorIlE8AllocateEj($18, $20);
   var $21=(($3+48)|0);
   var $22=$2;
   var $23=($22<<1);
   __ZN3ogc6VectorIlE8AllocateEj($21, $23);
   var $24=__ZN3ogc22CompressedTriangleFans5ClearEv($3);
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc12TriangleFans8AllocateEll($this, $sizeTFAN, $verticesSize) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   $2=$sizeTFAN;
   $3=$verticesSize;
   var $4=$1;
   var $5=$2;
   var $6=(($5)|(0)) > 0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1656)|0), 178, ((8112)|0), ((2880)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $11=$3;
   var $12=(($11)|(0)) > 0;
   if ($12) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 7; break;
  case 6: 
   ___assert_func(((1656)|0), 179, ((8112)|0), ((2824)|0));
   throw "Reached an unreachable!";
   label = 7; break;
  case 7: 
   var $17=(($4+8)|0);
   HEAP32[(($17)>>2)]=0;
   var $18=(($4+12)|0);
   HEAP32[(($18)>>2)]=0;
   var $19=(($4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$3;
   var $22=(($20)|(0)) < (($21)|(0));
   if ($22) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $24=(($4+16)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0))==0;
   if ($26) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $28=$25;
   __ZdaPv($28);
   label = 10; break;
  case 10: 
   var $30=$3;
   var $31=(($4)|0);
   HEAP32[(($31)>>2)]=$30;
   var $32=(($4)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34$0=_llvm_umul_with_overflow_i32($33, 4);
   var $34$1=tempRet0;
   var $35=$34$1;
   var $36=$34$0;
   var $37=$35 ? -1 : $36;
   var $38=__Znaj($37);
   var $39=$38;
   var $40=(($4+16)|0);
   HEAP32[(($40)>>2)]=$39;
   label = 11; break;
  case 11: 
   var $42=(($4+4)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=$2;
   var $45=(($43)|(0)) < (($44)|(0));
   if ($45) { label = 12; break; } else { label = 15; break; }
  case 12: 
   var $47=(($4+20)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48)|(0))==0;
   if ($49) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $51=$48;
   __ZdaPv($51);
   label = 14; break;
  case 14: 
   var $53=$2;
   var $54=(($4+4)|0);
   HEAP32[(($54)>>2)]=$53;
   var $55=(($4+4)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57$0=_llvm_umul_with_overflow_i32($56, 4);
   var $57$1=tempRet0;
   var $58=$57$1;
   var $59=$57$0;
   var $60=$58 ? -1 : $59;
   var $61=__Znaj($60);
   var $62=$61;
   var $63=(($4+20)|0);
   HEAP32[(($63)>>2)]=$62;
   label = 15; break;
  case 15: 
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc19TriangleListDecoder27CompueLocalConnectivityInfoEl($this, $focusVertex) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $t;
   var $p;
   var $v;
   var $i;
   var $k;
   var $foundOrInserted;
   var $j;
   var $h;
   var $y;
   var $x;
   $1=$this;
   $2=$focusVertex;
   var $3=$1;
   $t=0;
   var $4=(($3+48)|0);
   HEAP32[(($4)>>2)]=0;
   var $5=(($3+52)|0);
   HEAP32[(($5)>>2)]=0;
   var $6=(($3+64)|0);
   var $7=$2;
   var $8=__ZNK3ogc13AdjacencyInfo5BeginEl($6, $7);
   $i=$8;
   label = 2; break;
  case 2: 
   var $10=$t;
   var $11=(($10)|(0)) >= 0;
   if ($11) { label = 3; break; } else { var $19 = 0;label = 4; break; }
  case 3: 
   var $13=$i;
   var $14=(($3+64)|0);
   var $15=$2;
   var $16=__ZNK3ogc13AdjacencyInfo3EndEl($14, $15);
   var $17=(($13)|(0)) < (($16)|(0));
   var $19 = $17;label = 4; break;
  case 4: 
   var $19;
   if ($19) { label = 5; break; } else { label = 30; break; }
  case 5: 
   var $21=(($3+64)|0);
   var $22=$i;
   var $23=__ZNK3ogc13AdjacencyInfo11GetNeighborEl($21, $22);
   $t=$23;
   var $24=$t;
   var $25=(($24)|(0)) >= 0;
   if ($25) { label = 6; break; } else { label = 28; break; }
  case 6: 
   var $27=(($3+48)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=((($28)+(1))|0);
   HEAP32[(($27)>>2)]=$29;
   var $30=$t;
   var $31=((($30)*(3))&-1);
   $p=$31;
   $k=0;
   label = 7; break;
  case 7: 
   var $33=$k;
   var $34=(($33)|(0)) < 3;
   if ($34) { label = 8; break; } else { label = 27; break; }
  case 8: 
   var $36=$p;
   var $37=$k;
   var $38=((($36)+($37))|0);
   var $39=(($3+36)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40+($38<<2))|0);
   var $42=HEAP32[(($41)>>2)];
   $v=$42;
   var $43=$v;
   var $44=$2;
   var $45=(($43)|(0)) > (($44)|(0));
   if ($45) { label = 9; break; } else { label = 25; break; }
  case 9: 
   $foundOrInserted=0;
   $j=0;
   label = 10; break;
  case 10: 
   var $48=$j;
   var $49=(($3+52)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($48)|(0)) < (($50)|(0));
   if ($51) { label = 11; break; } else { label = 22; break; }
  case 11: 
   var $53=$v;
   var $54=$j;
   var $55=(($3+56)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56+($54<<2))|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($53)|(0))==(($58)|(0));
   if ($59) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $61=$j;
   var $62=(($3+60)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63+($61<<2))|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=((($65)+(1))|0);
   HEAP32[(($64)>>2)]=$66;
   $foundOrInserted=1;
   label = 22; break;
  case 13: 
   var $68=$v;
   var $69=$j;
   var $70=(($3+56)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71+($69<<2))|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($68)|(0)) < (($73)|(0));
   if ($74) { label = 14; break; } else { label = 19; break; }
  case 14: 
   var $76=(($3+52)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=((($77)+(1))|0);
   HEAP32[(($76)>>2)]=$78;
   var $79=(($3+52)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=((($80)-(1))|0);
   $h=$81;
   label = 15; break;
  case 15: 
   var $83=$h;
   var $84=$j;
   var $85=(($83)|(0)) > (($84)|(0));
   if ($85) { label = 16; break; } else { label = 18; break; }
  case 16: 
   var $87=$h;
   var $88=((($87)-(1))|0);
   var $89=(($3+56)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90+($88<<2))|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=$h;
   var $94=(($3+56)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95+($93<<2))|0);
   HEAP32[(($96)>>2)]=$92;
   var $97=$h;
   var $98=((($97)-(1))|0);
   var $99=(($3+60)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100+($98<<2))|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=$h;
   var $104=(($3+60)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=(($105+($103<<2))|0);
   HEAP32[(($106)>>2)]=$102;
   label = 17; break;
  case 17: 
   var $108=$h;
   var $109=((($108)-(1))|0);
   $h=$109;
   label = 15; break;
  case 18: 
   var $111=$v;
   var $112=$j;
   var $113=(($3+56)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($114+($112<<2))|0);
   HEAP32[(($115)>>2)]=$111;
   var $116=$j;
   var $117=(($3+60)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=(($118+($116<<2))|0);
   HEAP32[(($119)>>2)]=1;
   $foundOrInserted=1;
   label = 22; break;
  case 19: 
   label = 20; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $123=$j;
   var $124=((($123)+(1))|0);
   $j=$124;
   label = 10; break;
  case 22: 
   var $126=$foundOrInserted;
   var $127=(($126) & 1);
   if ($127) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $129=$v;
   var $130=(($3+52)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=(($3+56)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133+($131<<2))|0);
   HEAP32[(($134)>>2)]=$129;
   var $135=(($3+52)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($3+60)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138+($136<<2))|0);
   HEAP32[(($139)>>2)]=1;
   var $140=(($3+52)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=((($141)+(1))|0);
   HEAP32[(($140)>>2)]=$142;
   label = 24; break;
  case 24: 
   label = 25; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $146=$k;
   var $147=((($146)+(1))|0);
   $k=$147;
   label = 7; break;
  case 27: 
   label = 28; break;
  case 28: 
   label = 29; break;
  case 29: 
   var $151=$i;
   var $152=((($151)+(1))|0);
   $i=$152;
   label = 2; break;
  case 30: 
   var $154=(($3+52)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($155)|(0)) > 2;
   if ($156) { label = 31; break; } else { label = 43; break; }
  case 31: 
   $x=1;
   label = 32; break;
  case 32: 
   var $159=$x;
   var $160=(($3+52)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($159)|(0)) < (($161)|(0));
   if ($162) { label = 33; break; } else { label = 42; break; }
  case 33: 
   var $164=$x;
   var $165=(($3+60)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=(($166+($164<<2))|0);
   var $168=HEAP32[(($167)>>2)];
   var $169=(($168)|(0))==1;
   if ($169) { label = 34; break; } else { label = 40; break; }
  case 34: 
   var $171=$x;
   $y=$171;
   label = 35; break;
  case 35: 
   var $173=$y;
   var $174=(($173)|(0)) > 0;
   if ($174) { label = 36; break; } else { var $189 = 0;label = 37; break; }
  case 36: 
   var $176=$y;
   var $177=(($3+60)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=(($178+($176<<2))|0);
   var $180=HEAP32[(($179)>>2)];
   var $181=$y;
   var $182=((($181)-(1))|0);
   var $183=(($3+60)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=(($184+($182<<2))|0);
   var $186=HEAP32[(($185)>>2)];
   var $187=(($180)|(0)) < (($186)|(0));
   var $189 = $187;label = 37; break;
  case 37: 
   var $189;
   if ($189) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $191=$y;
   var $192=(($3+60)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194=(($193+($191<<2))|0);
   var $195=$y;
   var $196=((($195)-(1))|0);
   var $197=(($3+60)|0);
   var $198=HEAP32[(($197)>>2)];
   var $199=(($198+($196<<2))|0);
   __ZN3ogc4swapIlEEvRT_S2_($194, $199);
   var $200=$y;
   var $201=(($3+56)|0);
   var $202=HEAP32[(($201)>>2)];
   var $203=(($202+($200<<2))|0);
   var $204=$y;
   var $205=((($204)-(1))|0);
   var $206=(($3+56)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=(($207+($205<<2))|0);
   __ZN3ogc4swapIlEEvRT_S2_($203, $208);
   var $209=$y;
   var $210=((($209)-(1))|0);
   $y=$210;
   label = 35; break;
  case 39: 
   label = 40; break;
  case 40: 
   label = 41; break;
  case 41: 
   var $214=$x;
   var $215=((($214)+(1))|0);
   $x=$215;
   label = 32; break;
  case 42: 
   label = 43; break;
  case 43: 
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc4swapIlEEvRT_S2_($a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $tmp;
 $1=$a;
 $2=$b;
 var $3=$1;
 var $4=HEAP32[(($3)>>2)];
 $tmp=$4;
 var $5=$2;
 var $6=HEAP32[(($5)>>2)];
 var $7=$1;
 HEAP32[(($7)>>2)]=$6;
 var $8=$tmp;
 var $9=$2;
 HEAP32[(($9)>>2)]=$8;
 return;
}
function __ZN3ogc19TriangleListDecoder14DecompressTFANEl($this, $focusVertex) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ntfans;
   var $degree;
   var $config;
   var $op;
   var $index;
   var $k0;
   var $k1;
   var $b;
   var $c;
   var $t;
   var $f;
   var $u;
   var $u1;
   var $u2;
   var $u3;
   var $u4;
   var $u5;
   var $u6;
   var $u7;
   var $u8;
   var $u9;
   var $k;
   $1=$this;
   $2=$focusVertex;
   var $3=$1;
   var $4=(($3+84)|0);
   var $5=(($3)|0);
   var $6=__ZNK3ogc22CompressedTriangleFans12ReadNumTFansERm($4, $5);
   $ntfans=$6;
   var $7=$ntfans;
   var $8=(($7)|(0)) > 0;
   if ($8) { label = 2; break; } else { label = 80; break; }
  case 2: 
   $f=0;
   label = 3; break;
  case 3: 
   var $11=$f;
   var $12=$ntfans;
   var $13=(($11)|(0))!=(($12)|(0));
   if ($13) { label = 4; break; } else { label = 79; break; }
  case 4: 
   var $15=(($3+156)|0);
   var $16=__ZN3ogc12TriangleFans7AddTFANEv($15);
   var $17=(($3+84)|0);
   var $18=(($3+4)|0);
   var $19=__ZNK3ogc22CompressedTriangleFans10ReadDegreeERm($17, $18);
   var $20=((($19)+(2))|0);
   var $21=(($3+48)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($20)-($22))|0);
   $degree=$23;
   var $24=(($3+84)|0);
   var $25=(($3+8)|0);
   var $26=__ZNK3ogc22CompressedTriangleFans10ReadConfigERm($24, $25);
   $config=$26;
   var $27=(($3+156)|0);
   var $28=__ZNK3ogc12TriangleFans14GetNumVerticesEv($27);
   $k0=$28;
   var $29=(($3+156)|0);
   var $30=$2;
   var $31=__ZN3ogc12TriangleFans9AddVertexEl($29, $30);
   var $32=$config;
   if ((($32)|(0))==0) {
    label = 5; break;
   }
   else if ((($32)|(0))==1) {
    label = 10; break;
   }
   else if ((($32)|(0))==2) {
    label = 21; break;
   }
   else if ((($32)|(0))==3) {
    label = 26; break;
   }
   else if ((($32)|(0))==4) {
    label = 31; break;
   }
   else if ((($32)|(0))==5) {
    label = 36; break;
   }
   else if ((($32)|(0))==6) {
    label = 41; break;
   }
   else if ((($32)|(0))==7) {
    label = 46; break;
   }
   else if ((($32)|(0))==8) {
    label = 51; break;
   }
   else if ((($32)|(0))==9) {
    label = 62; break;
   }
   else {
   label = 73; break;
   }
  case 5: 
   var $34=(($3+156)|0);
   var $35=(($3+56)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=__ZN3ogc12TriangleFans9AddVertexEl($34, $38);
   $u=1;
   label = 6; break;
  case 6: 
   var $41=$u;
   var $42=$degree;
   var $43=((($42)-(1))|0);
   var $44=(($41)|(0)) < (($43)|(0));
   if ($44) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $46=(($3+40)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($3+52)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=((($49)+(1))|0);
   HEAP32[(($48)>>2)]=$50;
   var $51=(($3+56)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52+($49<<2))|0);
   HEAP32[(($53)>>2)]=$47;
   var $54=(($3+156)|0);
   var $55=(($3+40)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=((($56)+(1))|0);
   HEAP32[(($55)>>2)]=$57;
   var $58=__ZN3ogc12TriangleFans9AddVertexEl($54, $56);
   label = 8; break;
  case 8: 
   var $60=$u;
   var $61=((($60)+(1))|0);
   $u=$61;
   label = 6; break;
  case 9: 
   var $63=(($3+156)|0);
   var $64=(($3+56)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+4)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=__ZN3ogc12TriangleFans9AddVertexEl($63, $67);
   label = 73; break;
  case 10: 
   var $70=(($3+156)|0);
   var $71=(($3+56)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=__ZN3ogc12TriangleFans9AddVertexEl($70, $74);
   $u1=1;
   label = 11; break;
  case 11: 
   var $77=$u1;
   var $78=$degree;
   var $79=((($78)-(1))|0);
   var $80=(($77)|(0)) < (($79)|(0));
   if ($80) { label = 12; break; } else { label = 20; break; }
  case 12: 
   var $82=(($3+84)|0);
   var $83=(($3+12)|0);
   var $84=__ZNK3ogc22CompressedTriangleFans13ReadOperationERm($82, $83);
   $op=$84;
   var $85=$op;
   var $86=(($85)|(0))==1;
   if ($86) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $88=(($3+84)|0);
   var $89=(($3+16)|0);
   var $90=__ZNK3ogc22CompressedTriangleFans9ReadIndexERm($88, $89);
   $index=$90;
   var $91=$index;
   var $92=(($91)|(0)) < 0;
   if ($92) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $94=(($3+156)|0);
   var $95=$index;
   var $96=(((-$95))|0);
   var $97=((($96)-(1))|0);
   var $98=(($3+56)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99+($97<<2))|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=__ZN3ogc12TriangleFans9AddVertexEl($94, $101);
   label = 16; break;
  case 15: 
   var $104=(($3+156)|0);
   var $105=$index;
   var $106=$2;
   var $107=((($105)+($106))|0);
   var $108=__ZN3ogc12TriangleFans9AddVertexEl($104, $107);
   label = 16; break;
  case 16: 
   label = 18; break;
  case 17: 
   var $111=(($3+40)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=(($3+52)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=((($114)+(1))|0);
   HEAP32[(($113)>>2)]=$115;
   var $116=(($3+56)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($117+($114<<2))|0);
   HEAP32[(($118)>>2)]=$112;
   var $119=(($3+156)|0);
   var $120=(($3+40)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=((($121)+(1))|0);
   HEAP32[(($120)>>2)]=$122;
   var $123=__ZN3ogc12TriangleFans9AddVertexEl($119, $121);
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $126=$u1;
   var $127=((($126)+(1))|0);
   $u1=$127;
   label = 11; break;
  case 20: 
   var $129=(($3+156)|0);
   var $130=(($3+56)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=(($131+4)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=__ZN3ogc12TriangleFans9AddVertexEl($129, $133);
   label = 73; break;
  case 21: 
   $u2=0;
   label = 22; break;
  case 22: 
   var $137=$u2;
   var $138=$degree;
   var $139=((($138)-(1))|0);
   var $140=(($137)|(0)) < (($139)|(0));
   if ($140) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $142=(($3+40)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=(($3+52)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=((($145)+(1))|0);
   HEAP32[(($144)>>2)]=$146;
   var $147=(($3+56)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($148+($145<<2))|0);
   HEAP32[(($149)>>2)]=$143;
   var $150=(($3+156)|0);
   var $151=(($3+40)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=((($152)+(1))|0);
   HEAP32[(($151)>>2)]=$153;
   var $154=__ZN3ogc12TriangleFans9AddVertexEl($150, $152);
   label = 24; break;
  case 24: 
   var $156=$u2;
   var $157=((($156)+(1))|0);
   $u2=$157;
   label = 22; break;
  case 25: 
   var $159=(($3+156)|0);
   var $160=(($3+56)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($161)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=__ZN3ogc12TriangleFans9AddVertexEl($159, $163);
   label = 73; break;
  case 26: 
   $u3=0;
   label = 27; break;
  case 27: 
   var $167=$u3;
   var $168=$degree;
   var $169=((($168)-(1))|0);
   var $170=(($167)|(0)) < (($169)|(0));
   if ($170) { label = 28; break; } else { label = 30; break; }
  case 28: 
   var $172=(($3+40)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($3+52)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=((($175)+(1))|0);
   HEAP32[(($174)>>2)]=$176;
   var $177=(($3+56)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=(($178+($175<<2))|0);
   HEAP32[(($179)>>2)]=$173;
   var $180=(($3+156)|0);
   var $181=(($3+40)|0);
   var $182=HEAP32[(($181)>>2)];
   var $183=((($182)+(1))|0);
   HEAP32[(($181)>>2)]=$183;
   var $184=__ZN3ogc12TriangleFans9AddVertexEl($180, $182);
   label = 29; break;
  case 29: 
   var $186=$u3;
   var $187=((($186)+(1))|0);
   $u3=$187;
   label = 27; break;
  case 30: 
   var $189=(($3+156)|0);
   var $190=(($3+56)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=(($191+4)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194=__ZN3ogc12TriangleFans9AddVertexEl($189, $193);
   label = 73; break;
  case 31: 
   var $196=(($3+156)|0);
   var $197=(($3+56)|0);
   var $198=HEAP32[(($197)>>2)];
   var $199=(($198)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=__ZN3ogc12TriangleFans9AddVertexEl($196, $200);
   $u4=1;
   label = 32; break;
  case 32: 
   var $203=$u4;
   var $204=$degree;
   var $205=(($203)|(0)) < (($204)|(0));
   if ($205) { label = 33; break; } else { label = 35; break; }
  case 33: 
   var $207=(($3+40)|0);
   var $208=HEAP32[(($207)>>2)];
   var $209=(($3+52)|0);
   var $210=HEAP32[(($209)>>2)];
   var $211=((($210)+(1))|0);
   HEAP32[(($209)>>2)]=$211;
   var $212=(($3+56)|0);
   var $213=HEAP32[(($212)>>2)];
   var $214=(($213+($210<<2))|0);
   HEAP32[(($214)>>2)]=$208;
   var $215=(($3+156)|0);
   var $216=(($3+40)|0);
   var $217=HEAP32[(($216)>>2)];
   var $218=((($217)+(1))|0);
   HEAP32[(($216)>>2)]=$218;
   var $219=__ZN3ogc12TriangleFans9AddVertexEl($215, $217);
   label = 34; break;
  case 34: 
   var $221=$u4;
   var $222=((($221)+(1))|0);
   $u4=$222;
   label = 32; break;
  case 35: 
   label = 73; break;
  case 36: 
   var $225=(($3+156)|0);
   var $226=(($3+56)|0);
   var $227=HEAP32[(($226)>>2)];
   var $228=(($227+4)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230=__ZN3ogc12TriangleFans9AddVertexEl($225, $229);
   $u5=1;
   label = 37; break;
  case 37: 
   var $232=$u5;
   var $233=$degree;
   var $234=(($232)|(0)) < (($233)|(0));
   if ($234) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $236=(($3+40)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=(($3+52)|0);
   var $239=HEAP32[(($238)>>2)];
   var $240=((($239)+(1))|0);
   HEAP32[(($238)>>2)]=$240;
   var $241=(($3+56)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=(($242+($239<<2))|0);
   HEAP32[(($243)>>2)]=$237;
   var $244=(($3+156)|0);
   var $245=(($3+40)|0);
   var $246=HEAP32[(($245)>>2)];
   var $247=((($246)+(1))|0);
   HEAP32[(($245)>>2)]=$247;
   var $248=__ZN3ogc12TriangleFans9AddVertexEl($244, $246);
   label = 39; break;
  case 39: 
   var $250=$u5;
   var $251=((($250)+(1))|0);
   $u5=$251;
   label = 37; break;
  case 40: 
   label = 73; break;
  case 41: 
   $u6=0;
   label = 42; break;
  case 42: 
   var $255=$u6;
   var $256=$degree;
   var $257=(($255)|(0)) < (($256)|(0));
   if ($257) { label = 43; break; } else { label = 45; break; }
  case 43: 
   var $259=(($3+40)|0);
   var $260=HEAP32[(($259)>>2)];
   var $261=(($3+52)|0);
   var $262=HEAP32[(($261)>>2)];
   var $263=((($262)+(1))|0);
   HEAP32[(($261)>>2)]=$263;
   var $264=(($3+56)|0);
   var $265=HEAP32[(($264)>>2)];
   var $266=(($265+($262<<2))|0);
   HEAP32[(($266)>>2)]=$260;
   var $267=(($3+156)|0);
   var $268=(($3+40)|0);
   var $269=HEAP32[(($268)>>2)];
   var $270=((($269)+(1))|0);
   HEAP32[(($268)>>2)]=$270;
   var $271=__ZN3ogc12TriangleFans9AddVertexEl($267, $269);
   label = 44; break;
  case 44: 
   var $273=$u6;
   var $274=((($273)+(1))|0);
   $u6=$274;
   label = 42; break;
  case 45: 
   label = 73; break;
  case 46: 
   var $277=(($3+156)|0);
   var $278=(($3+56)|0);
   var $279=HEAP32[(($278)>>2)];
   var $280=(($279+4)|0);
   var $281=HEAP32[(($280)>>2)];
   var $282=__ZN3ogc12TriangleFans9AddVertexEl($277, $281);
   $u7=1;
   label = 47; break;
  case 47: 
   var $284=$u7;
   var $285=$degree;
   var $286=((($285)-(1))|0);
   var $287=(($284)|(0)) < (($286)|(0));
   if ($287) { label = 48; break; } else { label = 50; break; }
  case 48: 
   var $289=(($3+40)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291=(($3+52)|0);
   var $292=HEAP32[(($291)>>2)];
   var $293=((($292)+(1))|0);
   HEAP32[(($291)>>2)]=$293;
   var $294=(($3+56)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296=(($295+($292<<2))|0);
   HEAP32[(($296)>>2)]=$290;
   var $297=(($3+156)|0);
   var $298=(($3+40)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=((($299)+(1))|0);
   HEAP32[(($298)>>2)]=$300;
   var $301=__ZN3ogc12TriangleFans9AddVertexEl($297, $299);
   label = 49; break;
  case 49: 
   var $303=$u7;
   var $304=((($303)+(1))|0);
   $u7=$304;
   label = 47; break;
  case 50: 
   var $306=(($3+156)|0);
   var $307=(($3+56)|0);
   var $308=HEAP32[(($307)>>2)];
   var $309=(($308)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=__ZN3ogc12TriangleFans9AddVertexEl($306, $310);
   label = 73; break;
  case 51: 
   var $313=(($3+156)|0);
   var $314=(($3+56)|0);
   var $315=HEAP32[(($314)>>2)];
   var $316=(($315+4)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=__ZN3ogc12TriangleFans9AddVertexEl($313, $317);
   $u8=1;
   label = 52; break;
  case 52: 
   var $320=$u8;
   var $321=$degree;
   var $322=((($321)-(1))|0);
   var $323=(($320)|(0)) < (($322)|(0));
   if ($323) { label = 53; break; } else { label = 61; break; }
  case 53: 
   var $325=(($3+84)|0);
   var $326=(($3+12)|0);
   var $327=__ZNK3ogc22CompressedTriangleFans13ReadOperationERm($325, $326);
   $op=$327;
   var $328=$op;
   var $329=(($328)|(0))==1;
   if ($329) { label = 54; break; } else { label = 58; break; }
  case 54: 
   var $331=(($3+84)|0);
   var $332=(($3+16)|0);
   var $333=__ZNK3ogc22CompressedTriangleFans9ReadIndexERm($331, $332);
   $index=$333;
   var $334=$index;
   var $335=(($334)|(0)) < 0;
   if ($335) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $337=(($3+156)|0);
   var $338=$index;
   var $339=(((-$338))|0);
   var $340=((($339)-(1))|0);
   var $341=(($3+56)|0);
   var $342=HEAP32[(($341)>>2)];
   var $343=(($342+($340<<2))|0);
   var $344=HEAP32[(($343)>>2)];
   var $345=__ZN3ogc12TriangleFans9AddVertexEl($337, $344);
   label = 57; break;
  case 56: 
   var $347=(($3+156)|0);
   var $348=$index;
   var $349=$2;
   var $350=((($348)+($349))|0);
   var $351=__ZN3ogc12TriangleFans9AddVertexEl($347, $350);
   label = 57; break;
  case 57: 
   label = 59; break;
  case 58: 
   var $354=(($3+40)|0);
   var $355=HEAP32[(($354)>>2)];
   var $356=(($3+52)|0);
   var $357=HEAP32[(($356)>>2)];
   var $358=((($357)+(1))|0);
   HEAP32[(($356)>>2)]=$358;
   var $359=(($3+56)|0);
   var $360=HEAP32[(($359)>>2)];
   var $361=(($360+($357<<2))|0);
   HEAP32[(($361)>>2)]=$355;
   var $362=(($3+156)|0);
   var $363=(($3+40)|0);
   var $364=HEAP32[(($363)>>2)];
   var $365=((($364)+(1))|0);
   HEAP32[(($363)>>2)]=$365;
   var $366=__ZN3ogc12TriangleFans9AddVertexEl($362, $364);
   label = 59; break;
  case 59: 
   label = 60; break;
  case 60: 
   var $369=$u8;
   var $370=((($369)+(1))|0);
   $u8=$370;
   label = 52; break;
  case 61: 
   var $372=(($3+156)|0);
   var $373=(($3+56)|0);
   var $374=HEAP32[(($373)>>2)];
   var $375=(($374)|0);
   var $376=HEAP32[(($375)>>2)];
   var $377=__ZN3ogc12TriangleFans9AddVertexEl($372, $376);
   label = 73; break;
  case 62: 
   $u9=0;
   label = 63; break;
  case 63: 
   var $380=$u9;
   var $381=$degree;
   var $382=(($380)|(0)) < (($381)|(0));
   if ($382) { label = 64; break; } else { label = 72; break; }
  case 64: 
   var $384=(($3+84)|0);
   var $385=(($3+12)|0);
   var $386=__ZNK3ogc22CompressedTriangleFans13ReadOperationERm($384, $385);
   $op=$386;
   var $387=$op;
   var $388=(($387)|(0))==1;
   if ($388) { label = 65; break; } else { label = 69; break; }
  case 65: 
   var $390=(($3+84)|0);
   var $391=(($3+16)|0);
   var $392=__ZNK3ogc22CompressedTriangleFans9ReadIndexERm($390, $391);
   $index=$392;
   var $393=$index;
   var $394=(($393)|(0)) < 0;
   if ($394) { label = 66; break; } else { label = 67; break; }
  case 66: 
   var $396=(($3+156)|0);
   var $397=$index;
   var $398=(((-$397))|0);
   var $399=((($398)-(1))|0);
   var $400=(($3+56)|0);
   var $401=HEAP32[(($400)>>2)];
   var $402=(($401+($399<<2))|0);
   var $403=HEAP32[(($402)>>2)];
   var $404=__ZN3ogc12TriangleFans9AddVertexEl($396, $403);
   label = 68; break;
  case 67: 
   var $406=(($3+156)|0);
   var $407=$index;
   var $408=$2;
   var $409=((($407)+($408))|0);
   var $410=__ZN3ogc12TriangleFans9AddVertexEl($406, $409);
   label = 68; break;
  case 68: 
   label = 70; break;
  case 69: 
   var $413=(($3+40)|0);
   var $414=HEAP32[(($413)>>2)];
   var $415=(($3+52)|0);
   var $416=HEAP32[(($415)>>2)];
   var $417=((($416)+(1))|0);
   HEAP32[(($415)>>2)]=$417;
   var $418=(($3+56)|0);
   var $419=HEAP32[(($418)>>2)];
   var $420=(($419+($416<<2))|0);
   HEAP32[(($420)>>2)]=$414;
   var $421=(($3+156)|0);
   var $422=(($3+40)|0);
   var $423=HEAP32[(($422)>>2)];
   var $424=((($423)+(1))|0);
   HEAP32[(($422)>>2)]=$424;
   var $425=__ZN3ogc12TriangleFans9AddVertexEl($421, $423);
   label = 70; break;
  case 70: 
   label = 71; break;
  case 71: 
   var $428=$u9;
   var $429=((($428)+(1))|0);
   $u9=$429;
   label = 63; break;
  case 72: 
   label = 73; break;
  case 73: 
   var $432=(($3+156)|0);
   var $433=__ZNK3ogc12TriangleFans14GetNumVerticesEv($432);
   $k1=$433;
   var $434=(($3+156)|0);
   var $435=$k0;
   var $436=((($435)+(1))|0);
   var $437=__ZNK3ogc12TriangleFans9GetVertexEl($434, $436);
   $b=$437;
   var $438=$k0;
   var $439=((($438)+(2))|0);
   $k=$439;
   label = 74; break;
  case 74: 
   var $441=$k;
   var $442=$k1;
   var $443=(($441)|(0)) < (($442)|(0));
   if ($443) { label = 75; break; } else { label = 77; break; }
  case 75: 
   var $445=(($3+156)|0);
   var $446=$k;
   var $447=__ZNK3ogc12TriangleFans9GetVertexEl($445, $446);
   $c=$447;
   var $448=(($3+44)|0);
   var $449=HEAP32[(($448)>>2)];
   var $450=((($449)*(3))&-1);
   $t=$450;
   var $451=$2;
   var $452=$t;
   var $453=((($452)+(1))|0);
   $t=$453;
   var $454=(($3+36)|0);
   var $455=HEAP32[(($454)>>2)];
   var $456=(($455+($452<<2))|0);
   HEAP32[(($456)>>2)]=$451;
   var $457=$b;
   var $458=$t;
   var $459=((($458)+(1))|0);
   $t=$459;
   var $460=(($3+36)|0);
   var $461=HEAP32[(($460)>>2)];
   var $462=(($461+($458<<2))|0);
   HEAP32[(($462)>>2)]=$457;
   var $463=$c;
   var $464=$t;
   var $465=(($3+36)|0);
   var $466=HEAP32[(($465)>>2)];
   var $467=(($466+($464<<2))|0);
   HEAP32[(($467)>>2)]=$463;
   var $468=(($3+64)|0);
   var $469=$2;
   var $470=(($3+44)|0);
   var $471=HEAP32[(($470)>>2)];
   var $472=__ZN3ogc13AdjacencyInfo11AddNeighborEll($468, $469, $471);
   var $473=(($3+64)|0);
   var $474=$b;
   var $475=(($3+44)|0);
   var $476=HEAP32[(($475)>>2)];
   var $477=__ZN3ogc13AdjacencyInfo11AddNeighborEll($473, $474, $476);
   var $478=(($3+64)|0);
   var $479=$c;
   var $480=(($3+44)|0);
   var $481=HEAP32[(($480)>>2)];
   var $482=__ZN3ogc13AdjacencyInfo11AddNeighborEll($478, $479, $481);
   var $483=$c;
   $b=$483;
   var $484=(($3+44)|0);
   var $485=HEAP32[(($484)>>2)];
   var $486=((($485)+(1))|0);
   HEAP32[(($484)>>2)]=$486;
   label = 76; break;
  case 76: 
   var $488=$k;
   var $489=((($488)+(1))|0);
   $k=$489;
   label = 74; break;
  case 77: 
   label = 78; break;
  case 78: 
   var $492=$f;
   var $493=((($492)+(1))|0);
   $f=$493;
   label = 3; break;
  case 79: 
   label = 80; break;
  case 80: 
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc13AdjacencyInfo5BeginEl($this, $element) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$element;
   var $3=$1;
   var $4=$2;
   var $5=(($3+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($4)|(0)) < (($6)|(0));
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((2000)|0), 124, ((6352)|0), ((2936)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $12=$2;
   var $13=(($12)|(0)) >= 0;
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 7; break;
  case 6: 
   ___assert_func(((2000)|0), 125, ((6352)|0), ((3000)|0));
   throw "Reached an unreachable!";
   label = 7; break;
  case 7: 
   var $18=$2;
   var $19=(($18)|(0)) > 0;
   if ($19) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $21=$2;
   var $22=((($21)-(1))|0);
   var $23=(($3+16)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24+($22<<2))|0);
   var $26=HEAP32[(($25)>>2)];
   var $29 = $26;label = 10; break;
  case 9: 
   var $29 = 0;label = 10; break;
  case 10: 
   var $29;
   return $29;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc13AdjacencyInfo3EndEl($this, $element) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$element;
   var $3=$1;
   var $4=$2;
   var $5=(($3+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($4)|(0)) < (($6)|(0));
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((2000)|0), 130, ((6400)|0), ((2936)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $12=$2;
   var $13=(($12)|(0)) >= 0;
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 7; break;
  case 6: 
   ___assert_func(((2000)|0), 131, ((6400)|0), ((3000)|0));
   throw "Reached an unreachable!";
   label = 7; break;
  case 7: 
   var $18=$2;
   var $19=(($3+16)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+($18<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   return $22;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc13AdjacencyInfo11GetNeighborEl($this, $element) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$element;
   var $3=$1;
   var $4=$2;
   var $5=(($3)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($4)|(0)) < (($6)|(0));
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((2000)|0), 136, ((6448)|0), ((3096)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $12=$2;
   var $13=(($12)|(0)) >= 0;
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 7; break;
  case 6: 
   ___assert_func(((2000)|0), 137, ((6448)|0), ((3000)|0));
   throw "Reached an unreachable!";
   label = 7; break;
  case 7: 
   var $18=$2;
   var $19=(($3+12)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+($18<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   return $22;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc22CompressedTriangleFans12ReadNumTFansERm($this, $iterator) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$iterator;
   var $3=$1;
   var $4=$2;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($3)|0);
   var $7=__ZNK3ogc6VectorIlE7GetSizeEv($6);
   var $8=(($5)>>>(0)) < (($7)>>>(0));
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1656)|0), 74, ((5296)|0), ((3240)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $13=(($3)|0);
   var $14=$2;
   var $15=HEAP32[(($14)>>2)];
   var $16=((($15)+(1))|0);
   HEAP32[(($14)>>2)]=$16;
   var $17=__ZNK3ogc6VectorIlEixEj($13, $15);
   var $18=HEAP32[(($17)>>2)];
   return $18;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc12TriangleFans14GetNumVerticesEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc6VectorIlE7GetSizeEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc6VectorIlEixEj($this, $i) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$i;
 var $3=$1;
 var $4=$2;
 var $5=(($3)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+($4<<2))|0);
 return $7;
}
function __ZN3ogc6VectorIlE5ClearEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function __ZN3ogc6VectorIlE8AllocateEj($this, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $tmp;
   $1=$this;
   $2=$size;
   var $3=$1;
   var $4=$2;
   var $5=(($3+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($4)>>>(0)) > (($6)>>>(0));
   if ($7) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $9=$2;
   var $10=(($3+4)|0);
   HEAP32[(($10)>>2)]=$9;
   var $11=(($3+4)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13$0=_llvm_umul_with_overflow_i32($12, 4);
   var $13$1=tempRet0;
   var $14=$13$1;
   var $15=$13$0;
   var $16=$14 ? -1 : $15;
   var $17=__Znaj($16);
   var $18=$17;
   $tmp=$18;
   var $19=(($3+8)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)>>>(0)) > 0;
   if ($21) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $23=$tmp;
   var $24=$23;
   var $25=(($3)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$26;
   var $28=(($3+8)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=($29<<2);
   assert($30 % 1 === 0);(_memcpy($24, $27, $30)|0);
   var $31=(($3)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0))==0;
   if ($33) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $35=$32;
   __ZdaPv($35);
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $38=$tmp;
   var $39=(($3)|0);
   HEAP32[(($39)>>2)]=$38;
   label = 7; break;
  case 7: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc22CompressedTriangleFans5ClearEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 __ZN3ogc6VectorIlE5ClearEv($3);
 var $4=(($2+12)|0);
 __ZN3ogc6VectorIlE5ClearEv($4);
 var $5=(($2+24)|0);
 __ZN3ogc6VectorIlE5ClearEv($5);
 var $6=(($2+36)|0);
 __ZN3ogc6VectorIlE5ClearEv($6);
 var $7=(($2+48)|0);
 __ZN3ogc6VectorIlE5ClearEv($7);
 return 0;
}
function __ZN3ogc12TriangleFans7AddTFANEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tmp;
   $1=$this;
   var $2=$1;
   var $3=(($2+8)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0)) >= 0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1656)|0), 222, ((8176)|0), ((4552)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=(($2+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=((($11)+(1))|0);
   HEAP32[(($10)>>2)]=$12;
   var $13=(($2+8)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($2+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($14)|(0))==(($16)|(0));
   if ($17) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $19=(($2+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=($20<<1);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($2+20)|0);
   var $23=HEAP32[(($22)>>2)];
   $tmp=$23;
   var $24=(($2+4)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26$0=_llvm_umul_with_overflow_i32($25, 4);
   var $26$1=tempRet0;
   var $27=$26$1;
   var $28=$26$0;
   var $29=$27 ? -1 : $28;
   var $30=__Znaj($29);
   var $31=$30;
   var $32=(($2+20)|0);
   HEAP32[(($32)>>2)]=$31;
   var $33=(($2+20)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$34;
   var $36=$tmp;
   var $37=$36;
   var $38=(($2+8)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=($39<<2);
   assert($40 % 1 === 0);(_memcpy($35, $37, $40)|0);
   var $41=$tmp;
   var $42=(($41)|(0))==0;
   if ($42) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $44=$41;
   __ZdaPv($44);
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $47=(($2+8)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48)|(0)) > 1;
   if ($49) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $51=(($2+8)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=((($52)-(2))|0);
   var $54=(($2+20)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+($53<<2))|0);
   var $57=HEAP32[(($56)>>2)];
   var $60 = $57;label = 11; break;
  case 10: 
   var $60 = 0;label = 11; break;
  case 11: 
   var $60;
   var $61=(($2+8)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=((($62)-(1))|0);
   var $64=(($2+20)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+($63<<2))|0);
   HEAP32[(($66)>>2)]=$60;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc22CompressedTriangleFans10ReadDegreeERm($this, $iterator) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$iterator;
   var $3=$1;
   var $4=$2;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($3+12)|0);
   var $7=__ZNK3ogc6VectorIlE7GetSizeEv($6);
   var $8=(($5)>>>(0)) < (($7)>>>(0));
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1656)|0), 84, ((5368)|0), ((3392)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $13=(($3+12)|0);
   var $14=$2;
   var $15=HEAP32[(($14)>>2)];
   var $16=((($15)+(1))|0);
   HEAP32[(($14)>>2)]=$16;
   var $17=__ZNK3ogc6VectorIlEixEj($13, $15);
   var $18=HEAP32[(($17)>>2)];
   return $18;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc22CompressedTriangleFans10ReadConfigERm($this, $iterator) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$iterator;
   var $3=$1;
   var $4=$2;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($3+24)|0);
   var $7=__ZNK3ogc6VectorIlE7GetSizeEv($6);
   var $8=(($5)>>>(0)) < (($7)>>>(0));
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1656)|0), 94, ((5440)|0), ((3624)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $13=(($3+24)|0);
   var $14=$2;
   var $15=HEAP32[(($14)>>2)];
   var $16=((($15)+(1))|0);
   HEAP32[(($14)>>2)]=$16;
   var $17=__ZNK3ogc6VectorIlEixEj($13, $15);
   var $18=HEAP32[(($17)>>2)];
   return $18;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc12TriangleFans9AddVertexEl($this, $vertex) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $tmp;
   $1=$this;
   $2=$vertex;
   var $3=$1;
   var $4=(($3+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0)) >= 0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1656)|0), 204, ((8056)|0), ((4552)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $11=(($3+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($3+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)|(0)) < (($14)|(0));
   if ($15) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 7; break;
  case 6: 
   ___assert_func(((1656)|0), 205, ((8056)|0), ((4272)|0));
   throw "Reached an unreachable!";
   label = 7; break;
  case 7: 
   var $20=(($3+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21)|(0)) >= 0;
   if ($22) { label = 8; break; } else { label = 9; break; }
  case 8: 
   label = 10; break;
  case 9: 
   ___assert_func(((1656)|0), 206, ((8056)|0), ((3920)|0));
   throw "Reached an unreachable!";
   label = 10; break;
  case 10: 
   var $27=(($3+12)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=((($28)+(1))|0);
   HEAP32[(($27)>>2)]=$29;
   var $30=(($3+12)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($3)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($31)|(0))==(($33)|(0));
   if ($34) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $36=(($3)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=($37<<1);
   HEAP32[(($36)>>2)]=$38;
   var $39=(($3+16)|0);
   var $40=HEAP32[(($39)>>2)];
   $tmp=$40;
   var $41=(($3)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43$0=_llvm_umul_with_overflow_i32($42, 4);
   var $43$1=tempRet0;
   var $44=$43$1;
   var $45=$43$0;
   var $46=$44 ? -1 : $45;
   var $47=__Znaj($46);
   var $48=$47;
   var $49=(($3+16)|0);
   HEAP32[(($49)>>2)]=$48;
   var $50=(($3+16)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$51;
   var $53=$tmp;
   var $54=$53;
   var $55=(($3+12)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=($56<<2);
   assert($57 % 1 === 0);(_memcpy($52, $54, $57)|0);
   var $58=$tmp;
   var $59=(($58)|(0))==0;
   if ($59) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $61=$58;
   __ZdaPv($61);
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $64=$2;
   var $65=(($3+12)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=((($66)-(1))|0);
   var $68=(($3+16)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69+($67<<2))|0);
   HEAP32[(($70)>>2)]=$64;
   var $71=(($3+8)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=((($72)-(1))|0);
   var $74=(($3+20)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($75+($73<<2))|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=((($77)+(1))|0);
   HEAP32[(($76)>>2)]=$78;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc22CompressedTriangleFans13ReadOperationERm($this, $iterator) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$iterator;
   var $3=$1;
   var $4=$2;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($3+36)|0);
   var $7=__ZNK3ogc6VectorIlE7GetSizeEv($6);
   var $8=(($5)>>>(0)) < (($7)>>>(0));
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1656)|0), 104, ((5224)|0), ((336)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $13=(($3+36)|0);
   var $14=$2;
   var $15=HEAP32[(($14)>>2)];
   var $16=((($15)+(1))|0);
   HEAP32[(($14)>>2)]=$16;
   var $17=__ZNK3ogc6VectorIlEixEj($13, $15);
   var $18=HEAP32[(($17)>>2)];
   return $18;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc22CompressedTriangleFans9ReadIndexERm($this, $iterator) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$iterator;
   var $3=$1;
   var $4=$2;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($3+48)|0);
   var $7=__ZNK3ogc6VectorIlE7GetSizeEv($6);
   var $8=(($5)>>>(0)) < (($7)>>>(0));
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1656)|0), 114, ((5152)|0), ((696)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $13=(($3+48)|0);
   var $14=$2;
   var $15=HEAP32[(($14)>>2)];
   var $16=((($15)+(1))|0);
   HEAP32[(($14)>>2)]=$16;
   var $17=__ZNK3ogc6VectorIlEixEj($13, $15);
   var $18=HEAP32[(($17)>>2)];
   return $18;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc12TriangleFans9GetVertexEl($this, $vertex) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$vertex;
   var $3=$1;
   var $4=$2;
   var $5=(($3+12)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($4)|(0)) < (($6)|(0));
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1656)|0), 249, ((6504)|0), ((1304)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $12=$2;
   var $13=(($12)|(0)) >= 0;
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 7; break;
  case 6: 
   ___assert_func(((1656)|0), 250, ((6504)|0), ((936)|0));
   throw "Reached an unreachable!";
   label = 7; break;
  case 7: 
   var $18=$2;
   var $19=(($3+16)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+($18<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   return $22;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc13AdjacencyInfo11AddNeighborEll($this, $element, $neighbor) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $p0;
   var $p1;
   var $p;
   $2=$this;
   $3=$element;
   $4=$neighbor;
   var $5=$2;
   var $6=$3;
   var $7=(($5+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8+($6<<2))|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($5+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=((($12)-(1))|0);
   var $14=(($5+16)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15+($13<<2))|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($10)|(0)) <= (($17)|(0));
   if ($18) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((2000)|0), 109, ((7944)|0), ((1880)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $23=$3;
   var $24=__ZNK3ogc13AdjacencyInfo5BeginEl($5, $23);
   $p0=$24;
   var $25=$3;
   var $26=__ZNK3ogc13AdjacencyInfo3EndEl($5, $25);
   $p1=$26;
   var $27=$p0;
   $p=$27;
   label = 5; break;
  case 5: 
   var $29=$p;
   var $30=$p1;
   var $31=(($29)|(0)) < (($30)|(0));
   if ($31) { label = 6; break; } else { label = 10; break; }
  case 6: 
   var $33=$p;
   var $34=(($5+12)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+($33<<2))|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37)|(0))==-1;
   if ($38) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $40=$4;
   var $41=$p;
   var $42=(($5+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43+($41<<2))|0);
   HEAP32[(($44)>>2)]=$40;
   $1=0;
   label = 11; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $47=$p;
   var $48=((($47)+(1))|0);
   $p=$48;
   label = 5; break;
  case 10: 
   $1=1;
   label = 11; break;
  case 11: 
   var $51=$1;
   return $51;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc14IndexedFaceSet15SetNNormalIndexEm($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 return;
}
function __ZN3ogc14IndexedFaceSet14SetNColorIndexEm($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 return;
}
function __ZN3ogc14IndexedFaceSet18SetNormalPerVertexEb($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 var $4=(($0)&(1));
 $3=$4;
 var $5=$2;
 return;
}
function __ZN3ogc18SC3DMCEncodeParams13SetEncodeModeENS_21OGCSC3DMCEncodingModeE($this, $encodeMode) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$encodeMode;
 var $3=$1;
 var $4=$2;
 var $5=(($3+3116)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc14IndexedFaceSet14SetCreaseAngleEf($this, $creaseAngle) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$creaseAngle;
 var $3=$1;
 var $4=$2;
 var $5=(($3+22664)|0);
 HEAPF32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc14IndexedFaceSet6SetCCWEb($this, $ccw) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 var $3=(($ccw)&(1));
 $2=$3;
 var $4=$1;
 var $5=$2;
 var $6=(($5) & 1);
 var $7=(($4+22668)|0);
 var $8=(($6)&(1));
 HEAP8[($7)]=$8;
 return;
}
function __ZN3ogc14IndexedFaceSet8SetSolidEb($this, $solid) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 var $3=(($solid)&(1));
 $2=$3;
 var $4=$1;
 var $5=$2;
 var $6=(($5) & 1);
 var $7=(($4+22669)|0);
 var $8=(($6)&(1));
 HEAP8[($7)]=$8;
 return;
}
function __ZN3ogc14IndexedFaceSet9SetConvexEb($this, $convex) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 var $3=(($convex)&(1));
 $2=$3;
 var $4=$1;
 var $5=$2;
 var $6=(($5) & 1);
 var $7=(($4+22670)|0);
 var $8=(($6)&(1));
 HEAP8[($7)]=$8;
 return;
}
function __ZN3ogc14IndexedFaceSet19SetIsTriangularMeshEb($this, $isTriangularMesh) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 var $3=(($isTriangularMesh)&(1));
 $2=$3;
 var $4=$1;
 var $5=$2;
 var $6=(($5) & 1);
 var $7=(($4+22671)|0);
 var $8=(($6)&(1));
 HEAP8[($7)]=$8;
 return;
}
function __ZN3ogc14IndexedFaceSet9SetNCoordEm($this, $nCoord) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$nCoord;
 var $3=$1;
 var $4=$2;
 var $5=(($3+8)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc14IndexedFaceSet10SetNNormalEm($this, $nNormal) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$nNormal;
 var $3=$1;
 var $4=$2;
 var $5=(($3+12)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc14IndexedFaceSet9SetNColorEm($this, $nColor) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$nColor;
 var $3=$1;
 var $4=$2;
 var $5=(($3+16)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc14IndexedFaceSet12SetNTexCoordEm($this, $nTexCoord) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$nTexCoord;
 var $3=$1;
 var $4=$2;
 var $5=(($3+20)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc14IndexedFaceSet14SetNCoordIndexEm($this, $nCoordIndex) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$nCoordIndex;
 var $3=$1;
 var $4=$2;
 var $5=(($3)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc14IndexedFaceSet11SetCoordMinEif($this, $j, $min) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$j;
 $3=$min;
 var $4=$1;
 var $5=$3;
 var $6=$2;
 var $7=(($4+24)|0);
 var $8=(($7+($6<<2))|0);
 HEAPF32[(($8)>>2)]=$5;
 return;
}
function __ZN3ogc14IndexedFaceSet11SetCoordMaxEif($this, $j, $max) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$j;
 $3=$max;
 var $4=$1;
 var $5=$3;
 var $6=$2;
 var $7=(($4+36)|0);
 var $8=(($7+($6<<2))|0);
 HEAPF32[(($8)>>2)]=$5;
 return;
}
function __ZN3ogc18SC3DMCEncodeParams17SetCoordQuantBitsEj($this, $coordQuantBits) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$coordQuantBits;
 var $3=$1;
 var $4=$2;
 var $5=(($3+8)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc14IndexedFaceSet12SetNormalMinEif($this, $j, $min) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$j;
 $3=$min;
 var $4=$1;
 var $5=$3;
 var $6=$2;
 var $7=(($4+48)|0);
 var $8=(($7+($6<<2))|0);
 HEAPF32[(($8)>>2)]=$5;
 return;
}
function __ZN3ogc14IndexedFaceSet12SetNormalMaxEif($this, $j, $max) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$j;
 $3=$max;
 var $4=$1;
 var $5=$3;
 var $6=$2;
 var $7=(($4+60)|0);
 var $8=(($7+($6<<2))|0);
 HEAPF32[(($8)>>2)]=$5;
 return;
}
function __ZN3ogc18SC3DMCEncodeParams18SetNormalQuantBitsEj($this, $normalQuantBits) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$normalQuantBits;
 var $3=$1;
 var $4=$2;
 var $5=(($3+12)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZNK3ogc14IndexedFaceSet9GetNColorEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+16)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN3ogc14IndexedFaceSet11SetColorMinEif($this, $j, $min) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$j;
 $3=$min;
 var $4=$1;
 var $5=$3;
 var $6=$2;
 var $7=(($4+72)|0);
 var $8=(($7+($6<<2))|0);
 HEAPF32[(($8)>>2)]=$5;
 return;
}
function __ZN3ogc13SC3DMCDecoder12DecodeHeaderERNS_14IndexedFaceSetERKNS_12BinaryStreamE($this, $ifs, $bstream) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $iterator0;
   var $start_code;
   var $mask;
   var $j;
   var $j1;
   var $j2;
   var $j3;
   var $a;
   var $d;
   var $j4;
   var $a5;
   $2=$this;
   $3=$ifs;
   $4=$bstream;
   var $5=$2;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $iterator0=$7;
   var $8=$4;
   var $9=(($5)|0);
   var $10=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($8, $9, 2);
   $start_code=$10;
   var $11=$start_code;
   var $12=(($11)|(0))!=497;
   if ($12) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $14=$iterator0;
   var $15=(($5)|0);
   HEAP32[(($15)>>2)]=$14;
   var $16=$4;
   var $17=(($5)|0);
   var $18=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($16, $17, 1);
   $start_code=$18;
   var $19=$start_code;
   var $20=(($19)|(0))!=497;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $1=5;
   label = 48; break;
  case 4: 
   var $23=(($5+3320)|0);
   HEAP32[(($23)>>2)]=1;
   label = 5; break;
  case 5: 
   label = 7; break;
  case 6: 
   var $26=(($5+3320)|0);
   HEAP32[(($26)>>2)]=2;
   label = 7; break;
  case 7: 
   var $28=$4;
   var $29=(($5)|0);
   var $30=(($5+3320)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($28, $29, $31);
   var $33=(($5+4)|0);
   HEAP32[(($33)>>2)]=$32;
   var $34=(($5+8)|0);
   var $35=$4;
   var $36=(($5)|0);
   var $37=(($5+3320)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($35, $36, $38);
   var $40=(($39)&(255));
   __ZN3ogc18SC3DMCEncodeParams13SetEncodeModeENS_21OGCSC3DMCEncodingModeE($34, $40);
   var $41=$3;
   var $42=$4;
   var $43=(($5)|0);
   var $44=(($5+3320)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=__ZNK3ogc12BinaryStream11ReadFloat32ERmNS_19OGCSC3DMCStreamTypeE($42, $43, $45);
   __ZN3ogc14IndexedFaceSet14SetCreaseAngleEf($41, $46);
   var $47=$4;
   var $48=(($5)|0);
   var $49=(($5+3320)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($47, $48, $50);
   $mask=$51;
   var $52=$3;
   var $53=$mask;
   var $54=(($53)&(255));
   var $55=$54 & 1;
   var $56=(($55)|(0))==1;
   __ZN3ogc14IndexedFaceSet6SetCCWEb($52, $56);
   var $57=$3;
   var $58=$mask;
   var $59=(($58)&(255));
   var $60=$59 & 2;
   var $61=(($60)|(0))==1;
   __ZN3ogc14IndexedFaceSet8SetSolidEb($57, $61);
   var $62=$3;
   var $63=$mask;
   var $64=(($63)&(255));
   var $65=$64 & 4;
   var $66=(($65)|(0))==1;
   __ZN3ogc14IndexedFaceSet9SetConvexEb($62, $66);
   var $67=$3;
   var $68=$mask;
   var $69=(($68)&(255));
   var $70=$69 & 8;
   var $71=(($70)|(0))==1;
   __ZN3ogc14IndexedFaceSet19SetIsTriangularMeshEb($67, $71);
   var $72=$3;
   var $73=$4;
   var $74=(($5)|0);
   var $75=(($5+3320)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($73, $74, $76);
   __ZN3ogc14IndexedFaceSet9SetNCoordEm($72, $77);
   var $78=$3;
   var $79=$4;
   var $80=(($5)|0);
   var $81=(($5+3320)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($79, $80, $82);
   __ZN3ogc14IndexedFaceSet10SetNNormalEm($78, $83);
   var $84=$3;
   var $85=$4;
   var $86=(($5)|0);
   var $87=(($5+3320)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($85, $86, $88);
   __ZN3ogc14IndexedFaceSet9SetNColorEm($84, $89);
   var $90=$3;
   var $91=$4;
   var $92=(($5)|0);
   var $93=(($5+3320)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($91, $92, $94);
   __ZN3ogc14IndexedFaceSet12SetNTexCoordEm($90, $95);
   var $96=$3;
   var $97=$4;
   var $98=(($5)|0);
   var $99=(($5+3320)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($97, $98, $100);
   __ZN3ogc14IndexedFaceSet21SetNumFloatAttributesEm($96, $101);
   var $102=$3;
   var $103=$4;
   var $104=(($5)|0);
   var $105=(($5+3320)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($103, $104, $106);
   __ZN3ogc14IndexedFaceSet19SetNumIntAttributesEm($102, $107);
   var $108=$3;
   var $109=__ZNK3ogc14IndexedFaceSet9GetNCoordEv($108);
   var $110=(($109)>>>(0)) > 0;
   if ($110) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $112=$3;
   var $113=$4;
   var $114=(($5)|0);
   var $115=(($5+3320)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($113, $114, $116);
   __ZN3ogc14IndexedFaceSet14SetNCoordIndexEm($112, $117);
   $j=0;
   label = 9; break;
  case 9: 
   var $119=$j;
   var $120=(($119)|(0)) < 3;
   if ($120) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $122=$3;
   var $123=$j;
   var $124=$4;
   var $125=(($5)|0);
   var $126=(($5+3320)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=__ZNK3ogc12BinaryStream11ReadFloat32ERmNS_19OGCSC3DMCStreamTypeE($124, $125, $127);
   __ZN3ogc14IndexedFaceSet11SetCoordMinEif($122, $123, $128);
   var $129=$3;
   var $130=$j;
   var $131=$4;
   var $132=(($5)|0);
   var $133=(($5+3320)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=__ZNK3ogc12BinaryStream11ReadFloat32ERmNS_19OGCSC3DMCStreamTypeE($131, $132, $134);
   __ZN3ogc14IndexedFaceSet11SetCoordMaxEif($129, $130, $135);
   label = 11; break;
  case 11: 
   var $137=$j;
   var $138=((($137)+(1))|0);
   $j=$138;
   label = 9; break;
  case 12: 
   var $140=(($5+8)|0);
   var $141=$4;
   var $142=(($5)|0);
   var $143=(($5+3320)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($141, $142, $144);
   var $146=(($145)&(255));
   __ZN3ogc18SC3DMCEncodeParams17SetCoordQuantBitsEj($140, $146);
   label = 13; break;
  case 13: 
   var $148=$3;
   var $149=__ZNK3ogc14IndexedFaceSet10GetNNormalEv($148);
   var $150=(($149)>>>(0)) > 0;
   if ($150) { label = 14; break; } else { label = 19; break; }
  case 14: 
   var $152=$3;
   var $153=$4;
   var $154=(($5)|0);
   var $155=(($5+3320)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($153, $154, $156);
   __ZN3ogc14IndexedFaceSet15SetNNormalIndexEm($152, $157);
   $j1=0;
   label = 15; break;
  case 15: 
   var $159=$j1;
   var $160=(($159)|(0)) < 3;
   if ($160) { label = 16; break; } else { label = 18; break; }
  case 16: 
   var $162=$3;
   var $163=$j1;
   var $164=$4;
   var $165=(($5)|0);
   var $166=(($5+3320)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=__ZNK3ogc12BinaryStream11ReadFloat32ERmNS_19OGCSC3DMCStreamTypeE($164, $165, $167);
   __ZN3ogc14IndexedFaceSet12SetNormalMinEif($162, $163, $168);
   var $169=$3;
   var $170=$j1;
   var $171=$4;
   var $172=(($5)|0);
   var $173=(($5+3320)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=__ZNK3ogc12BinaryStream11ReadFloat32ERmNS_19OGCSC3DMCStreamTypeE($171, $172, $174);
   __ZN3ogc14IndexedFaceSet12SetNormalMaxEif($169, $170, $175);
   label = 17; break;
  case 17: 
   var $177=$j1;
   var $178=((($177)+(1))|0);
   $j1=$178;
   label = 15; break;
  case 18: 
   var $180=$3;
   var $181=$4;
   var $182=(($5)|0);
   var $183=(($5+3320)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($181, $182, $184);
   var $186=(($185)&(255));
   var $187=(($186)|(0))==1;
   __ZN3ogc14IndexedFaceSet18SetNormalPerVertexEb($180, $187);
   var $188=(($5+8)|0);
   var $189=$4;
   var $190=(($5)|0);
   var $191=(($5+3320)|0);
   var $192=HEAP32[(($191)>>2)];
   var $193=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($189, $190, $192);
   var $194=(($193)&(255));
   __ZN3ogc18SC3DMCEncodeParams18SetNormalQuantBitsEj($188, $194);
   label = 19; break;
  case 19: 
   var $196=$3;
   var $197=__ZNK3ogc14IndexedFaceSet9GetNColorEv($196);
   var $198=(($197)>>>(0)) > 0;
   if ($198) { label = 20; break; } else { label = 25; break; }
  case 20: 
   var $200=$3;
   var $201=$4;
   var $202=(($5)|0);
   var $203=(($5+3320)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($201, $202, $204);
   __ZN3ogc14IndexedFaceSet14SetNColorIndexEm($200, $205);
   $j2=0;
   label = 21; break;
  case 21: 
   var $207=$j2;
   var $208=(($207)|(0)) < 3;
   if ($208) { label = 22; break; } else { label = 24; break; }
  case 22: 
   var $210=$3;
   var $211=$j2;
   var $212=$4;
   var $213=(($5)|0);
   var $214=(($5+3320)|0);
   var $215=HEAP32[(($214)>>2)];
   var $216=__ZNK3ogc12BinaryStream11ReadFloat32ERmNS_19OGCSC3DMCStreamTypeE($212, $213, $215);
   __ZN3ogc14IndexedFaceSet11SetColorMinEif($210, $211, $216);
   var $217=$3;
   var $218=$j2;
   var $219=$4;
   var $220=(($5)|0);
   var $221=(($5+3320)|0);
   var $222=HEAP32[(($221)>>2)];
   var $223=__ZNK3ogc12BinaryStream11ReadFloat32ERmNS_19OGCSC3DMCStreamTypeE($219, $220, $222);
   __ZN3ogc14IndexedFaceSet11SetColorMaxEif($217, $218, $223);
   label = 23; break;
  case 23: 
   var $225=$j2;
   var $226=((($225)+(1))|0);
   $j2=$226;
   label = 21; break;
  case 24: 
   var $228=$3;
   var $229=$4;
   var $230=(($5)|0);
   var $231=(($5+3320)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($229, $230, $232);
   var $234=(($233)&(255));
   var $235=(($234)|(0))==1;
   __ZN3ogc14IndexedFaceSet17SetColorPerVertexEb($228, $235);
   var $236=(($5+8)|0);
   var $237=$4;
   var $238=(($5)|0);
   var $239=(($5+3320)|0);
   var $240=HEAP32[(($239)>>2)];
   var $241=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($237, $238, $240);
   var $242=(($241)&(255));
   __ZN3ogc18SC3DMCEncodeParams17SetColorQuantBitsEj($236, $242);
   label = 25; break;
  case 25: 
   var $244=$3;
   var $245=__ZNK3ogc14IndexedFaceSet12GetNTexCoordEv($244);
   var $246=(($245)>>>(0)) > 0;
   if ($246) { label = 26; break; } else { label = 31; break; }
  case 26: 
   var $248=$3;
   var $249=$4;
   var $250=(($5)|0);
   var $251=(($5+3320)|0);
   var $252=HEAP32[(($251)>>2)];
   var $253=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($249, $250, $252);
   __ZN3ogc14IndexedFaceSet17SetNTexCoordIndexEm($248, $253);
   $j3=0;
   label = 27; break;
  case 27: 
   var $255=$j3;
   var $256=(($255)|(0)) < 2;
   if ($256) { label = 28; break; } else { label = 30; break; }
  case 28: 
   var $258=$3;
   var $259=$j3;
   var $260=$4;
   var $261=(($5)|0);
   var $262=(($5+3320)|0);
   var $263=HEAP32[(($262)>>2)];
   var $264=__ZNK3ogc12BinaryStream11ReadFloat32ERmNS_19OGCSC3DMCStreamTypeE($260, $261, $263);
   __ZN3ogc14IndexedFaceSet14SetTexCoordMinEif($258, $259, $264);
   var $265=$3;
   var $266=$j3;
   var $267=$4;
   var $268=(($5)|0);
   var $269=(($5+3320)|0);
   var $270=HEAP32[(($269)>>2)];
   var $271=__ZNK3ogc12BinaryStream11ReadFloat32ERmNS_19OGCSC3DMCStreamTypeE($267, $268, $270);
   __ZN3ogc14IndexedFaceSet14SetTexCoordMaxEif($265, $266, $271);
   label = 29; break;
  case 29: 
   var $273=$j3;
   var $274=((($273)+(1))|0);
   $j3=$274;
   label = 27; break;
  case 30: 
   var $276=(($5+8)|0);
   var $277=$4;
   var $278=(($5)|0);
   var $279=(($5+3320)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($277, $278, $280);
   var $282=(($281)&(255));
   __ZN3ogc18SC3DMCEncodeParams20SetTexCoordQuantBitsEj($276, $282);
   label = 31; break;
  case 31: 
   $a=0;
   label = 32; break;
  case 32: 
   var $285=$a;
   var $286=$3;
   var $287=__ZNK3ogc14IndexedFaceSet21GetNumFloatAttributesEv($286);
   var $288=(($285)>>>(0)) < (($287)>>>(0));
   if ($288) { label = 33; break; } else { label = 41; break; }
  case 33: 
   var $290=$3;
   var $291=$a;
   var $292=$4;
   var $293=(($5)|0);
   var $294=(($5+3320)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($292, $293, $295);
   __ZN3ogc14IndexedFaceSet18SetNFloatAttributeEmm($290, $291, $296);
   var $297=$3;
   var $298=$a;
   var $299=__ZNK3ogc14IndexedFaceSet18GetNFloatAttributeEm($297, $298);
   var $300=(($299)>>>(0)) > 0;
   if ($300) { label = 34; break; } else { label = 39; break; }
  case 34: 
   var $302=$3;
   var $303=$a;
   var $304=$4;
   var $305=(($5)|0);
   var $306=(($5+3320)|0);
   var $307=HEAP32[(($306)>>2)];
   var $308=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($304, $305, $307);
   __ZN3ogc14IndexedFaceSet23SetNFloatAttributeIndexEim($302, $303, $308);
   var $309=$4;
   var $310=(($5)|0);
   var $311=(($5+3320)|0);
   var $312=HEAP32[(($311)>>2)];
   var $313=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($309, $310, $312);
   $d=$313;
   var $314=$3;
   var $315=$a;
   var $316=$d;
   var $317=(($316)&(255));
   __ZN3ogc14IndexedFaceSet20SetFloatAttributeDimEmm($314, $315, $317);
   $j4=0;
   label = 35; break;
  case 35: 
   var $319=$j4;
   var $320=(($319)&(255));
   var $321=$d;
   var $322=(($321)&(255));
   var $323=(($320)|(0)) < (($322)|(0));
   if ($323) { label = 36; break; } else { label = 38; break; }
  case 36: 
   var $325=$3;
   var $326=$a;
   var $327=$j4;
   var $328=(($327)&(255));
   var $329=$4;
   var $330=(($5)|0);
   var $331=(($5+3320)|0);
   var $332=HEAP32[(($331)>>2)];
   var $333=__ZNK3ogc12BinaryStream11ReadFloat32ERmNS_19OGCSC3DMCStreamTypeE($329, $330, $332);
   __ZN3ogc14IndexedFaceSet20SetFloatAttributeMinEmmf($325, $326, $328, $333);
   var $334=$3;
   var $335=$a;
   var $336=$j4;
   var $337=(($336)&(255));
   var $338=$4;
   var $339=(($5)|0);
   var $340=(($5+3320)|0);
   var $341=HEAP32[(($340)>>2)];
   var $342=__ZNK3ogc12BinaryStream11ReadFloat32ERmNS_19OGCSC3DMCStreamTypeE($338, $339, $341);
   __ZN3ogc14IndexedFaceSet20SetFloatAttributeMaxEmmf($334, $335, $337, $342);
   label = 37; break;
  case 37: 
   var $344=$j4;
   var $345=((($344)+(1))&255);
   $j4=$345;
   label = 35; break;
  case 38: 
   var $347=$3;
   var $348=$a;
   var $349=$4;
   var $350=(($5)|0);
   var $351=(($5+3320)|0);
   var $352=HEAP32[(($351)>>2)];
   var $353=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($349, $350, $352);
   var $354=(($353)&(255));
   var $355=(($354)|(0))==1;
   __ZN3ogc14IndexedFaceSet26SetFloatAttributePerVertexEib($347, $348, $355);
   var $356=(($5+8)|0);
   var $357=$a;
   var $358=$4;
   var $359=(($5)|0);
   var $360=(($5+3320)|0);
   var $361=HEAP32[(($360)>>2)];
   var $362=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($358, $359, $361);
   var $363=(($362)&(255));
   __ZN3ogc18SC3DMCEncodeParams26SetFloatAttributeQuantBitsEmm($356, $357, $363);
   label = 39; break;
  case 39: 
   label = 40; break;
  case 40: 
   var $366=$a;
   var $367=((($366)+(1))|0);
   $a=$367;
   label = 32; break;
  case 41: 
   $a5=0;
   label = 42; break;
  case 42: 
   var $370=$a5;
   var $371=$3;
   var $372=__ZNK3ogc14IndexedFaceSet19GetNumIntAttributesEv($371);
   var $373=(($370)>>>(0)) < (($372)>>>(0));
   if ($373) { label = 43; break; } else { label = 47; break; }
  case 43: 
   var $375=$3;
   var $376=$a5;
   var $377=$4;
   var $378=(($5)|0);
   var $379=(($5+3320)|0);
   var $380=HEAP32[(($379)>>2)];
   var $381=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($377, $378, $380);
   __ZN3ogc14IndexedFaceSet16SetNIntAttributeEmm($375, $376, $381);
   var $382=$3;
   var $383=$a5;
   var $384=__ZNK3ogc14IndexedFaceSet16GetNIntAttributeEm($382, $383);
   var $385=(($384)>>>(0)) > 0;
   if ($385) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $387=$3;
   var $388=$a5;
   var $389=$4;
   var $390=(($5)|0);
   var $391=(($5+3320)|0);
   var $392=HEAP32[(($391)>>2)];
   var $393=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($389, $390, $392);
   __ZN3ogc14IndexedFaceSet21SetNIntAttributeIndexEim($387, $388, $393);
   var $394=$3;
   var $395=$a5;
   var $396=$4;
   var $397=(($5)|0);
   var $398=(($5+3320)|0);
   var $399=HEAP32[(($398)>>2)];
   var $400=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($396, $397, $399);
   var $401=(($400)&(255));
   __ZN3ogc14IndexedFaceSet18SetIntAttributeDimEmm($394, $395, $401);
   var $402=$3;
   var $403=$a5;
   var $404=$4;
   var $405=(($5)|0);
   var $406=(($5+3320)|0);
   var $407=HEAP32[(($406)>>2)];
   var $408=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($404, $405, $407);
   var $409=(($408)&(255));
   var $410=(($409)|(0))==1;
   __ZN3ogc14IndexedFaceSet24SetIntAttributePerVertexEib($402, $403, $410);
   label = 45; break;
  case 45: 
   label = 46; break;
  case 46: 
   var $413=$a5;
   var $414=((($413)+(1))|0);
   $a5=$414;
   label = 42; break;
  case 47: 
   $1=0;
   label = 48; break;
  case 48: 
   var $417=$1;
   return $417;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($this, $position, $streamType) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $value;
   $1=$this;
   $2=$position;
   $3=$streamType;
   var $4=$1;
   var $5=$3;
   var $6=(($5)|(0))==1;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$2;
   var $9=__ZNK3ogc12BinaryStream15ReadUInt32ASCIIERm($4, $8);
   $value=$9;
   label = 4; break;
  case 3: 
   var $11=$2;
   var $12=__ZNK3ogc12BinaryStream13ReadUInt32BinERm($4, $11);
   $value=$12;
   label = 4; break;
  case 4: 
   var $14=$value;
   return $14;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($this, $position, $streamType) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $value;
   $1=$this;
   $2=$position;
   $3=$streamType;
   var $4=$1;
   var $5=$3;
   var $6=(($5)|(0))==1;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$2;
   var $9=__ZNK3ogc12BinaryStream14ReadUCharASCIIERm($4, $8);
   $value=$9;
   label = 4; break;
  case 3: 
   var $11=$2;
   var $12=__ZNK3ogc12BinaryStream13ReadUChar8BinERm($4, $11);
   $value=$12;
   label = 4; break;
  case 4: 
   var $14=$value;
   return $14;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc12BinaryStream11ReadFloat32ERmNS_19OGCSC3DMCStreamTypeE($this, $position, $streamType) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $value;
   $1=$this;
   $2=$position;
   $3=$streamType;
   var $4=$1;
   var $5=$3;
   var $6=(($5)|(0))==1;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$2;
   var $9=__ZNK3ogc12BinaryStream16ReadFloat32ASCIIERm($4, $8);
   $value=$9;
   label = 4; break;
  case 3: 
   var $11=$2;
   var $12=__ZNK3ogc12BinaryStream14ReadFloat32BinERm($4, $11);
   $value=$12;
   label = 4; break;
  case 4: 
   var $14=$value;
   return $14;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc14IndexedFaceSet21SetNumFloatAttributesEm($this, $numFloatAttributes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$numFloatAttributes;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) < 256;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 164, ((7080)|0), ((3760)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=$2;
   var $11=(($3+128)|0);
   HEAP32[(($11)>>2)]=$10;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc14IndexedFaceSet19SetNumIntAttributesEm($this, $numIntAttributes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$numIntAttributes;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) < 256;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 169, ((7400)|0), ((4080)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=$2;
   var $11=(($3+132)|0);
   HEAP32[(($11)>>2)]=$10;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc14IndexedFaceSet17SetNTexCoordIndexEm($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 return;
}
function __ZN3ogc14IndexedFaceSet23SetNFloatAttributeIndexEim($this, $0, $1) {
 var label = 0;
 var $3;
 var $4;
 var $5;
 $3=$this;
 $4=$0;
 $5=$1;
 var $6=$3;
 return;
}
function __ZN3ogc14IndexedFaceSet21SetNIntAttributeIndexEim($this, $0, $1) {
 var label = 0;
 var $3;
 var $4;
 var $5;
 $3=$this;
 $4=$0;
 $5=$1;
 var $6=$3;
 return;
}
function __ZN3ogc14IndexedFaceSet17SetColorPerVertexEb($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 var $4=(($0)&(1));
 $3=$4;
 var $5=$2;
 return;
}
function __ZN3ogc14IndexedFaceSet26SetFloatAttributePerVertexEib($this, $0, $1) {
 var label = 0;
 var $3;
 var $4;
 var $5;
 $3=$this;
 $4=$0;
 var $6=(($1)&(1));
 $5=$6;
 var $7=$3;
 return;
}
function __ZN3ogc14IndexedFaceSet24SetIntAttributePerVertexEib($this, $0, $1) {
 var label = 0;
 var $3;
 var $4;
 var $5;
 $3=$this;
 $4=$0;
 var $6=(($1)&(1));
 $5=$6;
 var $7=$3;
 return;
}
function __ZN3ogc14IndexedFaceSet11SetColorMaxEif($this, $j, $max) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$j;
 $3=$max;
 var $4=$1;
 var $5=$3;
 var $6=$2;
 var $7=(($4+84)|0);
 var $8=(($7+($6<<2))|0);
 HEAPF32[(($8)>>2)]=$5;
 return;
}
function __ZN3ogc18SC3DMCEncodeParams17SetColorQuantBitsEj($this, $colorQuantBits) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$colorQuantBits;
 var $3=$1;
 var $4=$2;
 var $5=(($3+16)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc14IndexedFaceSet14SetTexCoordMinEif($this, $j, $min) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$j;
 $3=$min;
 var $4=$1;
 var $5=$3;
 var $6=$2;
 var $7=(($4+96)|0);
 var $8=(($7+($6<<2))|0);
 HEAPF32[(($8)>>2)]=$5;
 return;
}
function __ZN3ogc14IndexedFaceSet14SetTexCoordMaxEif($this, $j, $max) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$j;
 $3=$max;
 var $4=$1;
 var $5=$3;
 var $6=$2;
 var $7=(($4+104)|0);
 var $8=(($7+($6<<2))|0);
 HEAPF32[(($8)>>2)]=$5;
 return;
}
function __ZN3ogc18SC3DMCEncodeParams20SetTexCoordQuantBitsEj($this, $texCoordQuantBits) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$texCoordQuantBits;
 var $3=$1;
 var $4=$2;
 var $5=(($3+20)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZNK3ogc14IndexedFaceSet21GetNumFloatAttributesEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+128)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc14IndexedFaceSet19GetNumIntAttributesEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+132)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN3ogc19TriangleListDecoder13SetStreamTypeENS_19OGCSC3DMCStreamTypeE($this, $streamType) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$streamType;
 var $3=$1;
 var $4=$2;
 var $5=(($3+180)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZN3ogc14IndexedFaceSet13GetCoordIndexEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN3ogc13SC3DMCDecoder14DecodePlayloadERNS_14IndexedFaceSetERKNS_12BinaryStreamE($this, $ifs, $bstream) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $a;
   var $a1;
   $1=$this;
   $2=$ifs;
   $3=$bstream;
   var $4=$1;
   var $5=(($4+3128)|0);
   var $6=(($4+3320)|0);
   var $7=HEAP32[(($6)>>2)];
   __ZN3ogc19TriangleListDecoder13SetStreamTypeENS_19OGCSC3DMCStreamTypeE($5, $7);
   var $8=(($4+3128)|0);
   var $9=$2;
   var $10=__ZN3ogc14IndexedFaceSet13GetCoordIndexEv($9);
   var $11=$2;
   var $12=__ZNK3ogc14IndexedFaceSet14GetNCoordIndexEv($11);
   var $13=$2;
   var $14=__ZNK3ogc14IndexedFaceSet9GetNCoordEv($13);
   var $15=$3;
   var $16=(($4)|0);
   var $17=__ZN3ogc19TriangleListDecoder6DecodeEPlllRKNS_12BinaryStreamERm($8, $10, $12, $14, $15, $16);
   var $18=$2;
   var $19=__ZNK3ogc14IndexedFaceSet9GetNCoordEv($18);
   var $20=(($19)>>>(0)) > 0;
   if ($20) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $22=$2;
   var $23=__ZNK3ogc14IndexedFaceSet8GetCoordEv($22);
   var $24=$2;
   var $25=__ZNK3ogc14IndexedFaceSet9GetNCoordEv($24);
   var $26=$2;
   var $27=__ZNK3ogc14IndexedFaceSet11GetCoordMinEv($26);
   var $28=$2;
   var $29=__ZNK3ogc14IndexedFaceSet11GetCoordMaxEv($28);
   var $30=(($4+8)|0);
   var $31=__ZNK3ogc18SC3DMCEncodeParams17GetCoordQuantBitsEv($30);
   var $32=$2;
   var $33=(($4+8)|0);
   var $34=__ZNK3ogc18SC3DMCEncodeParams16GetCoordPredModeEv($33);
   var $35=$3;
   var $36=__ZN3ogc13SC3DMCDecoder16DecodeFloatArrayEPfmmPKfS3_mRKNS_14IndexedFaceSetENS_23OGCSC3DMCPredictionModeERKNS_12BinaryStreamE($4, $23, $25, 3, $27, $29, $31, $32, $34, $35);
   label = 3; break;
  case 3: 
   var $38=$2;
   var $39=__ZNK3ogc14IndexedFaceSet10GetNNormalEv($38);
   var $40=(($39)>>>(0)) > 0;
   if ($40) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $42=$2;
   var $43=__ZNK3ogc14IndexedFaceSet9GetNormalEv($42);
   var $44=$2;
   var $45=__ZNK3ogc14IndexedFaceSet10GetNNormalEv($44);
   var $46=$2;
   var $47=__ZNK3ogc14IndexedFaceSet12GetNormalMinEv($46);
   var $48=$2;
   var $49=__ZNK3ogc14IndexedFaceSet12GetNormalMaxEv($48);
   var $50=(($4+8)|0);
   var $51=__ZNK3ogc18SC3DMCEncodeParams18GetNormalQuantBitsEv($50);
   var $52=$2;
   var $53=(($4+8)|0);
   var $54=__ZNK3ogc18SC3DMCEncodeParams17GetNormalPredModeEv($53);
   var $55=$3;
   var $56=__ZN3ogc13SC3DMCDecoder16DecodeFloatArrayEPfmmPKfS3_mRKNS_14IndexedFaceSetENS_23OGCSC3DMCPredictionModeERKNS_12BinaryStreamE($4, $43, $45, 3, $47, $49, $51, $52, $54, $55);
   label = 5; break;
  case 5: 
   var $58=$2;
   var $59=__ZNK3ogc14IndexedFaceSet9GetNColorEv($58);
   var $60=(($59)>>>(0)) > 0;
   if ($60) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $62=$2;
   var $63=__ZNK3ogc14IndexedFaceSet8GetColorEv($62);
   var $64=$2;
   var $65=__ZNK3ogc14IndexedFaceSet9GetNColorEv($64);
   var $66=$2;
   var $67=__ZNK3ogc14IndexedFaceSet11GetColorMinEv($66);
   var $68=$2;
   var $69=__ZNK3ogc14IndexedFaceSet11GetColorMaxEv($68);
   var $70=(($4+8)|0);
   var $71=__ZNK3ogc18SC3DMCEncodeParams17GetColorQuantBitsEv($70);
   var $72=$2;
   var $73=(($4+8)|0);
   var $74=__ZNK3ogc18SC3DMCEncodeParams16GetColorPredModeEv($73);
   var $75=$3;
   var $76=__ZN3ogc13SC3DMCDecoder16DecodeFloatArrayEPfmmPKfS3_mRKNS_14IndexedFaceSetENS_23OGCSC3DMCPredictionModeERKNS_12BinaryStreamE($4, $63, $65, 3, $67, $69, $71, $72, $74, $75);
   label = 7; break;
  case 7: 
   var $78=$2;
   var $79=__ZNK3ogc14IndexedFaceSet12GetNTexCoordEv($78);
   var $80=(($79)>>>(0)) > 0;
   if ($80) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $82=$2;
   var $83=__ZNK3ogc14IndexedFaceSet11GetTexCoordEv($82);
   var $84=$2;
   var $85=__ZNK3ogc14IndexedFaceSet12GetNTexCoordEv($84);
   var $86=$2;
   var $87=__ZNK3ogc14IndexedFaceSet14GetTexCoordMinEv($86);
   var $88=$2;
   var $89=__ZNK3ogc14IndexedFaceSet14GetTexCoordMaxEv($88);
   var $90=(($4+8)|0);
   var $91=__ZNK3ogc18SC3DMCEncodeParams20GetTexCoordQuantBitsEv($90);
   var $92=$2;
   var $93=(($4+8)|0);
   var $94=__ZNK3ogc18SC3DMCEncodeParams19GetTexCoordPredModeEv($93);
   var $95=$3;
   var $96=__ZN3ogc13SC3DMCDecoder16DecodeFloatArrayEPfmmPKfS3_mRKNS_14IndexedFaceSetENS_23OGCSC3DMCPredictionModeERKNS_12BinaryStreamE($4, $83, $85, 2, $87, $89, $91, $92, $94, $95);
   label = 9; break;
  case 9: 
   $a=0;
   label = 10; break;
  case 10: 
   var $99=$a;
   var $100=$2;
   var $101=__ZNK3ogc14IndexedFaceSet21GetNumFloatAttributesEv($100);
   var $102=(($99)>>>(0)) < (($101)>>>(0));
   if ($102) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $104=$2;
   var $105=$a;
   var $106=__ZNK3ogc14IndexedFaceSet17GetFloatAttributeEm($104, $105);
   var $107=$2;
   var $108=$a;
   var $109=__ZNK3ogc14IndexedFaceSet18GetNFloatAttributeEm($107, $108);
   var $110=$2;
   var $111=$a;
   var $112=__ZNK3ogc14IndexedFaceSet20GetFloatAttributeDimEm($110, $111);
   var $113=$2;
   var $114=$a;
   var $115=__ZNK3ogc14IndexedFaceSet20GetFloatAttributeMinEm($113, $114);
   var $116=$2;
   var $117=$a;
   var $118=__ZNK3ogc14IndexedFaceSet20GetFloatAttributeMaxEm($116, $117);
   var $119=(($4+8)|0);
   var $120=$a;
   var $121=__ZNK3ogc18SC3DMCEncodeParams26GetFloatAttributeQuantBitsEm($119, $120);
   var $122=$2;
   var $123=(($4+8)|0);
   var $124=$a;
   var $125=__ZNK3ogc18SC3DMCEncodeParams25GetFloatAttributePredModeEm($123, $124);
   var $126=$3;
   var $127=__ZN3ogc13SC3DMCDecoder16DecodeFloatArrayEPfmmPKfS3_mRKNS_14IndexedFaceSetENS_23OGCSC3DMCPredictionModeERKNS_12BinaryStreamE($4, $106, $109, $112, $115, $118, $121, $122, $125, $126);
   label = 12; break;
  case 12: 
   var $129=$a;
   var $130=((($129)+(1))|0);
   $a=$130;
   label = 10; break;
  case 13: 
   $a1=0;
   label = 14; break;
  case 14: 
   var $133=$a1;
   var $134=$2;
   var $135=__ZNK3ogc14IndexedFaceSet19GetNumIntAttributesEv($134);
   var $136=(($133)>>>(0)) < (($135)>>>(0));
   if ($136) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $138=$2;
   var $139=$a1;
   var $140=__ZNK3ogc14IndexedFaceSet15GetIntAttributeEm($138, $139);
   var $141=$2;
   var $142=$a1;
   var $143=__ZNK3ogc14IndexedFaceSet16GetNIntAttributeEm($141, $142);
   var $144=$2;
   var $145=$a1;
   var $146=__ZNK3ogc14IndexedFaceSet18GetIntAttributeDimEm($144, $145);
   var $147=$3;
   var $148=__ZN3ogc13SC3DMCDecoder14DecodeIntArrayEPlmmRKNS_12BinaryStreamE($4, $140, $143, $146, $147);
   label = 16; break;
  case 16: 
   var $150=$a1;
   var $151=((($150)+(1))|0);
   $a1=$151;
   label = 14; break;
  case 17: 
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc19TriangleListDecoder6DecodeEPlllRKNS_12BinaryStreamERm($this, $triangles, $numTriangles, $numVertices, $bstream, $iterator) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $compressionMask;
 var $maxSizeV2T;
 $1=$this;
 $2=$triangles;
 $3=$numTriangles;
 $4=$numVertices;
 $5=$bstream;
 $6=$iterator;
 var $7=$1;
 var $8=$5;
 var $9=$6;
 var $10=(($7+180)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=__ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($8, $9, $11);
 $compressionMask=$12;
 var $13=$5;
 var $14=$6;
 var $15=(($7+180)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=__ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($13, $14, $16);
 $maxSizeV2T=$17;
 var $18=$2;
 var $19=$3;
 var $20=$4;
 var $21=$maxSizeV2T;
 var $22=__ZN3ogc19TriangleListDecoder4InitEPllll($7, $18, $19, $20, $21);
 var $23=(($7+84)|0);
 var $24=$5;
 var $25=$6;
 var $26=(($7+180)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=__ZN3ogc22CompressedTriangleFans4LoadERKNS_12BinaryStreamERmNS_19OGCSC3DMCStreamTypeE($23, $24, $25, $27);
 var $29=__ZN3ogc19TriangleListDecoder10DecompressEv($7);
 return 0;
}
function __ZN3ogc14IndexedFaceSet18SetNFloatAttributeEmm($this, $a, $nFloatAttribute) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   $2=$a;
   $3=$nFloatAttribute;
   var $4=$1;
   var $5=$2;
   var $6=(($5)>>>(0)) < 256;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 187, ((7464)|0), ((192)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $11=$3;
   var $12=$2;
   var $13=(($4+136)|0);
   var $14=(($13+($12<<2))|0);
   HEAP32[(($14)>>2)]=$11;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc14IndexedFaceSet18GetNFloatAttributeEm($this, $a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$a;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) < 256;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 66, ((5968)|0), ((192)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=$2;
   var $11=(($3+136)|0);
   var $12=(($11+($10<<2))|0);
   var $13=HEAP32[(($12)>>2)];
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc14IndexedFaceSet20SetFloatAttributeDimEmm($this, $a, $d) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   $2=$a;
   $3=$d;
   var $4=$1;
   var $5=$2;
   var $6=(($5)>>>(0)) < 256;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 197, ((7320)|0), ((192)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $11=$3;
   var $12=$2;
   var $13=(($4+2184)|0);
   var $14=(($13+($12<<2))|0);
   HEAP32[(($14)>>2)]=$11;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc14IndexedFaceSet20SetFloatAttributeMinEmmf($this, $a, $dim, $min) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$a;
   $3=$dim;
   $4=$min;
   var $5=$1;
   var $6=$2;
   var $7=(($6)>>>(0)) < 256;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 207, ((7144)|0), ((192)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $12=$3;
   var $13=(($12)>>>(0)) < 8;
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 7; break;
  case 6: 
   ___assert_func(((1152)|0), 208, ((7144)|0), ((4456)|0));
   throw "Reached an unreachable!";
   label = 7; break;
  case 7: 
   var $18=$4;
   var $19=$2;
   var $20=($19<<3);
   var $21=$3;
   var $22=((($20)+($21))|0);
   var $23=(($5+4232)|0);
   var $24=(($23+($22<<2))|0);
   HEAPF32[(($24)>>2)]=$18;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc14IndexedFaceSet20SetFloatAttributeMaxEmmf($this, $a, $dim, $max) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$a;
   $3=$dim;
   $4=$max;
   var $5=$1;
   var $6=$2;
   var $7=(($6)>>>(0)) < 256;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 213, ((7232)|0), ((192)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $12=$3;
   var $13=(($12)>>>(0)) < 8;
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 7; break;
  case 6: 
   ___assert_func(((1152)|0), 214, ((7232)|0), ((4456)|0));
   throw "Reached an unreachable!";
   label = 7; break;
  case 7: 
   var $18=$4;
   var $19=$2;
   var $20=($19<<3);
   var $21=$3;
   var $22=((($20)+($21))|0);
   var $23=(($5+12424)|0);
   var $24=(($23+($22<<2))|0);
   HEAPF32[(($24)>>2)]=$18;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc18SC3DMCEncodeParams26SetFloatAttributeQuantBitsEmm($this, $a, $q) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   $2=$a;
   $3=$q;
   var $4=$1;
   var $5=$2;
   var $6=(($5)>>>(0)) < 256;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((536)|0), 109, ((6992)|0), ((192)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $11=$3;
   var $12=$2;
   var $13=(($4+24)|0);
   var $14=(($13+($12<<2))|0);
   HEAP32[(($14)>>2)]=$11;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc14IndexedFaceSet16SetNIntAttributeEmm($this, $a, $nIntAttribute) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   $2=$a;
   $3=$nIntAttribute;
   var $4=$1;
   var $5=$2;
   var $6=(($5)>>>(0)) < 256;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 192, ((7624)|0), ((824)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $11=$3;
   var $12=$2;
   var $13=(($4+1160)|0);
   var $14=(($13+($12<<2))|0);
   HEAP32[(($14)>>2)]=$11;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc14IndexedFaceSet16GetNIntAttributeEm($this, $a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$a;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) < 256;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 71, ((6200)|0), ((824)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=$2;
   var $11=(($3+1160)|0);
   var $12=(($11+($10<<2))|0);
   var $13=HEAP32[(($12)>>2)];
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc14IndexedFaceSet18SetIntAttributeDimEmm($this, $a, $d) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   $2=$a;
   $3=$d;
   var $4=$1;
   var $5=$2;
   var $6=(($5)>>>(0)) < 256;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 202, ((7544)|0), ((824)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $11=$3;
   var $12=$2;
   var $13=(($4+3208)|0);
   var $14=(($13+($12<<2))|0);
   HEAP32[(($14)>>2)]=$11;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc13SC3DMCDecoder16DecodeFloatArrayEPfmmPKfS3_mRKNS_14IndexedFaceSetENS_23OGCSC3DMCPredictionModeERKNS_12BinaryStreamE($this, $floatArray, $numFloatArray, $dimFloatArray, $minFloatArray, $maxFloatArray, $nQBits, $ifs, $predMode, $bstream) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $v2T;
   var $triangles;
   var $vpred=__stackBase__;
   var $tpred=(__stackBase__)+(32);
   var $nv;
   var $nt;
   var $predResidual;
   var $nvert;
   var $size;
   var $buffer=(__stackBase__)+(64);
   var $acd=(__stackBase__)+(72);
   var $bModel0=(__stackBase__)+(104);
   var $11;
   var $12;
   var $bModel1=(__stackBase__)+(112);
   var $sizeSize;
   var $mask;
   var $exp_k;
   var $M;
   var $mModelValues=(__stackBase__)+(136);
   var $v;
   var $i;
   var $u0;
   var $u1;
   var $u;
   var $ta;
   var $a;
   var $b;
   var $u01;
   var $u12;
   var $u3;
   var $tb;
   var $c;
   var $foundB;
   var $k;
   var $x;
   var $i4;
   var $k5;
   var $w;
   var $i6;
   var $i7;
   var $i8;
   var $i9;
   var $i10;
   var $13;
   $1=$this;
   $2=$floatArray;
   $3=$numFloatArray;
   $4=$dimFloatArray;
   $5=$minFloatArray;
   $6=$maxFloatArray;
   $7=$nQBits;
   $8=$ifs;
   $9=$predMode;
   $10=$bstream;
   var $14=$1;
   var $15=$4;
   var $16=(($15)>>>(0)) < 8;
   if ($16) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((2720)|0), 317, ((7704)|0), ((3848)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $21=(($14+3128)|0);
   var $22=__ZNK3ogc19TriangleListDecoder19GetVertexToTriangleEv($21);
   $v2T=$22;
   var $23=$8;
   var $24=__ZNK3ogc14IndexedFaceSet13GetCoordIndexEv($23);
   $triangles=$24;
   var $25=$3;
   $nvert=$25;
   var $26=$3;
   var $27=$4;
   var $28=(Math.imul($26,$27)|0);
   $size=$28;
   HEAP32[(($buffer)>>2)]=0;
   __ZN3ogc16Arithmetic_CodecC2Ev($acd);
   (function() { try { __THREW__ = 0; return __ZN3ogc16Static_Bit_ModelC2Ev($bModel0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 15; break; }
  case 5: 
   (function() { try { __THREW__ = 0; return __ZN3ogc18Adaptive_Bit_ModelC2Ev($bModel1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 15; break; }
  case 6: 
   var $31=$10;
   var $32=(($14)|0);
   var $33=(($14+3320)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35 = (function() { try { __THREW__ = 0; return __ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($31, $32, $34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 15; break; }
  case 7: 
   var $37=((($35)-(5))|0);
   $sizeSize=$37;
   var $38=$10;
   var $39=(($14)|0);
   var $40=(($14+3320)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42 = (function() { try { __THREW__ = 0; return __ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($38, $39, $41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 15; break; }
  case 8: 
   $mask=$42;
   $M=0;
   var $44=(($14+3320)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45)|(0))!=1;
   if ($46) { label = 9; break; } else { label = 16; break; }
  case 9: 
   var $48=$10;
   var $49=(($14)|0);
   var $50=HEAP32[(($49)>>2)];
   (function() { try { __THREW__ = 0; return __ZNK3ogc12BinaryStream9GetBufferEmRPh($48, $50, $buffer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 15; break; }
  case 10: 
   var $52=$sizeSize;
   var $53=(($14)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=((($54)+($52))|0);
   HEAP32[(($53)>>2)]=$55;
   var $56=$sizeSize;
   var $57=HEAP32[(($buffer)>>2)];
   (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec10set_bufferEjPh($acd, $56, $57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 15; break; }
  case 11: 
   (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec13start_decoderEv($acd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 15; break; }
  case 12: 
   var $60 = (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec15ExpGolombDecodeEiRNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelE($acd, 0, $bModel0, $bModel1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 15; break; }
  case 13: 
   $exp_k=$60;
   var $62 = (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec15ExpGolombDecodeEiRNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelE($acd, 0, $bModel0, $bModel1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   $M=$62;
   label = 16; break;
  case 15: 
   var $65$0 = ___cxa_find_matching_catch(-1, -1); $65$1 = tempRet0;
   var $66=$65$0;
   $11=$66;
   var $67=$65$1;
   $12=$67;
   label = 142; break;
  case 16: 
   var $69=$M;
   var $70=((($69)+(2))|0);
   (function() { try { __THREW__ = 0; return __ZN3ogc19Adaptive_Data_ModelC2Ej($mModelValues, $70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 15; break; }
  case 17: 
   var $72=(($14+3316)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$size;
   var $75=(($73)>>>(0)) < (($74)>>>(0));
   if ($75) { label = 18; break; } else { label = 23; break; }
  case 18: 
   var $77=(($14+3312)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=(($78)|(0))==0;
   if ($79) { label = 20; break; } else { label = 19; break; }
  case 19: 
   var $81=$78;
   __ZdaPv($81);
   label = 20; break;
  case 20: 
   var $83=$size;
   var $84=(($14+3316)|0);
   HEAP32[(($84)>>2)]=$83;
   var $85=$size;
   var $86$0=_llvm_umul_with_overflow_i32($85, 4);
   var $86$1=tempRet0;
   var $87=$86$1;
   var $88=$86$0;
   var $89=$87 ? -1 : $88;
   var $90 = (function() { try { __THREW__ = 0; return __Znaj($89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $92=$90;
   var $93=(($14+3312)|0);
   HEAP32[(($93)>>2)]=$92;
   label = 23; break;
  case 22: 
   var $95$0 = ___cxa_find_matching_catch(-1, -1); $95$1 = tempRet0;
   var $96=$95$0;
   $11=$96;
   var $97=$95$1;
   $12=$97;
   __ZN3ogc19Adaptive_Data_ModelD2Ev($mModelValues);
   label = 142; break;
  case 23: 
   $v=0;
   label = 24; break;
  case 24: 
   var $100=$v;
   var $101=$nvert;
   var $102=(($100)|(0)) < (($101)|(0));
   if ($102) { label = 25; break; } else { label = 140; break; }
  case 25: 
   $nv=0;
   $nt=0;
   var $104=$v2T;
   var $105=$v;
   var $106 = (function() { try { __THREW__ = 0; return __ZNK3ogc13AdjacencyInfo15GetNumNeighborsEl($104, $105) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 22; break; }
  case 26: 
   var $108=(($106)|(0)) > 0;
   if ($108) { label = 27; break; } else { label = 93; break; }
  case 27: 
   var $110=$9;
   var $111=(($110)|(0))!=0;
   if ($111) { label = 28; break; } else { label = 93; break; }
  case 28: 
   $i=0;
   label = 29; break;
  case 29: 
   var $114=$i;
   var $115=$4;
   var $116=(($114)>>>(0)) < (($115)>>>(0));
   if ($116) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $118=$i;
   var $119=(($vpred+($118<<2))|0);
   HEAP32[(($119)>>2)]=0;
   var $120=$i;
   var $121=(($tpred+($120<<2))|0);
   HEAP32[(($121)>>2)]=0;
   label = 31; break;
  case 31: 
   var $123=$i;
   var $124=((($123)+(1))|0);
   $i=$124;
   label = 29; break;
  case 32: 
   var $126=$v2T;
   var $127=$v;
   var $128 = (function() { try { __THREW__ = 0; return __ZNK3ogc13AdjacencyInfo5BeginEl($126, $127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 22; break; }
  case 33: 
   $u0=$128;
   var $130=$v2T;
   var $131=$v;
   var $132 = (function() { try { __THREW__ = 0; return __ZNK3ogc13AdjacencyInfo3EndEl($130, $131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 22; break; }
  case 34: 
   $u1=$132;
   var $134=$u0;
   $u=$134;
   label = 35; break;
  case 35: 
   var $136=$u;
   var $137=$u1;
   var $138=(($136)|(0)) < (($137)|(0));
   if ($138) { label = 36; break; } else { label = 92; break; }
  case 36: 
   var $140=$v2T;
   var $141=$u;
   var $142 = (function() { try { __THREW__ = 0; return __ZNK3ogc13AdjacencyInfo11GetNeighborEl($140, $141) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 22; break; }
  case 37: 
   $ta=$142;
   var $144=$ta;
   var $145=(($144)|(0)) < 0;
   if ($145) { label = 38; break; } else { label = 39; break; }
  case 38: 
   label = 92; break;
  case 39: 
   var $148=$9;
   var $149=(($148)|(0))==5;
   if ($149) { label = 40; break; } else { label = 76; break; }
  case 40: 
   var $151=$ta;
   var $152=((($151)*(3))&-1);
   var $153=$triangles;
   var $154=(($153+($152<<2))|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=$v;
   var $157=(($155)|(0))==(($156)|(0));
   if ($157) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $159=$ta;
   var $160=((($159)*(3))&-1);
   var $161=((($160)+(1))|0);
   var $162=$triangles;
   var $163=(($162+($161<<2))|0);
   var $164=HEAP32[(($163)>>2)];
   $a=$164;
   var $165=$ta;
   var $166=((($165)*(3))&-1);
   var $167=((($166)+(2))|0);
   var $168=$triangles;
   var $169=(($168+($167<<2))|0);
   var $170=HEAP32[(($169)>>2)];
   $b=$170;
   label = 46; break;
  case 42: 
   var $172=$ta;
   var $173=((($172)*(3))&-1);
   var $174=((($173)+(1))|0);
   var $175=$triangles;
   var $176=(($175+($174<<2))|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=$v;
   var $179=(($177)|(0))==(($178)|(0));
   if ($179) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $181=$ta;
   var $182=((($181)*(3))&-1);
   var $183=(($182)|0);
   var $184=$triangles;
   var $185=(($184+($183<<2))|0);
   var $186=HEAP32[(($185)>>2)];
   $a=$186;
   var $187=$ta;
   var $188=((($187)*(3))&-1);
   var $189=((($188)+(2))|0);
   var $190=$triangles;
   var $191=(($190+($189<<2))|0);
   var $192=HEAP32[(($191)>>2)];
   $b=$192;
   label = 45; break;
  case 44: 
   var $194=$ta;
   var $195=((($194)*(3))&-1);
   var $196=(($195)|0);
   var $197=$triangles;
   var $198=(($197+($196<<2))|0);
   var $199=HEAP32[(($198)>>2)];
   $a=$199;
   var $200=$ta;
   var $201=((($200)*(3))&-1);
   var $202=((($201)+(1))|0);
   var $203=$triangles;
   var $204=(($203+($202<<2))|0);
   var $205=HEAP32[(($204)>>2)];
   $b=$205;
   label = 45; break;
  case 45: 
   label = 46; break;
  case 46: 
   var $208=$a;
   var $209=$v;
   var $210=(($208)|(0)) < (($209)|(0));
   if ($210) { label = 47; break; } else { label = 75; break; }
  case 47: 
   var $212=$b;
   var $213=$v;
   var $214=(($212)|(0)) < (($213)|(0));
   if ($214) { label = 48; break; } else { label = 75; break; }
  case 48: 
   var $216=$v2T;
   var $217=$a;
   var $218 = (function() { try { __THREW__ = 0; return __ZNK3ogc13AdjacencyInfo5BeginEl($216, $217) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 22; break; }
  case 49: 
   $u01=$218;
   var $220=$v2T;
   var $221=$a;
   var $222 = (function() { try { __THREW__ = 0; return __ZNK3ogc13AdjacencyInfo3EndEl($220, $221) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 50; break; } else { label = 22; break; }
  case 50: 
   $u12=$222;
   var $224=$u01;
   $u3=$224;
   label = 51; break;
  case 51: 
   var $226=$u3;
   var $227=$u12;
   var $228=(($226)|(0)) < (($227)|(0));
   if ($228) { label = 52; break; } else { label = 74; break; }
  case 52: 
   var $230=$v2T;
   var $231=$u3;
   var $232 = (function() { try { __THREW__ = 0; return __ZNK3ogc13AdjacencyInfo11GetNeighborEl($230, $231) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 22; break; }
  case 53: 
   $tb=$232;
   var $234=$tb;
   var $235=(($234)|(0)) < 0;
   if ($235) { label = 54; break; } else { label = 55; break; }
  case 54: 
   label = 74; break;
  case 55: 
   $c=-1;
   $foundB=0;
   $k=0;
   label = 56; break;
  case 56: 
   var $239=$k;
   var $240=(($239)|(0)) < 3;
   if ($240) { label = 57; break; } else { label = 65; break; }
  case 57: 
   var $242=$tb;
   var $243=((($242)*(3))&-1);
   var $244=$k;
   var $245=((($243)+($244))|0);
   var $246=$triangles;
   var $247=(($246+($245<<2))|0);
   var $248=HEAP32[(($247)>>2)];
   $x=$248;
   var $249=$x;
   var $250=$b;
   var $251=(($249)|(0))==(($250)|(0));
   if ($251) { label = 58; break; } else { label = 59; break; }
  case 58: 
   $foundB=1;
   label = 59; break;
  case 59: 
   var $254=$x;
   var $255=$v;
   var $256=(($254)|(0)) < (($255)|(0));
   if ($256) { label = 60; break; } else { label = 63; break; }
  case 60: 
   var $258=$x;
   var $259=$a;
   var $260=(($258)|(0))!=(($259)|(0));
   if ($260) { label = 61; break; } else { label = 63; break; }
  case 61: 
   var $262=$x;
   var $263=$b;
   var $264=(($262)|(0))!=(($263)|(0));
   if ($264) { label = 62; break; } else { label = 63; break; }
  case 62: 
   var $266=$x;
   $c=$266;
   label = 63; break;
  case 63: 
   label = 64; break;
  case 64: 
   var $269=$k;
   var $270=((($269)+(1))|0);
   $k=$270;
   label = 56; break;
  case 65: 
   var $272=$c;
   var $273=(($272)|(0))!=-1;
   if ($273) { label = 66; break; } else { label = 72; break; }
  case 66: 
   var $275=$foundB;
   var $276=(($275) & 1);
   if ($276) { label = 67; break; } else { label = 72; break; }
  case 67: 
   var $278=$nt;
   var $279=((($278)+(1))|0);
   $nt=$279;
   $i4=0;
   label = 68; break;
  case 68: 
   var $281=$i4;
   var $282=$4;
   var $283=(($281)>>>(0)) < (($282)>>>(0));
   if ($283) { label = 69; break; } else { label = 71; break; }
  case 69: 
   var $285=$a;
   var $286=$4;
   var $287=(Math.imul($285,$286)|0);
   var $288=$i4;
   var $289=((($287)+($288))|0);
   var $290=(($14+3312)|0);
   var $291=HEAP32[(($290)>>2)];
   var $292=(($291+($289<<2))|0);
   var $293=HEAP32[(($292)>>2)];
   var $294=$b;
   var $295=$4;
   var $296=(Math.imul($294,$295)|0);
   var $297=$i4;
   var $298=((($296)+($297))|0);
   var $299=(($14+3312)|0);
   var $300=HEAP32[(($299)>>2)];
   var $301=(($300+($298<<2))|0);
   var $302=HEAP32[(($301)>>2)];
   var $303=((($293)+($302))|0);
   var $304=$c;
   var $305=$4;
   var $306=(Math.imul($304,$305)|0);
   var $307=$i4;
   var $308=((($306)+($307))|0);
   var $309=(($14+3312)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310+($308<<2))|0);
   var $312=HEAP32[(($311)>>2)];
   var $313=((($303)-($312))|0);
   var $314=$i4;
   var $315=(($tpred+($314<<2))|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=((($316)+($313))|0);
   HEAP32[(($315)>>2)]=$317;
   label = 70; break;
  case 70: 
   var $319=$i4;
   var $320=((($319)+(1))|0);
   $i4=$320;
   label = 68; break;
  case 71: 
   label = 72; break;
  case 72: 
   label = 73; break;
  case 73: 
   var $324=$u3;
   var $325=((($324)+(1))|0);
   $u3=$325;
   label = 51; break;
  case 74: 
   label = 75; break;
  case 75: 
   label = 76; break;
  case 76: 
   var $329=$nt;
   var $330=(($329)|(0))==0;
   if ($330) { label = 77; break; } else { label = 90; break; }
  case 77: 
   var $332=$9;
   var $333=(($332)|(0))==5;
   if ($333) { label = 79; break; } else { label = 78; break; }
  case 78: 
   var $335=$9;
   var $336=(($335)|(0))==1;
   if ($336) { label = 79; break; } else { label = 90; break; }
  case 79: 
   $k5=0;
   label = 80; break;
  case 80: 
   var $339=$k5;
   var $340=(($339)|(0)) < 3;
   if ($340) { label = 81; break; } else { label = 89; break; }
  case 81: 
   var $342=$ta;
   var $343=((($342)*(3))&-1);
   var $344=$k5;
   var $345=((($343)+($344))|0);
   var $346=$triangles;
   var $347=(($346+($345<<2))|0);
   var $348=HEAP32[(($347)>>2)];
   $w=$348;
   var $349=$w;
   var $350=$v;
   var $351=(($349)|(0)) < (($350)|(0));
   if ($351) { label = 82; break; } else { label = 87; break; }
  case 82: 
   var $353=$nv;
   var $354=((($353)+(1))|0);
   $nv=$354;
   $i6=0;
   label = 83; break;
  case 83: 
   var $356=$i6;
   var $357=$4;
   var $358=(($356)>>>(0)) < (($357)>>>(0));
   if ($358) { label = 84; break; } else { label = 86; break; }
  case 84: 
   var $360=$w;
   var $361=$4;
   var $362=(Math.imul($360,$361)|0);
   var $363=$i6;
   var $364=((($362)+($363))|0);
   var $365=(($14+3312)|0);
   var $366=HEAP32[(($365)>>2)];
   var $367=(($366+($364<<2))|0);
   var $368=HEAP32[(($367)>>2)];
   var $369=$i6;
   var $370=(($vpred+($369<<2))|0);
   var $371=HEAP32[(($370)>>2)];
   var $372=((($371)+($368))|0);
   HEAP32[(($370)>>2)]=$372;
   label = 85; break;
  case 85: 
   var $374=$i6;
   var $375=((($374)+(1))|0);
   $i6=$375;
   label = 83; break;
  case 86: 
   label = 87; break;
  case 87: 
   label = 88; break;
  case 88: 
   var $379=$k5;
   var $380=((($379)+(1))|0);
   $k5=$380;
   label = 80; break;
  case 89: 
   label = 90; break;
  case 90: 
   label = 91; break;
  case 91: 
   var $384=$u;
   var $385=((($384)+(1))|0);
   $u=$385;
   label = 35; break;
  case 92: 
   label = 93; break;
  case 93: 
   var $388=$nt;
   var $389=(($388)|(0)) > 0;
   if ($389) { label = 94; break; } else { label = 104; break; }
  case 94: 
   $i7=0;
   label = 95; break;
  case 95: 
   var $392=$i7;
   var $393=$4;
   var $394=(($392)>>>(0)) < (($393)>>>(0));
   if ($394) { label = 96; break; } else { label = 103; break; }
  case 96: 
   var $396=(($14+3320)|0);
   var $397=HEAP32[(($396)>>2)];
   var $398=(($397)|(0))==1;
   if ($398) { label = 97; break; } else { label = 99; break; }
  case 97: 
   var $400=$10;
   var $401=(($14)|0);
   var $402 = (function() { try { __THREW__ = 0; return __ZNK3ogc12BinaryStream12ReadIntASCIIERm($400, $401) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 98; break; } else { label = 22; break; }
  case 98: 
   $predResidual=$402;
   label = 101; break;
  case 99: 
   var $405=$exp_k;
   var $406=$M;
   var $407 = (function() { try { __THREW__ = 0; return __ZN3ogc14DecodeIntACEGCERNS_16Arithmetic_CodecERNS_19Adaptive_Data_ModelERNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelEmm($acd, $mModelValues, $bModel0, $bModel1, $405, $406) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 100; break; } else { label = 22; break; }
  case 100: 
   $predResidual=$407;
   label = 101; break;
  case 101: 
   var $410=$predResidual;
   var $411=$i7;
   var $412=(($tpred+($411<<2))|0);
   var $413=HEAP32[(($412)>>2)];
   var $414=$nt;
   var $415=((((($414)|(0)))/(2))&-1);
   var $416=((($413)+($415))|0);
   var $417=$nt;
   var $418=((((($416)|(0)))/((($417)|(0))))&-1);
   var $419=((($410)+($418))|0);
   var $420=$v;
   var $421=$4;
   var $422=(Math.imul($420,$421)|0);
   var $423=$i7;
   var $424=((($422)+($423))|0);
   var $425=(($14+3312)|0);
   var $426=HEAP32[(($425)>>2)];
   var $427=(($426+($424<<2))|0);
   HEAP32[(($427)>>2)]=$419;
   label = 102; break;
  case 102: 
   var $429=$i7;
   var $430=((($429)+(1))|0);
   $i7=$430;
   label = 95; break;
  case 103: 
   label = 138; break;
  case 104: 
   var $433=$nv;
   var $434=(($433)|(0)) > 0;
   if ($434) { label = 105; break; } else { label = 115; break; }
  case 105: 
   $i8=0;
   label = 106; break;
  case 106: 
   var $437=$i8;
   var $438=$4;
   var $439=(($437)>>>(0)) < (($438)>>>(0));
   if ($439) { label = 107; break; } else { label = 114; break; }
  case 107: 
   var $441=(($14+3320)|0);
   var $442=HEAP32[(($441)>>2)];
   var $443=(($442)|(0))==1;
   if ($443) { label = 108; break; } else { label = 110; break; }
  case 108: 
   var $445=$10;
   var $446=(($14)|0);
   var $447 = (function() { try { __THREW__ = 0; return __ZNK3ogc12BinaryStream12ReadIntASCIIERm($445, $446) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 109; break; } else { label = 22; break; }
  case 109: 
   $predResidual=$447;
   label = 112; break;
  case 110: 
   var $450=$exp_k;
   var $451=$M;
   var $452 = (function() { try { __THREW__ = 0; return __ZN3ogc14DecodeIntACEGCERNS_16Arithmetic_CodecERNS_19Adaptive_Data_ModelERNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelEmm($acd, $mModelValues, $bModel0, $bModel1, $450, $451) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 111; break; } else { label = 22; break; }
  case 111: 
   $predResidual=$452;
   label = 112; break;
  case 112: 
   var $455=$predResidual;
   var $456=$i8;
   var $457=(($vpred+($456<<2))|0);
   var $458=HEAP32[(($457)>>2)];
   var $459=$nv;
   var $460=((((($459)|(0)))/(2))&-1);
   var $461=((($458)+($460))|0);
   var $462=$nv;
   var $463=((((($461)|(0)))/((($462)|(0))))&-1);
   var $464=((($455)+($463))|0);
   var $465=$v;
   var $466=$4;
   var $467=(Math.imul($465,$466)|0);
   var $468=$i8;
   var $469=((($467)+($468))|0);
   var $470=(($14+3312)|0);
   var $471=HEAP32[(($470)>>2)];
   var $472=(($471+($469<<2))|0);
   HEAP32[(($472)>>2)]=$464;
   label = 113; break;
  case 113: 
   var $474=$i8;
   var $475=((($474)+(1))|0);
   $i8=$475;
   label = 106; break;
  case 114: 
   label = 137; break;
  case 115: 
   var $478=$v;
   var $479=(($478)|(0)) > 0;
   if ($479) { label = 116; break; } else { label = 126; break; }
  case 116: 
   $i9=0;
   label = 117; break;
  case 117: 
   var $482=$i9;
   var $483=$4;
   var $484=(($482)>>>(0)) < (($483)>>>(0));
   if ($484) { label = 118; break; } else { label = 125; break; }
  case 118: 
   var $486=(($14+3320)|0);
   var $487=HEAP32[(($486)>>2)];
   var $488=(($487)|(0))==1;
   if ($488) { label = 119; break; } else { label = 121; break; }
  case 119: 
   var $490=$10;
   var $491=(($14)|0);
   var $492 = (function() { try { __THREW__ = 0; return __ZNK3ogc12BinaryStream12ReadIntASCIIERm($490, $491) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 120; break; } else { label = 22; break; }
  case 120: 
   $predResidual=$492;
   label = 123; break;
  case 121: 
   var $495=$exp_k;
   var $496=$M;
   var $497 = (function() { try { __THREW__ = 0; return __ZN3ogc14DecodeIntACEGCERNS_16Arithmetic_CodecERNS_19Adaptive_Data_ModelERNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelEmm($acd, $mModelValues, $bModel0, $bModel1, $495, $496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 122; break; } else { label = 22; break; }
  case 122: 
   $predResidual=$497;
   label = 123; break;
  case 123: 
   var $500=$predResidual;
   var $501=$v;
   var $502=((($501)-(1))|0);
   var $503=$4;
   var $504=(Math.imul($502,$503)|0);
   var $505=$i9;
   var $506=((($504)+($505))|0);
   var $507=(($14+3312)|0);
   var $508=HEAP32[(($507)>>2)];
   var $509=(($508+($506<<2))|0);
   var $510=HEAP32[(($509)>>2)];
   var $511=((($500)+($510))|0);
   var $512=$v;
   var $513=$4;
   var $514=(Math.imul($512,$513)|0);
   var $515=$i9;
   var $516=((($514)+($515))|0);
   var $517=(($14+3312)|0);
   var $518=HEAP32[(($517)>>2)];
   var $519=(($518+($516<<2))|0);
   HEAP32[(($519)>>2)]=$511;
   label = 124; break;
  case 124: 
   var $521=$i9;
   var $522=((($521)+(1))|0);
   $i9=$522;
   label = 117; break;
  case 125: 
   label = 136; break;
  case 126: 
   $i10=0;
   label = 127; break;
  case 127: 
   var $526=$i10;
   var $527=$4;
   var $528=(($526)>>>(0)) < (($527)>>>(0));
   if ($528) { label = 128; break; } else { label = 135; break; }
  case 128: 
   var $530=(($14+3320)|0);
   var $531=HEAP32[(($530)>>2)];
   var $532=(($531)|(0))==1;
   if ($532) { label = 129; break; } else { label = 131; break; }
  case 129: 
   var $534=$10;
   var $535=(($14)|0);
   var $536 = (function() { try { __THREW__ = 0; return __ZNK3ogc12BinaryStream13ReadUIntASCIIERm($534, $535) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 130; break; } else { label = 22; break; }
  case 130: 
   $predResidual=$536;
   label = 133; break;
  case 131: 
   var $539=$exp_k;
   var $540=$M;
   var $541 = (function() { try { __THREW__ = 0; return __ZN3ogc15DecodeUIntACEGCERNS_16Arithmetic_CodecERNS_19Adaptive_Data_ModelERNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelEmm($acd, $mModelValues, $bModel0, $bModel1, $539, $540) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 132; break; } else { label = 22; break; }
  case 132: 
   $predResidual=$541;
   label = 133; break;
  case 133: 
   var $544=$predResidual;
   var $545=$v;
   var $546=$4;
   var $547=(Math.imul($545,$546)|0);
   var $548=$i10;
   var $549=((($547)+($548))|0);
   var $550=(($14+3312)|0);
   var $551=HEAP32[(($550)>>2)];
   var $552=(($551+($549<<2))|0);
   HEAP32[(($552)>>2)]=$544;
   label = 134; break;
  case 134: 
   var $554=$i10;
   var $555=((($554)+(1))|0);
   $i10=$555;
   label = 127; break;
  case 135: 
   label = 136; break;
  case 136: 
   label = 137; break;
  case 137: 
   label = 138; break;
  case 138: 
   label = 139; break;
  case 139: 
   var $561=$v;
   var $562=((($561)+(1))|0);
   $v=$562;
   label = 24; break;
  case 140: 
   var $564=$2;
   var $565=$3;
   var $566=$4;
   var $567=$5;
   var $568=$6;
   var $569=$7;
   var $570 = (function() { try { __THREW__ = 0; return __ZN3ogc13SC3DMCDecoder19IQuantizeFloatArrayEPfmmPKfS3_m($14, $564, $565, $566, $567, $568, $569) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 141; break; } else { label = 22; break; }
  case 141: 
   $13=1;
   __ZN3ogc19Adaptive_Data_ModelD2Ev($mModelValues);
   __ZN3ogc16Arithmetic_CodecD2Ev($acd);
   STACKTOP = __stackBase__;
   return 0;
  case 142: 
   __ZN3ogc16Arithmetic_CodecD2Ev($acd);
   label = 143; break;
  case 143: 
   var $574=$11;
   var $575=$12;
   var $576$0=$574;
   var $576$1=0;
   var $577$0=$576$0;
   var $577$1=$575;
   ___resumeException($577$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc14IndexedFaceSet8GetCoordEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+112)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc14IndexedFaceSet11GetCoordMinEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+24)|0);
 var $4=(($3)|0);
 return $4;
}
function __ZNK3ogc14IndexedFaceSet11GetCoordMaxEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+36)|0);
 var $4=(($3)|0);
 return $4;
}
function __ZNK3ogc18SC3DMCEncodeParams17GetCoordQuantBitsEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc18SC3DMCEncodeParams16GetCoordPredModeEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+1048)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc14IndexedFaceSet9GetNormalEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+116)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc14IndexedFaceSet12GetNormalMinEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+48)|0);
 var $4=(($3)|0);
 return $4;
}
function __ZNK3ogc14IndexedFaceSet12GetNormalMaxEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+60)|0);
 var $4=(($3)|0);
 return $4;
}
function __ZNK3ogc18SC3DMCEncodeParams18GetNormalQuantBitsEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc18SC3DMCEncodeParams17GetNormalPredModeEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+1056)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc14IndexedFaceSet8GetColorEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+120)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc14IndexedFaceSet11GetColorMinEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+72)|0);
 var $4=(($3)|0);
 return $4;
}
function __ZNK3ogc14IndexedFaceSet11GetColorMaxEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+84)|0);
 var $4=(($3)|0);
 return $4;
}
function __ZNK3ogc18SC3DMCEncodeParams17GetColorQuantBitsEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+16)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc18SC3DMCEncodeParams16GetColorPredModeEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+1060)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc14IndexedFaceSet11GetTexCoordEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+124)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc14IndexedFaceSet14GetTexCoordMinEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+96)|0);
 var $4=(($3)|0);
 return $4;
}
function __ZNK3ogc14IndexedFaceSet14GetTexCoordMaxEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+104)|0);
 var $4=(($3)|0);
 return $4;
}
function __ZNK3ogc18SC3DMCEncodeParams20GetTexCoordQuantBitsEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+20)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc18SC3DMCEncodeParams19GetTexCoordPredModeEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+1052)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc19TriangleListDecoder19GetVertexToTriangleEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+64)|0);
 return $3;
}
function __ZNK3ogc14IndexedFaceSet13GetCoordIndexEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN3ogc13SC3DMCDecoder14DecodeIntArrayEPlmmRKNS_12BinaryStreamE($this, $intArray, $numIntArray, $dimIntArray, $bstream) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $nvert;
   var $buffer=__stackBase__;
   var $acd=(__stackBase__)+(8);
   var $bModel0=(__stackBase__)+(40);
   var $6;
   var $7;
   var $bModel1=(__stackBase__)+(48);
   var $sizeSize;
   var $mask;
   var $exp_k;
   var $M;
   var $minValue;
   var $mModelValues=(__stackBase__)+(72);
   var $v;
   var $i;
   var $v1;
   var $i2;
   var $8;
   $1=$this;
   $2=$intArray;
   $3=$numIntArray;
   $4=$dimIntArray;
   $5=$bstream;
   var $9=$1;
   var $10=$3;
   $nvert=$10;
   HEAP32[(($buffer)>>2)]=0;
   __ZN3ogc16Arithmetic_CodecC2Ev($acd);
   (function() { try { __THREW__ = 0; return __ZN3ogc16Static_Bit_ModelC2Ev($bModel0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 13; break; }
  case 2: 
   (function() { try { __THREW__ = 0; return __ZN3ogc18Adaptive_Bit_ModelC2Ev($bModel1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 13; break; }
  case 3: 
   var $13=$5;
   var $14=(($9)|0);
   var $15=(($9+3320)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17 = (function() { try { __THREW__ = 0; return __ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($13, $14, $16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 13; break; }
  case 4: 
   var $19=((($17)-(9))|0);
   $sizeSize=$19;
   var $20=$5;
   var $21=(($9)|0);
   var $22=(($9+3320)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24 = (function() { try { __THREW__ = 0; return __ZNK3ogc12BinaryStream9ReadUCharERmNS_19OGCSC3DMCStreamTypeE($20, $21, $23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 13; break; }
  case 5: 
   $mask=$24;
   $M=0;
   var $26=$5;
   var $27=(($9)|0);
   var $28=(($9+3320)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30 = (function() { try { __THREW__ = 0; return __ZNK3ogc12BinaryStream10ReadUInt32ERmNS_19OGCSC3DMCStreamTypeE($26, $27, $29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 13; break; }
  case 6: 
   var $32=((($30)-(2147483647))|0);
   $minValue=$32;
   var $33=(($9+3320)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34)|(0))!=1;
   if ($35) { label = 7; break; } else { label = 14; break; }
  case 7: 
   var $37=$5;
   var $38=(($9)|0);
   var $39=HEAP32[(($38)>>2)];
   (function() { try { __THREW__ = 0; return __ZNK3ogc12BinaryStream9GetBufferEmRPh($37, $39, $buffer) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $41=$sizeSize;
   var $42=(($9)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=((($43)+($41))|0);
   HEAP32[(($42)>>2)]=$44;
   var $45=$sizeSize;
   var $46=HEAP32[(($buffer)>>2)];
   (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec10set_bufferEjPh($acd, $45, $46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 13; break; }
  case 9: 
   (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec13start_decoderEv($acd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $49 = (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec15ExpGolombDecodeEiRNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelE($acd, 0, $bModel0, $bModel1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 13; break; }
  case 11: 
   $exp_k=$49;
   var $51 = (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec15ExpGolombDecodeEiRNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelE($acd, 0, $bModel0, $bModel1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 13; break; }
  case 12: 
   $M=$51;
   label = 14; break;
  case 13: 
   var $54$0 = ___cxa_find_matching_catch(-1, -1); $54$1 = tempRet0;
   var $55=$54$0;
   $6=$55;
   var $56=$54$1;
   $7=$56;
   label = 38; break;
  case 14: 
   var $58=$M;
   var $59=((($58)+(2))|0);
   (function() { try { __THREW__ = 0; return __ZN3ogc19Adaptive_Data_ModelC2Ej($mModelValues, $59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 13; break; }
  case 15: 
   var $61=(($9+3320)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62)|(0))==1;
   if ($63) { label = 16; break; } else { label = 27; break; }
  case 16: 
   $v=0;
   label = 17; break;
  case 17: 
   var $66=$v;
   var $67=$nvert;
   var $68=(($66)|(0)) < (($67)|(0));
   if ($68) { label = 18; break; } else { label = 26; break; }
  case 18: 
   $i=0;
   label = 19; break;
  case 19: 
   var $71=$i;
   var $72=$4;
   var $73=(($71)>>>(0)) < (($72)>>>(0));
   if ($73) { label = 20; break; } else { label = 24; break; }
  case 20: 
   var $75=$5;
   var $76=(($9)|0);
   var $77 = (function() { try { __THREW__ = 0; return __ZNK3ogc12BinaryStream13ReadUIntASCIIERm($75, $76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $79=$minValue;
   var $80=((($77)+($79))|0);
   var $81=$v;
   var $82=$4;
   var $83=(Math.imul($81,$82)|0);
   var $84=$i;
   var $85=((($83)+($84))|0);
   var $86=$2;
   var $87=(($86+($85<<2))|0);
   HEAP32[(($87)>>2)]=$80;
   label = 22; break;
  case 22: 
   var $89=$i;
   var $90=((($89)+(1))|0);
   $i=$90;
   label = 19; break;
  case 23: 
   var $92$0 = ___cxa_find_matching_catch(-1, -1); $92$1 = tempRet0;
   var $93=$92$0;
   $6=$93;
   var $94=$92$1;
   $7=$94;
   __ZN3ogc19Adaptive_Data_ModelD2Ev($mModelValues);
   label = 38; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $97=$v;
   var $98=((($97)+(1))|0);
   $v=$98;
   label = 17; break;
  case 26: 
   label = 37; break;
  case 27: 
   $v1=0;
   label = 28; break;
  case 28: 
   var $102=$v1;
   var $103=$nvert;
   var $104=(($102)|(0)) < (($103)|(0));
   if ($104) { label = 29; break; } else { label = 36; break; }
  case 29: 
   $i2=0;
   label = 30; break;
  case 30: 
   var $107=$i2;
   var $108=$4;
   var $109=(($107)>>>(0)) < (($108)>>>(0));
   if ($109) { label = 31; break; } else { label = 34; break; }
  case 31: 
   var $111=$exp_k;
   var $112=$M;
   var $113 = (function() { try { __THREW__ = 0; return __ZN3ogc15DecodeUIntACEGCERNS_16Arithmetic_CodecERNS_19Adaptive_Data_ModelERNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelEmm($acd, $mModelValues, $bModel0, $bModel1, $111, $112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 23; break; }
  case 32: 
   var $115=$minValue;
   var $116=((($113)+($115))|0);
   var $117=$v1;
   var $118=$4;
   var $119=(Math.imul($117,$118)|0);
   var $120=$i2;
   var $121=((($119)+($120))|0);
   var $122=$2;
   var $123=(($122+($121<<2))|0);
   HEAP32[(($123)>>2)]=$116;
   label = 33; break;
  case 33: 
   var $125=$i2;
   var $126=((($125)+(1))|0);
   $i2=$126;
   label = 30; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $129=$v1;
   var $130=((($129)+(1))|0);
   $v1=$130;
   label = 28; break;
  case 36: 
   label = 37; break;
  case 37: 
   $8=1;
   __ZN3ogc19Adaptive_Data_ModelD2Ev($mModelValues);
   __ZN3ogc16Arithmetic_CodecD2Ev($acd);
   STACKTOP = __stackBase__;
   return 0;
  case 38: 
   __ZN3ogc16Arithmetic_CodecD2Ev($acd);
   label = 39; break;
  case 39: 
   var $135=$6;
   var $136=$7;
   var $137$0=$135;
   var $137$1=0;
   var $138$0=$137$0;
   var $138$1=$136;
   ___resumeException($138$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc12BinaryStream9GetBufferEmRPh($this, $position, $buffer) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$position;
 $3=$buffer;
 var $4=$1;
 var $5=(($4)|0);
 var $6=__ZNK3ogc6VectorIhE9GetBufferEv($5);
 var $7=$2;
 var $8=(($6+$7)|0);
 var $9=$3;
 HEAP32[(($9)>>2)]=$8;
 return;
}
function __ZN3ogc16Arithmetic_Codec15ExpGolombDecodeEiRNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelE($this, $k, $bModel0, $bModel1) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $l;
   var $symbol;
   var $binary_symbol;
   $1=$this;
   $2=$k;
   $3=$bModel0;
   $4=$bModel1;
   var $5=$1;
   $symbol=0;
   $binary_symbol=0;
   label = 2; break;
  case 2: 
   var $7=$4;
   var $8=__ZN3ogc16Arithmetic_Codec6decodeERNS_18Adaptive_Bit_ModelE($5, $7);
   $l=$8;
   var $9=$l;
   var $10=(($9)|(0))==1;
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $12=$2;
   var $13=1 << $12;
   var $14=$symbol;
   var $15=((($14)+($13))|0);
   $symbol=$15;
   var $16=$2;
   var $17=((($16)+(1))|0);
   $2=$17;
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $20=$l;
   var $21=(($20)|(0))!=0;
   if ($21) { label = 2; break; } else { label = 6; break; }
  case 6: 
   label = 7; break;
  case 7: 
   var $24=$2;
   var $25=((($24)-(1))|0);
   $2=$25;
   var $26=(($24)|(0))!=0;
   if ($26) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $28=$3;
   var $29=__ZN3ogc16Arithmetic_Codec6decodeERNS_16Static_Bit_ModelE($5, $28);
   var $30=(($29)|(0))==1;
   if ($30) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $32=$2;
   var $33=1 << $32;
   var $34=$binary_symbol;
   var $35=$34 | $33;
   $binary_symbol=$35;
   label = 10; break;
  case 10: 
   label = 7; break;
  case 11: 
   var $38=$symbol;
   var $39=$binary_symbol;
   var $40=((($38)+($39))|0);
   return $40;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc12BinaryStream13ReadUIntASCIIERm($this, $position) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $value;
   var $x;
   var $i;
   $1=$this;
   $2=$position;
   var $3=$1;
   var $4=(($3)|0);
   var $5=$2;
   var $6=HEAP32[(($5)>>2)];
   var $7=((($6)+(1))|0);
   HEAP32[(($5)>>2)]=$7;
   var $8=__ZNK3ogc6VectorIhEixEj($4, $6);
   var $9=HEAP8[($8)];
   var $10=(($9)&(255));
   $value=$10;
   var $11=$value;
   var $12=(($11)|(0))==127;
   if ($12) { label = 2; break; } else { label = 6; break; }
  case 2: 
   $i=0;
   label = 3; break;
  case 3: 
   var $15=(($3)|0);
   var $16=$2;
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)+(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=__ZNK3ogc6VectorIhEixEj($15, $17);
   var $20=HEAP8[($19)];
   var $21=(($20)&(255));
   $x=$21;
   var $22=$x;
   var $23=$22 >> 1;
   var $24=$i;
   var $25=$23 << $24;
   var $26=$value;
   var $27=((($26)+($25))|0);
   $value=$27;
   var $28=$i;
   var $29=((($28)+(6))|0);
   $i=$29;
   label = 4; break;
  case 4: 
   var $31=$x;
   var $32=$31 & 1;
   var $33=(($32)|(0))!=0;
   if ($33) { label = 3; break; } else { label = 5; break; }
  case 5: 
   label = 6; break;
  case 6: 
   var $36=$value;
   return $36;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc15DecodeUIntACEGCERNS_16Arithmetic_CodecERNS_19Adaptive_Data_ModelERNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelEmm($acd, $mModelValues, $bModel0, $bModel1, $exp_k, $M) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $uiValue;
   $1=$acd;
   $2=$mModelValues;
   $3=$bModel0;
   $4=$bModel1;
   $5=$exp_k;
   $6=$M;
   var $7=$1;
   var $8=$2;
   var $9=__ZN3ogc16Arithmetic_Codec6decodeERNS_19Adaptive_Data_ModelE($7, $8);
   $uiValue=$9;
   var $10=$uiValue;
   var $11=$6;
   var $12=(($10)|(0))==(($11)|(0));
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $14=$1;
   var $15=$5;
   var $16=$3;
   var $17=$4;
   var $18=__ZN3ogc16Arithmetic_Codec15ExpGolombDecodeEiRNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelE($14, $15, $16, $17);
   var $19=$uiValue;
   var $20=((($19)+($18))|0);
   $uiValue=$20;
   label = 3; break;
  case 3: 
   var $22=$uiValue;
   return $22;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc13AdjacencyInfo15GetNumNeighborsEl($this, $element) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$element;
 var $3=$1;
 var $4=$2;
 var $5=__ZNK3ogc13AdjacencyInfo3EndEl($3, $4);
 var $6=$2;
 var $7=__ZNK3ogc13AdjacencyInfo5BeginEl($3, $6);
 var $8=((($5)-($7))|0);
 return $8;
}
function __ZNK3ogc12BinaryStream12ReadIntASCIIERm($this, $position) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $uiValue;
   $2=$this;
   $3=$position;
   var $4=$2;
   var $5=$3;
   var $6=__ZNK3ogc12BinaryStream13ReadUIntASCIIERm($4, $5);
   $uiValue=$6;
   var $7=$uiValue;
   var $8=$7 & 1;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$uiValue;
   var $12=$11 >>> 1;
   var $13=(((-$12))|0);
   $1=$13;
   label = 4; break;
  case 3: 
   var $15=$uiValue;
   var $16=$15 >>> 1;
   $1=$16;
   label = 4; break;
  case 4: 
   var $18=$1;
   return $18;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc14DecodeIntACEGCERNS_16Arithmetic_CodecERNS_19Adaptive_Data_ModelERNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelEmm($acd, $mModelValues, $bModel0, $bModel1, $exp_k, $M) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $uiValue;
   $2=$acd;
   $3=$mModelValues;
   $4=$bModel0;
   $5=$bModel1;
   $6=$exp_k;
   $7=$M;
   var $8=$2;
   var $9=$3;
   var $10=__ZN3ogc16Arithmetic_Codec6decodeERNS_19Adaptive_Data_ModelE($8, $9);
   $uiValue=$10;
   var $11=$uiValue;
   var $12=$7;
   var $13=(($11)|(0))==(($12)|(0));
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=$2;
   var $16=$6;
   var $17=$4;
   var $18=$5;
   var $19=__ZN3ogc16Arithmetic_Codec15ExpGolombDecodeEiRNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelE($15, $16, $17, $18);
   var $20=$uiValue;
   var $21=((($20)+($19))|0);
   $uiValue=$21;
   label = 3; break;
  case 3: 
   var $23=$uiValue;
   var $24=$23 & 1;
   var $25=(($24)|(0))!=0;
   if ($25) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $27=$uiValue;
   var $28=$27 >>> 1;
   var $29=(((-$28))|0);
   $1=$29;
   label = 6; break;
  case 5: 
   var $31=$uiValue;
   var $32=$31 >>> 1;
   $1=$32;
   label = 6; break;
  case 6: 
   var $34=$1;
   return $34;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc14IndexedFaceSet17GetFloatAttributeEm($this, $a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$a;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) < 256;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 138, ((6128)|0), ((192)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=$2;
   var $11=(($3+20616)|0);
   var $12=(($11+($10<<2))|0);
   var $13=HEAP32[(($12)>>2)];
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc14IndexedFaceSet20GetFloatAttributeDimEm($this, $a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$a;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) < 256;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 94, ((5880)|0), ((192)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=$2;
   var $11=(($3+2184)|0);
   var $12=(($11+($10<<2))|0);
   var $13=HEAP32[(($12)>>2)];
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc14IndexedFaceSet20GetFloatAttributeMinEm($this, $a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$a;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) < 256;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 104, ((5704)|0), ((192)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=$2;
   var $11=($10<<3);
   var $12=(($3+4232)|0);
   var $13=(($12+($11<<2))|0);
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc14IndexedFaceSet20GetFloatAttributeMaxEm($this, $a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$a;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) < 256;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 109, ((5792)|0), ((192)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=$2;
   var $11=($10<<3);
   var $12=(($3+12424)|0);
   var $13=(($12+($11<<2))|0);
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc18SC3DMCEncodeParams26GetFloatAttributeQuantBitsEm($this, $a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$a;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) < 256;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((536)|0), 73, ((5512)|0), ((192)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=$2;
   var $11=(($3+24)|0);
   var $12=(($11+($10<<2))|0);
   var $13=HEAP32[(($12)>>2)];
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc18SC3DMCEncodeParams25GetFloatAttributePredModeEm($this, $a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$a;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) < 256;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((536)|0), 83, ((5600)|0), ((192)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=$2;
   var $11=(($3+1064)|0);
   var $12=(($11+($10<<2))|0);
   var $13=HEAP32[(($12)>>2)];
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc14IndexedFaceSet15GetIntAttributeEm($this, $a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$a;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) < 256;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 143, ((6280)|0), ((824)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=$2;
   var $11=(($3+21640)|0);
   var $12=(($11+($10<<2))|0);
   var $13=HEAP32[(($12)>>2)];
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc14IndexedFaceSet18GetIntAttributeDimEm($this, $a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$a;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) < 256;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((1152)|0), 99, ((6048)|0), ((824)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   var $10=$2;
   var $11=(($3+3208)|0);
   var $12=(($11+($10<<2))|0);
   var $13=HEAP32[(($12)>>2)];
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc13SC3DMCDecoder19IQuantizeFloatArrayEPfmmPKfS3_m($this, $floatArray, $numFloatArray, $dimFloatArray, $minFloatArray, $maxFloatArray, $nQBits) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $idelta=__stackBase__;
   var $r;
   var $d;
   var $v;
   var $d1;
   $1=$this;
   $2=$floatArray;
   $3=$numFloatArray;
   $4=$dimFloatArray;
   $5=$minFloatArray;
   $6=$maxFloatArray;
   $7=$nQBits;
   var $8=$1;
   $d=0;
   label = 2; break;
  case 2: 
   var $10=$d;
   var $11=$4;
   var $12=(($10)>>>(0)) < (($11)>>>(0));
   if ($12) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $14=$d;
   var $15=$6;
   var $16=(($15+($14<<2))|0);
   var $17=HEAPF32[(($16)>>2)];
   var $18=$d;
   var $19=$5;
   var $20=(($19+($18<<2))|0);
   var $21=HEAPF32[(($20)>>2)];
   var $22=($17)-($21);
   $r=$22;
   var $23=$r;
   var $24=$23 > 0;
   if ($24) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $26=$r;
   var $27=$7;
   var $28=1 << $27;
   var $29=((($28)-(1))|0);
   var $30=(($29)|(0));
   var $31=($26)/($30);
   var $32=$d;
   var $33=(($idelta+($32<<2))|0);
   HEAPF32[(($33)>>2)]=$31;
   label = 6; break;
  case 5: 
   var $35=$d;
   var $36=(($idelta+($35<<2))|0);
   HEAPF32[(($36)>>2)]=1;
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $39=$d;
   var $40=((($39)+(1))|0);
   $d=$40;
   label = 2; break;
  case 8: 
   $v=0;
   label = 9; break;
  case 9: 
   var $43=$v;
   var $44=$3;
   var $45=(($43)>>>(0)) < (($44)>>>(0));
   if ($45) { label = 10; break; } else { label = 16; break; }
  case 10: 
   $d1=0;
   label = 11; break;
  case 11: 
   var $48=$d1;
   var $49=$4;
   var $50=(($48)>>>(0)) < (($49)>>>(0));
   if ($50) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $52=$v;
   var $53=$4;
   var $54=(Math.imul($52,$53)|0);
   var $55=$d1;
   var $56=((($54)+($55))|0);
   var $57=(($8+3312)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+($56<<2))|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($60)|(0));
   var $62=$d1;
   var $63=(($idelta+($62<<2))|0);
   var $64=HEAPF32[(($63)>>2)];
   var $65=($61)*($64);
   var $66=$d1;
   var $67=$5;
   var $68=(($67+($66<<2))|0);
   var $69=HEAPF32[(($68)>>2)];
   var $70=($65)+($69);
   var $71=$v;
   var $72=$4;
   var $73=(Math.imul($71,$72)|0);
   var $74=$d1;
   var $75=((($73)+($74))|0);
   var $76=$2;
   var $77=(($76+($75<<2))|0);
   HEAPF32[(($77)>>2)]=$70;
   label = 13; break;
  case 13: 
   var $79=$d1;
   var $80=((($79)+(1))|0);
   $d1=$80;
   label = 11; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $83=$v;
   var $84=((($83)+(1))|0);
   $v=$84;
   label = 9; break;
  case 16: 
   STACKTOP = __stackBase__;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc6VectorIhEixEj($this, $i) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$i;
 var $3=$1;
 var $4=$2;
 var $5=(($3)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+$4)|0);
 return $7;
}
function __ZNK3ogc6VectorIhE9GetBufferEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK3ogc6VectorIhE7GetSizeEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN3ogc16Arithmetic_Codec19renorm_dec_intervalEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   label = 2; break;
  case 2: 
   var $4=(($2+16)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 << 8;
   var $7=(($2+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8+1)|0);
   HEAP32[(($7)>>2)]=$9;
   var $10=HEAP8[($9)];
   var $11=(($10)&(255));
   var $12=$6 | $11;
   var $13=(($2+16)|0);
   HEAP32[(($13)>>2)]=$12;
   label = 3; break;
  case 3: 
   var $15=(($2+20)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$16 << 8;
   HEAP32[(($15)>>2)]=$17;
   var $18=(($17)>>>(0)) < 16777216;
   if ($18) { label = 2; break; } else { label = 4; break; }
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc18Adaptive_Bit_Model6updateEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $scale;
   $1=$this;
   var $2=$1;
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($2+16)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=((($6)+($4))|0);
   HEAP32[(($5)>>2)]=$7;
   var $8=(($7)>>>(0)) > 8192;
   if ($8) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $10=(($2+16)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=((($11)+(1))|0);
   var $13=$12 >>> 1;
   var $14=(($2+16)|0);
   HEAP32[(($14)>>2)]=$13;
   var $15=(($2+12)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=((($16)+(1))|0);
   var $18=$17 >>> 1;
   var $19=(($2+12)|0);
   HEAP32[(($19)>>2)]=$18;
   var $20=(($2+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($2+16)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($21)|(0))==(($23)|(0));
   if ($24) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $26=(($2+16)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=((($27)+(1))|0);
   HEAP32[(($26)>>2)]=$28;
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $31=(($2+16)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=Math.floor((2147483648)/((($32)>>>(0))));
   $scale=$33;
   var $34=(($2+12)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$scale;
   var $37=(Math.imul($35,$36)|0);
   var $38=$37 >>> 18;
   var $39=(($2+8)|0);
   HEAP32[(($39)>>2)]=$38;
   var $40=(($2)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=((($41)*(5))&-1);
   var $43=$42 >>> 2;
   var $44=(($2)|0);
   HEAP32[(($44)>>2)]=$43;
   var $45=(($2)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46)>>>(0)) > 64;
   if ($47) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $49=(($2)|0);
   HEAP32[(($49)>>2)]=64;
   label = 7; break;
  case 7: 
   var $51=(($2)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($2+4)|0);
   HEAP32[(($53)>>2)]=$52;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc19Adaptive_Data_Model6updateEb($this, $from_encoder) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $n;
   var $k;
   var $sum;
   var $s;
   var $scale;
   var $w;
   var $max_cycle;
   $1=$this;
   var $3=(($from_encoder)&(1));
   $2=$3;
   var $4=$1;
   var $5=(($4+16)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($4+12)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=((($8)+($6))|0);
   HEAP32[(($7)>>2)]=$9;
   var $10=(($9)>>>(0)) > 32768;
   if ($10) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $12=(($4+12)|0);
   HEAP32[(($12)>>2)]=0;
   $n=0;
   label = 3; break;
  case 3: 
   var $14=$n;
   var $15=(($4+24)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($14)>>>(0)) < (($16)>>>(0));
   if ($17) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $19=$n;
   var $20=(($4+4)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+($19<<2))|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=((($23)+(1))|0);
   var $25=$24 >>> 1;
   var $26=$n;
   var $27=(($4+4)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+($26<<2))|0);
   HEAP32[(($29)>>2)]=$25;
   var $30=(($4+12)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=((($31)+($25))|0);
   HEAP32[(($30)>>2)]=$32;
   label = 5; break;
  case 5: 
   var $34=$n;
   var $35=((($34)+(1))|0);
   $n=$35;
   label = 3; break;
  case 6: 
   label = 7; break;
  case 7: 
   $sum=0;
   $s=0;
   var $38=(($4+12)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=Math.floor((2147483648)/((($39)>>>(0))));
   $scale=$40;
   var $41=$2;
   var $42=(($41) & 1);
   if ($42) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $44=(($4+32)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45)|(0))==0;
   if ($46) { label = 9; break; } else { label = 14; break; }
  case 9: 
   $k=0;
   label = 10; break;
  case 10: 
   var $49=$k;
   var $50=(($4+24)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($49)>>>(0)) < (($51)>>>(0));
   if ($52) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $54=$scale;
   var $55=$sum;
   var $56=(Math.imul($54,$55)|0);
   var $57=$56 >>> 16;
   var $58=$k;
   var $59=(($4)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($60+($58<<2))|0);
   HEAP32[(($61)>>2)]=$57;
   var $62=$k;
   var $63=(($4+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64+($62<<2))|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=$sum;
   var $68=((($67)+($66))|0);
   $sum=$68;
   label = 12; break;
  case 12: 
   var $70=$k;
   var $71=((($70)+(1))|0);
   $k=$71;
   label = 10; break;
  case 13: 
   label = 25; break;
  case 14: 
   $k=0;
   label = 15; break;
  case 15: 
   var $75=$k;
   var $76=(($4+24)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($75)>>>(0)) < (($77)>>>(0));
   if ($78) { label = 16; break; } else { label = 21; break; }
  case 16: 
   var $80=$scale;
   var $81=$sum;
   var $82=(Math.imul($80,$81)|0);
   var $83=$82 >>> 16;
   var $84=$k;
   var $85=(($4)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86+($84<<2))|0);
   HEAP32[(($87)>>2)]=$83;
   var $88=$k;
   var $89=(($4+4)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90+($88<<2))|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=$sum;
   var $94=((($93)+($92))|0);
   $sum=$94;
   var $95=$k;
   var $96=(($4)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=(($97+($95<<2))|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($4+36)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=$99 >>> (($101)>>>(0));
   $w=$102;
   label = 17; break;
  case 17: 
   var $104=$s;
   var $105=$w;
   var $106=(($104)>>>(0)) < (($105)>>>(0));
   if ($106) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $108=$k;
   var $109=((($108)-(1))|0);
   var $110=$s;
   var $111=((($110)+(1))|0);
   $s=$111;
   var $112=(($4+8)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($113+($111<<2))|0);
   HEAP32[(($114)>>2)]=$109;
   label = 17; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $117=$k;
   var $118=((($117)+(1))|0);
   $k=$118;
   label = 15; break;
  case 21: 
   var $120=(($4+8)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121)|0);
   HEAP32[(($122)>>2)]=0;
   label = 22; break;
  case 22: 
   var $124=$s;
   var $125=(($4+32)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=(($124)>>>(0)) <= (($126)>>>(0));
   if ($127) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $129=(($4+24)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=((($130)-(1))|0);
   var $132=$s;
   var $133=((($132)+(1))|0);
   $s=$133;
   var $134=(($4+8)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($135+($133<<2))|0);
   HEAP32[(($136)>>2)]=$131;
   label = 22; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $139=(($4+16)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=((($140)*(5))&-1);
   var $142=$141 >>> 2;
   var $143=(($4+16)|0);
   HEAP32[(($143)>>2)]=$142;
   var $144=(($4+24)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=((($145)+(6))|0);
   var $147=$146 << 3;
   $max_cycle=$147;
   var $148=(($4+16)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=$max_cycle;
   var $151=(($149)>>>(0)) > (($150)>>>(0));
   if ($151) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $153=$max_cycle;
   var $154=(($4+16)|0);
   HEAP32[(($154)>>2)]=$153;
   label = 27; break;
  case 27: 
   var $156=(($4+16)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($4+20)|0);
   HEAP32[(($158)>>2)]=$157;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc12BinaryStream16ReadFloat32ASCIIERm($this, $position) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $value=__stackBase__;
 var $fvalue;
 $1=$this;
 $2=$position;
 var $3=$1;
 var $4=$2;
 var $5=__ZNK3ogc12BinaryStream15ReadUInt32ASCIIERm($3, $4);
 HEAP32[(($value)>>2)]=$5;
 var $6=$value;
 var $7=HEAPF32[(($6)>>2)];
 $fvalue=$7;
 var $8=$fvalue;
 STACKTOP = __stackBase__;
 return $8;
}
function __ZNK3ogc12BinaryStream14ReadFloat32BinERm($this, $position) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $value=__stackBase__;
 var $fvalue;
 $1=$this;
 $2=$position;
 var $3=$1;
 var $4=$2;
 var $5=__ZNK3ogc12BinaryStream13ReadUInt32BinERm($3, $4);
 HEAP32[(($value)>>2)]=$5;
 var $6=$value;
 var $7=HEAPF32[(($6)>>2)];
 $fvalue=$7;
 var $8=$fvalue;
 STACKTOP = __stackBase__;
 return $8;
}
function __ZNK3ogc12BinaryStream14ReadUCharASCIIERm($this, $position) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$position;
 var $3=$1;
 var $4=(($3)|0);
 var $5=$2;
 var $6=HEAP32[(($5)>>2)];
 var $7=((($6)+(1))|0);
 HEAP32[(($5)>>2)]=$7;
 var $8=__ZNK3ogc6VectorIhEixEj($4, $6);
 var $9=HEAP8[($8)];
 return $9;
}
function __ZNK3ogc12BinaryStream13ReadUChar8BinERm($this, $position) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$position;
 var $3=$1;
 var $4=(($3)|0);
 var $5=$2;
 var $6=HEAP32[(($5)>>2)];
 var $7=((($6)+(1))|0);
 HEAP32[(($5)>>2)]=$7;
 var $8=__ZNK3ogc6VectorIhEixEj($4, $6);
 var $9=HEAP8[($8)];
 return $9;
}
function __ZN3ogc16Arithmetic_Codec6decodeERNS_16Static_Bit_ModelE($this, $M) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $x;
   var $bit;
   $1=$this;
   $2=$M;
   var $3=$1;
   var $4=$2;
   var $5=(($4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($3+20)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 >>> 13;
   var $10=(Math.imul($6,$9)|0);
   $x=$10;
   var $11=(($3+16)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$x;
   var $14=(($12)>>>(0)) >= (($13)>>>(0));
   var $15=(($14)&(1));
   $bit=$15;
   var $16=$bit;
   var $17=(($16)|(0))==0;
   if ($17) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $19=$x;
   var $20=(($3+20)|0);
   HEAP32[(($20)>>2)]=$19;
   label = 4; break;
  case 3: 
   var $22=$x;
   var $23=(($3+16)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-($22))|0);
   HEAP32[(($23)>>2)]=$25;
   var $26=$x;
   var $27=(($3+20)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=((($28)-($26))|0);
   HEAP32[(($27)>>2)]=$29;
   label = 4; break;
  case 4: 
   var $31=(($3+20)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)>>>(0)) < 16777216;
   if ($33) { label = 5; break; } else { label = 6; break; }
  case 5: 
   __ZN3ogc16Arithmetic_Codec19renorm_dec_intervalEv($3);
   label = 6; break;
  case 6: 
   var $36=$bit;
   return $36;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc16Arithmetic_Codec6decodeERNS_18Adaptive_Bit_ModelE($this, $M) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $x;
   var $bit;
   $1=$this;
   $2=$M;
   var $3=$1;
   var $4=$2;
   var $5=(($4+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($3+20)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 >>> 13;
   var $10=(Math.imul($6,$9)|0);
   $x=$10;
   var $11=(($3+16)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$x;
   var $14=(($12)>>>(0)) >= (($13)>>>(0));
   var $15=(($14)&(1));
   $bit=$15;
   var $16=$bit;
   var $17=(($16)|(0))==0;
   if ($17) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $19=$x;
   var $20=(($3+20)|0);
   HEAP32[(($20)>>2)]=$19;
   var $21=$2;
   var $22=(($21+12)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=((($23)+(1))|0);
   HEAP32[(($22)>>2)]=$24;
   label = 4; break;
  case 3: 
   var $26=$x;
   var $27=(($3+16)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=((($28)-($26))|0);
   HEAP32[(($27)>>2)]=$29;
   var $30=$x;
   var $31=(($3+20)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=((($32)-($30))|0);
   HEAP32[(($31)>>2)]=$33;
   label = 4; break;
  case 4: 
   var $35=(($3+20)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)>>>(0)) < 16777216;
   if ($37) { label = 5; break; } else { label = 6; break; }
  case 5: 
   __ZN3ogc16Arithmetic_Codec19renorm_dec_intervalEv($3);
   label = 6; break;
  case 6: 
   var $40=$2;
   var $41=(($40+4)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=((($42)-(1))|0);
   HEAP32[(($41)>>2)]=$43;
   var $44=(($43)|(0))==0;
   if ($44) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $46=$2;
   __ZN3ogc18Adaptive_Bit_Model6updateEv($46);
   label = 8; break;
  case 8: 
   var $48=$bit;
   return $48;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc12BinaryStream13ReadUInt32BinERm($this, $position) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $value;
   $1=$this;
   $2=$position;
   var $3=$1;
   var $4=$2;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($3)|0);
   var $7=__ZNK3ogc6VectorIhE7GetSizeEv($6);
   var $8=((($7)-(4))|0);
   var $9=(($5)>>>(0)) < (($8)>>>(0));
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((3464)|0), 241, ((6624)|0), ((3320)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   $value=0;
   var $14=(($3+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))==0;
   if ($16) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $18=(($3)|0);
   var $19=$2;
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)+(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=__ZNK3ogc6VectorIhEixEj($18, $20);
   var $23=HEAP8[($22)];
   var $24=(($23)&(255));
   var $25=$24 << 24;
   var $26=$value;
   var $27=((($26)+($25))|0);
   $value=$27;
   var $28=(($3)|0);
   var $29=$2;
   var $30=HEAP32[(($29)>>2)];
   var $31=((($30)+(1))|0);
   HEAP32[(($29)>>2)]=$31;
   var $32=__ZNK3ogc6VectorIhEixEj($28, $30);
   var $33=HEAP8[($32)];
   var $34=(($33)&(255));
   var $35=$34 << 16;
   var $36=$value;
   var $37=((($36)+($35))|0);
   $value=$37;
   var $38=(($3)|0);
   var $39=$2;
   var $40=HEAP32[(($39)>>2)];
   var $41=((($40)+(1))|0);
   HEAP32[(($39)>>2)]=$41;
   var $42=__ZNK3ogc6VectorIhEixEj($38, $40);
   var $43=HEAP8[($42)];
   var $44=(($43)&(255));
   var $45=$44 << 8;
   var $46=$value;
   var $47=((($46)+($45))|0);
   $value=$47;
   var $48=(($3)|0);
   var $49=$2;
   var $50=HEAP32[(($49)>>2)];
   var $51=((($50)+(1))|0);
   HEAP32[(($49)>>2)]=$51;
   var $52=__ZNK3ogc6VectorIhEixEj($48, $50);
   var $53=HEAP8[($52)];
   var $54=(($53)&(255));
   var $55=$value;
   var $56=((($55)+($54))|0);
   $value=$56;
   label = 7; break;
  case 6: 
   var $58=(($3)|0);
   var $59=$2;
   var $60=HEAP32[(($59)>>2)];
   var $61=((($60)+(1))|0);
   HEAP32[(($59)>>2)]=$61;
   var $62=__ZNK3ogc6VectorIhEixEj($58, $60);
   var $63=HEAP8[($62)];
   var $64=(($63)&(255));
   var $65=$value;
   var $66=((($65)+($64))|0);
   $value=$66;
   var $67=(($3)|0);
   var $68=$2;
   var $69=HEAP32[(($68)>>2)];
   var $70=((($69)+(1))|0);
   HEAP32[(($68)>>2)]=$70;
   var $71=__ZNK3ogc6VectorIhEixEj($67, $69);
   var $72=HEAP8[($71)];
   var $73=(($72)&(255));
   var $74=$73 << 8;
   var $75=$value;
   var $76=((($75)+($74))|0);
   $value=$76;
   var $77=(($3)|0);
   var $78=$2;
   var $79=HEAP32[(($78)>>2)];
   var $80=((($79)+(1))|0);
   HEAP32[(($78)>>2)]=$80;
   var $81=__ZNK3ogc6VectorIhEixEj($77, $79);
   var $82=HEAP8[($81)];
   var $83=(($82)&(255));
   var $84=$83 << 16;
   var $85=$value;
   var $86=((($85)+($84))|0);
   $value=$86;
   var $87=(($3)|0);
   var $88=$2;
   var $89=HEAP32[(($88)>>2)];
   var $90=((($89)+(1))|0);
   HEAP32[(($88)>>2)]=$90;
   var $91=__ZNK3ogc6VectorIhEixEj($87, $89);
   var $92=HEAP8[($91)];
   var $93=(($92)&(255));
   var $94=$93 << 24;
   var $95=$value;
   var $96=((($95)+($94))|0);
   $value=$96;
   label = 7; break;
  case 7: 
   var $98=$value;
   return $98;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK3ogc12BinaryStream15ReadUInt32ASCIIERm($this, $position) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $value;
   var $shift;
   var $i;
   $1=$this;
   $2=$position;
   var $3=$1;
   var $4=$2;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($3)|0);
   var $7=__ZNK3ogc6VectorIhE7GetSizeEv($6);
   var $8=((($7)-(5))|0);
   var $9=(($5)>>>(0)) < (($8)>>>(0));
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   ___assert_func(((3464)|0), 333, ((6552)|0), ((3128)|0));
   throw "Reached an unreachable!";
   label = 4; break;
  case 4: 
   $value=0;
   $shift=0;
   $i=0;
   label = 5; break;
  case 5: 
   var $15=$i;
   var $16=(($15)>>>(0)) < 5;
   if ($16) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $18=(($3)|0);
   var $19=$2;
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)+(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=__ZNK3ogc6VectorIhEixEj($18, $20);
   var $23=HEAP8[($22)];
   var $24=(($23)&(255));
   var $25=$shift;
   var $26=$24 << $25;
   var $27=$value;
   var $28=((($27)+($26))|0);
   $value=$28;
   var $29=$shift;
   var $30=((($29)+(7))|0);
   $shift=$30;
   label = 7; break;
  case 7: 
   var $32=$i;
   var $33=((($32)+(1))|0);
   $i=$33;
   label = 5; break;
  case 8: 
   var $35=$value;
   return $35;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc16Arithmetic_CodecC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+24)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($2+28)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($2)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($2+4)|0);
 HEAP32[(($6)>>2)]=0;
 return;
}
function __ZN3ogc16Static_Bit_ModelC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=4096;
 return;
}
function __ZN3ogc18Adaptive_Bit_Model5resetEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 HEAP32[(($3)>>2)]=1;
 var $4=(($2+16)|0);
 HEAP32[(($4)>>2)]=2;
 var $5=(($2+8)|0);
 HEAP32[(($5)>>2)]=4096;
 var $6=(($2+4)|0);
 HEAP32[(($6)>>2)]=4;
 var $7=(($2)|0);
 HEAP32[(($7)>>2)]=4;
 return;
}
function __ZN3ogc16Arithmetic_Codec6decodeERNS_19Adaptive_Data_ModelE($this, $M) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $n;
   var $s;
   var $x;
   var $y;
   var $dv;
   var $t;
   var $m;
   var $m1;
   var $z;
   $1=$this;
   $2=$M;
   var $3=$1;
   var $4=(($3+20)|0);
   var $5=HEAP32[(($4)>>2)];
   $y=$5;
   var $6=$2;
   var $7=(($6+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 11; break; }
  case 2: 
   var $11=(($3+16)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($3+20)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$14 >>> 15;
   HEAP32[(($13)>>2)]=$15;
   var $16=Math.floor(((($12)>>>(0)))/((($15)>>>(0))));
   $dv=$16;
   var $17=$dv;
   var $18=$2;
   var $19=(($18+36)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$17 >>> (($20)>>>(0));
   $t=$21;
   var $22=$t;
   var $23=$2;
   var $24=(($23+8)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+($22<<2))|0);
   var $27=HEAP32[(($26)>>2)];
   $s=$27;
   var $28=$t;
   var $29=((($28)+(1))|0);
   var $30=$2;
   var $31=(($30+8)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32+($29<<2))|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=((($34)+(1))|0);
   $n=$35;
   label = 3; break;
  case 3: 
   var $37=$n;
   var $38=$s;
   var $39=((($38)+(1))|0);
   var $40=(($37)>>>(0)) > (($39)>>>(0));
   if ($40) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $42=$s;
   var $43=$n;
   var $44=((($42)+($43))|0);
   var $45=$44 >>> 1;
   $m=$45;
   var $46=$m;
   var $47=$2;
   var $48=(($47)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+($46<<2))|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$dv;
   var $53=(($51)>>>(0)) > (($52)>>>(0));
   if ($53) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $55=$m;
   $n=$55;
   label = 7; break;
  case 6: 
   var $57=$m;
   $s=$57;
   label = 7; break;
  case 7: 
   label = 3; break;
  case 8: 
   var $60=$s;
   var $61=$2;
   var $62=(($61)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63+($60<<2))|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($3+20)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(Math.imul($65,$67)|0);
   $x=$68;
   var $69=$s;
   var $70=$2;
   var $71=(($70+28)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($69)|(0))!=(($72)|(0));
   if ($73) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $75=$s;
   var $76=((($75)+(1))|0);
   var $77=$2;
   var $78=(($77)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+($76<<2))|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($3+20)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(Math.imul($81,$83)|0);
   $y=$84;
   label = 10; break;
  case 10: 
   label = 18; break;
  case 11: 
   $s=0;
   $x=0;
   var $87=(($3+20)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=$88 >>> 15;
   HEAP32[(($87)>>2)]=$89;
   var $90=$2;
   var $91=(($90+24)|0);
   var $92=HEAP32[(($91)>>2)];
   $n=$92;
   var $93=$92 >>> 1;
   $m1=$93;
   label = 12; break;
  case 12: 
   var $95=(($3+20)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$m1;
   var $98=$2;
   var $99=(($98)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100+($97<<2))|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(Math.imul($96,$102)|0);
   $z=$103;
   var $104=$z;
   var $105=(($3+16)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($104)>>>(0)) > (($106)>>>(0));
   if ($107) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $109=$m1;
   $n=$109;
   var $110=$z;
   $y=$110;
   label = 15; break;
  case 14: 
   var $112=$m1;
   $s=$112;
   var $113=$z;
   $x=$113;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $116=$s;
   var $117=$n;
   var $118=((($116)+($117))|0);
   var $119=$118 >>> 1;
   $m1=$119;
   var $120=$s;
   var $121=(($119)|(0))!=(($120)|(0));
   if ($121) { label = 12; break; } else { label = 17; break; }
  case 17: 
   label = 18; break;
  case 18: 
   var $124=$x;
   var $125=(($3+16)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=((($126)-($124))|0);
   HEAP32[(($125)>>2)]=$127;
   var $128=$y;
   var $129=$x;
   var $130=((($128)-($129))|0);
   var $131=(($3+20)|0);
   HEAP32[(($131)>>2)]=$130;
   var $132=(($3+20)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133)>>>(0)) < 16777216;
   if ($134) { label = 19; break; } else { label = 20; break; }
  case 19: 
   __ZN3ogc16Arithmetic_Codec19renorm_dec_intervalEv($3);
   label = 20; break;
  case 20: 
   var $137=$s;
   var $138=$2;
   var $139=(($138+4)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=(($140+($137<<2))|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=((($142)+(1))|0);
   HEAP32[(($141)>>2)]=$143;
   var $144=$2;
   var $145=(($144+20)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=((($146)-(1))|0);
   HEAP32[(($145)>>2)]=$147;
   var $148=(($147)|(0))==0;
   if ($148) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $150=$2;
   __ZN3ogc19Adaptive_Data_Model6updateEb($150, 0);
   label = 22; break;
  case 22: 
   var $152=$s;
   return $152;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc16Arithmetic_Codec10set_bufferEjPh($this, $max_code_bytes, $user_buffer) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   $2=$max_code_bytes;
   $3=$user_buffer;
   var $4=$1;
   var $5=$2;
   var $6=(($5)>>>(0)) < 1;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=$2;
   var $9=(($8)>>>(0)) > 16777216;
   if ($9) { label = 3; break; } else { label = 4; break; }
  case 3: 
   __ZN3ogcL8AC_ErrorEPKc(((1840)|0));
   label = 4; break;
  case 4: 
   var $12=(($4+28)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))!=0;
   if ($14) { label = 5; break; } else { label = 6; break; }
  case 5: 
   __ZN3ogcL8AC_ErrorEPKc(((3272)|0));
   label = 6; break;
  case 6: 
   var $17=$3;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $20=$2;
   var $21=(($4+24)|0);
   HEAP32[(($21)>>2)]=$20;
   var $22=$3;
   var $23=(($4)|0);
   HEAP32[(($23)>>2)]=$22;
   var $24=(($4+4)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0))==0;
   if ($26) { label = 9; break; } else { label = 8; break; }
  case 8: 
   __ZdaPv($25);
   label = 9; break;
  case 9: 
   var $29=(($4+4)|0);
   HEAP32[(($29)>>2)]=0;
   label = 17; break;
  case 10: 
   var $31=$2;
   var $32=(($4+24)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($31)>>>(0)) <= (($33)>>>(0));
   if ($34) { label = 11; break; } else { label = 12; break; }
  case 11: 
   label = 17; break;
  case 12: 
   var $37=$2;
   var $38=(($4+24)|0);
   HEAP32[(($38)>>2)]=$37;
   var $39=(($4+4)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40)|(0))==0;
   if ($41) { label = 14; break; } else { label = 13; break; }
  case 13: 
   __ZdaPv($40);
   label = 14; break;
  case 14: 
   var $44=(($4+24)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=((($45)+(16))|0);
   var $47=__Znaj($46);
   var $48=(($4+4)|0);
   HEAP32[(($48)>>2)]=$47;
   var $49=(($47)|(0))==0;
   if ($49) { label = 15; break; } else { label = 16; break; }
  case 15: 
   __ZN3ogcL8AC_ErrorEPKc(((2616)|0));
   label = 16; break;
  case 16: 
   var $52=(($4+4)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($4)|0);
   HEAP32[(($54)>>2)]=$53;
   label = 17; break;
  case 17: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc16Arithmetic_CodecD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+4)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   __ZdaPv($4);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc16Arithmetic_Codec13start_decoderEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+28)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZN3ogcL8AC_ErrorEPKc(((1608)|0));
   label = 3; break;
  case 3: 
   var $8=(($2+24)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==0;
   if ($10) { label = 4; break; } else { label = 5; break; }
  case 4: 
   __ZN3ogcL8AC_ErrorEPKc(((1816)|0));
   label = 5; break;
  case 5: 
   var $13=(($2+28)|0);
   HEAP32[(($13)>>2)]=2;
   var $14=(($2+20)|0);
   HEAP32[(($14)>>2)]=-1;
   var $15=(($2)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+3)|0);
   var $18=(($2+8)|0);
   HEAP32[(($18)>>2)]=$17;
   var $19=(($2)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|0);
   var $22=HEAP8[($21)];
   var $23=(($22)&(255));
   var $24=$23 << 24;
   var $25=(($2)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26+1)|0);
   var $28=HEAP8[($27)];
   var $29=(($28)&(255));
   var $30=$29 << 16;
   var $31=$24 | $30;
   var $32=(($2)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33+2)|0);
   var $35=HEAP8[($34)];
   var $36=(($35)&(255));
   var $37=$36 << 8;
   var $38=$31 | $37;
   var $39=(($2)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40+3)|0);
   var $42=HEAP8[($41)];
   var $43=(($42)&(255));
   var $44=$38 | $43;
   var $45=(($2+16)|0);
   HEAP32[(($45)>>2)]=$44;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc18Adaptive_Bit_ModelC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN3ogc18Adaptive_Bit_Model5resetEv($2);
 return;
}
function __ZN3ogc19Adaptive_Data_ModelC2Ej($this, $number_of_symbols) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$number_of_symbols;
 var $3=$1;
 var $4=(($3+24)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($3)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=$2;
 __ZN3ogc19Adaptive_Data_Model12set_alphabetEj($3, $6);
 return;
}
function __ZN3ogc19Adaptive_Data_Model12set_alphabetEj($this, $number_of_symbols) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $table_bits;
   $1=$this;
   $2=$number_of_symbols;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) < 2;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=$2;
   var $8=(($7)>>>(0)) > 2048;
   if ($8) { label = 3; break; } else { label = 4; break; }
  case 3: 
   __ZN3ogcL8AC_ErrorEPKc(((3696)|0));
   label = 4; break;
  case 4: 
   var $11=(($3+24)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$2;
   var $14=(($12)|(0))!=(($13)|(0));
   if ($14) { label = 5; break; } else { label = 16; break; }
  case 5: 
   var $16=$2;
   var $17=(($3+24)|0);
   HEAP32[(($17)>>2)]=$16;
   var $18=(($3+24)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=((($19)-(1))|0);
   var $21=(($3+28)|0);
   HEAP32[(($21)>>2)]=$20;
   var $22=(($3)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))==0;
   if ($24) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $26=$23;
   __ZdaPv($26);
   label = 7; break;
  case 7: 
   var $28=(($3+24)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)>>>(0)) > 16;
   if ($30) { label = 8; break; } else { label = 12; break; }
  case 8: 
   $table_bits=3;
   label = 9; break;
  case 9: 
   var $33=(($3+24)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$table_bits;
   var $36=((($35)+(2))|0);
   var $37=1 << $36;
   var $38=(($34)>>>(0)) > (($37)>>>(0));
   if ($38) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $40=$table_bits;
   var $41=((($40)+(1))|0);
   $table_bits=$41;
   label = 9; break;
  case 11: 
   var $43=$table_bits;
   var $44=1 << $43;
   var $45=(($3+32)|0);
   HEAP32[(($45)>>2)]=$44;
   var $46=$table_bits;
   var $47=(((15)-($46))|0);
   var $48=(($3+36)|0);
   HEAP32[(($48)>>2)]=$47;
   var $49=(($3+24)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=($50<<1);
   var $52=(($3+32)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=((($51)+($53))|0);
   var $55=((($54)+(2))|0);
   var $56$0=_llvm_umul_with_overflow_i32($55, 4);
   var $56$1=tempRet0;
   var $57=$56$1;
   var $58=$56$0;
   var $59=$57 ? -1 : $58;
   var $60=__Znaj($59);
   var $61=$60;
   var $62=(($3)|0);
   HEAP32[(($62)>>2)]=$61;
   var $63=(($3)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($3+24)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=($66<<1);
   var $68=(($64+($67<<2))|0);
   var $69=(($3+8)|0);
   HEAP32[(($69)>>2)]=$68;
   label = 13; break;
  case 12: 
   var $71=(($3+8)|0);
   HEAP32[(($71)>>2)]=0;
   var $72=(($3+36)|0);
   HEAP32[(($72)>>2)]=0;
   var $73=(($3+32)|0);
   HEAP32[(($73)>>2)]=0;
   var $74=(($3+24)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=($75<<1);
   var $77$0=_llvm_umul_with_overflow_i32($76, 4);
   var $77$1=tempRet0;
   var $78=$77$1;
   var $79=$77$0;
   var $80=$78 ? -1 : $79;
   var $81=__Znaj($80);
   var $82=$81;
   var $83=(($3)|0);
   HEAP32[(($83)>>2)]=$82;
   label = 13; break;
  case 13: 
   var $85=(($3)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($3+24)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($86+($88<<2))|0);
   var $90=(($3+4)|0);
   HEAP32[(($90)>>2)]=$89;
   var $91=(($3)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92)|(0))==0;
   if ($93) { label = 14; break; } else { label = 15; break; }
  case 14: 
   __ZN3ogcL8AC_ErrorEPKc(((3424)|0));
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   __ZN3ogc19Adaptive_Data_Model5resetEv($3);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc19Adaptive_Data_ModelD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=$4;
   __ZdaPv($7);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc19Adaptive_Data_Model5resetEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $k;
   $1=$this;
   var $2=$1;
   var $3=(($2+24)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 8; break;
  case 3: 
   var $8=(($2+12)|0);
   HEAP32[(($8)>>2)]=0;
   var $9=(($2+24)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($2+16)|0);
   HEAP32[(($11)>>2)]=$10;
   $k=0;
   label = 4; break;
  case 4: 
   var $13=$k;
   var $14=(($2+24)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($13)>>>(0)) < (($15)>>>(0));
   if ($16) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $18=$k;
   var $19=(($2+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+($18<<2))|0);
   HEAP32[(($21)>>2)]=1;
   label = 6; break;
  case 6: 
   var $23=$k;
   var $24=((($23)+(1))|0);
   $k=$24;
   label = 4; break;
  case 7: 
   __ZN3ogc19Adaptive_Data_Model6updateEb($2, 0);
   var $26=(($2+24)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=((($27)+(6))|0);
   var $29=$28 >>> 1;
   var $30=(($2+16)|0);
   HEAP32[(($30)>>2)]=$29;
   var $31=(($2+20)|0);
   HEAP32[(($31)>>2)]=$29;
   label = 8; break;
  case 8: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc12LoadUIntDataERNS_6VectorIlEERKNS_12BinaryStreamERm($data, $bstream, $iterator) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $size;
   var $i;
   var $4=__stackBase__;
   $1=$data;
   $2=$bstream;
   $3=$iterator;
   var $5=$2;
   var $6=$3;
   var $7=__ZNK3ogc12BinaryStream15ReadUInt32ASCIIERm($5, $6);
   var $8=$2;
   var $9=$3;
   var $10=__ZNK3ogc12BinaryStream15ReadUInt32ASCIIERm($8, $9);
   $size=$10;
   var $11=$1;
   var $12=$size;
   __ZN3ogc6VectorIlE8AllocateEj($11, $12);
   var $13=$1;
   __ZN3ogc6VectorIlE5ClearEv($13);
   $i=0;
   label = 2; break;
  case 2: 
   var $15=$i;
   var $16=$size;
   var $17=(($15)>>>(0)) < (($16)>>>(0));
   if ($17) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $19=$1;
   var $20=$2;
   var $21=$3;
   var $22=__ZNK3ogc12BinaryStream13ReadUIntASCIIERm($20, $21);
   HEAP32[(($4)>>2)]=$22;
   __ZN3ogc6VectorIlE8PushBackERKl($19, $4);
   label = 4; break;
  case 4: 
   var $24=$i;
   var $25=((($24)+(1))|0);
   $i=$25;
   label = 2; break;
  case 5: 
   STACKTOP = __stackBase__;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc11LoadIntDataERNS_6VectorIlEERKNS_12BinaryStreamERm($data, $bstream, $iterator) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $size;
   var $i;
   var $4=__stackBase__;
   $1=$data;
   $2=$bstream;
   $3=$iterator;
   var $5=$2;
   var $6=$3;
   var $7=__ZNK3ogc12BinaryStream15ReadUInt32ASCIIERm($5, $6);
   var $8=$2;
   var $9=$3;
   var $10=__ZNK3ogc12BinaryStream15ReadUInt32ASCIIERm($8, $9);
   $size=$10;
   var $11=$1;
   var $12=$size;
   __ZN3ogc6VectorIlE8AllocateEj($11, $12);
   var $13=$1;
   __ZN3ogc6VectorIlE5ClearEv($13);
   $i=0;
   label = 2; break;
  case 2: 
   var $15=$i;
   var $16=$size;
   var $17=(($15)>>>(0)) < (($16)>>>(0));
   if ($17) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $19=$1;
   var $20=$2;
   var $21=$3;
   var $22=__ZNK3ogc12BinaryStream12ReadIntASCIIERm($20, $21);
   HEAP32[(($4)>>2)]=$22;
   __ZN3ogc6VectorIlE8PushBackERKl($19, $4);
   label = 4; break;
  case 4: 
   var $24=$i;
   var $25=((($24)+(1))|0);
   $i=$25;
   label = 2; break;
  case 5: 
   STACKTOP = __stackBase__;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc11LoadBinDataERNS_6VectorIlEERKNS_12BinaryStreamERm($data, $bstream, $iterator) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $size;
   var $symbol;
   var $i;
   var $h;
   var $4=__stackBase__;
   $1=$data;
   $2=$bstream;
   $3=$iterator;
   var $5=$2;
   var $6=$3;
   var $7=__ZNK3ogc12BinaryStream15ReadUInt32ASCIIERm($5, $6);
   var $8=$2;
   var $9=$3;
   var $10=__ZNK3ogc12BinaryStream15ReadUInt32ASCIIERm($8, $9);
   $size=$10;
   var $11=$1;
   var $12=$size;
   var $13=((($12)*(7))&-1);
   __ZN3ogc6VectorIlE8AllocateEj($11, $13);
   var $14=$1;
   __ZN3ogc6VectorIlE5ClearEv($14);
   $i=0;
   label = 2; break;
  case 2: 
   var $16=$i;
   var $17=$size;
   var $18=(($16)>>>(0)) < (($17)>>>(0));
   if ($18) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $20=$2;
   var $21=$3;
   var $22=__ZNK3ogc12BinaryStream14ReadUCharASCIIERm($20, $21);
   var $23=(($22)&(255));
   $symbol=$23;
   $h=0;
   label = 4; break;
  case 4: 
   var $25=$h;
   var $26=(($25)>>>(0)) < 7;
   if ($26) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $28=$1;
   var $29=$symbol;
   var $30=$29 & 1;
   HEAP32[(($4)>>2)]=$30;
   __ZN3ogc6VectorIlE8PushBackERKl($28, $4);
   var $31=$symbol;
   var $32=$31 >> 1;
   $symbol=$32;
   var $33=$i;
   var $34=((($33)+(1))|0);
   $i=$34;
   label = 6; break;
  case 6: 
   var $36=$h;
   var $37=((($36)+(1))|0);
   $h=$37;
   label = 4; break;
  case 7: 
   label = 2; break;
  case 8: 
   STACKTOP = __stackBase__;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogcL8AC_ErrorEPKc($msg) {
 var label = 0;
 var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 $1=$msg;
 var $2=HEAP32[((_stderr)>>2)];
 var $3=_fprintf($2, ((3032)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
 var $4=$1;
 var $5=HEAP32[((_stderr)>>2)];
 var $6=_fputs($4, $5);
 var $7=HEAP32[((_stderr)>>2)];
 var $8=_fputs(((2960)|0), $7);
 var $9=HEAP32[((_stdin)>>2)];
 var $10=_fgetc($9);
 _exit(1);
 throw "Reached an unreachable!";
 STACKTOP = __stackBase__;
 return;
}
function __ZN3ogc6VectorIlE8PushBackERKl($this, $value) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $tmp;
   $1=$this;
   $2=$value;
   var $3=$1;
   var $4=(($3+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($3+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($5)|(0))==(($7)|(0));
   if ($8) { label = 2; break; } else { label = 9; break; }
  case 2: 
   var $10=(($3+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=($11<<1);
   HEAP32[(($10)>>2)]=$12;
   var $13=(($3+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)>>>(0)) < 32;
   if ($15) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $17=(($3+4)|0);
   HEAP32[(($17)>>2)]=32;
   label = 4; break;
  case 4: 
   var $19=(($3+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21$0=_llvm_umul_with_overflow_i32($20, 4);
   var $21$1=tempRet0;
   var $22=$21$1;
   var $23=$21$0;
   var $24=$22 ? -1 : $23;
   var $25=__Znaj($24);
   var $26=$25;
   $tmp=$26;
   var $27=(($3+8)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)>>>(0)) > 0;
   if ($29) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $31=$tmp;
   var $32=$31;
   var $33=(($3)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$34;
   var $36=(($3+8)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=($37<<2);
   assert($38 % 1 === 0);(_memcpy($32, $35, $38)|0);
   var $39=(($3)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40)|(0))==0;
   if ($41) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $43=$40;
   __ZdaPv($43);
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $46=$tmp;
   var $47=(($3)|0);
   HEAP32[(($47)>>2)]=$46;
   label = 9; break;
  case 9: 
   var $49=(($3+8)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($3+4)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($50)>>>(0)) < (($52)>>>(0));
   if ($53) { label = 10; break; } else { label = 11; break; }
  case 10: 
   label = 12; break;
  case 11: 
   ___assert_func(((440)|0), 88, ((6696)|0), ((2912)|0));
   throw "Reached an unreachable!";
   label = 12; break;
  case 12: 
   var $58=$2;
   var $59=HEAP32[(($58)>>2)];
   var $60=(($3+8)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=((($61)+(1))|0);
   HEAP32[(($60)>>2)]=$62;
   var $63=(($3)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64+($61<<2))|0);
   HEAP32[(($65)>>2)]=$59;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var label = 0;
 return 17312;
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var label = 0;
 return 17320;
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var label = 0;
 return __ZTIc;
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var label = 0;
 return __ZTIa;
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var label = 0;
 return __ZTIh;
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var label = 0;
 return __ZTIs;
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var label = 0;
 return __ZTIt;
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var label = 0;
 return __ZTIi;
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var label = 0;
 return __ZTIj;
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var label = 0;
 return __ZTIl;
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var label = 0;
 return __ZTIm;
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var label = 0;
 return __ZTIf;
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var label = 0;
 return __ZTId;
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0;
 return 18584;
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var label = 0;
 return 18896;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewEE3getEv() {
 var label = 0;
 return 18904;
}
function __ZN3ogc10LoadUIntACERNS_6VectorIlEEmRKNS_12BinaryStreamERm($data, $M, $bstream, $iterator) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $sizeSize;
   var $size;
   var $minValue;
   var $buffer=__stackBase__;
   var $acd=(__stackBase__)+(8);
   var $6;
   var $7;
   var $mModelValues=(__stackBase__)+(40);
   var $i;
   var $8=(__stackBase__)+(80);
   var $9;
   $2=$data;
   $3=$M;
   $4=$bstream;
   $5=$iterator;
   var $10=$4;
   var $11=$5;
   var $12=__ZNK3ogc12BinaryStream13ReadUInt32BinERm($10, $11);
   var $13=((($12)-(12))|0);
   $sizeSize=$13;
   var $14=$4;
   var $15=$5;
   var $16=__ZNK3ogc12BinaryStream13ReadUInt32BinERm($14, $15);
   $size=$16;
   var $17=$size;
   var $18=(($17)|(0))==0;
   if ($18) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 16; break;
  case 3: 
   var $21=$4;
   var $22=$5;
   var $23=__ZNK3ogc12BinaryStream13ReadUInt32BinERm($21, $22);
   $minValue=$23;
   HEAP32[(($buffer)>>2)]=0;
   var $24=$4;
   var $25=$5;
   var $26=HEAP32[(($25)>>2)];
   __ZNK3ogc12BinaryStream9GetBufferEmRPh($24, $26, $buffer);
   var $27=$sizeSize;
   var $28=$5;
   var $29=HEAP32[(($28)>>2)];
   var $30=((($29)+($27))|0);
   HEAP32[(($28)>>2)]=$30;
   var $31=$2;
   var $32=$size;
   __ZN3ogc6VectorIlE8AllocateEj($31, $32);
   __ZN3ogc16Arithmetic_CodecC2Ev($acd);
   var $33=$sizeSize;
   var $34=HEAP32[(($buffer)>>2)];
   (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec10set_bufferEjPh($acd, $33, $34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 12; break; }
  case 4: 
   (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec13start_decoderEv($acd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 12; break; }
  case 5: 
   var $37=$3;
   var $38=((($37)+(1))|0);
   (function() { try { __THREW__ = 0; return __ZN3ogc19Adaptive_Data_ModelC2Ej($mModelValues, $38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 12; break; }
  case 6: 
   $i=0;
   label = 7; break;
  case 7: 
   var $41=$i;
   var $42=$size;
   var $43=(($41)>>>(0)) < (($42)>>>(0));
   if ($43) { label = 8; break; } else { label = 14; break; }
  case 8: 
   var $45=$2;
   var $46 = (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec6decodeERNS_19Adaptive_Data_ModelE($acd, $mModelValues) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $48=$minValue;
   var $49=((($46)+($48))|0);
   HEAP32[(($8)>>2)]=$49;
   (function() { try { __THREW__ = 0; return __ZN3ogc6VectorIlE8PushBackERKl($45, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 13; break; }
  case 10: 
   label = 11; break;
  case 11: 
   var $52=$i;
   var $53=((($52)+(1))|0);
   $i=$53;
   label = 7; break;
  case 12: 
   var $55$0 = ___cxa_find_matching_catch(-1, -1); $55$1 = tempRet0;
   var $56=$55$0;
   $6=$56;
   var $57=$55$1;
   $7=$57;
   label = 15; break;
  case 13: 
   var $59$0 = ___cxa_find_matching_catch(-1, -1); $59$1 = tempRet0;
   var $60=$59$0;
   $6=$60;
   var $61=$59$1;
   $7=$61;
   __ZN3ogc19Adaptive_Data_ModelD2Ev($mModelValues);
   label = 15; break;
  case 14: 
   $1=0;
   $9=1;
   __ZN3ogc19Adaptive_Data_ModelD2Ev($mModelValues);
   __ZN3ogc16Arithmetic_CodecD2Ev($acd);
   label = 16; break;
  case 15: 
   __ZN3ogc16Arithmetic_CodecD2Ev($acd);
   label = 17; break;
  case 16: 
   var $65=$1;
   STACKTOP = __stackBase__;
   return $65;
  case 17: 
   var $67=$6;
   var $68=$7;
   var $69$0=$67;
   var $69$1=0;
   var $70$0=$69$0;
   var $70$1=$68;
   ___resumeException($70$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc12LoadIntACEGCERNS_6VectorIlEEmRKNS_12BinaryStreamERm($data, $M, $bstream, $iterator) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $sizeSize;
   var $size;
   var $minValue;
   var $buffer=__stackBase__;
   var $acd=(__stackBase__)+(8);
   var $6;
   var $7;
   var $mModelValues=(__stackBase__)+(40);
   var $bModel0=(__stackBase__)+(80);
   var $bModel1=(__stackBase__)+(88);
   var $value;
   var $i;
   var $8=(__stackBase__)+(112);
   var $9;
   $2=$data;
   $3=$M;
   $4=$bstream;
   $5=$iterator;
   var $10=$4;
   var $11=$5;
   var $12=__ZNK3ogc12BinaryStream13ReadUInt32BinERm($10, $11);
   var $13=((($12)-(12))|0);
   $sizeSize=$13;
   var $14=$4;
   var $15=$5;
   var $16=__ZNK3ogc12BinaryStream13ReadUInt32BinERm($14, $15);
   $size=$16;
   var $17=$size;
   var $18=(($17)|(0))==0;
   if ($18) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 21; break;
  case 3: 
   var $21=$4;
   var $22=$5;
   var $23=__ZNK3ogc12BinaryStream13ReadUInt32BinERm($21, $22);
   var $24=((($23)-(2147483647))|0);
   $minValue=$24;
   HEAP32[(($buffer)>>2)]=0;
   var $25=$4;
   var $26=$5;
   var $27=HEAP32[(($26)>>2)];
   __ZNK3ogc12BinaryStream9GetBufferEmRPh($25, $27, $buffer);
   var $28=$sizeSize;
   var $29=$5;
   var $30=HEAP32[(($29)>>2)];
   var $31=((($30)+($28))|0);
   HEAP32[(($29)>>2)]=$31;
   var $32=$2;
   var $33=$size;
   __ZN3ogc6VectorIlE8AllocateEj($32, $33);
   __ZN3ogc16Arithmetic_CodecC2Ev($acd);
   var $34=$sizeSize;
   var $35=HEAP32[(($buffer)>>2)];
   (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec10set_bufferEjPh($acd, $34, $35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 14; break; }
  case 4: 
   (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec13start_decoderEv($acd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 14; break; }
  case 5: 
   var $38=$3;
   var $39=((($38)+(2))|0);
   (function() { try { __THREW__ = 0; return __ZN3ogc19Adaptive_Data_ModelC2Ej($mModelValues, $39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 14; break; }
  case 6: 
   (function() { try { __THREW__ = 0; return __ZN3ogc16Static_Bit_ModelC2Ev($bModel0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 15; break; }
  case 7: 
   (function() { try { __THREW__ = 0; return __ZN3ogc18Adaptive_Bit_ModelC2Ev($bModel1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 15; break; }
  case 8: 
   $i=0;
   label = 9; break;
  case 9: 
   var $44=$i;
   var $45=$size;
   var $46=(($44)>>>(0)) < (($45)>>>(0));
   if ($46) { label = 10; break; } else { label = 19; break; }
  case 10: 
   var $48 = (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec6decodeERNS_19Adaptive_Data_ModelE($acd, $mModelValues) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 15; break; }
  case 11: 
   $value=$48;
   var $50=$value;
   var $51=$3;
   var $52=(($50)|(0))==(($51)|(0));
   if ($52) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $54 = (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec15ExpGolombDecodeEiRNS_16Static_Bit_ModelERNS_18Adaptive_Bit_ModelE($acd, 0, $bModel0, $bModel1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $56=$value;
   var $57=((($56)+($54))|0);
   $value=$57;
   label = 16; break;
  case 14: 
   var $59$0 = ___cxa_find_matching_catch(-1, -1); $59$1 = tempRet0;
   var $60=$59$0;
   $6=$60;
   var $61=$59$1;
   $7=$61;
   label = 20; break;
  case 15: 
   var $63$0 = ___cxa_find_matching_catch(-1, -1); $63$1 = tempRet0;
   var $64=$63$0;
   $6=$64;
   var $65=$63$1;
   $7=$65;
   __ZN3ogc19Adaptive_Data_ModelD2Ev($mModelValues);
   label = 20; break;
  case 16: 
   var $67=$2;
   var $68=$value;
   var $69=$minValue;
   var $70=((($68)+($69))|0);
   HEAP32[(($8)>>2)]=$70;
   (function() { try { __THREW__ = 0; return __ZN3ogc6VectorIlE8PushBackERKl($67, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 15; break; }
  case 17: 
   label = 18; break;
  case 18: 
   var $73=$i;
   var $74=((($73)+(1))|0);
   $i=$74;
   label = 9; break;
  case 19: 
   $1=0;
   $9=1;
   __ZN3ogc19Adaptive_Data_ModelD2Ev($mModelValues);
   __ZN3ogc16Arithmetic_CodecD2Ev($acd);
   label = 21; break;
  case 20: 
   __ZN3ogc16Arithmetic_CodecD2Ev($acd);
   label = 22; break;
  case 21: 
   var $78=$1;
   STACKTOP = __stackBase__;
   return $78;
  case 22: 
   var $80=$6;
   var $81=$7;
   var $82$0=$80;
   var $82$1=0;
   var $83$0=$82$0;
   var $83$1=$81;
   ___resumeException($83$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc9LoadBinACERNS_6VectorIlEERKNS_12BinaryStreamERm($data, $bstream, $iterator) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $sizeSize;
   var $size;
   var $buffer=__stackBase__;
   var $acd=(__stackBase__)+(8);
   var $5;
   var $6;
   var $bModel=(__stackBase__)+(40);
   var $i;
   var $7=(__stackBase__)+(64);
   var $8;
   $2=$data;
   $3=$bstream;
   $4=$iterator;
   var $9=$3;
   var $10=$4;
   var $11=__ZNK3ogc12BinaryStream13ReadUInt32BinERm($9, $10);
   var $12=((($11)-(8))|0);
   $sizeSize=$12;
   var $13=$3;
   var $14=$4;
   var $15=__ZNK3ogc12BinaryStream13ReadUInt32BinERm($13, $14);
   $size=$15;
   var $16=$size;
   var $17=(($16)|(0))==0;
   if ($17) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 14; break;
  case 3: 
   HEAP32[(($buffer)>>2)]=0;
   var $20=$3;
   var $21=$4;
   var $22=HEAP32[(($21)>>2)];
   __ZNK3ogc12BinaryStream9GetBufferEmRPh($20, $22, $buffer);
   var $23=$sizeSize;
   var $24=$4;
   var $25=HEAP32[(($24)>>2)];
   var $26=((($25)+($23))|0);
   HEAP32[(($24)>>2)]=$26;
   var $27=$2;
   var $28=$size;
   __ZN3ogc6VectorIlE8AllocateEj($27, $28);
   __ZN3ogc16Arithmetic_CodecC2Ev($acd);
   var $29=$sizeSize;
   var $30=HEAP32[(($buffer)>>2)];
   (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec10set_bufferEjPh($acd, $29, $30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 12; break; }
  case 4: 
   (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec13start_decoderEv($acd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 12; break; }
  case 5: 
   (function() { try { __THREW__ = 0; return __ZN3ogc18Adaptive_Bit_ModelC2Ev($bModel) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 12; break; }
  case 6: 
   $i=0;
   label = 7; break;
  case 7: 
   var $35=$i;
   var $36=$size;
   var $37=(($35)>>>(0)) < (($36)>>>(0));
   if ($37) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $39=$2;
   var $40 = (function() { try { __THREW__ = 0; return __ZN3ogc16Arithmetic_Codec6decodeERNS_18Adaptive_Bit_ModelE($acd, $bModel) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 12; break; }
  case 9: 
   HEAP32[(($7)>>2)]=$40;
   (function() { try { __THREW__ = 0; return __ZN3ogc6VectorIlE8PushBackERKl($39, $7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 12; break; }
  case 10: 
   label = 11; break;
  case 11: 
   var $44=$i;
   var $45=((($44)+(1))|0);
   $i=$45;
   label = 7; break;
  case 12: 
   var $47$0 = ___cxa_find_matching_catch(-1, -1); $47$1 = tempRet0;
   var $48=$47$0;
   $5=$48;
   var $49=$47$1;
   $6=$49;
   __ZN3ogc16Arithmetic_CodecD2Ev($acd);
   label = 15; break;
  case 13: 
   $1=0;
   $8=1;
   __ZN3ogc16Arithmetic_CodecD2Ev($acd);
   label = 14; break;
  case 14: 
   var $52=$1;
   STACKTOP = __stackBase__;
   return $52;
  case 15: 
   var $54=$5;
   var $55=$6;
   var $56$0=$54;
   var $56$1=0;
   var $57$0=$56$0;
   var $57$1=$55;
   ___resumeException($57$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3ogc22CompressedTriangleFans4LoadERKNS_12BinaryStreamERmNS_19OGCSC3DMCStreamTypeE($this, $bstream, $iterator, $streamType) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$bstream;
   $3=$iterator;
   $4=$streamType;
   var $5=$1;
   var $6=$4;
   var $7=(($6)|(0))==1;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=(($5)|0);
   var $10=$2;
   var $11=$3;
   var $12=__ZN3ogc12LoadUIntDataERNS_6VectorIlEERKNS_12BinaryStreamERm($9, $10, $11);
   var $13=(($5+12)|0);
   var $14=$2;
   var $15=$3;
   var $16=__ZN3ogc12LoadUIntDataERNS_6VectorIlEERKNS_12BinaryStreamERm($13, $14, $15);
   var $17=(($5+24)|0);
   var $18=$2;
   var $19=$3;
   var $20=__ZN3ogc12LoadUIntDataERNS_6VectorIlEERKNS_12BinaryStreamERm($17, $18, $19);
   var $21=(($5+36)|0);
   var $22=$2;
   var $23=$3;
   var $24=__ZN3ogc11LoadBinDataERNS_6VectorIlEERKNS_12BinaryStreamERm($21, $22, $23);
   var $25=(($5+48)|0);
   var $26=$2;
   var $27=$3;
   var $28=__ZN3ogc11LoadIntDataERNS_6VectorIlEERKNS_12BinaryStreamERm($25, $26, $27);
   label = 4; break;
  case 3: 
   var $30=(($5)|0);
   var $31=$2;
   var $32=$3;
   var $33=__ZN3ogc12LoadIntACEGCERNS_6VectorIlEEmRKNS_12BinaryStreamERm($30, 4, $31, $32);
   var $34=(($5+12)|0);
   var $35=$2;
   var $36=$3;
   var $37=__ZN3ogc12LoadIntACEGCERNS_6VectorIlEEmRKNS_12BinaryStreamERm($34, 16, $35, $36);
   var $38=(($5+24)|0);
   var $39=$2;
   var $40=$3;
   var $41=__ZN3ogc10LoadUIntACERNS_6VectorIlEEmRKNS_12BinaryStreamERm($38, 10, $39, $40);
   var $42=(($5+36)|0);
   var $43=$2;
   var $44=$3;
   var $45=__ZN3ogc9LoadBinACERNS_6VectorIlEERKNS_12BinaryStreamERm($42, $43, $44);
   var $46=(($5+48)|0);
   var $47=$2;
   var $48=$3;
   var $49=__ZN3ogc12LoadIntACEGCERNS_6VectorIlEEmRKNS_12BinaryStreamERm($46, 8, $47, $48);
   label = 4; break;
  case 4: 
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function ___getTypeName($ti) {
 var label = 0;
 var $1;
 var $2;
 $2=$ti;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=_strdup($6);
 return $7;
}
function ___cxx_global_var_init112() {
 var label = 0;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(20344);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=__ZN10emscripten8internal6TypeIDIvE3getEv();
 __embind_register_void($3, ((184)|0));
 var $4=__ZN10emscripten8internal6TypeIDIbE3getEv();
 __embind_register_bool($4, ((2872)|0), 1, 0);
 var $5=__ZN10emscripten8internal6TypeIDIcE3getEv();
 __embind_register_integer($5, ((2520)|0), -128, 127);
 var $6=__ZN10emscripten8internal6TypeIDIaE3getEv();
 __embind_register_integer($6, ((1960)|0), -128, 127);
 var $7=__ZN10emscripten8internal6TypeIDIhE3getEv();
 __embind_register_integer($7, ((1800)|0), 0, 255);
 var $8=__ZN10emscripten8internal6TypeIDIsE3getEv();
 __embind_register_integer($8, ((1496)|0), -32768, 32767);
 var $9=__ZN10emscripten8internal6TypeIDItE3getEv();
 __embind_register_integer($9, ((1328)|0), 0, 65535);
 var $10=__ZN10emscripten8internal6TypeIDIiE3getEv();
 __embind_register_integer($10, ((896)|0), -2147483648, 2147483647);
 var $11=__ZN10emscripten8internal6TypeIDIjE3getEv();
 __embind_register_integer($11, ((664)|0), 0, -1);
 var $12=__ZN10emscripten8internal6TypeIDIlE3getEv();
 __embind_register_integer($12, ((304)|0), -2147483648, 2147483647);
 var $13=__ZN10emscripten8internal6TypeIDImE3getEv();
 __embind_register_integer($13, ((4520)|0), 0, -1);
 var $14=__ZN10emscripten8internal6TypeIDIfE3getEv();
 __embind_register_float($14, ((4192)|0));
 var $15=__ZN10emscripten8internal6TypeIDIdE3getEv();
 __embind_register_float($15, ((3904)|0));
 var $16=__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv();
 __embind_register_std_string($16, ((3592)|0));
 var $17=__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv();
 __embind_register_std_wstring($17, 4, ((3376)|0));
 var $18=__ZN10emscripten8internal6TypeIDINS_3valEE3getEv();
 __embind_register_emval($18, ((3208)|0));
 var $19=__ZN10emscripten8internal6TypeIDINS_11memory_viewEE3getEv();
 __embind_register_memory_view($19, ((3072)|0));
 return;
}
function __GLOBAL__I_a113() {
 var label = 0;
 ___cxx_global_var_init112();
 return;
}
function __ZNSt3__112__do_messageD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__114error_categoryD2Ev($3);
 return;
}
function __ZNSt3__112__do_messageC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__114error_categoryC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((13256)|0);
 return;
}
function ___cxx_global_var_init146() {
 var label = 0;
 __ZNSt3__18ios_base4InitC2Ev(20264);
 var $1=_atexit((312), ((20264)|0), ___dso_handle);
 return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $__r_i8;
   var $3;
   var $4;
   var $__r_i_i7;
   var $5;
   var $6;
   var $7;
   var $__r_i6;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $__r_i3;
   var $44;
   var $45;
   var $__r_i_i;
   var $46;
   var $47;
   var $48;
   var $__r_i;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $cin_ptr;
   var $cout_ptr;
   var $cerr_ptr;
   var $wcin_ptr;
   var $wcout_ptr;
   var $wcerr_ptr;
   $83=$this;
   var $84=$83;
   if (0) { var $132 = 0;label = 7; break; } else { label = 2; break; }
  case 2: 
   if (0) { var $89 = 0;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $87=HEAP32[((_stdin)>>2)];
   __ZNSt3__110__stdinbufIcEC1EP7__sFILEP10_mbstate_t(19240, $87, ((19312)|0));
   var $89 = 19240;label = 4; break;
  case 4: 
   var $89;
   var $90=$89;
   $79=20176;
   $80=$90;
   var $91=$79;
   var $92=$91;
   var $93=(($92+8)|0);
   var $94=$93;
   $78=$94;
   var $95=$78;
   var $96=$95;
   $77=$96;
   var $97=$77;
   var $98=$97;
   HEAP32[(($98)>>2)]=((11712)|0);
   var $99=$95;
   HEAP32[(($99)>>2)]=((11256)|0);
   var $100=$91;
   HEAP32[(($100)>>2)]=((13180)|0);
   var $101=$91;
   var $102=(($101+8)|0);
   var $103=$102;
   HEAP32[(($103)>>2)]=((13200)|0);
   var $104=(($91+4)|0);
   HEAP32[(($104)>>2)]=0;
   var $105=$91;
   var $106=HEAP32[(($105)>>2)];
   var $107=((($106)-(12))|0);
   var $108=$107;
   var $109=HEAP32[(($108)>>2)];
   var $110=$91;
   var $111=(($110+$109)|0);
   var $112=$111;
   var $113=$80;
   $75=$112;
   $76=$113;
   var $114=$75;
   var $115=$114;
   var $116=$76;
   var $117=$116;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($115, $117) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $119$0 = ___cxa_find_matching_catch(-1, -1); $119$1 = tempRet0;
   var $120=$119$0;
   $81=$120;
   var $121=$119$1;
   $82=$121;
   var $122=$91;
   var $123=(($122+8)|0);
   var $124=$123;
   __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($124);
   var $125=$81;
   var $126=$82;
   var $127$0=$125;
   var $127$1=0;
   var $128$0=$127$0;
   var $128$1=$126;
   ___resumeException($128$0)
  case 6: 
   var $129=(($114+72)|0);
   HEAP32[(($129)>>2)]=0;
   var $130=(($114+76)|0);
   HEAP32[(($130)>>2)]=-1;
   var $132 = 20176;label = 7; break;
  case 7: 
   var $132;
   $cin_ptr=$132;
   if (0) { var $179 = 0;label = 13; break; } else { label = 8; break; }
  case 8: 
   if (0) { var $137 = 0;label = 10; break; } else { label = 9; break; }
  case 9: 
   var $135=HEAP32[((_stdout)>>2)];
   __ZNSt3__111__stdoutbufIcEC1EP7__sFILEP10_mbstate_t(19144, $135, ((19320)|0));
   var $137 = 19144;label = 10; break;
  case 10: 
   var $137;
   var $138=$137;
   $71=19912;
   $72=$138;
   var $139=$71;
   var $140=$139;
   var $141=(($140+4)|0);
   var $142=$141;
   $70=$142;
   var $143=$70;
   var $144=$143;
   $69=$144;
   var $145=$69;
   var $146=$145;
   HEAP32[(($146)>>2)]=((11712)|0);
   var $147=$143;
   HEAP32[(($147)>>2)]=((11256)|0);
   var $148=$139;
   HEAP32[(($148)>>2)]=((13084)|0);
   var $149=$139;
   var $150=(($149+4)|0);
   var $151=$150;
   HEAP32[(($151)>>2)]=((13104)|0);
   var $152=$139;
   var $153=HEAP32[(($152)>>2)];
   var $154=((($153)-(12))|0);
   var $155=$154;
   var $156=HEAP32[(($155)>>2)];
   var $157=$139;
   var $158=(($157+$156)|0);
   var $159=$158;
   var $160=$72;
   $67=$159;
   $68=$160;
   var $161=$67;
   var $162=$161;
   var $163=$68;
   var $164=$163;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($162, $164) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $166$0 = ___cxa_find_matching_catch(-1, -1); $166$1 = tempRet0;
   var $167=$166$0;
   $73=$167;
   var $168=$166$1;
   $74=$168;
   var $169=$139;
   var $170=(($169+4)|0);
   var $171=$170;
   __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($171);
   var $172=$73;
   var $173=$74;
   var $174$0=$172;
   var $174$1=0;
   var $175$0=$174$0;
   var $175$1=$173;
   ___resumeException($175$0)
  case 12: 
   var $176=(($161+72)|0);
   HEAP32[(($176)>>2)]=0;
   var $177=(($161+76)|0);
   HEAP32[(($177)>>2)]=-1;
   var $179 = 19912;label = 13; break;
  case 13: 
   var $179;
   $cout_ptr=$179;
   if (0) { var $226 = 0;label = 19; break; } else { label = 14; break; }
  case 14: 
   if (0) { var $184 = 0;label = 16; break; } else { label = 15; break; }
  case 15: 
   var $182=HEAP32[((_stderr)>>2)];
   __ZNSt3__111__stdoutbufIcEC1EP7__sFILEP10_mbstate_t(19192, $182, ((19328)|0));
   var $184 = 19192;label = 16; break;
  case 16: 
   var $184;
   var $185=$184;
   $63=20088;
   $64=$185;
   var $186=$63;
   var $187=$186;
   var $188=(($187+4)|0);
   var $189=$188;
   $62=$189;
   var $190=$62;
   var $191=$190;
   $61=$191;
   var $192=$61;
   var $193=$192;
   HEAP32[(($193)>>2)]=((11712)|0);
   var $194=$190;
   HEAP32[(($194)>>2)]=((11256)|0);
   var $195=$186;
   HEAP32[(($195)>>2)]=((13084)|0);
   var $196=$186;
   var $197=(($196+4)|0);
   var $198=$197;
   HEAP32[(($198)>>2)]=((13104)|0);
   var $199=$186;
   var $200=HEAP32[(($199)>>2)];
   var $201=((($200)-(12))|0);
   var $202=$201;
   var $203=HEAP32[(($202)>>2)];
   var $204=$186;
   var $205=(($204+$203)|0);
   var $206=$205;
   var $207=$64;
   $59=$206;
   $60=$207;
   var $208=$59;
   var $209=$208;
   var $210=$60;
   var $211=$210;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($209, $211) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $213$0 = ___cxa_find_matching_catch(-1, -1); $213$1 = tempRet0;
   var $214=$213$0;
   $65=$214;
   var $215=$213$1;
   $66=$215;
   var $216=$186;
   var $217=(($216+4)|0);
   var $218=$217;
   __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($218);
   var $219=$65;
   var $220=$66;
   var $221$0=$219;
   var $221$1=0;
   var $222$0=$221$0;
   var $222$1=$220;
   ___resumeException($222$0)
  case 18: 
   var $223=(($208+72)|0);
   HEAP32[(($223)>>2)]=0;
   var $224=(($208+76)|0);
   HEAP32[(($224)>>2)]=-1;
   var $226 = 20088;label = 19; break;
  case 19: 
   var $226;
   $cerr_ptr=$226;
   if (0) { var $283 = 0;label = 23; break; } else { label = 20; break; }
  case 20: 
   var $228=$cerr_ptr;
   var $229=$228;
   var $230=HEAP32[(($229)>>2)];
   var $231=((($230)-(12))|0);
   var $232=$231;
   var $233=HEAP32[(($232)>>2)];
   var $234=$228;
   var $235=(($234+$233)|0);
   var $236=$235;
   $58=$236;
   var $237=$58;
   var $238=$237;
   $57=$238;
   var $239=$57;
   var $240=(($239+24)|0);
   var $241=HEAP32[(($240)>>2)];
   var $242=$241;
   $53=20000;
   $54=$242;
   var $243=$53;
   var $244=$243;
   var $245=(($244+4)|0);
   var $246=$245;
   $52=$246;
   var $247=$52;
   var $248=$247;
   $51=$248;
   var $249=$51;
   var $250=$249;
   HEAP32[(($250)>>2)]=((11712)|0);
   var $251=$247;
   HEAP32[(($251)>>2)]=((11256)|0);
   var $252=$243;
   HEAP32[(($252)>>2)]=((13084)|0);
   var $253=$243;
   var $254=(($253+4)|0);
   var $255=$254;
   HEAP32[(($255)>>2)]=((13104)|0);
   var $256=$243;
   var $257=HEAP32[(($256)>>2)];
   var $258=((($257)-(12))|0);
   var $259=$258;
   var $260=HEAP32[(($259)>>2)];
   var $261=$243;
   var $262=(($261+$260)|0);
   var $263=$262;
   var $264=$54;
   $49=$263;
   $50=$264;
   var $265=$49;
   var $266=$265;
   var $267=$50;
   var $268=$267;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($266, $268) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $270$0 = ___cxa_find_matching_catch(-1, -1); $270$1 = tempRet0;
   var $271=$270$0;
   $55=$271;
   var $272=$270$1;
   $56=$272;
   var $273=$243;
   var $274=(($273+4)|0);
   var $275=$274;
   __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($275);
   var $276=$55;
   var $277=$56;
   var $278$0=$276;
   var $278$1=0;
   var $279$0=$278$0;
   var $279$1=$277;
   ___resumeException($279$0)
  case 22: 
   var $280=(($265+72)|0);
   HEAP32[(($280)>>2)]=0;
   var $281=(($265+76)|0);
   HEAP32[(($281)>>2)]=-1;
   var $283 = 20000;label = 23; break;
  case 23: 
   var $283;
   var $284=$cin_ptr;
   var $285=$284;
   var $286=HEAP32[(($285)>>2)];
   var $287=((($286)-(12))|0);
   var $288=$287;
   var $289=HEAP32[(($288)>>2)];
   var $290=$284;
   var $291=(($290+$289)|0);
   var $292=$291;
   var $293=$cout_ptr;
   $47=$292;
   $48=$293;
   var $294=$47;
   var $295=(($294+72)|0);
   var $296=HEAP32[(($295)>>2)];
   $__r_i=$296;
   var $297=$48;
   var $298=(($294+72)|0);
   HEAP32[(($298)>>2)]=$297;
   var $299=$__r_i;
   var $300=$cerr_ptr;
   var $301=$300;
   var $302=HEAP32[(($301)>>2)];
   var $303=((($302)-(12))|0);
   var $304=$303;
   var $305=HEAP32[(($304)>>2)];
   var $306=$300;
   var $307=(($306+$305)|0);
   var $308=$307;
   $46=$308;
   var $309=$46;
   $44=$309;
   $45=8192;
   var $310=$44;
   var $311=(($310+4)|0);
   var $312=HEAP32[(($311)>>2)];
   $__r_i_i=$312;
   var $313=$45;
   var $314=(($310+4)|0);
   var $315=HEAP32[(($314)>>2)];
   var $316=$315 | $313;
   HEAP32[(($314)>>2)]=$316;
   var $317=$__r_i_i;
   var $318=$46;
   var $319=$cerr_ptr;
   var $320=$319;
   var $321=HEAP32[(($320)>>2)];
   var $322=((($321)-(12))|0);
   var $323=$322;
   var $324=HEAP32[(($323)>>2)];
   var $325=$319;
   var $326=(($325+$324)|0);
   var $327=$326;
   var $328=$cout_ptr;
   $42=$327;
   $43=$328;
   var $329=$42;
   var $330=(($329+72)|0);
   var $331=HEAP32[(($330)>>2)];
   $__r_i3=$331;
   var $332=$43;
   var $333=(($329+72)|0);
   HEAP32[(($333)>>2)]=$332;
   var $334=$__r_i3;
   if (0) { var $382 = 0;label = 29; break; } else { label = 24; break; }
  case 24: 
   if (0) { var $339 = 0;label = 26; break; } else { label = 25; break; }
  case 25: 
   var $337=HEAP32[((_stdin)>>2)];
   __ZNSt3__110__stdinbufIwEC1EP7__sFILEP10_mbstate_t(19088, $337, ((19336)|0));
   var $339 = 19088;label = 26; break;
  case 26: 
   var $339;
   var $340=$339;
   $38=19824;
   $39=$340;
   var $341=$38;
   var $342=$341;
   var $343=(($342+8)|0);
   var $344=$343;
   $37=$344;
   var $345=$37;
   var $346=$345;
   $36=$346;
   var $347=$36;
   var $348=$347;
   HEAP32[(($348)>>2)]=((11712)|0);
   var $349=$345;
   HEAP32[(($349)>>2)]=((11232)|0);
   var $350=$341;
   HEAP32[(($350)>>2)]=((13132)|0);
   var $351=$341;
   var $352=(($351+8)|0);
   var $353=$352;
   HEAP32[(($353)>>2)]=((13152)|0);
   var $354=(($341+4)|0);
   HEAP32[(($354)>>2)]=0;
   var $355=$341;
   var $356=HEAP32[(($355)>>2)];
   var $357=((($356)-(12))|0);
   var $358=$357;
   var $359=HEAP32[(($358)>>2)];
   var $360=$341;
   var $361=(($360+$359)|0);
   var $362=$361;
   var $363=$39;
   $34=$362;
   $35=$363;
   var $364=$34;
   var $365=$364;
   var $366=$35;
   var $367=$366;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($365, $367) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 27; break; }
  case 27: 
   var $369$0 = ___cxa_find_matching_catch(-1, -1); $369$1 = tempRet0;
   var $370=$369$0;
   $40=$370;
   var $371=$369$1;
   $41=$371;
   var $372=$341;
   var $373=(($372+8)|0);
   var $374=$373;
   __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($374);
   var $375=$40;
   var $376=$41;
   var $377$0=$375;
   var $377$1=0;
   var $378$0=$377$0;
   var $378$1=$376;
   ___resumeException($378$0)
  case 28: 
   var $379=(($364+72)|0);
   HEAP32[(($379)>>2)]=0;
   var $380=(($364+76)|0);
   HEAP32[(($380)>>2)]=-1;
   var $382 = 19824;label = 29; break;
  case 29: 
   var $382;
   $wcin_ptr=$382;
   if (0) { var $429 = 0;label = 35; break; } else { label = 30; break; }
  case 30: 
   if (0) { var $387 = 0;label = 32; break; } else { label = 31; break; }
  case 31: 
   var $385=HEAP32[((_stdout)>>2)];
   __ZNSt3__111__stdoutbufIwEC1EP7__sFILEP10_mbstate_t(18992, $385, ((19344)|0));
   var $387 = 18992;label = 32; break;
  case 32: 
   var $387;
   var $388=$387;
   $30=19544;
   $31=$388;
   var $389=$30;
   var $390=$389;
   var $391=(($390+4)|0);
   var $392=$391;
   $29=$392;
   var $393=$29;
   var $394=$393;
   $28=$394;
   var $395=$28;
   var $396=$395;
   HEAP32[(($396)>>2)]=((11712)|0);
   var $397=$393;
   HEAP32[(($397)>>2)]=((11232)|0);
   var $398=$389;
   HEAP32[(($398)>>2)]=((13036)|0);
   var $399=$389;
   var $400=(($399+4)|0);
   var $401=$400;
   HEAP32[(($401)>>2)]=((13056)|0);
   var $402=$389;
   var $403=HEAP32[(($402)>>2)];
   var $404=((($403)-(12))|0);
   var $405=$404;
   var $406=HEAP32[(($405)>>2)];
   var $407=$389;
   var $408=(($407+$406)|0);
   var $409=$408;
   var $410=$31;
   $26=$409;
   $27=$410;
   var $411=$26;
   var $412=$411;
   var $413=$27;
   var $414=$413;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($412, $414) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 33; break; }
  case 33: 
   var $416$0 = ___cxa_find_matching_catch(-1, -1); $416$1 = tempRet0;
   var $417=$416$0;
   $32=$417;
   var $418=$416$1;
   $33=$418;
   var $419=$389;
   var $420=(($419+4)|0);
   var $421=$420;
   __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($421);
   var $422=$32;
   var $423=$33;
   var $424$0=$422;
   var $424$1=0;
   var $425$0=$424$0;
   var $425$1=$423;
   ___resumeException($425$0)
  case 34: 
   var $426=(($411+72)|0);
   HEAP32[(($426)>>2)]=0;
   var $427=(($411+76)|0);
   HEAP32[(($427)>>2)]=-1;
   var $429 = 19544;label = 35; break;
  case 35: 
   var $429;
   $wcout_ptr=$429;
   if (0) { var $476 = 0;label = 41; break; } else { label = 36; break; }
  case 36: 
   if (0) { var $434 = 0;label = 38; break; } else { label = 37; break; }
  case 37: 
   var $432=HEAP32[((_stderr)>>2)];
   __ZNSt3__111__stdoutbufIwEC1EP7__sFILEP10_mbstate_t(19040, $432, ((19352)|0));
   var $434 = 19040;label = 38; break;
  case 38: 
   var $434;
   var $435=$434;
   $22=19720;
   $23=$435;
   var $436=$22;
   var $437=$436;
   var $438=(($437+4)|0);
   var $439=$438;
   $21=$439;
   var $440=$21;
   var $441=$440;
   $20=$441;
   var $442=$20;
   var $443=$442;
   HEAP32[(($443)>>2)]=((11712)|0);
   var $444=$440;
   HEAP32[(($444)>>2)]=((11232)|0);
   var $445=$436;
   HEAP32[(($445)>>2)]=((13036)|0);
   var $446=$436;
   var $447=(($446+4)|0);
   var $448=$447;
   HEAP32[(($448)>>2)]=((13056)|0);
   var $449=$436;
   var $450=HEAP32[(($449)>>2)];
   var $451=((($450)-(12))|0);
   var $452=$451;
   var $453=HEAP32[(($452)>>2)];
   var $454=$436;
   var $455=(($454+$453)|0);
   var $456=$455;
   var $457=$23;
   $18=$456;
   $19=$457;
   var $458=$18;
   var $459=$458;
   var $460=$19;
   var $461=$460;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($459, $461) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 40; break; } else { label = 39; break; }
  case 39: 
   var $463$0 = ___cxa_find_matching_catch(-1, -1); $463$1 = tempRet0;
   var $464=$463$0;
   $24=$464;
   var $465=$463$1;
   $25=$465;
   var $466=$436;
   var $467=(($466+4)|0);
   var $468=$467;
   __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($468);
   var $469=$24;
   var $470=$25;
   var $471$0=$469;
   var $471$1=0;
   var $472$0=$471$0;
   var $472$1=$470;
   ___resumeException($472$0)
  case 40: 
   var $473=(($458+72)|0);
   HEAP32[(($473)>>2)]=0;
   var $474=(($458+76)|0);
   HEAP32[(($474)>>2)]=-1;
   var $476 = 19720;label = 41; break;
  case 41: 
   var $476;
   $wcerr_ptr=$476;
   if (0) { var $533 = 0;label = 45; break; } else { label = 42; break; }
  case 42: 
   var $478=$wcerr_ptr;
   var $479=$478;
   var $480=HEAP32[(($479)>>2)];
   var $481=((($480)-(12))|0);
   var $482=$481;
   var $483=HEAP32[(($482)>>2)];
   var $484=$478;
   var $485=(($484+$483)|0);
   var $486=$485;
   $17=$486;
   var $487=$17;
   var $488=$487;
   $16=$488;
   var $489=$16;
   var $490=(($489+24)|0);
   var $491=HEAP32[(($490)>>2)];
   var $492=$491;
   $12=19632;
   $13=$492;
   var $493=$12;
   var $494=$493;
   var $495=(($494+4)|0);
   var $496=$495;
   $11=$496;
   var $497=$11;
   var $498=$497;
   $10=$498;
   var $499=$10;
   var $500=$499;
   HEAP32[(($500)>>2)]=((11712)|0);
   var $501=$497;
   HEAP32[(($501)>>2)]=((11232)|0);
   var $502=$493;
   HEAP32[(($502)>>2)]=((13036)|0);
   var $503=$493;
   var $504=(($503+4)|0);
   var $505=$504;
   HEAP32[(($505)>>2)]=((13056)|0);
   var $506=$493;
   var $507=HEAP32[(($506)>>2)];
   var $508=((($507)-(12))|0);
   var $509=$508;
   var $510=HEAP32[(($509)>>2)];
   var $511=$493;
   var $512=(($511+$510)|0);
   var $513=$512;
   var $514=$13;
   $8=$513;
   $9=$514;
   var $515=$8;
   var $516=$515;
   var $517=$9;
   var $518=$517;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv($516, $518) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 43; break; }
  case 43: 
   var $520$0 = ___cxa_find_matching_catch(-1, -1); $520$1 = tempRet0;
   var $521=$520$0;
   $14=$521;
   var $522=$520$1;
   $15=$522;
   var $523=$493;
   var $524=(($523+4)|0);
   var $525=$524;
   __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($525);
   var $526=$14;
   var $527=$15;
   var $528$0=$526;
   var $528$1=0;
   var $529$0=$528$0;
   var $529$1=$527;
   ___resumeException($529$0)
  case 44: 
   var $530=(($515+72)|0);
   HEAP32[(($530)>>2)]=0;
   var $531=(($515+76)|0);
   HEAP32[(($531)>>2)]=-1;
   var $533 = 19632;label = 45; break;
  case 45: 
   var $533;
   var $534=$wcin_ptr;
   var $535=$534;
   var $536=HEAP32[(($535)>>2)];
   var $537=((($536)-(12))|0);
   var $538=$537;
   var $539=HEAP32[(($538)>>2)];
   var $540=$534;
   var $541=(($540+$539)|0);
   var $542=$541;
   var $543=$wcout_ptr;
   $6=$542;
   $7=$543;
   var $544=$6;
   var $545=(($544+72)|0);
   var $546=HEAP32[(($545)>>2)];
   $__r_i6=$546;
   var $547=$7;
   var $548=(($544+72)|0);
   HEAP32[(($548)>>2)]=$547;
   var $549=$__r_i6;
   var $550=$wcerr_ptr;
   var $551=$550;
   var $552=HEAP32[(($551)>>2)];
   var $553=((($552)-(12))|0);
   var $554=$553;
   var $555=HEAP32[(($554)>>2)];
   var $556=$550;
   var $557=(($556+$555)|0);
   var $558=$557;
   $5=$558;
   var $559=$5;
   $3=$559;
   $4=8192;
   var $560=$3;
   var $561=(($560+4)|0);
   var $562=HEAP32[(($561)>>2)];
   $__r_i_i7=$562;
   var $563=$4;
   var $564=(($560+4)|0);
   var $565=HEAP32[(($564)>>2)];
   var $566=$565 | $563;
   HEAP32[(($564)>>2)]=$566;
   var $567=$__r_i_i7;
   var $568=$5;
   var $569=$wcerr_ptr;
   var $570=$569;
   var $571=HEAP32[(($570)>>2)];
   var $572=((($571)-(12))|0);
   var $573=$572;
   var $574=HEAP32[(($573)>>2)];
   var $575=$569;
   var $576=(($575+$574)|0);
   var $577=$576;
   var $578=$wcout_ptr;
   $1=$577;
   $2=$578;
   var $579=$1;
   var $580=(($579+72)|0);
   var $581=HEAP32[(($580)>>2)];
   $__r_i8=$581;
   var $582=$2;
   var $583=(($579+72)|0);
   HEAP32[(($583)>>2)]=$582;
   var $584=$__r_i8;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcEC1EP7__sFILEP10_mbstate_t($this, $__fp, $__st) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$__fp;
 $3=$__st;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 __ZNSt3__110__stdinbufIcEC2EP7__sFILEP10_mbstate_t($4, $5, $6);
 return;
}
function __ZNSt3__111__stdoutbufIcEC1EP7__sFILEP10_mbstate_t($this, $__fp, $__st) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$__fp;
 $3=$__st;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 __ZNSt3__111__stdoutbufIcEC2EP7__sFILEP10_mbstate_t($4, $5, $6);
 return;
}
function __ZNSt3__110__stdinbufIwEC1EP7__sFILEP10_mbstate_t($this, $__fp, $__st) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$__fp;
 $3=$__st;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 __ZNSt3__110__stdinbufIwEC2EP7__sFILEP10_mbstate_t($4, $5, $6);
 return;
}
function __ZNSt3__111__stdoutbufIwEC1EP7__sFILEP10_mbstate_t($this, $__fp, $__st) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$this;
 $2=$__fp;
 $3=$__st;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 __ZNSt3__111__stdoutbufIwEC2EP7__sFILEP10_mbstate_t($4, $5, $6);
 return;
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $cout_ptr;
   var $clog_ptr;
   var $wcout_ptr;
   var $wclog_ptr;
   $1=$this;
   var $2=$1;
   $cout_ptr=19912;
   $clog_ptr=20000;
   var $3=$cout_ptr;
   var $4 = (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $6=$clog_ptr;
   var $7 = (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 6; break; }
  case 3: 
   $wcout_ptr=19544;
   $wclog_ptr=19632;
   var $9=$wcout_ptr;
   var $10 = (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $12=$wclog_ptr;
   var $13 = (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
  case 5: 
   return;
  case 6: 
   var $16$0 = ___cxa_find_matching_catch(-1, -1,0); $16$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 11843
// WARNING: content after a branch in a label, line: 11845
// WARNING: content after a branch in a label, line: 11846
// WARNING: content after a branch in a label, line: 11847
// WARNING: content after a branch in a label, line: 11848
// WARNING: content after a branch in a label, line: 11849
// WARNING: content after a branch in a label, line: 12409
// WARNING: content after a branch in a label, line: 12411
// WARNING: content after a branch in a label, line: 12412
// WARNING: content after a branch in a label, line: 12413
// WARNING: content after a branch in a label, line: 12414
// WARNING: content after a branch in a label, line: 12415
function __ZNSt3__111__stdoutbufIwEC2EP7__sFILEP10_mbstate_t($this, $__fp, $__st) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7=__stackBase__;
   var $8;
   var $9;
   $4=$this;
   $5=$__fp;
   $6=$__st;
   var $10=$4;
   var $11=$10;
   __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($11);
   var $12=$10;
   HEAP32[(($12)>>2)]=((13304)|0);
   var $13=(($10+32)|0);
   var $14=$5;
   HEAP32[(($13)>>2)]=$14;
   var $15=(($10+36)|0);
   var $16=$10;
   $3=$16;
   var $17=$3;
   var $18=(($17+4)|0);
   __ZNSt3__16localeC2ERKS0_($7, $18);
   label = 2; break;
  case 2: 
   $2=$7;
   var $20=$2;
   var $21 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($20, 19504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $22=$21;
   label = 4; break;
  case 4: 
   __ZNSt3__16localeD2Ev($7);
   HEAP32[(($15)>>2)]=$22;
   var $24=(($10+40)|0);
   var $25=$6;
   HEAP32[(($24)>>2)]=$25;
   var $26=(($10+44)|0);
   var $27=(($10+36)|0);
   var $28=HEAP32[(($27)>>2)];
   $1=$28;
   var $29=$1;
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+28)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=FUNCTION_TABLE[$33]($29);
   var $35=(($34)&(1));
   HEAP8[($26)]=$35;
   STACKTOP = __stackBase__;
   return;
  case 5: 
   var $41$0 = ___cxa_find_matching_catch(-1, -1); $41$1 = tempRet0;
   var $42=$41$0;
   $8=$42;
   var $43=$41$1;
   $9=$43;
   __ZNSt3__16localeD2Ev($7);
   label = 6; break;
  case 6: 
   var $45=$10;
   __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($45);
   label = 7; break;
  case 7: 
   var $47=$8;
   var $48=$9;
   var $49$0=$47;
   var $49$1=0;
   var $50$0=$49$0;
   var $50$1=$48;
   ___resumeException($50$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__111__stdoutbufIwED2Ev($2);
 return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__111__stdoutbufIwED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this, $__loc) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $3=$this;
 $4=$__loc;
 var $5=$3;
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+24)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=FUNCTION_TABLE[$9]($5);
 var $11=$4;
 $2=$11;
 var $12=$2;
 var $13=__ZNKSt3__16locale9use_facetERNS0_2idE($12, 19504);
 var $14=$13;
 var $15=(($5+36)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=(($5+36)|0);
 var $17=HEAP32[(($16)>>2)];
 $1=$17;
 var $18=$1;
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+28)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=FUNCTION_TABLE[$22]($18);
 var $24=(($5+44)|0);
 var $25=(($23)&(1));
 HEAP8[($24)]=$25;
 return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $__extbuf=__stackBase__;
   var $__r;
   var $__extbe=(__stackBase__)+(8);
   var $__nmemb;
   $7=$this;
   var $8=$7;
   label = 2; break;
  case 2: 
   var $10=(($8+36)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($8+40)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($__extbuf)|0);
   var $15=(($__extbuf)|0);
   var $16=(($15+8)|0);
   $1=$11;
   $2=$13;
   $3=$14;
   $4=$16;
   $5=$__extbe;
   var $17=$1;
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19+20)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$2;
   var $23=$3;
   var $24=$4;
   var $25=$5;
   var $26=FUNCTION_TABLE[$21]($17, $22, $23, $24, $25);
   $__r=$26;
   var $27=HEAP32[(($__extbe)>>2)];
   var $28=(($__extbuf)|0);
   var $29=$27;
   var $30=$28;
   var $31=((($29)-($30))|0);
   $__nmemb=$31;
   var $32=(($__extbuf)|0);
   var $33=$__nmemb;
   var $34=(($8+32)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=_fwrite($32, 1, $33, $35);
   var $37=$__nmemb;
   var $38=(($36)|(0))!=(($37)|(0));
   if ($38) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $6=-1;
   label = 11; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $42=$__r;
   var $43=(($42)|(0))==1;
   if ($43) { label = 2; break; } else { label = 6; break; }
  case 6: 
   var $45=$__r;
   var $46=(($45)|(0))==2;
   if ($46) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $6=-1;
   label = 11; break;
  case 8: 
   var $49=(($8+32)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=_fflush($50);
   var $52=(($51)|(0))!=0;
   if ($52) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $6=-1;
   label = 11; break;
  case 10: 
   $6=0;
   label = 11; break;
  case 11: 
   var $56=$6;
   STACKTOP = __stackBase__;
   return $56;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwE8overflowEi($this, $__c) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $__extbuf=__stackBase__;
   var $__1buf=(__stackBase__)+(8);
   var $__extbe=(__stackBase__)+(16);
   var $__r;
   var $__e=(__stackBase__)+(24);
   var $__nmemb;
   $38=$this;
   $39=$__c;
   var $40=$38;
   var $41=$39;
   $11=$41;
   $12=-1;
   var $42=$11;
   var $43=$12;
   var $44=(($42)|(0))==(($43)|(0));
   if ($44) { label = 26; break; } else { label = 2; break; }
  case 2: 
   var $46=$40;
   var $47=(($__1buf+4)|0);
   $1=$46;
   $2=$__1buf;
   $3=$47;
   var $48=$1;
   var $49=$2;
   var $50=(($48+24)|0);
   HEAP32[(($50)>>2)]=$49;
   var $51=(($48+20)|0);
   HEAP32[(($51)>>2)]=$49;
   var $52=$3;
   var $53=(($48+28)|0);
   HEAP32[(($53)>>2)]=$52;
   var $54=$39;
   $4=$54;
   var $55=$4;
   var $56=$40;
   $5=$56;
   var $57=$5;
   var $58=(($57+24)|0);
   var $59=HEAP32[(($58)>>2)];
   HEAP32[(($59)>>2)]=$55;
   var $60=$40;
   $6=$60;
   $7=1;
   var $61=$6;
   var $62=$7;
   var $63=(($61+24)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64+($62<<2))|0);
   HEAP32[(($63)>>2)]=$65;
   var $66=(($40+44)|0);
   var $67=HEAP8[($66)];
   var $68=(($67) & 1);
   if ($68) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $70=$40;
   $8=$70;
   var $71=$8;
   var $72=(($71+20)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$73;
   var $75=(($40+32)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=_fwrite($74, 4, 1, $76);
   var $78=(($77)|(0))!=1;
   if ($78) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $37=-1;
   label = 30; break;
  case 5: 
   label = 25; break;
  case 6: 
   var $82=(($__extbuf)|0);
   HEAP32[(($__extbe)>>2)]=$82;
   label = 7; break;
  case 7: 
   var $84=(($40+36)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($40+40)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$40;
   $9=$88;
   var $89=$9;
   var $90=(($89+20)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=$40;
   $10=$92;
   var $93=$10;
   var $94=(($93+24)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($__extbuf)|0);
   var $97=(($__extbuf)|0);
   var $98=(($97+8)|0);
   $13=$85;
   $14=$87;
   $15=$91;
   $16=$95;
   $17=$__e;
   $18=$96;
   $19=$98;
   $20=$__extbe;
   var $99=$13;
   var $100=$99;
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101+12)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=$14;
   var $105=$15;
   var $106=$16;
   var $107=$17;
   var $108=$18;
   var $109=$19;
   var $110=$20;
   var $111=FUNCTION_TABLE[$103]($99, $104, $105, $106, $107, $108, $109, $110);
   $__r=$111;
   var $112=HEAP32[(($__e)>>2)];
   var $113=$40;
   $21=$113;
   var $114=$21;
   var $115=(($114+20)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($112)|(0))==(($116)|(0));
   if ($117) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $37=-1;
   label = 30; break;
  case 9: 
   var $120=$__r;
   var $121=(($120)|(0))==3;
   if ($121) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $123=$40;
   $22=$123;
   var $124=$22;
   var $125=(($124+20)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=$126;
   var $128=(($40+32)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=_fwrite($127, 1, 1, $129);
   var $131=(($130)|(0))!=1;
   if ($131) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $37=-1;
   label = 30; break;
  case 12: 
   label = 22; break;
  case 13: 
   var $135=$__r;
   var $136=(($135)|(0))==0;
   if ($136) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $138=$__r;
   var $139=(($138)|(0))==1;
   if ($139) { label = 15; break; } else { label = 20; break; }
  case 15: 
   var $141=HEAP32[(($__extbe)>>2)];
   var $142=(($__extbuf)|0);
   var $143=$141;
   var $144=$142;
   var $145=((($143)-($144))|0);
   $__nmemb=$145;
   var $146=(($__extbuf)|0);
   var $147=$__nmemb;
   var $148=(($40+32)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=_fwrite($146, 1, $147, $149);
   var $151=$__nmemb;
   var $152=(($150)|(0))!=(($151)|(0));
   if ($152) { label = 16; break; } else { label = 17; break; }
  case 16: 
   $37=-1;
   label = 30; break;
  case 17: 
   var $155=$__r;
   var $156=(($155)|(0))==1;
   if ($156) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $158=$40;
   var $159=HEAP32[(($__e)>>2)];
   var $160=$40;
   $23=$160;
   var $161=$23;
   var $162=(($161+24)|0);
   var $163=HEAP32[(($162)>>2)];
   $24=$158;
   $25=$159;
   $26=$163;
   var $164=$24;
   var $165=$25;
   var $166=(($164+24)|0);
   HEAP32[(($166)>>2)]=$165;
   var $167=(($164+20)|0);
   HEAP32[(($167)>>2)]=$165;
   var $168=$26;
   var $169=(($164+28)|0);
   HEAP32[(($169)>>2)]=$168;
   var $170=$40;
   var $171=$40;
   $27=$171;
   var $172=$27;
   var $173=(($172+28)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=$40;
   $28=$175;
   var $176=$28;
   var $177=(($176+20)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=$174;
   var $180=$178;
   var $181=((($179)-($180))|0);
   var $182=((((($181)|(0)))/(4))&-1);
   $29=$170;
   $30=$182;
   var $183=$29;
   var $184=$30;
   var $185=(($183+24)|0);
   var $186=HEAP32[(($185)>>2)];
   var $187=(($186+($184<<2))|0);
   HEAP32[(($185)>>2)]=$187;
   label = 19; break;
  case 19: 
   label = 21; break;
  case 20: 
   $37=-1;
   label = 30; break;
  case 21: 
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $193=$__r;
   var $194=(($193)|(0))==1;
   if ($194) { label = 7; break; } else { label = 24; break; }
  case 24: 
   label = 25; break;
  case 25: 
   var $197=$40;
   $31=$197;
   $32=0;
   $33=0;
   var $198=$31;
   var $199=$32;
   var $200=(($198+24)|0);
   HEAP32[(($200)>>2)]=$199;
   var $201=(($198+20)|0);
   HEAP32[(($201)>>2)]=$199;
   var $202=$33;
   var $203=(($198+28)|0);
   HEAP32[(($203)>>2)]=$202;
   label = 26; break;
  case 26: 
   var $205=$39;
   $36=$205;
   var $206=$36;
   $34=$206;
   $35=-1;
   var $207=$34;
   var $208=$35;
   var $209=(($207)|(0))==(($208)|(0));
   if ($209) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $213 = 0;label = 29; break;
  case 28: 
   var $212=$36;
   var $213 = $212;label = 29; break;
  case 29: 
   var $213;
   $37=$213;
   label = 30; break;
  case 30: 
   var $215=$37;
   STACKTOP = __stackBase__;
   return $215;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($3);
 return;
}
function __ZNSt3__110__stdinbufIwEC2EP7__sFILEP10_mbstate_t($this, $__fp, $__st) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5=__stackBase__;
   var $6;
   var $7;
   $2=$this;
   $3=$__fp;
   $4=$__st;
   var $8=$2;
   var $9=$8;
   __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($9);
   var $10=$8;
   HEAP32[(($10)>>2)]=((13704)|0);
   var $11=(($8+32)|0);
   var $12=$3;
   HEAP32[(($11)>>2)]=$12;
   var $13=(($8+40)|0);
   var $14=$4;
   HEAP32[(($13)>>2)]=$14;
   var $15=$8;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$8;
   $1=$19;
   var $20=$1;
   var $21=(($20+4)|0);
   __ZNSt3__16localeC2ERKS0_($5, $21);
   label = 2; break;
  case 2: 
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$18]($8, $5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
  case 3: 
   __ZNSt3__16localeD2Ev($5);
   STACKTOP = __stackBase__;
   return;
  case 4: 
   var $29$0 = ___cxa_find_matching_catch(-1, -1); $29$1 = tempRet0;
   var $30=$29$0;
   $6=$30;
   var $31=$29$1;
   $7=$31;
   __ZNSt3__16localeD2Ev($5);
   label = 5; break;
  case 5: 
   var $33=$8;
   __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($33);
   label = 6; break;
  case 6: 
   var $35=$6;
   var $36=$7;
   var $37$0=$35;
   var $37$1=0;
   var $38$0=$37$0;
   var $38$1=$36;
   ___resumeException($38$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__110__stdinbufIwED2Ev($2);
 return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__110__stdinbufIwED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $__loc) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   $4=$this;
   $5=$__loc;
   var $6=$4;
   var $7=$5;
   $3=$7;
   var $8=$3;
   var $9=__ZNKSt3__16locale9use_facetERNS0_2idE($8, 19504);
   var $10=$9;
   var $11=(($6+36)|0);
   HEAP32[(($11)>>2)]=$10;
   var $12=(($6+36)|0);
   var $13=HEAP32[(($12)>>2)];
   $2=$13;
   var $14=$2;
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+24)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=FUNCTION_TABLE[$18]($14);
   var $20=(($6+44)|0);
   HEAP32[(($20)>>2)]=$19;
   var $21=(($6+36)|0);
   var $22=HEAP32[(($21)>>2)];
   $1=$22;
   var $23=$1;
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+28)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=FUNCTION_TABLE[$27]($23);
   var $29=(($6+48)|0);
   var $30=(($28)&(1));
   HEAP8[($29)]=$30;
   var $31=(($6+44)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0)) > 8;
   if ($33) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNSt3__121__throw_runtime_errorEPKc(((264)|0));
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=__ZNSt3__110__stdinbufIwE9__getcharEb($2, 0);
 return $3;
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=__ZNSt3__110__stdinbufIwE9__getcharEb($2, 1);
 return $3;
}
function __ZNSt3__110__stdinbufIwE9pbackfailEi($this, $__c) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $__extbuf=__stackBase__;
   var $__enxt=(__stackBase__)+(8);
   var $__ci=(__stackBase__)+(16);
   var $__inxt=(__stackBase__)+(24);
   $16=$this;
   $17=$__c;
   var $18=$16;
   var $19=$17;
   $2=$19;
   $3=-1;
   var $20=$2;
   var $21=$3;
   var $22=(($20)|(0))==(($21)|(0));
   if ($22) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $24=$17;
   $15=$24;
   label = 16; break;
  case 3: 
   var $26=$17;
   $1=$26;
   var $27=$1;
   HEAP32[(($__ci)>>2)]=$27;
   var $28=(($18+36)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($18+40)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($__ci+4)|0);
   var $33=(($__extbuf)|0);
   var $34=(($__extbuf)|0);
   var $35=(($34+8)|0);
   $4=$29;
   $5=$31;
   $6=$__ci;
   $7=$32;
   $8=$__inxt;
   $9=$33;
   $10=$35;
   $11=$__enxt;
   var $36=$4;
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38+12)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$5;
   var $42=$6;
   var $43=$7;
   var $44=$8;
   var $45=$9;
   var $46=$10;
   var $47=$11;
   var $48=FUNCTION_TABLE[$40]($36, $41, $42, $43, $44, $45, $46, $47);
   if ((($48)|(0))==0) {
    label = 4; break;
   }
   else if ((($48)|(0))==3) {
    label = 5; break;
   }
   else if ((($48)|(0))==1 | (($48)|(0))==2) {
    label = 6; break;
   }
   else {
   label = 7; break;
   }
  case 4: 
   label = 7; break;
  case 5: 
   var $51=$17;
   var $52=(($51) & 255);
   var $53=(($__extbuf)|0);
   HEAP8[($53)]=$52;
   var $54=(($__extbuf)|0);
   var $55=(($54+1)|0);
   HEAP32[(($__enxt)>>2)]=$55;
   label = 7; break;
  case 6: 
   $15=-1;
   label = 16; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $59=HEAP32[(($__enxt)>>2)];
   var $60=(($__extbuf)|0);
   var $61=(($59)>>>(0)) > (($60)>>>(0));
   if ($61) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $63=HEAP32[(($__enxt)>>2)];
   var $64=((($63)-(1))|0);
   HEAP32[(($__enxt)>>2)]=$64;
   var $65=HEAP8[($64)];
   var $66=(($65 << 24) >> 24);
   var $67=(($18+32)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=_ungetc($66, $68);
   var $70=(($69)|(0))==-1;
   if ($70) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $15=-1;
   label = 16; break;
  case 11: 
   label = 8; break;
  case 12: 
   var $74=$17;
   $14=$74;
   var $75=$14;
   $12=$75;
   $13=-1;
   var $76=$12;
   var $77=$13;
   var $78=(($76)|(0))==(($77)|(0));
   if ($78) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $82 = 0;label = 15; break;
  case 14: 
   var $81=$14;
   var $82 = $81;label = 15; break;
  case 15: 
   var $82;
   $15=$82;
   label = 16; break;
  case 16: 
   var $84=$15;
   STACKTOP = __stackBase__;
   return $84;
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 13024
// WARNING: content after a branch in a label, line: 13026
// WARNING: content after a branch in a label, line: 13027
// WARNING: content after a branch in a label, line: 13028
// WARNING: content after a branch in a label, line: 13029
// WARNING: content after a branch in a label, line: 13030
// WARNING: content after a branch in a label, line: 13588
// WARNING: content after a branch in a label, line: 13590
// WARNING: content after a branch in a label, line: 13591
// WARNING: content after a branch in a label, line: 13592
// WARNING: content after a branch in a label, line: 13593
// WARNING: content after a branch in a label, line: 13594
function __ZNSt3__110__stdinbufIwE9__getcharEb($this, $__consume) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16=__stackBase__;
   var $17;
   var $18;
   var $19=(__stackBase__)+(8);
   var $20;
   var $21;
   var $22;
   var $__extbuf=(__stackBase__)+(16);
   var $__nread;
   var $23=(__stackBase__)+(24);
   var $__i;
   var $__c;
   var $__1buf=(__stackBase__)+(32);
   var $__enxt=(__stackBase__)+(40);
   var $__inxt=(__stackBase__)+(48);
   var $__r;
   var $__sv_st=(__stackBase__)+(56);
   var $__c1;
   var $__i2;
   $21=$this;
   var $24=(($__consume)&(1));
   $22=$24;
   var $25=$21;
   HEAP32[(($23)>>2)]=1;
   var $26=(($25+44)|0);
   $17=$23;
   $18=$26;
   var $27=$17;
   var $28=$18;
   var $tmp_i=$16;
   var $tmp1_i=$19;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $14=$27;
   $15=$28;
   var $29=$14;
   var $30=$15;
   $11=$16;
   $12=$29;
   $13=$30;
   var $31=$11;
   var $32=$12;
   var $33=HEAP32[(($32)>>2)];
   var $34=$13;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($33)|(0)) < (($35)|(0));
   if ($36) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $38=$15;
   var $41 = $38;label = 4; break;
  case 3: 
   var $40=$14;
   var $41 = $40;label = 4; break;
  case 4: 
   var $41;
   var $42=HEAP32[(($41)>>2)];
   $__nread=$42;
   $__i=0;
   label = 5; break;
  case 5: 
   var $44=$__i;
   var $45=$__nread;
   var $46=(($44)|(0)) < (($45)|(0));
   if ($46) { label = 6; break; } else { label = 10; break; }
  case 6: 
   var $48=(($25+32)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=_fgetc($49);
   $__c=$50;
   var $51=$__c;
   var $52=(($51)|(0))==-1;
   if ($52) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $20=-1;
   label = 33; break;
  case 8: 
   var $55=$__c;
   var $56=(($55) & 255);
   var $57=$__i;
   var $58=(($__extbuf+$57)|0);
   HEAP8[($58)]=$56;
   label = 9; break;
  case 9: 
   var $60=$__i;
   var $61=((($60)+(1))|0);
   $__i=$61;
   label = 5; break;
  case 10: 
   var $63=(($25+48)|0);
   var $64=HEAP8[($63)];
   var $65=(($64) & 1);
   if ($65) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $67=(($__extbuf)|0);
   var $68=HEAP8[($67)];
   var $69=(($68 << 24) >> 24);
   HEAP32[(($__1buf)>>2)]=$69;
   label = 25; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $72=(($25+40)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$__sv_st;
   var $75=$73;
   assert(8 % 1 === 0);HEAP32[(($74)>>2)]=HEAP32[(($75)>>2)];HEAP32[((($74)+(4))>>2)]=HEAP32[((($75)+(4))>>2)];
   var $76=(($25+36)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($25+40)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($__extbuf)|0);
   var $81=(($__extbuf)|0);
   var $82=$__nread;
   var $83=(($81+$82)|0);
   var $84=(($__1buf+4)|0);
   $1=$77;
   $2=$79;
   $3=$80;
   $4=$83;
   $5=$__enxt;
   $6=$__1buf;
   $7=$84;
   $8=$__inxt;
   var $85=$1;
   var $86=$85;
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87+16)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=$2;
   var $91=$3;
   var $92=$4;
   var $93=$5;
   var $94=$6;
   var $95=$7;
   var $96=$8;
   var $97=FUNCTION_TABLE[$89]($85, $90, $91, $92, $93, $94, $95, $96);
   $__r=$97;
   var $98=$__r;
   if ((($98)|(0))==0) {
    label = 14; break;
   }
   else if ((($98)|(0))==1) {
    label = 15; break;
   }
   else if ((($98)|(0))==2) {
    label = 20; break;
   }
   else if ((($98)|(0))==3) {
    label = 21; break;
   }
   else {
   label = 22; break;
   }
  case 14: 
   label = 22; break;
  case 15: 
   var $101=(($25+40)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=$102;
   var $104=$__sv_st;
   assert(8 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];
   var $105=$__nread;
   var $106=(($105)|(0))==8;
   if ($106) { label = 16; break; } else { label = 17; break; }
  case 16: 
   $20=-1;
   label = 33; break;
  case 17: 
   var $109=(($25+32)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=_fgetc($110);
   $__c1=$111;
   var $112=$__c1;
   var $113=(($112)|(0))==-1;
   if ($113) { label = 18; break; } else { label = 19; break; }
  case 18: 
   $20=-1;
   label = 33; break;
  case 19: 
   var $116=$__c1;
   var $117=(($116) & 255);
   var $118=$__nread;
   var $119=(($__extbuf+$118)|0);
   HEAP8[($119)]=$117;
   var $120=$__nread;
   var $121=((($120)+(1))|0);
   $__nread=$121;
   label = 22; break;
  case 20: 
   $20=-1;
   label = 33; break;
  case 21: 
   var $124=(($__extbuf)|0);
   var $125=HEAP8[($124)];
   var $126=(($125 << 24) >> 24);
   HEAP32[(($__1buf)>>2)]=$126;
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $129=$__r;
   var $130=(($129)|(0))==1;
   if ($130) { label = 13; break; } else { label = 24; break; }
  case 24: 
   label = 25; break;
  case 25: 
   var $133=$22;
   var $134=(($133) & 1);
   if ($134) { label = 32; break; } else { label = 26; break; }
  case 26: 
   var $136=$__nread;
   $__i2=$136;
   label = 27; break;
  case 27: 
   var $138=$__i2;
   var $139=(($138)|(0)) > 0;
   if ($139) { label = 28; break; } else { label = 31; break; }
  case 28: 
   var $141=$__i2;
   var $142=((($141)-(1))|0);
   $__i2=$142;
   var $143=(($__extbuf+$142)|0);
   var $144=HEAP8[($143)];
   var $145=(($144 << 24) >> 24);
   $9=$145;
   var $146=$9;
   var $147=(($25+32)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=_ungetc($146, $148);
   var $150=(($149)|(0))==-1;
   if ($150) { label = 29; break; } else { label = 30; break; }
  case 29: 
   $20=-1;
   label = 33; break;
  case 30: 
   label = 27; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $155=HEAP32[(($__1buf)>>2)];
   $10=$155;
   var $156=$10;
   $20=$156;
   label = 33; break;
  case 33: 
   var $158=$20;
   STACKTOP = __stackBase__;
   return $158;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($3);
 return;
}
function __ZNSt3__111__stdoutbufIcEC2EP7__sFILEP10_mbstate_t($this, $__fp, $__st) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7=__stackBase__;
   var $8;
   var $9;
   $4=$this;
   $5=$__fp;
   $6=$__st;
   var $10=$4;
   var $11=$10;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($11);
   var $12=$10;
   HEAP32[(($12)>>2)]=((13376)|0);
   var $13=(($10+32)|0);
   var $14=$5;
   HEAP32[(($13)>>2)]=$14;
   var $15=(($10+36)|0);
   var $16=$10;
   $3=$16;
   var $17=$3;
   var $18=(($17+4)|0);
   __ZNSt3__16localeC2ERKS0_($7, $18);
   label = 2; break;
  case 2: 
   $2=$7;
   var $20=$2;
   var $21 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($20, 19512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $22=$21;
   label = 4; break;
  case 4: 
   __ZNSt3__16localeD2Ev($7);
   HEAP32[(($15)>>2)]=$22;
   var $24=(($10+40)|0);
   var $25=$6;
   HEAP32[(($24)>>2)]=$25;
   var $26=(($10+44)|0);
   var $27=(($10+36)|0);
   var $28=HEAP32[(($27)>>2)];
   $1=$28;
   var $29=$1;
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+28)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=FUNCTION_TABLE[$33]($29);
   var $35=(($34)&(1));
   HEAP8[($26)]=$35;
   STACKTOP = __stackBase__;
   return;
  case 5: 
   var $41$0 = ___cxa_find_matching_catch(-1, -1); $41$1 = tempRet0;
   var $42=$41$0;
   $8=$42;
   var $43=$41$1;
   $9=$43;
   __ZNSt3__16localeD2Ev($7);
   label = 6; break;
  case 6: 
   var $45=$10;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($45);
   label = 7; break;
  case 7: 
   var $47=$8;
   var $48=$9;
   var $49$0=$47;
   var $49$1=0;
   var $50$0=$49$0;
   var $50$1=$48;
   ___resumeException($50$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__111__stdoutbufIcED2Ev($2);
 return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__111__stdoutbufIcED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this, $__loc) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $3=$this;
 $4=$__loc;
 var $5=$3;
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+24)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=FUNCTION_TABLE[$9]($5);
 var $11=$4;
 $2=$11;
 var $12=$2;
 var $13=__ZNKSt3__16locale9use_facetERNS0_2idE($12, 19512);
 var $14=$13;
 var $15=(($5+36)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=(($5+36)|0);
 var $17=HEAP32[(($16)>>2)];
 $1=$17;
 var $18=$1;
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+28)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=FUNCTION_TABLE[$22]($18);
 var $24=(($5+44)|0);
 var $25=(($23)&(1));
 HEAP8[($24)]=$25;
 return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $__extbuf=__stackBase__;
   var $__r;
   var $__extbe=(__stackBase__)+(8);
   var $__nmemb;
   $7=$this;
   var $8=$7;
   label = 2; break;
  case 2: 
   var $10=(($8+36)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($8+40)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($__extbuf)|0);
   var $15=(($__extbuf)|0);
   var $16=(($15+8)|0);
   $1=$11;
   $2=$13;
   $3=$14;
   $4=$16;
   $5=$__extbe;
   var $17=$1;
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19+20)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$2;
   var $23=$3;
   var $24=$4;
   var $25=$5;
   var $26=FUNCTION_TABLE[$21]($17, $22, $23, $24, $25);
   $__r=$26;
   var $27=HEAP32[(($__extbe)>>2)];
   var $28=(($__extbuf)|0);
   var $29=$27;
   var $30=$28;
   var $31=((($29)-($30))|0);
   $__nmemb=$31;
   var $32=(($__extbuf)|0);
   var $33=$__nmemb;
   var $34=(($8+32)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=_fwrite($32, 1, $33, $35);
   var $37=$__nmemb;
   var $38=(($36)|(0))!=(($37)|(0));
   if ($38) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $6=-1;
   label = 11; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $42=$__r;
   var $43=(($42)|(0))==1;
   if ($43) { label = 2; break; } else { label = 6; break; }
  case 6: 
   var $45=$__r;
   var $46=(($45)|(0))==2;
   if ($46) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $6=-1;
   label = 11; break;
  case 8: 
   var $49=(($8+32)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=_fflush($50);
   var $52=(($51)|(0))!=0;
   if ($52) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $6=-1;
   label = 11; break;
  case 10: 
   $6=0;
   label = 11; break;
  case 11: 
   var $56=$6;
   STACKTOP = __stackBase__;
   return $56;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this, $__c) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $__extbuf=__stackBase__;
   var $__1buf=(__stackBase__)+(8);
   var $__extbe=(__stackBase__)+(16);
   var $__r;
   var $__e=(__stackBase__)+(24);
   var $__nmemb;
   $38=$this;
   $39=$__c;
   var $40=$38;
   var $41=$39;
   $11=$41;
   $12=-1;
   var $42=$11;
   var $43=$12;
   var $44=(($42)|(0))==(($43)|(0));
   if ($44) { label = 26; break; } else { label = 2; break; }
  case 2: 
   var $46=$40;
   var $47=(($__1buf+1)|0);
   $1=$46;
   $2=$__1buf;
   $3=$47;
   var $48=$1;
   var $49=$2;
   var $50=(($48+24)|0);
   HEAP32[(($50)>>2)]=$49;
   var $51=(($48+20)|0);
   HEAP32[(($51)>>2)]=$49;
   var $52=$3;
   var $53=(($48+28)|0);
   HEAP32[(($53)>>2)]=$52;
   var $54=$39;
   $4=$54;
   var $55=$4;
   var $56=(($55) & 255);
   var $57=$40;
   $5=$57;
   var $58=$5;
   var $59=(($58+24)|0);
   var $60=HEAP32[(($59)>>2)];
   HEAP8[($60)]=$56;
   var $61=$40;
   $6=$61;
   $7=1;
   var $62=$6;
   var $63=$7;
   var $64=(($62+24)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+$63)|0);
   HEAP32[(($64)>>2)]=$66;
   var $67=(($40+44)|0);
   var $68=HEAP8[($67)];
   var $69=(($68) & 1);
   if ($69) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $71=$40;
   $8=$71;
   var $72=$8;
   var $73=(($72+20)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($40+32)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=_fwrite($74, 1, 1, $76);
   var $78=(($77)|(0))!=1;
   if ($78) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $37=-1;
   label = 30; break;
  case 5: 
   label = 25; break;
  case 6: 
   var $82=(($__extbuf)|0);
   HEAP32[(($__extbe)>>2)]=$82;
   label = 7; break;
  case 7: 
   var $84=(($40+36)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($40+40)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$40;
   $9=$88;
   var $89=$9;
   var $90=(($89+20)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=$40;
   $10=$92;
   var $93=$10;
   var $94=(($93+24)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($__extbuf)|0);
   var $97=(($__extbuf)|0);
   var $98=(($97+8)|0);
   $13=$85;
   $14=$87;
   $15=$91;
   $16=$95;
   $17=$__e;
   $18=$96;
   $19=$98;
   $20=$__extbe;
   var $99=$13;
   var $100=$99;
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101+12)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=$14;
   var $105=$15;
   var $106=$16;
   var $107=$17;
   var $108=$18;
   var $109=$19;
   var $110=$20;
   var $111=FUNCTION_TABLE[$103]($99, $104, $105, $106, $107, $108, $109, $110);
   $__r=$111;
   var $112=HEAP32[(($__e)>>2)];
   var $113=$40;
   $21=$113;
   var $114=$21;
   var $115=(($114+20)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($112)|(0))==(($116)|(0));
   if ($117) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $37=-1;
   label = 30; break;
  case 9: 
   var $120=$__r;
   var $121=(($120)|(0))==3;
   if ($121) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $123=$40;
   $22=$123;
   var $124=$22;
   var $125=(($124+20)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=(($40+32)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=_fwrite($126, 1, 1, $128);
   var $130=(($129)|(0))!=1;
   if ($130) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $37=-1;
   label = 30; break;
  case 12: 
   label = 22; break;
  case 13: 
   var $134=$__r;
   var $135=(($134)|(0))==0;
   if ($135) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $137=$__r;
   var $138=(($137)|(0))==1;
   if ($138) { label = 15; break; } else { label = 20; break; }
  case 15: 
   var $140=HEAP32[(($__extbe)>>2)];
   var $141=(($__extbuf)|0);
   var $142=$140;
   var $143=$141;
   var $144=((($142)-($143))|0);
   $__nmemb=$144;
   var $145=(($__extbuf)|0);
   var $146=$__nmemb;
   var $147=(($40+32)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=_fwrite($145, 1, $146, $148);
   var $150=$__nmemb;
   var $151=(($149)|(0))!=(($150)|(0));
   if ($151) { label = 16; break; } else { label = 17; break; }
  case 16: 
   $37=-1;
   label = 30; break;
  case 17: 
   var $154=$__r;
   var $155=(($154)|(0))==1;
   if ($155) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $157=$40;
   var $158=HEAP32[(($__e)>>2)];
   var $159=$40;
   $23=$159;
   var $160=$23;
   var $161=(($160+24)|0);
   var $162=HEAP32[(($161)>>2)];
   $24=$157;
   $25=$158;
   $26=$162;
   var $163=$24;
   var $164=$25;
   var $165=(($163+24)|0);
   HEAP32[(($165)>>2)]=$164;
   var $166=(($163+20)|0);
   HEAP32[(($166)>>2)]=$164;
   var $167=$26;
   var $168=(($163+28)|0);
   HEAP32[(($168)>>2)]=$167;
   var $169=$40;
   var $170=$40;
   $27=$170;
   var $171=$27;
   var $172=(($171+28)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=$40;
   $28=$174;
   var $175=$28;
   var $176=(($175+20)|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=$173;
   var $179=$177;
   var $180=((($178)-($179))|0);
   $29=$169;
   $30=$180;
   var $181=$29;
   var $182=$30;
   var $183=(($181+24)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=(($184+$182)|0);
   HEAP32[(($183)>>2)]=$185;
   label = 19; break;
  case 19: 
   label = 21; break;
  case 20: 
   $37=-1;
   label = 30; break;
  case 21: 
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $191=$__r;
   var $192=(($191)|(0))==1;
   if ($192) { label = 7; break; } else { label = 24; break; }
  case 24: 
   label = 25; break;
  case 25: 
   var $195=$40;
   $31=$195;
   $32=0;
   $33=0;
   var $196=$31;
   var $197=$32;
   var $198=(($196+24)|0);
   HEAP32[(($198)>>2)]=$197;
   var $199=(($196+20)|0);
   HEAP32[(($199)>>2)]=$197;
   var $200=$33;
   var $201=(($196+28)|0);
   HEAP32[(($201)>>2)]=$200;
   label = 26; break;
  case 26: 
   var $203=$39;
   $36=$203;
   var $204=$36;
   $34=$204;
   $35=-1;
   var $205=$34;
   var $206=$35;
   var $207=(($205)|(0))==(($206)|(0));
   if ($207) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $211 = 0;label = 29; break;
  case 28: 
   var $210=$36;
   var $211 = $210;label = 29; break;
  case 29: 
   var $211;
   $37=$211;
   label = 30; break;
  case 30: 
   var $213=$37;
   STACKTOP = __stackBase__;
   return $213;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
 return;
}
function __ZNSt3__110__stdinbufIcEC2EP7__sFILEP10_mbstate_t($this, $__fp, $__st) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5=__stackBase__;
   var $6;
   var $7;
   $2=$this;
   $3=$__fp;
   $4=$__st;
   var $8=$2;
   var $9=$8;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($9);
   var $10=$8;
   HEAP32[(($10)>>2)]=((13776)|0);
   var $11=(($8+32)|0);
   var $12=$3;
   HEAP32[(($11)>>2)]=$12;
   var $13=(($8+40)|0);
   var $14=$4;
   HEAP32[(($13)>>2)]=$14;
   var $15=$8;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$8;
   $1=$19;
   var $20=$1;
   var $21=(($20+4)|0);
   __ZNSt3__16localeC2ERKS0_($5, $21);
   label = 2; break;
  case 2: 
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$18]($8, $5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
  case 3: 
   __ZNSt3__16localeD2Ev($5);
   STACKTOP = __stackBase__;
   return;
  case 4: 
   var $29$0 = ___cxa_find_matching_catch(-1, -1); $29$1 = tempRet0;
   var $30=$29$0;
   $6=$30;
   var $31=$29$1;
   $7=$31;
   __ZNSt3__16localeD2Ev($5);
   label = 5; break;
  case 5: 
   var $33=$8;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($33);
   label = 6; break;
  case 6: 
   var $35=$6;
   var $36=$7;
   var $37$0=$35;
   var $37$1=0;
   var $38$0=$37$0;
   var $38$1=$36;
   ___resumeException($38$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__110__stdinbufIcED2Ev($2);
 return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__110__stdinbufIcED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt9exceptionD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZNSt3__112_GLOBAL__N_19incrementIlEET_RS2_($t) {
 var label = 0;
 var $1;
 $1=$t;
 var $2=$1;
 var $3=(tempValue=HEAP32[(($2)>>2)],HEAP32[(($2)>>2)]=tempValue+1,tempValue);
 var $4=((($3)+(1))|0);
 return $4;
}
function __ZNSt3__112_GLOBAL__N_19decrementIlEET_RS2_($t) {
 var label = 0;
 var $1;
 $1=$t;
 var $2=$1;
 var $3=(tempValue=HEAP32[(($2)>>2)],HEAP32[(($2)>>2)]=tempValue+-1,tempValue);
 var $4=((($3)-(1))|0);
 return $4;
}
function __ZNK12_GLOBAL__N_114__libcpp_nmstr5c_strEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNK12_GLOBAL__N_114__libcpp_nmstr5countEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(4))|0);
 var $6=$5;
 return $6;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $__loc) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   $4=$this;
   $5=$__loc;
   var $6=$4;
   var $7=$5;
   $3=$7;
   var $8=$3;
   var $9=__ZNKSt3__16locale9use_facetERNS0_2idE($8, 19512);
   var $10=$9;
   var $11=(($6+36)|0);
   HEAP32[(($11)>>2)]=$10;
   var $12=(($6+36)|0);
   var $13=HEAP32[(($12)>>2)];
   $2=$13;
   var $14=$2;
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+24)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=FUNCTION_TABLE[$18]($14);
   var $20=(($6+44)|0);
   HEAP32[(($20)>>2)]=$19;
   var $21=(($6+36)|0);
   var $22=HEAP32[(($21)>>2)];
   $1=$22;
   var $23=$1;
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+28)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=FUNCTION_TABLE[$27]($23);
   var $29=(($6+48)|0);
   var $30=(($28)&(1));
   HEAP8[($29)]=$30;
   var $31=(($6+44)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0)) > 8;
   if ($33) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNSt3__121__throw_runtime_errorEPKc(((264)|0));
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=__ZNSt3__110__stdinbufIcE9__getcharEb($2, 0);
 return $3;
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=__ZNSt3__110__stdinbufIcE9__getcharEb($2, 1);
 return $3;
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this, $__c) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $__extbuf=__stackBase__;
   var $__enxt=(__stackBase__)+(8);
   var $__ci=(__stackBase__)+(16);
   var $__inxt=(__stackBase__)+(24);
   $16=$this;
   $17=$__c;
   var $18=$16;
   var $19=$17;
   $2=$19;
   $3=-1;
   var $20=$2;
   var $21=$3;
   var $22=(($20)|(0))==(($21)|(0));
   if ($22) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $24=$17;
   $15=$24;
   label = 16; break;
  case 3: 
   var $26=$17;
   $1=$26;
   var $27=$1;
   var $28=(($27) & 255);
   HEAP8[($__ci)]=$28;
   var $29=(($18+36)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($18+40)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($__ci+1)|0);
   var $34=(($__extbuf)|0);
   var $35=(($__extbuf)|0);
   var $36=(($35+8)|0);
   $4=$30;
   $5=$32;
   $6=$__ci;
   $7=$33;
   $8=$__inxt;
   $9=$34;
   $10=$36;
   $11=$__enxt;
   var $37=$4;
   var $38=$37;
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+12)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$5;
   var $43=$6;
   var $44=$7;
   var $45=$8;
   var $46=$9;
   var $47=$10;
   var $48=$11;
   var $49=FUNCTION_TABLE[$41]($37, $42, $43, $44, $45, $46, $47, $48);
   if ((($49)|(0))==0) {
    label = 4; break;
   }
   else if ((($49)|(0))==3) {
    label = 5; break;
   }
   else if ((($49)|(0))==1 | (($49)|(0))==2) {
    label = 6; break;
   }
   else {
   label = 7; break;
   }
  case 4: 
   label = 7; break;
  case 5: 
   var $52=$17;
   var $53=(($52) & 255);
   var $54=(($__extbuf)|0);
   HEAP8[($54)]=$53;
   var $55=(($__extbuf)|0);
   var $56=(($55+1)|0);
   HEAP32[(($__enxt)>>2)]=$56;
   label = 7; break;
  case 6: 
   $15=-1;
   label = 16; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $60=HEAP32[(($__enxt)>>2)];
   var $61=(($__extbuf)|0);
   var $62=(($60)>>>(0)) > (($61)>>>(0));
   if ($62) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $64=HEAP32[(($__enxt)>>2)];
   var $65=((($64)-(1))|0);
   HEAP32[(($__enxt)>>2)]=$65;
   var $66=HEAP8[($65)];
   var $67=(($66 << 24) >> 24);
   var $68=(($18+32)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=_ungetc($67, $69);
   var $71=(($70)|(0))==-1;
   if ($71) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $15=-1;
   label = 16; break;
  case 11: 
   label = 8; break;
  case 12: 
   var $75=$17;
   $14=$75;
   var $76=$14;
   $12=$76;
   $13=-1;
   var $77=$12;
   var $78=$13;
   var $79=(($77)|(0))==(($78)|(0));
   if ($79) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $83 = 0;label = 15; break;
  case 14: 
   var $82=$14;
   var $83 = $82;label = 15; break;
  case 15: 
   var $83;
   $15=$83;
   label = 16; break;
  case 16: 
   var $85=$15;
   STACKTOP = __stackBase__;
   return $85;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this, $__consume) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16=__stackBase__;
   var $17;
   var $18;
   var $19=(__stackBase__)+(8);
   var $20;
   var $21;
   var $22;
   var $__extbuf=(__stackBase__)+(16);
   var $__nread;
   var $23=(__stackBase__)+(24);
   var $__i;
   var $__c;
   var $__1buf=(__stackBase__)+(32);
   var $__enxt=(__stackBase__)+(40);
   var $__inxt=(__stackBase__)+(48);
   var $__r;
   var $__sv_st=(__stackBase__)+(56);
   var $__c1;
   var $__i2;
   $21=$this;
   var $24=(($__consume)&(1));
   $22=$24;
   var $25=$21;
   HEAP32[(($23)>>2)]=1;
   var $26=(($25+44)|0);
   $17=$23;
   $18=$26;
   var $27=$17;
   var $28=$18;
   var $tmp_i=$16;
   var $tmp1_i=$19;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $14=$27;
   $15=$28;
   var $29=$14;
   var $30=$15;
   $11=$16;
   $12=$29;
   $13=$30;
   var $31=$11;
   var $32=$12;
   var $33=HEAP32[(($32)>>2)];
   var $34=$13;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($33)|(0)) < (($35)|(0));
   if ($36) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $38=$15;
   var $41 = $38;label = 4; break;
  case 3: 
   var $40=$14;
   var $41 = $40;label = 4; break;
  case 4: 
   var $41;
   var $42=HEAP32[(($41)>>2)];
   $__nread=$42;
   $__i=0;
   label = 5; break;
  case 5: 
   var $44=$__i;
   var $45=$__nread;
   var $46=(($44)|(0)) < (($45)|(0));
   if ($46) { label = 6; break; } else { label = 10; break; }
  case 6: 
   var $48=(($25+32)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=_fgetc($49);
   $__c=$50;
   var $51=$__c;
   var $52=(($51)|(0))==-1;
   if ($52) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $20=-1;
   label = 33; break;
  case 8: 
   var $55=$__c;
   var $56=(($55) & 255);
   var $57=$__i;
   var $58=(($__extbuf+$57)|0);
   HEAP8[($58)]=$56;
   label = 9; break;
  case 9: 
   var $60=$__i;
   var $61=((($60)+(1))|0);
   $__i=$61;
   label = 5; break;
  case 10: 
   var $63=(($25+48)|0);
   var $64=HEAP8[($63)];
   var $65=(($64) & 1);
   if ($65) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $67=(($__extbuf)|0);
   var $68=HEAP8[($67)];
   HEAP8[($__1buf)]=$68;
   label = 25; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $71=(($25+40)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=$__sv_st;
   var $74=$72;
   assert(8 % 1 === 0);HEAP32[(($73)>>2)]=HEAP32[(($74)>>2)];HEAP32[((($73)+(4))>>2)]=HEAP32[((($74)+(4))>>2)];
   var $75=(($25+36)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=(($25+40)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=(($__extbuf)|0);
   var $80=(($__extbuf)|0);
   var $81=$__nread;
   var $82=(($80+$81)|0);
   var $83=(($__1buf+1)|0);
   $1=$76;
   $2=$78;
   $3=$79;
   $4=$82;
   $5=$__enxt;
   $6=$__1buf;
   $7=$83;
   $8=$__inxt;
   var $84=$1;
   var $85=$84;
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86+16)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=$2;
   var $90=$3;
   var $91=$4;
   var $92=$5;
   var $93=$6;
   var $94=$7;
   var $95=$8;
   var $96=FUNCTION_TABLE[$88]($84, $89, $90, $91, $92, $93, $94, $95);
   $__r=$96;
   var $97=$__r;
   if ((($97)|(0))==0) {
    label = 14; break;
   }
   else if ((($97)|(0))==1) {
    label = 15; break;
   }
   else if ((($97)|(0))==2) {
    label = 20; break;
   }
   else if ((($97)|(0))==3) {
    label = 21; break;
   }
   else {
   label = 22; break;
   }
  case 14: 
   label = 22; break;
  case 15: 
   var $100=(($25+40)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=$101;
   var $103=$__sv_st;
   assert(8 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($103)>>2)];HEAP32[((($102)+(4))>>2)]=HEAP32[((($103)+(4))>>2)];
   var $104=$__nread;
   var $105=(($104)|(0))==8;
   if ($105) { label = 16; break; } else { label = 17; break; }
  case 16: 
   $20=-1;
   label = 33; break;
  case 17: 
   var $108=(($25+32)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=_fgetc($109);
   $__c1=$110;
   var $111=$__c1;
   var $112=(($111)|(0))==-1;
   if ($112) { label = 18; break; } else { label = 19; break; }
  case 18: 
   $20=-1;
   label = 33; break;
  case 19: 
   var $115=$__c1;
   var $116=(($115) & 255);
   var $117=$__nread;
   var $118=(($__extbuf+$117)|0);
   HEAP8[($118)]=$116;
   var $119=$__nread;
   var $120=((($119)+(1))|0);
   $__nread=$120;
   label = 22; break;
  case 20: 
   $20=-1;
   label = 33; break;
  case 21: 
   var $123=(($__extbuf)|0);
   var $124=HEAP8[($123)];
   HEAP8[($__1buf)]=$124;
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $127=$__r;
   var $128=(($127)|(0))==1;
   if ($128) { label = 13; break; } else { label = 24; break; }
  case 24: 
   label = 25; break;
  case 25: 
   var $131=$22;
   var $132=(($131) & 1);
   if ($132) { label = 32; break; } else { label = 26; break; }
  case 26: 
   var $134=$__nread;
   $__i2=$134;
   label = 27; break;
  case 27: 
   var $136=$__i2;
   var $137=(($136)|(0)) > 0;
   if ($137) { label = 28; break; } else { label = 31; break; }
  case 28: 
   var $139=$__i2;
   var $140=((($139)-(1))|0);
   $__i2=$140;
   var $141=(($__extbuf+$140)|0);
   var $142=HEAP8[($141)];
   $9=$142;
   var $143=$9;
   var $144=(($143)&(255));
   var $145=(($25+32)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=_ungetc($144, $146);
   var $148=(($147)|(0))==-1;
   if ($148) { label = 29; break; } else { label = 30; break; }
  case 29: 
   $20=-1;
   label = 33; break;
  case 30: 
   label = 27; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $153=HEAP8[($__1buf)];
   $10=$153;
   var $154=$10;
   var $155=(($154)&(255));
   $20=$155;
   label = 33; break;
  case 33: 
   var $157=$20;
   STACKTOP = __stackBase__;
   return $157;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
 return;
}
function __GLOBAL__I_a147() {
 var label = 0;
 ___cxx_global_var_init146();
 return;
}
function __ZNSt3__114__shared_countD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__114__shared_countD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=__ZNSt3__112_GLOBAL__N_19incrementIlEET_RS2_($3);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $2=$this;
   var $3=$2;
   var $4=(($3+4)|0);
   var $5=__ZNSt3__112_GLOBAL__N_19decrementIlEET_RS2_($4);
   var $6=(($5)|(0))==-1;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$3;
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+8)|0);
   var $11=HEAP32[(($10)>>2)];
   FUNCTION_TABLE[$11]($3);
   $1=1;
   label = 4; break;
  case 3: 
   $1=0;
   label = 4; break;
  case 4: 
   var $14=$1;
   return $14;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorC2EPKc($this, $msg) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $s;
   var $4;
   var $5;
   $2=$this;
   $3=$msg;
   var $6=$2;
   var $7=$6;
   $1=$7;
   var $8=$1;
   var $9=$8;
   HEAP32[(($9)>>2)]=((10880)|0);
   var $10=$6;
   HEAP32[(($10)>>2)]=((11040)|0);
   var $11=(($6+4)|0);
   var $12=$11;
   $s=$12;
   var $13=$s;
   var $14=$13;
   var $15=(($14)|(0))==0;
   if ($15) { var $21 = 0;label = 4; break; } else { label = 2; break; }
  case 2: 
   var $17=$14;
   var $18=$3;
   (function() { try { __THREW__ = 0; return __ZN12_GLOBAL__N_114__libcpp_nmstrC2EPKc($17, $18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $21 = $17;label = 4; break;
  case 4: 
   var $21;
   return;
  case 5: 
   var $23$0 = ___cxa_find_matching_catch(-1, -1); $23$1 = tempRet0;
   var $24=$23$0;
   $4=$24;
   var $25=$23$1;
   $5=$25;
   var $26=$6;
   __ZNSt9exceptionD2Ev($26);
   label = 6; break;
  case 6: 
   var $28=$4;
   var $29=$5;
   var $30$0=$28;
   var $30$1=0;
   var $31$0=$30$0;
   var $31$1=$29;
   ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt11logic_errorD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt11logic_errorD2Ev($this) {
 var label = 0;
 var $1;
 var $s;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((11040)|0);
 var $4=(($2+4)|0);
 var $5=$4;
 $s=$5;
 var $6=$s;
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($6);
 var $7=$2;
 __ZNSt9exceptionD2Ev($7);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 var label = 0;
 var $1;
 var $s;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=$3;
 $s=$4;
 var $5=$s;
 var $6=__ZNK12_GLOBAL__N_114__libcpp_nmstr5c_strEv($5);
 return $6;
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $msg) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $s;
   var $16;
   var $17;
   $14=$this;
   $15=$msg;
   var $18=$14;
   var $19=$18;
   $13=$19;
   var $20=$13;
   var $21=$20;
   HEAP32[(($21)>>2)]=((10880)|0);
   var $22=$18;
   HEAP32[(($22)>>2)]=((10976)|0);
   var $23=(($18+4)|0);
   var $24=$23;
   $s=$24;
   var $25=$s;
   var $26=$25;
   var $27=(($26)|(0))==0;
   if ($27) { var $73 = 0;label = 7; break; } else { label = 2; break; }
  case 2: 
   var $29=$26;
   var $30=$15;
   $12=$30;
   var $31=$12;
   $11=$31;
   var $32=$11;
   $10=$32;
   var $33=$10;
   $9=$33;
   var $34=$9;
   var $35=(($34)|0);
   $8=$35;
   var $36=$8;
   var $37=$36;
   $7=$37;
   var $38=$7;
   var $39=(($38)|0);
   var $40=(($39)|0);
   var $41=$40;
   var $42=(($41)|0);
   var $43=$42;
   var $44=HEAP8[($43)];
   var $45=(($44)&(255));
   var $46=$45 & 1;
   var $47=(($46)|(0))!=0;
   if ($47) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $3=$33;
   var $49=$3;
   var $50=(($49)|0);
   $2=$50;
   var $51=$2;
   var $52=$51;
   $1=$52;
   var $53=$1;
   var $54=(($53)|0);
   var $55=(($54)|0);
   var $56=$55;
   var $57=(($56+8)|0);
   var $58=HEAP32[(($57)>>2)];
   var $70 = $58;label = 5; break;
  case 4: 
   $6=$33;
   var $60=$6;
   var $61=(($60)|0);
   $5=$61;
   var $62=$5;
   var $63=$62;
   $4=$63;
   var $64=$4;
   var $65=(($64)|0);
   var $66=(($65)|0);
   var $67=$66;
   var $68=(($67+1)|0);
   var $69=(($68)|0);
   var $70 = $69;label = 5; break;
  case 5: 
   var $70;
   (function() { try { __THREW__ = 0; return __ZN12_GLOBAL__N_114__libcpp_nmstrC2EPKc($29, $70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $73 = $29;label = 7; break;
  case 7: 
   var $73;
   return;
  case 8: 
   var $75$0 = ___cxa_find_matching_catch(-1, -1); $75$1 = tempRet0;
   var $76=$75$0;
   $16=$76;
   var $77=$75$1;
   $17=$77;
   var $78=$18;
   __ZNSt9exceptionD2Ev($78);
   label = 9; break;
  case 9: 
   var $80=$16;
   var $81=$17;
   var $82$0=$80;
   var $82$1=0;
   var $83$0=$82$0;
   var $83$1=$81;
   ___resumeException($83$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorC2EPKc($this, $msg) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $s;
   var $4;
   var $5;
   $2=$this;
   $3=$msg;
   var $6=$2;
   var $7=$6;
   $1=$7;
   var $8=$1;
   var $9=$8;
   HEAP32[(($9)>>2)]=((10880)|0);
   var $10=$6;
   HEAP32[(($10)>>2)]=((10976)|0);
   var $11=(($6+4)|0);
   var $12=$11;
   $s=$12;
   var $13=$s;
   var $14=$13;
   var $15=(($14)|(0))==0;
   if ($15) { var $21 = 0;label = 4; break; } else { label = 2; break; }
  case 2: 
   var $17=$14;
   var $18=$3;
   (function() { try { __THREW__ = 0; return __ZN12_GLOBAL__N_114__libcpp_nmstrC2EPKc($17, $18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $21 = $17;label = 4; break;
  case 4: 
   var $21;
   return;
  case 5: 
   var $23$0 = ___cxa_find_matching_catch(-1, -1); $23$1 = tempRet0;
   var $24=$23$0;
   $4=$24;
   var $25=$23$1;
   $5=$25;
   var $26=$6;
   __ZNSt9exceptionD2Ev($26);
   label = 6; break;
  case 6: 
   var $28=$4;
   var $29=$5;
   var $30$0=$28;
   var $30$1=0;
   var $31$0=$30$0;
   var $31$1=$29;
   ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt13runtime_errorD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 var label = 0;
 var $1;
 var $s;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((10976)|0);
 var $4=(($2+4)|0);
 var $5=$4;
 $s=$5;
 var $6=$s;
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($6);
 var $7=$2;
 __ZNSt9exceptionD2Ev($7);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 var label = 0;
 var $1;
 var $s;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=$3;
 $s=$4;
 var $5=$s;
 var $6=__ZNK12_GLOBAL__N_114__libcpp_nmstr5c_strEv($5);
 return $6;
}
function __ZNSt12length_errorD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt11logic_errorD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=__ZNK12_GLOBAL__N_114__libcpp_nmstr5countEv($2);
   var $4=(tempValue=HEAP32[(($3)>>2)],HEAP32[(($3)>>2)]=tempValue+-1,tempValue);
   var $5=((($4)-(1))|0);
   var $6=(($5)|(0)) < 0;
   if ($6) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $8=(($2)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=((($9)-(12))|0);
   var $11=(($10)|(0))==0;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   __ZdaPv($10);
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrC2EPKc($this, $msg) {
 var label = 0;
 var $1;
 var $2;
 var $len;
 var $c;
 $1=$this;
 $2=$msg;
 var $3=$1;
 var $4=$2;
 var $5=_strlen($4);
 $len=$5;
 var $6=$len;
 var $7=((($6)+(1))|0);
 var $8=((($7)+(12))|0);
 var $9=__Znaj($8);
 var $10=(($3)|0);
 HEAP32[(($10)>>2)]=$9;
 var $11=(($3)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12;
 $c=$13;
 var $14=$len;
 var $15=$c;
 var $16=(($15+4)|0);
 HEAP32[(($16)>>2)]=$14;
 var $17=$c;
 var $18=(($17)|0);
 HEAP32[(($18)>>2)]=$14;
 var $19=(($3)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+12)|0);
 HEAP32[(($19)>>2)]=$21;
 var $22=__ZNK12_GLOBAL__N_114__libcpp_nmstr5countEv($3);
 HEAP32[(($22)>>2)]=0;
 var $23=__ZNK12_GLOBAL__N_114__libcpp_nmstr5c_strEv($3);
 var $24=$2;
 var $25=_strcpy($23, $24);
 return;
}
function __ZNSt9exceptionD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt9exceptionD2Ev($2);
 return;
}
// WARNING: content after a branch in a label, line: 15541
function __ZNKSt9exception4whatEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return ((2664)|0);
}
function __ZNSt3__114error_categoryD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZNSt3__114error_categoryC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((12952)|0);
 return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg_result, $this, $ev) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 $7=$this;
 $8=$ev;
 var $9=$7;
 var $10=$8;
 $4=$agg_result;
 $5=$10;
 $6=$9;
 var $11=$4;
 var $12=$5;
 var $13=$6;
 $1=$11;
 $2=$12;
 $3=$13;
 var $14=$1;
 var $15=(($14)|0);
 var $16=$2;
 HEAP32[(($15)>>2)]=$16;
 var $17=(($14+4)|0);
 var $18=$3;
 HEAP32[(($17)>>2)]=$18;
 return;
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this, $code, $condition) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   $5=$this;
   $6=$code;
   $7=$condition;
   var $8=$5;
   var $9=$6;
   $4=$9;
   var $10=$4;
   var $11=(($10+4)|0);
   var $12=HEAP32[(($11)>>2)];
   $1=$8;
   $2=$12;
   var $13=$1;
   var $14=$2;
   var $15=(($13)|(0))==(($14)|(0));
   if ($15) { label = 2; break; } else { var $24 = 0;label = 3; break; }
  case 2: 
   var $17=$6;
   $3=$17;
   var $18=$3;
   var $19=(($18)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$7;
   var $22=(($20)|(0))==(($21)|(0));
   var $24 = $22;label = 3; break;
  case 3: 
   var $24;
   return $24;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt9exceptionD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt9exceptionD1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__114error_categoryD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__114error_categoryD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this, $code, $condition) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12=__stackBase__;
   $9=$this;
   $10=$code;
   $11=$condition;
   var $13=$9;
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15+12)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$10;
   FUNCTION_TABLE[$17]($12, $13, $18);
   var $19=$11;
   $7=$12;
   $8=$19;
   var $20=$7;
   $6=$20;
   var $21=$6;
   var $22=(($21+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$8;
   $1=$24;
   var $25=$1;
   var $26=(($25+4)|0);
   var $27=HEAP32[(($26)>>2)];
   $2=$23;
   $3=$27;
   var $28=$2;
   var $29=$3;
   var $30=(($28)|(0))==(($29)|(0));
   if ($30) { label = 2; break; } else { var $41 = 0;label = 3; break; }
  case 2: 
   var $32=$7;
   $4=$32;
   var $33=$4;
   var $34=(($33)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$8;
   $5=$36;
   var $37=$5;
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($35)|(0))==(($39)|(0));
   var $41 = $40;label = 3; break;
  case 3: 
   var $41;
   STACKTOP = __stackBase__;
   return $41;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__112__do_message7messageEi($agg_result, $this, $ev) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 $10=$this;
 $11=$ev;
 var $12=$10;
 var $13=$11;
 var $14=_strerror($13);
 $8=$agg_result;
 $9=$14;
 var $15=$8;
 var $16=$9;
 $6=$15;
 $7=$16;
 var $17=$6;
 var $18=$17;
 var $19=(($17)|0);
 $5=$19;
 var $20=$5;
 $4=$20;
 var $21=$4;
 var $22=$21;
 $3=$22;
 var $23=$3;
 var $24=$23;
 $2=$24;
 var $25=$2;
 var $26=(($23)|0);
 var $27=$7;
 var $28=$7;
 $1=$28;
 var $29=$1;
 var $30=_strlen($29);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($17, $27, $30);
 return;
}
function __ZNKSt3__110error_code7messageEv($agg_result, $this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+24)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($2)|0);
 var $10=HEAP32[(($9)>>2)];
 FUNCTION_TABLE[$8]($agg_result, $4, $10);
 return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result, $ec, $what_arg) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61=__stackBase__;
   var $62;
   var $63;
   $60=$ec;
   var $64=$60;
   $59=$64;
   var $65=$59;
   var $66=(($65)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|(0))!=0;
   if ($68) { label = 2; break; } else { label = 17; break; }
  case 2: 
   $13=$what_arg;
   var $70=$13;
   $12=$70;
   var $71=$12;
   $11=$71;
   var $72=$11;
   var $73=(($72)|0);
   $10=$73;
   var $74=$10;
   var $75=$74;
   $9=$75;
   var $76=$9;
   var $77=(($76)|0);
   var $78=(($77)|0);
   var $79=$78;
   var $80=(($79)|0);
   var $81=$80;
   var $82=HEAP8[($81)];
   var $83=(($82)&(255));
   var $84=$83 & 1;
   var $85=(($84)|(0))!=0;
   if ($85) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $5=$71;
   var $87=$5;
   var $88=(($87)|0);
   $4=$88;
   var $89=$4;
   var $90=$89;
   $3=$90;
   var $91=$3;
   var $92=(($91)|0);
   var $93=(($92)|0);
   var $94=$93;
   var $95=(($94+4)|0);
   var $96=HEAP32[(($95)>>2)];
   var $111 = $96;label = 5; break;
  case 4: 
   $8=$71;
   var $98=$8;
   var $99=(($98)|0);
   $7=$99;
   var $100=$7;
   var $101=$100;
   $6=$101;
   var $102=$6;
   var $103=(($102)|0);
   var $104=(($103)|0);
   var $105=$104;
   var $106=(($105)|0);
   var $107=$106;
   var $108=HEAP8[($107)];
   var $109=(($108)&(255));
   var $110=$109 >> 1;
   var $111 = $110;label = 5; break;
  case 5: 
   var $111;
   var $112=(($111)|(0))==0;
   if ($112) { label = 7; break; } else { label = 6; break; }
  case 6: 
   $1=$what_arg;
   $2=((2680)|0);
   var $114=$1;
   var $115=$2;
   var $116=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($114, $115);
   label = 7; break;
  case 7: 
   var $118=$60;
   __ZNKSt3__110error_code7messageEv($61, $118);
   $37=$what_arg;
   $38=$61;
   var $119=$37;
   var $120=$38;
   $35=$119;
   $36=$120;
   var $121=$35;
   var $122=$36;
   $34=$122;
   var $123=$34;
   $33=$123;
   var $124=$33;
   $32=$124;
   var $125=$32;
   var $126=(($125)|0);
   $31=$126;
   var $127=$31;
   var $128=$127;
   $30=$128;
   var $129=$30;
   var $130=(($129)|0);
   var $131=(($130)|0);
   var $132=$131;
   var $133=(($132)|0);
   var $134=$133;
   var $135=HEAP8[($134)];
   var $136=(($135)&(255));
   var $137=$136 & 1;
   var $138=(($137)|(0))!=0;
   if ($138) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $26=$124;
   var $140=$26;
   var $141=(($140)|0);
   $25=$141;
   var $142=$25;
   var $143=$142;
   $24=$143;
   var $144=$24;
   var $145=(($144)|0);
   var $146=(($145)|0);
   var $147=$146;
   var $148=(($147+8)|0);
   var $149=HEAP32[(($148)>>2)];
   var $161 = $149;label = 10; break;
  case 9: 
   $29=$124;
   var $151=$29;
   var $152=(($151)|0);
   $28=$152;
   var $153=$28;
   var $154=$153;
   $27=$154;
   var $155=$27;
   var $156=(($155)|0);
   var $157=(($156)|0);
   var $158=$157;
   var $159=(($158+1)|0);
   var $160=(($159)|0);
   var $161 = $160;label = 10; break;
  case 10: 
   var $161;
   var $162=$36;
   $23=$162;
   var $163=$23;
   $22=$163;
   var $164=$22;
   var $165=(($164)|0);
   $21=$165;
   var $166=$21;
   var $167=$166;
   $20=$167;
   var $168=$20;
   var $169=(($168)|0);
   var $170=(($169)|0);
   var $171=$170;
   var $172=(($171)|0);
   var $173=$172;
   var $174=HEAP8[($173)];
   var $175=(($174)&(255));
   var $176=$175 & 1;
   var $177=(($176)|(0))!=0;
   if ($177) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $16=$163;
   var $179=$16;
   var $180=(($179)|0);
   $15=$180;
   var $181=$15;
   var $182=$181;
   $14=$182;
   var $183=$14;
   var $184=(($183)|0);
   var $185=(($184)|0);
   var $186=$185;
   var $187=(($186+4)|0);
   var $188=HEAP32[(($187)>>2)];
   var $203 = $188;label = 13; break;
  case 12: 
   $19=$163;
   var $190=$19;
   var $191=(($190)|0);
   $18=$191;
   var $192=$18;
   var $193=$192;
   $17=$193;
   var $194=$17;
   var $195=(($194)|0);
   var $196=(($195)|0);
   var $197=$196;
   var $198=(($197)|0);
   var $199=$198;
   var $200=HEAP8[($199)];
   var $201=(($200)&(255));
   var $202=$201 >> 1;
   var $203 = $202;label = 13; break;
  case 13: 
   var $203;
   var $204 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($121, $161, $203) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 16; break; }
  case 14: 
   label = 15; break;
  case 15: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($61);
   label = 17; break;
  case 16: 
   var $207$0 = ___cxa_find_matching_catch(-1, -1); $207$1 = tempRet0;
   var $208=$207$0;
   $62=$208;
   var $209=$207$1;
   $63=$209;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($61);
   label = 21; break;
  case 17: 
   $39=$what_arg;
   var $211=$39;
   $57=$agg_result;
   $58=$211;
   var $212=$57;
   var $213=$58;
   $55=$212;
   $56=$213;
   var $214=$55;
   var $215=$214;
   var $216=(($214)|0);
   var $217=$56;
   var $218=(($217)|0);
   $54=$218;
   var $219=$54;
   $49=$216;
   $50=$219;
   var $220=$49;
   var $221=$50;
   $47=$220;
   $48=$221;
   var $222=$47;
   var $223=$222;
   var $224=$48;
   $46=$224;
   var $225=$46;
   var $226=$225;
   $44=$223;
   $45=$226;
   var $227=$44;
   var $228=$227;
   var $229=$45;
   $43=$229;
   var $230=$43;
   var $231=$230;
   $40=$231;
   var $232=$40;
   var $233=(($227)|0);
   var $234=$45;
   $41=$234;
   var $235=$41;
   var $236=(($235)|0);
   $42=$236;
   var $237=$42;
   var $238=$233;
   var $239=$237;
   assert(12 % 1 === 0);HEAP32[(($238)>>2)]=HEAP32[(($239)>>2)];HEAP32[((($238)+(4))>>2)]=HEAP32[((($239)+(4))>>2)];HEAP32[((($238)+(8))>>2)]=HEAP32[((($239)+(8))>>2)];
   var $240=$56;
   $53=$240;
   var $241=$53;
   var $242=(($241)|0);
   $52=$242;
   var $243=$52;
   var $244=$243;
   $51=$244;
   var $245=$51;
   var $246=(($245)|0);
   var $247=(($246)|0);
   var $248=$247;
   var $249=(($248)|0);
   $__a_i_i_i=$249;
   $__i_i_i_i=0;
   label = 18; break;
  case 18: 
   var $251=$__i_i_i_i;
   var $252=(($251)>>>(0)) < 3;
   if ($252) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $254=$__i_i_i_i;
   var $255=$__a_i_i_i;
   var $256=(($255+($254<<2))|0);
   HEAP32[(($256)>>2)]=0;
   var $257=$__i_i_i_i;
   var $258=((($257)+(1))|0);
   $__i_i_i_i=$258;
   label = 18; break;
  case 20: 
   STACKTOP = __stackBase__;
   return;
  case 21: 
   var $260=$62;
   var $261=$63;
   var $262$0=$260;
   var $262$1=0;
   var $263$0=$262$0;
   var $263$1=$261;
   ___resumeException($263$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this, $ec, $what_arg) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ec; $ec = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ec)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ec)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12=__stackBase__;
   var $13=(__stackBase__)+(16);
   var $14;
   var $15;
   $10=$this;
   $11=$what_arg;
   var $16=$10;
   var $17=$16;
   var $18=$11;
   $8=$13;
   $9=$18;
   var $19=$8;
   var $20=$9;
   $6=$19;
   $7=$20;
   var $21=$6;
   var $22=$21;
   var $23=(($21)|0);
   $5=$23;
   var $24=$5;
   $4=$24;
   var $25=$4;
   var $26=$25;
   $3=$26;
   var $27=$3;
   var $28=$27;
   $2=$28;
   var $29=$2;
   var $30=(($27)|0);
   var $31=$7;
   var $32=$7;
   $1=$32;
   var $33=$1;
   var $34=_strlen($33);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($21, $31, $34);
   (function() { try { __THREW__ = 0; return __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($12, $ec, $13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($17, $12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
  case 3: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($12);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($13);
   var $37=$16;
   HEAP32[(($37)>>2)]=((13224)|0);
   var $38=(($16+8)|0);
   var $39=$38;
   var $40=$ec;
   assert(8 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];
   STACKTOP = __stackBase__;
   return;
  case 4: 
   var $42$0 = ___cxa_find_matching_catch(-1, -1); $42$1 = tempRet0;
   var $43=$42$0;
   $14=$43;
   var $44=$42$1;
   $15=$44;
   label = 6; break;
  case 5: 
   var $46$0 = ___cxa_find_matching_catch(-1, -1); $46$1 = tempRet0;
   var $47=$46$0;
   $14=$47;
   var $48=$46$1;
   $15=$48;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($12);
   label = 6; break;
  case 6: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($13);
   label = 7; break;
  case 7: 
   var $51=$14;
   var $52=$15;
   var $53$0=$51;
   var $53$1=0;
   var $54$0=$53$0;
   var $54$1=$52;
   ___resumeException($54$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_errorD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__112system_errorD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt13runtime_errorD2Ev($3);
 return;
}
function __ZNSt3__112__do_messageD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__112__do_messageD2Ev($2);
 return;
}
function __ZNSt3__112__do_messageD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__112__do_messageD1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this, $__str) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$__str;
 var $3=$1;
 var $4=$2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3, $4);
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag, $arg, $func) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   $1=$flag;
   $2=$arg;
   $3=$func;
   var $6;
   label = 2; break;
  case 2: 
   var $8=$1;
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==1;
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $12=_pthread_cond_wait(19304, 19296);
   label = 2; break;
  case 4: 
   var $14=$1;
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))==0;
   if ($16) { label = 5; break; } else { label = 19; break; }
  case 5: 
   var $18=$1;
   HEAP32[(($18)>>2)]=1;
   var $19 = (function() { try { __THREW__ = 0; return _pthread_mutex_unlock(19296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 11; break; }
  case 6: 
   var $21=$3;
   var $22=$2;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$21]($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $24 = (function() { try { __THREW__ = 0; return _pthread_mutex_lock(19296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $26=$1;
   HEAP32[(($26)>>2)]=-1;
   var $27 = (function() { try { __THREW__ = 0; return _pthread_mutex_unlock(19296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $29 = (function() { try { __THREW__ = 0; return _pthread_cond_broadcast(19304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 11; break; }
  case 10: 
   label = 18; break;
  case 11: 
   var $32$0 = ___cxa_find_matching_catch(-1, -1,0); $32$1 = tempRet0;
   var $33=$32$0;
   $4=$33;
   var $34=$32$1;
   $5=$34;
   label = 12; break;
  case 12: 
   var $36=$4;
   var $37=___cxa_begin_catch($36);
   var $38 = (function() { try { __THREW__ = 0; return _pthread_mutex_lock(19296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 16; break; }
  case 13: 
   var $40=$1;
   HEAP32[(($40)>>2)]=0;
   var $41 = (function() { try { __THREW__ = 0; return _pthread_mutex_unlock(19296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $43 = (function() { try { __THREW__ = 0; return _pthread_cond_broadcast(19304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 16; break; }
  case 15: 
   (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 16; break; }
  case 16: 
   var $46$0 = ___cxa_find_matching_catch(-1, -1); $46$1 = tempRet0;
   var $47=$46$0;
   $4=$47;
   var $48=$46$1;
   $5=$48;
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 22; break; }
  case 17: 
   label = 21; break;
  case 18: 
   label = 20; break;
  case 19: 
   var $52;
   label = 20; break;
  case 20: 
   return;
  case 21: 
   var $55=$4;
   var $56=$5;
   var $57$0=$55;
   var $57$1=0;
   var $58$0=$57$0;
   var $58$1=$56;
   ___resumeException($58$0)
  case 22: 
   var $60$0 = ___cxa_find_matching_catch(-1, -1,0); $60$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 23: 
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   $5=$this;
   var $8=$5;
   var $9=___cxa_allocate_exception(8);
   var $10=$9;
   $3=$10;
   $4=((424)|0);
   var $11=$3;
   var $12=$4;
   $1=$11;
   $2=$12;
   var $13=$1;
   var $14=$13;
   var $15=$2;
   (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($14, $15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $16=$13;
   HEAP32[(($16)>>2)]=((11008)|0);
   label = 3; break;
  case 3: 
   ___cxa_throw($9, 17392, (94));
   throw "Reached an unreachable!";
  case 4: 
   var $19$0 = ___cxa_find_matching_catch(-1, -1); $19$1 = tempRet0;
   var $20=$19$0;
   $6=$20;
   var $21=$19$1;
   $7=$21;
   ___cxa_free_exception($9);
   label = 5; break;
  case 5: 
   var $24=$6;
   var $25=$7;
   var $26$0=$24;
   var $26$1=0;
   var $27$0=$26$0;
   var $27$1=$25;
   ___resumeException($27$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this, $__str) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3=__stackBase__;
   var $4;
   var $5;
   var $6=(__stackBase__)+(8);
   var $__t21_i=(__stackBase__)+(16);
   var $7;
   var $8=(__stackBase__)+(24);
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23=(__stackBase__)+(32);
   var $24;
   var $25=(__stackBase__)+(40);
   var $26=(__stackBase__)+(48);
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32=(__stackBase__)+(56);
   $30=$this;
   $31=$__str;
   var $33=$30;
   var $34=$33;
   var $35=(($33)|0);
   var $36=$31;
   $29=$36;
   var $37=$29;
   var $38=(($37)|0);
   $28=$38;
   var $39=$28;
   var $40=$39;
   $27=$40;
   var $41=$27;
   var $42=$41;
   $24=$42;
   var $43=$26;
   var $44=$24;
   var $tmp_i=$23;
   var $tmp1_i=$25;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $22=$44;
   var $45=$22;
   var $tmp=$8;
   var $tmp1=$32;
   assert(1 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];
   $7=$35;
   var $46=$7;
   var $tmp_i2=$__t21_i;
   var $tmp2_i=$8;
   assert(1 % 1 === 0);HEAP8[($tmp_i2)]=HEAP8[($tmp2_i)];
   $5=$46;
   var $47=$5;
   var $48=$47;
   $4=$__t21_i;
   var $49=$4;
   var $tmp_i_i=$3;
   var $tmp1_i_i=$6;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $2=$48;
   var $50=$2;
   var $51=$50;
   $1=$3;
   var $52=$1;
   var $53=(($50)|0);
   var $54=$31;
   $11=$54;
   var $55=$11;
   var $56=(($55)|0);
   $10=$56;
   var $57=$10;
   var $58=$57;
   $9=$58;
   var $59=$9;
   var $60=(($59)|0);
   var $61=(($60)|0);
   var $62=$61;
   var $63=(($62)|0);
   var $64=$63;
   var $65=HEAP8[($64)];
   var $66=(($65)&(255));
   var $67=$66 & 1;
   var $68=(($67)|(0))!=0;
   if ($68) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $70=(($33)|0);
   $13=$70;
   var $71=$13;
   var $72=$71;
   $12=$72;
   var $73=$12;
   var $74=(($73)|0);
   var $75=(($74)|0);
   var $76=$75;
   var $77=$31;
   var $78=(($77)|0);
   $15=$78;
   var $79=$15;
   var $80=$79;
   $14=$80;
   var $81=$14;
   var $82=(($81)|0);
   var $83=(($82)|0);
   var $84=$83;
   var $85=$76;
   var $86=$84;
   assert(12 % 1 === 0);HEAP32[(($85)>>2)]=HEAP32[(($86)>>2)];HEAP32[((($85)+(4))>>2)]=HEAP32[((($86)+(4))>>2)];HEAP32[((($85)+(8))>>2)]=HEAP32[((($86)+(8))>>2)];
   label = 4; break;
  case 3: 
   var $88=$31;
   $18=$88;
   var $89=$18;
   var $90=(($89)|0);
   $17=$90;
   var $91=$17;
   var $92=$91;
   $16=$92;
   var $93=$16;
   var $94=(($93)|0);
   var $95=(($94)|0);
   var $96=$95;
   var $97=(($96+8)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$31;
   $21=$99;
   var $100=$21;
   var $101=(($100)|0);
   $20=$101;
   var $102=$20;
   var $103=$102;
   $19=$103;
   var $104=$19;
   var $105=(($104)|0);
   var $106=(($105)|0);
   var $107=$106;
   var $108=(($107+4)|0);
   var $109=HEAP32[(($108)>>2)];
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($33, $98, $109);
   label = 4; break;
  case 4: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, $__s, $__sz) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37=__stackBase__;
   var $38;
   var $39=(__stackBase__)+(8);
   var $40=(__stackBase__)+(16);
   var $41;
   var $42;
   var $43;
   var $44;
   var $__m_i;
   var $45;
   var $46;
   var $47;
   var $__p;
   var $__cap;
   var $48=(__stackBase__)+(24);
   $45=$this;
   $46=$__s;
   $47=$__sz;
   var $49=$45;
   var $50=$47;
   $44=$49;
   var $51=$44;
   $43=$51;
   var $52=$43;
   var $53=(($52)|0);
   $42=$53;
   var $54=$42;
   var $55=$54;
   $41=$55;
   var $56=$41;
   var $57=$56;
   $38=$57;
   var $58=$40;
   var $59=$38;
   var $tmp_i_i=$37;
   var $tmp1_i_i=$39;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $36=$59;
   var $60=$36;
   $35=$60;
   var $61=$35;
   $__m_i=-1;
   var $62=$__m_i;
   var $63=((($62)-(1))|0);
   var $64=(($50)>>>(0)) > (($63)>>>(0));
   if ($64) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $66=$49;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($66);
   label = 3; break;
  case 3: 
   var $68=$47;
   var $69=(($68)>>>(0)) < 11;
   if ($69) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $71=$47;
   $11=$49;
   $12=$71;
   var $72=$11;
   var $73=$12;
   var $74=$73 << 1;
   var $75=(($74) & 255);
   var $76=(($72)|0);
   $10=$76;
   var $77=$10;
   var $78=$77;
   $9=$78;
   var $79=$9;
   var $80=(($79)|0);
   var $81=(($80)|0);
   var $82=$81;
   var $83=(($82)|0);
   var $84=$83;
   HEAP8[($84)]=$75;
   $3=$49;
   var $85=$3;
   var $86=(($85)|0);
   $2=$86;
   var $87=$2;
   var $88=$87;
   $1=$88;
   var $89=$1;
   var $90=(($89)|0);
   var $91=(($90)|0);
   var $92=$91;
   var $93=(($92+1)|0);
   var $94=(($93)|0);
   $__p=$94;
   label = 9; break;
  case 5: 
   var $96=$47;
   $5=$96;
   var $97=$5;
   var $98=(($97)>>>(0)) < 11;
   if ($98) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $106 = 11;label = 8; break;
  case 7: 
   var $101=$5;
   var $102=((($101)+(1))|0);
   $4=$102;
   var $103=$4;
   var $104=((($103)+(15))|0);
   var $105=$104 & -16;
   var $106 = $105;label = 8; break;
  case 8: 
   var $106;
   var $107=((($106)-(1))|0);
   $__cap=$107;
   $8=$49;
   var $108=$8;
   var $109=(($108)|0);
   $7=$109;
   var $110=$7;
   var $111=$110;
   $6=$111;
   var $112=$6;
   var $113=$112;
   var $114=$__cap;
   var $115=((($114)+(1))|0);
   $16=$113;
   $17=$115;
   var $116=$16;
   var $117=$17;
   $13=$116;
   $14=$117;
   $15=0;
   var $118=$13;
   var $119=$14;
   var $120=__Znwj($119);
   $__p=$120;
   var $121=$__p;
   $20=$49;
   $21=$121;
   var $122=$20;
   var $123=$21;
   var $124=(($122)|0);
   $19=$124;
   var $125=$19;
   var $126=$125;
   $18=$126;
   var $127=$18;
   var $128=(($127)|0);
   var $129=(($128)|0);
   var $130=$129;
   var $131=(($130+8)|0);
   HEAP32[(($131)>>2)]=$123;
   var $132=$__cap;
   var $133=((($132)+(1))|0);
   $24=$49;
   $25=$133;
   var $134=$24;
   var $135=$25;
   var $136=1 | $135;
   var $137=(($134)|0);
   $23=$137;
   var $138=$23;
   var $139=$138;
   $22=$139;
   var $140=$22;
   var $141=(($140)|0);
   var $142=(($141)|0);
   var $143=$142;
   var $144=(($143)|0);
   HEAP32[(($144)>>2)]=$136;
   var $145=$47;
   $28=$49;
   $29=$145;
   var $146=$28;
   var $147=$29;
   var $148=(($146)|0);
   $27=$148;
   var $149=$27;
   var $150=$149;
   $26=$150;
   var $151=$26;
   var $152=(($151)|0);
   var $153=(($152)|0);
   var $154=$153;
   var $155=(($154+4)|0);
   HEAP32[(($155)>>2)]=$147;
   label = 9; break;
  case 9: 
   var $157=$__p;
   var $158=$46;
   var $159=$47;
   $30=$157;
   $31=$158;
   $32=$159;
   var $160=$30;
   var $161=$31;
   var $162=$32;
   assert($162 % 1 === 0);(_memcpy($160, $161, $162)|0);
   var $163=$47;
   var $164=$__p;
   var $165=(($164+$163)|0);
   HEAP8[($48)]=0;
   $33=$165;
   $34=$48;
   var $166=$34;
   var $167=HEAP8[($166)];
   var $168=$33;
   HEAP8[($168)]=$167;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this, $__n, $__c) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38=__stackBase__;
   var $39;
   var $40=(__stackBase__)+(8);
   var $41=(__stackBase__)+(16);
   var $42;
   var $43;
   var $44;
   var $45;
   var $__m_i;
   var $46;
   var $47;
   var $48;
   var $__p;
   var $__cap;
   var $49=(__stackBase__)+(24);
   $46=$this;
   $47=$__n;
   $48=$__c;
   var $50=$46;
   var $51=$47;
   $45=$50;
   var $52=$45;
   $44=$52;
   var $53=$44;
   var $54=(($53)|0);
   $43=$54;
   var $55=$43;
   var $56=$55;
   $42=$56;
   var $57=$42;
   var $58=$57;
   $39=$58;
   var $59=$41;
   var $60=$39;
   var $tmp_i_i=$38;
   var $tmp1_i_i=$40;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $37=$60;
   var $61=$37;
   $36=$61;
   var $62=$36;
   $__m_i=-1;
   var $63=$__m_i;
   var $64=((($63)-(1))|0);
   var $65=(($51)>>>(0)) > (($64)>>>(0));
   if ($65) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $67=$50;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($67);
   label = 3; break;
  case 3: 
   var $69=$47;
   var $70=(($69)>>>(0)) < 11;
   if ($70) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $72=$47;
   $11=$50;
   $12=$72;
   var $73=$11;
   var $74=$12;
   var $75=$74 << 1;
   var $76=(($75) & 255);
   var $77=(($73)|0);
   $10=$77;
   var $78=$10;
   var $79=$78;
   $9=$79;
   var $80=$9;
   var $81=(($80)|0);
   var $82=(($81)|0);
   var $83=$82;
   var $84=(($83)|0);
   var $85=$84;
   HEAP8[($85)]=$76;
   $3=$50;
   var $86=$3;
   var $87=(($86)|0);
   $2=$87;
   var $88=$2;
   var $89=$88;
   $1=$89;
   var $90=$1;
   var $91=(($90)|0);
   var $92=(($91)|0);
   var $93=$92;
   var $94=(($93+1)|0);
   var $95=(($94)|0);
   $__p=$95;
   label = 9; break;
  case 5: 
   var $97=$47;
   $5=$97;
   var $98=$5;
   var $99=(($98)>>>(0)) < 11;
   if ($99) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $107 = 11;label = 8; break;
  case 7: 
   var $102=$5;
   var $103=((($102)+(1))|0);
   $4=$103;
   var $104=$4;
   var $105=((($104)+(15))|0);
   var $106=$105 & -16;
   var $107 = $106;label = 8; break;
  case 8: 
   var $107;
   var $108=((($107)-(1))|0);
   $__cap=$108;
   $8=$50;
   var $109=$8;
   var $110=(($109)|0);
   $7=$110;
   var $111=$7;
   var $112=$111;
   $6=$112;
   var $113=$6;
   var $114=$113;
   var $115=$__cap;
   var $116=((($115)+(1))|0);
   $16=$114;
   $17=$116;
   var $117=$16;
   var $118=$17;
   $13=$117;
   $14=$118;
   $15=0;
   var $119=$13;
   var $120=$14;
   var $121=__Znwj($120);
   $__p=$121;
   var $122=$__p;
   $20=$50;
   $21=$122;
   var $123=$20;
   var $124=$21;
   var $125=(($123)|0);
   $19=$125;
   var $126=$19;
   var $127=$126;
   $18=$127;
   var $128=$18;
   var $129=(($128)|0);
   var $130=(($129)|0);
   var $131=$130;
   var $132=(($131+8)|0);
   HEAP32[(($132)>>2)]=$124;
   var $133=$__cap;
   var $134=((($133)+(1))|0);
   $24=$50;
   $25=$134;
   var $135=$24;
   var $136=$25;
   var $137=1 | $136;
   var $138=(($135)|0);
   $23=$138;
   var $139=$23;
   var $140=$139;
   $22=$140;
   var $141=$22;
   var $142=(($141)|0);
   var $143=(($142)|0);
   var $144=$143;
   var $145=(($144)|0);
   HEAP32[(($145)>>2)]=$137;
   var $146=$47;
   $28=$50;
   $29=$146;
   var $147=$28;
   var $148=$29;
   var $149=(($147)|0);
   $27=$149;
   var $150=$27;
   var $151=$150;
   $26=$151;
   var $152=$26;
   var $153=(($152)|0);
   var $154=(($153)|0);
   var $155=$154;
   var $156=(($155+4)|0);
   HEAP32[(($156)>>2)]=$148;
   label = 9; break;
  case 9: 
   var $158=$__p;
   var $159=$47;
   var $160=$48;
   $31=$158;
   $32=$159;
   $33=$160;
   var $161=$31;
   var $162=$33;
   $30=$162;
   var $163=$30;
   var $164=(($163)&(255));
   var $165=(($164) & 255);
   var $166=$32;
   _memset($161, $165, $166);
   var $167=$47;
   var $168=$__p;
   var $169=(($168+$167)|0);
   HEAP8[($49)]=0;
   $34=$169;
   $35=$49;
   var $170=$35;
   var $171=HEAP8[($170)];
   var $172=$34;
   HEAP8[($172)]=$171;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15=__stackBase__;
   var $16;
   var $17=(__stackBase__)+(8);
   var $18=(__stackBase__)+(16);
   var $19;
   var $20;
   var $21;
   var $22;
   var $__m_i;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46=(__stackBase__)+(24);
   var $47;
   var $48;
   var $49=(__stackBase__)+(32);
   var $50;
   var $51;
   var $52;
   var $__sz;
   var $__p;
   var $__cap;
   var $53=(__stackBase__)+(40);
   $50=$this;
   $51=$__first;
   $52=$__last;
   var $54=$50;
   var $55=$51;
   var $56=$52;
   $47=$55;
   $48=$56;
   var $57=$47;
   var $58=$48;
   var $tmp_i=$46;
   var $tmp1_i=$49;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $44=$57;
   $45=$58;
   var $59=$45;
   var $60=$44;
   var $61=$59;
   var $62=$60;
   var $63=((($61)-($62))|0);
   $__sz=$63;
   var $64=$__sz;
   $22=$54;
   var $65=$22;
   $21=$65;
   var $66=$21;
   var $67=(($66)|0);
   $20=$67;
   var $68=$20;
   var $69=$68;
   $19=$69;
   var $70=$19;
   var $71=$70;
   $16=$71;
   var $72=$18;
   var $73=$16;
   var $tmp_i_i=$15;
   var $tmp1_i_i=$17;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $14=$73;
   var $74=$14;
   $13=$74;
   var $75=$13;
   $__m_i=-1;
   var $76=$__m_i;
   var $77=((($76)-(1))|0);
   var $78=(($64)>>>(0)) > (($77)>>>(0));
   if ($78) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $80=$54;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($80);
   label = 3; break;
  case 3: 
   var $82=$__sz;
   var $83=(($82)>>>(0)) < 11;
   if ($83) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $85=$__sz;
   $3=$54;
   $4=$85;
   var $86=$3;
   var $87=$4;
   var $88=$87 << 1;
   var $89=(($88) & 255);
   var $90=(($86)|0);
   $2=$90;
   var $91=$2;
   var $92=$91;
   $1=$92;
   var $93=$1;
   var $94=(($93)|0);
   var $95=(($94)|0);
   var $96=$95;
   var $97=(($96)|0);
   var $98=$97;
   HEAP8[($98)]=$89;
   $7=$54;
   var $99=$7;
   var $100=(($99)|0);
   $6=$100;
   var $101=$6;
   var $102=$101;
   $5=$102;
   var $103=$5;
   var $104=(($103)|0);
   var $105=(($104)|0);
   var $106=$105;
   var $107=(($106+1)|0);
   var $108=(($107)|0);
   $__p=$108;
   label = 9; break;
  case 5: 
   var $110=$__sz;
   $9=$110;
   var $111=$9;
   var $112=(($111)>>>(0)) < 11;
   if ($112) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $120 = 11;label = 8; break;
  case 7: 
   var $115=$9;
   var $116=((($115)+(1))|0);
   $8=$116;
   var $117=$8;
   var $118=((($117)+(15))|0);
   var $119=$118 & -16;
   var $120 = $119;label = 8; break;
  case 8: 
   var $120;
   var $121=((($120)-(1))|0);
   $__cap=$121;
   $12=$54;
   var $122=$12;
   var $123=(($122)|0);
   $11=$123;
   var $124=$11;
   var $125=$124;
   $10=$125;
   var $126=$10;
   var $127=$126;
   var $128=$__cap;
   var $129=((($128)+(1))|0);
   $26=$127;
   $27=$129;
   var $130=$26;
   var $131=$27;
   $23=$130;
   $24=$131;
   $25=0;
   var $132=$23;
   var $133=$24;
   var $134=__Znwj($133);
   $__p=$134;
   var $135=$__p;
   $30=$54;
   $31=$135;
   var $136=$30;
   var $137=$31;
   var $138=(($136)|0);
   $29=$138;
   var $139=$29;
   var $140=$139;
   $28=$140;
   var $141=$28;
   var $142=(($141)|0);
   var $143=(($142)|0);
   var $144=$143;
   var $145=(($144+8)|0);
   HEAP32[(($145)>>2)]=$137;
   var $146=$__cap;
   var $147=((($146)+(1))|0);
   $34=$54;
   $35=$147;
   var $148=$34;
   var $149=$35;
   var $150=1 | $149;
   var $151=(($148)|0);
   $33=$151;
   var $152=$33;
   var $153=$152;
   $32=$153;
   var $154=$32;
   var $155=(($154)|0);
   var $156=(($155)|0);
   var $157=$156;
   var $158=(($157)|0);
   HEAP32[(($158)>>2)]=$150;
   var $159=$__sz;
   $38=$54;
   $39=$159;
   var $160=$38;
   var $161=$39;
   var $162=(($160)|0);
   $37=$162;
   var $163=$37;
   var $164=$163;
   $36=$164;
   var $165=$36;
   var $166=(($165)|0);
   var $167=(($166)|0);
   var $168=$167;
   var $169=(($168+4)|0);
   HEAP32[(($169)>>2)]=$161;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $172=$51;
   var $173=$52;
   var $174=(($172)|(0))!=(($173)|(0));
   if ($174) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $176=$__p;
   var $177=$51;
   $40=$176;
   $41=$177;
   var $178=$41;
   var $179=HEAP8[($178)];
   var $180=$40;
   HEAP8[($180)]=$179;
   label = 12; break;
  case 12: 
   var $182=$51;
   var $183=(($182+1)|0);
   $51=$183;
   var $184=$__p;
   var $185=(($184+1)|0);
   $__p=$185;
   label = 10; break;
  case 13: 
   var $187=$__p;
   HEAP8[($53)]=0;
   $42=$187;
   $43=$53;
   var $188=$43;
   var $189=HEAP8[($188)];
   var $190=$42;
   HEAP8[($190)]=$189;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 return;
}
// WARNING: content after a branch in a label, line: 16622
// WARNING: content after a branch in a label, line: 16624
// WARNING: content after a branch in a label, line: 16625
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   $20=$this;
   var $21=$20;
   $19=$21;
   var $22=$19;
   label = 2; break;
  case 2: 
   $12=$21;
   var $24=$12;
   var $25=(($24)|0);
   $11=$25;
   var $26=$11;
   var $27=$26;
   $10=$27;
   var $28=$10;
   var $29=(($28)|0);
   var $30=(($29)|0);
   var $31=$30;
   var $32=(($31)|0);
   var $33=$32;
   var $34=HEAP8[($33)];
   var $35=(($34)&(255));
   var $36=$35 & 1;
   var $37=(($36)|(0))!=0;
   if ($37) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $3=$21;
   var $39=$3;
   var $40=(($39)|0);
   $2=$40;
   var $41=$2;
   var $42=$41;
   $1=$42;
   var $43=$1;
   var $44=$43;
   $6=$21;
   var $45=$6;
   var $46=(($45)|0);
   $5=$46;
   var $47=$5;
   var $48=$47;
   $4=$48;
   var $49=$4;
   var $50=(($49)|0);
   var $51=(($50)|0);
   var $52=$51;
   var $53=(($52+8)|0);
   var $54=HEAP32[(($53)>>2)];
   $9=$21;
   var $55=$9;
   var $56=(($55)|0);
   $8=$56;
   var $57=$8;
   var $58=$57;
   $7=$58;
   var $59=$7;
   var $60=(($59)|0);
   var $61=(($60)|0);
   var $62=$61;
   var $63=(($62)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=$64 & -2;
   $16=$44;
   $17=$54;
   $18=$65;
   var $66=$16;
   var $67=$17;
   var $68=$18;
   $13=$66;
   $14=$67;
   $15=$68;
   var $69=$13;
   var $70=$14;
   __ZdlPv($70);
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $2=$this;
 $3=$__s;
 var $4=$2;
 var $5=$3;
 var $6=$3;
 $1=$6;
 var $7=$1;
 var $8=_strlen($7);
 var $9=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($4, $5, $8);
 return $9;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this, $__s, $__n) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $__cap;
   var $__p;
   var $51=__stackBase__;
   var $__sz;
   $48=$this;
   $49=$__s;
   $50=$__n;
   var $52=$48;
   $47=$52;
   var $53=$47;
   $46=$53;
   var $54=$46;
   var $55=(($54)|0);
   $45=$55;
   var $56=$45;
   var $57=$56;
   $44=$57;
   var $58=$44;
   var $59=(($58)|0);
   var $60=(($59)|0);
   var $61=$60;
   var $62=(($61)|0);
   var $63=$62;
   var $64=HEAP8[($63)];
   var $65=(($64)&(255));
   var $66=$65 & 1;
   var $67=(($66)|(0))!=0;
   if ($67) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $43=$53;
   var $69=$43;
   var $70=(($69)|0);
   $42=$70;
   var $71=$42;
   var $72=$71;
   $41=$72;
   var $73=$41;
   var $74=(($73)|0);
   var $75=(($74)|0);
   var $76=$75;
   var $77=(($76)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$78 & -2;
   var $81 = $79;label = 4; break;
  case 3: 
   var $81 = 11;label = 4; break;
  case 4: 
   var $81;
   var $82=((($81)-(1))|0);
   $__cap=$82;
   var $83=$__cap;
   var $84=$50;
   var $85=(($83)>>>(0)) >= (($84)>>>(0));
   if ($85) { label = 5; break; } else { label = 12; break; }
  case 5: 
   $40=$52;
   var $87=$40;
   $39=$87;
   var $88=$39;
   var $89=(($88)|0);
   $38=$89;
   var $90=$38;
   var $91=$90;
   $37=$91;
   var $92=$37;
   var $93=(($92)|0);
   var $94=(($93)|0);
   var $95=$94;
   var $96=(($95)|0);
   var $97=$96;
   var $98=HEAP8[($97)];
   var $99=(($98)&(255));
   var $100=$99 & 1;
   var $101=(($100)|(0))!=0;
   if ($101) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $33=$87;
   var $103=$33;
   var $104=(($103)|0);
   $32=$104;
   var $105=$32;
   var $106=$105;
   $31=$106;
   var $107=$31;
   var $108=(($107)|0);
   var $109=(($108)|0);
   var $110=$109;
   var $111=(($110+8)|0);
   var $112=HEAP32[(($111)>>2)];
   var $124 = $112;label = 8; break;
  case 7: 
   $36=$87;
   var $114=$36;
   var $115=(($114)|0);
   $35=$115;
   var $116=$35;
   var $117=$116;
   $34=$117;
   var $118=$34;
   var $119=(($118)|0);
   var $120=(($119)|0);
   var $121=$120;
   var $122=(($121+1)|0);
   var $123=(($122)|0);
   var $124 = $123;label = 8; break;
  case 8: 
   var $124;
   $__p=$124;
   var $125=$__p;
   var $126=$49;
   var $127=$50;
   $1=$125;
   $2=$126;
   $3=$127;
   var $128=$1;
   var $129=$2;
   var $130=$3;
   _memmove($128, $129, $130, 1, 0);
   var $131=$50;
   var $132=$__p;
   var $133=(($132+$131)|0);
   HEAP8[($51)]=0;
   $4=$133;
   $5=$51;
   var $134=$5;
   var $135=HEAP8[($134)];
   var $136=$4;
   HEAP8[($136)]=$135;
   var $137=$50;
   $17=$52;
   $18=$137;
   var $138=$17;
   $16=$138;
   var $139=$16;
   var $140=(($139)|0);
   $15=$140;
   var $141=$15;
   var $142=$141;
   $14=$142;
   var $143=$14;
   var $144=(($143)|0);
   var $145=(($144)|0);
   var $146=$145;
   var $147=(($146)|0);
   var $148=$147;
   var $149=HEAP8[($148)];
   var $150=(($149)&(255));
   var $151=$150 & 1;
   var $152=(($151)|(0))!=0;
   if ($152) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $154=$18;
   $8=$138;
   $9=$154;
   var $155=$8;
   var $156=$9;
   var $157=(($155)|0);
   $7=$157;
   var $158=$7;
   var $159=$158;
   $6=$159;
   var $160=$6;
   var $161=(($160)|0);
   var $162=(($161)|0);
   var $163=$162;
   var $164=(($163+4)|0);
   HEAP32[(($164)>>2)]=$156;
   label = 11; break;
  case 10: 
   var $166=$18;
   $12=$138;
   $13=$166;
   var $167=$12;
   var $168=$13;
   var $169=$168 << 1;
   var $170=(($169) & 255);
   var $171=(($167)|0);
   $11=$171;
   var $172=$11;
   var $173=$172;
   $10=$173;
   var $174=$10;
   var $175=(($174)|0);
   var $176=(($175)|0);
   var $177=$176;
   var $178=(($177)|0);
   var $179=$178;
   HEAP8[($179)]=$170;
   label = 11; break;
  case 11: 
   var $180=$50;
   $19=$52;
   $20=$180;
   var $181=$19;
   label = 16; break;
  case 12: 
   $30=$52;
   var $183=$30;
   $29=$183;
   var $184=$29;
   var $185=(($184)|0);
   $28=$185;
   var $186=$28;
   var $187=$186;
   $27=$187;
   var $188=$27;
   var $189=(($188)|0);
   var $190=(($189)|0);
   var $191=$190;
   var $192=(($191)|0);
   var $193=$192;
   var $194=HEAP8[($193)];
   var $195=(($194)&(255));
   var $196=$195 & 1;
   var $197=(($196)|(0))!=0;
   if ($197) { label = 13; break; } else { label = 14; break; }
  case 13: 
   $23=$183;
   var $199=$23;
   var $200=(($199)|0);
   $22=$200;
   var $201=$22;
   var $202=$201;
   $21=$202;
   var $203=$21;
   var $204=(($203)|0);
   var $205=(($204)|0);
   var $206=$205;
   var $207=(($206+4)|0);
   var $208=HEAP32[(($207)>>2)];
   var $223 = $208;label = 15; break;
  case 14: 
   $26=$183;
   var $210=$26;
   var $211=(($210)|0);
   $25=$211;
   var $212=$25;
   var $213=$212;
   $24=$213;
   var $214=$24;
   var $215=(($214)|0);
   var $216=(($215)|0);
   var $217=$216;
   var $218=(($217)|0);
   var $219=$218;
   var $220=HEAP8[($219)];
   var $221=(($220)&(255));
   var $222=$221 >> 1;
   var $223 = $222;label = 15; break;
  case 15: 
   var $223;
   $__sz=$223;
   var $224=$__cap;
   var $225=$50;
   var $226=$__cap;
   var $227=((($225)-($226))|0);
   var $228=$__sz;
   var $229=$__sz;
   var $230=$50;
   var $231=$49;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($52, $224, $227, $228, 0, $229, $230, $231);
   label = 16; break;
  case 16: 
   STACKTOP = __stackBase__;
   return $52;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this, $__n, $__c) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26=__stackBase__;
   var $27=(__stackBase__)+(8);
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $__sz;
   $38=$this;
   $39=$__n;
   $40=$__c;
   var $41=$38;
   $37=$41;
   var $42=$37;
   $36=$42;
   var $43=$36;
   var $44=(($43)|0);
   $35=$44;
   var $45=$35;
   var $46=$45;
   $34=$46;
   var $47=$34;
   var $48=(($47)|0);
   var $49=(($48)|0);
   var $50=$49;
   var $51=(($50)|0);
   var $52=$51;
   var $53=HEAP8[($52)];
   var $54=(($53)&(255));
   var $55=$54 & 1;
   var $56=(($55)|(0))!=0;
   if ($56) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $30=$42;
   var $58=$30;
   var $59=(($58)|0);
   $29=$59;
   var $60=$29;
   var $61=$60;
   $28=$61;
   var $62=$28;
   var $63=(($62)|0);
   var $64=(($63)|0);
   var $65=$64;
   var $66=(($65+4)|0);
   var $67=HEAP32[(($66)>>2)];
   var $82 = $67;label = 4; break;
  case 3: 
   $33=$42;
   var $69=$33;
   var $70=(($69)|0);
   $32=$70;
   var $71=$32;
   var $72=$71;
   $31=$72;
   var $73=$31;
   var $74=(($73)|0);
   var $75=(($74)|0);
   var $76=$75;
   var $77=(($76)|0);
   var $78=$77;
   var $79=HEAP8[($78)];
   var $80=(($79)&(255));
   var $81=$80 >> 1;
   var $82 = $81;label = 4; break;
  case 4: 
   var $82;
   $__sz=$82;
   var $83=$39;
   var $84=$__sz;
   var $85=(($83)>>>(0)) > (($84)>>>(0));
   if ($85) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $87=$39;
   var $88=$__sz;
   var $89=((($87)-($88))|0);
   var $90=$40;
   var $91=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($41, $89, $90);
   label = 10; break;
  case 6: 
   var $93=$39;
   $24=$41;
   $25=$93;
   var $94=$24;
   $23=$94;
   var $95=$23;
   var $96=(($95)|0);
   $22=$96;
   var $97=$22;
   var $98=$97;
   $21=$98;
   var $99=$21;
   var $100=(($99)|0);
   var $101=(($100)|0);
   var $102=$101;
   var $103=(($102)|0);
   var $104=$103;
   var $105=HEAP8[($104)];
   var $106=(($105)&(255));
   var $107=$106 & 1;
   var $108=(($107)|(0))!=0;
   if ($108) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $3=$94;
   var $110=$3;
   var $111=(($110)|0);
   $2=$111;
   var $112=$2;
   var $113=$112;
   $1=$113;
   var $114=$1;
   var $115=(($114)|0);
   var $116=(($115)|0);
   var $117=$116;
   var $118=(($117+8)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=$25;
   var $121=(($119+$120)|0);
   HEAP8[($26)]=0;
   $4=$121;
   $5=$26;
   var $122=$5;
   var $123=HEAP8[($122)];
   var $124=$4;
   HEAP8[($124)]=$123;
   var $125=$25;
   $8=$94;
   $9=$125;
   var $126=$8;
   var $127=$9;
   var $128=(($126)|0);
   $7=$128;
   var $129=$7;
   var $130=$129;
   $6=$130;
   var $131=$6;
   var $132=(($131)|0);
   var $133=(($132)|0);
   var $134=$133;
   var $135=(($134+4)|0);
   HEAP32[(($135)>>2)]=$127;
   label = 9; break;
  case 8: 
   $12=$94;
   var $137=$12;
   var $138=(($137)|0);
   $11=$138;
   var $139=$11;
   var $140=$139;
   $10=$140;
   var $141=$10;
   var $142=(($141)|0);
   var $143=(($142)|0);
   var $144=$143;
   var $145=(($144+1)|0);
   var $146=(($145)|0);
   var $147=$25;
   var $148=(($146+$147)|0);
   HEAP8[($27)]=0;
   $13=$148;
   $14=$27;
   var $149=$14;
   var $150=HEAP8[($149)];
   var $151=$13;
   HEAP8[($151)]=$150;
   var $152=$25;
   $17=$94;
   $18=$152;
   var $153=$17;
   var $154=$18;
   var $155=$154 << 1;
   var $156=(($155) & 255);
   var $157=(($153)|0);
   $16=$157;
   var $158=$16;
   var $159=$158;
   $15=$159;
   var $160=$15;
   var $161=(($160)|0);
   var $162=(($161)|0);
   var $163=$162;
   var $164=(($163)|0);
   var $165=$164;
   HEAP8[($165)]=$156;
   label = 9; break;
  case 9: 
   var $166=$25;
   $19=$94;
   $20=$166;
   var $167=$19;
   label = 10; break;
  case 10: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n, $__c) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $__cap;
   var $__sz;
   var $__p;
   var $50=__stackBase__;
   $47=$this;
   $48=$__n;
   $49=$__c;
   var $51=$47;
   var $52=$48;
   var $53=(($52)|(0))!=0;
   if ($53) { label = 2; break; } else { label = 17; break; }
  case 2: 
   $46=$51;
   var $55=$46;
   $45=$55;
   var $56=$45;
   var $57=(($56)|0);
   $44=$57;
   var $58=$44;
   var $59=$58;
   $43=$59;
   var $60=$43;
   var $61=(($60)|0);
   var $62=(($61)|0);
   var $63=$62;
   var $64=(($63)|0);
   var $65=$64;
   var $66=HEAP8[($65)];
   var $67=(($66)&(255));
   var $68=$67 & 1;
   var $69=(($68)|(0))!=0;
   if ($69) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $42=$55;
   var $71=$42;
   var $72=(($71)|0);
   $41=$72;
   var $73=$41;
   var $74=$73;
   $40=$74;
   var $75=$40;
   var $76=(($75)|0);
   var $77=(($76)|0);
   var $78=$77;
   var $79=(($78)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=$80 & -2;
   var $83 = $81;label = 5; break;
  case 4: 
   var $83 = 11;label = 5; break;
  case 5: 
   var $83;
   var $84=((($83)-(1))|0);
   $__cap=$84;
   $10=$51;
   var $85=$10;
   $9=$85;
   var $86=$9;
   var $87=(($86)|0);
   $8=$87;
   var $88=$8;
   var $89=$88;
   $7=$89;
   var $90=$7;
   var $91=(($90)|0);
   var $92=(($91)|0);
   var $93=$92;
   var $94=(($93)|0);
   var $95=$94;
   var $96=HEAP8[($95)];
   var $97=(($96)&(255));
   var $98=$97 & 1;
   var $99=(($98)|(0))!=0;
   if ($99) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $3=$85;
   var $101=$3;
   var $102=(($101)|0);
   $2=$102;
   var $103=$2;
   var $104=$103;
   $1=$104;
   var $105=$1;
   var $106=(($105)|0);
   var $107=(($106)|0);
   var $108=$107;
   var $109=(($108+4)|0);
   var $110=HEAP32[(($109)>>2)];
   var $125 = $110;label = 8; break;
  case 7: 
   $6=$85;
   var $112=$6;
   var $113=(($112)|0);
   $5=$113;
   var $114=$5;
   var $115=$114;
   $4=$115;
   var $116=$4;
   var $117=(($116)|0);
   var $118=(($117)|0);
   var $119=$118;
   var $120=(($119)|0);
   var $121=$120;
   var $122=HEAP8[($121)];
   var $123=(($122)&(255));
   var $124=$123 >> 1;
   var $125 = $124;label = 8; break;
  case 8: 
   var $125;
   $__sz=$125;
   var $126=$__cap;
   var $127=$__sz;
   var $128=((($126)-($127))|0);
   var $129=$48;
   var $130=(($128)>>>(0)) < (($129)>>>(0));
   if ($130) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $132=$__cap;
   var $133=$__sz;
   var $134=$48;
   var $135=((($133)+($134))|0);
   var $136=$__cap;
   var $137=((($135)-($136))|0);
   var $138=$__sz;
   var $139=$__sz;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($51, $132, $137, $138, $139, 0, 0);
   label = 10; break;
  case 10: 
   $20=$51;
   var $141=$20;
   $19=$141;
   var $142=$19;
   var $143=(($142)|0);
   $18=$143;
   var $144=$18;
   var $145=$144;
   $17=$145;
   var $146=$17;
   var $147=(($146)|0);
   var $148=(($147)|0);
   var $149=$148;
   var $150=(($149)|0);
   var $151=$150;
   var $152=HEAP8[($151)];
   var $153=(($152)&(255));
   var $154=$153 & 1;
   var $155=(($154)|(0))!=0;
   if ($155) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $13=$141;
   var $157=$13;
   var $158=(($157)|0);
   $12=$158;
   var $159=$12;
   var $160=$159;
   $11=$160;
   var $161=$11;
   var $162=(($161)|0);
   var $163=(($162)|0);
   var $164=$163;
   var $165=(($164+8)|0);
   var $166=HEAP32[(($165)>>2)];
   var $178 = $166;label = 13; break;
  case 12: 
   $16=$141;
   var $168=$16;
   var $169=(($168)|0);
   $15=$169;
   var $170=$15;
   var $171=$170;
   $14=$171;
   var $172=$14;
   var $173=(($172)|0);
   var $174=(($173)|0);
   var $175=$174;
   var $176=(($175+1)|0);
   var $177=(($176)|0);
   var $178 = $177;label = 13; break;
  case 13: 
   var $178;
   $__p=$178;
   var $179=$__p;
   var $180=$__sz;
   var $181=(($179+$180)|0);
   var $182=$48;
   var $183=$49;
   $22=$181;
   $23=$182;
   $24=$183;
   var $184=$22;
   var $185=$24;
   $21=$185;
   var $186=$21;
   var $187=(($186)&(255));
   var $188=(($187) & 255);
   var $189=$23;
   _memset($184, $188, $189);
   var $190=$48;
   var $191=$__sz;
   var $192=((($191)+($190))|0);
   $__sz=$192;
   var $193=$__sz;
   $36=$51;
   $37=$193;
   var $194=$36;
   $35=$194;
   var $195=$35;
   var $196=(($195)|0);
   $34=$196;
   var $197=$34;
   var $198=$197;
   $33=$198;
   var $199=$33;
   var $200=(($199)|0);
   var $201=(($200)|0);
   var $202=$201;
   var $203=(($202)|0);
   var $204=$203;
   var $205=HEAP8[($204)];
   var $206=(($205)&(255));
   var $207=$206 & 1;
   var $208=(($207)|(0))!=0;
   if ($208) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $210=$37;
   $27=$194;
   $28=$210;
   var $211=$27;
   var $212=$28;
   var $213=(($211)|0);
   $26=$213;
   var $214=$26;
   var $215=$214;
   $25=$215;
   var $216=$25;
   var $217=(($216)|0);
   var $218=(($217)|0);
   var $219=$218;
   var $220=(($219+4)|0);
   HEAP32[(($220)>>2)]=$212;
   label = 16; break;
  case 15: 
   var $222=$37;
   $31=$194;
   $32=$222;
   var $223=$31;
   var $224=$32;
   var $225=$224 << 1;
   var $226=(($225) & 255);
   var $227=(($223)|0);
   $30=$227;
   var $228=$30;
   var $229=$228;
   $29=$229;
   var $230=$29;
   var $231=(($230)|0);
   var $232=(($231)|0);
   var $233=$232;
   var $234=(($233)|0);
   var $235=$234;
   HEAP8[($235)]=$226;
   label = 16; break;
  case 16: 
   var $236=$__sz;
   var $237=$__p;
   var $238=(($237+$236)|0);
   HEAP8[($50)]=0;
   $38=$238;
   $39=$50;
   var $239=$39;
   var $240=HEAP8[($239)];
   var $241=$38;
   HEAP8[($241)]=$240;
   label = 17; break;
  case 17: 
   STACKTOP = __stackBase__;
   return $51;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this, $__res_arg) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17=__stackBase__;
   var $18;
   var $19;
   var $20=(__stackBase__)+(8);
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105=(__stackBase__)+(16);
   var $106;
   var $107=(__stackBase__)+(24);
   var $108=(__stackBase__)+(32);
   var $109;
   var $110;
   var $111;
   var $112;
   var $__m_i;
   var $113;
   var $114=(__stackBase__)+(40);
   var $__cap;
   var $__sz=(__stackBase__)+(48);
   var $__new_data;
   var $__p;
   var $__was_long;
   var $__now_long;
   var $115;
   var $116;
   var $117;
   $113=$this;
   HEAP32[(($114)>>2)]=$__res_arg;
   var $118=$113;
   var $119=HEAP32[(($114)>>2)];
   $112=$118;
   var $120=$112;
   $111=$120;
   var $121=$111;
   var $122=(($121)|0);
   $110=$122;
   var $123=$110;
   var $124=$123;
   $109=$124;
   var $125=$109;
   var $126=$125;
   $106=$126;
   var $127=$108;
   var $128=$106;
   var $tmp_i_i=$105;
   var $tmp1_i_i=$107;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $104=$128;
   var $129=$104;
   $103=$129;
   var $130=$103;
   $__m_i=-1;
   var $131=$__m_i;
   var $132=((($131)-(1))|0);
   var $133=(($119)>>>(0)) > (($132)>>>(0));
   if ($133) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $135=$118;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($135);
   label = 3; break;
  case 3: 
   $79=$118;
   var $137=$79;
   $78=$137;
   var $138=$78;
   var $139=(($138)|0);
   $77=$139;
   var $140=$77;
   var $141=$140;
   $76=$141;
   var $142=$76;
   var $143=(($142)|0);
   var $144=(($143)|0);
   var $145=$144;
   var $146=(($145)|0);
   var $147=$146;
   var $148=HEAP8[($147)];
   var $149=(($148)&(255));
   var $150=$149 & 1;
   var $151=(($150)|(0))!=0;
   if ($151) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $75=$137;
   var $153=$75;
   var $154=(($153)|0);
   $74=$154;
   var $155=$74;
   var $156=$155;
   $73=$156;
   var $157=$73;
   var $158=(($157)|0);
   var $159=(($158)|0);
   var $160=$159;
   var $161=(($160)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=$162 & -2;
   var $165 = $163;label = 6; break;
  case 5: 
   var $165 = 11;label = 6; break;
  case 6: 
   var $165;
   var $166=((($165)-(1))|0);
   $__cap=$166;
   $38=$118;
   var $167=$38;
   $37=$167;
   var $168=$37;
   var $169=(($168)|0);
   $36=$169;
   var $170=$36;
   var $171=$170;
   $35=$171;
   var $172=$35;
   var $173=(($172)|0);
   var $174=(($173)|0);
   var $175=$174;
   var $176=(($175)|0);
   var $177=$176;
   var $178=HEAP8[($177)];
   var $179=(($178)&(255));
   var $180=$179 & 1;
   var $181=(($180)|(0))!=0;
   if ($181) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $31=$167;
   var $183=$31;
   var $184=(($183)|0);
   $30=$184;
   var $185=$30;
   var $186=$185;
   $29=$186;
   var $187=$29;
   var $188=(($187)|0);
   var $189=(($188)|0);
   var $190=$189;
   var $191=(($190+4)|0);
   var $192=HEAP32[(($191)>>2)];
   var $207 = $192;label = 9; break;
  case 8: 
   $34=$167;
   var $194=$34;
   var $195=(($194)|0);
   $33=$195;
   var $196=$33;
   var $197=$196;
   $32=$197;
   var $198=$32;
   var $199=(($198)|0);
   var $200=(($199)|0);
   var $201=$200;
   var $202=(($201)|0);
   var $203=$202;
   var $204=HEAP8[($203)];
   var $205=(($204)&(255));
   var $206=$205 >> 1;
   var $207 = $206;label = 9; break;
  case 9: 
   var $207;
   HEAP32[(($__sz)>>2)]=$207;
   $18=$114;
   $19=$__sz;
   var $208=$18;
   var $209=$19;
   var $tmp_i=$17;
   var $tmp1_i=$20;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $15=$208;
   $16=$209;
   var $210=$15;
   var $211=$16;
   $12=$17;
   $13=$210;
   $14=$211;
   var $212=$12;
   var $213=$13;
   var $214=HEAP32[(($213)>>2)];
   var $215=$14;
   var $216=HEAP32[(($215)>>2)];
   var $217=(($214)>>>(0)) < (($216)>>>(0));
   if ($217) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $219=$16;
   var $222 = $219;label = 12; break;
  case 11: 
   var $221=$15;
   var $222 = $221;label = 12; break;
  case 12: 
   var $222;
   var $223=HEAP32[(($222)>>2)];
   HEAP32[(($114)>>2)]=$223;
   var $224=HEAP32[(($114)>>2)];
   $2=$224;
   var $225=$2;
   var $226=(($225)>>>(0)) < 11;
   if ($226) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $234 = 11;label = 15; break;
  case 14: 
   var $229=$2;
   var $230=((($229)+(1))|0);
   $1=$230;
   var $231=$1;
   var $232=((($231)+(15))|0);
   var $233=$232 & -16;
   var $234 = $233;label = 15; break;
  case 15: 
   var $234;
   var $235=((($234)-(1))|0);
   HEAP32[(($114)>>2)]=$235;
   var $236=HEAP32[(($114)>>2)];
   var $237=$__cap;
   var $238=(($236)|(0))!=(($237)|(0));
   if ($238) { label = 16; break; } else { label = 39; break; }
  case 16: 
   var $240=HEAP32[(($114)>>2)];
   var $241=(($240)|(0))==10;
   if ($241) { label = 17; break; } else { label = 18; break; }
  case 17: 
   $__was_long=1;
   $__now_long=0;
   $5=$118;
   var $243=$5;
   var $244=(($243)|0);
   $4=$244;
   var $245=$4;
   var $246=$245;
   $3=$246;
   var $247=$3;
   var $248=(($247)|0);
   var $249=(($248)|0);
   var $250=$249;
   var $251=(($250+1)|0);
   var $252=(($251)|0);
   $__new_data=$252;
   $8=$118;
   var $253=$8;
   var $254=(($253)|0);
   $7=$254;
   var $255=$7;
   var $256=$255;
   $6=$256;
   var $257=$6;
   var $258=(($257)|0);
   var $259=(($258)|0);
   var $260=$259;
   var $261=(($260+8)|0);
   var $262=HEAP32[(($261)>>2)];
   $__p=$262;
   label = 30; break;
  case 18: 
   var $264=HEAP32[(($114)>>2)];
   var $265=$__cap;
   var $266=(($264)>>>(0)) > (($265)>>>(0));
   if ($266) { label = 19; break; } else { label = 20; break; }
  case 19: 
   $11=$118;
   var $268=$11;
   var $269=(($268)|0);
   $10=$269;
   var $270=$10;
   var $271=$270;
   $9=$271;
   var $272=$9;
   var $273=$272;
   var $274=HEAP32[(($114)>>2)];
   var $275=((($274)+(1))|0);
   $24=$273;
   $25=$275;
   var $276=$24;
   var $277=$25;
   $21=$276;
   $22=$277;
   $23=0;
   var $278=$21;
   var $279=$22;
   var $280=__Znwj($279);
   $__new_data=$280;
   label = 26; break;
  case 20: 
   $28=$118;
   var $282=$28;
   var $283=(($282)|0);
   $27=$283;
   var $284=$27;
   var $285=$284;
   $26=$285;
   var $286=$26;
   var $287=$286;
   var $288=HEAP32[(($114)>>2)];
   var $289=((($288)+(1))|0);
   $42=$287;
   $43=$289;
   var $290=$42;
   var $291=$43;
   $39=$290;
   $40=$291;
   $41=0;
   var $292=$39;
   var $293=$40;
   var $294 = (function() { try { __THREW__ = 0; return __Znwj($293) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 23; break; }
  case 21: 
   label = 22; break;
  case 22: 
   $__new_data=$294;
   label = 25; break;
  case 23: 
   var $297$0 = ___cxa_find_matching_catch(-1, -1,0); $297$1 = tempRet0;
   var $298=$297$0;
   $115=$298;
   var $299=$297$1;
   $116=$299;
   label = 24; break;
  case 24: 
   var $301=$115;
   var $302=___cxa_begin_catch($301);
   $117=1;
   ___cxa_end_catch();
   label = 39; break;
  case 25: 
   label = 26; break;
  case 26: 
   $__now_long=1;
   $46=$118;
   var $305=$46;
   var $306=(($305)|0);
   $45=$306;
   var $307=$45;
   var $308=$307;
   $44=$308;
   var $309=$44;
   var $310=(($309)|0);
   var $311=(($310)|0);
   var $312=$311;
   var $313=(($312)|0);
   var $314=$313;
   var $315=HEAP8[($314)];
   var $316=(($315)&(255));
   var $317=$316 & 1;
   var $318=(($317)|(0))!=0;
   var $319=(($318)&(1));
   $__was_long=$319;
   $56=$118;
   var $320=$56;
   $55=$320;
   var $321=$55;
   var $322=(($321)|0);
   $54=$322;
   var $323=$54;
   var $324=$323;
   $53=$324;
   var $325=$53;
   var $326=(($325)|0);
   var $327=(($326)|0);
   var $328=$327;
   var $329=(($328)|0);
   var $330=$329;
   var $331=HEAP8[($330)];
   var $332=(($331)&(255));
   var $333=$332 & 1;
   var $334=(($333)|(0))!=0;
   if ($334) { label = 27; break; } else { label = 28; break; }
  case 27: 
   $49=$320;
   var $336=$49;
   var $337=(($336)|0);
   $48=$337;
   var $338=$48;
   var $339=$338;
   $47=$339;
   var $340=$47;
   var $341=(($340)|0);
   var $342=(($341)|0);
   var $343=$342;
   var $344=(($343+8)|0);
   var $345=HEAP32[(($344)>>2)];
   var $357 = $345;label = 29; break;
  case 28: 
   $52=$320;
   var $347=$52;
   var $348=(($347)|0);
   $51=$348;
   var $349=$51;
   var $350=$349;
   $50=$350;
   var $351=$50;
   var $352=(($351)|0);
   var $353=(($352)|0);
   var $354=$353;
   var $355=(($354+1)|0);
   var $356=(($355)|0);
   var $357 = $356;label = 29; break;
  case 29: 
   var $357;
   $__p=$357;
   label = 30; break;
  case 30: 
   var $359=$__new_data;
   var $360=$__p;
   $66=$118;
   var $361=$66;
   $65=$361;
   var $362=$65;
   var $363=(($362)|0);
   $64=$363;
   var $364=$64;
   var $365=$364;
   $63=$365;
   var $366=$63;
   var $367=(($366)|0);
   var $368=(($367)|0);
   var $369=$368;
   var $370=(($369)|0);
   var $371=$370;
   var $372=HEAP8[($371)];
   var $373=(($372)&(255));
   var $374=$373 & 1;
   var $375=(($374)|(0))!=0;
   if ($375) { label = 31; break; } else { label = 32; break; }
  case 31: 
   $59=$361;
   var $377=$59;
   var $378=(($377)|0);
   $58=$378;
   var $379=$58;
   var $380=$379;
   $57=$380;
   var $381=$57;
   var $382=(($381)|0);
   var $383=(($382)|0);
   var $384=$383;
   var $385=(($384+4)|0);
   var $386=HEAP32[(($385)>>2)];
   var $401 = $386;label = 33; break;
  case 32: 
   $62=$361;
   var $388=$62;
   var $389=(($388)|0);
   $61=$389;
   var $390=$61;
   var $391=$390;
   $60=$391;
   var $392=$60;
   var $393=(($392)|0);
   var $394=(($393)|0);
   var $395=$394;
   var $396=(($395)|0);
   var $397=$396;
   var $398=HEAP8[($397)];
   var $399=(($398)&(255));
   var $400=$399 >> 1;
   var $401 = $400;label = 33; break;
  case 33: 
   var $401;
   var $402=((($401)+(1))|0);
   $67=$359;
   $68=$360;
   $69=$402;
   var $403=$67;
   var $404=$68;
   var $405=$69;
   assert($405 % 1 === 0);(_memcpy($403, $404, $405)|0);
   var $406=$__was_long;
   var $407=(($406) & 1);
   if ($407) { label = 34; break; } else { label = 35; break; }
  case 34: 
   $72=$118;
   var $409=$72;
   var $410=(($409)|0);
   $71=$410;
   var $411=$71;
   var $412=$411;
   $70=$412;
   var $413=$70;
   var $414=$413;
   var $415=$__p;
   var $416=$__cap;
   var $417=((($416)+(1))|0);
   $83=$414;
   $84=$415;
   $85=$417;
   var $418=$83;
   var $419=$84;
   var $420=$85;
   $80=$418;
   $81=$419;
   $82=$420;
   var $421=$80;
   var $422=$81;
   __ZdlPv($422);
   label = 35; break;
  case 35: 
   var $424=$__now_long;
   var $425=(($424) & 1);
   if ($425) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $427=HEAP32[(($114)>>2)];
   var $428=((($427)+(1))|0);
   $88=$118;
   $89=$428;
   var $429=$88;
   var $430=$89;
   var $431=1 | $430;
   var $432=(($429)|0);
   $87=$432;
   var $433=$87;
   var $434=$433;
   $86=$434;
   var $435=$86;
   var $436=(($435)|0);
   var $437=(($436)|0);
   var $438=$437;
   var $439=(($438)|0);
   HEAP32[(($439)>>2)]=$431;
   var $440=HEAP32[(($__sz)>>2)];
   $92=$118;
   $93=$440;
   var $441=$92;
   var $442=$93;
   var $443=(($441)|0);
   $91=$443;
   var $444=$91;
   var $445=$444;
   $90=$445;
   var $446=$90;
   var $447=(($446)|0);
   var $448=(($447)|0);
   var $449=$448;
   var $450=(($449+4)|0);
   HEAP32[(($450)>>2)]=$442;
   var $451=$__new_data;
   $96=$118;
   $97=$451;
   var $452=$96;
   var $453=$97;
   var $454=(($452)|0);
   $95=$454;
   var $455=$95;
   var $456=$455;
   $94=$456;
   var $457=$94;
   var $458=(($457)|0);
   var $459=(($458)|0);
   var $460=$459;
   var $461=(($460+8)|0);
   HEAP32[(($461)>>2)]=$453;
   label = 38; break;
  case 37: 
   var $463=HEAP32[(($__sz)>>2)];
   $100=$118;
   $101=$463;
   var $464=$100;
   var $465=$101;
   var $466=$465 << 1;
   var $467=(($466) & 255);
   var $468=(($464)|0);
   $99=$468;
   var $469=$99;
   var $470=$469;
   $98=$470;
   var $471=$98;
   var $472=(($471)|0);
   var $473=(($472)|0);
   var $474=$473;
   var $475=(($474)|0);
   var $476=$475;
   HEAP8[($476)]=$467;
   label = 38; break;
  case 38: 
   $102=$118;
   var $478=$102;
   label = 39; break;
  case 39: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this, $__s) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $2=$this;
 $3=$__s;
 var $4=$2;
 var $5=$3;
 var $6=$3;
 $1=$6;
 var $7=$1;
 var $8=_strlen($7);
 var $9=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($4, $5, $8);
 return $9;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46=__stackBase__;
   var $__cap;
   var $__sz;
   var $__p;
   var $47=(__stackBase__)+(8);
   $45=$this;
   HEAP8[($46)]=$__c;
   var $48=$45;
   $44=$48;
   var $49=$44;
   $43=$49;
   var $50=$43;
   var $51=(($50)|0);
   $42=$51;
   var $52=$42;
   var $53=$52;
   $41=$53;
   var $54=$41;
   var $55=(($54)|0);
   var $56=(($55)|0);
   var $57=$56;
   var $58=(($57)|0);
   var $59=$58;
   var $60=HEAP8[($59)];
   var $61=(($60)&(255));
   var $62=$61 & 1;
   var $63=(($62)|(0))!=0;
   if ($63) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $40=$49;
   var $65=$40;
   var $66=(($65)|0);
   $39=$66;
   var $67=$39;
   var $68=$67;
   $38=$68;
   var $69=$38;
   var $70=(($69)|0);
   var $71=(($70)|0);
   var $72=$71;
   var $73=(($72)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=$74 & -2;
   var $77 = $75;label = 4; break;
  case 3: 
   var $77 = 11;label = 4; break;
  case 4: 
   var $77;
   var $78=((($77)-(1))|0);
   $__cap=$78;
   $10=$48;
   var $79=$10;
   $9=$79;
   var $80=$9;
   var $81=(($80)|0);
   $8=$81;
   var $82=$8;
   var $83=$82;
   $7=$83;
   var $84=$7;
   var $85=(($84)|0);
   var $86=(($85)|0);
   var $87=$86;
   var $88=(($87)|0);
   var $89=$88;
   var $90=HEAP8[($89)];
   var $91=(($90)&(255));
   var $92=$91 & 1;
   var $93=(($92)|(0))!=0;
   if ($93) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $3=$79;
   var $95=$3;
   var $96=(($95)|0);
   $2=$96;
   var $97=$2;
   var $98=$97;
   $1=$98;
   var $99=$1;
   var $100=(($99)|0);
   var $101=(($100)|0);
   var $102=$101;
   var $103=(($102+4)|0);
   var $104=HEAP32[(($103)>>2)];
   var $119 = $104;label = 7; break;
  case 6: 
   $6=$79;
   var $106=$6;
   var $107=(($106)|0);
   $5=$107;
   var $108=$5;
   var $109=$108;
   $4=$109;
   var $110=$4;
   var $111=(($110)|0);
   var $112=(($111)|0);
   var $113=$112;
   var $114=(($113)|0);
   var $115=$114;
   var $116=HEAP8[($115)];
   var $117=(($116)&(255));
   var $118=$117 >> 1;
   var $119 = $118;label = 7; break;
  case 7: 
   var $119;
   $__sz=$119;
   var $120=$__sz;
   var $121=$__cap;
   var $122=(($120)|(0))==(($121)|(0));
   if ($122) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $124=$__cap;
   var $125=$__sz;
   var $126=$__sz;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($48, $124, 1, $125, $126, 0, 0);
   label = 9; break;
  case 9: 
   $20=$48;
   var $128=$20;
   $19=$128;
   var $129=$19;
   var $130=(($129)|0);
   $18=$130;
   var $131=$18;
   var $132=$131;
   $17=$132;
   var $133=$17;
   var $134=(($133)|0);
   var $135=(($134)|0);
   var $136=$135;
   var $137=(($136)|0);
   var $138=$137;
   var $139=HEAP8[($138)];
   var $140=(($139)&(255));
   var $141=$140 & 1;
   var $142=(($141)|(0))!=0;
   if ($142) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $13=$128;
   var $144=$13;
   var $145=(($144)|0);
   $12=$145;
   var $146=$12;
   var $147=$146;
   $11=$147;
   var $148=$11;
   var $149=(($148)|0);
   var $150=(($149)|0);
   var $151=$150;
   var $152=(($151+8)|0);
   var $153=HEAP32[(($152)>>2)];
   var $165 = $153;label = 12; break;
  case 11: 
   $16=$128;
   var $155=$16;
   var $156=(($155)|0);
   $15=$156;
   var $157=$15;
   var $158=$157;
   $14=$158;
   var $159=$14;
   var $160=(($159)|0);
   var $161=(($160)|0);
   var $162=$161;
   var $163=(($162+1)|0);
   var $164=(($163)|0);
   var $165 = $164;label = 12; break;
  case 12: 
   var $165;
   var $166=$__sz;
   var $167=(($165+$166)|0);
   $__p=$167;
   var $168=$__p;
   $21=$168;
   $22=$46;
   var $169=$22;
   var $170=HEAP8[($169)];
   var $171=$21;
   HEAP8[($171)]=$170;
   var $172=$__p;
   var $173=(($172+1)|0);
   $__p=$173;
   HEAP8[($47)]=0;
   $23=$173;
   $24=$47;
   var $174=$24;
   var $175=HEAP8[($174)];
   var $176=$23;
   HEAP8[($176)]=$175;
   var $177=$__sz;
   var $178=((($177)+(1))|0);
   $36=$48;
   $37=$178;
   var $179=$36;
   $35=$179;
   var $180=$35;
   var $181=(($180)|0);
   $34=$181;
   var $182=$34;
   var $183=$182;
   $33=$183;
   var $184=$33;
   var $185=(($184)|0);
   var $186=(($185)|0);
   var $187=$186;
   var $188=(($187)|0);
   var $189=$188;
   var $190=HEAP8[($189)];
   var $191=(($190)&(255));
   var $192=$191 & 1;
   var $193=(($192)|(0))!=0;
   if ($193) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $195=$37;
   $27=$179;
   $28=$195;
   var $196=$27;
   var $197=$28;
   var $198=(($196)|0);
   $26=$198;
   var $199=$26;
   var $200=$199;
   $25=$200;
   var $201=$25;
   var $202=(($201)|0);
   var $203=(($202)|0);
   var $204=$203;
   var $205=(($204+4)|0);
   HEAP32[(($205)>>2)]=$197;
   label = 15; break;
  case 14: 
   var $207=$37;
   $31=$179;
   $32=$207;
   var $208=$31;
   var $209=$32;
   var $210=$209 << 1;
   var $211=(($210) & 255);
   var $212=(($208)|0);
   $30=$212;
   var $213=$30;
   var $214=$213;
   $29=$214;
   var $215=$29;
   var $216=(($215)|0);
   var $217=(($216)|0);
   var $218=$217;
   var $219=(($218)|0);
   var $220=$219;
   HEAP8[($220)]=$211;
   label = 15; break;
  case 15: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this, $__s, $__n) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $__cap;
   var $__sz;
   var $__p;
   var $49=__stackBase__;
   $46=$this;
   $47=$__s;
   $48=$__n;
   var $50=$46;
   $45=$50;
   var $51=$45;
   $44=$51;
   var $52=$44;
   var $53=(($52)|0);
   $43=$53;
   var $54=$43;
   var $55=$54;
   $42=$55;
   var $56=$42;
   var $57=(($56)|0);
   var $58=(($57)|0);
   var $59=$58;
   var $60=(($59)|0);
   var $61=$60;
   var $62=HEAP8[($61)];
   var $63=(($62)&(255));
   var $64=$63 & 1;
   var $65=(($64)|(0))!=0;
   if ($65) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $41=$51;
   var $67=$41;
   var $68=(($67)|0);
   $40=$68;
   var $69=$40;
   var $70=$69;
   $39=$70;
   var $71=$39;
   var $72=(($71)|0);
   var $73=(($72)|0);
   var $74=$73;
   var $75=(($74)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$76 & -2;
   var $79 = $77;label = 4; break;
  case 3: 
   var $79 = 11;label = 4; break;
  case 4: 
   var $79;
   var $80=((($79)-(1))|0);
   $__cap=$80;
   $38=$50;
   var $81=$38;
   $37=$81;
   var $82=$37;
   var $83=(($82)|0);
   $36=$83;
   var $84=$36;
   var $85=$84;
   $35=$85;
   var $86=$35;
   var $87=(($86)|0);
   var $88=(($87)|0);
   var $89=$88;
   var $90=(($89)|0);
   var $91=$90;
   var $92=HEAP8[($91)];
   var $93=(($92)&(255));
   var $94=$93 & 1;
   var $95=(($94)|(0))!=0;
   if ($95) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $31=$81;
   var $97=$31;
   var $98=(($97)|0);
   $30=$98;
   var $99=$30;
   var $100=$99;
   $29=$100;
   var $101=$29;
   var $102=(($101)|0);
   var $103=(($102)|0);
   var $104=$103;
   var $105=(($104+4)|0);
   var $106=HEAP32[(($105)>>2)];
   var $121 = $106;label = 7; break;
  case 6: 
   $34=$81;
   var $108=$34;
   var $109=(($108)|0);
   $33=$109;
   var $110=$33;
   var $111=$110;
   $32=$111;
   var $112=$32;
   var $113=(($112)|0);
   var $114=(($113)|0);
   var $115=$114;
   var $116=(($115)|0);
   var $117=$116;
   var $118=HEAP8[($117)];
   var $119=(($118)&(255));
   var $120=$119 >> 1;
   var $121 = $120;label = 7; break;
  case 7: 
   var $121;
   $__sz=$121;
   var $122=$__cap;
   var $123=$__sz;
   var $124=((($122)-($123))|0);
   var $125=$48;
   var $126=(($124)>>>(0)) >= (($125)>>>(0));
   if ($126) { label = 8; break; } else { label = 17; break; }
  case 8: 
   var $128=$48;
   var $129=(($128)|(0))!=0;
   if ($129) { label = 9; break; } else { label = 16; break; }
  case 9: 
   $10=$50;
   var $131=$10;
   $9=$131;
   var $132=$9;
   var $133=(($132)|0);
   $8=$133;
   var $134=$8;
   var $135=$134;
   $7=$135;
   var $136=$7;
   var $137=(($136)|0);
   var $138=(($137)|0);
   var $139=$138;
   var $140=(($139)|0);
   var $141=$140;
   var $142=HEAP8[($141)];
   var $143=(($142)&(255));
   var $144=$143 & 1;
   var $145=(($144)|(0))!=0;
   if ($145) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $3=$131;
   var $147=$3;
   var $148=(($147)|0);
   $2=$148;
   var $149=$2;
   var $150=$149;
   $1=$150;
   var $151=$1;
   var $152=(($151)|0);
   var $153=(($152)|0);
   var $154=$153;
   var $155=(($154+8)|0);
   var $156=HEAP32[(($155)>>2)];
   var $168 = $156;label = 12; break;
  case 11: 
   $6=$131;
   var $158=$6;
   var $159=(($158)|0);
   $5=$159;
   var $160=$5;
   var $161=$160;
   $4=$161;
   var $162=$4;
   var $163=(($162)|0);
   var $164=(($163)|0);
   var $165=$164;
   var $166=(($165+1)|0);
   var $167=(($166)|0);
   var $168 = $167;label = 12; break;
  case 12: 
   var $168;
   $__p=$168;
   var $169=$__p;
   var $170=$__sz;
   var $171=(($169+$170)|0);
   var $172=$47;
   var $173=$48;
   $11=$171;
   $12=$172;
   $13=$173;
   var $174=$11;
   var $175=$12;
   var $176=$13;
   assert($176 % 1 === 0);(_memcpy($174, $175, $176)|0);
   var $177=$48;
   var $178=$__sz;
   var $179=((($178)+($177))|0);
   $__sz=$179;
   var $180=$__sz;
   $25=$50;
   $26=$180;
   var $181=$25;
   $24=$181;
   var $182=$24;
   var $183=(($182)|0);
   $23=$183;
   var $184=$23;
   var $185=$184;
   $22=$185;
   var $186=$22;
   var $187=(($186)|0);
   var $188=(($187)|0);
   var $189=$188;
   var $190=(($189)|0);
   var $191=$190;
   var $192=HEAP8[($191)];
   var $193=(($192)&(255));
   var $194=$193 & 1;
   var $195=(($194)|(0))!=0;
   if ($195) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $197=$26;
   $16=$181;
   $17=$197;
   var $198=$16;
   var $199=$17;
   var $200=(($198)|0);
   $15=$200;
   var $201=$15;
   var $202=$201;
   $14=$202;
   var $203=$14;
   var $204=(($203)|0);
   var $205=(($204)|0);
   var $206=$205;
   var $207=(($206+4)|0);
   HEAP32[(($207)>>2)]=$199;
   label = 15; break;
  case 14: 
   var $209=$26;
   $20=$181;
   $21=$209;
   var $210=$20;
   var $211=$21;
   var $212=$211 << 1;
   var $213=(($212) & 255);
   var $214=(($210)|0);
   $19=$214;
   var $215=$19;
   var $216=$215;
   $18=$216;
   var $217=$18;
   var $218=(($217)|0);
   var $219=(($218)|0);
   var $220=$219;
   var $221=(($220)|0);
   var $222=$221;
   HEAP8[($222)]=$213;
   label = 15; break;
  case 15: 
   var $223=$__sz;
   var $224=$__p;
   var $225=(($224+$223)|0);
   HEAP8[($49)]=0;
   $27=$225;
   $28=$49;
   var $226=$28;
   var $227=HEAP8[($226)];
   var $228=$27;
   HEAP8[($228)]=$227;
   label = 16; break;
  case 16: 
   label = 18; break;
  case 17: 
   var $231=$__cap;
   var $232=$__sz;
   var $233=$48;
   var $234=((($232)+($233))|0);
   var $235=$__cap;
   var $236=((($234)-($235))|0);
   var $237=$__sz;
   var $238=$__sz;
   var $239=$48;
   var $240=$47;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($50, $231, $236, $237, $238, 0, $239, $240);
   label = 18; break;
  case 18: 
   STACKTOP = __stackBase__;
   return $50;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11=__stackBase__;
   var $12;
   var $13;
   var $14=(__stackBase__)+(8);
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65=(__stackBase__)+(16);
   var $66;
   var $67=(__stackBase__)+(24);
   var $68=(__stackBase__)+(32);
   var $69;
   var $70;
   var $71;
   var $72;
   var $__m_i;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $__ms;
   var $__old_p;
   var $__cap;
   var $81=(__stackBase__)+(40);
   var $82=(__stackBase__)+(48);
   var $__p;
   var $__sec_cp_sz;
   var $83=(__stackBase__)+(56);
   $73=$this;
   $74=$__old_cap;
   $75=$__delta_cap;
   $76=$__old_sz;
   $77=$__n_copy;
   $78=$__n_del;
   $79=$__n_add;
   $80=$__p_new_stuff;
   var $84=$73;
   $72=$84;
   var $85=$72;
   $71=$85;
   var $86=$71;
   var $87=(($86)|0);
   $70=$87;
   var $88=$70;
   var $89=$88;
   $69=$89;
   var $90=$69;
   var $91=$90;
   $66=$91;
   var $92=$68;
   var $93=$66;
   var $tmp_i_i=$65;
   var $tmp1_i_i=$67;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $64=$93;
   var $94=$64;
   $63=$94;
   var $95=$63;
   $__m_i=-1;
   var $96=$__m_i;
   var $97=((($96)-(1))|0);
   $__ms=$97;
   var $98=$75;
   var $99=$__ms;
   var $100=$74;
   var $101=((($99)-($100))|0);
   var $102=((($101)-(1))|0);
   var $103=(($98)>>>(0)) > (($102)>>>(0));
   if ($103) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $105=$84;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($105);
   label = 3; break;
  case 3: 
   $42=$84;
   var $107=$42;
   $41=$107;
   var $108=$41;
   var $109=(($108)|0);
   $40=$109;
   var $110=$40;
   var $111=$110;
   $39=$111;
   var $112=$39;
   var $113=(($112)|0);
   var $114=(($113)|0);
   var $115=$114;
   var $116=(($115)|0);
   var $117=$116;
   var $118=HEAP8[($117)];
   var $119=(($118)&(255));
   var $120=$119 & 1;
   var $121=(($120)|(0))!=0;
   if ($121) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $35=$107;
   var $123=$35;
   var $124=(($123)|0);
   $34=$124;
   var $125=$34;
   var $126=$125;
   $33=$126;
   var $127=$33;
   var $128=(($127)|0);
   var $129=(($128)|0);
   var $130=$129;
   var $131=(($130+8)|0);
   var $132=HEAP32[(($131)>>2)];
   var $144 = $132;label = 6; break;
  case 5: 
   $38=$107;
   var $134=$38;
   var $135=(($134)|0);
   $37=$135;
   var $136=$37;
   var $137=$136;
   $36=$137;
   var $138=$36;
   var $139=(($138)|0);
   var $140=(($139)|0);
   var $141=$140;
   var $142=(($141+1)|0);
   var $143=(($142)|0);
   var $144 = $143;label = 6; break;
  case 6: 
   var $144;
   $__old_p=$144;
   var $145=$74;
   var $146=$__ms;
   var $147=Math.floor(((($146)>>>(0)))/(2));
   var $148=((($147)-(16))|0);
   var $149=(($145)>>>(0)) < (($148)>>>(0));
   if ($149) { label = 7; break; } else { label = 14; break; }
  case 7: 
   var $151=$74;
   var $152=$75;
   var $153=((($151)+($152))|0);
   HEAP32[(($81)>>2)]=$153;
   var $154=$74;
   var $155=($154<<1);
   HEAP32[(($82)>>2)]=$155;
   $12=$81;
   $13=$82;
   var $156=$12;
   var $157=$13;
   var $tmp_i=$11;
   var $tmp1_i=$14;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $9=$156;
   $10=$157;
   var $158=$9;
   var $159=$10;
   $6=$11;
   $7=$158;
   $8=$159;
   var $160=$6;
   var $161=$7;
   var $162=HEAP32[(($161)>>2)];
   var $163=$8;
   var $164=HEAP32[(($163)>>2)];
   var $165=(($162)>>>(0)) < (($164)>>>(0));
   if ($165) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $167=$10;
   var $170 = $167;label = 10; break;
  case 9: 
   var $169=$9;
   var $170 = $169;label = 10; break;
  case 10: 
   var $170;
   var $171=HEAP32[(($170)>>2)];
   $2=$171;
   var $172=$2;
   var $173=(($172)>>>(0)) < 11;
   if ($173) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $181 = 11;label = 13; break;
  case 12: 
   var $176=$2;
   var $177=((($176)+(1))|0);
   $1=$177;
   var $178=$1;
   var $179=((($178)+(15))|0);
   var $180=$179 & -16;
   var $181 = $180;label = 13; break;
  case 13: 
   var $181;
   var $182=((($181)-(1))|0);
   var $187 = $182;label = 15; break;
  case 14: 
   var $184=$__ms;
   var $185=((($184)-(1))|0);
   var $187 = $185;label = 15; break;
  case 15: 
   var $187;
   $__cap=$187;
   $5=$84;
   var $188=$5;
   var $189=(($188)|0);
   $4=$189;
   var $190=$4;
   var $191=$190;
   $3=$191;
   var $192=$3;
   var $193=$192;
   var $194=$__cap;
   var $195=((($194)+(1))|0);
   $18=$193;
   $19=$195;
   var $196=$18;
   var $197=$19;
   $15=$196;
   $16=$197;
   $17=0;
   var $198=$15;
   var $199=$16;
   var $200=__Znwj($199);
   $__p=$200;
   $20=$84;
   var $201=$20;
   var $202=$77;
   var $203=(($202)|(0))!=0;
   if ($203) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $205=$__p;
   var $206=$__old_p;
   var $207=$77;
   $21=$205;
   $22=$206;
   $23=$207;
   var $208=$21;
   var $209=$22;
   var $210=$23;
   assert($210 % 1 === 0);(_memcpy($208, $209, $210)|0);
   label = 17; break;
  case 17: 
   var $212=$79;
   var $213=(($212)|(0))!=0;
   if ($213) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $215=$__p;
   var $216=$77;
   var $217=(($215+$216)|0);
   var $218=$80;
   var $219=$79;
   $24=$217;
   $25=$218;
   $26=$219;
   var $220=$24;
   var $221=$25;
   var $222=$26;
   assert($222 % 1 === 0);(_memcpy($220, $221, $222)|0);
   label = 19; break;
  case 19: 
   var $224=$76;
   var $225=$78;
   var $226=((($224)-($225))|0);
   var $227=$77;
   var $228=((($226)-($227))|0);
   $__sec_cp_sz=$228;
   var $229=$__sec_cp_sz;
   var $230=(($229)|(0))!=0;
   if ($230) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $232=$__p;
   var $233=$77;
   var $234=(($232+$233)|0);
   var $235=$79;
   var $236=(($234+$235)|0);
   var $237=$__old_p;
   var $238=$77;
   var $239=(($237+$238)|0);
   var $240=$78;
   var $241=(($239+$240)|0);
   var $242=$__sec_cp_sz;
   $27=$236;
   $28=$241;
   $29=$242;
   var $243=$27;
   var $244=$28;
   var $245=$29;
   assert($245 % 1 === 0);(_memcpy($243, $244, $245)|0);
   label = 21; break;
  case 21: 
   var $247=$74;
   var $248=((($247)+(1))|0);
   var $249=(($248)|(0))!=11;
   if ($249) { label = 22; break; } else { label = 23; break; }
  case 22: 
   $32=$84;
   var $251=$32;
   var $252=(($251)|0);
   $31=$252;
   var $253=$31;
   var $254=$253;
   $30=$254;
   var $255=$30;
   var $256=$255;
   var $257=$__old_p;
   var $258=$74;
   var $259=((($258)+(1))|0);
   $46=$256;
   $47=$257;
   $48=$259;
   var $260=$46;
   var $261=$47;
   var $262=$48;
   $43=$260;
   $44=$261;
   $45=$262;
   var $263=$43;
   var $264=$44;
   __ZdlPv($264);
   label = 23; break;
  case 23: 
   var $266=$__p;
   $51=$84;
   $52=$266;
   var $267=$51;
   var $268=$52;
   var $269=(($267)|0);
   $50=$269;
   var $270=$50;
   var $271=$270;
   $49=$271;
   var $272=$49;
   var $273=(($272)|0);
   var $274=(($273)|0);
   var $275=$274;
   var $276=(($275+8)|0);
   HEAP32[(($276)>>2)]=$268;
   var $277=$__cap;
   var $278=((($277)+(1))|0);
   $55=$84;
   $56=$278;
   var $279=$55;
   var $280=$56;
   var $281=1 | $280;
   var $282=(($279)|0);
   $54=$282;
   var $283=$54;
   var $284=$283;
   $53=$284;
   var $285=$53;
   var $286=(($285)|0);
   var $287=(($286)|0);
   var $288=$287;
   var $289=(($288)|0);
   HEAP32[(($289)>>2)]=$281;
   var $290=$77;
   var $291=$79;
   var $292=((($290)+($291))|0);
   var $293=$__sec_cp_sz;
   var $294=((($292)+($293))|0);
   $76=$294;
   var $295=$76;
   $59=$84;
   $60=$295;
   var $296=$59;
   var $297=$60;
   var $298=(($296)|0);
   $58=$298;
   var $299=$58;
   var $300=$299;
   $57=$300;
   var $301=$57;
   var $302=(($301)|0);
   var $303=(($302)|0);
   var $304=$303;
   var $305=(($304+4)|0);
   HEAP32[(($305)>>2)]=$297;
   var $306=$76;
   var $307=$__p;
   var $308=(($307+$306)|0);
   HEAP8[($83)]=0;
   $61=$308;
   $62=$83;
   var $309=$62;
   var $310=HEAP8[($309)];
   var $311=$61;
   HEAP8[($311)]=$310;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11=__stackBase__;
   var $12;
   var $13;
   var $14=(__stackBase__)+(8);
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56=(__stackBase__)+(16);
   var $57;
   var $58=(__stackBase__)+(24);
   var $59=(__stackBase__)+(32);
   var $60;
   var $61;
   var $62;
   var $63;
   var $__m_i;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $__ms;
   var $__old_p;
   var $__cap;
   var $71=(__stackBase__)+(40);
   var $72=(__stackBase__)+(48);
   var $__p;
   var $__sec_cp_sz;
   $64=$this;
   $65=$__old_cap;
   $66=$__delta_cap;
   $67=$__old_sz;
   $68=$__n_copy;
   $69=$__n_del;
   $70=$__n_add;
   var $73=$64;
   $63=$73;
   var $74=$63;
   $62=$74;
   var $75=$62;
   var $76=(($75)|0);
   $61=$76;
   var $77=$61;
   var $78=$77;
   $60=$78;
   var $79=$60;
   var $80=$79;
   $57=$80;
   var $81=$59;
   var $82=$57;
   var $tmp_i_i=$56;
   var $tmp1_i_i=$58;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $55=$82;
   var $83=$55;
   $54=$83;
   var $84=$54;
   $__m_i=-1;
   var $85=$__m_i;
   var $86=((($85)-(1))|0);
   $__ms=$86;
   var $87=$66;
   var $88=$__ms;
   var $89=$65;
   var $90=((($88)-($89))|0);
   var $91=((($90)-(1))|0);
   var $92=(($87)>>>(0)) > (($91)>>>(0));
   if ($92) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $94=$73;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($94);
   label = 3; break;
  case 3: 
   $39=$73;
   var $96=$39;
   $38=$96;
   var $97=$38;
   var $98=(($97)|0);
   $37=$98;
   var $99=$37;
   var $100=$99;
   $36=$100;
   var $101=$36;
   var $102=(($101)|0);
   var $103=(($102)|0);
   var $104=$103;
   var $105=(($104)|0);
   var $106=$105;
   var $107=HEAP8[($106)];
   var $108=(($107)&(255));
   var $109=$108 & 1;
   var $110=(($109)|(0))!=0;
   if ($110) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $32=$96;
   var $112=$32;
   var $113=(($112)|0);
   $31=$113;
   var $114=$31;
   var $115=$114;
   $30=$115;
   var $116=$30;
   var $117=(($116)|0);
   var $118=(($117)|0);
   var $119=$118;
   var $120=(($119+8)|0);
   var $121=HEAP32[(($120)>>2)];
   var $133 = $121;label = 6; break;
  case 5: 
   $35=$96;
   var $123=$35;
   var $124=(($123)|0);
   $34=$124;
   var $125=$34;
   var $126=$125;
   $33=$126;
   var $127=$33;
   var $128=(($127)|0);
   var $129=(($128)|0);
   var $130=$129;
   var $131=(($130+1)|0);
   var $132=(($131)|0);
   var $133 = $132;label = 6; break;
  case 6: 
   var $133;
   $__old_p=$133;
   var $134=$65;
   var $135=$__ms;
   var $136=Math.floor(((($135)>>>(0)))/(2));
   var $137=((($136)-(16))|0);
   var $138=(($134)>>>(0)) < (($137)>>>(0));
   if ($138) { label = 7; break; } else { label = 14; break; }
  case 7: 
   var $140=$65;
   var $141=$66;
   var $142=((($140)+($141))|0);
   HEAP32[(($71)>>2)]=$142;
   var $143=$65;
   var $144=($143<<1);
   HEAP32[(($72)>>2)]=$144;
   $12=$71;
   $13=$72;
   var $145=$12;
   var $146=$13;
   var $tmp_i=$11;
   var $tmp1_i=$14;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $9=$145;
   $10=$146;
   var $147=$9;
   var $148=$10;
   $6=$11;
   $7=$147;
   $8=$148;
   var $149=$6;
   var $150=$7;
   var $151=HEAP32[(($150)>>2)];
   var $152=$8;
   var $153=HEAP32[(($152)>>2)];
   var $154=(($151)>>>(0)) < (($153)>>>(0));
   if ($154) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $156=$10;
   var $159 = $156;label = 10; break;
  case 9: 
   var $158=$9;
   var $159 = $158;label = 10; break;
  case 10: 
   var $159;
   var $160=HEAP32[(($159)>>2)];
   $2=$160;
   var $161=$2;
   var $162=(($161)>>>(0)) < 11;
   if ($162) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $170 = 11;label = 13; break;
  case 12: 
   var $165=$2;
   var $166=((($165)+(1))|0);
   $1=$166;
   var $167=$1;
   var $168=((($167)+(15))|0);
   var $169=$168 & -16;
   var $170 = $169;label = 13; break;
  case 13: 
   var $170;
   var $171=((($170)-(1))|0);
   var $176 = $171;label = 15; break;
  case 14: 
   var $173=$__ms;
   var $174=((($173)-(1))|0);
   var $176 = $174;label = 15; break;
  case 15: 
   var $176;
   $__cap=$176;
   $5=$73;
   var $177=$5;
   var $178=(($177)|0);
   $4=$178;
   var $179=$4;
   var $180=$179;
   $3=$180;
   var $181=$3;
   var $182=$181;
   var $183=$__cap;
   var $184=((($183)+(1))|0);
   $18=$182;
   $19=$184;
   var $185=$18;
   var $186=$19;
   $15=$185;
   $16=$186;
   $17=0;
   var $187=$15;
   var $188=$16;
   var $189=__Znwj($188);
   $__p=$189;
   $20=$73;
   var $190=$20;
   var $191=$68;
   var $192=(($191)|(0))!=0;
   if ($192) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $194=$__p;
   var $195=$__old_p;
   var $196=$68;
   $21=$194;
   $22=$195;
   $23=$196;
   var $197=$21;
   var $198=$22;
   var $199=$23;
   assert($199 % 1 === 0);(_memcpy($197, $198, $199)|0);
   label = 17; break;
  case 17: 
   var $201=$67;
   var $202=$69;
   var $203=((($201)-($202))|0);
   var $204=$68;
   var $205=((($203)-($204))|0);
   $__sec_cp_sz=$205;
   var $206=$__sec_cp_sz;
   var $207=(($206)|(0))!=0;
   if ($207) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $209=$__p;
   var $210=$68;
   var $211=(($209+$210)|0);
   var $212=$70;
   var $213=(($211+$212)|0);
   var $214=$__old_p;
   var $215=$68;
   var $216=(($214+$215)|0);
   var $217=$69;
   var $218=(($216+$217)|0);
   var $219=$__sec_cp_sz;
   $24=$213;
   $25=$218;
   $26=$219;
   var $220=$24;
   var $221=$25;
   var $222=$26;
   assert($222 % 1 === 0);(_memcpy($220, $221, $222)|0);
   label = 19; break;
  case 19: 
   var $224=$65;
   var $225=((($224)+(1))|0);
   var $226=(($225)|(0))!=11;
   if ($226) { label = 20; break; } else { label = 21; break; }
  case 20: 
   $29=$73;
   var $228=$29;
   var $229=(($228)|0);
   $28=$229;
   var $230=$28;
   var $231=$230;
   $27=$231;
   var $232=$27;
   var $233=$232;
   var $234=$__old_p;
   var $235=$65;
   var $236=((($235)+(1))|0);
   $43=$233;
   $44=$234;
   $45=$236;
   var $237=$43;
   var $238=$44;
   var $239=$45;
   $40=$237;
   $41=$238;
   $42=$239;
   var $240=$40;
   var $241=$41;
   __ZdlPv($241);
   label = 21; break;
  case 21: 
   var $243=$__p;
   $48=$73;
   $49=$243;
   var $244=$48;
   var $245=$49;
   var $246=(($244)|0);
   $47=$246;
   var $247=$47;
   var $248=$247;
   $46=$248;
   var $249=$46;
   var $250=(($249)|0);
   var $251=(($250)|0);
   var $252=$251;
   var $253=(($252+8)|0);
   HEAP32[(($253)>>2)]=$245;
   var $254=$__cap;
   var $255=((($254)+(1))|0);
   $52=$73;
   $53=$255;
   var $256=$52;
   var $257=$53;
   var $258=1 | $257;
   var $259=(($256)|0);
   $51=$259;
   var $260=$51;
   var $261=$260;
   $50=$261;
   var $262=$50;
   var $263=(($262)|0);
   var $264=(($263)|0);
   var $265=$264;
   var $266=(($265)|0);
   HEAP32[(($266)>>2)]=$258;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 20714
// WARNING: content after a branch in a label, line: 20716
// WARNING: content after a branch in a label, line: 20717
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this, $__s, $__sz) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37=__stackBase__;
   var $38;
   var $39=(__stackBase__)+(8);
   var $40=(__stackBase__)+(16);
   var $41;
   var $42;
   var $43;
   var $44;
   var $__m_i;
   var $45;
   var $46;
   var $47;
   var $__p;
   var $__cap;
   var $48=(__stackBase__)+(24);
   $45=$this;
   $46=$__s;
   $47=$__sz;
   var $49=$45;
   var $50=$47;
   $44=$49;
   var $51=$44;
   $43=$51;
   var $52=$43;
   var $53=(($52)|0);
   $42=$53;
   var $54=$42;
   var $55=$54;
   $41=$55;
   var $56=$41;
   var $57=$56;
   $38=$57;
   var $58=$40;
   var $59=$38;
   var $tmp_i_i=$37;
   var $tmp1_i_i=$39;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $36=$59;
   var $60=$36;
   $35=$60;
   var $61=$35;
   $__m_i=1073741823;
   var $62=$__m_i;
   var $63=((($62)-(1))|0);
   var $64=(($50)>>>(0)) > (($63)>>>(0));
   if ($64) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $66=$49;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($66);
   label = 3; break;
  case 3: 
   var $68=$47;
   var $69=(($68)>>>(0)) < 2;
   if ($69) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $71=$47;
   $28=$49;
   $29=$71;
   var $72=$28;
   var $73=$29;
   var $74=$73 << 1;
   var $75=(($74) & 255);
   var $76=(($72)|0);
   $27=$76;
   var $77=$27;
   var $78=$77;
   $26=$78;
   var $79=$26;
   var $80=(($79)|0);
   var $81=(($80)|0);
   var $82=$81;
   var $83=(($82)|0);
   var $84=$83;
   HEAP8[($84)]=$75;
   $8=$49;
   var $85=$8;
   var $86=(($85)|0);
   $7=$86;
   var $87=$7;
   var $88=$87;
   $6=$88;
   var $89=$6;
   var $90=(($89)|0);
   var $91=(($90)|0);
   var $92=$91;
   var $93=(($92+4)|0);
   var $94=(($93)|0);
   $__p=$94;
   label = 9; break;
  case 5: 
   var $96=$47;
   $2=$96;
   var $97=$2;
   var $98=(($97)>>>(0)) < 2;
   if ($98) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $106 = 2;label = 8; break;
  case 7: 
   var $101=$2;
   var $102=((($101)+(1))|0);
   $1=$102;
   var $103=$1;
   var $104=((($103)+(3))|0);
   var $105=$104 & -4;
   var $106 = $105;label = 8; break;
  case 8: 
   var $106;
   var $107=((($106)-(1))|0);
   $__cap=$107;
   $5=$49;
   var $108=$5;
   var $109=(($108)|0);
   $4=$109;
   var $110=$4;
   var $111=$110;
   $3=$111;
   var $112=$3;
   var $113=$112;
   var $114=$__cap;
   var $115=((($114)+(1))|0);
   $12=$113;
   $13=$115;
   var $116=$12;
   var $117=$13;
   $9=$116;
   $10=$117;
   $11=0;
   var $118=$9;
   var $119=$10;
   var $120=($119<<2);
   var $121=__Znwj($120);
   var $122=$121;
   $__p=$122;
   var $123=$__p;
   $16=$49;
   $17=$123;
   var $124=$16;
   var $125=$17;
   var $126=(($124)|0);
   $15=$126;
   var $127=$15;
   var $128=$127;
   $14=$128;
   var $129=$14;
   var $130=(($129)|0);
   var $131=(($130)|0);
   var $132=$131;
   var $133=(($132+8)|0);
   HEAP32[(($133)>>2)]=$125;
   var $134=$__cap;
   var $135=((($134)+(1))|0);
   $20=$49;
   $21=$135;
   var $136=$20;
   var $137=$21;
   var $138=1 | $137;
   var $139=(($136)|0);
   $19=$139;
   var $140=$19;
   var $141=$140;
   $18=$141;
   var $142=$18;
   var $143=(($142)|0);
   var $144=(($143)|0);
   var $145=$144;
   var $146=(($145)|0);
   HEAP32[(($146)>>2)]=$138;
   var $147=$47;
   $24=$49;
   $25=$147;
   var $148=$24;
   var $149=$25;
   var $150=(($148)|0);
   $23=$150;
   var $151=$23;
   var $152=$151;
   $22=$152;
   var $153=$22;
   var $154=(($153)|0);
   var $155=(($154)|0);
   var $156=$155;
   var $157=(($156+4)|0);
   HEAP32[(($157)>>2)]=$149;
   label = 9; break;
  case 9: 
   var $159=$__p;
   var $160=$46;
   var $161=$47;
   $30=$159;
   $31=$160;
   $32=$161;
   var $162=$30;
   var $163=$31;
   var $164=$32;
   var $165=_wmemcpy($162, $163, $164);
   var $166=$47;
   var $167=$__p;
   var $168=(($167+($166<<2))|0);
   HEAP32[(($48)>>2)]=0;
   $33=$168;
   $34=$48;
   var $169=$34;
   var $170=HEAP32[(($169)>>2)];
   var $171=$33;
   HEAP32[(($171)>>2)]=$170;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this, $__n, $__c) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37=__stackBase__;
   var $38;
   var $39=(__stackBase__)+(8);
   var $40=(__stackBase__)+(16);
   var $41;
   var $42;
   var $43;
   var $44;
   var $__m_i;
   var $45;
   var $46;
   var $47;
   var $__p;
   var $__cap;
   var $48=(__stackBase__)+(24);
   $45=$this;
   $46=$__n;
   $47=$__c;
   var $49=$45;
   var $50=$46;
   $44=$49;
   var $51=$44;
   $43=$51;
   var $52=$43;
   var $53=(($52)|0);
   $42=$53;
   var $54=$42;
   var $55=$54;
   $41=$55;
   var $56=$41;
   var $57=$56;
   $38=$57;
   var $58=$40;
   var $59=$38;
   var $tmp_i_i=$37;
   var $tmp1_i_i=$39;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $36=$59;
   var $60=$36;
   $35=$60;
   var $61=$35;
   $__m_i=1073741823;
   var $62=$__m_i;
   var $63=((($62)-(1))|0);
   var $64=(($50)>>>(0)) > (($63)>>>(0));
   if ($64) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $66=$49;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($66);
   label = 3; break;
  case 3: 
   var $68=$46;
   var $69=(($68)>>>(0)) < 2;
   if ($69) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $71=$46;
   $28=$49;
   $29=$71;
   var $72=$28;
   var $73=$29;
   var $74=$73 << 1;
   var $75=(($74) & 255);
   var $76=(($72)|0);
   $27=$76;
   var $77=$27;
   var $78=$77;
   $26=$78;
   var $79=$26;
   var $80=(($79)|0);
   var $81=(($80)|0);
   var $82=$81;
   var $83=(($82)|0);
   var $84=$83;
   HEAP8[($84)]=$75;
   $8=$49;
   var $85=$8;
   var $86=(($85)|0);
   $7=$86;
   var $87=$7;
   var $88=$87;
   $6=$88;
   var $89=$6;
   var $90=(($89)|0);
   var $91=(($90)|0);
   var $92=$91;
   var $93=(($92+4)|0);
   var $94=(($93)|0);
   $__p=$94;
   label = 9; break;
  case 5: 
   var $96=$46;
   $2=$96;
   var $97=$2;
   var $98=(($97)>>>(0)) < 2;
   if ($98) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $106 = 2;label = 8; break;
  case 7: 
   var $101=$2;
   var $102=((($101)+(1))|0);
   $1=$102;
   var $103=$1;
   var $104=((($103)+(3))|0);
   var $105=$104 & -4;
   var $106 = $105;label = 8; break;
  case 8: 
   var $106;
   var $107=((($106)-(1))|0);
   $__cap=$107;
   $5=$49;
   var $108=$5;
   var $109=(($108)|0);
   $4=$109;
   var $110=$4;
   var $111=$110;
   $3=$111;
   var $112=$3;
   var $113=$112;
   var $114=$__cap;
   var $115=((($114)+(1))|0);
   $12=$113;
   $13=$115;
   var $116=$12;
   var $117=$13;
   $9=$116;
   $10=$117;
   $11=0;
   var $118=$9;
   var $119=$10;
   var $120=($119<<2);
   var $121=__Znwj($120);
   var $122=$121;
   $__p=$122;
   var $123=$__p;
   $16=$49;
   $17=$123;
   var $124=$16;
   var $125=$17;
   var $126=(($124)|0);
   $15=$126;
   var $127=$15;
   var $128=$127;
   $14=$128;
   var $129=$14;
   var $130=(($129)|0);
   var $131=(($130)|0);
   var $132=$131;
   var $133=(($132+8)|0);
   HEAP32[(($133)>>2)]=$125;
   var $134=$__cap;
   var $135=((($134)+(1))|0);
   $20=$49;
   $21=$135;
   var $136=$20;
   var $137=$21;
   var $138=1 | $137;
   var $139=(($136)|0);
   $19=$139;
   var $140=$19;
   var $141=$140;
   $18=$141;
   var $142=$18;
   var $143=(($142)|0);
   var $144=(($143)|0);
   var $145=$144;
   var $146=(($145)|0);
   HEAP32[(($146)>>2)]=$138;
   var $147=$46;
   $24=$49;
   $25=$147;
   var $148=$24;
   var $149=$25;
   var $150=(($148)|0);
   $23=$150;
   var $151=$23;
   var $152=$151;
   $22=$152;
   var $153=$22;
   var $154=(($153)|0);
   var $155=(($154)|0);
   var $156=$155;
   var $157=(($156+4)|0);
   HEAP32[(($157)>>2)]=$149;
   label = 9; break;
  case 9: 
   var $159=$__p;
   var $160=$46;
   var $161=$47;
   $30=$159;
   $31=$160;
   $32=$161;
   var $162=$30;
   var $163=$32;
   var $164=$31;
   var $165=_wmemset($162, $163, $164);
   var $166=$46;
   var $167=$__p;
   var $168=(($167+($166<<2))|0);
   HEAP32[(($48)>>2)]=0;
   $33=$168;
   $34=$48;
   var $169=$34;
   var $170=HEAP32[(($169)>>2)];
   var $171=$33;
   HEAP32[(($171)>>2)]=$170;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15=__stackBase__;
   var $16;
   var $17=(__stackBase__)+(8);
   var $18=(__stackBase__)+(16);
   var $19;
   var $20;
   var $21;
   var $22;
   var $__m_i;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46=(__stackBase__)+(24);
   var $47;
   var $48;
   var $49=(__stackBase__)+(32);
   var $50;
   var $51;
   var $52;
   var $__sz;
   var $__p;
   var $__cap;
   var $53=(__stackBase__)+(40);
   $50=$this;
   $51=$__first;
   $52=$__last;
   var $54=$50;
   var $55=$51;
   var $56=$52;
   $47=$55;
   $48=$56;
   var $57=$47;
   var $58=$48;
   var $tmp_i=$46;
   var $tmp1_i=$49;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $44=$57;
   $45=$58;
   var $59=$45;
   var $60=$44;
   var $61=$59;
   var $62=$60;
   var $63=((($61)-($62))|0);
   var $64=((((($63)|(0)))/(4))&-1);
   $__sz=$64;
   var $65=$__sz;
   $22=$54;
   var $66=$22;
   $21=$66;
   var $67=$21;
   var $68=(($67)|0);
   $20=$68;
   var $69=$20;
   var $70=$69;
   $19=$70;
   var $71=$19;
   var $72=$71;
   $16=$72;
   var $73=$18;
   var $74=$16;
   var $tmp_i_i=$15;
   var $tmp1_i_i=$17;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $14=$74;
   var $75=$14;
   $13=$75;
   var $76=$13;
   $__m_i=1073741823;
   var $77=$__m_i;
   var $78=((($77)-(1))|0);
   var $79=(($65)>>>(0)) > (($78)>>>(0));
   if ($79) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $81=$54;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($81);
   label = 3; break;
  case 3: 
   var $83=$__sz;
   var $84=(($83)>>>(0)) < 2;
   if ($84) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $86=$__sz;
   $3=$54;
   $4=$86;
   var $87=$3;
   var $88=$4;
   var $89=$88 << 1;
   var $90=(($89) & 255);
   var $91=(($87)|0);
   $2=$91;
   var $92=$2;
   var $93=$92;
   $1=$93;
   var $94=$1;
   var $95=(($94)|0);
   var $96=(($95)|0);
   var $97=$96;
   var $98=(($97)|0);
   var $99=$98;
   HEAP8[($99)]=$90;
   $7=$54;
   var $100=$7;
   var $101=(($100)|0);
   $6=$101;
   var $102=$6;
   var $103=$102;
   $5=$103;
   var $104=$5;
   var $105=(($104)|0);
   var $106=(($105)|0);
   var $107=$106;
   var $108=(($107+4)|0);
   var $109=(($108)|0);
   $__p=$109;
   label = 9; break;
  case 5: 
   var $111=$__sz;
   $9=$111;
   var $112=$9;
   var $113=(($112)>>>(0)) < 2;
   if ($113) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $121 = 2;label = 8; break;
  case 7: 
   var $116=$9;
   var $117=((($116)+(1))|0);
   $8=$117;
   var $118=$8;
   var $119=((($118)+(3))|0);
   var $120=$119 & -4;
   var $121 = $120;label = 8; break;
  case 8: 
   var $121;
   var $122=((($121)-(1))|0);
   $__cap=$122;
   $12=$54;
   var $123=$12;
   var $124=(($123)|0);
   $11=$124;
   var $125=$11;
   var $126=$125;
   $10=$126;
   var $127=$10;
   var $128=$127;
   var $129=$__cap;
   var $130=((($129)+(1))|0);
   $26=$128;
   $27=$130;
   var $131=$26;
   var $132=$27;
   $23=$131;
   $24=$132;
   $25=0;
   var $133=$23;
   var $134=$24;
   var $135=($134<<2);
   var $136=__Znwj($135);
   var $137=$136;
   $__p=$137;
   var $138=$__p;
   $30=$54;
   $31=$138;
   var $139=$30;
   var $140=$31;
   var $141=(($139)|0);
   $29=$141;
   var $142=$29;
   var $143=$142;
   $28=$143;
   var $144=$28;
   var $145=(($144)|0);
   var $146=(($145)|0);
   var $147=$146;
   var $148=(($147+8)|0);
   HEAP32[(($148)>>2)]=$140;
   var $149=$__cap;
   var $150=((($149)+(1))|0);
   $34=$54;
   $35=$150;
   var $151=$34;
   var $152=$35;
   var $153=1 | $152;
   var $154=(($151)|0);
   $33=$154;
   var $155=$33;
   var $156=$155;
   $32=$156;
   var $157=$32;
   var $158=(($157)|0);
   var $159=(($158)|0);
   var $160=$159;
   var $161=(($160)|0);
   HEAP32[(($161)>>2)]=$153;
   var $162=$__sz;
   $38=$54;
   $39=$162;
   var $163=$38;
   var $164=$39;
   var $165=(($163)|0);
   $37=$165;
   var $166=$37;
   var $167=$166;
   $36=$167;
   var $168=$36;
   var $169=(($168)|0);
   var $170=(($169)|0);
   var $171=$170;
   var $172=(($171+4)|0);
   HEAP32[(($172)>>2)]=$164;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $175=$51;
   var $176=$52;
   var $177=(($175)|(0))!=(($176)|(0));
   if ($177) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $179=$__p;
   var $180=$51;
   $40=$179;
   $41=$180;
   var $181=$41;
   var $182=HEAP32[(($181)>>2)];
   var $183=$40;
   HEAP32[(($183)>>2)]=$182;
   label = 12; break;
  case 12: 
   var $185=$51;
   var $186=(($185+4)|0);
   $51=$186;
   var $187=$__p;
   var $188=(($187+4)|0);
   $__p=$188;
   label = 10; break;
  case 13: 
   var $190=$__p;
   HEAP32[(($53)>>2)]=0;
   $42=$190;
   $43=$53;
   var $191=$43;
   var $192=HEAP32[(($191)>>2)];
   var $193=$42;
   HEAP32[(($193)>>2)]=$192;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   $20=$this;
   var $21=$20;
   $19=$21;
   var $22=$19;
   label = 2; break;
  case 2: 
   $12=$21;
   var $24=$12;
   var $25=(($24)|0);
   $11=$25;
   var $26=$11;
   var $27=$26;
   $10=$27;
   var $28=$10;
   var $29=(($28)|0);
   var $30=(($29)|0);
   var $31=$30;
   var $32=(($31)|0);
   var $33=$32;
   var $34=HEAP8[($33)];
   var $35=(($34)&(255));
   var $36=$35 & 1;
   var $37=(($36)|(0))!=0;
   if ($37) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $3=$21;
   var $39=$3;
   var $40=(($39)|0);
   $2=$40;
   var $41=$2;
   var $42=$41;
   $1=$42;
   var $43=$1;
   var $44=$43;
   $6=$21;
   var $45=$6;
   var $46=(($45)|0);
   $5=$46;
   var $47=$5;
   var $48=$47;
   $4=$48;
   var $49=$4;
   var $50=(($49)|0);
   var $51=(($50)|0);
   var $52=$51;
   var $53=(($52+8)|0);
   var $54=HEAP32[(($53)>>2)];
   $9=$21;
   var $55=$9;
   var $56=(($55)|0);
   $8=$56;
   var $57=$8;
   var $58=$57;
   $7=$58;
   var $59=$7;
   var $60=(($59)|0);
   var $61=(($60)|0);
   var $62=$61;
   var $63=(($62)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=$64 & -2;
   $16=$44;
   $17=$54;
   $18=$65;
   var $66=$16;
   var $67=$17;
   var $68=$18;
   $13=$66;
   $14=$67;
   $15=$68;
   var $69=$13;
   var $70=$14;
   var $71=$70;
   __ZdlPv($71);
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $2=$this;
 $3=$__s;
 var $4=$2;
 var $5=$3;
 var $6=$3;
 $1=$6;
 var $7=$1;
 var $8=_wcslen($7);
 var $9=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($4, $5, $8);
 return $9;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, $__n) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $__cap;
   var $__p;
   var $51=__stackBase__;
   var $__sz;
   $48=$this;
   $49=$__s;
   $50=$__n;
   var $52=$48;
   $47=$52;
   var $53=$47;
   $46=$53;
   var $54=$46;
   var $55=(($54)|0);
   $45=$55;
   var $56=$45;
   var $57=$56;
   $44=$57;
   var $58=$44;
   var $59=(($58)|0);
   var $60=(($59)|0);
   var $61=$60;
   var $62=(($61)|0);
   var $63=$62;
   var $64=HEAP8[($63)];
   var $65=(($64)&(255));
   var $66=$65 & 1;
   var $67=(($66)|(0))!=0;
   if ($67) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $43=$53;
   var $69=$43;
   var $70=(($69)|0);
   $42=$70;
   var $71=$42;
   var $72=$71;
   $41=$72;
   var $73=$41;
   var $74=(($73)|0);
   var $75=(($74)|0);
   var $76=$75;
   var $77=(($76)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$78 & -2;
   var $81 = $79;label = 4; break;
  case 3: 
   var $81 = 2;label = 4; break;
  case 4: 
   var $81;
   var $82=((($81)-(1))|0);
   $__cap=$82;
   var $83=$__cap;
   var $84=$50;
   var $85=(($83)>>>(0)) >= (($84)>>>(0));
   if ($85) { label = 5; break; } else { label = 12; break; }
  case 5: 
   $40=$52;
   var $87=$40;
   $39=$87;
   var $88=$39;
   var $89=(($88)|0);
   $38=$89;
   var $90=$38;
   var $91=$90;
   $37=$91;
   var $92=$37;
   var $93=(($92)|0);
   var $94=(($93)|0);
   var $95=$94;
   var $96=(($95)|0);
   var $97=$96;
   var $98=HEAP8[($97)];
   var $99=(($98)&(255));
   var $100=$99 & 1;
   var $101=(($100)|(0))!=0;
   if ($101) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $33=$87;
   var $103=$33;
   var $104=(($103)|0);
   $32=$104;
   var $105=$32;
   var $106=$105;
   $31=$106;
   var $107=$31;
   var $108=(($107)|0);
   var $109=(($108)|0);
   var $110=$109;
   var $111=(($110+8)|0);
   var $112=HEAP32[(($111)>>2)];
   var $124 = $112;label = 8; break;
  case 7: 
   $36=$87;
   var $114=$36;
   var $115=(($114)|0);
   $35=$115;
   var $116=$35;
   var $117=$116;
   $34=$117;
   var $118=$34;
   var $119=(($118)|0);
   var $120=(($119)|0);
   var $121=$120;
   var $122=(($121+4)|0);
   var $123=(($122)|0);
   var $124 = $123;label = 8; break;
  case 8: 
   var $124;
   $__p=$124;
   var $125=$__p;
   var $126=$49;
   var $127=$50;
   $1=$125;
   $2=$126;
   $3=$127;
   var $128=$1;
   var $129=$2;
   var $130=$3;
   var $131=_wmemmove($128, $129, $130);
   var $132=$50;
   var $133=$__p;
   var $134=(($133+($132<<2))|0);
   HEAP32[(($51)>>2)]=0;
   $4=$134;
   $5=$51;
   var $135=$5;
   var $136=HEAP32[(($135)>>2)];
   var $137=$4;
   HEAP32[(($137)>>2)]=$136;
   var $138=$50;
   $17=$52;
   $18=$138;
   var $139=$17;
   $16=$139;
   var $140=$16;
   var $141=(($140)|0);
   $15=$141;
   var $142=$15;
   var $143=$142;
   $14=$143;
   var $144=$14;
   var $145=(($144)|0);
   var $146=(($145)|0);
   var $147=$146;
   var $148=(($147)|0);
   var $149=$148;
   var $150=HEAP8[($149)];
   var $151=(($150)&(255));
   var $152=$151 & 1;
   var $153=(($152)|(0))!=0;
   if ($153) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $155=$18;
   $8=$139;
   $9=$155;
   var $156=$8;
   var $157=$9;
   var $158=(($156)|0);
   $7=$158;
   var $159=$7;
   var $160=$159;
   $6=$160;
   var $161=$6;
   var $162=(($161)|0);
   var $163=(($162)|0);
   var $164=$163;
   var $165=(($164+4)|0);
   HEAP32[(($165)>>2)]=$157;
   label = 11; break;
  case 10: 
   var $167=$18;
   $12=$139;
   $13=$167;
   var $168=$12;
   var $169=$13;
   var $170=$169 << 1;
   var $171=(($170) & 255);
   var $172=(($168)|0);
   $11=$172;
   var $173=$11;
   var $174=$173;
   $10=$174;
   var $175=$10;
   var $176=(($175)|0);
   var $177=(($176)|0);
   var $178=$177;
   var $179=(($178)|0);
   var $180=$179;
   HEAP8[($180)]=$171;
   label = 11; break;
  case 11: 
   var $181=$50;
   $19=$52;
   $20=$181;
   var $182=$19;
   label = 16; break;
  case 12: 
   $30=$52;
   var $184=$30;
   $29=$184;
   var $185=$29;
   var $186=(($185)|0);
   $28=$186;
   var $187=$28;
   var $188=$187;
   $27=$188;
   var $189=$27;
   var $190=(($189)|0);
   var $191=(($190)|0);
   var $192=$191;
   var $193=(($192)|0);
   var $194=$193;
   var $195=HEAP8[($194)];
   var $196=(($195)&(255));
   var $197=$196 & 1;
   var $198=(($197)|(0))!=0;
   if ($198) { label = 13; break; } else { label = 14; break; }
  case 13: 
   $23=$184;
   var $200=$23;
   var $201=(($200)|0);
   $22=$201;
   var $202=$22;
   var $203=$202;
   $21=$203;
   var $204=$21;
   var $205=(($204)|0);
   var $206=(($205)|0);
   var $207=$206;
   var $208=(($207+4)|0);
   var $209=HEAP32[(($208)>>2)];
   var $224 = $209;label = 15; break;
  case 14: 
   $26=$184;
   var $211=$26;
   var $212=(($211)|0);
   $25=$212;
   var $213=$25;
   var $214=$213;
   $24=$214;
   var $215=$24;
   var $216=(($215)|0);
   var $217=(($216)|0);
   var $218=$217;
   var $219=(($218)|0);
   var $220=$219;
   var $221=HEAP8[($220)];
   var $222=(($221)&(255));
   var $223=$222 >> 1;
   var $224 = $223;label = 15; break;
  case 15: 
   var $224;
   $__sz=$224;
   var $225=$__cap;
   var $226=$50;
   var $227=$__cap;
   var $228=((($226)-($227))|0);
   var $229=$__sz;
   var $230=$__sz;
   var $231=$50;
   var $232=$49;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($52, $225, $228, $229, 0, $230, $231, $232);
   label = 16; break;
  case 16: 
   STACKTOP = __stackBase__;
   return $52;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this, $__res_arg) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25=__stackBase__;
   var $26;
   var $27;
   var $28=(__stackBase__)+(8);
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105=(__stackBase__)+(16);
   var $106;
   var $107=(__stackBase__)+(24);
   var $108=(__stackBase__)+(32);
   var $109;
   var $110;
   var $111;
   var $112;
   var $__m_i;
   var $113;
   var $114=(__stackBase__)+(40);
   var $__cap;
   var $__sz=(__stackBase__)+(48);
   var $__new_data;
   var $__p;
   var $__was_long;
   var $__now_long;
   var $115;
   var $116;
   var $117;
   $113=$this;
   HEAP32[(($114)>>2)]=$__res_arg;
   var $118=$113;
   var $119=HEAP32[(($114)>>2)];
   $112=$118;
   var $120=$112;
   $111=$120;
   var $121=$111;
   var $122=(($121)|0);
   $110=$122;
   var $123=$110;
   var $124=$123;
   $109=$124;
   var $125=$109;
   var $126=$125;
   $106=$126;
   var $127=$108;
   var $128=$106;
   var $tmp_i_i=$105;
   var $tmp1_i_i=$107;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $104=$128;
   var $129=$104;
   $103=$129;
   var $130=$103;
   $__m_i=1073741823;
   var $131=$__m_i;
   var $132=((($131)-(1))|0);
   var $133=(($119)>>>(0)) > (($132)>>>(0));
   if ($133) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $135=$118;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($135);
   label = 3; break;
  case 3: 
   $79=$118;
   var $137=$79;
   $78=$137;
   var $138=$78;
   var $139=(($138)|0);
   $77=$139;
   var $140=$77;
   var $141=$140;
   $76=$141;
   var $142=$76;
   var $143=(($142)|0);
   var $144=(($143)|0);
   var $145=$144;
   var $146=(($145)|0);
   var $147=$146;
   var $148=HEAP8[($147)];
   var $149=(($148)&(255));
   var $150=$149 & 1;
   var $151=(($150)|(0))!=0;
   if ($151) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $75=$137;
   var $153=$75;
   var $154=(($153)|0);
   $74=$154;
   var $155=$74;
   var $156=$155;
   $73=$156;
   var $157=$73;
   var $158=(($157)|0);
   var $159=(($158)|0);
   var $160=$159;
   var $161=(($160)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=$162 & -2;
   var $165 = $163;label = 6; break;
  case 5: 
   var $165 = 2;label = 6; break;
  case 6: 
   var $165;
   var $166=((($165)-(1))|0);
   $__cap=$166;
   $66=$118;
   var $167=$66;
   $65=$167;
   var $168=$65;
   var $169=(($168)|0);
   $64=$169;
   var $170=$64;
   var $171=$170;
   $63=$171;
   var $172=$63;
   var $173=(($172)|0);
   var $174=(($173)|0);
   var $175=$174;
   var $176=(($175)|0);
   var $177=$176;
   var $178=HEAP8[($177)];
   var $179=(($178)&(255));
   var $180=$179 & 1;
   var $181=(($180)|(0))!=0;
   if ($181) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $59=$167;
   var $183=$59;
   var $184=(($183)|0);
   $58=$184;
   var $185=$58;
   var $186=$185;
   $57=$186;
   var $187=$57;
   var $188=(($187)|0);
   var $189=(($188)|0);
   var $190=$189;
   var $191=(($190+4)|0);
   var $192=HEAP32[(($191)>>2)];
   var $207 = $192;label = 9; break;
  case 8: 
   $62=$167;
   var $194=$62;
   var $195=(($194)|0);
   $61=$195;
   var $196=$61;
   var $197=$196;
   $60=$197;
   var $198=$60;
   var $199=(($198)|0);
   var $200=(($199)|0);
   var $201=$200;
   var $202=(($201)|0);
   var $203=$202;
   var $204=HEAP8[($203)];
   var $205=(($204)&(255));
   var $206=$205 >> 1;
   var $207 = $206;label = 9; break;
  case 9: 
   var $207;
   HEAP32[(($__sz)>>2)]=$207;
   $26=$114;
   $27=$__sz;
   var $208=$26;
   var $209=$27;
   var $tmp_i=$25;
   var $tmp1_i=$28;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $23=$208;
   $24=$209;
   var $210=$23;
   var $211=$24;
   $20=$25;
   $21=$210;
   $22=$211;
   var $212=$20;
   var $213=$21;
   var $214=HEAP32[(($213)>>2)];
   var $215=$22;
   var $216=HEAP32[(($215)>>2)];
   var $217=(($214)>>>(0)) < (($216)>>>(0));
   if ($217) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $219=$24;
   var $222 = $219;label = 12; break;
  case 11: 
   var $221=$23;
   var $222 = $221;label = 12; break;
  case 12: 
   var $222;
   var $223=HEAP32[(($222)>>2)];
   HEAP32[(($114)>>2)]=$223;
   var $224=HEAP32[(($114)>>2)];
   $11=$224;
   var $225=$11;
   var $226=(($225)>>>(0)) < 2;
   if ($226) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $234 = 2;label = 15; break;
  case 14: 
   var $229=$11;
   var $230=((($229)+(1))|0);
   $10=$230;
   var $231=$10;
   var $232=((($231)+(3))|0);
   var $233=$232 & -4;
   var $234 = $233;label = 15; break;
  case 15: 
   var $234;
   var $235=((($234)-(1))|0);
   HEAP32[(($114)>>2)]=$235;
   var $236=HEAP32[(($114)>>2)];
   var $237=$__cap;
   var $238=(($236)|(0))!=(($237)|(0));
   if ($238) { label = 16; break; } else { label = 39; break; }
  case 16: 
   var $240=HEAP32[(($114)>>2)];
   var $241=(($240)|(0))==1;
   if ($241) { label = 17; break; } else { label = 18; break; }
  case 17: 
   $__was_long=1;
   $__now_long=0;
   $3=$118;
   var $243=$3;
   var $244=(($243)|0);
   $2=$244;
   var $245=$2;
   var $246=$245;
   $1=$246;
   var $247=$1;
   var $248=(($247)|0);
   var $249=(($248)|0);
   var $250=$249;
   var $251=(($250+4)|0);
   var $252=(($251)|0);
   $__new_data=$252;
   $6=$118;
   var $253=$6;
   var $254=(($253)|0);
   $5=$254;
   var $255=$5;
   var $256=$255;
   $4=$256;
   var $257=$4;
   var $258=(($257)|0);
   var $259=(($258)|0);
   var $260=$259;
   var $261=(($260+8)|0);
   var $262=HEAP32[(($261)>>2)];
   $__p=$262;
   label = 30; break;
  case 18: 
   var $264=HEAP32[(($114)>>2)];
   var $265=$__cap;
   var $266=(($264)>>>(0)) > (($265)>>>(0));
   if ($266) { label = 19; break; } else { label = 20; break; }
  case 19: 
   $9=$118;
   var $268=$9;
   var $269=(($268)|0);
   $8=$269;
   var $270=$8;
   var $271=$270;
   $7=$271;
   var $272=$7;
   var $273=$272;
   var $274=HEAP32[(($114)>>2)];
   var $275=((($274)+(1))|0);
   $15=$273;
   $16=$275;
   var $276=$15;
   var $277=$16;
   $12=$276;
   $13=$277;
   $14=0;
   var $278=$12;
   var $279=$13;
   var $280=($279<<2);
   var $281=__Znwj($280);
   var $282=$281;
   $__new_data=$282;
   label = 26; break;
  case 20: 
   $19=$118;
   var $284=$19;
   var $285=(($284)|0);
   $18=$285;
   var $286=$18;
   var $287=$286;
   $17=$287;
   var $288=$17;
   var $289=$288;
   var $290=HEAP32[(($114)>>2)];
   var $291=((($290)+(1))|0);
   $32=$289;
   $33=$291;
   var $292=$32;
   var $293=$33;
   $29=$292;
   $30=$293;
   $31=0;
   var $294=$29;
   var $295=$30;
   var $296=($295<<2);
   var $297 = (function() { try { __THREW__ = 0; return __Znwj($296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $298=$297;
   label = 22; break;
  case 22: 
   $__new_data=$298;
   label = 25; break;
  case 23: 
   var $301$0 = ___cxa_find_matching_catch(-1, -1,0); $301$1 = tempRet0;
   var $302=$301$0;
   $115=$302;
   var $303=$301$1;
   $116=$303;
   label = 24; break;
  case 24: 
   var $305=$115;
   var $306=___cxa_begin_catch($305);
   $117=1;
   ___cxa_end_catch();
   label = 39; break;
  case 25: 
   label = 26; break;
  case 26: 
   $__now_long=1;
   $36=$118;
   var $309=$36;
   var $310=(($309)|0);
   $35=$310;
   var $311=$35;
   var $312=$311;
   $34=$312;
   var $313=$34;
   var $314=(($313)|0);
   var $315=(($314)|0);
   var $316=$315;
   var $317=(($316)|0);
   var $318=$317;
   var $319=HEAP8[($318)];
   var $320=(($319)&(255));
   var $321=$320 & 1;
   var $322=(($321)|(0))!=0;
   var $323=(($322)&(1));
   $__was_long=$323;
   $46=$118;
   var $324=$46;
   $45=$324;
   var $325=$45;
   var $326=(($325)|0);
   $44=$326;
   var $327=$44;
   var $328=$327;
   $43=$328;
   var $329=$43;
   var $330=(($329)|0);
   var $331=(($330)|0);
   var $332=$331;
   var $333=(($332)|0);
   var $334=$333;
   var $335=HEAP8[($334)];
   var $336=(($335)&(255));
   var $337=$336 & 1;
   var $338=(($337)|(0))!=0;
   if ($338) { label = 27; break; } else { label = 28; break; }
  case 27: 
   $39=$324;
   var $340=$39;
   var $341=(($340)|0);
   $38=$341;
   var $342=$38;
   var $343=$342;
   $37=$343;
   var $344=$37;
   var $345=(($344)|0);
   var $346=(($345)|0);
   var $347=$346;
   var $348=(($347+8)|0);
   var $349=HEAP32[(($348)>>2)];
   var $361 = $349;label = 29; break;
  case 28: 
   $42=$324;
   var $351=$42;
   var $352=(($351)|0);
   $41=$352;
   var $353=$41;
   var $354=$353;
   $40=$354;
   var $355=$40;
   var $356=(($355)|0);
   var $357=(($356)|0);
   var $358=$357;
   var $359=(($358+4)|0);
   var $360=(($359)|0);
   var $361 = $360;label = 29; break;
  case 29: 
   var $361;
   $__p=$361;
   label = 30; break;
  case 30: 
   var $363=$__new_data;
   var $364=$__p;
   $56=$118;
   var $365=$56;
   $55=$365;
   var $366=$55;
   var $367=(($366)|0);
   $54=$367;
   var $368=$54;
   var $369=$368;
   $53=$369;
   var $370=$53;
   var $371=(($370)|0);
   var $372=(($371)|0);
   var $373=$372;
   var $374=(($373)|0);
   var $375=$374;
   var $376=HEAP8[($375)];
   var $377=(($376)&(255));
   var $378=$377 & 1;
   var $379=(($378)|(0))!=0;
   if ($379) { label = 31; break; } else { label = 32; break; }
  case 31: 
   $49=$365;
   var $381=$49;
   var $382=(($381)|0);
   $48=$382;
   var $383=$48;
   var $384=$383;
   $47=$384;
   var $385=$47;
   var $386=(($385)|0);
   var $387=(($386)|0);
   var $388=$387;
   var $389=(($388+4)|0);
   var $390=HEAP32[(($389)>>2)];
   var $405 = $390;label = 33; break;
  case 32: 
   $52=$365;
   var $392=$52;
   var $393=(($392)|0);
   $51=$393;
   var $394=$51;
   var $395=$394;
   $50=$395;
   var $396=$50;
   var $397=(($396)|0);
   var $398=(($397)|0);
   var $399=$398;
   var $400=(($399)|0);
   var $401=$400;
   var $402=HEAP8[($401)];
   var $403=(($402)&(255));
   var $404=$403 >> 1;
   var $405 = $404;label = 33; break;
  case 33: 
   var $405;
   var $406=((($405)+(1))|0);
   $67=$363;
   $68=$364;
   $69=$406;
   var $407=$67;
   var $408=$68;
   var $409=$69;
   var $410=_wmemcpy($407, $408, $409);
   var $411=$__was_long;
   var $412=(($411) & 1);
   if ($412) { label = 34; break; } else { label = 35; break; }
  case 34: 
   $72=$118;
   var $414=$72;
   var $415=(($414)|0);
   $71=$415;
   var $416=$71;
   var $417=$416;
   $70=$417;
   var $418=$70;
   var $419=$418;
   var $420=$__p;
   var $421=$__cap;
   var $422=((($421)+(1))|0);
   $83=$419;
   $84=$420;
   $85=$422;
   var $423=$83;
   var $424=$84;
   var $425=$85;
   $80=$423;
   $81=$424;
   $82=$425;
   var $426=$80;
   var $427=$81;
   var $428=$427;
   __ZdlPv($428);
   label = 35; break;
  case 35: 
   var $430=$__now_long;
   var $431=(($430) & 1);
   if ($431) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $433=HEAP32[(($114)>>2)];
   var $434=((($433)+(1))|0);
   $88=$118;
   $89=$434;
   var $435=$88;
   var $436=$89;
   var $437=1 | $436;
   var $438=(($435)|0);
   $87=$438;
   var $439=$87;
   var $440=$439;
   $86=$440;
   var $441=$86;
   var $442=(($441)|0);
   var $443=(($442)|0);
   var $444=$443;
   var $445=(($444)|0);
   HEAP32[(($445)>>2)]=$437;
   var $446=HEAP32[(($__sz)>>2)];
   $92=$118;
   $93=$446;
   var $447=$92;
   var $448=$93;
   var $449=(($447)|0);
   $91=$449;
   var $450=$91;
   var $451=$450;
   $90=$451;
   var $452=$90;
   var $453=(($452)|0);
   var $454=(($453)|0);
   var $455=$454;
   var $456=(($455+4)|0);
   HEAP32[(($456)>>2)]=$448;
   var $457=$__new_data;
   $96=$118;
   $97=$457;
   var $458=$96;
   var $459=$97;
   var $460=(($458)|0);
   $95=$460;
   var $461=$95;
   var $462=$461;
   $94=$462;
   var $463=$94;
   var $464=(($463)|0);
   var $465=(($464)|0);
   var $466=$465;
   var $467=(($466+8)|0);
   HEAP32[(($467)>>2)]=$459;
   label = 38; break;
  case 37: 
   var $469=HEAP32[(($__sz)>>2)];
   $100=$118;
   $101=$469;
   var $470=$100;
   var $471=$101;
   var $472=$471 << 1;
   var $473=(($472) & 255);
   var $474=(($470)|0);
   $99=$474;
   var $475=$99;
   var $476=$475;
   $98=$476;
   var $477=$98;
   var $478=(($477)|0);
   var $479=(($478)|0);
   var $480=$479;
   var $481=(($480)|0);
   var $482=$481;
   HEAP8[($482)]=$473;
   label = 38; break;
  case 38: 
   $102=$118;
   var $484=$102;
   label = 39; break;
  case 39: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this, $__c) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46=__stackBase__;
   var $__cap;
   var $__sz;
   var $__p;
   var $47=(__stackBase__)+(8);
   $45=$this;
   HEAP32[(($46)>>2)]=$__c;
   var $48=$45;
   $44=$48;
   var $49=$44;
   $43=$49;
   var $50=$43;
   var $51=(($50)|0);
   $42=$51;
   var $52=$42;
   var $53=$52;
   $41=$53;
   var $54=$41;
   var $55=(($54)|0);
   var $56=(($55)|0);
   var $57=$56;
   var $58=(($57)|0);
   var $59=$58;
   var $60=HEAP8[($59)];
   var $61=(($60)&(255));
   var $62=$61 & 1;
   var $63=(($62)|(0))!=0;
   if ($63) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $40=$49;
   var $65=$40;
   var $66=(($65)|0);
   $39=$66;
   var $67=$39;
   var $68=$67;
   $38=$68;
   var $69=$38;
   var $70=(($69)|0);
   var $71=(($70)|0);
   var $72=$71;
   var $73=(($72)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=$74 & -2;
   var $77 = $75;label = 4; break;
  case 3: 
   var $77 = 2;label = 4; break;
  case 4: 
   var $77;
   var $78=((($77)-(1))|0);
   $__cap=$78;
   $10=$48;
   var $79=$10;
   $9=$79;
   var $80=$9;
   var $81=(($80)|0);
   $8=$81;
   var $82=$8;
   var $83=$82;
   $7=$83;
   var $84=$7;
   var $85=(($84)|0);
   var $86=(($85)|0);
   var $87=$86;
   var $88=(($87)|0);
   var $89=$88;
   var $90=HEAP8[($89)];
   var $91=(($90)&(255));
   var $92=$91 & 1;
   var $93=(($92)|(0))!=0;
   if ($93) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $3=$79;
   var $95=$3;
   var $96=(($95)|0);
   $2=$96;
   var $97=$2;
   var $98=$97;
   $1=$98;
   var $99=$1;
   var $100=(($99)|0);
   var $101=(($100)|0);
   var $102=$101;
   var $103=(($102+4)|0);
   var $104=HEAP32[(($103)>>2)];
   var $119 = $104;label = 7; break;
  case 6: 
   $6=$79;
   var $106=$6;
   var $107=(($106)|0);
   $5=$107;
   var $108=$5;
   var $109=$108;
   $4=$109;
   var $110=$4;
   var $111=(($110)|0);
   var $112=(($111)|0);
   var $113=$112;
   var $114=(($113)|0);
   var $115=$114;
   var $116=HEAP8[($115)];
   var $117=(($116)&(255));
   var $118=$117 >> 1;
   var $119 = $118;label = 7; break;
  case 7: 
   var $119;
   $__sz=$119;
   var $120=$__sz;
   var $121=$__cap;
   var $122=(($120)|(0))==(($121)|(0));
   if ($122) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $124=$__cap;
   var $125=$__sz;
   var $126=$__sz;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($48, $124, 1, $125, $126, 0, 0);
   label = 9; break;
  case 9: 
   $20=$48;
   var $128=$20;
   $19=$128;
   var $129=$19;
   var $130=(($129)|0);
   $18=$130;
   var $131=$18;
   var $132=$131;
   $17=$132;
   var $133=$17;
   var $134=(($133)|0);
   var $135=(($134)|0);
   var $136=$135;
   var $137=(($136)|0);
   var $138=$137;
   var $139=HEAP8[($138)];
   var $140=(($139)&(255));
   var $141=$140 & 1;
   var $142=(($141)|(0))!=0;
   if ($142) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $13=$128;
   var $144=$13;
   var $145=(($144)|0);
   $12=$145;
   var $146=$12;
   var $147=$146;
   $11=$147;
   var $148=$11;
   var $149=(($148)|0);
   var $150=(($149)|0);
   var $151=$150;
   var $152=(($151+8)|0);
   var $153=HEAP32[(($152)>>2)];
   var $165 = $153;label = 12; break;
  case 11: 
   $16=$128;
   var $155=$16;
   var $156=(($155)|0);
   $15=$156;
   var $157=$15;
   var $158=$157;
   $14=$158;
   var $159=$14;
   var $160=(($159)|0);
   var $161=(($160)|0);
   var $162=$161;
   var $163=(($162+4)|0);
   var $164=(($163)|0);
   var $165 = $164;label = 12; break;
  case 12: 
   var $165;
   var $166=$__sz;
   var $167=(($165+($166<<2))|0);
   $__p=$167;
   var $168=$__p;
   $21=$168;
   $22=$46;
   var $169=$22;
   var $170=HEAP32[(($169)>>2)];
   var $171=$21;
   HEAP32[(($171)>>2)]=$170;
   var $172=$__p;
   var $173=(($172+4)|0);
   $__p=$173;
   HEAP32[(($47)>>2)]=0;
   $23=$173;
   $24=$47;
   var $174=$24;
   var $175=HEAP32[(($174)>>2)];
   var $176=$23;
   HEAP32[(($176)>>2)]=$175;
   var $177=$__sz;
   var $178=((($177)+(1))|0);
   $36=$48;
   $37=$178;
   var $179=$36;
   $35=$179;
   var $180=$35;
   var $181=(($180)|0);
   $34=$181;
   var $182=$34;
   var $183=$182;
   $33=$183;
   var $184=$33;
   var $185=(($184)|0);
   var $186=(($185)|0);
   var $187=$186;
   var $188=(($187)|0);
   var $189=$188;
   var $190=HEAP8[($189)];
   var $191=(($190)&(255));
   var $192=$191 & 1;
   var $193=(($192)|(0))!=0;
   if ($193) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $195=$37;
   $27=$179;
   $28=$195;
   var $196=$27;
   var $197=$28;
   var $198=(($196)|0);
   $26=$198;
   var $199=$26;
   var $200=$199;
   $25=$200;
   var $201=$25;
   var $202=(($201)|0);
   var $203=(($202)|0);
   var $204=$203;
   var $205=(($204+4)|0);
   HEAP32[(($205)>>2)]=$197;
   label = 15; break;
  case 14: 
   var $207=$37;
   $31=$179;
   $32=$207;
   var $208=$31;
   var $209=$32;
   var $210=$209 << 1;
   var $211=(($210) & 255);
   var $212=(($208)|0);
   $30=$212;
   var $213=$30;
   var $214=$213;
   $29=$214;
   var $215=$29;
   var $216=(($215)|0);
   var $217=(($216)|0);
   var $218=$217;
   var $219=(($218)|0);
   var $220=$219;
   HEAP8[($220)]=$211;
   label = 15; break;
  case 15: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23=__stackBase__;
   var $24;
   var $25;
   var $26=(__stackBase__)+(8);
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65=(__stackBase__)+(16);
   var $66;
   var $67=(__stackBase__)+(24);
   var $68=(__stackBase__)+(32);
   var $69;
   var $70;
   var $71;
   var $72;
   var $__m_i;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $__ms;
   var $__old_p;
   var $__cap;
   var $81=(__stackBase__)+(40);
   var $82=(__stackBase__)+(48);
   var $__p;
   var $__sec_cp_sz;
   var $83=(__stackBase__)+(56);
   $73=$this;
   $74=$__old_cap;
   $75=$__delta_cap;
   $76=$__old_sz;
   $77=$__n_copy;
   $78=$__n_del;
   $79=$__n_add;
   $80=$__p_new_stuff;
   var $84=$73;
   $72=$84;
   var $85=$72;
   $71=$85;
   var $86=$71;
   var $87=(($86)|0);
   $70=$87;
   var $88=$70;
   var $89=$88;
   $69=$89;
   var $90=$69;
   var $91=$90;
   $66=$91;
   var $92=$68;
   var $93=$66;
   var $tmp_i_i=$65;
   var $tmp1_i_i=$67;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $64=$93;
   var $94=$64;
   $63=$94;
   var $95=$63;
   $__m_i=1073741823;
   var $96=$__m_i;
   var $97=((($96)-(1))|0);
   $__ms=$97;
   var $98=$75;
   var $99=$__ms;
   var $100=$74;
   var $101=((($99)-($100))|0);
   var $102=((($101)-(1))|0);
   var $103=(($98)>>>(0)) > (($102)>>>(0));
   if ($103) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $105=$84;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($105);
   label = 3; break;
  case 3: 
   $42=$84;
   var $107=$42;
   $41=$107;
   var $108=$41;
   var $109=(($108)|0);
   $40=$109;
   var $110=$40;
   var $111=$110;
   $39=$111;
   var $112=$39;
   var $113=(($112)|0);
   var $114=(($113)|0);
   var $115=$114;
   var $116=(($115)|0);
   var $117=$116;
   var $118=HEAP8[($117)];
   var $119=(($118)&(255));
   var $120=$119 & 1;
   var $121=(($120)|(0))!=0;
   if ($121) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $35=$107;
   var $123=$35;
   var $124=(($123)|0);
   $34=$124;
   var $125=$34;
   var $126=$125;
   $33=$126;
   var $127=$33;
   var $128=(($127)|0);
   var $129=(($128)|0);
   var $130=$129;
   var $131=(($130+8)|0);
   var $132=HEAP32[(($131)>>2)];
   var $144 = $132;label = 6; break;
  case 5: 
   $38=$107;
   var $134=$38;
   var $135=(($134)|0);
   $37=$135;
   var $136=$37;
   var $137=$136;
   $36=$137;
   var $138=$36;
   var $139=(($138)|0);
   var $140=(($139)|0);
   var $141=$140;
   var $142=(($141+4)|0);
   var $143=(($142)|0);
   var $144 = $143;label = 6; break;
  case 6: 
   var $144;
   $__old_p=$144;
   var $145=$74;
   var $146=$__ms;
   var $147=Math.floor(((($146)>>>(0)))/(2));
   var $148=((($147)-(16))|0);
   var $149=(($145)>>>(0)) < (($148)>>>(0));
   if ($149) { label = 7; break; } else { label = 14; break; }
  case 7: 
   var $151=$74;
   var $152=$75;
   var $153=((($151)+($152))|0);
   HEAP32[(($81)>>2)]=$153;
   var $154=$74;
   var $155=($154<<1);
   HEAP32[(($82)>>2)]=$155;
   $24=$81;
   $25=$82;
   var $156=$24;
   var $157=$25;
   var $tmp_i=$23;
   var $tmp1_i=$26;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $21=$156;
   $22=$157;
   var $158=$21;
   var $159=$22;
   $18=$23;
   $19=$158;
   $20=$159;
   var $160=$18;
   var $161=$19;
   var $162=HEAP32[(($161)>>2)];
   var $163=$20;
   var $164=HEAP32[(($163)>>2)];
   var $165=(($162)>>>(0)) < (($164)>>>(0));
   if ($165) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $167=$22;
   var $170 = $167;label = 10; break;
  case 9: 
   var $169=$21;
   var $170 = $169;label = 10; break;
  case 10: 
   var $170;
   var $171=HEAP32[(($170)>>2)];
   $14=$171;
   var $172=$14;
   var $173=(($172)>>>(0)) < 2;
   if ($173) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $181 = 2;label = 13; break;
  case 12: 
   var $176=$14;
   var $177=((($176)+(1))|0);
   $13=$177;
   var $178=$13;
   var $179=((($178)+(3))|0);
   var $180=$179 & -4;
   var $181 = $180;label = 13; break;
  case 13: 
   var $181;
   var $182=((($181)-(1))|0);
   var $187 = $182;label = 15; break;
  case 14: 
   var $184=$__ms;
   var $185=((($184)-(1))|0);
   var $187 = $185;label = 15; break;
  case 15: 
   var $187;
   $__cap=$187;
   $9=$84;
   var $188=$9;
   var $189=(($188)|0);
   $8=$189;
   var $190=$8;
   var $191=$190;
   $7=$191;
   var $192=$7;
   var $193=$192;
   var $194=$__cap;
   var $195=((($194)+(1))|0);
   $4=$193;
   $5=$195;
   var $196=$4;
   var $197=$5;
   $1=$196;
   $2=$197;
   $3=0;
   var $198=$1;
   var $199=$2;
   var $200=($199<<2);
   var $201=__Znwj($200);
   var $202=$201;
   $__p=$202;
   $6=$84;
   var $203=$6;
   var $204=$77;
   var $205=(($204)|(0))!=0;
   if ($205) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $207=$__p;
   var $208=$__old_p;
   var $209=$77;
   $10=$207;
   $11=$208;
   $12=$209;
   var $210=$10;
   var $211=$11;
   var $212=$12;
   var $213=_wmemcpy($210, $211, $212);
   label = 17; break;
  case 17: 
   var $215=$79;
   var $216=(($215)|(0))!=0;
   if ($216) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $218=$__p;
   var $219=$77;
   var $220=(($218+($219<<2))|0);
   var $221=$80;
   var $222=$79;
   $15=$220;
   $16=$221;
   $17=$222;
   var $223=$15;
   var $224=$16;
   var $225=$17;
   var $226=_wmemcpy($223, $224, $225);
   label = 19; break;
  case 19: 
   var $228=$76;
   var $229=$78;
   var $230=((($228)-($229))|0);
   var $231=$77;
   var $232=((($230)-($231))|0);
   $__sec_cp_sz=$232;
   var $233=$__sec_cp_sz;
   var $234=(($233)|(0))!=0;
   if ($234) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $236=$__p;
   var $237=$77;
   var $238=(($236+($237<<2))|0);
   var $239=$79;
   var $240=(($238+($239<<2))|0);
   var $241=$__old_p;
   var $242=$77;
   var $243=(($241+($242<<2))|0);
   var $244=$78;
   var $245=(($243+($244<<2))|0);
   var $246=$__sec_cp_sz;
   $27=$240;
   $28=$245;
   $29=$246;
   var $247=$27;
   var $248=$28;
   var $249=$29;
   var $250=_wmemcpy($247, $248, $249);
   label = 21; break;
  case 21: 
   var $252=$74;
   var $253=((($252)+(1))|0);
   var $254=(($253)|(0))!=2;
   if ($254) { label = 22; break; } else { label = 23; break; }
  case 22: 
   $32=$84;
   var $256=$32;
   var $257=(($256)|0);
   $31=$257;
   var $258=$31;
   var $259=$258;
   $30=$259;
   var $260=$30;
   var $261=$260;
   var $262=$__old_p;
   var $263=$74;
   var $264=((($263)+(1))|0);
   $46=$261;
   $47=$262;
   $48=$264;
   var $265=$46;
   var $266=$47;
   var $267=$48;
   $43=$265;
   $44=$266;
   $45=$267;
   var $268=$43;
   var $269=$44;
   var $270=$269;
   __ZdlPv($270);
   label = 23; break;
  case 23: 
   var $272=$__p;
   $51=$84;
   $52=$272;
   var $273=$51;
   var $274=$52;
   var $275=(($273)|0);
   $50=$275;
   var $276=$50;
   var $277=$276;
   $49=$277;
   var $278=$49;
   var $279=(($278)|0);
   var $280=(($279)|0);
   var $281=$280;
   var $282=(($281+8)|0);
   HEAP32[(($282)>>2)]=$274;
   var $283=$__cap;
   var $284=((($283)+(1))|0);
   $55=$84;
   $56=$284;
   var $285=$55;
   var $286=$56;
   var $287=1 | $286;
   var $288=(($285)|0);
   $54=$288;
   var $289=$54;
   var $290=$289;
   $53=$290;
   var $291=$53;
   var $292=(($291)|0);
   var $293=(($292)|0);
   var $294=$293;
   var $295=(($294)|0);
   HEAP32[(($295)>>2)]=$287;
   var $296=$77;
   var $297=$79;
   var $298=((($296)+($297))|0);
   var $299=$__sec_cp_sz;
   var $300=((($298)+($299))|0);
   $76=$300;
   var $301=$76;
   $59=$84;
   $60=$301;
   var $302=$59;
   var $303=$60;
   var $304=(($302)|0);
   $58=$304;
   var $305=$58;
   var $306=$305;
   $57=$306;
   var $307=$57;
   var $308=(($307)|0);
   var $309=(($308)|0);
   var $310=$309;
   var $311=(($310+4)|0);
   HEAP32[(($311)>>2)]=$303;
   var $312=$76;
   var $313=$__p;
   var $314=(($313+($312<<2))|0);
   HEAP32[(($83)>>2)]=0;
   $61=$314;
   $62=$83;
   var $315=$62;
   var $316=HEAP32[(($315)>>2)];
   var $317=$61;
   HEAP32[(($317)>>2)]=$316;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this, $0, $1) {
 var label = 0;
 var $3;
 var $4;
 var $5;
 $3=$this;
 $4=$0;
 $5=$1;
 var $6=$3;
 return $6;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 return -1;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20=__stackBase__;
   var $21;
   var $22;
   var $23=(__stackBase__)+(8);
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56=(__stackBase__)+(16);
   var $57;
   var $58=(__stackBase__)+(24);
   var $59=(__stackBase__)+(32);
   var $60;
   var $61;
   var $62;
   var $63;
   var $__m_i;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $__ms;
   var $__old_p;
   var $__cap;
   var $71=(__stackBase__)+(40);
   var $72=(__stackBase__)+(48);
   var $__p;
   var $__sec_cp_sz;
   $64=$this;
   $65=$__old_cap;
   $66=$__delta_cap;
   $67=$__old_sz;
   $68=$__n_copy;
   $69=$__n_del;
   $70=$__n_add;
   var $73=$64;
   $63=$73;
   var $74=$63;
   $62=$74;
   var $75=$62;
   var $76=(($75)|0);
   $61=$76;
   var $77=$61;
   var $78=$77;
   $60=$78;
   var $79=$60;
   var $80=$79;
   $57=$80;
   var $81=$59;
   var $82=$57;
   var $tmp_i_i=$56;
   var $tmp1_i_i=$58;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $55=$82;
   var $83=$55;
   $54=$83;
   var $84=$54;
   $__m_i=1073741823;
   var $85=$__m_i;
   var $86=((($85)-(1))|0);
   $__ms=$86;
   var $87=$66;
   var $88=$__ms;
   var $89=$65;
   var $90=((($88)-($89))|0);
   var $91=((($90)-(1))|0);
   var $92=(($87)>>>(0)) > (($91)>>>(0));
   if ($92) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $94=$73;
   __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($94);
   label = 3; break;
  case 3: 
   $39=$73;
   var $96=$39;
   $38=$96;
   var $97=$38;
   var $98=(($97)|0);
   $37=$98;
   var $99=$37;
   var $100=$99;
   $36=$100;
   var $101=$36;
   var $102=(($101)|0);
   var $103=(($102)|0);
   var $104=$103;
   var $105=(($104)|0);
   var $106=$105;
   var $107=HEAP8[($106)];
   var $108=(($107)&(255));
   var $109=$108 & 1;
   var $110=(($109)|(0))!=0;
   if ($110) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $32=$96;
   var $112=$32;
   var $113=(($112)|0);
   $31=$113;
   var $114=$31;
   var $115=$114;
   $30=$115;
   var $116=$30;
   var $117=(($116)|0);
   var $118=(($117)|0);
   var $119=$118;
   var $120=(($119+8)|0);
   var $121=HEAP32[(($120)>>2)];
   var $133 = $121;label = 6; break;
  case 5: 
   $35=$96;
   var $123=$35;
   var $124=(($123)|0);
   $34=$124;
   var $125=$34;
   var $126=$125;
   $33=$126;
   var $127=$33;
   var $128=(($127)|0);
   var $129=(($128)|0);
   var $130=$129;
   var $131=(($130+4)|0);
   var $132=(($131)|0);
   var $133 = $132;label = 6; break;
  case 6: 
   var $133;
   $__old_p=$133;
   var $134=$65;
   var $135=$__ms;
   var $136=Math.floor(((($135)>>>(0)))/(2));
   var $137=((($136)-(16))|0);
   var $138=(($134)>>>(0)) < (($137)>>>(0));
   if ($138) { label = 7; break; } else { label = 14; break; }
  case 7: 
   var $140=$65;
   var $141=$66;
   var $142=((($140)+($141))|0);
   HEAP32[(($71)>>2)]=$142;
   var $143=$65;
   var $144=($143<<1);
   HEAP32[(($72)>>2)]=$144;
   $21=$71;
   $22=$72;
   var $145=$21;
   var $146=$22;
   var $tmp_i=$20;
   var $tmp1_i=$23;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $18=$145;
   $19=$146;
   var $147=$18;
   var $148=$19;
   $15=$20;
   $16=$147;
   $17=$148;
   var $149=$15;
   var $150=$16;
   var $151=HEAP32[(($150)>>2)];
   var $152=$17;
   var $153=HEAP32[(($152)>>2)];
   var $154=(($151)>>>(0)) < (($153)>>>(0));
   if ($154) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $156=$19;
   var $159 = $156;label = 10; break;
  case 9: 
   var $158=$18;
   var $159 = $158;label = 10; break;
  case 10: 
   var $159;
   var $160=HEAP32[(($159)>>2)];
   $11=$160;
   var $161=$11;
   var $162=(($161)>>>(0)) < 2;
   if ($162) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $170 = 2;label = 13; break;
  case 12: 
   var $165=$11;
   var $166=((($165)+(1))|0);
   $10=$166;
   var $167=$10;
   var $168=((($167)+(3))|0);
   var $169=$168 & -4;
   var $170 = $169;label = 13; break;
  case 13: 
   var $170;
   var $171=((($170)-(1))|0);
   var $176 = $171;label = 15; break;
  case 14: 
   var $173=$__ms;
   var $174=((($173)-(1))|0);
   var $176 = $174;label = 15; break;
  case 15: 
   var $176;
   $__cap=$176;
   $3=$73;
   var $177=$3;
   var $178=(($177)|0);
   $2=$178;
   var $179=$2;
   var $180=$179;
   $1=$180;
   var $181=$1;
   var $182=$181;
   var $183=$__cap;
   var $184=((($183)+(1))|0);
   $7=$182;
   $8=$184;
   var $185=$7;
   var $186=$8;
   $4=$185;
   $5=$186;
   $6=0;
   var $187=$4;
   var $188=$5;
   var $189=($188<<2);
   var $190=__Znwj($189);
   var $191=$190;
   $__p=$191;
   $9=$73;
   var $192=$9;
   var $193=$68;
   var $194=(($193)|(0))!=0;
   if ($194) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $196=$__p;
   var $197=$__old_p;
   var $198=$68;
   $12=$196;
   $13=$197;
   $14=$198;
   var $199=$12;
   var $200=$13;
   var $201=$14;
   var $202=_wmemcpy($199, $200, $201);
   label = 17; break;
  case 17: 
   var $204=$67;
   var $205=$69;
   var $206=((($204)-($205))|0);
   var $207=$68;
   var $208=((($206)-($207))|0);
   $__sec_cp_sz=$208;
   var $209=$__sec_cp_sz;
   var $210=(($209)|(0))!=0;
   if ($210) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $212=$__p;
   var $213=$68;
   var $214=(($212+($213<<2))|0);
   var $215=$70;
   var $216=(($214+($215<<2))|0);
   var $217=$__old_p;
   var $218=$68;
   var $219=(($217+($218<<2))|0);
   var $220=$69;
   var $221=(($219+($220<<2))|0);
   var $222=$__sec_cp_sz;
   $24=$216;
   $25=$221;
   $26=$222;
   var $223=$24;
   var $224=$25;
   var $225=$26;
   var $226=_wmemcpy($223, $224, $225);
   label = 19; break;
  case 19: 
   var $228=$65;
   var $229=((($228)+(1))|0);
   var $230=(($229)|(0))!=2;
   if ($230) { label = 20; break; } else { label = 21; break; }
  case 20: 
   $29=$73;
   var $232=$29;
   var $233=(($232)|0);
   $28=$233;
   var $234=$28;
   var $235=$234;
   $27=$235;
   var $236=$27;
   var $237=$236;
   var $238=$__old_p;
   var $239=$65;
   var $240=((($239)+(1))|0);
   $43=$237;
   $44=$238;
   $45=$240;
   var $241=$43;
   var $242=$44;
   var $243=$45;
   $40=$241;
   $41=$242;
   $42=$243;
   var $244=$40;
   var $245=$41;
   var $246=$245;
   __ZdlPv($246);
   label = 21; break;
  case 21: 
   var $248=$__p;
   $48=$73;
   $49=$248;
   var $249=$48;
   var $250=$49;
   var $251=(($249)|0);
   $47=$251;
   var $252=$47;
   var $253=$252;
   $46=$253;
   var $254=$46;
   var $255=(($254)|0);
   var $256=(($255)|0);
   var $257=$256;
   var $258=(($257+8)|0);
   HEAP32[(($258)>>2)]=$250;
   var $259=$__cap;
   var $260=((($259)+(1))|0);
   $52=$73;
   $53=$260;
   var $261=$52;
   var $262=$53;
   var $263=1 | $262;
   var $264=(($261)|0);
   $51=$264;
   var $265=$51;
   var $266=$265;
   $50=$266;
   var $267=$50;
   var $268=(($267)|0);
   var $269=(($268)|0);
   var $270=$269;
   var $271=(($270)|0);
   HEAP32[(($271)>>2)]=$263;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($2);
 return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this, $ev) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $i;
   $1=$this;
   $2=$ev;
   var $3=$1;
   var $4=(($3+40)|0);
   var $5=HEAP32[(($4)>>2)];
   $i=$5;
   label = 2; break;
  case 2: 
   var $7=$i;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $10=$i;
   var $11=((($10)-(1))|0);
   $i=$11;
   var $12=$i;
   var $13=(($3+32)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14+($12<<2))|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$2;
   var $18=$i;
   var $19=(($3+36)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+($18<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   FUNCTION_TABLE[$16]($17, $3, $22);
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18ios_base6getlocEv($agg_result, $this) {
 var label = 0;
 var $1;
 var $loc_storage;
 $1=$this;
 var $2=$1;
 var $3=(($2+28)|0);
 var $4=$3;
 $loc_storage=$4;
 var $5=$loc_storage;
 __ZNSt3__16localeC2ERKS0_($agg_result, $5);
 return;
}
function __ZNSt3__18ios_base4initEPv($this, $sb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$sb;
   var $3=$1;
   var $4=$2;
   var $5=(($3+24)|0);
   HEAP32[(($5)>>2)]=$4;
   var $6=(($3+24)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   var $9=$8 ? 0 : 1;
   var $10=(($3+16)|0);
   HEAP32[(($10)>>2)]=$9;
   var $11=(($3+20)|0);
   HEAP32[(($11)>>2)]=0;
   var $12=(($3+4)|0);
   HEAP32[(($12)>>2)]=4098;
   var $13=(($3+12)|0);
   HEAP32[(($13)>>2)]=0;
   var $14=(($3+8)|0);
   HEAP32[(($14)>>2)]=6;
   var $15=(($3+32)|0);
   HEAP32[(($15)>>2)]=0;
   var $16=(($3+36)|0);
   HEAP32[(($16)>>2)]=0;
   var $17=(($3+40)|0);
   HEAP32[(($17)>>2)]=0;
   var $18=(($3+44)|0);
   HEAP32[(($18)>>2)]=0;
   var $19=(($3+48)|0);
   HEAP32[(($19)>>2)]=0;
   var $20=(($3+52)|0);
   HEAP32[(($20)>>2)]=0;
   var $21=(($3+56)|0);
   HEAP32[(($21)>>2)]=0;
   var $22=(($3+60)|0);
   HEAP32[(($22)>>2)]=0;
   var $23=(($3+64)|0);
   HEAP32[(($23)>>2)]=0;
   var $24=(($3+68)|0);
   HEAP32[(($24)>>2)]=0;
   var $25=(($3+28)|0);
   var $26=$25;
   var $27=(($26)|(0))==0;
   if ($27) { var $31 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $29=$26;
   __ZNSt3__16localeC2Ev($29);
   var $31 = $29;label = 3; break;
  case 3: 
   var $31;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($2);
 return;
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($2);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((12880)|0);
 var $4=(($2+4)|0);
 __ZNSt3__16localeD2Ev($4);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((12880)|0);
 var $4=(($2+4)|0);
 __ZNSt3__16localeC2Ev($4);
 var $5=(($2+8)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($2+12)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($2+16)|0);
 HEAP32[(($7)>>2)]=0;
 var $8=(($2+20)|0);
 HEAP32[(($8)>>2)]=0;
 var $9=(($2+24)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=(($2+28)|0);
 HEAP32[(($10)>>2)]=0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result, $this, $0$0, $0$1, $1, $2) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $4;
 var $5=__stackBase__;
 var $6;
 var $7=(__stackBase__)+(8);
 var $8;
 var $9=(__stackBase__)+(16);
 var $10;
 var $11;
 $8=$this;
 var $st$0$0=(($9)|0);
 HEAP32[(($st$0$0)>>2)]=$0$0;
 var $st$1$1=(($9+4)|0);
 HEAP32[(($st$1$1)>>2)]=$0$1;
 $10=$1;
 $11=$2;
 var $12=$8;
 $6=$agg_result;
 var $$etemp$2$0=-1;
 var $$etemp$2$1=-1;
 var $st$3$0=(($7)|0);
 HEAP32[(($st$3$0)>>2)]=$$etemp$2$0;
 var $st$4$1=(($7+4)|0);
 HEAP32[(($st$4$1)>>2)]=$$etemp$2$1;
 var $13=$6;
 var $ld$5$0=(($7)|0);
 var $14$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($7+4)|0);
 var $14$1=HEAP32[(($ld$6$1)>>2)];
 $4=$13;
 var $st$7$0=(($5)|0);
 HEAP32[(($st$7$0)>>2)]=$14$0;
 var $st$8$1=(($5+4)|0);
 HEAP32[(($st$8$1)>>2)]=$14$1;
 var $15=$4;
 var $16=(($15)|0);
 var $17=$16;
 HEAP32[(($17)>>2)]=0; HEAP32[((($17)+(4))>>2)]=0;
 var $18=(($15+8)|0);
 var $ld$9$0=(($5)|0);
 var $19$0=HEAP32[(($ld$9$0)>>2)];
 var $ld$10$1=(($5+4)|0);
 var $19$1=HEAP32[(($ld$10$1)>>2)];
 var $st$11$0=(($18)|0);
 HEAP32[(($st$11$0)>>2)]=$19$0;
 var $st$12$1=(($18+4)|0);
 HEAP32[(($st$12$1)>>2)]=$19$1;
 STACKTOP = __stackBase__;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI10_mbstate_tEEj($agg_result, $this, $0, $1) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0 = STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $3;
 var $4=__stackBase__;
 var $5;
 var $6=(__stackBase__)+(8);
 var $7;
 var $8;
 $7=$this;
 $8=$1;
 var $9=$7;
 $5=$agg_result;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $st$1$0=(($6)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($6+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $10=$5;
 var $ld$3$0=(($6)|0);
 var $11$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($6+4)|0);
 var $11$1=HEAP32[(($ld$4$1)>>2)];
 $3=$10;
 var $st$5$0=(($4)|0);
 HEAP32[(($st$5$0)>>2)]=$11$0;
 var $st$6$1=(($4+4)|0);
 HEAP32[(($st$6$1)>>2)]=$11$1;
 var $12=$3;
 var $13=(($12)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0;
 var $15=(($12+8)|0);
 var $ld$7$0=(($4)|0);
 var $16$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($4+4)|0);
 var $16$1=HEAP32[(($ld$8$1)>>2)];
 var $st$9$0=(($15)|0);
 HEAP32[(($st$9$0)>>2)]=$16$0;
 var $st$10$1=(($15+4)|0);
 HEAP32[(($st$10$1)>>2)]=$16$1;
 STACKTOP = __stackBase__;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this, $__s, $__n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $__eof;
   var $__c;
   var $__i;
   $2=$this;
   $3=$__s;
   $4=$__n;
   var $5=$2;
   $__eof=-1;
   $__i=0;
   label = 2; break;
  case 2: 
   var $7=$__i;
   var $8=$4;
   var $9=(($7)|(0)) < (($8)|(0));
   if ($9) { label = 3; break; } else { label = 11; break; }
  case 3: 
   var $11=(($5+12)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($5+16)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)>>>(0)) < (($14)>>>(0));
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=(($5+12)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+1)|0);
   HEAP32[(($17)>>2)]=$19;
   var $20=HEAP8[($18)];
   var $21=$3;
   HEAP8[($21)]=$20;
   label = 9; break;
  case 5: 
   var $23=$5;
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24+40)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=FUNCTION_TABLE[$26]($5);
   $__c=$27;
   var $28=(($27)|(0))!=-1;
   if ($28) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $30=$__c;
   $1=$30;
   var $31=$1;
   var $32=(($31) & 255);
   var $33=$3;
   HEAP8[($33)]=$32;
   label = 8; break;
  case 7: 
   label = 11; break;
  case 8: 
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $38=$__i;
   var $39=((($38)+(1))|0);
   $__i=$39;
   var $40=$3;
   var $41=(($40+1)|0);
   $3=$41;
   label = 2; break;
  case 11: 
   var $43=$__i;
   return $43;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $3=$this;
   var $4=$3;
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6+36)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=FUNCTION_TABLE[$8]($4);
   var $10=(($9)|(0))==-1;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=-1;
   label = 4; break;
  case 3: 
   var $13=(($4+12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14+1)|0);
   HEAP32[(($13)>>2)]=$15;
   var $16=HEAP8[($14)];
   $1=$16;
   var $17=$1;
   var $18=(($17)&(255));
   $2=$18;
   label = 4; break;
  case 4: 
   var $20=$2;
   return $20;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base5clearEj($this, $state) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11=__stackBase__;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17=(__stackBase__)+(8);
   var $18;
   var $19;
   $15=$this;
   $16=$state;
   var $20=$15;
   var $21=(($20+24)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))!=0;
   if ($23) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $25=$16;
   var $26=(($20+16)|0);
   HEAP32[(($26)>>2)]=$25;
   label = 4; break;
  case 3: 
   var $28=$16;
   var $29=$28 | 1;
   var $30=(($20+16)|0);
   HEAP32[(($30)>>2)]=$29;
   label = 4; break;
  case 4: 
   var $32=$16;
   var $33=(($20+24)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34)|(0))!=0;
   var $36=$35 ? 0 : 1;
   var $37=$32 | $36;
   var $38=(($20+20)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$37 & $39;
   var $41=(($40)|(0))!=0;
   if ($41) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $43=___cxa_allocate_exception(16);
   var $44=$43;
   $12=$17;
   $13=1;
   $14=0;
   var $45=$12;
   var $46=$13;
   var $47=$14;
   $8=$45;
   $9=$46;
   $10=$47;
   var $48=$8;
   var $49=$9;
   $7=$49;
   var $50=$7;
   var $51=__ZNSt3__117iostream_categoryEv();
   $4=$11;
   $5=$50;
   $6=$51;
   var $52=$4;
   var $53=$5;
   var $54=$6;
   $1=$52;
   $2=$53;
   $3=$54;
   var $55=$1;
   var $56=(($55)|0);
   var $57=$2;
   HEAP32[(($56)>>2)]=$57;
   var $58=(($55+4)|0);
   var $59=$3;
   HEAP32[(($58)>>2)]=$59;
   var $60=$48;
   var $61=$11;
   assert(8 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($44, ((2704)|0), $17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 7; break; }
  case 6: 
   ___cxa_throw($43, 17936, (526));
   throw "Reached an unreachable!";
  case 7: 
   var $64$0 = ___cxa_find_matching_catch(-1, -1); $64$1 = tempRet0;
   var $65=$64$0;
   $18=$65;
   var $66=$64$1;
   $19=$66;
   ___cxa_free_exception($43);
   label = 9; break;
  case 8: 
   STACKTOP = __stackBase__;
   return;
  case 9: 
   var $69=$18;
   var $70=$19;
   var $71$0=$69;
   var $71$1=0;
   var $72$0=$71$0;
   var $72$1=$70;
   ___resumeException($72$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $loc_storage;
   $1=$this;
   var $2=$1;
   var $3=$2;
   HEAP32[(($3)>>2)]=((11712)|0);
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($2, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=(($2+28)|0);
   var $6=$5;
   $loc_storage=$6;
   var $7=$loc_storage;
   __ZNSt3__16localeD2Ev($7);
   var $8=(($2+32)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9;
   _free($10);
   var $11=(($2+36)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   _free($13);
   var $14=(($2+48)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$15;
   _free($16);
   var $17=(($2+60)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   _free($19);
   return;
  case 3: 
   var $21$0 = ___cxa_find_matching_catch(-1, -1,0); $21$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this, $0, $1) {
 var label = 0;
 var $3;
 var $4;
 var $5;
 $3=$this;
 $4=$0;
 $5=$1;
 var $6=$3;
 return $6;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEi($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEi($this, $0) {
 var label = 0;
 var $2;
 var $3;
 $2=$this;
 $3=$0;
 var $4=$2;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this, $vtt) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$vtt;
 var $3=$1;
 var $4=$2;
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED2Ev($this, $vtt) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$vtt;
 var $3=$1;
 var $4=$2;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this, $__s, $__n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $__i;
   var $__eof;
   $2=$this;
   $3=$__s;
   $4=$__n;
   var $5=$2;
   $__i=0;
   $__eof=-1;
   label = 2; break;
  case 2: 
   var $7=$__i;
   var $8=$4;
   var $9=(($7)|(0)) < (($8)|(0));
   if ($9) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $11=(($5+24)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($5+28)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)>>>(0)) < (($14)>>>(0));
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=$3;
   var $18=HEAP8[($17)];
   var $19=(($5+24)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+1)|0);
   HEAP32[(($19)>>2)]=$21;
   HEAP8[($20)]=$18;
   label = 8; break;
  case 5: 
   var $23=$5;
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24+52)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$3;
   var $28=HEAP8[($27)];
   $1=$28;
   var $29=$1;
   var $30=(($29)&(255));
   var $31=FUNCTION_TABLE[$26]($5, $30);
   var $32=$__eof;
   var $33=(($31)|(0))==(($32)|(0));
   if ($33) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 10; break;
  case 7: 
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $38=$3;
   var $39=(($38+1)|0);
   $3=$39;
   var $40=$__i;
   var $41=((($40)+(1))|0);
   $__i=$41;
   label = 2; break;
  case 10: 
   var $43=$__i;
   return $43;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($2);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((12808)|0);
 var $4=(($2+4)|0);
 __ZNSt3__16localeD2Ev($4);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((12808)|0);
 var $4=(($2+4)|0);
 __ZNSt3__16localeC2Ev($4);
 var $5=(($2+8)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($2+12)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($2+16)|0);
 HEAP32[(($7)>>2)]=0;
 var $8=(($2+20)|0);
 HEAP32[(($8)>>2)]=0;
 var $9=(($2+24)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=(($2+28)|0);
 HEAP32[(($10)>>2)]=0;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg_result, $this, $0$0, $0$1, $1, $2) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $4;
 var $5=__stackBase__;
 var $6;
 var $7=(__stackBase__)+(8);
 var $8;
 var $9=(__stackBase__)+(16);
 var $10;
 var $11;
 $8=$this;
 var $st$0$0=(($9)|0);
 HEAP32[(($st$0$0)>>2)]=$0$0;
 var $st$1$1=(($9+4)|0);
 HEAP32[(($st$1$1)>>2)]=$0$1;
 $10=$1;
 $11=$2;
 var $12=$8;
 $6=$agg_result;
 var $$etemp$2$0=-1;
 var $$etemp$2$1=-1;
 var $st$3$0=(($7)|0);
 HEAP32[(($st$3$0)>>2)]=$$etemp$2$0;
 var $st$4$1=(($7+4)|0);
 HEAP32[(($st$4$1)>>2)]=$$etemp$2$1;
 var $13=$6;
 var $ld$5$0=(($7)|0);
 var $14$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($7+4)|0);
 var $14$1=HEAP32[(($ld$6$1)>>2)];
 $4=$13;
 var $st$7$0=(($5)|0);
 HEAP32[(($st$7$0)>>2)]=$14$0;
 var $st$8$1=(($5+4)|0);
 HEAP32[(($st$8$1)>>2)]=$14$1;
 var $15=$4;
 var $16=(($15)|0);
 var $17=$16;
 HEAP32[(($17)>>2)]=0; HEAP32[((($17)+(4))>>2)]=0;
 var $18=(($15+8)|0);
 var $ld$9$0=(($5)|0);
 var $19$0=HEAP32[(($ld$9$0)>>2)];
 var $ld$10$1=(($5+4)|0);
 var $19$1=HEAP32[(($ld$10$1)>>2)];
 var $st$11$0=(($18)|0);
 HEAP32[(($st$11$0)>>2)]=$19$0;
 var $st$12$1=(($18+4)|0);
 HEAP32[(($st$12$1)>>2)]=$19$1;
 STACKTOP = __stackBase__;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI10_mbstate_tEEj($agg_result, $this, $0, $1) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0 = STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $3;
 var $4=__stackBase__;
 var $5;
 var $6=(__stackBase__)+(8);
 var $7;
 var $8;
 $7=$this;
 $8=$1;
 var $9=$7;
 $5=$agg_result;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $st$1$0=(($6)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($6+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $10=$5;
 var $ld$3$0=(($6)|0);
 var $11$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($6+4)|0);
 var $11$1=HEAP32[(($ld$4$1)>>2)];
 $3=$10;
 var $st$5$0=(($4)|0);
 HEAP32[(($st$5$0)>>2)]=$11$0;
 var $st$6$1=(($4+4)|0);
 HEAP32[(($st$6$1)>>2)]=$11$1;
 var $12=$3;
 var $13=(($12)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0;
 var $15=(($12+8)|0);
 var $ld$7$0=(($4)|0);
 var $16$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($4+4)|0);
 var $16$1=HEAP32[(($ld$8$1)>>2)];
 var $st$9$0=(($15)|0);
 HEAP32[(($st$9$0)>>2)]=$16$0;
 var $st$10$1=(($15+4)|0);
 HEAP32[(($st$10$1)>>2)]=$16$1;
 STACKTOP = __stackBase__;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this, $__s, $__n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $__eof;
   var $__c;
   var $__i;
   $2=$this;
   $3=$__s;
   $4=$__n;
   var $5=$2;
   $__eof=-1;
   $__i=0;
   label = 2; break;
  case 2: 
   var $7=$__i;
   var $8=$4;
   var $9=(($7)|(0)) < (($8)|(0));
   if ($9) { label = 3; break; } else { label = 11; break; }
  case 3: 
   var $11=(($5+12)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($5+16)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)>>>(0)) < (($14)>>>(0));
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=(($5+12)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+4)|0);
   HEAP32[(($17)>>2)]=$19;
   var $20=HEAP32[(($18)>>2)];
   var $21=$3;
   HEAP32[(($21)>>2)]=$20;
   label = 9; break;
  case 5: 
   var $23=$5;
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24+40)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=FUNCTION_TABLE[$26]($5);
   $__c=$27;
   var $28=(($27)|(0))!=-1;
   if ($28) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $30=$__c;
   $1=$30;
   var $31=$1;
   var $32=$3;
   HEAP32[(($32)>>2)]=$31;
   label = 8; break;
  case 7: 
   label = 11; break;
  case 8: 
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $37=$__i;
   var $38=((($37)+(1))|0);
   $__i=$38;
   var $39=$3;
   var $40=(($39+4)|0);
   $3=$40;
   label = 2; break;
  case 11: 
   var $42=$__i;
   return $42;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $3=$this;
   var $4=$3;
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6+36)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=FUNCTION_TABLE[$8]($4);
   var $10=(($9)|(0))==-1;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=-1;
   label = 4; break;
  case 3: 
   var $13=(($4+12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14+4)|0);
   HEAP32[(($13)>>2)]=$15;
   var $16=HEAP32[(($14)>>2)];
   $1=$16;
   var $17=$1;
   $2=$17;
   label = 4; break;
  case 4: 
   var $19=$2;
   return $19;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this, $__s, $__n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $__i;
   var $__eof;
   $2=$this;
   $3=$__s;
   $4=$__n;
   var $5=$2;
   $__i=0;
   $__eof=-1;
   label = 2; break;
  case 2: 
   var $7=$__i;
   var $8=$4;
   var $9=(($7)|(0)) < (($8)|(0));
   if ($9) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $11=(($5+24)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($5+28)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)>>>(0)) < (($14)>>>(0));
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=$3;
   var $18=HEAP32[(($17)>>2)];
   var $19=(($5+24)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+4)|0);
   HEAP32[(($19)>>2)]=$21;
   HEAP32[(($20)>>2)]=$18;
   label = 8; break;
  case 5: 
   var $23=$5;
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24+52)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$3;
   var $28=HEAP32[(($27)>>2)];
   $1=$28;
   var $29=$1;
   var $30=FUNCTION_TABLE[$26]($5, $29);
   var $31=$__eof;
   var $32=(($30)|(0))==(($31)|(0));
   if ($32) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 10; break;
  case 7: 
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $37=$3;
   var $38=(($37+4)|0);
   $3=$38;
   var $39=$__i;
   var $40=((($39)+(1))|0);
   $__i=$40;
   label = 2; break;
  case 10: 
   var $42=$__i;
   return $42;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($2, ((13952)|0));
 var $3=$2;
 var $4=(($3+8)|0);
 var $5=$4;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($5);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($10);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($10);
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED2Ev($2, ((13944)|0));
 var $3=$2;
 var $4=(($3+8)|0);
 var $5=$4;
 __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($5);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($10);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($10);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev($2, ((13936)|0));
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=$4;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($5);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($10);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $__s=__stackBase__;
   $11=$this;
   var $14=$11;
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=((($16)-(12))|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$14;
   var $21=(($20+$19)|0);
   var $22=$21;
   $10=$22;
   var $23=$10;
   var $24=$23;
   $9=$24;
   var $25=$9;
   var $26=(($25+24)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$27;
   label = 2; break;
  case 2: 
   var $30=(($28)|(0))!=0;
   if ($30) { label = 3; break; } else { label = 20; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($__s, $14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 13; break; }
  case 4: 
   $8=$__s;
   var $33=$8;
   var $34=(($33)|0);
   var $35=HEAP8[($34)];
   var $36=(($35) & 1);
   label = 5; break;
  case 5: 
   if ($36) { label = 6; break; } else { label = 19; break; }
  case 6: 
   var $39=$14;
   var $40=HEAP32[(($39)>>2)];
   var $41=((($40)-(12))|0);
   var $42=$41;
   var $43=HEAP32[(($42)>>2)];
   var $44=$14;
   var $45=(($44+$43)|0);
   var $46=$45;
   $7=$46;
   var $47=$7;
   var $48=$47;
   $6=$48;
   var $49=$6;
   var $50=(($49+24)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$51;
   label = 7; break;
  case 7: 
   $5=$52;
   var $54=$5;
   var $55=$54;
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56+24)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 14; break; }
  case 8: 
   label = 9; break;
  case 9: 
   var $61=(($59)|(0))==-1;
   if ($61) { label = 10; break; } else { label = 18; break; }
  case 10: 
   var $63=$14;
   var $64=HEAP32[(($63)>>2)];
   var $65=((($64)-(12))|0);
   var $66=$65;
   var $67=HEAP32[(($66)>>2)];
   var $68=$14;
   var $69=(($68+$67)|0);
   var $70=$69;
   $3=$70;
   $4=1;
   var $71=$3;
   var $72=$71;
   var $73=$4;
   $1=$72;
   $2=$73;
   var $74=$1;
   var $75=(($74+16)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$2;
   var $78=$76 | $77;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($74, $78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 14; break; }
  case 11: 
   label = 12; break;
  case 12: 
   label = 18; break;
  case 13: 
   var $81$0 = ___cxa_find_matching_catch(-1, -1,0); $81$1 = tempRet0;
   var $82=$81$0;
   $12=$82;
   var $83=$81$1;
   $13=$83;
   label = 15; break;
  case 14: 
   var $85$0 = ___cxa_find_matching_catch(-1, -1,0); $85$1 = tempRet0;
   var $86=$85$0;
   $12=$86;
   var $87=$85$1;
   $13=$87;
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
   label = 15; break;
  case 15: 
   var $89=$12;
   var $90=___cxa_begin_catch($89);
   var $91=$14;
   var $92=HEAP32[(($91)>>2)];
   var $93=((($92)-(12))|0);
   var $94=$93;
   var $95=HEAP32[(($94)>>2)];
   var $96=$14;
   var $97=(($96+$95)|0);
   var $98=$97;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($98) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 21; break; }
  case 16: 
   ___cxa_end_catch();
   label = 17; break;
  case 17: 
   STACKTOP = __stackBase__;
   return $14;
  case 18: 
   label = 19; break;
  case 19: 
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
   label = 20; break;
  case 20: 
   label = 17; break;
  case 21: 
   var $105$0 = ___cxa_find_matching_catch(-1, -1); $105$1 = tempRet0;
   var $106=$105$0;
   $12=$106;
   var $107=$105$1;
   $13=$107;
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 24; break; }
  case 22: 
   label = 23; break;
  case 23: 
   var $110=$12;
   var $111=$13;
   var $112$0=$110;
   var $112$1=0;
   var $113$0=$112$0;
   var $113$1=$111;
   ___resumeException($113$0)
  case 24: 
   var $115$0 = ___cxa_find_matching_catch(-1, -1,0); $115$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+16)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$4 | 1;
   HEAP32[(($3)>>2)]=$5;
   var $6=(($2+20)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 1;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   ___cxa_rethrow();
   throw "Reached an unreachable!";
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $__s=__stackBase__;
   $11=$this;
   var $14=$11;
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=((($16)-(12))|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$14;
   var $21=(($20+$19)|0);
   var $22=$21;
   $10=$22;
   var $23=$10;
   var $24=$23;
   $9=$24;
   var $25=$9;
   var $26=(($25+24)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$27;
   label = 2; break;
  case 2: 
   var $30=(($28)|(0))!=0;
   if ($30) { label = 3; break; } else { label = 20; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC1ERS3_($__s, $14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 13; break; }
  case 4: 
   $8=$__s;
   var $33=$8;
   var $34=(($33)|0);
   var $35=HEAP8[($34)];
   var $36=(($35) & 1);
   label = 5; break;
  case 5: 
   if ($36) { label = 6; break; } else { label = 19; break; }
  case 6: 
   var $39=$14;
   var $40=HEAP32[(($39)>>2)];
   var $41=((($40)-(12))|0);
   var $42=$41;
   var $43=HEAP32[(($42)>>2)];
   var $44=$14;
   var $45=(($44+$43)|0);
   var $46=$45;
   $7=$46;
   var $47=$7;
   var $48=$47;
   $6=$48;
   var $49=$6;
   var $50=(($49+24)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$51;
   label = 7; break;
  case 7: 
   $5=$52;
   var $54=$5;
   var $55=$54;
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56+24)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 14; break; }
  case 8: 
   label = 9; break;
  case 9: 
   var $61=(($59)|(0))==-1;
   if ($61) { label = 10; break; } else { label = 18; break; }
  case 10: 
   var $63=$14;
   var $64=HEAP32[(($63)>>2)];
   var $65=((($64)-(12))|0);
   var $66=$65;
   var $67=HEAP32[(($66)>>2)];
   var $68=$14;
   var $69=(($68+$67)|0);
   var $70=$69;
   $3=$70;
   $4=1;
   var $71=$3;
   var $72=$71;
   var $73=$4;
   $1=$72;
   $2=$73;
   var $74=$1;
   var $75=(($74+16)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$2;
   var $78=$76 | $77;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($74, $78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 14; break; }
  case 11: 
   label = 12; break;
  case 12: 
   label = 18; break;
  case 13: 
   var $81$0 = ___cxa_find_matching_catch(-1, -1,0); $81$1 = tempRet0;
   var $82=$81$0;
   $12=$82;
   var $83=$81$1;
   $13=$83;
   label = 15; break;
  case 14: 
   var $85$0 = ___cxa_find_matching_catch(-1, -1,0); $85$1 = tempRet0;
   var $86=$85$0;
   $12=$86;
   var $87=$85$1;
   $13=$87;
   __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD1Ev($__s);
   label = 15; break;
  case 15: 
   var $89=$12;
   var $90=___cxa_begin_catch($89);
   var $91=$14;
   var $92=HEAP32[(($91)>>2)];
   var $93=((($92)-(12))|0);
   var $94=$93;
   var $95=HEAP32[(($94)>>2)];
   var $96=$14;
   var $97=(($96+$95)|0);
   var $98=$97;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($98) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 21; break; }
  case 16: 
   ___cxa_end_catch();
   label = 17; break;
  case 17: 
   STACKTOP = __stackBase__;
   return $14;
  case 18: 
   label = 19; break;
  case 19: 
   __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD1Ev($__s);
   label = 20; break;
  case 20: 
   label = 17; break;
  case 21: 
   var $105$0 = ___cxa_find_matching_catch(-1, -1); $105$1 = tempRet0;
   var $106=$105$0;
   $12=$106;
   var $107=$105$1;
   $13=$107;
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 24; break; }
  case 22: 
   label = 23; break;
  case 23: 
   var $110=$12;
   var $111=$13;
   var $112$0=$110;
   var $112$1=0;
   var $113$0=$112$0;
   var $113$1=$111;
   ___resumeException($113$0)
  case 24: 
   var $115$0 = ___cxa_find_matching_catch(-1, -1,0); $115$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev($this, $vtt) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$vtt;
 var $3=$1;
 var $4=$2;
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED2Ev($this, $vtt) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$vtt;
 var $3=$1;
 var $4=$2;
 return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return ((3224)|0);
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   $2=$this;
   $3=$__lo1;
   $4=$__hi1;
   $5=$__lo2;
   $6=$__hi2;
   var $7=$2;
   label = 2; break;
  case 2: 
   var $9=$5;
   var $10=$6;
   var $11=(($9)|(0))!=(($10)|(0));
   if ($11) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $13=$3;
   var $14=$4;
   var $15=(($13)|(0))==(($14)|(0));
   if ($15) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $17=$3;
   var $18=HEAP8[($17)];
   var $19=(($18 << 24) >> 24);
   var $20=$5;
   var $21=HEAP8[($20)];
   var $22=(($21 << 24) >> 24);
   var $23=(($19)|(0)) < (($22)|(0));
   if ($23) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $1=-1;
   label = 11; break;
  case 6: 
   var $26=$5;
   var $27=HEAP8[($26)];
   var $28=(($27 << 24) >> 24);
   var $29=$3;
   var $30=HEAP8[($29)];
   var $31=(($30 << 24) >> 24);
   var $32=(($28)|(0)) < (($31)|(0));
   if ($32) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $1=1;
   label = 11; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $36=$3;
   var $37=(($36+1)|0);
   $3=$37;
   var $38=$5;
   var $39=(($38+1)|0);
   $5=$39;
   label = 2; break;
  case 10: 
   var $41=$3;
   var $42=$4;
   var $43=(($41)|(0))!=(($42)|(0));
   var $44=(($43)&(1));
   $1=$44;
   label = 11; break;
  case 11: 
   var $46=$1;
   return $46;
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($10);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this, $__os) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$__os;
 var $3=$1;
 var $4=$2;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($3, $4);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this, $__os) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   $5=$this;
   $6=$__os;
   var $7=$5;
   var $8=(($7)|0);
   HEAP8[($8)]=0;
   var $9=(($7+4)|0);
   var $10=$6;
   HEAP32[(($9)>>2)]=$10;
   var $11=$6;
   var $12=$11;
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(12))|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$11;
   var $18=(($17+$16)|0);
   var $19=$18;
   $4=$19;
   var $20=$4;
   var $21=$20;
   $3=$21;
   var $22=$3;
   var $23=(($22+16)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==0;
   if ($25) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $27=$6;
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=((($29)-(12))|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$27;
   var $34=(($33+$32)|0);
   var $35=$34;
   $2=$35;
   var $36=$2;
   var $37=(($36+72)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38)|(0))!=0;
   if ($39) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $41=$6;
   var $42=$41;
   var $43=HEAP32[(($42)>>2)];
   var $44=((($43)-(12))|0);
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   var $47=$41;
   var $48=(($47+$46)|0);
   var $49=$48;
   $1=$49;
   var $50=$1;
   var $51=(($50+72)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($52);
   label = 4; break;
  case 4: 
   var $55=(($7)|0);
   HEAP8[($55)]=1;
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($2);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED2Ev($2, ((13928)|0));
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=$4;
 __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($5);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($10);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)-(12))|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($3+$8)|0);
 var $10=$9;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($10);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC1ERS3_($this, $__os) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$__os;
 var $3=$1;
 var $4=$2;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($3, $4);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this, $__os) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   $5=$this;
   $6=$__os;
   var $7=$5;
   var $8=(($7)|0);
   HEAP8[($8)]=0;
   var $9=(($7+4)|0);
   var $10=$6;
   HEAP32[(($9)>>2)]=$10;
   var $11=$6;
   var $12=$11;
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(12))|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$11;
   var $18=(($17+$16)|0);
   var $19=$18;
   $4=$19;
   var $20=$4;
   var $21=$20;
   $3=$21;
   var $22=$3;
   var $23=(($22+16)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==0;
   if ($25) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $27=$6;
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=((($29)-(12))|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$27;
   var $34=(($33+$32)|0);
   var $35=$34;
   $2=$35;
   var $36=$2;
   var $37=(($36+72)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38)|(0))!=0;
   if ($39) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $41=$6;
   var $42=$41;
   var $43=HEAP32[(($42)>>2)];
   var $44=((($43)-(12))|0);
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   var $47=$41;
   var $48=(($47+$46)|0);
   var $49=$48;
   $1=$49;
   var $50=$1;
   var $51=(($50+72)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($52);
   label = 4; break;
  case 4: 
   var $55=(($7)|0);
   HEAP8[($55)]=1;
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($2);
 return;
}
function __ZNKSt3__119__iostream_category7messageEi($agg_result, $this, $ev) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   $10=$this;
   $11=$ev;
   var $12=$10;
   var $13=$11;
   var $14=(($13)|(0))!=1;
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $16=$12;
   var $17=$11;
   __ZNKSt3__112__do_message7messageEi($agg_result, $16, $17);
   label = 4; break;
  case 3: 
   $8=$agg_result;
   $9=((4008)|0);
   var $19=$8;
   var $20=$9;
   $6=$19;
   $7=$20;
   var $21=$6;
   var $22=$21;
   var $23=(($21)|0);
   $5=$23;
   var $24=$5;
   $4=$24;
   var $25=$4;
   var $26=$25;
   $3=$26;
   var $27=$3;
   var $28=$27;
   $2=$28;
   var $29=$2;
   var $30=(($27)|0);
   var $31=$7;
   var $32=$7;
   $1=$32;
   var $33=$1;
   var $34=_strlen($33);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($21, $31, $34);
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__117iostream_categoryEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(20440)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNSt3__119__iostream_categoryC1Ev(9752);
   var $4=_atexit((226), 9752, ___dso_handle);
   HEAP8[(20440)]=1;
   label = 3; break;
  case 3: 
   return ((9752)|0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__iostream_categoryC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__119__iostream_categoryC2Ev($2);
 return;
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__119__iostream_categoryD2Ev($2);
 return;
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this, $msg, $ec) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4=__stackBase__;
 $1=$this;
 $2=$msg;
 $3=$ec;
 var $5=$1;
 var $6=$5;
 var $7=$3;
 var $8=$4;
 var $9=$7;
 assert(8 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];
 var $10=$2;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($6, $4, $10);
 var $11=$5;
 HEAP32[(($11)>>2)]=((11736)|0);
 STACKTOP = __stackBase__;
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__18ios_base7failureD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__112system_errorD2Ev($3);
 return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__18ios_baseD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__119__iostream_categoryD1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__119__iostream_categoryD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__112__do_messageD2Ev($3);
 return;
}
function __ZNSt3__119__iostream_categoryC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__112__do_messageC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((12648)|0);
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__17collateIcED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__17collateIcED2Ev($2);
 return;
}
function __ZNSt3__17collateIcED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__16locale5facetD2Ev($3);
 return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__114__shared_countD2Ev($3);
 return;
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg_result, $this, $__lo, $__hi) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 $11=$this;
 $12=$__lo;
 $13=$__hi;
 var $14=$11;
 var $15=$12;
 var $16=$13;
 $8=$agg_result;
 $9=$15;
 $10=$16;
 var $17=$8;
 var $18=$9;
 var $19=$10;
 $5=$17;
 $6=$18;
 $7=$19;
 var $20=$5;
 var $21=$20;
 var $22=(($20)|0);
 $4=$22;
 var $23=$4;
 $3=$23;
 var $24=$3;
 var $25=$24;
 $2=$25;
 var $26=$2;
 var $27=$26;
 $1=$27;
 var $28=$1;
 var $29=(($26)|0);
 var $30=$6;
 var $31=$7;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($20, $30, $31);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   $13=$this;
   var $16=$13;
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(12))|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=$18;
   var $25=(($24+$23)|0);
   var $26=$25;
   $12=$26;
   var $27=$12;
   var $28=$27;
   $11=$28;
   var $29=$11;
   var $30=(($29+24)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$31;
   label = 2; break;
  case 2: 
   var $34=(($32)|(0))!=0;
   if ($34) { label = 3; break; } else { label = 20; break; }
  case 3: 
   var $36=(($16+4)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$37;
   var $39=HEAP32[(($38)>>2)];
   var $40=((($39)-(12))|0);
   var $41=$40;
   var $42=HEAP32[(($41)>>2)];
   var $43=$37;
   var $44=(($43+$42)|0);
   var $45=$44;
   $6=$45;
   var $46=$6;
   var $47=$46;
   $5=$47;
   var $48=$5;
   var $49=(($48+16)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50)|(0))==0;
   label = 4; break;
  case 4: 
   if ($51) { label = 5; break; } else { label = 20; break; }
  case 5: 
   var $54=(($16+4)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$55;
   var $57=HEAP32[(($56)>>2)];
   var $58=((($57)-(12))|0);
   var $59=$58;
   var $60=HEAP32[(($59)>>2)];
   var $61=$55;
   var $62=(($61+$60)|0);
   var $63=$62;
   $3=$63;
   var $64=$3;
   var $65=(($64+4)|0);
   var $66=HEAP32[(($65)>>2)];
   label = 6; break;
  case 6: 
   var $68=$66 & 8192;
   var $69=(($68)|(0))!=0;
   if ($69) { label = 7; break; } else { label = 20; break; }
  case 7: 
   var $71=__ZSt18uncaught_exceptionv();
   if ($71) { label = 20; break; } else { label = 8; break; }
  case 8: 
   var $73=(($16+4)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=$74;
   var $76=HEAP32[(($75)>>2)];
   var $77=((($76)-(12))|0);
   var $78=$77;
   var $79=HEAP32[(($78)>>2)];
   var $80=$74;
   var $81=(($80+$79)|0);
   var $82=$81;
   $2=$82;
   var $83=$2;
   var $84=$83;
   $1=$84;
   var $85=$1;
   var $86=(($85+24)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$87;
   label = 9; break;
  case 9: 
   $4=$88;
   var $90=$4;
   var $91=$90;
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92+24)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$94]($90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 15; break; }
  case 10: 
   label = 11; break;
  case 11: 
   var $97=(($95)|(0))==-1;
   if ($97) { label = 12; break; } else { label = 19; break; }
  case 12: 
   var $99=(($16+4)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=$100;
   var $102=HEAP32[(($101)>>2)];
   var $103=((($102)-(12))|0);
   var $104=$103;
   var $105=HEAP32[(($104)>>2)];
   var $106=$100;
   var $107=(($106+$105)|0);
   var $108=$107;
   $9=$108;
   $10=1;
   var $109=$9;
   var $110=$109;
   var $111=$10;
   $7=$110;
   $8=$111;
   var $112=$7;
   var $113=(($112+16)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=$8;
   var $116=$114 | $115;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($112, $116) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 15; break; }
  case 13: 
   label = 14; break;
  case 14: 
   label = 19; break;
  case 15: 
   var $119$0 = ___cxa_find_matching_catch(-1, -1,0); $119$1 = tempRet0;
   var $120=$119$0;
   $14=$120;
   var $121=$119$1;
   $15=$121;
   label = 16; break;
  case 16: 
   var $123=$14;
   var $124=___cxa_begin_catch($123);
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 21; break; }
  case 17: 
   label = 18; break;
  case 18: 
   label = 20; break;
  case 19: 
   label = 18; break;
  case 20: 
   return;
  case 21: 
   var $130$0 = ___cxa_find_matching_catch(-1, -1,0); $130$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   $13=$this;
   var $16=$13;
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(12))|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=$18;
   var $25=(($24+$23)|0);
   var $26=$25;
   $12=$26;
   var $27=$12;
   var $28=$27;
   $11=$28;
   var $29=$11;
   var $30=(($29+24)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$31;
   label = 2; break;
  case 2: 
   var $34=(($32)|(0))!=0;
   if ($34) { label = 3; break; } else { label = 20; break; }
  case 3: 
   var $36=(($16+4)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$37;
   var $39=HEAP32[(($38)>>2)];
   var $40=((($39)-(12))|0);
   var $41=$40;
   var $42=HEAP32[(($41)>>2)];
   var $43=$37;
   var $44=(($43+$42)|0);
   var $45=$44;
   $6=$45;
   var $46=$6;
   var $47=$46;
   $5=$47;
   var $48=$5;
   var $49=(($48+16)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50)|(0))==0;
   label = 4; break;
  case 4: 
   if ($51) { label = 5; break; } else { label = 20; break; }
  case 5: 
   var $54=(($16+4)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$55;
   var $57=HEAP32[(($56)>>2)];
   var $58=((($57)-(12))|0);
   var $59=$58;
   var $60=HEAP32[(($59)>>2)];
   var $61=$55;
   var $62=(($61+$60)|0);
   var $63=$62;
   $3=$63;
   var $64=$3;
   var $65=(($64+4)|0);
   var $66=HEAP32[(($65)>>2)];
   label = 6; break;
  case 6: 
   var $68=$66 & 8192;
   var $69=(($68)|(0))!=0;
   if ($69) { label = 7; break; } else { label = 20; break; }
  case 7: 
   var $71=__ZSt18uncaught_exceptionv();
   if ($71) { label = 20; break; } else { label = 8; break; }
  case 8: 
   var $73=(($16+4)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=$74;
   var $76=HEAP32[(($75)>>2)];
   var $77=((($76)-(12))|0);
   var $78=$77;
   var $79=HEAP32[(($78)>>2)];
   var $80=$74;
   var $81=(($80+$79)|0);
   var $82=$81;
   $2=$82;
   var $83=$2;
   var $84=$83;
   $1=$84;
   var $85=$1;
   var $86=(($85+24)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$87;
   label = 9; break;
  case 9: 
   $4=$88;
   var $90=$4;
   var $91=$90;
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92+24)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$94]($90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 15; break; }
  case 10: 
   label = 11; break;
  case 11: 
   var $97=(($95)|(0))==-1;
   if ($97) { label = 12; break; } else { label = 19; break; }
  case 12: 
   var $99=(($16+4)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=$100;
   var $102=HEAP32[(($101)>>2)];
   var $103=((($102)-(12))|0);
   var $104=$103;
   var $105=HEAP32[(($104)>>2)];
   var $106=$100;
   var $107=(($106+$105)|0);
   var $108=$107;
   $9=$108;
   $10=1;
   var $109=$9;
   var $110=$109;
   var $111=$10;
   $7=$110;
   $8=$111;
   var $112=$7;
   var $113=(($112+16)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=$8;
   var $116=$114 | $115;
   (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($112, $116) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 15; break; }
  case 13: 
   label = 14; break;
  case 14: 
   label = 19; break;
  case 15: 
   var $119$0 = ___cxa_find_matching_catch(-1, -1,0); $119$1 = tempRet0;
   var $120=$119$0;
   $14=$120;
   var $121=$119$1;
   $15=$121;
   label = 16; break;
  case 16: 
   var $123=$14;
   var $124=___cxa_begin_catch($123);
   (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 21; break; }
  case 17: 
   label = 18; break;
  case 18: 
   label = 20; break;
  case 19: 
   label = 18; break;
  case 20: 
   return;
  case 21: 
   var $130$0 = ___cxa_find_matching_catch(-1, -1,0); $130$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__h;
   var $__sr;
   var $__mask;
   var $__p;
   var $__g;
   $1=$this;
   $2=$__lo;
   $3=$__hi;
   var $4=$1;
   $__h=0;
   $__sr=24;
   $__mask=-268435456;
   var $5=$2;
   $__p=$5;
   label = 2; break;
  case 2: 
   var $7=$__p;
   var $8=$3;
   var $9=(($7)|(0))!=(($8)|(0));
   if ($9) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $11=$__h;
   var $12=$11 << 4;
   var $13=$__p;
   var $14=HEAP8[($13)];
   var $15=(($14 << 24) >> 24);
   var $16=((($12)+($15))|0);
   $__h=$16;
   var $17=$__h;
   var $18=$17 & -268435456;
   $__g=$18;
   var $19=$__g;
   var $20=$__g;
   var $21=$20 >>> 24;
   var $22=$19 | $21;
   var $23=$__h;
   var $24=$23 ^ $22;
   $__h=$24;
   label = 4; break;
  case 4: 
   var $26=$__p;
   var $27=(($26+1)|0);
   $__p=$27;
   label = 2; break;
  case 5: 
   var $29=$__h;
   return $29;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   $2=$this;
   $3=$__lo1;
   $4=$__hi1;
   $5=$__lo2;
   $6=$__hi2;
   var $7=$2;
   label = 2; break;
  case 2: 
   var $9=$5;
   var $10=$6;
   var $11=(($9)|(0))!=(($10)|(0));
   if ($11) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $13=$3;
   var $14=$4;
   var $15=(($13)|(0))==(($14)|(0));
   if ($15) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $17=$3;
   var $18=HEAP32[(($17)>>2)];
   var $19=$5;
   var $20=HEAP32[(($19)>>2)];
   var $21=(($18)|(0)) < (($20)|(0));
   if ($21) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $1=-1;
   label = 11; break;
  case 6: 
   var $24=$5;
   var $25=HEAP32[(($24)>>2)];
   var $26=$3;
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0)) < (($27)|(0));
   if ($28) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $1=1;
   label = 11; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $32=$3;
   var $33=(($32+4)|0);
   $3=$33;
   var $34=$5;
   var $35=(($34+4)|0);
   $5=$35;
   label = 2; break;
  case 10: 
   var $37=$3;
   var $38=$4;
   var $39=(($37)|(0))!=(($38)|(0));
   var $40=(($39)&(1));
   $1=$40;
   label = 11; break;
  case 11: 
   var $42=$1;
   return $42;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__h;
   var $__sr;
   var $__mask;
   var $__p;
   var $__g;
   $1=$this;
   $2=$__lo;
   $3=$__hi;
   var $4=$1;
   $__h=0;
   $__sr=24;
   $__mask=-268435456;
   var $5=$2;
   $__p=$5;
   label = 2; break;
  case 2: 
   var $7=$__p;
   var $8=$3;
   var $9=(($7)|(0))!=(($8)|(0));
   if ($9) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $11=$__h;
   var $12=$11 << 4;
   var $13=$__p;
   var $14=HEAP32[(($13)>>2)];
   var $15=((($12)+($14))|0);
   $__h=$15;
   var $16=$__h;
   var $17=$16 & -268435456;
   $__g=$17;
   var $18=$__g;
   var $19=$__g;
   var $20=$19 >>> 24;
   var $21=$18 | $20;
   var $22=$__h;
   var $23=$22 ^ $21;
   $__h=$23;
   label = 4; break;
  case 4: 
   var $25=$__p;
   var $26=(($25+4)|0);
   $__p=$26;
   label = 2; break;
  case 5: 
   var $28=$__h;
   return $28;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17collateIwED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__17collateIwED1Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__17collateIwED2Ev($2);
 return;
}
function __ZNSt3__17collateIwED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__16locale5facetD2Ev($3);
 return;
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg_result, $this, $__lo, $__hi) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 $11=$this;
 $12=$__lo;
 $13=$__hi;
 var $14=$11;
 var $15=$12;
 var $16=$13;
 $8=$agg_result;
 $9=$15;
 $10=$16;
 var $17=$8;
 var $18=$9;
 var $19=$10;
 $5=$17;
 $6=$18;
 $7=$19;
 var $20=$5;
 var $21=$20;
 var $22=(($20)|0);
 $4=$22;
 var $23=$4;
 $3=$23;
 var $24=$3;
 var $25=$24;
 $2=$25;
 var $26=$2;
 var $27=$26;
 $1=$27;
 var $28=$1;
 var $29=(($26)|0);
 var $30=$6;
 var $31=$7;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($20, $30, $31);
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $__lv=__stackBase__;
   var $10=(__stackBase__)+(8);
   var $11=(__stackBase__)+(16);
   var $12=(__stackBase__)+(24);
   var $__ct;
   var $13=(__stackBase__)+(32);
   var $14;
   var $15;
   var $__np;
   var $16=(__stackBase__)+(40);
   var $__names=(__stackBase__)+(48);
   var $17;
   var $__i;
   var $18=(__stackBase__)+(72);
   var $19;
   $6=$this;
   $7=$__iob;
   $8=$__err;
   $9=$__v;
   var $20=$6;
   var $21=$7;
   $5=$21;
   var $22=$5;
   var $23=(($22+4)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$24 & 1;
   var $26=(($25)|(0))==0;
   if ($26) { label = 2; break; } else { label = 7; break; }
  case 2: 
   HEAP32[(($__lv)>>2)]=-1;
   var $28=$20;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$11;
   var $33=$__b;
   assert(4 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];
   var $34=$12;
   var $35=$__e;
   assert(4 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];
   var $36=$7;
   var $37=$8;
   FUNCTION_TABLE[$31]($10, $20, $11, $12, $36, $37, $__lv);
   var $38=$__b;
   var $39=$10;
   assert(4 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];
   var $40=HEAP32[(($__lv)>>2)];
   if ((($40)|(0))==0) {
    label = 3; break;
   }
   else if ((($40)|(0))==1) {
    label = 4; break;
   }
   else {
   label = 5; break;
   }
  case 3: 
   var $42=$9;
   HEAP8[($42)]=0;
   label = 6; break;
  case 4: 
   var $44=$9;
   HEAP8[($44)]=1;
   label = 6; break;
  case 5: 
   var $46=$9;
   HEAP8[($46)]=1;
   var $47=$8;
   HEAP32[(($47)>>2)]=4;
   label = 6; break;
  case 6: 
   var $49=$agg_result;
   var $50=$__b;
   assert(4 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];
   label = 27; break;
  case 7: 
   var $52=$7;
   __ZNKSt3__18ios_base6getlocEv($13, $52);
   $4=$13;
   var $53=$4;
   var $54 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($53, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 17; break; }
  case 8: 
   var $55=$54;
   label = 9; break;
  case 9: 
   __ZNSt3__16localeD2Ev($13);
   $__ct=$55;
   var $57=$7;
   __ZNKSt3__18ios_base6getlocEv($16, $57);
   $3=$16;
   var $58=$3;
   var $59 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($58, 19432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 18; break; }
  case 10: 
   var $60=$59;
   label = 11; break;
  case 11: 
   __ZNSt3__16localeD2Ev($16);
   $__np=$60;
   var $62=(($__names)|0);
   $17=$62;
   var $63=$__np;
   $2=$63;
   var $64=$2;
   var $65=$64;
   var $66=HEAP32[(($65)>>2)];
   var $67=(($66+24)|0);
   var $68=HEAP32[(($67)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$68]($62, $64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 19; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $70=(($62+12)|0);
   $17=$70;
   var $71=$__np;
   $1=$71;
   var $72=$1;
   var $73=$72;
   var $74=HEAP32[(($73)>>2)];
   var $75=(($74+28)|0);
   var $76=HEAP32[(($75)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$76]($70, $72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 19; break; }
  case 14: 
   label = 15; break;
  case 15: 
   var $78=$18;
   var $79=$__e;
   assert(4 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];
   var $80=(($__names)|0);
   var $81=(($__names)|0);
   var $82=(($81+24)|0);
   var $83=$__ct;
   var $84=$8;
   var $85 = (function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $18, $80, $82, $83, $84, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 22; break; }
  case 16: 
   $__i=$85;
   var $87=$__i;
   var $88=(($__names)|0);
   var $89=(($87)|(0))==(($88)|(0));
   var $90=$9;
   var $91=(($89)&(1));
   HEAP8[($90)]=$91;
   var $92=$agg_result;
   var $93=$__b;
   assert(4 % 1 === 0);HEAP32[(($92)>>2)]=HEAP32[(($93)>>2)];
   $19=1;
   var $94=(($__names)|0);
   var $95=(($94+24)|0);
   var $122 = $95;label = 23; break;
  case 17: 
   var $97$0 = ___cxa_find_matching_catch(-1, -1); $97$1 = tempRet0;
   var $98=$97$0;
   $14=$98;
   var $99=$97$1;
   $15=$99;
   __ZNSt3__16localeD2Ev($13);
   label = 28; break;
  case 18: 
   var $101$0 = ___cxa_find_matching_catch(-1, -1); $101$1 = tempRet0;
   var $102=$101$0;
   $14=$102;
   var $103=$101$1;
   $15=$103;
   __ZNSt3__16localeD2Ev($16);
   label = 28; break;
  case 19: 
   var $105$0 = ___cxa_find_matching_catch(-1, -1); $105$1 = tempRet0;
   var $106=$105$0;
   $14=$106;
   var $107=$105$1;
   $15=$107;
   var $108=$17;
   var $109=(($62)|(0))==(($108)|(0));
   if ($109) { label = 21; break; } else { var $111 = $108;label = 20; break; }
  case 20: 
   var $111;
   var $112=((($111)-(12))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($112);
   var $113=(($112)|(0))==(($62)|(0));
   if ($113) { label = 21; break; } else { var $111 = $112;label = 20; break; }
  case 21: 
   label = 28; break;
  case 22: 
   var $116$0 = ___cxa_find_matching_catch(-1, -1); $116$1 = tempRet0;
   var $117=$116$0;
   $14=$117;
   var $118=$116$1;
   $15=$118;
   var $119=(($__names)|0);
   var $120=(($119+24)|0);
   var $127 = $120;label = 25; break;
  case 23: 
   var $122;
   var $123=((($122)-(12))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($123);
   var $124=(($123)|(0))==(($94)|(0));
   if ($124) { label = 24; break; } else { var $122 = $123;label = 23; break; }
  case 24: 
   label = 27; break;
  case 25: 
   var $127;
   var $128=((($127)-(12))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($128);
   var $129=(($128)|(0))==(($119)|(0));
   if ($129) { label = 26; break; } else { var $127 = $128;label = 25; break; }
  case 26: 
   label = 28; break;
  case 27: 
   STACKTOP = __stackBase__;
   return;
  case 28: 
   var $133=$14;
   var $134=$15;
   var $135$0=$133;
   var $135$1=0;
   var $136$0=$135$0;
   var $136$1=$134;
   ___resumeException($136$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 168)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $__tmp_i;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $__tmp_i_i_i3;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111=__stackBase__;
   var $112=(__stackBase__)+(8);
   var $113;
   var $114;
   var $115=(__stackBase__)+(16);
   var $116=(__stackBase__)+(24);
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $122;
   var $123;
   var $124;
   var $125;
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $__tmp_i_i_i;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139=(__stackBase__)+(32);
   var $140;
   var $141;
   var $142=(__stackBase__)+(40);
   var $143;
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $__nkw;
   var $__doesnt_match;
   var $__might_match;
   var $__does_match;
   var $__statbuf=(__stackBase__)+(48);
   var $__status;
   var $__stat_hold=(__stackBase__)+(152);
   var $149=(__stackBase__)+(160);
   var $150;
   var $151;
   var $__n_might_match;
   var $__n_does_match;
   var $__st;
   var $__ky;
   var $__indx;
   var $__c;
   var $__consume;
   var $__ky1;
   var $__kc;
   var $__ky2;
   var $152;
   $143=$__b;
   $144=$__kb;
   $145=$__ke;
   $146=$__ct;
   $147=$__err;
   var $153=(($__case_sensitive)&(1));
   $148=$153;
   var $154=$144;
   var $155=$145;
   $140=$154;
   $141=$155;
   var $156=$140;
   var $157=$141;
   var $tmp_i=$139;
   var $tmp1_i=$142;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $137=$156;
   $138=$157;
   var $158=$138;
   var $159=$137;
   var $160=$158;
   var $161=$159;
   var $162=((($160)-($161))|0);
   var $163=((((($162)|(0)))/(12))&-1);
   $__nkw=$163;
   $__doesnt_match=0;
   $__might_match=1;
   $__does_match=2;
   var $164=(($__statbuf)|0);
   $__status=$164;
   HEAP32[(($149)>>2)]=272;
   $124=$__stat_hold;
   $125=0;
   $126=$149;
   var $165=$124;
   var $166=$125;
   var $167=$126;
   $121=$165;
   $122=$166;
   $123=$167;
   var $168=$121;
   var $169=(($168)|0);
   var $170=$122;
   var $171=$123;
   $120=$171;
   var $172=$120;
   var $173=HEAP32[(($172)>>2)];
   $117=$169;
   $118=$170;
   $119=$173;
   var $174=$117;
   var $175=$118;
   var $176=$119;
   $114=$174;
   HEAP32[(($115)>>2)]=$175;
   HEAP32[(($116)>>2)]=$176;
   var $177=$114;
   var $178=$177;
   $113=$115;
   var $179=$113;
   var $180=HEAP32[(($179)>>2)];
   $107=$116;
   var $181=$107;
   var $182=HEAP32[(($181)>>2)];
   $110=$178;
   HEAP32[(($111)>>2)]=$180;
   HEAP32[(($112)>>2)]=$182;
   var $183=$110;
   var $184=(($183)|0);
   $109=$111;
   var $185=$109;
   var $186=HEAP32[(($185)>>2)];
   HEAP32[(($184)>>2)]=$186;
   var $187=(($183+4)|0);
   $108=$112;
   var $188=$108;
   var $189=HEAP32[(($188)>>2)];
   HEAP32[(($187)>>2)]=$189;
   var $190=$__nkw;
   var $191=(($190)>>>(0)) > 100;
   if ($191) { label = 2; break; } else { label = 15; break; }
  case 2: 
   var $193=$__nkw;
   var $194=_malloc($193);
   $__status=$194;
   var $195=$__status;
   var $196=(($195)|(0))==0;
   if ($196) { label = 3; break; } else { label = 10; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 10; break;
  case 5: 
   var $200$0 = ___cxa_find_matching_catch(-1, -1); $200$1 = tempRet0;
   var $201=$200$0;
   $150=$201;
   var $202=$200$1;
   $151=$202;
   $106=$__stat_hold;
   var $203=$106;
   $105=$203;
   var $204=$105;
   $103=$204;
   $104=0;
   var $205=$103;
   var $206=(($205)|0);
   $102=$206;
   var $207=$102;
   var $208=$207;
   $101=$208;
   var $209=$101;
   var $210=(($209)|0);
   var $211=HEAP32[(($210)>>2)];
   $__tmp_i_i_i3=$211;
   var $212=$104;
   var $213=(($205)|0);
   $100=$213;
   var $214=$100;
   var $215=$214;
   $99=$215;
   var $216=$99;
   var $217=(($216)|0);
   HEAP32[(($217)>>2)]=$212;
   var $218=$__tmp_i_i_i3;
   var $219=(($218)|(0))!=0;
   if ($219) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $221=(($205)|0);
   $98=$221;
   var $222=$98;
   var $223=$222;
   $97=$223;
   var $224=$97;
   var $225=(($224+4)|0);
   var $226=HEAP32[(($225)>>2)];
   var $227=$__tmp_i_i_i3;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$226]($227) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 9; break;
  case 8: 
   var $230$0 = ___cxa_find_matching_catch(-1, -1,0); $230$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 9: 
   label = 126; break;
  case 10: 
   var $232=$__status;
   $95=$__stat_hold;
   $96=$232;
   var $233=$95;
   var $234=(($233)|0);
   $94=$234;
   var $235=$94;
   var $236=$235;
   $93=$236;
   var $237=$93;
   var $238=(($237)|0);
   var $239=HEAP32[(($238)>>2)];
   $__tmp_i=$239;
   var $240=$96;
   var $241=(($233)|0);
   $92=$241;
   var $242=$92;
   var $243=$242;
   $91=$243;
   var $244=$91;
   var $245=(($244)|0);
   HEAP32[(($245)>>2)]=$240;
   var $246=$__tmp_i;
   var $247=(($246)|(0))!=0;
   if ($247) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $249=(($233)|0);
   $90=$249;
   var $250=$90;
   var $251=$250;
   $89=$251;
   var $252=$89;
   var $253=(($252+4)|0);
   var $254=HEAP32[(($253)>>2)];
   var $255=$__tmp_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$254]($255) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 13; break; }
  case 12: 
   label = 14; break;
  case 13: 
   var $258$0 = ___cxa_find_matching_catch(-1, -1,0); $258$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 14: 
   label = 15; break;
  case 15: 
   var $260=$__nkw;
   $__n_might_match=$260;
   $__n_does_match=0;
   var $261=$__status;
   $__st=$261;
   var $262=$144;
   $__ky=$262;
   label = 16; break;
  case 16: 
   var $264=$__ky;
   var $265=$145;
   var $266=(($264)|(0))!=(($265)|(0));
   if ($266) { label = 17; break; } else { label = 25; break; }
  case 17: 
   var $268=$__ky;
   $88=$268;
   var $269=$88;
   $87=$269;
   var $270=$87;
   $86=$270;
   var $271=$86;
   var $272=(($271)|0);
   $85=$272;
   var $273=$85;
   var $274=$273;
   $84=$274;
   var $275=$84;
   var $276=(($275)|0);
   var $277=(($276)|0);
   var $278=$277;
   var $279=(($278)|0);
   var $280=$279;
   var $281=HEAP8[($280)];
   var $282=(($281)&(255));
   var $283=$282 & 1;
   var $284=(($283)|(0))!=0;
   if ($284) { label = 18; break; } else { label = 19; break; }
  case 18: 
   $80=$270;
   var $286=$80;
   var $287=(($286)|0);
   $79=$287;
   var $288=$79;
   var $289=$288;
   $78=$289;
   var $290=$78;
   var $291=(($290)|0);
   var $292=(($291)|0);
   var $293=$292;
   var $294=(($293+4)|0);
   var $295=HEAP32[(($294)>>2)];
   var $310 = $295;label = 20; break;
  case 19: 
   $83=$270;
   var $297=$83;
   var $298=(($297)|0);
   $82=$298;
   var $299=$82;
   var $300=$299;
   $81=$300;
   var $301=$81;
   var $302=(($301)|0);
   var $303=(($302)|0);
   var $304=$303;
   var $305=(($304)|0);
   var $306=$305;
   var $307=HEAP8[($306)];
   var $308=(($307)&(255));
   var $309=$308 >> 1;
   var $310 = $309;label = 20; break;
  case 20: 
   var $310;
   var $311=(($310)|(0))==0;
   if ($311) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $313=$__st;
   HEAP8[($313)]=1;
   label = 23; break;
  case 22: 
   var $315=$__st;
   HEAP8[($315)]=2;
   var $316=$__n_might_match;
   var $317=((($316)-(1))|0);
   $__n_might_match=$317;
   var $318=$__n_does_match;
   var $319=((($318)+(1))|0);
   $__n_does_match=$319;
   label = 23; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $322=$__ky;
   var $323=(($322+12)|0);
   $__ky=$323;
   var $324=$__st;
   var $325=(($324+1)|0);
   $__st=$325;
   label = 16; break;
  case 25: 
   $__indx=0;
   label = 26; break;
  case 26: 
   var $328=$143;
   $76=$328;
   $77=$__e;
   var $329=$76;
   var $330=$77;
   $74=$329;
   $75=$330;
   var $331=$74;
   $73=$331;
   var $332=$73;
   var $333=(($332)|0);
   var $334=HEAP32[(($333)>>2)];
   var $335=(($334)|(0))!=0;
   if ($335) { label = 27; break; } else { label = 33; break; }
  case 27: 
   var $337=(($332)|0);
   var $338=HEAP32[(($337)>>2)];
   $72=$338;
   var $339=$72;
   var $340=(($339+12)|0);
   var $341=HEAP32[(($340)>>2)];
   var $342=(($339+16)|0);
   var $343=HEAP32[(($342)>>2)];
   var $344=(($341)|(0))==(($343)|(0));
   if ($344) { label = 28; break; } else { label = 30; break; }
  case 28: 
   var $346=$339;
   var $347=HEAP32[(($346)>>2)];
   var $348=(($347+36)|0);
   var $349=HEAP32[(($348)>>2)];
   var $350 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$349]($339) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 5; break; }
  case 29: 
   $71=$350;
   label = 31; break;
  case 30: 
   var $352=(($339+12)|0);
   var $353=HEAP32[(($352)>>2)];
   var $354=HEAP8[($353)];
   $70=$354;
   var $355=$70;
   var $356=(($355)&(255));
   $71=$356;
   label = 31; break;
  case 31: 
   var $357=$71;
   $68=$357;
   $69=-1;
   var $358=$68;
   var $359=$69;
   var $360=(($358)|(0))==(($359)|(0));
   if ($360) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $362=(($332)|0);
   HEAP32[(($362)>>2)]=0;
   label = 33; break;
  case 33: 
   var $363=(($332)|0);
   var $364=HEAP32[(($363)>>2)];
   var $365=(($364)|(0))==0;
   var $366=(($365)&(1));
   var $367=$75;
   $67=$367;
   var $368=$67;
   var $369=(($368)|0);
   var $370=HEAP32[(($369)>>2)];
   var $371=(($370)|(0))!=0;
   if ($371) { label = 34; break; } else { label = 40; break; }
  case 34: 
   var $373=(($368)|0);
   var $374=HEAP32[(($373)>>2)];
   $66=$374;
   var $375=$66;
   var $376=(($375+12)|0);
   var $377=HEAP32[(($376)>>2)];
   var $378=(($375+16)|0);
   var $379=HEAP32[(($378)>>2)];
   var $380=(($377)|(0))==(($379)|(0));
   if ($380) { label = 35; break; } else { label = 37; break; }
  case 35: 
   var $382=$375;
   var $383=HEAP32[(($382)>>2)];
   var $384=(($383+36)|0);
   var $385=HEAP32[(($384)>>2)];
   var $386 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$385]($375) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 5; break; }
  case 36: 
   $65=$386;
   label = 38; break;
  case 37: 
   var $388=(($375+12)|0);
   var $389=HEAP32[(($388)>>2)];
   var $390=HEAP8[($389)];
   $64=$390;
   var $391=$64;
   var $392=(($391)&(255));
   $65=$392;
   label = 38; break;
  case 38: 
   var $393=$65;
   $62=$393;
   $63=-1;
   var $394=$62;
   var $395=$63;
   var $396=(($394)|(0))==(($395)|(0));
   if ($396) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $398=(($368)|0);
   HEAP32[(($398)>>2)]=0;
   label = 40; break;
  case 40: 
   var $399=(($368)|0);
   var $400=HEAP32[(($399)>>2)];
   var $401=(($400)|(0))==0;
   var $402=(($401)&(1));
   var $403=(($366)|(0))==(($402)|(0));
   var $404=$403 ^ 1;
   label = 41; break;
  case 41: 
   if ($404) { label = 42; break; } else { var $410 = 0;label = 43; break; }
  case 42: 
   var $407=$__n_might_match;
   var $408=(($407)>>>(0)) > 0;
   var $410 = $408;label = 43; break;
  case 43: 
   var $410;
   if ($410) { label = 44; break; } else { label = 96; break; }
  case 44: 
   var $412=$143;
   $61=$412;
   var $413=$61;
   var $414=(($413)|0);
   var $415=HEAP32[(($414)>>2)];
   $60=$415;
   var $416=$60;
   var $417=(($416+12)|0);
   var $418=HEAP32[(($417)>>2)];
   var $419=(($416+16)|0);
   var $420=HEAP32[(($419)>>2)];
   var $421=(($418)|(0))==(($420)|(0));
   if ($421) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $423=$416;
   var $424=HEAP32[(($423)>>2)];
   var $425=(($424+36)|0);
   var $426=HEAP32[(($425)>>2)];
   var $427 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$426]($416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 5; break; }
  case 46: 
   $59=$427;
   label = 48; break;
  case 47: 
   var $429=(($416+12)|0);
   var $430=HEAP32[(($429)>>2)];
   var $431=HEAP8[($430)];
   $58=$431;
   var $432=$58;
   var $433=(($432)&(255));
   $59=$433;
   label = 48; break;
  case 48: 
   var $434=$59;
   var $435=(($434) & 255);
   label = 49; break;
  case 49: 
   $__c=$435;
   var $437=$148;
   var $438=(($437) & 1);
   if ($438) { label = 53; break; } else { label = 50; break; }
  case 50: 
   var $440=$146;
   var $441=$__c;
   $56=$440;
   $57=$441;
   var $442=$56;
   var $443=$442;
   var $444=HEAP32[(($443)>>2)];
   var $445=(($444+12)|0);
   var $446=HEAP32[(($445)>>2)];
   var $447=$57;
   var $448 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$446]($442, $447) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 51; break; } else { label = 5; break; }
  case 51: 
   label = 52; break;
  case 52: 
   $__c=$448;
   label = 53; break;
  case 53: 
   $__consume=0;
   var $451=$__status;
   $__st=$451;
   var $452=$144;
   $__ky1=$452;
   label = 54; break;
  case 54: 
   var $454=$__ky1;
   var $455=$145;
   var $456=(($454)|(0))!=(($455)|(0));
   if ($456) { label = 55; break; } else { label = 75; break; }
  case 55: 
   var $458=$__st;
   var $459=HEAP8[($458)];
   var $460=(($459)&(255));
   var $461=(($460)|(0))==1;
   if ($461) { label = 56; break; } else { label = 73; break; }
  case 56: 
   var $463=$__ky1;
   var $464=$__indx;
   $54=$463;
   $55=$464;
   var $465=$54;
   $53=$465;
   var $466=$53;
   $52=$466;
   var $467=$52;
   $51=$467;
   var $468=$51;
   var $469=(($468)|0);
   $50=$469;
   var $470=$50;
   var $471=$470;
   $49=$471;
   var $472=$49;
   var $473=(($472)|0);
   var $474=(($473)|0);
   var $475=$474;
   var $476=(($475)|0);
   var $477=$476;
   var $478=HEAP8[($477)];
   var $479=(($478)&(255));
   var $480=$479 & 1;
   var $481=(($480)|(0))!=0;
   if ($481) { label = 57; break; } else { label = 58; break; }
  case 57: 
   $45=$467;
   var $483=$45;
   var $484=(($483)|0);
   $44=$484;
   var $485=$44;
   var $486=$485;
   $43=$486;
   var $487=$43;
   var $488=(($487)|0);
   var $489=(($488)|0);
   var $490=$489;
   var $491=(($490+8)|0);
   var $492=HEAP32[(($491)>>2)];
   var $504 = $492;label = 59; break;
  case 58: 
   $48=$467;
   var $494=$48;
   var $495=(($494)|0);
   $47=$495;
   var $496=$47;
   var $497=$496;
   $46=$497;
   var $498=$46;
   var $499=(($498)|0);
   var $500=(($499)|0);
   var $501=$500;
   var $502=(($501+1)|0);
   var $503=(($502)|0);
   var $504 = $503;label = 59; break;
  case 59: 
   var $504;
   var $505=$55;
   var $506=(($504+$505)|0);
   label = 60; break;
  case 60: 
   var $508=HEAP8[($506)];
   $__kc=$508;
   var $509=$148;
   var $510=(($509) & 1);
   if ($510) { label = 64; break; } else { label = 61; break; }
  case 61: 
   var $512=$146;
   var $513=$__kc;
   $41=$512;
   $42=$513;
   var $514=$41;
   var $515=$514;
   var $516=HEAP32[(($515)>>2)];
   var $517=(($516+12)|0);
   var $518=HEAP32[(($517)>>2)];
   var $519=$42;
   var $520 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$518]($514, $519) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 62; break; } else { label = 5; break; }
  case 62: 
   label = 63; break;
  case 63: 
   $__kc=$520;
   label = 64; break;
  case 64: 
   var $523=$__c;
   var $524=(($523 << 24) >> 24);
   var $525=$__kc;
   var $526=(($525 << 24) >> 24);
   var $527=(($524)|(0))==(($526)|(0));
   if ($527) { label = 65; break; } else { label = 71; break; }
  case 65: 
   $__consume=1;
   var $529=$__ky1;
   $40=$529;
   var $530=$40;
   $39=$530;
   var $531=$39;
   var $532=(($531)|0);
   $38=$532;
   var $533=$38;
   var $534=$533;
   $37=$534;
   var $535=$37;
   var $536=(($535)|0);
   var $537=(($536)|0);
   var $538=$537;
   var $539=(($538)|0);
   var $540=$539;
   var $541=HEAP8[($540)];
   var $542=(($541)&(255));
   var $543=$542 & 1;
   var $544=(($543)|(0))!=0;
   if ($544) { label = 66; break; } else { label = 67; break; }
  case 66: 
   $33=$530;
   var $546=$33;
   var $547=(($546)|0);
   $32=$547;
   var $548=$32;
   var $549=$548;
   $31=$549;
   var $550=$31;
   var $551=(($550)|0);
   var $552=(($551)|0);
   var $553=$552;
   var $554=(($553+4)|0);
   var $555=HEAP32[(($554)>>2)];
   var $570 = $555;label = 68; break;
  case 67: 
   $36=$530;
   var $557=$36;
   var $558=(($557)|0);
   $35=$558;
   var $559=$35;
   var $560=$559;
   $34=$560;
   var $561=$34;
   var $562=(($561)|0);
   var $563=(($562)|0);
   var $564=$563;
   var $565=(($564)|0);
   var $566=$565;
   var $567=HEAP8[($566)];
   var $568=(($567)&(255));
   var $569=$568 >> 1;
   var $570 = $569;label = 68; break;
  case 68: 
   var $570;
   var $571=$__indx;
   var $572=((($571)+(1))|0);
   var $573=(($570)|(0))==(($572)|(0));
   if ($573) { label = 69; break; } else { label = 70; break; }
  case 69: 
   var $575=$__st;
   HEAP8[($575)]=2;
   var $576=$__n_might_match;
   var $577=((($576)-(1))|0);
   $__n_might_match=$577;
   var $578=$__n_does_match;
   var $579=((($578)+(1))|0);
   $__n_does_match=$579;
   label = 70; break;
  case 70: 
   label = 72; break;
  case 71: 
   var $582=$__st;
   HEAP8[($582)]=0;
   var $583=$__n_might_match;
   var $584=((($583)-(1))|0);
   $__n_might_match=$584;
   label = 72; break;
  case 72: 
   label = 73; break;
  case 73: 
   label = 74; break;
  case 74: 
   var $588=$__ky1;
   var $589=(($588+12)|0);
   $__ky1=$589;
   var $590=$__st;
   var $591=(($590+1)|0);
   $__st=$591;
   label = 54; break;
  case 75: 
   var $593=$__consume;
   var $594=(($593) & 1);
   if ($594) { label = 76; break; } else { label = 94; break; }
  case 76: 
   var $596=$143;
   $30=$596;
   var $597=$30;
   var $598=(($597)|0);
   var $599=HEAP32[(($598)>>2)];
   $29=$599;
   var $600=$29;
   var $601=(($600+12)|0);
   var $602=HEAP32[(($601)>>2)];
   var $603=(($600+16)|0);
   var $604=HEAP32[(($603)>>2)];
   var $605=(($602)|(0))==(($604)|(0));
   if ($605) { label = 77; break; } else { label = 79; break; }
  case 77: 
   var $607=$600;
   var $608=HEAP32[(($607)>>2)];
   var $609=(($608+40)|0);
   var $610=HEAP32[(($609)>>2)];
   var $611 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$610]($600) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 78; break; } else { label = 5; break; }
  case 78: 
   $28=$611;
   label = 80; break;
  case 79: 
   var $613=(($600+12)|0);
   var $614=HEAP32[(($613)>>2)];
   var $615=(($614+1)|0);
   HEAP32[(($613)>>2)]=$615;
   var $616=HEAP8[($614)];
   $27=$616;
   var $617=$27;
   var $618=(($617)&(255));
   $28=$618;
   label = 80; break;
  case 80: 
   var $619=$28;
   label = 81; break;
  case 81: 
   var $621=$__n_might_match;
   var $622=$__n_does_match;
   var $623=((($621)+($622))|0);
   var $624=(($623)>>>(0)) > 1;
   if ($624) { label = 82; break; } else { label = 93; break; }
  case 82: 
   var $626=$__status;
   $__st=$626;
   var $627=$144;
   $__ky2=$627;
   label = 83; break;
  case 83: 
   var $629=$__ky2;
   var $630=$145;
   var $631=(($629)|(0))!=(($630)|(0));
   if ($631) { label = 84; break; } else { label = 92; break; }
  case 84: 
   var $633=$__st;
   var $634=HEAP8[($633)];
   var $635=(($634)&(255));
   var $636=(($635)|(0))==2;
   if ($636) { label = 85; break; } else { label = 90; break; }
  case 85: 
   var $638=$__ky2;
   $26=$638;
   var $639=$26;
   $25=$639;
   var $640=$25;
   var $641=(($640)|0);
   $24=$641;
   var $642=$24;
   var $643=$642;
   $23=$643;
   var $644=$23;
   var $645=(($644)|0);
   var $646=(($645)|0);
   var $647=$646;
   var $648=(($647)|0);
   var $649=$648;
   var $650=HEAP8[($649)];
   var $651=(($650)&(255));
   var $652=$651 & 1;
   var $653=(($652)|(0))!=0;
   if ($653) { label = 86; break; } else { label = 87; break; }
  case 86: 
   $19=$639;
   var $655=$19;
   var $656=(($655)|0);
   $18=$656;
   var $657=$18;
   var $658=$657;
   $17=$658;
   var $659=$17;
   var $660=(($659)|0);
   var $661=(($660)|0);
   var $662=$661;
   var $663=(($662+4)|0);
   var $664=HEAP32[(($663)>>2)];
   var $679 = $664;label = 88; break;
  case 87: 
   $22=$639;
   var $666=$22;
   var $667=(($666)|0);
   $21=$667;
   var $668=$21;
   var $669=$668;
   $20=$669;
   var $670=$20;
   var $671=(($670)|0);
   var $672=(($671)|0);
   var $673=$672;
   var $674=(($673)|0);
   var $675=$674;
   var $676=HEAP8[($675)];
   var $677=(($676)&(255));
   var $678=$677 >> 1;
   var $679 = $678;label = 88; break;
  case 88: 
   var $679;
   var $680=$__indx;
   var $681=((($680)+(1))|0);
   var $682=(($679)|(0))!=(($681)|(0));
   if ($682) { label = 89; break; } else { label = 90; break; }
  case 89: 
   var $684=$__st;
   HEAP8[($684)]=0;
   var $685=$__n_does_match;
   var $686=((($685)-(1))|0);
   $__n_does_match=$686;
   label = 90; break;
  case 90: 
   label = 91; break;
  case 91: 
   var $689=$__ky2;
   var $690=(($689+12)|0);
   $__ky2=$690;
   var $691=$__st;
   var $692=(($691+1)|0);
   $__st=$692;
   label = 83; break;
  case 92: 
   label = 93; break;
  case 93: 
   label = 94; break;
  case 94: 
   label = 95; break;
  case 95: 
   var $697=$__indx;
   var $698=((($697)+(1))|0);
   $__indx=$698;
   label = 26; break;
  case 96: 
   var $700=$143;
   $15=$700;
   $16=$__e;
   var $701=$15;
   var $702=$16;
   $13=$701;
   $14=$702;
   var $703=$13;
   $12=$703;
   var $704=$12;
   var $705=(($704)|0);
   var $706=HEAP32[(($705)>>2)];
   var $707=(($706)|(0))!=0;
   if ($707) { label = 97; break; } else { label = 103; break; }
  case 97: 
   var $709=(($704)|0);
   var $710=HEAP32[(($709)>>2)];
   $11=$710;
   var $711=$11;
   var $712=(($711+12)|0);
   var $713=HEAP32[(($712)>>2)];
   var $714=(($711+16)|0);
   var $715=HEAP32[(($714)>>2)];
   var $716=(($713)|(0))==(($715)|(0));
   if ($716) { label = 98; break; } else { label = 100; break; }
  case 98: 
   var $718=$711;
   var $719=HEAP32[(($718)>>2)];
   var $720=(($719+36)|0);
   var $721=HEAP32[(($720)>>2)];
   var $722 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$721]($711) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 99; break; } else { label = 5; break; }
  case 99: 
   $10=$722;
   label = 101; break;
  case 100: 
   var $724=(($711+12)|0);
   var $725=HEAP32[(($724)>>2)];
   var $726=HEAP8[($725)];
   $9=$726;
   var $727=$9;
   var $728=(($727)&(255));
   $10=$728;
   label = 101; break;
  case 101: 
   var $729=$10;
   $7=$729;
   $8=-1;
   var $730=$7;
   var $731=$8;
   var $732=(($730)|(0))==(($731)|(0));
   if ($732) { label = 102; break; } else { label = 103; break; }
  case 102: 
   var $734=(($704)|0);
   HEAP32[(($734)>>2)]=0;
   label = 103; break;
  case 103: 
   var $735=(($704)|0);
   var $736=HEAP32[(($735)>>2)];
   var $737=(($736)|(0))==0;
   var $738=(($737)&(1));
   var $739=$14;
   $6=$739;
   var $740=$6;
   var $741=(($740)|0);
   var $742=HEAP32[(($741)>>2)];
   var $743=(($742)|(0))!=0;
   if ($743) { label = 104; break; } else { label = 110; break; }
  case 104: 
   var $745=(($740)|0);
   var $746=HEAP32[(($745)>>2)];
   $5=$746;
   var $747=$5;
   var $748=(($747+12)|0);
   var $749=HEAP32[(($748)>>2)];
   var $750=(($747+16)|0);
   var $751=HEAP32[(($750)>>2)];
   var $752=(($749)|(0))==(($751)|(0));
   if ($752) { label = 105; break; } else { label = 107; break; }
  case 105: 
   var $754=$747;
   var $755=HEAP32[(($754)>>2)];
   var $756=(($755+36)|0);
   var $757=HEAP32[(($756)>>2)];
   var $758 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$757]($747) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 106; break; } else { label = 5; break; }
  case 106: 
   $4=$758;
   label = 108; break;
  case 107: 
   var $760=(($747+12)|0);
   var $761=HEAP32[(($760)>>2)];
   var $762=HEAP8[($761)];
   $3=$762;
   var $763=$3;
   var $764=(($763)&(255));
   $4=$764;
   label = 108; break;
  case 108: 
   var $765=$4;
   $1=$765;
   $2=-1;
   var $766=$1;
   var $767=$2;
   var $768=(($766)|(0))==(($767)|(0));
   if ($768) { label = 109; break; } else { label = 110; break; }
  case 109: 
   var $770=(($740)|0);
   HEAP32[(($770)>>2)]=0;
   label = 110; break;
  case 110: 
   var $771=(($740)|0);
   var $772=HEAP32[(($771)>>2)];
   var $773=(($772)|(0))==0;
   var $774=(($773)&(1));
   var $775=(($738)|(0))==(($774)|(0));
   label = 111; break;
  case 111: 
   if ($775) { label = 112; break; } else { label = 113; break; }
  case 112: 
   var $778=$147;
   var $779=HEAP32[(($778)>>2)];
   var $780=$779 | 2;
   HEAP32[(($778)>>2)]=$780;
   label = 113; break;
  case 113: 
   var $782=$__status;
   $__st=$782;
   label = 114; break;
  case 114: 
   var $784=$144;
   var $785=$145;
   var $786=(($784)|(0))!=(($785)|(0));
   if ($786) { label = 115; break; } else { label = 119; break; }
  case 115: 
   var $788=$__st;
   var $789=HEAP8[($788)];
   var $790=(($789)&(255));
   var $791=(($790)|(0))==2;
   if ($791) { label = 116; break; } else { label = 117; break; }
  case 116: 
   label = 119; break;
  case 117: 
   label = 118; break;
  case 118: 
   var $795=$144;
   var $796=(($795+12)|0);
   $144=$796;
   var $797=$__st;
   var $798=(($797+1)|0);
   $__st=$798;
   label = 114; break;
  case 119: 
   var $800=$144;
   var $801=$145;
   var $802=(($800)|(0))==(($801)|(0));
   if ($802) { label = 120; break; } else { label = 121; break; }
  case 120: 
   var $804=$147;
   var $805=HEAP32[(($804)>>2)];
   var $806=$805 | 4;
   HEAP32[(($804)>>2)]=$806;
   label = 121; break;
  case 121: 
   var $808=$144;
   $152=1;
   $136=$__stat_hold;
   var $809=$136;
   $135=$809;
   var $810=$135;
   $133=$810;
   $134=0;
   var $811=$133;
   var $812=(($811)|0);
   $132=$812;
   var $813=$132;
   var $814=$813;
   $131=$814;
   var $815=$131;
   var $816=(($815)|0);
   var $817=HEAP32[(($816)>>2)];
   $__tmp_i_i_i=$817;
   var $818=$134;
   var $819=(($811)|0);
   $130=$819;
   var $820=$130;
   var $821=$820;
   $129=$821;
   var $822=$129;
   var $823=(($822)|0);
   HEAP32[(($823)>>2)]=$818;
   var $824=$__tmp_i_i_i;
   var $825=(($824)|(0))!=0;
   if ($825) { label = 122; break; } else { label = 125; break; }
  case 122: 
   var $827=(($811)|0);
   $128=$827;
   var $828=$128;
   var $829=$828;
   $127=$829;
   var $830=$127;
   var $831=(($830+4)|0);
   var $832=HEAP32[(($831)>>2)];
   var $833=$__tmp_i_i_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$832]($833) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 123; break; } else { label = 124; break; }
  case 123: 
   label = 125; break;
  case 124: 
   var $836$0 = ___cxa_find_matching_catch(-1, -1,0); $836$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 125: 
   STACKTOP = __stackBase__;
   return $808;
  case 126: 
   var $838=$150;
   var $839=$151;
   var $840$0=$838;
   var $840$1=0;
   var $841$0=$840$0;
   var $841$1=$839;
   ___resumeException($841$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__basefield;
   $3=$iob;
   var $4=$3;
   $1=$4;
   var $5=$1;
   var $6=(($5+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 74;
   $__basefield=$8;
   var $9=$__basefield;
   var $10=(($9)|(0))==64;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=8;
   label = 10; break;
  case 3: 
   var $13=$__basefield;
   var $14=(($13)|(0))==8;
   if ($14) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $2=16;
   label = 10; break;
  case 5: 
   var $17=$__basefield;
   var $18=(($17)|(0))==0;
   if ($18) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $2=0;
   label = 10; break;
  case 7: 
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   $2=10;
   label = 10; break;
  case 10: 
   var $24=$2;
   return $24;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep=(__stackBase__)+(32);
   var $__grouping=(__stackBase__)+(40);
   var $__a=(__stackBase__)+(56);
   var $__a_end=(__stackBase__)+(96);
   var $__g=(__stackBase__)+(104);
   var $__g_end=(__stackBase__)+(264);
   var $__dc=(__stackBase__)+(272);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($59);
   $__base=$60;
   var $61=$52;
   var $62=(($__atoms)|0);
   __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $61, $62, $__thousands_sep);
   var $63=$__a;
   _memset($63, 0, 40);
   var $64=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$64;
   var $65=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$65;
   HEAP32[(($__dc)>>2)]=0;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $67=$49;
   var $68=$50;
   $47=$67;
   $48=$68;
   var $69=$47;
   $46=$69;
   var $70=$46;
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=0;
   if ($73) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $75=(($70)|0);
   var $76=HEAP32[(($75)>>2)];
   $45=$76;
   var $77=$45;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($79)|(0))==(($81)|(0));
   if ($82) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $84=$77;
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+36)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$88;
   label = 7; break;
  case 6: 
   var $90=(($77+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=HEAP8[($91)];
   $43=$92;
   var $93=$43;
   var $94=(($93)&(255));
   $44=$94;
   label = 7; break;
  case 7: 
   var $95=$44;
   $41=$95;
   $42=-1;
   var $96=$41;
   var $97=$42;
   var $98=(($96)|(0))==(($97)|(0));
   if ($98) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $100=(($70)|0);
   HEAP32[(($100)>>2)]=0;
   label = 9; break;
  case 9: 
   var $101=(($70)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102)|(0))==0;
   var $104=(($103)&(1));
   var $105=$48;
   $40=$105;
   var $106=$40;
   var $107=(($106)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($108)|(0))!=0;
   if ($109) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $111=(($106)|0);
   var $112=HEAP32[(($111)>>2)];
   $39=$112;
   var $113=$39;
   var $114=(($113+12)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($113+16)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($115)|(0))==(($117)|(0));
   if ($118) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $120=$113;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+36)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($113) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$124;
   label = 14; break;
  case 13: 
   var $126=(($113+12)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=HEAP8[($127)];
   $37=$128;
   var $129=$37;
   var $130=(($129)&(255));
   $38=$130;
   label = 14; break;
  case 14: 
   var $131=$38;
   $35=$131;
   $36=-1;
   var $132=$35;
   var $133=$36;
   var $134=(($132)|(0))==(($133)|(0));
   if ($134) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $136=(($106)|0);
   HEAP32[(($136)>>2)]=0;
   label = 16; break;
  case 16: 
   var $137=(($106)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138)|(0))==0;
   var $140=(($139)&(1));
   var $141=(($104)|(0))==(($140)|(0));
   var $142=$141 ^ 1;
   label = 17; break;
  case 17: 
   if ($142) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $145=$34;
   var $146=(($145)|0);
   var $147=HEAP32[(($146)>>2)];
   $33=$147;
   var $148=$33;
   var $149=(($148+12)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148+16)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=(($150)|(0))==(($152)|(0));
   if ($153) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $155=$148;
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156+36)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$159;
   label = 22; break;
  case 21: 
   var $161=(($148+12)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=HEAP8[($162)];
   $31=$163;
   var $164=$31;
   var $165=(($164)&(255));
   $32=$165;
   label = 22; break;
  case 22: 
   var $166=$32;
   var $167=(($166) & 255);
   label = 23; break;
  case 23: 
   var $169=$__base;
   var $170=(($__a)|0);
   var $171=HEAP8[($__thousands_sep)];
   var $172=(($__g)|0);
   var $173=(($__atoms)|0);
   var $174 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($167, $169, $170, $__a_end, $__dc, $171, $__grouping, $172, $__g_end, $173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $176=(($174)|(0))!=0;
   if ($176) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $179$0 = ___cxa_find_matching_catch(-1, -1); $179$1 = tempRet0;
   var $180=$179$0;
   $55=$180;
   var $181=$179$1;
   $56=$181;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 60; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $184=$30;
   var $185=(($184)|0);
   var $186=HEAP32[(($185)>>2)];
   $29=$186;
   var $187=$29;
   var $188=(($187+12)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($187+16)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=(($189)|(0))==(($191)|(0));
   if ($192) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $194=$187;
   var $195=HEAP32[(($194)>>2)];
   var $196=(($195+40)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$197]($187) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$198;
   label = 32; break;
  case 31: 
   var $200=(($187+12)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($201+1)|0);
   HEAP32[(($200)>>2)]=$202;
   var $203=HEAP8[($201)];
   $27=$203;
   var $204=$27;
   var $205=(($204)&(255));
   $28=$205;
   label = 32; break;
  case 32: 
   var $206=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $209=$26;
   $25=$209;
   var $210=$25;
   var $211=(($210)|0);
   $24=$211;
   var $212=$24;
   var $213=$212;
   $23=$213;
   var $214=$23;
   var $215=(($214)|0);
   var $216=(($215)|0);
   var $217=$216;
   var $218=(($217)|0);
   var $219=$218;
   var $220=HEAP8[($219)];
   var $221=(($220)&(255));
   var $222=$221 & 1;
   var $223=(($222)|(0))!=0;
   if ($223) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$209;
   var $225=$19;
   var $226=(($225)|0);
   $18=$226;
   var $227=$18;
   var $228=$227;
   $17=$228;
   var $229=$17;
   var $230=(($229)|0);
   var $231=(($230)|0);
   var $232=$231;
   var $233=(($232+4)|0);
   var $234=HEAP32[(($233)>>2)];
   var $249 = $234;label = 37; break;
  case 36: 
   $22=$209;
   var $236=$22;
   var $237=(($236)|0);
   $21=$237;
   var $238=$21;
   var $239=$238;
   $20=$239;
   var $240=$20;
   var $241=(($240)|0);
   var $242=(($241)|0);
   var $243=$242;
   var $244=(($243)|0);
   var $245=$244;
   var $246=HEAP8[($245)];
   var $247=(($246)&(255));
   var $248=$247 >> 1;
   var $249 = $248;label = 37; break;
  case 37: 
   var $249;
   var $250=(($249)|(0))!=0;
   if ($250) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $252=HEAP32[(($__g_end)>>2)];
   var $253=(($__g)|0);
   var $254=$252;
   var $255=$253;
   var $256=((($254)-($255))|0);
   var $257=((((($256)|(0)))/(4))&-1);
   var $258=(($257)|(0)) < 40;
   if ($258) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $260=HEAP32[(($__dc)>>2)];
   var $261=HEAP32[(($__g_end)>>2)];
   var $262=(($261+4)|0);
   HEAP32[(($__g_end)>>2)]=$262;
   HEAP32[(($261)>>2)]=$260;
   label = 40; break;
  case 40: 
   var $264=(($__a)|0);
   var $265=HEAP32[(($__a_end)>>2)];
   var $266=$53;
   var $267=$__base;
   var $268 = (function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($264, $265, $266, $267) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 26; break; }
  case 41: 
   var $270=$54;
   HEAP32[(($270)>>2)]=$268;
   var $271=(($__g)|0);
   var $272=HEAP32[(($__g_end)>>2)];
   var $273=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $271, $272, $273) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   $15=$__b;
   $16=$__e;
   var $275=$15;
   var $276=$16;
   $13=$275;
   $14=$276;
   var $277=$13;
   $12=$277;
   var $278=$12;
   var $279=(($278)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=(($280)|(0))!=0;
   if ($281) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $283=(($278)|0);
   var $284=HEAP32[(($283)>>2)];
   $11=$284;
   var $285=$11;
   var $286=(($285+12)|0);
   var $287=HEAP32[(($286)>>2)];
   var $288=(($285+16)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($287)|(0))==(($289)|(0));
   if ($290) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $292=$285;
   var $293=HEAP32[(($292)>>2)];
   var $294=(($293+36)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$295]($285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 26; break; }
  case 45: 
   $10=$296;
   label = 47; break;
  case 46: 
   var $298=(($285+12)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=HEAP8[($299)];
   $9=$300;
   var $301=$9;
   var $302=(($301)&(255));
   $10=$302;
   label = 47; break;
  case 47: 
   var $303=$10;
   $7=$303;
   $8=-1;
   var $304=$7;
   var $305=$8;
   var $306=(($304)|(0))==(($305)|(0));
   if ($306) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $308=(($278)|0);
   HEAP32[(($308)>>2)]=0;
   label = 49; break;
  case 49: 
   var $309=(($278)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))==0;
   var $312=(($311)&(1));
   var $313=$14;
   $6=$313;
   var $314=$6;
   var $315=(($314)|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=(($316)|(0))!=0;
   if ($317) { label = 50; break; } else { label = 56; break; }
  case 50: 
   var $319=(($314)|0);
   var $320=HEAP32[(($319)>>2)];
   $5=$320;
   var $321=$5;
   var $322=(($321+12)|0);
   var $323=HEAP32[(($322)>>2)];
   var $324=(($321+16)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326=(($323)|(0))==(($325)|(0));
   if ($326) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $328=$321;
   var $329=HEAP32[(($328)>>2)];
   var $330=(($329+36)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$331]($321) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 26; break; }
  case 52: 
   $4=$332;
   label = 54; break;
  case 53: 
   var $334=(($321+12)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=HEAP8[($335)];
   $3=$336;
   var $337=$3;
   var $338=(($337)&(255));
   $4=$338;
   label = 54; break;
  case 54: 
   var $339=$4;
   $1=$339;
   $2=-1;
   var $340=$1;
   var $341=$2;
   var $342=(($340)|(0))==(($341)|(0));
   if ($342) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $344=(($314)|0);
   HEAP32[(($344)>>2)]=0;
   label = 56; break;
  case 56: 
   var $345=(($314)|0);
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346)|(0))==0;
   var $348=(($347)&(1));
   var $349=(($312)|(0))==(($348)|(0));
   label = 57; break;
  case 57: 
   if ($349) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $352=$53;
   var $353=HEAP32[(($352)>>2)];
   var $354=$353 | 2;
   HEAP32[(($352)>>2)]=$354;
   label = 59; break;
  case 59: 
   var $356=$agg_result;
   var $357=$__b;
   assert(4 % 1 === 0);HEAP32[(($356)>>2)]=HEAP32[(($357)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 60: 
   var $359=$55;
   var $360=$56;
   var $361$0=$359;
   var $361$1=0;
   var $362$0=$361$0;
   var $362$1=$360;
   ___resumeException($362$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg_result, $__iob, $__atoms, $__thousands_sep) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $__loc=__stackBase__;
   var $12;
   var $13;
   var $__np;
   var $14;
   $9=$__iob;
   $10=$__atoms;
   $11=$__thousands_sep;
   var $15=$9;
   __ZNKSt3__18ios_base6getlocEv($__loc, $15);
   $8=$__loc;
   var $16=$8;
   var $17 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($16, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 12; break; }
  case 2: 
   var $18=$17;
   label = 3; break;
  case 3: 
   var $20=$10;
   $4=$18;
   $5=((20272)|0);
   $6=((20298)|0);
   $7=$20;
   var $21=$4;
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23+32)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$5;
   var $27=$6;
   var $28=$7;
   var $29 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$25]($21, $26, $27, $28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 12; break; }
  case 4: 
   label = 5; break;
  case 5: 
   $3=$__loc;
   var $31=$3;
   var $32 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($31, 19432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 12; break; }
  case 6: 
   var $33=$32;
   label = 7; break;
  case 7: 
   $__np=$33;
   var $35=$__np;
   $2=$35;
   var $36=$2;
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38+16)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 12; break; }
  case 8: 
   label = 9; break;
  case 9: 
   var $43=$11;
   HEAP8[($43)]=$41;
   var $44=$__np;
   $1=$44;
   var $45=$1;
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+20)|0);
   var $49=HEAP32[(($48)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($agg_result, $45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 12; break; }
  case 10: 
   label = 11; break;
  case 11: 
   $14=1;
   __ZNSt3__16localeD2Ev($__loc);
   STACKTOP = __stackBase__;
   return;
  case 12: 
   var $52$0 = ___cxa_find_matching_catch(-1, -1); $52$1 = tempRet0;
   var $53=$52$0;
   $12=$53;
   var $54=$52$1;
   $13=$54;
   __ZNSt3__16localeD2Ev($__loc);
   label = 13; break;
  case 13: 
   var $56=$12;
   var $57=$13;
   var $58$0=$56;
   var $58$1=0;
   var $59$0=$58$0;
   var $59$1=$57;
   ___resumeException($59$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15=__stackBase__;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $__f;
   HEAP8[($15)]=$__ct;
   $16=$__base;
   $17=$__a;
   $18=$__a_end;
   $19=$__dc;
   $20=$__thousands_sep;
   $21=$__grouping;
   $22=$__g;
   $23=$__g_end;
   $24=$__atoms;
   var $25=$18;
   var $26=HEAP32[(($25)>>2)];
   var $27=$17;
   var $28=(($26)|(0))==(($27)|(0));
   if ($28) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $30=HEAP8[($15)];
   var $31=(($30 << 24) >> 24);
   var $32=$24;
   var $33=(($32+24)|0);
   var $34=HEAP8[($33)];
   var $35=(($34 << 24) >> 24);
   var $36=(($31)|(0))==(($35)|(0));
   if ($36) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $38=HEAP8[($15)];
   var $39=(($38 << 24) >> 24);
   var $40=$24;
   var $41=(($40+25)|0);
   var $42=HEAP8[($41)];
   var $43=(($42 << 24) >> 24);
   var $44=(($39)|(0))==(($43)|(0));
   if ($44) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $46=HEAP8[($15)];
   var $47=(($46 << 24) >> 24);
   var $48=$24;
   var $49=(($48+24)|0);
   var $50=HEAP8[($49)];
   var $51=(($50 << 24) >> 24);
   var $52=(($47)|(0))==(($51)|(0));
   var $53=$52 ? 43 : 45;
   var $54=$18;
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+1)|0);
   HEAP32[(($54)>>2)]=$56;
   HEAP8[($55)]=$53;
   var $57=$19;
   HEAP32[(($57)>>2)]=0;
   $14=0;
   label = 34; break;
  case 5: 
   var $59=$21;
   $13=$59;
   var $60=$13;
   $12=$60;
   var $61=$12;
   var $62=(($61)|0);
   $11=$62;
   var $63=$11;
   var $64=$63;
   $10=$64;
   var $65=$10;
   var $66=(($65)|0);
   var $67=(($66)|0);
   var $68=$67;
   var $69=(($68)|0);
   var $70=$69;
   var $71=HEAP8[($70)];
   var $72=(($71)&(255));
   var $73=$72 & 1;
   var $74=(($73)|(0))!=0;
   if ($74) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $6=$60;
   var $76=$6;
   var $77=(($76)|0);
   $5=$77;
   var $78=$5;
   var $79=$78;
   $4=$79;
   var $80=$4;
   var $81=(($80)|0);
   var $82=(($81)|0);
   var $83=$82;
   var $84=(($83+4)|0);
   var $85=HEAP32[(($84)>>2)];
   var $100 = $85;label = 8; break;
  case 7: 
   $9=$60;
   var $87=$9;
   var $88=(($87)|0);
   $8=$88;
   var $89=$8;
   var $90=$89;
   $7=$90;
   var $91=$7;
   var $92=(($91)|0);
   var $93=(($92)|0);
   var $94=$93;
   var $95=(($94)|0);
   var $96=$95;
   var $97=HEAP8[($96)];
   var $98=(($97)&(255));
   var $99=$98 >> 1;
   var $100 = $99;label = 8; break;
  case 8: 
   var $100;
   var $101=(($100)|(0))!=0;
   if ($101) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $103=HEAP8[($15)];
   var $104=(($103 << 24) >> 24);
   var $105=$20;
   var $106=(($105 << 24) >> 24);
   var $107=(($104)|(0))==(($106)|(0));
   if ($107) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $109=$23;
   var $110=HEAP32[(($109)>>2)];
   var $111=$22;
   var $112=$110;
   var $113=$111;
   var $114=((($112)-($113))|0);
   var $115=((((($114)|(0)))/(4))&-1);
   var $116=(($115)|(0)) < 40;
   if ($116) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $118=$19;
   var $119=HEAP32[(($118)>>2)];
   var $120=$23;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+4)|0);
   HEAP32[(($120)>>2)]=$122;
   HEAP32[(($121)>>2)]=$119;
   var $123=$19;
   HEAP32[(($123)>>2)]=0;
   label = 12; break;
  case 12: 
   $14=0;
   label = 34; break;
  case 13: 
   var $126=$24;
   var $127=$24;
   var $128=(($127+26)|0);
   $1=$126;
   $2=$128;
   $3=$15;
   label = 14; break;
  case 14: 
   var $130=$1;
   var $131=$2;
   var $132=(($130)|(0))!=(($131)|(0));
   if ($132) { label = 15; break; } else { label = 18; break; }
  case 15: 
   var $134=$1;
   var $135=HEAP8[($134)];
   var $136=(($135 << 24) >> 24);
   var $137=$3;
   var $138=HEAP8[($137)];
   var $139=(($138 << 24) >> 24);
   var $140=(($136)|(0))==(($139)|(0));
   if ($140) { label = 16; break; } else { label = 17; break; }
  case 16: 
   label = 18; break;
  case 17: 
   var $143=$1;
   var $144=(($143+1)|0);
   $1=$144;
   label = 14; break;
  case 18: 
   var $145=$1;
   var $146=$24;
   var $147=$145;
   var $148=$146;
   var $149=((($147)-($148))|0);
   $__f=$149;
   var $150=$__f;
   var $151=(($150)|(0)) >= 24;
   if ($151) { label = 19; break; } else { label = 20; break; }
  case 19: 
   $14=-1;
   label = 34; break;
  case 20: 
   var $154=$16;
   if ((($154)|(0))==8 | (($154)|(0))==10) {
    label = 21; break;
   }
   else if ((($154)|(0))==16) {
    label = 24; break;
   }
   else {
   label = 31; break;
   }
  case 21: 
   var $156=$__f;
   var $157=$16;
   var $158=(($156)|(0)) >= (($157)|(0));
   if ($158) { label = 22; break; } else { label = 23; break; }
  case 22: 
   $14=-1;
   label = 34; break;
  case 23: 
   label = 31; break;
  case 24: 
   var $162=$__f;
   var $163=(($162)|(0)) < 22;
   if ($163) { label = 25; break; } else { label = 26; break; }
  case 25: 
   label = 31; break;
  case 26: 
   var $166=$18;
   var $167=HEAP32[(($166)>>2)];
   var $168=$17;
   var $169=(($167)|(0))!=(($168)|(0));
   if ($169) { label = 27; break; } else { label = 30; break; }
  case 27: 
   var $171=$18;
   var $172=HEAP32[(($171)>>2)];
   var $173=$17;
   var $174=$172;
   var $175=$173;
   var $176=((($174)-($175))|0);
   var $177=(($176)|(0)) <= 2;
   if ($177) { label = 28; break; } else { label = 30; break; }
  case 28: 
   var $179=$18;
   var $180=HEAP32[(($179)>>2)];
   var $181=((($180)-(1))|0);
   var $182=HEAP8[($181)];
   var $183=(($182 << 24) >> 24);
   var $184=(($183)|(0))==48;
   if ($184) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $186=$19;
   HEAP32[(($186)>>2)]=0;
   var $187=$__f;
   var $188=((20272+$187)|0);
   var $189=HEAP8[($188)];
   var $190=$18;
   var $191=HEAP32[(($190)>>2)];
   var $192=(($191+1)|0);
   HEAP32[(($190)>>2)]=$192;
   HEAP8[($191)]=$189;
   $14=0;
   label = 34; break;
  case 30: 
   $14=-1;
   label = 34; break;
  case 31: 
   var $195=$18;
   var $196=HEAP32[(($195)>>2)];
   var $197=$17;
   var $198=$196;
   var $199=$197;
   var $200=((($198)-($199))|0);
   var $201=(($200)|(0)) < 39;
   if ($201) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $203=$__f;
   var $204=((20272+$203)|0);
   var $205=HEAP8[($204)];
   var $206=$18;
   var $207=HEAP32[(($206)>>2)];
   var $208=(($207+1)|0);
   HEAP32[(($206)>>2)]=$208;
   HEAP8[($207)]=$205;
   label = 33; break;
  case 33: 
   var $210=$19;
   var $211=HEAP32[(($210)>>2)];
   var $212=((($211)+(1))|0);
   HEAP32[(($210)>>2)]=$212;
   $14=0;
   label = 34; break;
  case 34: 
   var $214=$14;
   STACKTOP = __stackBase__;
   return $214;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__save_errno;
   var $__p2=__stackBase__;
   var $__ll=(__stackBase__)+(8);
   var $__current_errno;
   $2=$__a;
   $3=$__a_end;
   $4=$__err;
   $5=$__base;
   var $6=$2;
   var $7=$3;
   var $8=(($6)|(0))!=(($7)|(0));
   if ($8) { label = 2; break; } else { label = 14; break; }
  case 2: 
   var $10=___errno_location();
   var $11=HEAP32[(($10)>>2)];
   $__save_errno=$11;
   var $12=___errno_location();
   HEAP32[(($12)>>2)]=0;
   var $13=$2;
   var $14=$5;
   var $15=__ZNSt3__16__clocEv();
   var $16$0=_strtoll($13, $__p2, $14, $15);
   var $16$1=tempRet0;
   var $st$0$0=(($__ll)|0);
   HEAP32[(($st$0$0)>>2)]=$16$0;
   var $st$1$1=(($__ll+4)|0);
   HEAP32[(($st$1$1)>>2)]=$16$1;
   var $17=___errno_location();
   var $18=HEAP32[(($17)>>2)];
   $__current_errno=$18;
   var $19=$__current_errno;
   var $20=(($19)|(0))==0;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__save_errno;
   var $23=___errno_location();
   HEAP32[(($23)>>2)]=$22;
   label = 4; break;
  case 4: 
   var $25=HEAP32[(($__p2)>>2)];
   var $26=$3;
   var $27=(($25)|(0))!=(($26)|(0));
   if ($27) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $29=$4;
   HEAP32[(($29)>>2)]=4;
   $1=0;
   label = 15; break;
  case 6: 
   var $31=$__current_errno;
   var $32=(($31)|(0))==34;
   if ($32) { label = 9; break; } else { label = 7; break; }
  case 7: 
   var $ld$2$0=(($__ll)|0);
   var $34$0=HEAP32[(($ld$2$0)>>2)];
   var $ld$3$1=(($__ll+4)|0);
   var $34$1=HEAP32[(($ld$3$1)>>2)];
   var $35$0=-2147483648;
   var $35$1=(-2147483648 < 0 ? -1 : 0);
   var $36=(($34$1|0) < ($35$1|0)) | (((($34$1|0) == ($35$1|0) & ($34$0>>>0) <  ($35$0>>>0))));
   if ($36) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $38$0=2147483647;
   var $38$1=(2147483647 < 0 ? -1 : 0);
   var $ld$4$0=(($__ll)|0);
   var $39$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($__ll+4)|0);
   var $39$1=HEAP32[(($ld$5$1)>>2)];
   var $40=(($38$1|0) < ($39$1|0)) | (((($38$1|0) == ($39$1|0) & ($38$0>>>0) <  ($39$0>>>0))));
   if ($40) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $42=$4;
   HEAP32[(($42)>>2)]=4;
   var $ld$6$0=(($__ll)|0);
   var $43$0=HEAP32[(($ld$6$0)>>2)];
   var $ld$7$1=(($__ll+4)|0);
   var $43$1=HEAP32[(($ld$7$1)>>2)];
   var $$etemp$8$0=0;
   var $$etemp$8$1=0;
   var $44=(($43$1|0) > ($$etemp$8$1|0)) | (((($43$1|0) == ($$etemp$8$1|0) & ($43$0>>>0) >  ($$etemp$8$0>>>0))));
   if ($44) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $1=2147483647;
   label = 15; break;
  case 11: 
   $1=-2147483648;
   label = 15; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $ld$9$0=(($__ll)|0);
   var $49$0=HEAP32[(($ld$9$0)>>2)];
   var $ld$10$1=(($__ll+4)|0);
   var $49$1=HEAP32[(($ld$10$1)>>2)];
   var $50$0=$49$0;
   var $50=$50$0;
   $1=$50;
   label = 15; break;
  case 14: 
   var $52=$4;
   HEAP32[(($52)>>2)]=4;
   $1=0;
   label = 15; break;
  case 15: 
   var $54=$1;
   STACKTOP = __stackBase__;
   return $54;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t_i_i_i=__stackBase__;
   var $6;
   var $7;
   var $8=(__stackBase__)+(8);
   var $9;
   var $10;
   var $11=(__stackBase__)+(16);
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $__ig;
   var $__eg;
   var $__r;
   $43=$__grouping;
   $44=$__g;
   $45=$__g_end;
   $46=$__err;
   var $47=$43;
   $42=$47;
   var $48=$42;
   $41=$48;
   var $49=$41;
   var $50=(($49)|0);
   $40=$50;
   var $51=$40;
   var $52=$51;
   $39=$52;
   var $53=$39;
   var $54=(($53)|0);
   var $55=(($54)|0);
   var $56=$55;
   var $57=(($56)|0);
   var $58=$57;
   var $59=HEAP8[($58)];
   var $60=(($59)&(255));
   var $61=$60 & 1;
   var $62=(($61)|(0))!=0;
   if ($62) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $35=$48;
   var $64=$35;
   var $65=(($64)|0);
   $34=$65;
   var $66=$34;
   var $67=$66;
   $33=$67;
   var $68=$33;
   var $69=(($68)|0);
   var $70=(($69)|0);
   var $71=$70;
   var $72=(($71+4)|0);
   var $73=HEAP32[(($72)>>2)];
   var $88 = $73;label = 4; break;
  case 3: 
   $38=$48;
   var $75=$38;
   var $76=(($75)|0);
   $37=$76;
   var $77=$37;
   var $78=$77;
   $36=$78;
   var $79=$36;
   var $80=(($79)|0);
   var $81=(($80)|0);
   var $82=$81;
   var $83=(($82)|0);
   var $84=$83;
   var $85=HEAP8[($84)];
   var $86=(($85)&(255));
   var $87=$86 >> 1;
   var $88 = $87;label = 4; break;
  case 4: 
   var $88;
   var $89=(($88)|(0))!=0;
   if ($89) { label = 5; break; } else { label = 34; break; }
  case 5: 
   var $91=$44;
   var $92=$45;
   $9=$91;
   $10=$92;
   var $93=$9;
   var $94=$10;
   var $tmp_i=$8;
   var $tmp1_i=$11;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $6=$93;
   $7=$94;
   var $95=$6;
   var $96=$7;
   var $97=(($95)|(0))!=(($96)|(0));
   if ($97) { label = 6; break; } else { label = 10; break; }
  case 6: 
   label = 7; break;
  case 7: 
   var $100=$6;
   var $101=$7;
   var $102=((($101)-(4))|0);
   $7=$102;
   var $103=(($100)>>>(0)) < (($102)>>>(0));
   if ($103) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $105=$6;
   var $106=$7;
   $4=$105;
   $5=$106;
   var $107=$4;
   $3=$107;
   var $108=$3;
   var $109=HEAP32[(($108)>>2)];
   HEAP32[(($__t_i_i_i)>>2)]=$109;
   var $110=$5;
   $1=$110;
   var $111=$1;
   var $112=HEAP32[(($111)>>2)];
   var $113=$4;
   HEAP32[(($113)>>2)]=$112;
   $2=$__t_i_i_i;
   var $114=$2;
   var $115=HEAP32[(($114)>>2)];
   var $116=$5;
   HEAP32[(($116)>>2)]=$115;
   var $117=$6;
   var $118=(($117+4)|0);
   $6=$118;
   label = 7; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $120=$43;
   $22=$120;
   var $121=$22;
   $21=$121;
   var $122=$21;
   $20=$122;
   var $123=$20;
   var $124=(($123)|0);
   $19=$124;
   var $125=$19;
   var $126=$125;
   $18=$126;
   var $127=$18;
   var $128=(($127)|0);
   var $129=(($128)|0);
   var $130=$129;
   var $131=(($130)|0);
   var $132=$131;
   var $133=HEAP8[($132)];
   var $134=(($133)&(255));
   var $135=$134 & 1;
   var $136=(($135)|(0))!=0;
   if ($136) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $14=$122;
   var $138=$14;
   var $139=(($138)|0);
   $13=$139;
   var $140=$13;
   var $141=$140;
   $12=$141;
   var $142=$12;
   var $143=(($142)|0);
   var $144=(($143)|0);
   var $145=$144;
   var $146=(($145+8)|0);
   var $147=HEAP32[(($146)>>2)];
   var $159 = $147;label = 13; break;
  case 12: 
   $17=$122;
   var $149=$17;
   var $150=(($149)|0);
   $16=$150;
   var $151=$16;
   var $152=$151;
   $15=$152;
   var $153=$15;
   var $154=(($153)|0);
   var $155=(($154)|0);
   var $156=$155;
   var $157=(($156+1)|0);
   var $158=(($157)|0);
   var $159 = $158;label = 13; break;
  case 13: 
   var $159;
   $__ig=$159;
   var $160=$__ig;
   var $161=$43;
   $32=$161;
   var $162=$32;
   $31=$162;
   var $163=$31;
   var $164=(($163)|0);
   $30=$164;
   var $165=$30;
   var $166=$165;
   $29=$166;
   var $167=$29;
   var $168=(($167)|0);
   var $169=(($168)|0);
   var $170=$169;
   var $171=(($170)|0);
   var $172=$171;
   var $173=HEAP8[($172)];
   var $174=(($173)&(255));
   var $175=$174 & 1;
   var $176=(($175)|(0))!=0;
   if ($176) { label = 14; break; } else { label = 15; break; }
  case 14: 
   $25=$162;
   var $178=$25;
   var $179=(($178)|0);
   $24=$179;
   var $180=$24;
   var $181=$180;
   $23=$181;
   var $182=$23;
   var $183=(($182)|0);
   var $184=(($183)|0);
   var $185=$184;
   var $186=(($185+4)|0);
   var $187=HEAP32[(($186)>>2)];
   var $202 = $187;label = 16; break;
  case 15: 
   $28=$162;
   var $189=$28;
   var $190=(($189)|0);
   $27=$190;
   var $191=$27;
   var $192=$191;
   $26=$192;
   var $193=$26;
   var $194=(($193)|0);
   var $195=(($194)|0);
   var $196=$195;
   var $197=(($196)|0);
   var $198=$197;
   var $199=HEAP8[($198)];
   var $200=(($199)&(255));
   var $201=$200 >> 1;
   var $202 = $201;label = 16; break;
  case 16: 
   var $202;
   var $203=(($160+$202)|0);
   $__eg=$203;
   var $204=$44;
   $__r=$204;
   label = 17; break;
  case 17: 
   var $206=$__r;
   var $207=$45;
   var $208=((($207)-(4))|0);
   var $209=(($206)>>>(0)) < (($208)>>>(0));
   if ($209) { label = 18; break; } else { label = 27; break; }
  case 18: 
   var $211=$__ig;
   var $212=HEAP8[($211)];
   var $213=(($212 << 24) >> 24);
   var $214=0 < (($213)|(0));
   if ($214) { label = 19; break; } else { label = 23; break; }
  case 19: 
   var $216=$__ig;
   var $217=HEAP8[($216)];
   var $218=(($217 << 24) >> 24);
   var $219=127;
   var $220=(($218)|(0)) < (($219)|(0));
   if ($220) { label = 20; break; } else { label = 23; break; }
  case 20: 
   var $222=$__ig;
   var $223=HEAP8[($222)];
   var $224=(($223 << 24) >> 24);
   var $225=$__r;
   var $226=HEAP32[(($225)>>2)];
   var $227=(($224)|(0))!=(($226)|(0));
   if ($227) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $229=$46;
   HEAP32[(($229)>>2)]=4;
   label = 34; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $232=$__eg;
   var $233=$__ig;
   var $234=$232;
   var $235=$233;
   var $236=((($234)-($235))|0);
   var $237=(($236)|(0)) > 1;
   if ($237) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $239=$__ig;
   var $240=(($239+1)|0);
   $__ig=$240;
   label = 25; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $243=$__r;
   var $244=(($243+4)|0);
   $__r=$244;
   label = 17; break;
  case 27: 
   var $246=$__ig;
   var $247=HEAP8[($246)];
   var $248=(($247 << 24) >> 24);
   var $249=0 < (($248)|(0));
   if ($249) { label = 28; break; } else { label = 33; break; }
  case 28: 
   var $251=$__ig;
   var $252=HEAP8[($251)];
   var $253=(($252 << 24) >> 24);
   var $254=127;
   var $255=(($253)|(0)) < (($254)|(0));
   if ($255) { label = 29; break; } else { label = 33; break; }
  case 29: 
   var $257=$__ig;
   var $258=HEAP8[($257)];
   var $259=(($258 << 24) >> 24);
   var $260=$45;
   var $261=((($260)-(4))|0);
   var $262=HEAP32[(($261)>>2)];
   var $263=(($259)>>>(0)) < (($262)>>>(0));
   if ($263) { label = 31; break; } else { label = 30; break; }
  case 30: 
   var $265=$45;
   var $266=((($265)-(4))|0);
   var $267=HEAP32[(($266)>>2)];
   var $268=(($267)|(0))==0;
   if ($268) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $270=$46;
   HEAP32[(($270)>>2)]=4;
   label = 32; break;
  case 32: 
   label = 33; break;
  case 33: 
   label = 34; break;
  case 34: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep=(__stackBase__)+(32);
   var $__grouping=(__stackBase__)+(40);
   var $__a=(__stackBase__)+(56);
   var $__a_end=(__stackBase__)+(96);
   var $__g=(__stackBase__)+(104);
   var $__g_end=(__stackBase__)+(264);
   var $__dc=(__stackBase__)+(272);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($59);
   $__base=$60;
   var $61=$52;
   var $62=(($__atoms)|0);
   __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $61, $62, $__thousands_sep);
   var $63=$__a;
   _memset($63, 0, 40);
   var $64=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$64;
   var $65=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$65;
   HEAP32[(($__dc)>>2)]=0;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $67=$49;
   var $68=$50;
   $47=$67;
   $48=$68;
   var $69=$47;
   $46=$69;
   var $70=$46;
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=0;
   if ($73) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $75=(($70)|0);
   var $76=HEAP32[(($75)>>2)];
   $45=$76;
   var $77=$45;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($79)|(0))==(($81)|(0));
   if ($82) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $84=$77;
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+36)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$88;
   label = 7; break;
  case 6: 
   var $90=(($77+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=HEAP8[($91)];
   $43=$92;
   var $93=$43;
   var $94=(($93)&(255));
   $44=$94;
   label = 7; break;
  case 7: 
   var $95=$44;
   $41=$95;
   $42=-1;
   var $96=$41;
   var $97=$42;
   var $98=(($96)|(0))==(($97)|(0));
   if ($98) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $100=(($70)|0);
   HEAP32[(($100)>>2)]=0;
   label = 9; break;
  case 9: 
   var $101=(($70)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102)|(0))==0;
   var $104=(($103)&(1));
   var $105=$48;
   $40=$105;
   var $106=$40;
   var $107=(($106)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($108)|(0))!=0;
   if ($109) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $111=(($106)|0);
   var $112=HEAP32[(($111)>>2)];
   $39=$112;
   var $113=$39;
   var $114=(($113+12)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($113+16)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($115)|(0))==(($117)|(0));
   if ($118) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $120=$113;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+36)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($113) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$124;
   label = 14; break;
  case 13: 
   var $126=(($113+12)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=HEAP8[($127)];
   $37=$128;
   var $129=$37;
   var $130=(($129)&(255));
   $38=$130;
   label = 14; break;
  case 14: 
   var $131=$38;
   $35=$131;
   $36=-1;
   var $132=$35;
   var $133=$36;
   var $134=(($132)|(0))==(($133)|(0));
   if ($134) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $136=(($106)|0);
   HEAP32[(($136)>>2)]=0;
   label = 16; break;
  case 16: 
   var $137=(($106)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138)|(0))==0;
   var $140=(($139)&(1));
   var $141=(($104)|(0))==(($140)|(0));
   var $142=$141 ^ 1;
   label = 17; break;
  case 17: 
   if ($142) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $145=$34;
   var $146=(($145)|0);
   var $147=HEAP32[(($146)>>2)];
   $33=$147;
   var $148=$33;
   var $149=(($148+12)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148+16)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=(($150)|(0))==(($152)|(0));
   if ($153) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $155=$148;
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156+36)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$159;
   label = 22; break;
  case 21: 
   var $161=(($148+12)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=HEAP8[($162)];
   $31=$163;
   var $164=$31;
   var $165=(($164)&(255));
   $32=$165;
   label = 22; break;
  case 22: 
   var $166=$32;
   var $167=(($166) & 255);
   label = 23; break;
  case 23: 
   var $169=$__base;
   var $170=(($__a)|0);
   var $171=HEAP8[($__thousands_sep)];
   var $172=(($__g)|0);
   var $173=(($__atoms)|0);
   var $174 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($167, $169, $170, $__a_end, $__dc, $171, $__grouping, $172, $__g_end, $173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $176=(($174)|(0))!=0;
   if ($176) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $179$0 = ___cxa_find_matching_catch(-1, -1); $179$1 = tempRet0;
   var $180=$179$0;
   $55=$180;
   var $181=$179$1;
   $56=$181;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 60; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $184=$30;
   var $185=(($184)|0);
   var $186=HEAP32[(($185)>>2)];
   $29=$186;
   var $187=$29;
   var $188=(($187+12)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($187+16)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=(($189)|(0))==(($191)|(0));
   if ($192) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $194=$187;
   var $195=HEAP32[(($194)>>2)];
   var $196=(($195+40)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$197]($187) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$198;
   label = 32; break;
  case 31: 
   var $200=(($187+12)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($201+1)|0);
   HEAP32[(($200)>>2)]=$202;
   var $203=HEAP8[($201)];
   $27=$203;
   var $204=$27;
   var $205=(($204)&(255));
   $28=$205;
   label = 32; break;
  case 32: 
   var $206=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $209=$26;
   $25=$209;
   var $210=$25;
   var $211=(($210)|0);
   $24=$211;
   var $212=$24;
   var $213=$212;
   $23=$213;
   var $214=$23;
   var $215=(($214)|0);
   var $216=(($215)|0);
   var $217=$216;
   var $218=(($217)|0);
   var $219=$218;
   var $220=HEAP8[($219)];
   var $221=(($220)&(255));
   var $222=$221 & 1;
   var $223=(($222)|(0))!=0;
   if ($223) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$209;
   var $225=$19;
   var $226=(($225)|0);
   $18=$226;
   var $227=$18;
   var $228=$227;
   $17=$228;
   var $229=$17;
   var $230=(($229)|0);
   var $231=(($230)|0);
   var $232=$231;
   var $233=(($232+4)|0);
   var $234=HEAP32[(($233)>>2)];
   var $249 = $234;label = 37; break;
  case 36: 
   $22=$209;
   var $236=$22;
   var $237=(($236)|0);
   $21=$237;
   var $238=$21;
   var $239=$238;
   $20=$239;
   var $240=$20;
   var $241=(($240)|0);
   var $242=(($241)|0);
   var $243=$242;
   var $244=(($243)|0);
   var $245=$244;
   var $246=HEAP8[($245)];
   var $247=(($246)&(255));
   var $248=$247 >> 1;
   var $249 = $248;label = 37; break;
  case 37: 
   var $249;
   var $250=(($249)|(0))!=0;
   if ($250) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $252=HEAP32[(($__g_end)>>2)];
   var $253=(($__g)|0);
   var $254=$252;
   var $255=$253;
   var $256=((($254)-($255))|0);
   var $257=((((($256)|(0)))/(4))&-1);
   var $258=(($257)|(0)) < 40;
   if ($258) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $260=HEAP32[(($__dc)>>2)];
   var $261=HEAP32[(($__g_end)>>2)];
   var $262=(($261+4)|0);
   HEAP32[(($__g_end)>>2)]=$262;
   HEAP32[(($261)>>2)]=$260;
   label = 40; break;
  case 40: 
   var $264=(($__a)|0);
   var $265=HEAP32[(($__a_end)>>2)];
   var $266=$53;
   var $267=$__base;
   var $268 = (function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($264, $265, $266, $267) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $268$0 = $268;var $268$1 = tempRet0;if (!__THREW__) { label = 41; break; } else { label = 26; break; }
  case 41: 
   var $270=$54;
   var $st$0$0=(($270)|0);
   HEAP32[(($st$0$0)>>2)]=$268$0;
   var $st$1$1=(($270+4)|0);
   HEAP32[(($st$1$1)>>2)]=$268$1;
   var $271=(($__g)|0);
   var $272=HEAP32[(($__g_end)>>2)];
   var $273=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $271, $272, $273) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   $15=$__b;
   $16=$__e;
   var $275=$15;
   var $276=$16;
   $13=$275;
   $14=$276;
   var $277=$13;
   $12=$277;
   var $278=$12;
   var $279=(($278)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=(($280)|(0))!=0;
   if ($281) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $283=(($278)|0);
   var $284=HEAP32[(($283)>>2)];
   $11=$284;
   var $285=$11;
   var $286=(($285+12)|0);
   var $287=HEAP32[(($286)>>2)];
   var $288=(($285+16)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($287)|(0))==(($289)|(0));
   if ($290) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $292=$285;
   var $293=HEAP32[(($292)>>2)];
   var $294=(($293+36)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$295]($285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 26; break; }
  case 45: 
   $10=$296;
   label = 47; break;
  case 46: 
   var $298=(($285+12)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=HEAP8[($299)];
   $9=$300;
   var $301=$9;
   var $302=(($301)&(255));
   $10=$302;
   label = 47; break;
  case 47: 
   var $303=$10;
   $7=$303;
   $8=-1;
   var $304=$7;
   var $305=$8;
   var $306=(($304)|(0))==(($305)|(0));
   if ($306) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $308=(($278)|0);
   HEAP32[(($308)>>2)]=0;
   label = 49; break;
  case 49: 
   var $309=(($278)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))==0;
   var $312=(($311)&(1));
   var $313=$14;
   $6=$313;
   var $314=$6;
   var $315=(($314)|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=(($316)|(0))!=0;
   if ($317) { label = 50; break; } else { label = 56; break; }
  case 50: 
   var $319=(($314)|0);
   var $320=HEAP32[(($319)>>2)];
   $5=$320;
   var $321=$5;
   var $322=(($321+12)|0);
   var $323=HEAP32[(($322)>>2)];
   var $324=(($321+16)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326=(($323)|(0))==(($325)|(0));
   if ($326) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $328=$321;
   var $329=HEAP32[(($328)>>2)];
   var $330=(($329+36)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$331]($321) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 26; break; }
  case 52: 
   $4=$332;
   label = 54; break;
  case 53: 
   var $334=(($321+12)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=HEAP8[($335)];
   $3=$336;
   var $337=$3;
   var $338=(($337)&(255));
   $4=$338;
   label = 54; break;
  case 54: 
   var $339=$4;
   $1=$339;
   $2=-1;
   var $340=$1;
   var $341=$2;
   var $342=(($340)|(0))==(($341)|(0));
   if ($342) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $344=(($314)|0);
   HEAP32[(($344)>>2)]=0;
   label = 56; break;
  case 56: 
   var $345=(($314)|0);
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346)|(0))==0;
   var $348=(($347)&(1));
   var $349=(($312)|(0))==(($348)|(0));
   label = 57; break;
  case 57: 
   if ($349) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $352=$53;
   var $353=HEAP32[(($352)>>2)];
   var $354=$353 | 2;
   HEAP32[(($352)>>2)]=$354;
   label = 59; break;
  case 59: 
   var $356=$agg_result;
   var $357=$__b;
   assert(4 % 1 === 0);HEAP32[(($356)>>2)]=HEAP32[(($357)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 60: 
   var $359=$55;
   var $360=$56;
   var $361$0=$359;
   var $361$1=0;
   var $362$0=$361$0;
   var $362$1=$360;
   ___resumeException($362$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=__stackBase__;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__save_errno;
   var $__p2=(__stackBase__)+(8);
   var $__ll=(__stackBase__)+(16);
   var $__current_errno;
   $2=$__a;
   $3=$__a_end;
   $4=$__err;
   $5=$__base;
   var $6=$2;
   var $7=$3;
   var $8=(($6)|(0))!=(($7)|(0));
   if ($8) { label = 2; break; } else { label = 14; break; }
  case 2: 
   var $10=___errno_location();
   var $11=HEAP32[(($10)>>2)];
   $__save_errno=$11;
   var $12=___errno_location();
   HEAP32[(($12)>>2)]=0;
   var $13=$2;
   var $14=$5;
   var $15=__ZNSt3__16__clocEv();
   var $16$0=_strtoll($13, $__p2, $14, $15);
   var $16$1=tempRet0;
   var $st$0$0=(($__ll)|0);
   HEAP32[(($st$0$0)>>2)]=$16$0;
   var $st$1$1=(($__ll+4)|0);
   HEAP32[(($st$1$1)>>2)]=$16$1;
   var $17=___errno_location();
   var $18=HEAP32[(($17)>>2)];
   $__current_errno=$18;
   var $19=$__current_errno;
   var $20=(($19)|(0))==0;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__save_errno;
   var $23=___errno_location();
   HEAP32[(($23)>>2)]=$22;
   label = 4; break;
  case 4: 
   var $25=HEAP32[(($__p2)>>2)];
   var $26=$3;
   var $27=(($25)|(0))!=(($26)|(0));
   if ($27) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $29=$4;
   HEAP32[(($29)>>2)]=4;
   var $$etemp$2$0=0;
   var $$etemp$2$1=0;
   var $st$3$0=(($1)|0);
   HEAP32[(($st$3$0)>>2)]=$$etemp$2$0;
   var $st$4$1=(($1+4)|0);
   HEAP32[(($st$4$1)>>2)]=$$etemp$2$1;
   label = 15; break;
  case 6: 
   var $31=$__current_errno;
   var $32=(($31)|(0))==34;
   if ($32) { label = 9; break; } else { label = 7; break; }
  case 7: 
   var $ld$5$0=(($__ll)|0);
   var $34$0=HEAP32[(($ld$5$0)>>2)];
   var $ld$6$1=(($__ll+4)|0);
   var $34$1=HEAP32[(($ld$6$1)>>2)];
   var $$etemp$7$0=0;
   var $$etemp$7$1=-2147483648;
   var $35=(($34$1|0) < ($$etemp$7$1|0)) | (((($34$1|0) == ($$etemp$7$1|0) & ($34$0>>>0) <  ($$etemp$7$0>>>0))));
   if ($35) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $ld$8$0=(($__ll)|0);
   var $37$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($__ll+4)|0);
   var $37$1=HEAP32[(($ld$9$1)>>2)];
   var $$etemp$10$0=-1;
   var $$etemp$10$1=2147483647;
   var $38=(($$etemp$10$1|0) < ($37$1|0)) | (((($$etemp$10$1|0) == ($37$1|0) & ($$etemp$10$0>>>0) <  ($37$0>>>0))));
   if ($38) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $40=$4;
   HEAP32[(($40)>>2)]=4;
   var $ld$11$0=(($__ll)|0);
   var $41$0=HEAP32[(($ld$11$0)>>2)];
   var $ld$12$1=(($__ll+4)|0);
   var $41$1=HEAP32[(($ld$12$1)>>2)];
   var $$etemp$13$0=0;
   var $$etemp$13$1=0;
   var $42=(($41$1|0) > ($$etemp$13$1|0)) | (((($41$1|0) == ($$etemp$13$1|0) & ($41$0>>>0) >  ($$etemp$13$0>>>0))));
   if ($42) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $$etemp$14$0=-1;
   var $$etemp$14$1=2147483647;
   var $st$15$0=(($1)|0);
   HEAP32[(($st$15$0)>>2)]=$$etemp$14$0;
   var $st$16$1=(($1+4)|0);
   HEAP32[(($st$16$1)>>2)]=$$etemp$14$1;
   label = 15; break;
  case 11: 
   var $$etemp$17$0=0;
   var $$etemp$17$1=-2147483648;
   var $st$18$0=(($1)|0);
   HEAP32[(($st$18$0)>>2)]=$$etemp$17$0;
   var $st$19$1=(($1+4)|0);
   HEAP32[(($st$19$1)>>2)]=$$etemp$17$1;
   label = 15; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $ld$20$0=(($__ll)|0);
   var $47$0=HEAP32[(($ld$20$0)>>2)];
   var $ld$21$1=(($__ll+4)|0);
   var $47$1=HEAP32[(($ld$21$1)>>2)];
   var $st$22$0=(($1)|0);
   HEAP32[(($st$22$0)>>2)]=$47$0;
   var $st$23$1=(($1+4)|0);
   HEAP32[(($st$23$1)>>2)]=$47$1;
   label = 15; break;
  case 14: 
   var $49=$4;
   HEAP32[(($49)>>2)]=4;
   var $$etemp$24$0=0;
   var $$etemp$24$1=0;
   var $st$25$0=(($1)|0);
   HEAP32[(($st$25$0)>>2)]=$$etemp$24$0;
   var $st$26$1=(($1+4)|0);
   HEAP32[(($st$26$1)>>2)]=$$etemp$24$1;
   label = 15; break;
  case 15: 
   var $ld$27$0=(($1)|0);
   var $51$0=HEAP32[(($ld$27$0)>>2)];
   var $ld$28$1=(($1+4)|0);
   var $51$1=HEAP32[(($ld$28$1)>>2)];
   STACKTOP = __stackBase__;
   return (tempRet0=$51$1,$51$0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep=(__stackBase__)+(32);
   var $__grouping=(__stackBase__)+(40);
   var $__a=(__stackBase__)+(56);
   var $__a_end=(__stackBase__)+(96);
   var $__g=(__stackBase__)+(104);
   var $__g_end=(__stackBase__)+(264);
   var $__dc=(__stackBase__)+(272);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($59);
   $__base=$60;
   var $61=$52;
   var $62=(($__atoms)|0);
   __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $61, $62, $__thousands_sep);
   var $63=$__a;
   _memset($63, 0, 40);
   var $64=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$64;
   var $65=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$65;
   HEAP32[(($__dc)>>2)]=0;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $67=$49;
   var $68=$50;
   $47=$67;
   $48=$68;
   var $69=$47;
   $46=$69;
   var $70=$46;
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=0;
   if ($73) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $75=(($70)|0);
   var $76=HEAP32[(($75)>>2)];
   $45=$76;
   var $77=$45;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($79)|(0))==(($81)|(0));
   if ($82) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $84=$77;
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+36)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$88;
   label = 7; break;
  case 6: 
   var $90=(($77+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=HEAP8[($91)];
   $43=$92;
   var $93=$43;
   var $94=(($93)&(255));
   $44=$94;
   label = 7; break;
  case 7: 
   var $95=$44;
   $41=$95;
   $42=-1;
   var $96=$41;
   var $97=$42;
   var $98=(($96)|(0))==(($97)|(0));
   if ($98) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $100=(($70)|0);
   HEAP32[(($100)>>2)]=0;
   label = 9; break;
  case 9: 
   var $101=(($70)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102)|(0))==0;
   var $104=(($103)&(1));
   var $105=$48;
   $40=$105;
   var $106=$40;
   var $107=(($106)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($108)|(0))!=0;
   if ($109) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $111=(($106)|0);
   var $112=HEAP32[(($111)>>2)];
   $39=$112;
   var $113=$39;
   var $114=(($113+12)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($113+16)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($115)|(0))==(($117)|(0));
   if ($118) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $120=$113;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+36)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($113) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$124;
   label = 14; break;
  case 13: 
   var $126=(($113+12)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=HEAP8[($127)];
   $37=$128;
   var $129=$37;
   var $130=(($129)&(255));
   $38=$130;
   label = 14; break;
  case 14: 
   var $131=$38;
   $35=$131;
   $36=-1;
   var $132=$35;
   var $133=$36;
   var $134=(($132)|(0))==(($133)|(0));
   if ($134) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $136=(($106)|0);
   HEAP32[(($136)>>2)]=0;
   label = 16; break;
  case 16: 
   var $137=(($106)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138)|(0))==0;
   var $140=(($139)&(1));
   var $141=(($104)|(0))==(($140)|(0));
   var $142=$141 ^ 1;
   label = 17; break;
  case 17: 
   if ($142) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $145=$34;
   var $146=(($145)|0);
   var $147=HEAP32[(($146)>>2)];
   $33=$147;
   var $148=$33;
   var $149=(($148+12)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148+16)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=(($150)|(0))==(($152)|(0));
   if ($153) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $155=$148;
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156+36)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$159;
   label = 22; break;
  case 21: 
   var $161=(($148+12)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=HEAP8[($162)];
   $31=$163;
   var $164=$31;
   var $165=(($164)&(255));
   $32=$165;
   label = 22; break;
  case 22: 
   var $166=$32;
   var $167=(($166) & 255);
   label = 23; break;
  case 23: 
   var $169=$__base;
   var $170=(($__a)|0);
   var $171=HEAP8[($__thousands_sep)];
   var $172=(($__g)|0);
   var $173=(($__atoms)|0);
   var $174 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($167, $169, $170, $__a_end, $__dc, $171, $__grouping, $172, $__g_end, $173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $176=(($174)|(0))!=0;
   if ($176) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $179$0 = ___cxa_find_matching_catch(-1, -1); $179$1 = tempRet0;
   var $180=$179$0;
   $55=$180;
   var $181=$179$1;
   $56=$181;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 60; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $184=$30;
   var $185=(($184)|0);
   var $186=HEAP32[(($185)>>2)];
   $29=$186;
   var $187=$29;
   var $188=(($187+12)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($187+16)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=(($189)|(0))==(($191)|(0));
   if ($192) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $194=$187;
   var $195=HEAP32[(($194)>>2)];
   var $196=(($195+40)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$197]($187) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$198;
   label = 32; break;
  case 31: 
   var $200=(($187+12)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($201+1)|0);
   HEAP32[(($200)>>2)]=$202;
   var $203=HEAP8[($201)];
   $27=$203;
   var $204=$27;
   var $205=(($204)&(255));
   $28=$205;
   label = 32; break;
  case 32: 
   var $206=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $209=$26;
   $25=$209;
   var $210=$25;
   var $211=(($210)|0);
   $24=$211;
   var $212=$24;
   var $213=$212;
   $23=$213;
   var $214=$23;
   var $215=(($214)|0);
   var $216=(($215)|0);
   var $217=$216;
   var $218=(($217)|0);
   var $219=$218;
   var $220=HEAP8[($219)];
   var $221=(($220)&(255));
   var $222=$221 & 1;
   var $223=(($222)|(0))!=0;
   if ($223) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$209;
   var $225=$19;
   var $226=(($225)|0);
   $18=$226;
   var $227=$18;
   var $228=$227;
   $17=$228;
   var $229=$17;
   var $230=(($229)|0);
   var $231=(($230)|0);
   var $232=$231;
   var $233=(($232+4)|0);
   var $234=HEAP32[(($233)>>2)];
   var $249 = $234;label = 37; break;
  case 36: 
   $22=$209;
   var $236=$22;
   var $237=(($236)|0);
   $21=$237;
   var $238=$21;
   var $239=$238;
   $20=$239;
   var $240=$20;
   var $241=(($240)|0);
   var $242=(($241)|0);
   var $243=$242;
   var $244=(($243)|0);
   var $245=$244;
   var $246=HEAP8[($245)];
   var $247=(($246)&(255));
   var $248=$247 >> 1;
   var $249 = $248;label = 37; break;
  case 37: 
   var $249;
   var $250=(($249)|(0))!=0;
   if ($250) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $252=HEAP32[(($__g_end)>>2)];
   var $253=(($__g)|0);
   var $254=$252;
   var $255=$253;
   var $256=((($254)-($255))|0);
   var $257=((((($256)|(0)))/(4))&-1);
   var $258=(($257)|(0)) < 40;
   if ($258) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $260=HEAP32[(($__dc)>>2)];
   var $261=HEAP32[(($__g_end)>>2)];
   var $262=(($261+4)|0);
   HEAP32[(($__g_end)>>2)]=$262;
   HEAP32[(($261)>>2)]=$260;
   label = 40; break;
  case 40: 
   var $264=(($__a)|0);
   var $265=HEAP32[(($__a_end)>>2)];
   var $266=$53;
   var $267=$__base;
   var $268 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($264, $265, $266, $267) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 26; break; }
  case 41: 
   var $270=$54;
   HEAP16[(($270)>>1)]=$268;
   var $271=(($__g)|0);
   var $272=HEAP32[(($__g_end)>>2)];
   var $273=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $271, $272, $273) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   $15=$__b;
   $16=$__e;
   var $275=$15;
   var $276=$16;
   $13=$275;
   $14=$276;
   var $277=$13;
   $12=$277;
   var $278=$12;
   var $279=(($278)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=(($280)|(0))!=0;
   if ($281) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $283=(($278)|0);
   var $284=HEAP32[(($283)>>2)];
   $11=$284;
   var $285=$11;
   var $286=(($285+12)|0);
   var $287=HEAP32[(($286)>>2)];
   var $288=(($285+16)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($287)|(0))==(($289)|(0));
   if ($290) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $292=$285;
   var $293=HEAP32[(($292)>>2)];
   var $294=(($293+36)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$295]($285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 26; break; }
  case 45: 
   $10=$296;
   label = 47; break;
  case 46: 
   var $298=(($285+12)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=HEAP8[($299)];
   $9=$300;
   var $301=$9;
   var $302=(($301)&(255));
   $10=$302;
   label = 47; break;
  case 47: 
   var $303=$10;
   $7=$303;
   $8=-1;
   var $304=$7;
   var $305=$8;
   var $306=(($304)|(0))==(($305)|(0));
   if ($306) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $308=(($278)|0);
   HEAP32[(($308)>>2)]=0;
   label = 49; break;
  case 49: 
   var $309=(($278)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))==0;
   var $312=(($311)&(1));
   var $313=$14;
   $6=$313;
   var $314=$6;
   var $315=(($314)|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=(($316)|(0))!=0;
   if ($317) { label = 50; break; } else { label = 56; break; }
  case 50: 
   var $319=(($314)|0);
   var $320=HEAP32[(($319)>>2)];
   $5=$320;
   var $321=$5;
   var $322=(($321+12)|0);
   var $323=HEAP32[(($322)>>2)];
   var $324=(($321+16)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326=(($323)|(0))==(($325)|(0));
   if ($326) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $328=$321;
   var $329=HEAP32[(($328)>>2)];
   var $330=(($329+36)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$331]($321) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 26; break; }
  case 52: 
   $4=$332;
   label = 54; break;
  case 53: 
   var $334=(($321+12)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=HEAP8[($335)];
   $3=$336;
   var $337=$3;
   var $338=(($337)&(255));
   $4=$338;
   label = 54; break;
  case 54: 
   var $339=$4;
   $1=$339;
   $2=-1;
   var $340=$1;
   var $341=$2;
   var $342=(($340)|(0))==(($341)|(0));
   if ($342) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $344=(($314)|0);
   HEAP32[(($344)>>2)]=0;
   label = 56; break;
  case 56: 
   var $345=(($314)|0);
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346)|(0))==0;
   var $348=(($347)&(1));
   var $349=(($312)|(0))==(($348)|(0));
   label = 57; break;
  case 57: 
   if ($349) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $352=$53;
   var $353=HEAP32[(($352)>>2)];
   var $354=$353 | 2;
   HEAP32[(($352)>>2)]=$354;
   label = 59; break;
  case 59: 
   var $356=$agg_result;
   var $357=$__b;
   assert(4 % 1 === 0);HEAP32[(($356)>>2)]=HEAP32[(($357)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 60: 
   var $359=$55;
   var $360=$56;
   var $361$0=$359;
   var $361$1=0;
   var $362$0=$361$0;
   var $362$1=$360;
   ___resumeException($362$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__save_errno;
   var $__p2=__stackBase__;
   var $__ll=(__stackBase__)+(8);
   var $__current_errno;
   $2=$__a;
   $3=$__a_end;
   $4=$__err;
   $5=$__base;
   var $6=$2;
   var $7=$3;
   var $8=(($6)|(0))!=(($7)|(0));
   if ($8) { label = 2; break; } else { label = 13; break; }
  case 2: 
   var $10=$2;
   var $11=HEAP8[($10)];
   var $12=(($11 << 24) >> 24);
   var $13=(($12)|(0))==45;
   if ($13) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $15=$4;
   HEAP32[(($15)>>2)]=4;
   $1=0;
   label = 14; break;
  case 4: 
   var $17=___errno_location();
   var $18=HEAP32[(($17)>>2)];
   $__save_errno=$18;
   var $19=___errno_location();
   HEAP32[(($19)>>2)]=0;
   var $20=$2;
   var $21=$5;
   var $22=__ZNSt3__16__clocEv();
   var $23$0=_strtoull($20, $__p2, $21, $22);
   var $23$1=tempRet0;
   var $st$0$0=(($__ll)|0);
   HEAP32[(($st$0$0)>>2)]=$23$0;
   var $st$1$1=(($__ll+4)|0);
   HEAP32[(($st$1$1)>>2)]=$23$1;
   var $24=___errno_location();
   var $25=HEAP32[(($24)>>2)];
   $__current_errno=$25;
   var $26=$__current_errno;
   var $27=(($26)|(0))==0;
   if ($27) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $29=$__save_errno;
   var $30=___errno_location();
   HEAP32[(($30)>>2)]=$29;
   label = 6; break;
  case 6: 
   var $32=HEAP32[(($__p2)>>2)];
   var $33=$3;
   var $34=(($32)|(0))!=(($33)|(0));
   if ($34) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $36=$4;
   HEAP32[(($36)>>2)]=4;
   $1=0;
   label = 14; break;
  case 8: 
   var $38=$__current_errno;
   var $39=(($38)|(0))==34;
   if ($39) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $41$0=65535;
   var $41$1=0;
   var $ld$2$0=(($__ll)|0);
   var $42$0=HEAP32[(($ld$2$0)>>2)];
   var $ld$3$1=(($__ll+4)|0);
   var $42$1=HEAP32[(($ld$3$1)>>2)];
   var $43=(($41$1>>>0) < ($42$1>>>0)) | (((($41$1>>>0) == ($42$1>>>0) & ($41$0>>>0) <  ($42$0>>>0))));
   if ($43) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $45=$4;
   HEAP32[(($45)>>2)]=4;
   $1=-1;
   label = 14; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $ld$4$0=(($__ll)|0);
   var $48$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($__ll+4)|0);
   var $48$1=HEAP32[(($ld$5$1)>>2)];
   var $49$0=$48$0;
   var $49=$49$0&65535;
   $1=$49;
   label = 14; break;
  case 13: 
   var $51=$4;
   HEAP32[(($51)>>2)]=4;
   $1=0;
   label = 14; break;
  case 14: 
   var $53=$1;
   STACKTOP = __stackBase__;
   return $53;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep=(__stackBase__)+(32);
   var $__grouping=(__stackBase__)+(40);
   var $__a=(__stackBase__)+(56);
   var $__a_end=(__stackBase__)+(96);
   var $__g=(__stackBase__)+(104);
   var $__g_end=(__stackBase__)+(264);
   var $__dc=(__stackBase__)+(272);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($59);
   $__base=$60;
   var $61=$52;
   var $62=(($__atoms)|0);
   __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $61, $62, $__thousands_sep);
   var $63=$__a;
   _memset($63, 0, 40);
   var $64=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$64;
   var $65=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$65;
   HEAP32[(($__dc)>>2)]=0;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $67=$49;
   var $68=$50;
   $47=$67;
   $48=$68;
   var $69=$47;
   $46=$69;
   var $70=$46;
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=0;
   if ($73) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $75=(($70)|0);
   var $76=HEAP32[(($75)>>2)];
   $45=$76;
   var $77=$45;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($79)|(0))==(($81)|(0));
   if ($82) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $84=$77;
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+36)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$88;
   label = 7; break;
  case 6: 
   var $90=(($77+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=HEAP8[($91)];
   $43=$92;
   var $93=$43;
   var $94=(($93)&(255));
   $44=$94;
   label = 7; break;
  case 7: 
   var $95=$44;
   $41=$95;
   $42=-1;
   var $96=$41;
   var $97=$42;
   var $98=(($96)|(0))==(($97)|(0));
   if ($98) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $100=(($70)|0);
   HEAP32[(($100)>>2)]=0;
   label = 9; break;
  case 9: 
   var $101=(($70)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102)|(0))==0;
   var $104=(($103)&(1));
   var $105=$48;
   $40=$105;
   var $106=$40;
   var $107=(($106)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($108)|(0))!=0;
   if ($109) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $111=(($106)|0);
   var $112=HEAP32[(($111)>>2)];
   $39=$112;
   var $113=$39;
   var $114=(($113+12)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($113+16)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($115)|(0))==(($117)|(0));
   if ($118) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $120=$113;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+36)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($113) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$124;
   label = 14; break;
  case 13: 
   var $126=(($113+12)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=HEAP8[($127)];
   $37=$128;
   var $129=$37;
   var $130=(($129)&(255));
   $38=$130;
   label = 14; break;
  case 14: 
   var $131=$38;
   $35=$131;
   $36=-1;
   var $132=$35;
   var $133=$36;
   var $134=(($132)|(0))==(($133)|(0));
   if ($134) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $136=(($106)|0);
   HEAP32[(($136)>>2)]=0;
   label = 16; break;
  case 16: 
   var $137=(($106)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138)|(0))==0;
   var $140=(($139)&(1));
   var $141=(($104)|(0))==(($140)|(0));
   var $142=$141 ^ 1;
   label = 17; break;
  case 17: 
   if ($142) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $145=$34;
   var $146=(($145)|0);
   var $147=HEAP32[(($146)>>2)];
   $33=$147;
   var $148=$33;
   var $149=(($148+12)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148+16)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=(($150)|(0))==(($152)|(0));
   if ($153) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $155=$148;
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156+36)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$159;
   label = 22; break;
  case 21: 
   var $161=(($148+12)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=HEAP8[($162)];
   $31=$163;
   var $164=$31;
   var $165=(($164)&(255));
   $32=$165;
   label = 22; break;
  case 22: 
   var $166=$32;
   var $167=(($166) & 255);
   label = 23; break;
  case 23: 
   var $169=$__base;
   var $170=(($__a)|0);
   var $171=HEAP8[($__thousands_sep)];
   var $172=(($__g)|0);
   var $173=(($__atoms)|0);
   var $174 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($167, $169, $170, $__a_end, $__dc, $171, $__grouping, $172, $__g_end, $173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $176=(($174)|(0))!=0;
   if ($176) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $179$0 = ___cxa_find_matching_catch(-1, -1); $179$1 = tempRet0;
   var $180=$179$0;
   $55=$180;
   var $181=$179$1;
   $56=$181;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 60; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $184=$30;
   var $185=(($184)|0);
   var $186=HEAP32[(($185)>>2)];
   $29=$186;
   var $187=$29;
   var $188=(($187+12)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($187+16)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=(($189)|(0))==(($191)|(0));
   if ($192) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $194=$187;
   var $195=HEAP32[(($194)>>2)];
   var $196=(($195+40)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$197]($187) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$198;
   label = 32; break;
  case 31: 
   var $200=(($187+12)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($201+1)|0);
   HEAP32[(($200)>>2)]=$202;
   var $203=HEAP8[($201)];
   $27=$203;
   var $204=$27;
   var $205=(($204)&(255));
   $28=$205;
   label = 32; break;
  case 32: 
   var $206=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $209=$26;
   $25=$209;
   var $210=$25;
   var $211=(($210)|0);
   $24=$211;
   var $212=$24;
   var $213=$212;
   $23=$213;
   var $214=$23;
   var $215=(($214)|0);
   var $216=(($215)|0);
   var $217=$216;
   var $218=(($217)|0);
   var $219=$218;
   var $220=HEAP8[($219)];
   var $221=(($220)&(255));
   var $222=$221 & 1;
   var $223=(($222)|(0))!=0;
   if ($223) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$209;
   var $225=$19;
   var $226=(($225)|0);
   $18=$226;
   var $227=$18;
   var $228=$227;
   $17=$228;
   var $229=$17;
   var $230=(($229)|0);
   var $231=(($230)|0);
   var $232=$231;
   var $233=(($232+4)|0);
   var $234=HEAP32[(($233)>>2)];
   var $249 = $234;label = 37; break;
  case 36: 
   $22=$209;
   var $236=$22;
   var $237=(($236)|0);
   $21=$237;
   var $238=$21;
   var $239=$238;
   $20=$239;
   var $240=$20;
   var $241=(($240)|0);
   var $242=(($241)|0);
   var $243=$242;
   var $244=(($243)|0);
   var $245=$244;
   var $246=HEAP8[($245)];
   var $247=(($246)&(255));
   var $248=$247 >> 1;
   var $249 = $248;label = 37; break;
  case 37: 
   var $249;
   var $250=(($249)|(0))!=0;
   if ($250) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $252=HEAP32[(($__g_end)>>2)];
   var $253=(($__g)|0);
   var $254=$252;
   var $255=$253;
   var $256=((($254)-($255))|0);
   var $257=((((($256)|(0)))/(4))&-1);
   var $258=(($257)|(0)) < 40;
   if ($258) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $260=HEAP32[(($__dc)>>2)];
   var $261=HEAP32[(($__g_end)>>2)];
   var $262=(($261+4)|0);
   HEAP32[(($__g_end)>>2)]=$262;
   HEAP32[(($261)>>2)]=$260;
   label = 40; break;
  case 40: 
   var $264=(($__a)|0);
   var $265=HEAP32[(($__a_end)>>2)];
   var $266=$53;
   var $267=$__base;
   var $268 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($264, $265, $266, $267) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 26; break; }
  case 41: 
   var $270=$54;
   HEAP32[(($270)>>2)]=$268;
   var $271=(($__g)|0);
   var $272=HEAP32[(($__g_end)>>2)];
   var $273=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $271, $272, $273) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   $15=$__b;
   $16=$__e;
   var $275=$15;
   var $276=$16;
   $13=$275;
   $14=$276;
   var $277=$13;
   $12=$277;
   var $278=$12;
   var $279=(($278)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=(($280)|(0))!=0;
   if ($281) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $283=(($278)|0);
   var $284=HEAP32[(($283)>>2)];
   $11=$284;
   var $285=$11;
   var $286=(($285+12)|0);
   var $287=HEAP32[(($286)>>2)];
   var $288=(($285+16)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($287)|(0))==(($289)|(0));
   if ($290) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $292=$285;
   var $293=HEAP32[(($292)>>2)];
   var $294=(($293+36)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$295]($285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 26; break; }
  case 45: 
   $10=$296;
   label = 47; break;
  case 46: 
   var $298=(($285+12)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=HEAP8[($299)];
   $9=$300;
   var $301=$9;
   var $302=(($301)&(255));
   $10=$302;
   label = 47; break;
  case 47: 
   var $303=$10;
   $7=$303;
   $8=-1;
   var $304=$7;
   var $305=$8;
   var $306=(($304)|(0))==(($305)|(0));
   if ($306) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $308=(($278)|0);
   HEAP32[(($308)>>2)]=0;
   label = 49; break;
  case 49: 
   var $309=(($278)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))==0;
   var $312=(($311)&(1));
   var $313=$14;
   $6=$313;
   var $314=$6;
   var $315=(($314)|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=(($316)|(0))!=0;
   if ($317) { label = 50; break; } else { label = 56; break; }
  case 50: 
   var $319=(($314)|0);
   var $320=HEAP32[(($319)>>2)];
   $5=$320;
   var $321=$5;
   var $322=(($321+12)|0);
   var $323=HEAP32[(($322)>>2)];
   var $324=(($321+16)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326=(($323)|(0))==(($325)|(0));
   if ($326) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $328=$321;
   var $329=HEAP32[(($328)>>2)];
   var $330=(($329+36)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$331]($321) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 26; break; }
  case 52: 
   $4=$332;
   label = 54; break;
  case 53: 
   var $334=(($321+12)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=HEAP8[($335)];
   $3=$336;
   var $337=$3;
   var $338=(($337)&(255));
   $4=$338;
   label = 54; break;
  case 54: 
   var $339=$4;
   $1=$339;
   $2=-1;
   var $340=$1;
   var $341=$2;
   var $342=(($340)|(0))==(($341)|(0));
   if ($342) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $344=(($314)|0);
   HEAP32[(($344)>>2)]=0;
   label = 56; break;
  case 56: 
   var $345=(($314)|0);
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346)|(0))==0;
   var $348=(($347)&(1));
   var $349=(($312)|(0))==(($348)|(0));
   label = 57; break;
  case 57: 
   if ($349) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $352=$53;
   var $353=HEAP32[(($352)>>2)];
   var $354=$353 | 2;
   HEAP32[(($352)>>2)]=$354;
   label = 59; break;
  case 59: 
   var $356=$agg_result;
   var $357=$__b;
   assert(4 % 1 === 0);HEAP32[(($356)>>2)]=HEAP32[(($357)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 60: 
   var $359=$55;
   var $360=$56;
   var $361$0=$359;
   var $361$1=0;
   var $362$0=$361$0;
   var $362$1=$360;
   ___resumeException($362$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__save_errno;
   var $__p2=__stackBase__;
   var $__ll=(__stackBase__)+(8);
   var $__current_errno;
   $2=$__a;
   $3=$__a_end;
   $4=$__err;
   $5=$__base;
   var $6=$2;
   var $7=$3;
   var $8=(($6)|(0))!=(($7)|(0));
   if ($8) { label = 2; break; } else { label = 13; break; }
  case 2: 
   var $10=$2;
   var $11=HEAP8[($10)];
   var $12=(($11 << 24) >> 24);
   var $13=(($12)|(0))==45;
   if ($13) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $15=$4;
   HEAP32[(($15)>>2)]=4;
   $1=0;
   label = 14; break;
  case 4: 
   var $17=___errno_location();
   var $18=HEAP32[(($17)>>2)];
   $__save_errno=$18;
   var $19=___errno_location();
   HEAP32[(($19)>>2)]=0;
   var $20=$2;
   var $21=$5;
   var $22=__ZNSt3__16__clocEv();
   var $23$0=_strtoull($20, $__p2, $21, $22);
   var $23$1=tempRet0;
   var $st$0$0=(($__ll)|0);
   HEAP32[(($st$0$0)>>2)]=$23$0;
   var $st$1$1=(($__ll+4)|0);
   HEAP32[(($st$1$1)>>2)]=$23$1;
   var $24=___errno_location();
   var $25=HEAP32[(($24)>>2)];
   $__current_errno=$25;
   var $26=$__current_errno;
   var $27=(($26)|(0))==0;
   if ($27) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $29=$__save_errno;
   var $30=___errno_location();
   HEAP32[(($30)>>2)]=$29;
   label = 6; break;
  case 6: 
   var $32=HEAP32[(($__p2)>>2)];
   var $33=$3;
   var $34=(($32)|(0))!=(($33)|(0));
   if ($34) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $36=$4;
   HEAP32[(($36)>>2)]=4;
   $1=0;
   label = 14; break;
  case 8: 
   var $38=$__current_errno;
   var $39=(($38)|(0))==34;
   if ($39) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $41$0=-1;
   var $41$1=0;
   var $ld$2$0=(($__ll)|0);
   var $42$0=HEAP32[(($ld$2$0)>>2)];
   var $ld$3$1=(($__ll+4)|0);
   var $42$1=HEAP32[(($ld$3$1)>>2)];
   var $43=(($41$1>>>0) < ($42$1>>>0)) | (((($41$1>>>0) == ($42$1>>>0) & ($41$0>>>0) <  ($42$0>>>0))));
   if ($43) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $45=$4;
   HEAP32[(($45)>>2)]=4;
   $1=-1;
   label = 14; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $ld$4$0=(($__ll)|0);
   var $48$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($__ll+4)|0);
   var $48$1=HEAP32[(($ld$5$1)>>2)];
   var $49$0=$48$0;
   var $49=$49$0;
   $1=$49;
   label = 14; break;
  case 13: 
   var $51=$4;
   HEAP32[(($51)>>2)]=4;
   $1=0;
   label = 14; break;
  case 14: 
   var $53=$1;
   STACKTOP = __stackBase__;
   return $53;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep=(__stackBase__)+(32);
   var $__grouping=(__stackBase__)+(40);
   var $__a=(__stackBase__)+(56);
   var $__a_end=(__stackBase__)+(96);
   var $__g=(__stackBase__)+(104);
   var $__g_end=(__stackBase__)+(264);
   var $__dc=(__stackBase__)+(272);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($59);
   $__base=$60;
   var $61=$52;
   var $62=(($__atoms)|0);
   __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $61, $62, $__thousands_sep);
   var $63=$__a;
   _memset($63, 0, 40);
   var $64=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$64;
   var $65=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$65;
   HEAP32[(($__dc)>>2)]=0;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $67=$49;
   var $68=$50;
   $47=$67;
   $48=$68;
   var $69=$47;
   $46=$69;
   var $70=$46;
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=0;
   if ($73) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $75=(($70)|0);
   var $76=HEAP32[(($75)>>2)];
   $45=$76;
   var $77=$45;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($79)|(0))==(($81)|(0));
   if ($82) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $84=$77;
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+36)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$88;
   label = 7; break;
  case 6: 
   var $90=(($77+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=HEAP8[($91)];
   $43=$92;
   var $93=$43;
   var $94=(($93)&(255));
   $44=$94;
   label = 7; break;
  case 7: 
   var $95=$44;
   $41=$95;
   $42=-1;
   var $96=$41;
   var $97=$42;
   var $98=(($96)|(0))==(($97)|(0));
   if ($98) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $100=(($70)|0);
   HEAP32[(($100)>>2)]=0;
   label = 9; break;
  case 9: 
   var $101=(($70)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102)|(0))==0;
   var $104=(($103)&(1));
   var $105=$48;
   $40=$105;
   var $106=$40;
   var $107=(($106)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($108)|(0))!=0;
   if ($109) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $111=(($106)|0);
   var $112=HEAP32[(($111)>>2)];
   $39=$112;
   var $113=$39;
   var $114=(($113+12)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($113+16)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($115)|(0))==(($117)|(0));
   if ($118) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $120=$113;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+36)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($113) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$124;
   label = 14; break;
  case 13: 
   var $126=(($113+12)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=HEAP8[($127)];
   $37=$128;
   var $129=$37;
   var $130=(($129)&(255));
   $38=$130;
   label = 14; break;
  case 14: 
   var $131=$38;
   $35=$131;
   $36=-1;
   var $132=$35;
   var $133=$36;
   var $134=(($132)|(0))==(($133)|(0));
   if ($134) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $136=(($106)|0);
   HEAP32[(($136)>>2)]=0;
   label = 16; break;
  case 16: 
   var $137=(($106)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138)|(0))==0;
   var $140=(($139)&(1));
   var $141=(($104)|(0))==(($140)|(0));
   var $142=$141 ^ 1;
   label = 17; break;
  case 17: 
   if ($142) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $145=$34;
   var $146=(($145)|0);
   var $147=HEAP32[(($146)>>2)];
   $33=$147;
   var $148=$33;
   var $149=(($148+12)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148+16)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=(($150)|(0))==(($152)|(0));
   if ($153) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $155=$148;
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156+36)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$159;
   label = 22; break;
  case 21: 
   var $161=(($148+12)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=HEAP8[($162)];
   $31=$163;
   var $164=$31;
   var $165=(($164)&(255));
   $32=$165;
   label = 22; break;
  case 22: 
   var $166=$32;
   var $167=(($166) & 255);
   label = 23; break;
  case 23: 
   var $169=$__base;
   var $170=(($__a)|0);
   var $171=HEAP8[($__thousands_sep)];
   var $172=(($__g)|0);
   var $173=(($__atoms)|0);
   var $174 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($167, $169, $170, $__a_end, $__dc, $171, $__grouping, $172, $__g_end, $173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $176=(($174)|(0))!=0;
   if ($176) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $179$0 = ___cxa_find_matching_catch(-1, -1); $179$1 = tempRet0;
   var $180=$179$0;
   $55=$180;
   var $181=$179$1;
   $56=$181;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 60; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $184=$30;
   var $185=(($184)|0);
   var $186=HEAP32[(($185)>>2)];
   $29=$186;
   var $187=$29;
   var $188=(($187+12)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($187+16)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=(($189)|(0))==(($191)|(0));
   if ($192) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $194=$187;
   var $195=HEAP32[(($194)>>2)];
   var $196=(($195+40)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$197]($187) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$198;
   label = 32; break;
  case 31: 
   var $200=(($187+12)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($201+1)|0);
   HEAP32[(($200)>>2)]=$202;
   var $203=HEAP8[($201)];
   $27=$203;
   var $204=$27;
   var $205=(($204)&(255));
   $28=$205;
   label = 32; break;
  case 32: 
   var $206=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $209=$26;
   $25=$209;
   var $210=$25;
   var $211=(($210)|0);
   $24=$211;
   var $212=$24;
   var $213=$212;
   $23=$213;
   var $214=$23;
   var $215=(($214)|0);
   var $216=(($215)|0);
   var $217=$216;
   var $218=(($217)|0);
   var $219=$218;
   var $220=HEAP8[($219)];
   var $221=(($220)&(255));
   var $222=$221 & 1;
   var $223=(($222)|(0))!=0;
   if ($223) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$209;
   var $225=$19;
   var $226=(($225)|0);
   $18=$226;
   var $227=$18;
   var $228=$227;
   $17=$228;
   var $229=$17;
   var $230=(($229)|0);
   var $231=(($230)|0);
   var $232=$231;
   var $233=(($232+4)|0);
   var $234=HEAP32[(($233)>>2)];
   var $249 = $234;label = 37; break;
  case 36: 
   $22=$209;
   var $236=$22;
   var $237=(($236)|0);
   $21=$237;
   var $238=$21;
   var $239=$238;
   $20=$239;
   var $240=$20;
   var $241=(($240)|0);
   var $242=(($241)|0);
   var $243=$242;
   var $244=(($243)|0);
   var $245=$244;
   var $246=HEAP8[($245)];
   var $247=(($246)&(255));
   var $248=$247 >> 1;
   var $249 = $248;label = 37; break;
  case 37: 
   var $249;
   var $250=(($249)|(0))!=0;
   if ($250) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $252=HEAP32[(($__g_end)>>2)];
   var $253=(($__g)|0);
   var $254=$252;
   var $255=$253;
   var $256=((($254)-($255))|0);
   var $257=((((($256)|(0)))/(4))&-1);
   var $258=(($257)|(0)) < 40;
   if ($258) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $260=HEAP32[(($__dc)>>2)];
   var $261=HEAP32[(($__g_end)>>2)];
   var $262=(($261+4)|0);
   HEAP32[(($__g_end)>>2)]=$262;
   HEAP32[(($261)>>2)]=$260;
   label = 40; break;
  case 40: 
   var $264=(($__a)|0);
   var $265=HEAP32[(($__a_end)>>2)];
   var $266=$53;
   var $267=$__base;
   var $268 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($264, $265, $266, $267) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 26; break; }
  case 41: 
   var $270=$54;
   HEAP32[(($270)>>2)]=$268;
   var $271=(($__g)|0);
   var $272=HEAP32[(($__g_end)>>2)];
   var $273=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $271, $272, $273) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   $15=$__b;
   $16=$__e;
   var $275=$15;
   var $276=$16;
   $13=$275;
   $14=$276;
   var $277=$13;
   $12=$277;
   var $278=$12;
   var $279=(($278)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=(($280)|(0))!=0;
   if ($281) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $283=(($278)|0);
   var $284=HEAP32[(($283)>>2)];
   $11=$284;
   var $285=$11;
   var $286=(($285+12)|0);
   var $287=HEAP32[(($286)>>2)];
   var $288=(($285+16)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($287)|(0))==(($289)|(0));
   if ($290) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $292=$285;
   var $293=HEAP32[(($292)>>2)];
   var $294=(($293+36)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$295]($285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 26; break; }
  case 45: 
   $10=$296;
   label = 47; break;
  case 46: 
   var $298=(($285+12)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=HEAP8[($299)];
   $9=$300;
   var $301=$9;
   var $302=(($301)&(255));
   $10=$302;
   label = 47; break;
  case 47: 
   var $303=$10;
   $7=$303;
   $8=-1;
   var $304=$7;
   var $305=$8;
   var $306=(($304)|(0))==(($305)|(0));
   if ($306) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $308=(($278)|0);
   HEAP32[(($308)>>2)]=0;
   label = 49; break;
  case 49: 
   var $309=(($278)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))==0;
   var $312=(($311)&(1));
   var $313=$14;
   $6=$313;
   var $314=$6;
   var $315=(($314)|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=(($316)|(0))!=0;
   if ($317) { label = 50; break; } else { label = 56; break; }
  case 50: 
   var $319=(($314)|0);
   var $320=HEAP32[(($319)>>2)];
   $5=$320;
   var $321=$5;
   var $322=(($321+12)|0);
   var $323=HEAP32[(($322)>>2)];
   var $324=(($321+16)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326=(($323)|(0))==(($325)|(0));
   if ($326) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $328=$321;
   var $329=HEAP32[(($328)>>2)];
   var $330=(($329+36)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$331]($321) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 26; break; }
  case 52: 
   $4=$332;
   label = 54; break;
  case 53: 
   var $334=(($321+12)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=HEAP8[($335)];
   $3=$336;
   var $337=$3;
   var $338=(($337)&(255));
   $4=$338;
   label = 54; break;
  case 54: 
   var $339=$4;
   $1=$339;
   $2=-1;
   var $340=$1;
   var $341=$2;
   var $342=(($340)|(0))==(($341)|(0));
   if ($342) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $344=(($314)|0);
   HEAP32[(($344)>>2)]=0;
   label = 56; break;
  case 56: 
   var $345=(($314)|0);
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346)|(0))==0;
   var $348=(($347)&(1));
   var $349=(($312)|(0))==(($348)|(0));
   label = 57; break;
  case 57: 
   if ($349) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $352=$53;
   var $353=HEAP32[(($352)>>2)];
   var $354=$353 | 2;
   HEAP32[(($352)>>2)]=$354;
   label = 59; break;
  case 59: 
   var $356=$agg_result;
   var $357=$__b;
   assert(4 % 1 === 0);HEAP32[(($356)>>2)]=HEAP32[(($357)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 60: 
   var $359=$55;
   var $360=$56;
   var $361$0=$359;
   var $361$1=0;
   var $362$0=$361$0;
   var $362$1=$360;
   ___resumeException($362$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__save_errno;
   var $__p2=__stackBase__;
   var $__ll=(__stackBase__)+(8);
   var $__current_errno;
   $2=$__a;
   $3=$__a_end;
   $4=$__err;
   $5=$__base;
   var $6=$2;
   var $7=$3;
   var $8=(($6)|(0))!=(($7)|(0));
   if ($8) { label = 2; break; } else { label = 13; break; }
  case 2: 
   var $10=$2;
   var $11=HEAP8[($10)];
   var $12=(($11 << 24) >> 24);
   var $13=(($12)|(0))==45;
   if ($13) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $15=$4;
   HEAP32[(($15)>>2)]=4;
   $1=0;
   label = 14; break;
  case 4: 
   var $17=___errno_location();
   var $18=HEAP32[(($17)>>2)];
   $__save_errno=$18;
   var $19=___errno_location();
   HEAP32[(($19)>>2)]=0;
   var $20=$2;
   var $21=$5;
   var $22=__ZNSt3__16__clocEv();
   var $23$0=_strtoull($20, $__p2, $21, $22);
   var $23$1=tempRet0;
   var $st$0$0=(($__ll)|0);
   HEAP32[(($st$0$0)>>2)]=$23$0;
   var $st$1$1=(($__ll+4)|0);
   HEAP32[(($st$1$1)>>2)]=$23$1;
   var $24=___errno_location();
   var $25=HEAP32[(($24)>>2)];
   $__current_errno=$25;
   var $26=$__current_errno;
   var $27=(($26)|(0))==0;
   if ($27) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $29=$__save_errno;
   var $30=___errno_location();
   HEAP32[(($30)>>2)]=$29;
   label = 6; break;
  case 6: 
   var $32=HEAP32[(($__p2)>>2)];
   var $33=$3;
   var $34=(($32)|(0))!=(($33)|(0));
   if ($34) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $36=$4;
   HEAP32[(($36)>>2)]=4;
   $1=0;
   label = 14; break;
  case 8: 
   var $38=$__current_errno;
   var $39=(($38)|(0))==34;
   if ($39) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $41$0=-1;
   var $41$1=0;
   var $ld$2$0=(($__ll)|0);
   var $42$0=HEAP32[(($ld$2$0)>>2)];
   var $ld$3$1=(($__ll+4)|0);
   var $42$1=HEAP32[(($ld$3$1)>>2)];
   var $43=(($41$1>>>0) < ($42$1>>>0)) | (((($41$1>>>0) == ($42$1>>>0) & ($41$0>>>0) <  ($42$0>>>0))));
   if ($43) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $45=$4;
   HEAP32[(($45)>>2)]=4;
   $1=-1;
   label = 14; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $ld$4$0=(($__ll)|0);
   var $48$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($__ll+4)|0);
   var $48$1=HEAP32[(($ld$5$1)>>2)];
   var $49$0=$48$0;
   var $49=$49$0;
   $1=$49;
   label = 14; break;
  case 13: 
   var $51=$4;
   HEAP32[(($51)>>2)]=4;
   $1=0;
   label = 14; break;
  case 14: 
   var $53=$1;
   STACKTOP = __stackBase__;
   return $53;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep=(__stackBase__)+(32);
   var $__grouping=(__stackBase__)+(40);
   var $__a=(__stackBase__)+(56);
   var $__a_end=(__stackBase__)+(96);
   var $__g=(__stackBase__)+(104);
   var $__g_end=(__stackBase__)+(264);
   var $__dc=(__stackBase__)+(272);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($59);
   $__base=$60;
   var $61=$52;
   var $62=(($__atoms)|0);
   __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $61, $62, $__thousands_sep);
   var $63=$__a;
   _memset($63, 0, 40);
   var $64=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$64;
   var $65=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$65;
   HEAP32[(($__dc)>>2)]=0;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $67=$49;
   var $68=$50;
   $47=$67;
   $48=$68;
   var $69=$47;
   $46=$69;
   var $70=$46;
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=0;
   if ($73) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $75=(($70)|0);
   var $76=HEAP32[(($75)>>2)];
   $45=$76;
   var $77=$45;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($79)|(0))==(($81)|(0));
   if ($82) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $84=$77;
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+36)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$88;
   label = 7; break;
  case 6: 
   var $90=(($77+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=HEAP8[($91)];
   $43=$92;
   var $93=$43;
   var $94=(($93)&(255));
   $44=$94;
   label = 7; break;
  case 7: 
   var $95=$44;
   $41=$95;
   $42=-1;
   var $96=$41;
   var $97=$42;
   var $98=(($96)|(0))==(($97)|(0));
   if ($98) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $100=(($70)|0);
   HEAP32[(($100)>>2)]=0;
   label = 9; break;
  case 9: 
   var $101=(($70)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102)|(0))==0;
   var $104=(($103)&(1));
   var $105=$48;
   $40=$105;
   var $106=$40;
   var $107=(($106)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($108)|(0))!=0;
   if ($109) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $111=(($106)|0);
   var $112=HEAP32[(($111)>>2)];
   $39=$112;
   var $113=$39;
   var $114=(($113+12)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($113+16)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($115)|(0))==(($117)|(0));
   if ($118) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $120=$113;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+36)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($113) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$124;
   label = 14; break;
  case 13: 
   var $126=(($113+12)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=HEAP8[($127)];
   $37=$128;
   var $129=$37;
   var $130=(($129)&(255));
   $38=$130;
   label = 14; break;
  case 14: 
   var $131=$38;
   $35=$131;
   $36=-1;
   var $132=$35;
   var $133=$36;
   var $134=(($132)|(0))==(($133)|(0));
   if ($134) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $136=(($106)|0);
   HEAP32[(($136)>>2)]=0;
   label = 16; break;
  case 16: 
   var $137=(($106)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138)|(0))==0;
   var $140=(($139)&(1));
   var $141=(($104)|(0))==(($140)|(0));
   var $142=$141 ^ 1;
   label = 17; break;
  case 17: 
   if ($142) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $145=$34;
   var $146=(($145)|0);
   var $147=HEAP32[(($146)>>2)];
   $33=$147;
   var $148=$33;
   var $149=(($148+12)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148+16)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=(($150)|(0))==(($152)|(0));
   if ($153) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $155=$148;
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156+36)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$159;
   label = 22; break;
  case 21: 
   var $161=(($148+12)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=HEAP8[($162)];
   $31=$163;
   var $164=$31;
   var $165=(($164)&(255));
   $32=$165;
   label = 22; break;
  case 22: 
   var $166=$32;
   var $167=(($166) & 255);
   label = 23; break;
  case 23: 
   var $169=$__base;
   var $170=(($__a)|0);
   var $171=HEAP8[($__thousands_sep)];
   var $172=(($__g)|0);
   var $173=(($__atoms)|0);
   var $174 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($167, $169, $170, $__a_end, $__dc, $171, $__grouping, $172, $__g_end, $173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $176=(($174)|(0))!=0;
   if ($176) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $179$0 = ___cxa_find_matching_catch(-1, -1); $179$1 = tempRet0;
   var $180=$179$0;
   $55=$180;
   var $181=$179$1;
   $56=$181;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 60; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $184=$30;
   var $185=(($184)|0);
   var $186=HEAP32[(($185)>>2)];
   $29=$186;
   var $187=$29;
   var $188=(($187+12)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($187+16)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=(($189)|(0))==(($191)|(0));
   if ($192) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $194=$187;
   var $195=HEAP32[(($194)>>2)];
   var $196=(($195+40)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$197]($187) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$198;
   label = 32; break;
  case 31: 
   var $200=(($187+12)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($201+1)|0);
   HEAP32[(($200)>>2)]=$202;
   var $203=HEAP8[($201)];
   $27=$203;
   var $204=$27;
   var $205=(($204)&(255));
   $28=$205;
   label = 32; break;
  case 32: 
   var $206=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $209=$26;
   $25=$209;
   var $210=$25;
   var $211=(($210)|0);
   $24=$211;
   var $212=$24;
   var $213=$212;
   $23=$213;
   var $214=$23;
   var $215=(($214)|0);
   var $216=(($215)|0);
   var $217=$216;
   var $218=(($217)|0);
   var $219=$218;
   var $220=HEAP8[($219)];
   var $221=(($220)&(255));
   var $222=$221 & 1;
   var $223=(($222)|(0))!=0;
   if ($223) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$209;
   var $225=$19;
   var $226=(($225)|0);
   $18=$226;
   var $227=$18;
   var $228=$227;
   $17=$228;
   var $229=$17;
   var $230=(($229)|0);
   var $231=(($230)|0);
   var $232=$231;
   var $233=(($232+4)|0);
   var $234=HEAP32[(($233)>>2)];
   var $249 = $234;label = 37; break;
  case 36: 
   $22=$209;
   var $236=$22;
   var $237=(($236)|0);
   $21=$237;
   var $238=$21;
   var $239=$238;
   $20=$239;
   var $240=$20;
   var $241=(($240)|0);
   var $242=(($241)|0);
   var $243=$242;
   var $244=(($243)|0);
   var $245=$244;
   var $246=HEAP8[($245)];
   var $247=(($246)&(255));
   var $248=$247 >> 1;
   var $249 = $248;label = 37; break;
  case 37: 
   var $249;
   var $250=(($249)|(0))!=0;
   if ($250) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $252=HEAP32[(($__g_end)>>2)];
   var $253=(($__g)|0);
   var $254=$252;
   var $255=$253;
   var $256=((($254)-($255))|0);
   var $257=((((($256)|(0)))/(4))&-1);
   var $258=(($257)|(0)) < 40;
   if ($258) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $260=HEAP32[(($__dc)>>2)];
   var $261=HEAP32[(($__g_end)>>2)];
   var $262=(($261+4)|0);
   HEAP32[(($__g_end)>>2)]=$262;
   HEAP32[(($261)>>2)]=$260;
   label = 40; break;
  case 40: 
   var $264=(($__a)|0);
   var $265=HEAP32[(($__a_end)>>2)];
   var $266=$53;
   var $267=$__base;
   var $268 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($264, $265, $266, $267) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $268$0 = $268;var $268$1 = tempRet0;if (!__THREW__) { label = 41; break; } else { label = 26; break; }
  case 41: 
   var $270=$54;
   var $st$0$0=(($270)|0);
   HEAP32[(($st$0$0)>>2)]=$268$0;
   var $st$1$1=(($270+4)|0);
   HEAP32[(($st$1$1)>>2)]=$268$1;
   var $271=(($__g)|0);
   var $272=HEAP32[(($__g_end)>>2)];
   var $273=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $271, $272, $273) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   $15=$__b;
   $16=$__e;
   var $275=$15;
   var $276=$16;
   $13=$275;
   $14=$276;
   var $277=$13;
   $12=$277;
   var $278=$12;
   var $279=(($278)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=(($280)|(0))!=0;
   if ($281) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $283=(($278)|0);
   var $284=HEAP32[(($283)>>2)];
   $11=$284;
   var $285=$11;
   var $286=(($285+12)|0);
   var $287=HEAP32[(($286)>>2)];
   var $288=(($285+16)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($287)|(0))==(($289)|(0));
   if ($290) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $292=$285;
   var $293=HEAP32[(($292)>>2)];
   var $294=(($293+36)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$295]($285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 26; break; }
  case 45: 
   $10=$296;
   label = 47; break;
  case 46: 
   var $298=(($285+12)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=HEAP8[($299)];
   $9=$300;
   var $301=$9;
   var $302=(($301)&(255));
   $10=$302;
   label = 47; break;
  case 47: 
   var $303=$10;
   $7=$303;
   $8=-1;
   var $304=$7;
   var $305=$8;
   var $306=(($304)|(0))==(($305)|(0));
   if ($306) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $308=(($278)|0);
   HEAP32[(($308)>>2)]=0;
   label = 49; break;
  case 49: 
   var $309=(($278)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))==0;
   var $312=(($311)&(1));
   var $313=$14;
   $6=$313;
   var $314=$6;
   var $315=(($314)|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=(($316)|(0))!=0;
   if ($317) { label = 50; break; } else { label = 56; break; }
  case 50: 
   var $319=(($314)|0);
   var $320=HEAP32[(($319)>>2)];
   $5=$320;
   var $321=$5;
   var $322=(($321+12)|0);
   var $323=HEAP32[(($322)>>2)];
   var $324=(($321+16)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326=(($323)|(0))==(($325)|(0));
   if ($326) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $328=$321;
   var $329=HEAP32[(($328)>>2)];
   var $330=(($329+36)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$331]($321) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 26; break; }
  case 52: 
   $4=$332;
   label = 54; break;
  case 53: 
   var $334=(($321+12)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=HEAP8[($335)];
   $3=$336;
   var $337=$3;
   var $338=(($337)&(255));
   $4=$338;
   label = 54; break;
  case 54: 
   var $339=$4;
   $1=$339;
   $2=-1;
   var $340=$1;
   var $341=$2;
   var $342=(($340)|(0))==(($341)|(0));
   if ($342) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $344=(($314)|0);
   HEAP32[(($344)>>2)]=0;
   label = 56; break;
  case 56: 
   var $345=(($314)|0);
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346)|(0))==0;
   var $348=(($347)&(1));
   var $349=(($312)|(0))==(($348)|(0));
   label = 57; break;
  case 57: 
   if ($349) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $352=$53;
   var $353=HEAP32[(($352)>>2)];
   var $354=$353 | 2;
   HEAP32[(($352)>>2)]=$354;
   label = 59; break;
  case 59: 
   var $356=$agg_result;
   var $357=$__b;
   assert(4 % 1 === 0);HEAP32[(($356)>>2)]=HEAP32[(($357)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 60: 
   var $359=$55;
   var $360=$56;
   var $361$0=$359;
   var $361$1=0;
   var $362$0=$361$0;
   var $362$1=$360;
   ___resumeException($362$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=__stackBase__;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__save_errno;
   var $__p2=(__stackBase__)+(8);
   var $__ll=(__stackBase__)+(16);
   var $__current_errno;
   $2=$__a;
   $3=$__a_end;
   $4=$__err;
   $5=$__base;
   var $6=$2;
   var $7=$3;
   var $8=(($6)|(0))!=(($7)|(0));
   if ($8) { label = 2; break; } else { label = 13; break; }
  case 2: 
   var $10=$2;
   var $11=HEAP8[($10)];
   var $12=(($11 << 24) >> 24);
   var $13=(($12)|(0))==45;
   if ($13) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $15=$4;
   HEAP32[(($15)>>2)]=4;
   var $$etemp$0$0=0;
   var $$etemp$0$1=0;
   var $st$1$0=(($1)|0);
   HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
   var $st$2$1=(($1+4)|0);
   HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
   label = 14; break;
  case 4: 
   var $17=___errno_location();
   var $18=HEAP32[(($17)>>2)];
   $__save_errno=$18;
   var $19=___errno_location();
   HEAP32[(($19)>>2)]=0;
   var $20=$2;
   var $21=$5;
   var $22=__ZNSt3__16__clocEv();
   var $23$0=_strtoull($20, $__p2, $21, $22);
   var $23$1=tempRet0;
   var $st$3$0=(($__ll)|0);
   HEAP32[(($st$3$0)>>2)]=$23$0;
   var $st$4$1=(($__ll+4)|0);
   HEAP32[(($st$4$1)>>2)]=$23$1;
   var $24=___errno_location();
   var $25=HEAP32[(($24)>>2)];
   $__current_errno=$25;
   var $26=$__current_errno;
   var $27=(($26)|(0))==0;
   if ($27) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $29=$__save_errno;
   var $30=___errno_location();
   HEAP32[(($30)>>2)]=$29;
   label = 6; break;
  case 6: 
   var $32=HEAP32[(($__p2)>>2)];
   var $33=$3;
   var $34=(($32)|(0))!=(($33)|(0));
   if ($34) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $36=$4;
   HEAP32[(($36)>>2)]=4;
   var $$etemp$5$0=0;
   var $$etemp$5$1=0;
   var $st$6$0=(($1)|0);
   HEAP32[(($st$6$0)>>2)]=$$etemp$5$0;
   var $st$7$1=(($1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$$etemp$5$1;
   label = 14; break;
  case 8: 
   var $38=$__current_errno;
   var $39=(($38)|(0))==34;
   if ($39) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $ld$8$0=(($__ll)|0);
   var $41$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($__ll+4)|0);
   var $41$1=HEAP32[(($ld$9$1)>>2)];
   var $$etemp$10$0=-1;
   var $$etemp$10$1=-1;
   var $42=(($$etemp$10$1>>>0) < ($41$1>>>0)) | (((($$etemp$10$1>>>0) == ($41$1>>>0) & ($$etemp$10$0>>>0) <  ($41$0>>>0))));
   if ($42) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $44=$4;
   HEAP32[(($44)>>2)]=4;
   var $$etemp$11$0=-1;
   var $$etemp$11$1=-1;
   var $st$12$0=(($1)|0);
   HEAP32[(($st$12$0)>>2)]=$$etemp$11$0;
   var $st$13$1=(($1+4)|0);
   HEAP32[(($st$13$1)>>2)]=$$etemp$11$1;
   label = 14; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $ld$14$0=(($__ll)|0);
   var $47$0=HEAP32[(($ld$14$0)>>2)];
   var $ld$15$1=(($__ll+4)|0);
   var $47$1=HEAP32[(($ld$15$1)>>2)];
   var $st$16$0=(($1)|0);
   HEAP32[(($st$16$0)>>2)]=$47$0;
   var $st$17$1=(($1+4)|0);
   HEAP32[(($st$17$1)>>2)]=$47$1;
   label = 14; break;
  case 13: 
   var $49=$4;
   HEAP32[(($49)>>2)]=4;
   var $$etemp$18$0=0;
   var $$etemp$18$1=0;
   var $st$19$0=(($1)|0);
   HEAP32[(($st$19$0)>>2)]=$$etemp$18$0;
   var $st$20$1=(($1+4)|0);
   HEAP32[(($st$20$1)>>2)]=$$etemp$18$1;
   label = 14; break;
  case 14: 
   var $ld$21$0=(($1)|0);
   var $51$0=HEAP32[(($ld$21$0)>>2)];
   var $ld$22$1=(($1+4)|0);
   var $51$1=HEAP32[(($ld$22$1)>>2)];
   STACKTOP = __stackBase__;
   return (tempRet0=$51$1,$51$0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 304)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__atoms=__stackBase__;
   var $__decimal_point=(__stackBase__)+(32);
   var $__thousands_sep=(__stackBase__)+(40);
   var $__grouping=(__stackBase__)+(48);
   var $__a=(__stackBase__)+(64);
   var $__a_end=(__stackBase__)+(104);
   var $__g=(__stackBase__)+(112);
   var $__g_end=(__stackBase__)+(272);
   var $__dc=(__stackBase__)+(280);
   var $__in_units=(__stackBase__)+(288);
   var $__exp=(__stackBase__)+(296);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=(($__atoms)|0);
   __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $59, $60, $__decimal_point, $__thousands_sep);
   var $61=$__a;
   _memset($61, 0, 40);
   var $62=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$62;
   var $63=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$63;
   HEAP32[(($__dc)>>2)]=0;
   HEAP8[($__in_units)]=1;
   HEAP8[($__exp)]=69;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $65=$49;
   var $66=$50;
   $47=$65;
   $48=$66;
   var $67=$47;
   $46=$67;
   var $68=$46;
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|(0))!=0;
   if ($71) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $73=(($68)|0);
   var $74=HEAP32[(($73)>>2)];
   $45=$74;
   var $75=$45;
   var $76=(($75+12)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($75+16)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77)|(0))==(($79)|(0));
   if ($80) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $82=$75;
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+36)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$86;
   label = 7; break;
  case 6: 
   var $88=(($75+12)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=HEAP8[($89)];
   $43=$90;
   var $91=$43;
   var $92=(($91)&(255));
   $44=$92;
   label = 7; break;
  case 7: 
   var $93=$44;
   $41=$93;
   $42=-1;
   var $94=$41;
   var $95=$42;
   var $96=(($94)|(0))==(($95)|(0));
   if ($96) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $98=(($68)|0);
   HEAP32[(($98)>>2)]=0;
   label = 9; break;
  case 9: 
   var $99=(($68)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100)|(0))==0;
   var $102=(($101)&(1));
   var $103=$48;
   $40=$103;
   var $104=$40;
   var $105=(($104)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106)|(0))!=0;
   if ($107) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $109=(($104)|0);
   var $110=HEAP32[(($109)>>2)];
   $39=$110;
   var $111=$39;
   var $112=(($111+12)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($111+16)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($113)|(0))==(($115)|(0));
   if ($116) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $118=$111;
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119+36)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$122;
   label = 14; break;
  case 13: 
   var $124=(($111+12)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=HEAP8[($125)];
   $37=$126;
   var $127=$37;
   var $128=(($127)&(255));
   $38=$128;
   label = 14; break;
  case 14: 
   var $129=$38;
   $35=$129;
   $36=-1;
   var $130=$35;
   var $131=$36;
   var $132=(($130)|(0))==(($131)|(0));
   if ($132) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $134=(($104)|0);
   HEAP32[(($134)>>2)]=0;
   label = 16; break;
  case 16: 
   var $135=(($104)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136)|(0))==0;
   var $138=(($137)&(1));
   var $139=(($102)|(0))==(($138)|(0));
   var $140=$139 ^ 1;
   label = 17; break;
  case 17: 
   if ($140) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $143=$34;
   var $144=(($143)|0);
   var $145=HEAP32[(($144)>>2)];
   $33=$145;
   var $146=$33;
   var $147=(($146+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($146+16)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148)|(0))==(($150)|(0));
   if ($151) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $153=$146;
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154+36)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$157;
   label = 22; break;
  case 21: 
   var $159=(($146+12)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=HEAP8[($160)];
   $31=$161;
   var $162=$31;
   var $163=(($162)&(255));
   $32=$163;
   label = 22; break;
  case 22: 
   var $164=$32;
   var $165=(($164) & 255);
   label = 23; break;
  case 23: 
   var $167=(($__a)|0);
   var $168=HEAP8[($__decimal_point)];
   var $169=HEAP8[($__thousands_sep)];
   var $170=(($__g)|0);
   var $171=(($__atoms)|0);
   var $172 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($165, $__in_units, $__exp, $167, $__a_end, $168, $169, $__grouping, $170, $__g_end, $__dc, $171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $174=(($172)|(0))!=0;
   if ($174) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $177$0 = ___cxa_find_matching_catch(-1, -1); $177$1 = tempRet0;
   var $178=$177$0;
   $55=$178;
   var $179=$177$1;
   $56=$179;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 61; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $182=$30;
   var $183=(($182)|0);
   var $184=HEAP32[(($183)>>2)];
   $29=$184;
   var $185=$29;
   var $186=(($185+12)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($185+16)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($187)|(0))==(($189)|(0));
   if ($190) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $192=$185;
   var $193=HEAP32[(($192)>>2)];
   var $194=(($193+40)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$195]($185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$196;
   label = 32; break;
  case 31: 
   var $198=(($185+12)|0);
   var $199=HEAP32[(($198)>>2)];
   var $200=(($199+1)|0);
   HEAP32[(($198)>>2)]=$200;
   var $201=HEAP8[($199)];
   $27=$201;
   var $202=$27;
   var $203=(($202)&(255));
   $28=$203;
   label = 32; break;
  case 32: 
   var $204=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $207=$26;
   $25=$207;
   var $208=$25;
   var $209=(($208)|0);
   $24=$209;
   var $210=$24;
   var $211=$210;
   $23=$211;
   var $212=$23;
   var $213=(($212)|0);
   var $214=(($213)|0);
   var $215=$214;
   var $216=(($215)|0);
   var $217=$216;
   var $218=HEAP8[($217)];
   var $219=(($218)&(255));
   var $220=$219 & 1;
   var $221=(($220)|(0))!=0;
   if ($221) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$207;
   var $223=$19;
   var $224=(($223)|0);
   $18=$224;
   var $225=$18;
   var $226=$225;
   $17=$226;
   var $227=$17;
   var $228=(($227)|0);
   var $229=(($228)|0);
   var $230=$229;
   var $231=(($230+4)|0);
   var $232=HEAP32[(($231)>>2)];
   var $247 = $232;label = 37; break;
  case 36: 
   $22=$207;
   var $234=$22;
   var $235=(($234)|0);
   $21=$235;
   var $236=$21;
   var $237=$236;
   $20=$237;
   var $238=$20;
   var $239=(($238)|0);
   var $240=(($239)|0);
   var $241=$240;
   var $242=(($241)|0);
   var $243=$242;
   var $244=HEAP8[($243)];
   var $245=(($244)&(255));
   var $246=$245 >> 1;
   var $247 = $246;label = 37; break;
  case 37: 
   var $247;
   var $248=(($247)|(0))!=0;
   if ($248) { label = 38; break; } else { label = 41; break; }
  case 38: 
   var $250=HEAP8[($__in_units)];
   var $251=(($250) & 1);
   if ($251) { label = 39; break; } else { label = 41; break; }
  case 39: 
   var $253=HEAP32[(($__g_end)>>2)];
   var $254=(($__g)|0);
   var $255=$253;
   var $256=$254;
   var $257=((($255)-($256))|0);
   var $258=((((($257)|(0)))/(4))&-1);
   var $259=(($258)|(0)) < 40;
   if ($259) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $261=HEAP32[(($__dc)>>2)];
   var $262=HEAP32[(($__g_end)>>2)];
   var $263=(($262+4)|0);
   HEAP32[(($__g_end)>>2)]=$263;
   HEAP32[(($262)>>2)]=$261;
   label = 41; break;
  case 41: 
   var $265=(($__a)|0);
   var $266=HEAP32[(($__a_end)>>2)];
   var $267=$53;
   var $268 = (function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($265, $266, $267) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   var $270=$54;
   HEAPF32[(($270)>>2)]=$268;
   var $271=(($__g)|0);
   var $272=HEAP32[(($__g_end)>>2)];
   var $273=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $271, $272, $273) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 26; break; }
  case 43: 
   $15=$__b;
   $16=$__e;
   var $275=$15;
   var $276=$16;
   $13=$275;
   $14=$276;
   var $277=$13;
   $12=$277;
   var $278=$12;
   var $279=(($278)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=(($280)|(0))!=0;
   if ($281) { label = 44; break; } else { label = 50; break; }
  case 44: 
   var $283=(($278)|0);
   var $284=HEAP32[(($283)>>2)];
   $11=$284;
   var $285=$11;
   var $286=(($285+12)|0);
   var $287=HEAP32[(($286)>>2)];
   var $288=(($285+16)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($287)|(0))==(($289)|(0));
   if ($290) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $292=$285;
   var $293=HEAP32[(($292)>>2)];
   var $294=(($293+36)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$295]($285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 26; break; }
  case 46: 
   $10=$296;
   label = 48; break;
  case 47: 
   var $298=(($285+12)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=HEAP8[($299)];
   $9=$300;
   var $301=$9;
   var $302=(($301)&(255));
   $10=$302;
   label = 48; break;
  case 48: 
   var $303=$10;
   $7=$303;
   $8=-1;
   var $304=$7;
   var $305=$8;
   var $306=(($304)|(0))==(($305)|(0));
   if ($306) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $308=(($278)|0);
   HEAP32[(($308)>>2)]=0;
   label = 50; break;
  case 50: 
   var $309=(($278)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))==0;
   var $312=(($311)&(1));
   var $313=$14;
   $6=$313;
   var $314=$6;
   var $315=(($314)|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=(($316)|(0))!=0;
   if ($317) { label = 51; break; } else { label = 57; break; }
  case 51: 
   var $319=(($314)|0);
   var $320=HEAP32[(($319)>>2)];
   $5=$320;
   var $321=$5;
   var $322=(($321+12)|0);
   var $323=HEAP32[(($322)>>2)];
   var $324=(($321+16)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326=(($323)|(0))==(($325)|(0));
   if ($326) { label = 52; break; } else { label = 54; break; }
  case 52: 
   var $328=$321;
   var $329=HEAP32[(($328)>>2)];
   var $330=(($329+36)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$331]($321) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 26; break; }
  case 53: 
   $4=$332;
   label = 55; break;
  case 54: 
   var $334=(($321+12)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=HEAP8[($335)];
   $3=$336;
   var $337=$3;
   var $338=(($337)&(255));
   $4=$338;
   label = 55; break;
  case 55: 
   var $339=$4;
   $1=$339;
   $2=-1;
   var $340=$1;
   var $341=$2;
   var $342=(($340)|(0))==(($341)|(0));
   if ($342) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $344=(($314)|0);
   HEAP32[(($344)>>2)]=0;
   label = 57; break;
  case 57: 
   var $345=(($314)|0);
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346)|(0))==0;
   var $348=(($347)&(1));
   var $349=(($312)|(0))==(($348)|(0));
   label = 58; break;
  case 58: 
   if ($349) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $352=$53;
   var $353=HEAP32[(($352)>>2)];
   var $354=$353 | 2;
   HEAP32[(($352)>>2)]=$354;
   label = 60; break;
  case 60: 
   var $356=$agg_result;
   var $357=$__b;
   assert(4 % 1 === 0);HEAP32[(($356)>>2)]=HEAP32[(($357)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 61: 
   var $359=$55;
   var $360=$56;
   var $361$0=$359;
   var $361$1=0;
   var $362$0=$361$0;
   var $362$1=$360;
   ___resumeException($362$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg_result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $__loc=__stackBase__;
   var $14;
   var $15;
   var $__np;
   var $16;
   $10=$__iob;
   $11=$__atoms;
   $12=$__decimal_point;
   $13=$__thousands_sep;
   var $17=$10;
   __ZNKSt3__18ios_base6getlocEv($__loc, $17);
   $9=$__loc;
   var $18=$9;
   var $19 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($18, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 14; break; }
  case 2: 
   var $20=$19;
   label = 3; break;
  case 3: 
   var $22=$11;
   $5=$20;
   $6=((20272)|0);
   $7=((20304)|0);
   $8=$22;
   var $23=$5;
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+32)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$6;
   var $29=$7;
   var $30=$8;
   var $31 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($23, $28, $29, $30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 14; break; }
  case 4: 
   label = 5; break;
  case 5: 
   $4=$__loc;
   var $33=$4;
   var $34 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($33, 19432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 14; break; }
  case 6: 
   var $35=$34;
   label = 7; break;
  case 7: 
   $__np=$35;
   var $37=$__np;
   $3=$37;
   var $38=$3;
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40+12)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 14; break; }
  case 8: 
   label = 9; break;
  case 9: 
   var $45=$12;
   HEAP8[($45)]=$43;
   var $46=$__np;
   $2=$46;
   var $47=$2;
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+16)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 14; break; }
  case 10: 
   label = 11; break;
  case 11: 
   var $54=$13;
   HEAP8[($54)]=$52;
   var $55=$__np;
   $1=$55;
   var $56=$1;
   var $57=$56;
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+20)|0);
   var $60=HEAP32[(($59)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]($agg_result, $56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 14; break; }
  case 12: 
   label = 13; break;
  case 13: 
   $16=1;
   __ZNSt3__16localeD2Ev($__loc);
   STACKTOP = __stackBase__;
   return;
  case 14: 
   var $63$0 = ___cxa_find_matching_catch(-1, -1); $63$1 = tempRet0;
   var $64=$63$0;
   $14=$64;
   var $65=$63$1;
   $15=$65;
   __ZNSt3__16localeD2Ev($__loc);
   label = 15; break;
  case 15: 
   var $67=$14;
   var $68=$15;
   var $69$0=$67;
   var $69$1=0;
   var $70$0=$69$0;
   var $70$1=$68;
   ___resumeException($70$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35=__stackBase__;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $__f;
   var $__x;
   HEAP8[($35)]=$__ct;
   $36=$__in_units;
   $37=$__exp;
   $38=$__a;
   $39=$__a_end;
   $40=$__decimal_point;
   $41=$__thousands_sep;
   $42=$__grouping;
   $43=$__g;
   $44=$__g_end;
   $45=$__dc;
   $46=$__atoms;
   var $47=$39;
   var $48=HEAP32[(($47)>>2)];
   var $49=$38;
   var $50=$48;
   var $51=$49;
   var $52=((($50)-($51))|0);
   var $53=(($52)|(0)) >= 39;
   if ($53) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $34=-1;
   label = 55; break;
  case 3: 
   var $56=HEAP8[($35)];
   var $57=(($56 << 24) >> 24);
   var $58=$40;
   var $59=(($58 << 24) >> 24);
   var $60=(($57)|(0))==(($59)|(0));
   if ($60) { label = 4; break; } else { label = 13; break; }
  case 4: 
   var $62=$36;
   var $63=HEAP8[($62)];
   var $64=(($63) & 1);
   if ($64) { label = 6; break; } else { label = 5; break; }
  case 5: 
   $34=-1;
   label = 55; break;
  case 6: 
   var $67=$36;
   HEAP8[($67)]=0;
   var $68=$39;
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69+1)|0);
   HEAP32[(($68)>>2)]=$70;
   HEAP8[($69)]=46;
   var $71=$42;
   $33=$71;
   var $72=$33;
   $32=$72;
   var $73=$32;
   var $74=(($73)|0);
   $31=$74;
   var $75=$31;
   var $76=$75;
   $30=$76;
   var $77=$30;
   var $78=(($77)|0);
   var $79=(($78)|0);
   var $80=$79;
   var $81=(($80)|0);
   var $82=$81;
   var $83=HEAP8[($82)];
   var $84=(($83)&(255));
   var $85=$84 & 1;
   var $86=(($85)|(0))!=0;
   if ($86) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $26=$72;
   var $88=$26;
   var $89=(($88)|0);
   $25=$89;
   var $90=$25;
   var $91=$90;
   $24=$91;
   var $92=$24;
   var $93=(($92)|0);
   var $94=(($93)|0);
   var $95=$94;
   var $96=(($95+4)|0);
   var $97=HEAP32[(($96)>>2)];
   var $112 = $97;label = 9; break;
  case 8: 
   $29=$72;
   var $99=$29;
   var $100=(($99)|0);
   $28=$100;
   var $101=$28;
   var $102=$101;
   $27=$102;
   var $103=$27;
   var $104=(($103)|0);
   var $105=(($104)|0);
   var $106=$105;
   var $107=(($106)|0);
   var $108=$107;
   var $109=HEAP8[($108)];
   var $110=(($109)&(255));
   var $111=$110 >> 1;
   var $112 = $111;label = 9; break;
  case 9: 
   var $112;
   var $113=(($112)|(0))!=0;
   if ($113) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $115=$44;
   var $116=HEAP32[(($115)>>2)];
   var $117=$43;
   var $118=$116;
   var $119=$117;
   var $120=((($118)-($119))|0);
   var $121=((((($120)|(0)))/(4))&-1);
   var $122=(($121)|(0)) < 40;
   if ($122) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $124=$45;
   var $125=HEAP32[(($124)>>2)];
   var $126=$44;
   var $127=HEAP32[(($126)>>2)];
   var $128=(($127+4)|0);
   HEAP32[(($126)>>2)]=$128;
   HEAP32[(($127)>>2)]=$125;
   label = 12; break;
  case 12: 
   $34=0;
   label = 55; break;
  case 13: 
   var $131=HEAP8[($35)];
   var $132=(($131 << 24) >> 24);
   var $133=$41;
   var $134=(($133 << 24) >> 24);
   var $135=(($132)|(0))==(($134)|(0));
   if ($135) { label = 14; break; } else { label = 23; break; }
  case 14: 
   var $137=$42;
   $10=$137;
   var $138=$10;
   $9=$138;
   var $139=$9;
   var $140=(($139)|0);
   $8=$140;
   var $141=$8;
   var $142=$141;
   $7=$142;
   var $143=$7;
   var $144=(($143)|0);
   var $145=(($144)|0);
   var $146=$145;
   var $147=(($146)|0);
   var $148=$147;
   var $149=HEAP8[($148)];
   var $150=(($149)&(255));
   var $151=$150 & 1;
   var $152=(($151)|(0))!=0;
   if ($152) { label = 15; break; } else { label = 16; break; }
  case 15: 
   $3=$138;
   var $154=$3;
   var $155=(($154)|0);
   $2=$155;
   var $156=$2;
   var $157=$156;
   $1=$157;
   var $158=$1;
   var $159=(($158)|0);
   var $160=(($159)|0);
   var $161=$160;
   var $162=(($161+4)|0);
   var $163=HEAP32[(($162)>>2)];
   var $178 = $163;label = 17; break;
  case 16: 
   $6=$138;
   var $165=$6;
   var $166=(($165)|0);
   $5=$166;
   var $167=$5;
   var $168=$167;
   $4=$168;
   var $169=$4;
   var $170=(($169)|0);
   var $171=(($170)|0);
   var $172=$171;
   var $173=(($172)|0);
   var $174=$173;
   var $175=HEAP8[($174)];
   var $176=(($175)&(255));
   var $177=$176 >> 1;
   var $178 = $177;label = 17; break;
  case 17: 
   var $178;
   var $179=(($178)|(0))!=0;
   if ($179) { label = 18; break; } else { label = 23; break; }
  case 18: 
   var $181=$36;
   var $182=HEAP8[($181)];
   var $183=(($182) & 1);
   if ($183) { label = 20; break; } else { label = 19; break; }
  case 19: 
   $34=-1;
   label = 55; break;
  case 20: 
   var $186=$44;
   var $187=HEAP32[(($186)>>2)];
   var $188=$43;
   var $189=$187;
   var $190=$188;
   var $191=((($189)-($190))|0);
   var $192=((((($191)|(0)))/(4))&-1);
   var $193=(($192)|(0)) < 40;
   if ($193) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $195=$45;
   var $196=HEAP32[(($195)>>2)];
   var $197=$44;
   var $198=HEAP32[(($197)>>2)];
   var $199=(($198+4)|0);
   HEAP32[(($197)>>2)]=$199;
   HEAP32[(($198)>>2)]=$196;
   var $200=$45;
   HEAP32[(($200)>>2)]=0;
   label = 22; break;
  case 22: 
   $34=0;
   label = 55; break;
  case 23: 
   var $203=$46;
   var $204=$46;
   var $205=(($204+32)|0);
   $11=$203;
   $12=$205;
   $13=$35;
   label = 24; break;
  case 24: 
   var $207=$11;
   var $208=$12;
   var $209=(($207)|(0))!=(($208)|(0));
   if ($209) { label = 25; break; } else { label = 28; break; }
  case 25: 
   var $211=$11;
   var $212=HEAP8[($211)];
   var $213=(($212 << 24) >> 24);
   var $214=$13;
   var $215=HEAP8[($214)];
   var $216=(($215 << 24) >> 24);
   var $217=(($213)|(0))==(($216)|(0));
   if ($217) { label = 26; break; } else { label = 27; break; }
  case 26: 
   label = 28; break;
  case 27: 
   var $220=$11;
   var $221=(($220+1)|0);
   $11=$221;
   label = 24; break;
  case 28: 
   var $222=$11;
   var $223=$46;
   var $224=$222;
   var $225=$223;
   var $226=((($224)-($225))|0);
   $__f=$226;
   var $227=$__f;
   var $228=(($227)|(0)) >= 32;
   if ($228) { label = 29; break; } else { label = 30; break; }
  case 29: 
   $34=-1;
   label = 55; break;
  case 30: 
   var $231=$__f;
   var $232=((20272+$231)|0);
   var $233=HEAP8[($232)];
   $__x=$233;
   var $234=$__x;
   var $235=(($234 << 24) >> 24);
   var $236=(($235)|(0))==45;
   if ($236) { label = 32; break; } else { label = 31; break; }
  case 31: 
   var $238=$__x;
   var $239=(($238 << 24) >> 24);
   var $240=(($239)|(0))==43;
   if ($240) { label = 32; break; } else { label = 36; break; }
  case 32: 
   var $242=$39;
   var $243=HEAP32[(($242)>>2)];
   var $244=$38;
   var $245=(($243)|(0))==(($244)|(0));
   if ($245) { label = 34; break; } else { label = 33; break; }
  case 33: 
   var $247=$39;
   var $248=HEAP32[(($247)>>2)];
   var $249=((($248)-(1))|0);
   var $250=HEAP8[($249)];
   var $251=(($250 << 24) >> 24);
   var $252=$251 & 95;
   var $253=$37;
   var $254=HEAP8[($253)];
   var $255=(($254 << 24) >> 24);
   var $256=$255 & 127;
   var $257=(($252)|(0))==(($256)|(0));
   if ($257) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $259=$__x;
   var $260=$39;
   var $261=HEAP32[(($260)>>2)];
   var $262=(($261+1)|0);
   HEAP32[(($260)>>2)]=$262;
   HEAP8[($261)]=$259;
   $34=0;
   label = 55; break;
  case 35: 
   $34=-1;
   label = 55; break;
  case 36: 
   var $265=$__x;
   var $266=(($265 << 24) >> 24);
   var $267=(($266)|(0))==120;
   if ($267) { label = 38; break; } else { label = 37; break; }
  case 37: 
   var $269=$__x;
   var $270=(($269 << 24) >> 24);
   var $271=(($270)|(0))==88;
   if ($271) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $273=$37;
   HEAP8[($273)]=80;
   label = 50; break;
  case 39: 
   var $275=$__x;
   var $276=(($275 << 24) >> 24);
   var $277=$276 & 95;
   var $278=$37;
   var $279=HEAP8[($278)];
   var $280=(($279 << 24) >> 24);
   var $281=(($277)|(0))==(($280)|(0));
   if ($281) { label = 40; break; } else { label = 49; break; }
  case 40: 
   var $283=$37;
   var $284=HEAP8[($283)];
   var $285=(($284 << 24) >> 24);
   var $286=$285 | 128;
   var $287=(($286) & 255);
   HEAP8[($283)]=$287;
   var $288=$36;
   var $289=HEAP8[($288)];
   var $290=(($289) & 1);
   if ($290) { label = 41; break; } else { label = 48; break; }
  case 41: 
   var $292=$36;
   HEAP8[($292)]=0;
   var $293=$42;
   $23=$293;
   var $294=$23;
   $22=$294;
   var $295=$22;
   var $296=(($295)|0);
   $21=$296;
   var $297=$21;
   var $298=$297;
   $20=$298;
   var $299=$20;
   var $300=(($299)|0);
   var $301=(($300)|0);
   var $302=$301;
   var $303=(($302)|0);
   var $304=$303;
   var $305=HEAP8[($304)];
   var $306=(($305)&(255));
   var $307=$306 & 1;
   var $308=(($307)|(0))!=0;
   if ($308) { label = 42; break; } else { label = 43; break; }
  case 42: 
   $16=$294;
   var $310=$16;
   var $311=(($310)|0);
   $15=$311;
   var $312=$15;
   var $313=$312;
   $14=$313;
   var $314=$14;
   var $315=(($314)|0);
   var $316=(($315)|0);
   var $317=$316;
   var $318=(($317+4)|0);
   var $319=HEAP32[(($318)>>2)];
   var $334 = $319;label = 44; break;
  case 43: 
   $19=$294;
   var $321=$19;
   var $322=(($321)|0);
   $18=$322;
   var $323=$18;
   var $324=$323;
   $17=$324;
   var $325=$17;
   var $326=(($325)|0);
   var $327=(($326)|0);
   var $328=$327;
   var $329=(($328)|0);
   var $330=$329;
   var $331=HEAP8[($330)];
   var $332=(($331)&(255));
   var $333=$332 >> 1;
   var $334 = $333;label = 44; break;
  case 44: 
   var $334;
   var $335=(($334)|(0))!=0;
   if ($335) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $337=$44;
   var $338=HEAP32[(($337)>>2)];
   var $339=$43;
   var $340=$338;
   var $341=$339;
   var $342=((($340)-($341))|0);
   var $343=((((($342)|(0)))/(4))&-1);
   var $344=(($343)|(0)) < 40;
   if ($344) { label = 46; break; } else { label = 47; break; }
  case 46: 
   var $346=$45;
   var $347=HEAP32[(($346)>>2)];
   var $348=$44;
   var $349=HEAP32[(($348)>>2)];
   var $350=(($349+4)|0);
   HEAP32[(($348)>>2)]=$350;
   HEAP32[(($349)>>2)]=$347;
   label = 47; break;
  case 47: 
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   label = 50; break;
  case 50: 
   var $355=$39;
   var $356=HEAP32[(($355)>>2)];
   var $357=$38;
   var $358=$356;
   var $359=$357;
   var $360=((($358)-($359))|0);
   var $361=$37;
   var $362=HEAP8[($361)];
   var $363=(($362 << 24) >> 24);
   var $364=$363 & 128;
   var $365=(($364)|(0))!=0;
   var $366=$365 ? 1 : 11;
   var $367=(((40)-($366))|0);
   var $368=(($360)|(0)) < (($367)|(0));
   if ($368) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $370=$__x;
   var $371=$39;
   var $372=HEAP32[(($371)>>2)];
   var $373=(($372+1)|0);
   HEAP32[(($371)>>2)]=$373;
   HEAP8[($372)]=$370;
   label = 52; break;
  case 52: 
   var $375=$__f;
   var $376=(($375)|(0)) >= 22;
   if ($376) { label = 53; break; } else { label = 54; break; }
  case 53: 
   $34=0;
   label = 55; break;
  case 54: 
   var $379=$45;
   var $380=HEAP32[(($379)>>2)];
   var $381=((($380)+(1))|0);
   HEAP32[(($379)>>2)]=$381;
   $34=0;
   label = 55; break;
  case 55: 
   var $383=$34;
   STACKTOP = __stackBase__;
   return $383;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $__p2=__stackBase__;
   var $__ld;
   $2=$__a;
   $3=$__a_end;
   $4=$__err;
   var $5=$2;
   var $6=$3;
   var $7=(($5)|(0))!=(($6)|(0));
   if ($7) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $9=$2;
   var $10=__ZNSt3__16__clocEv();
   var $11=_strtold_l($9, $__p2, $10);
   $__ld=$11;
   var $12=HEAP32[(($__p2)>>2)];
   var $13=$3;
   var $14=(($12)|(0))!=(($13)|(0));
   if ($14) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $16=$4;
   HEAP32[(($16)>>2)]=4;
   $1=0;
   label = 6; break;
  case 4: 
   var $18=$__ld;
   var $19=$18;
   $1=$19;
   label = 6; break;
  case 5: 
   var $21=$4;
   HEAP32[(($21)>>2)]=4;
   $1=0;
   label = 6; break;
  case 6: 
   var $23=$1;
   STACKTOP = __stackBase__;
   return $23;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 304)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__atoms=__stackBase__;
   var $__decimal_point=(__stackBase__)+(32);
   var $__thousands_sep=(__stackBase__)+(40);
   var $__grouping=(__stackBase__)+(48);
   var $__a=(__stackBase__)+(64);
   var $__a_end=(__stackBase__)+(104);
   var $__g=(__stackBase__)+(112);
   var $__g_end=(__stackBase__)+(272);
   var $__dc=(__stackBase__)+(280);
   var $__in_units=(__stackBase__)+(288);
   var $__exp=(__stackBase__)+(296);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=(($__atoms)|0);
   __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $59, $60, $__decimal_point, $__thousands_sep);
   var $61=$__a;
   _memset($61, 0, 40);
   var $62=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$62;
   var $63=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$63;
   HEAP32[(($__dc)>>2)]=0;
   HEAP8[($__in_units)]=1;
   HEAP8[($__exp)]=69;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $65=$49;
   var $66=$50;
   $47=$65;
   $48=$66;
   var $67=$47;
   $46=$67;
   var $68=$46;
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|(0))!=0;
   if ($71) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $73=(($68)|0);
   var $74=HEAP32[(($73)>>2)];
   $45=$74;
   var $75=$45;
   var $76=(($75+12)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($75+16)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77)|(0))==(($79)|(0));
   if ($80) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $82=$75;
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+36)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$86;
   label = 7; break;
  case 6: 
   var $88=(($75+12)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=HEAP8[($89)];
   $43=$90;
   var $91=$43;
   var $92=(($91)&(255));
   $44=$92;
   label = 7; break;
  case 7: 
   var $93=$44;
   $41=$93;
   $42=-1;
   var $94=$41;
   var $95=$42;
   var $96=(($94)|(0))==(($95)|(0));
   if ($96) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $98=(($68)|0);
   HEAP32[(($98)>>2)]=0;
   label = 9; break;
  case 9: 
   var $99=(($68)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100)|(0))==0;
   var $102=(($101)&(1));
   var $103=$48;
   $40=$103;
   var $104=$40;
   var $105=(($104)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106)|(0))!=0;
   if ($107) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $109=(($104)|0);
   var $110=HEAP32[(($109)>>2)];
   $39=$110;
   var $111=$39;
   var $112=(($111+12)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($111+16)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($113)|(0))==(($115)|(0));
   if ($116) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $118=$111;
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119+36)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$122;
   label = 14; break;
  case 13: 
   var $124=(($111+12)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=HEAP8[($125)];
   $37=$126;
   var $127=$37;
   var $128=(($127)&(255));
   $38=$128;
   label = 14; break;
  case 14: 
   var $129=$38;
   $35=$129;
   $36=-1;
   var $130=$35;
   var $131=$36;
   var $132=(($130)|(0))==(($131)|(0));
   if ($132) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $134=(($104)|0);
   HEAP32[(($134)>>2)]=0;
   label = 16; break;
  case 16: 
   var $135=(($104)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136)|(0))==0;
   var $138=(($137)&(1));
   var $139=(($102)|(0))==(($138)|(0));
   var $140=$139 ^ 1;
   label = 17; break;
  case 17: 
   if ($140) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $143=$34;
   var $144=(($143)|0);
   var $145=HEAP32[(($144)>>2)];
   $33=$145;
   var $146=$33;
   var $147=(($146+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($146+16)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148)|(0))==(($150)|(0));
   if ($151) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $153=$146;
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154+36)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$157;
   label = 22; break;
  case 21: 
   var $159=(($146+12)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=HEAP8[($160)];
   $31=$161;
   var $162=$31;
   var $163=(($162)&(255));
   $32=$163;
   label = 22; break;
  case 22: 
   var $164=$32;
   var $165=(($164) & 255);
   label = 23; break;
  case 23: 
   var $167=(($__a)|0);
   var $168=HEAP8[($__decimal_point)];
   var $169=HEAP8[($__thousands_sep)];
   var $170=(($__g)|0);
   var $171=(($__atoms)|0);
   var $172 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($165, $__in_units, $__exp, $167, $__a_end, $168, $169, $__grouping, $170, $__g_end, $__dc, $171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $174=(($172)|(0))!=0;
   if ($174) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $177$0 = ___cxa_find_matching_catch(-1, -1); $177$1 = tempRet0;
   var $178=$177$0;
   $55=$178;
   var $179=$177$1;
   $56=$179;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 61; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $182=$30;
   var $183=(($182)|0);
   var $184=HEAP32[(($183)>>2)];
   $29=$184;
   var $185=$29;
   var $186=(($185+12)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($185+16)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($187)|(0))==(($189)|(0));
   if ($190) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $192=$185;
   var $193=HEAP32[(($192)>>2)];
   var $194=(($193+40)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$195]($185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$196;
   label = 32; break;
  case 31: 
   var $198=(($185+12)|0);
   var $199=HEAP32[(($198)>>2)];
   var $200=(($199+1)|0);
   HEAP32[(($198)>>2)]=$200;
   var $201=HEAP8[($199)];
   $27=$201;
   var $202=$27;
   var $203=(($202)&(255));
   $28=$203;
   label = 32; break;
  case 32: 
   var $204=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $207=$26;
   $25=$207;
   var $208=$25;
   var $209=(($208)|0);
   $24=$209;
   var $210=$24;
   var $211=$210;
   $23=$211;
   var $212=$23;
   var $213=(($212)|0);
   var $214=(($213)|0);
   var $215=$214;
   var $216=(($215)|0);
   var $217=$216;
   var $218=HEAP8[($217)];
   var $219=(($218)&(255));
   var $220=$219 & 1;
   var $221=(($220)|(0))!=0;
   if ($221) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$207;
   var $223=$19;
   var $224=(($223)|0);
   $18=$224;
   var $225=$18;
   var $226=$225;
   $17=$226;
   var $227=$17;
   var $228=(($227)|0);
   var $229=(($228)|0);
   var $230=$229;
   var $231=(($230+4)|0);
   var $232=HEAP32[(($231)>>2)];
   var $247 = $232;label = 37; break;
  case 36: 
   $22=$207;
   var $234=$22;
   var $235=(($234)|0);
   $21=$235;
   var $236=$21;
   var $237=$236;
   $20=$237;
   var $238=$20;
   var $239=(($238)|0);
   var $240=(($239)|0);
   var $241=$240;
   var $242=(($241)|0);
   var $243=$242;
   var $244=HEAP8[($243)];
   var $245=(($244)&(255));
   var $246=$245 >> 1;
   var $247 = $246;label = 37; break;
  case 37: 
   var $247;
   var $248=(($247)|(0))!=0;
   if ($248) { label = 38; break; } else { label = 41; break; }
  case 38: 
   var $250=HEAP8[($__in_units)];
   var $251=(($250) & 1);
   if ($251) { label = 39; break; } else { label = 41; break; }
  case 39: 
   var $253=HEAP32[(($__g_end)>>2)];
   var $254=(($__g)|0);
   var $255=$253;
   var $256=$254;
   var $257=((($255)-($256))|0);
   var $258=((((($257)|(0)))/(4))&-1);
   var $259=(($258)|(0)) < 40;
   if ($259) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $261=HEAP32[(($__dc)>>2)];
   var $262=HEAP32[(($__g_end)>>2)];
   var $263=(($262+4)|0);
   HEAP32[(($__g_end)>>2)]=$263;
   HEAP32[(($262)>>2)]=$261;
   label = 41; break;
  case 41: 
   var $265=(($__a)|0);
   var $266=HEAP32[(($__a_end)>>2)];
   var $267=$53;
   var $268 = (function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($265, $266, $267) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   var $270=$54;
   HEAPF64[(($270)>>3)]=$268;
   var $271=(($__g)|0);
   var $272=HEAP32[(($__g_end)>>2)];
   var $273=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $271, $272, $273) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 26; break; }
  case 43: 
   $15=$__b;
   $16=$__e;
   var $275=$15;
   var $276=$16;
   $13=$275;
   $14=$276;
   var $277=$13;
   $12=$277;
   var $278=$12;
   var $279=(($278)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=(($280)|(0))!=0;
   if ($281) { label = 44; break; } else { label = 50; break; }
  case 44: 
   var $283=(($278)|0);
   var $284=HEAP32[(($283)>>2)];
   $11=$284;
   var $285=$11;
   var $286=(($285+12)|0);
   var $287=HEAP32[(($286)>>2)];
   var $288=(($285+16)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($287)|(0))==(($289)|(0));
   if ($290) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $292=$285;
   var $293=HEAP32[(($292)>>2)];
   var $294=(($293+36)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$295]($285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 26; break; }
  case 46: 
   $10=$296;
   label = 48; break;
  case 47: 
   var $298=(($285+12)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=HEAP8[($299)];
   $9=$300;
   var $301=$9;
   var $302=(($301)&(255));
   $10=$302;
   label = 48; break;
  case 48: 
   var $303=$10;
   $7=$303;
   $8=-1;
   var $304=$7;
   var $305=$8;
   var $306=(($304)|(0))==(($305)|(0));
   if ($306) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $308=(($278)|0);
   HEAP32[(($308)>>2)]=0;
   label = 50; break;
  case 50: 
   var $309=(($278)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))==0;
   var $312=(($311)&(1));
   var $313=$14;
   $6=$313;
   var $314=$6;
   var $315=(($314)|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=(($316)|(0))!=0;
   if ($317) { label = 51; break; } else { label = 57; break; }
  case 51: 
   var $319=(($314)|0);
   var $320=HEAP32[(($319)>>2)];
   $5=$320;
   var $321=$5;
   var $322=(($321+12)|0);
   var $323=HEAP32[(($322)>>2)];
   var $324=(($321+16)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326=(($323)|(0))==(($325)|(0));
   if ($326) { label = 52; break; } else { label = 54; break; }
  case 52: 
   var $328=$321;
   var $329=HEAP32[(($328)>>2)];
   var $330=(($329+36)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$331]($321) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 26; break; }
  case 53: 
   $4=$332;
   label = 55; break;
  case 54: 
   var $334=(($321+12)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=HEAP8[($335)];
   $3=$336;
   var $337=$3;
   var $338=(($337)&(255));
   $4=$338;
   label = 55; break;
  case 55: 
   var $339=$4;
   $1=$339;
   $2=-1;
   var $340=$1;
   var $341=$2;
   var $342=(($340)|(0))==(($341)|(0));
   if ($342) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $344=(($314)|0);
   HEAP32[(($344)>>2)]=0;
   label = 57; break;
  case 57: 
   var $345=(($314)|0);
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346)|(0))==0;
   var $348=(($347)&(1));
   var $349=(($312)|(0))==(($348)|(0));
   label = 58; break;
  case 58: 
   if ($349) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $352=$53;
   var $353=HEAP32[(($352)>>2)];
   var $354=$353 | 2;
   HEAP32[(($352)>>2)]=$354;
   label = 60; break;
  case 60: 
   var $356=$agg_result;
   var $357=$__b;
   assert(4 % 1 === 0);HEAP32[(($356)>>2)]=HEAP32[(($357)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 61: 
   var $359=$55;
   var $360=$56;
   var $361$0=$359;
   var $361$1=0;
   var $362$0=$361$0;
   var $362$1=$360;
   ___resumeException($362$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $__p2=__stackBase__;
   var $__ld;
   $2=$__a;
   $3=$__a_end;
   $4=$__err;
   var $5=$2;
   var $6=$3;
   var $7=(($5)|(0))!=(($6)|(0));
   if ($7) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $9=$2;
   var $10=__ZNSt3__16__clocEv();
   var $11=_strtold_l($9, $__p2, $10);
   $__ld=$11;
   var $12=HEAP32[(($__p2)>>2)];
   var $13=$3;
   var $14=(($12)|(0))!=(($13)|(0));
   if ($14) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $16=$4;
   HEAP32[(($16)>>2)]=4;
   $1=0;
   label = 6; break;
  case 4: 
   var $18=$__ld;
   $1=$18;
   label = 6; break;
  case 5: 
   var $20=$4;
   HEAP32[(($20)>>2)]=4;
   $1=0;
   label = 6; break;
  case 6: 
   var $22=$1;
   STACKTOP = __stackBase__;
   return $22;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 304)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__atoms=__stackBase__;
   var $__decimal_point=(__stackBase__)+(32);
   var $__thousands_sep=(__stackBase__)+(40);
   var $__grouping=(__stackBase__)+(48);
   var $__a=(__stackBase__)+(64);
   var $__a_end=(__stackBase__)+(104);
   var $__g=(__stackBase__)+(112);
   var $__g_end=(__stackBase__)+(272);
   var $__dc=(__stackBase__)+(280);
   var $__in_units=(__stackBase__)+(288);
   var $__exp=(__stackBase__)+(296);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=(($__atoms)|0);
   __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $59, $60, $__decimal_point, $__thousands_sep);
   var $61=$__a;
   _memset($61, 0, 40);
   var $62=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$62;
   var $63=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$63;
   HEAP32[(($__dc)>>2)]=0;
   HEAP8[($__in_units)]=1;
   HEAP8[($__exp)]=69;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $65=$49;
   var $66=$50;
   $47=$65;
   $48=$66;
   var $67=$47;
   $46=$67;
   var $68=$46;
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|(0))!=0;
   if ($71) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $73=(($68)|0);
   var $74=HEAP32[(($73)>>2)];
   $45=$74;
   var $75=$45;
   var $76=(($75+12)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($75+16)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77)|(0))==(($79)|(0));
   if ($80) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $82=$75;
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+36)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$86;
   label = 7; break;
  case 6: 
   var $88=(($75+12)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=HEAP8[($89)];
   $43=$90;
   var $91=$43;
   var $92=(($91)&(255));
   $44=$92;
   label = 7; break;
  case 7: 
   var $93=$44;
   $41=$93;
   $42=-1;
   var $94=$41;
   var $95=$42;
   var $96=(($94)|(0))==(($95)|(0));
   if ($96) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $98=(($68)|0);
   HEAP32[(($98)>>2)]=0;
   label = 9; break;
  case 9: 
   var $99=(($68)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100)|(0))==0;
   var $102=(($101)&(1));
   var $103=$48;
   $40=$103;
   var $104=$40;
   var $105=(($104)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106)|(0))!=0;
   if ($107) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $109=(($104)|0);
   var $110=HEAP32[(($109)>>2)];
   $39=$110;
   var $111=$39;
   var $112=(($111+12)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($111+16)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($113)|(0))==(($115)|(0));
   if ($116) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $118=$111;
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119+36)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$121]($111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$122;
   label = 14; break;
  case 13: 
   var $124=(($111+12)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=HEAP8[($125)];
   $37=$126;
   var $127=$37;
   var $128=(($127)&(255));
   $38=$128;
   label = 14; break;
  case 14: 
   var $129=$38;
   $35=$129;
   $36=-1;
   var $130=$35;
   var $131=$36;
   var $132=(($130)|(0))==(($131)|(0));
   if ($132) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $134=(($104)|0);
   HEAP32[(($134)>>2)]=0;
   label = 16; break;
  case 16: 
   var $135=(($104)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136)|(0))==0;
   var $138=(($137)&(1));
   var $139=(($102)|(0))==(($138)|(0));
   var $140=$139 ^ 1;
   label = 17; break;
  case 17: 
   if ($140) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $143=$34;
   var $144=(($143)|0);
   var $145=HEAP32[(($144)>>2)];
   $33=$145;
   var $146=$33;
   var $147=(($146+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($146+16)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148)|(0))==(($150)|(0));
   if ($151) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $153=$146;
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154+36)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$157;
   label = 22; break;
  case 21: 
   var $159=(($146+12)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=HEAP8[($160)];
   $31=$161;
   var $162=$31;
   var $163=(($162)&(255));
   $32=$163;
   label = 22; break;
  case 22: 
   var $164=$32;
   var $165=(($164) & 255);
   label = 23; break;
  case 23: 
   var $167=(($__a)|0);
   var $168=HEAP8[($__decimal_point)];
   var $169=HEAP8[($__thousands_sep)];
   var $170=(($__g)|0);
   var $171=(($__atoms)|0);
   var $172 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($165, $__in_units, $__exp, $167, $__a_end, $168, $169, $__grouping, $170, $__g_end, $__dc, $171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $174=(($172)|(0))!=0;
   if ($174) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $177$0 = ___cxa_find_matching_catch(-1, -1); $177$1 = tempRet0;
   var $178=$177$0;
   $55=$178;
   var $179=$177$1;
   $56=$179;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 61; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $182=$30;
   var $183=(($182)|0);
   var $184=HEAP32[(($183)>>2)];
   $29=$184;
   var $185=$29;
   var $186=(($185+12)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($185+16)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($187)|(0))==(($189)|(0));
   if ($190) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $192=$185;
   var $193=HEAP32[(($192)>>2)];
   var $194=(($193+40)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$195]($185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$196;
   label = 32; break;
  case 31: 
   var $198=(($185+12)|0);
   var $199=HEAP32[(($198)>>2)];
   var $200=(($199+1)|0);
   HEAP32[(($198)>>2)]=$200;
   var $201=HEAP8[($199)];
   $27=$201;
   var $202=$27;
   var $203=(($202)&(255));
   $28=$203;
   label = 32; break;
  case 32: 
   var $204=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $207=$26;
   $25=$207;
   var $208=$25;
   var $209=(($208)|0);
   $24=$209;
   var $210=$24;
   var $211=$210;
   $23=$211;
   var $212=$23;
   var $213=(($212)|0);
   var $214=(($213)|0);
   var $215=$214;
   var $216=(($215)|0);
   var $217=$216;
   var $218=HEAP8[($217)];
   var $219=(($218)&(255));
   var $220=$219 & 1;
   var $221=(($220)|(0))!=0;
   if ($221) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$207;
   var $223=$19;
   var $224=(($223)|0);
   $18=$224;
   var $225=$18;
   var $226=$225;
   $17=$226;
   var $227=$17;
   var $228=(($227)|0);
   var $229=(($228)|0);
   var $230=$229;
   var $231=(($230+4)|0);
   var $232=HEAP32[(($231)>>2)];
   var $247 = $232;label = 37; break;
  case 36: 
   $22=$207;
   var $234=$22;
   var $235=(($234)|0);
   $21=$235;
   var $236=$21;
   var $237=$236;
   $20=$237;
   var $238=$20;
   var $239=(($238)|0);
   var $240=(($239)|0);
   var $241=$240;
   var $242=(($241)|0);
   var $243=$242;
   var $244=HEAP8[($243)];
   var $245=(($244)&(255));
   var $246=$245 >> 1;
   var $247 = $246;label = 37; break;
  case 37: 
   var $247;
   var $248=(($247)|(0))!=0;
   if ($248) { label = 38; break; } else { label = 41; break; }
  case 38: 
   var $250=HEAP8[($__in_units)];
   var $251=(($250) & 1);
   if ($251) { label = 39; break; } else { label = 41; break; }
  case 39: 
   var $253=HEAP32[(($__g_end)>>2)];
   var $254=(($__g)|0);
   var $255=$253;
   var $256=$254;
   var $257=((($255)-($256))|0);
   var $258=((((($257)|(0)))/(4))&-1);
   var $259=(($258)|(0)) < 40;
   if ($259) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $261=HEAP32[(($__dc)>>2)];
   var $262=HEAP32[(($__g_end)>>2)];
   var $263=(($262+4)|0);
   HEAP32[(($__g_end)>>2)]=$263;
   HEAP32[(($262)>>2)]=$261;
   label = 41; break;
  case 41: 
   var $265=(($__a)|0);
   var $266=HEAP32[(($__a_end)>>2)];
   var $267=$53;
   var $268 = (function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($265, $266, $267) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   var $270=$54;
   HEAPF64[(($270)>>3)]=$268;
   var $271=(($__g)|0);
   var $272=HEAP32[(($__g_end)>>2)];
   var $273=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $271, $272, $273) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 26; break; }
  case 43: 
   $15=$__b;
   $16=$__e;
   var $275=$15;
   var $276=$16;
   $13=$275;
   $14=$276;
   var $277=$13;
   $12=$277;
   var $278=$12;
   var $279=(($278)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=(($280)|(0))!=0;
   if ($281) { label = 44; break; } else { label = 50; break; }
  case 44: 
   var $283=(($278)|0);
   var $284=HEAP32[(($283)>>2)];
   $11=$284;
   var $285=$11;
   var $286=(($285+12)|0);
   var $287=HEAP32[(($286)>>2)];
   var $288=(($285+16)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($287)|(0))==(($289)|(0));
   if ($290) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $292=$285;
   var $293=HEAP32[(($292)>>2)];
   var $294=(($293+36)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$295]($285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 26; break; }
  case 46: 
   $10=$296;
   label = 48; break;
  case 47: 
   var $298=(($285+12)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=HEAP8[($299)];
   $9=$300;
   var $301=$9;
   var $302=(($301)&(255));
   $10=$302;
   label = 48; break;
  case 48: 
   var $303=$10;
   $7=$303;
   $8=-1;
   var $304=$7;
   var $305=$8;
   var $306=(($304)|(0))==(($305)|(0));
   if ($306) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $308=(($278)|0);
   HEAP32[(($308)>>2)]=0;
   label = 50; break;
  case 50: 
   var $309=(($278)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))==0;
   var $312=(($311)&(1));
   var $313=$14;
   $6=$313;
   var $314=$6;
   var $315=(($314)|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=(($316)|(0))!=0;
   if ($317) { label = 51; break; } else { label = 57; break; }
  case 51: 
   var $319=(($314)|0);
   var $320=HEAP32[(($319)>>2)];
   $5=$320;
   var $321=$5;
   var $322=(($321+12)|0);
   var $323=HEAP32[(($322)>>2)];
   var $324=(($321+16)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326=(($323)|(0))==(($325)|(0));
   if ($326) { label = 52; break; } else { label = 54; break; }
  case 52: 
   var $328=$321;
   var $329=HEAP32[(($328)>>2)];
   var $330=(($329+36)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$331]($321) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 26; break; }
  case 53: 
   $4=$332;
   label = 55; break;
  case 54: 
   var $334=(($321+12)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=HEAP8[($335)];
   $3=$336;
   var $337=$3;
   var $338=(($337)&(255));
   $4=$338;
   label = 55; break;
  case 55: 
   var $339=$4;
   $1=$339;
   $2=-1;
   var $340=$1;
   var $341=$2;
   var $342=(($340)|(0))==(($341)|(0));
   if ($342) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $344=(($314)|0);
   HEAP32[(($344)>>2)]=0;
   label = 57; break;
  case 57: 
   var $345=(($314)|0);
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346)|(0))==0;
   var $348=(($347)&(1));
   var $349=(($312)|(0))==(($348)|(0));
   label = 58; break;
  case 58: 
   if ($349) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $352=$53;
   var $353=HEAP32[(($352)>>2)];
   var $354=$353 | 2;
   HEAP32[(($352)>>2)]=$354;
   label = 60; break;
  case 60: 
   var $356=$agg_result;
   var $357=$__b;
   assert(4 % 1 === 0);HEAP32[(($356)>>2)]=HEAP32[(($357)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 61: 
   var $359=$55;
   var $360=$56;
   var $361$0=$359;
   var $361$1=0;
   var $362$0=$361$0;
   var $362$1=$360;
   ___resumeException($362$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $__p2=__stackBase__;
   var $__ld;
   $2=$__a;
   $3=$__a_end;
   $4=$__err;
   var $5=$2;
   var $6=$3;
   var $7=(($5)|(0))!=(($6)|(0));
   if ($7) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $9=$2;
   var $10=__ZNSt3__16__clocEv();
   var $11=_strtold_l($9, $__p2, $10);
   $__ld=$11;
   var $12=HEAP32[(($__p2)>>2)];
   var $13=$3;
   var $14=(($12)|(0))!=(($13)|(0));
   if ($14) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $16=$4;
   HEAP32[(($16)>>2)]=4;
   $1=0;
   label = 6; break;
  case 4: 
   var $18=$__ld;
   $1=$18;
   label = 6; break;
  case 5: 
   var $20=$4;
   HEAP32[(($20)>>2)]=4;
   $1=0;
   label = 6; break;
  case 6: 
   var $22=$1;
   STACKTOP = __stackBase__;
   return $22;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep;
   var $__grouping=(__stackBase__)+(32);
   var $59=(__stackBase__)+(48);
   var $60;
   var $61;
   var $__a=(__stackBase__)+(56);
   var $__a_end=(__stackBase__)+(96);
   var $__g=(__stackBase__)+(104);
   var $__g_end=(__stackBase__)+(264);
   var $__dc=(__stackBase__)+(272);
   var $62;
   $55=$this;
   $56=$__iob;
   $57=$__err;
   $58=$__v;
   var $63=$55;
   $__base=16;
   $__thousands_sep=0;
   $54=$__grouping;
   var $64=$54;
   $53=$64;
   var $65=$53;
   var $66=$65;
   var $67=(($65)|0);
   $52=$67;
   var $68=$52;
   $51=$68;
   var $69=$51;
   var $70=$69;
   $50=$70;
   var $71=$50;
   var $72=$71;
   $49=$72;
   var $73=$49;
   var $74=(($71)|0);
   $48=$65;
   var $75=$48;
   var $76=(($75)|0);
   $47=$76;
   var $77=$47;
   var $78=$77;
   $46=$78;
   var $79=$46;
   var $80=(($79)|0);
   var $81=(($80)|0);
   var $82=$81;
   var $83=(($82)|0);
   $__a_i_i_i=$83;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $85=$__i_i_i_i;
   var $86=(($85)>>>(0)) < 3;
   if ($86) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $88=$__i_i_i_i;
   var $89=$__a_i_i_i;
   var $90=(($89+($88<<2))|0);
   HEAP32[(($90)>>2)]=0;
   var $91=$__i_i_i_i;
   var $92=((($91)+(1))|0);
   $__i_i_i_i=$92;
   label = 2; break;
  case 4: 
   var $93=$56;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($59, $93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 34; break; }
  case 5: 
   $29=$59;
   var $95=$29;
   var $96 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($95, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 35; break; }
  case 6: 
   var $97=$96;
   label = 7; break;
  case 7: 
   var $99=(($__atoms)|0);
   $25=$97;
   $26=((20272)|0);
   $27=((20298)|0);
   $28=$99;
   var $100=$25;
   var $101=$100;
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102+32)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=$26;
   var $106=$27;
   var $107=$28;
   var $108 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$104]($100, $105, $106, $107) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 35; break; }
  case 8: 
   label = 9; break;
  case 9: 
   __ZNSt3__16localeD2Ev($59);
   var $110=$__a;
   _memset($110, 0, 40);
   var $111=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$111;
   var $112=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$112;
   HEAP32[(($__dc)>>2)]=0;
   label = 10; break;
  case 10: 
   $23=$__b;
   $24=$__e;
   var $114=$23;
   var $115=$24;
   $21=$114;
   $22=$115;
   var $116=$21;
   $20=$116;
   var $117=$20;
   var $118=(($117)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119)|(0))!=0;
   if ($120) { label = 11; break; } else { label = 17; break; }
  case 11: 
   var $122=(($117)|0);
   var $123=HEAP32[(($122)>>2)];
   $19=$123;
   var $124=$19;
   var $125=(($124+12)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=(($124+16)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=(($126)|(0))==(($128)|(0));
   if ($129) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $131=$124;
   var $132=HEAP32[(($131)>>2)];
   var $133=(($132+36)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($124) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 34; break; }
  case 13: 
   $18=$135;
   label = 15; break;
  case 14: 
   var $137=(($124+12)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=HEAP8[($138)];
   $17=$139;
   var $140=$17;
   var $141=(($140)&(255));
   $18=$141;
   label = 15; break;
  case 15: 
   var $142=$18;
   $15=$142;
   $16=-1;
   var $143=$15;
   var $144=$16;
   var $145=(($143)|(0))==(($144)|(0));
   if ($145) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $147=(($117)|0);
   HEAP32[(($147)>>2)]=0;
   label = 17; break;
  case 17: 
   var $148=(($117)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=(($149)|(0))==0;
   var $151=(($150)&(1));
   var $152=$22;
   $14=$152;
   var $153=$14;
   var $154=(($153)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($155)|(0))!=0;
   if ($156) { label = 18; break; } else { label = 24; break; }
  case 18: 
   var $158=(($153)|0);
   var $159=HEAP32[(($158)>>2)];
   $13=$159;
   var $160=$13;
   var $161=(($160+12)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=(($160+16)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=(($162)|(0))==(($164)|(0));
   if ($165) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $167=$160;
   var $168=HEAP32[(($167)>>2)];
   var $169=(($168+36)|0);
   var $170=HEAP32[(($169)>>2)];
   var $171 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 34; break; }
  case 20: 
   $12=$171;
   label = 22; break;
  case 21: 
   var $173=(($160+12)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=HEAP8[($174)];
   $11=$175;
   var $176=$11;
   var $177=(($176)&(255));
   $12=$177;
   label = 22; break;
  case 22: 
   var $178=$12;
   $9=$178;
   $10=-1;
   var $179=$9;
   var $180=$10;
   var $181=(($179)|(0))==(($180)|(0));
   if ($181) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $183=(($153)|0);
   HEAP32[(($183)>>2)]=0;
   label = 24; break;
  case 24: 
   var $184=(($153)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($185)|(0))==0;
   var $187=(($186)&(1));
   var $188=(($151)|(0))==(($187)|(0));
   var $189=$188 ^ 1;
   label = 25; break;
  case 25: 
   if ($189) { label = 26; break; } else { label = 43; break; }
  case 26: 
   $8=$__b;
   var $192=$8;
   var $193=(($192)|0);
   var $194=HEAP32[(($193)>>2)];
   $7=$194;
   var $195=$7;
   var $196=(($195+12)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=(($195+16)|0);
   var $199=HEAP32[(($198)>>2)];
   var $200=(($197)|(0))==(($199)|(0));
   if ($200) { label = 27; break; } else { label = 29; break; }
  case 27: 
   var $202=$195;
   var $203=HEAP32[(($202)>>2)];
   var $204=(($203+36)|0);
   var $205=HEAP32[(($204)>>2)];
   var $206 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$205]($195) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 34; break; }
  case 28: 
   $6=$206;
   label = 30; break;
  case 29: 
   var $208=(($195+12)|0);
   var $209=HEAP32[(($208)>>2)];
   var $210=HEAP8[($209)];
   $5=$210;
   var $211=$5;
   var $212=(($211)&(255));
   $6=$212;
   label = 30; break;
  case 30: 
   var $213=$6;
   var $214=(($213) & 255);
   label = 31; break;
  case 31: 
   var $216=$__base;
   var $217=(($__a)|0);
   var $218=$__thousands_sep;
   var $219=(($__g)|0);
   var $220=(($__atoms)|0);
   var $221 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($214, $216, $217, $__a_end, $__dc, $218, $__grouping, $219, $__g_end, $220) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 34; break; }
  case 32: 
   var $223=(($221)|(0))!=0;
   if ($223) { label = 33; break; } else { label = 36; break; }
  case 33: 
   label = 43; break;
  case 34: 
   var $226$0 = ___cxa_find_matching_catch(-1, -1); $226$1 = tempRet0;
   var $227=$226$0;
   $60=$227;
   var $228=$226$1;
   $61=$228;
   label = 65; break;
  case 35: 
   var $230$0 = ___cxa_find_matching_catch(-1, -1); $230$1 = tempRet0;
   var $231=$230$0;
   $60=$231;
   var $232=$230$1;
   $61=$232;
   __ZNSt3__16localeD2Ev($59);
   label = 65; break;
  case 36: 
   label = 37; break;
  case 37: 
   $4=$__b;
   var $235=$4;
   var $236=(($235)|0);
   var $237=HEAP32[(($236)>>2)];
   $3=$237;
   var $238=$3;
   var $239=(($238+12)|0);
   var $240=HEAP32[(($239)>>2)];
   var $241=(($238+16)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=(($240)|(0))==(($242)|(0));
   if ($243) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $245=$238;
   var $246=HEAP32[(($245)>>2)];
   var $247=(($246+40)|0);
   var $248=HEAP32[(($247)>>2)];
   var $249 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$248]($238) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 34; break; }
  case 39: 
   $2=$249;
   label = 41; break;
  case 40: 
   var $251=(($238+12)|0);
   var $252=HEAP32[(($251)>>2)];
   var $253=(($252+1)|0);
   HEAP32[(($251)>>2)]=$253;
   var $254=HEAP8[($252)];
   $1=$254;
   var $255=$1;
   var $256=(($255)&(255));
   $2=$256;
   label = 41; break;
  case 41: 
   var $257=$2;
   label = 42; break;
  case 42: 
   label = 10; break;
  case 43: 
   var $260=(($__a+39)|0);
   HEAP8[($260)]=0;
   var $261=(($__a)|0);
   var $262 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 34; break; }
  case 44: 
   var $264=$58;
   var $265 = (function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcPvS1_z($261, $262, ((2688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$264,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 34; break; }
  case 45: 
   var $267=(($265)|(0))!=1;
   if ($267) { label = 46; break; } else { label = 47; break; }
  case 46: 
   var $269=$57;
   HEAP32[(($269)>>2)]=4;
   label = 47; break;
  case 47: 
   $44=$__b;
   $45=$__e;
   var $271=$44;
   var $272=$45;
   $42=$271;
   $43=$272;
   var $273=$42;
   $41=$273;
   var $274=$41;
   var $275=(($274)|0);
   var $276=HEAP32[(($275)>>2)];
   var $277=(($276)|(0))!=0;
   if ($277) { label = 48; break; } else { label = 54; break; }
  case 48: 
   var $279=(($274)|0);
   var $280=HEAP32[(($279)>>2)];
   $40=$280;
   var $281=$40;
   var $282=(($281+12)|0);
   var $283=HEAP32[(($282)>>2)];
   var $284=(($281+16)|0);
   var $285=HEAP32[(($284)>>2)];
   var $286=(($283)|(0))==(($285)|(0));
   if ($286) { label = 49; break; } else { label = 51; break; }
  case 49: 
   var $288=$281;
   var $289=HEAP32[(($288)>>2)];
   var $290=(($289+36)|0);
   var $291=HEAP32[(($290)>>2)];
   var $292 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$291]($281) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 50; break; } else { label = 34; break; }
  case 50: 
   $39=$292;
   label = 52; break;
  case 51: 
   var $294=(($281+12)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296=HEAP8[($295)];
   $38=$296;
   var $297=$38;
   var $298=(($297)&(255));
   $39=$298;
   label = 52; break;
  case 52: 
   var $299=$39;
   $36=$299;
   $37=-1;
   var $300=$36;
   var $301=$37;
   var $302=(($300)|(0))==(($301)|(0));
   if ($302) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $304=(($274)|0);
   HEAP32[(($304)>>2)]=0;
   label = 54; break;
  case 54: 
   var $305=(($274)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=(($306)|(0))==0;
   var $308=(($307)&(1));
   var $309=$43;
   $35=$309;
   var $310=$35;
   var $311=(($310)|0);
   var $312=HEAP32[(($311)>>2)];
   var $313=(($312)|(0))!=0;
   if ($313) { label = 55; break; } else { label = 61; break; }
  case 55: 
   var $315=(($310)|0);
   var $316=HEAP32[(($315)>>2)];
   $34=$316;
   var $317=$34;
   var $318=(($317+12)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=(($317+16)|0);
   var $321=HEAP32[(($320)>>2)];
   var $322=(($319)|(0))==(($321)|(0));
   if ($322) { label = 56; break; } else { label = 58; break; }
  case 56: 
   var $324=$317;
   var $325=HEAP32[(($324)>>2)];
   var $326=(($325+36)|0);
   var $327=HEAP32[(($326)>>2)];
   var $328 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$327]($317) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { label = 34; break; }
  case 57: 
   $33=$328;
   label = 59; break;
  case 58: 
   var $330=(($317+12)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332=HEAP8[($331)];
   $32=$332;
   var $333=$32;
   var $334=(($333)&(255));
   $33=$334;
   label = 59; break;
  case 59: 
   var $335=$33;
   $30=$335;
   $31=-1;
   var $336=$30;
   var $337=$31;
   var $338=(($336)|(0))==(($337)|(0));
   if ($338) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $340=(($310)|0);
   HEAP32[(($340)>>2)]=0;
   label = 61; break;
  case 61: 
   var $341=(($310)|0);
   var $342=HEAP32[(($341)>>2)];
   var $343=(($342)|(0))==0;
   var $344=(($343)&(1));
   var $345=(($308)|(0))==(($344)|(0));
   label = 62; break;
  case 62: 
   if ($345) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $348=$57;
   var $349=HEAP32[(($348)>>2)];
   var $350=$349 | 2;
   HEAP32[(($348)>>2)]=$350;
   label = 64; break;
  case 64: 
   var $352=$agg_result;
   var $353=$__b;
   assert(4 % 1 === 0);HEAP32[(($352)>>2)]=HEAP32[(($353)>>2)];
   $62=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 65: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 66; break;
  case 66: 
   var $356=$60;
   var $357=$61;
   var $358$0=$356;
   var $358$1=0;
   var $359$0=$358$0;
   var $359$1=$357;
   ___resumeException($359$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16__clocEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(20432)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $4=_newlocale(1, ((2992)|0), 0);
   HEAP32[((9744)>>2)]=$4;
   HEAP8[(20432)]=1;
   label = 3; break;
  case 3: 
   var $6=HEAP32[((9744)>>2)];
   return $6;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNSt3__110__sscanf_lEPKcPvS1_z($__s, $__l, $__format, varrp) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i1;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25=__stackBase__;
   var $26=(__stackBase__)+(8);
   var $27;
   var $28;
   var $29=(__stackBase__)+(16);
   var $30=(__stackBase__)+(24);
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $__va=(__stackBase__)+(32);
   var $__current=(__stackBase__)+(48);
   var $44=(__stackBase__)+(56);
   var $__res;
   var $45;
   var $46;
   var $47;
   $41=$__s;
   $42=$__l;
   $43=$__format;
   var $48=(($__va)|0);
   var $49=$48;
   HEAP32[(($49)>>2)]=varrp;HEAP32[((($49)+(4))>>2)]=0;
   var $50=$42;
   var $51=_uselocale($50);
   HEAP32[(($44)>>2)]=284;
   $38=$__current;
   $39=$51;
   $40=$44;
   var $52=$38;
   var $53=$39;
   var $54=$40;
   $35=$52;
   $36=$53;
   $37=$54;
   var $55=$35;
   var $56=(($55)|0);
   var $57=$36;
   var $58=$37;
   $34=$58;
   var $59=$34;
   var $60=HEAP32[(($59)>>2)];
   $31=$56;
   $32=$57;
   $33=$60;
   var $61=$31;
   var $62=$32;
   var $63=$33;
   $28=$61;
   HEAP32[(($29)>>2)]=$62;
   HEAP32[(($30)>>2)]=$63;
   var $64=$28;
   var $65=$64;
   $27=$29;
   var $66=$27;
   var $67=HEAP32[(($66)>>2)];
   $21=$30;
   var $68=$21;
   var $69=HEAP32[(($68)>>2)];
   $24=$65;
   HEAP32[(($25)>>2)]=$67;
   HEAP32[(($26)>>2)]=$69;
   var $70=$24;
   var $71=(($70)|0);
   $23=$25;
   var $72=$23;
   var $73=HEAP32[(($72)>>2)];
   HEAP32[(($71)>>2)]=$73;
   var $74=(($70+4)|0);
   $22=$26;
   var $75=$22;
   var $76=HEAP32[(($75)>>2)];
   HEAP32[(($74)>>2)]=$76;
   var $77=$41;
   var $78=$43;
   var $79=(($__va)|0);
   var $80 = (function() { try { __THREW__ = 0; return _vsscanf($77, $78, $79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 7; break; }
  case 2: 
   $__res=$80;
   var $82=(($__va)|0);
   var $83=$82;
   var $84=$__res;
   $47=1;
   $10=$__current;
   var $85=$10;
   $9=$85;
   var $86=$9;
   $7=$86;
   $8=0;
   var $87=$7;
   var $88=(($87)|0);
   $6=$88;
   var $89=$6;
   var $90=$89;
   $5=$90;
   var $91=$5;
   var $92=(($91)|0);
   var $93=HEAP32[(($92)>>2)];
   $__tmp_i_i_i1=$93;
   var $94=$8;
   var $95=(($87)|0);
   $4=$95;
   var $96=$4;
   var $97=$96;
   $3=$97;
   var $98=$3;
   var $99=(($98)|0);
   HEAP32[(($99)>>2)]=$94;
   var $100=$__tmp_i_i_i1;
   var $101=(($100)|(0))!=0;
   if ($101) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $103=(($87)|0);
   $2=$103;
   var $104=$2;
   var $105=$104;
   $1=$105;
   var $106=$1;
   var $107=(($106+4)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=$__tmp_i_i_i1;
   var $110 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 6; break;
  case 5: 
   var $113$0 = ___cxa_find_matching_catch(-1, -1,0); $113$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 6: 
   STACKTOP = __stackBase__;
   return $84;
  case 7: 
   var $115$0 = ___cxa_find_matching_catch(-1, -1); $115$1 = tempRet0;
   var $116=$115$0;
   $45=$116;
   var $117=$115$1;
   $46=$117;
   $20=$__current;
   var $118=$20;
   $19=$118;
   var $119=$19;
   $17=$119;
   $18=0;
   var $120=$17;
   var $121=(($120)|0);
   $16=$121;
   var $122=$16;
   var $123=$122;
   $15=$123;
   var $124=$15;
   var $125=(($124)|0);
   var $126=HEAP32[(($125)>>2)];
   $__tmp_i_i_i=$126;
   var $127=$18;
   var $128=(($120)|0);
   $14=$128;
   var $129=$14;
   var $130=$129;
   $13=$130;
   var $131=$13;
   var $132=(($131)|0);
   HEAP32[(($132)>>2)]=$127;
   var $133=$__tmp_i_i_i;
   var $134=(($133)|(0))!=0;
   if ($134) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $136=(($120)|0);
   $12=$136;
   var $137=$12;
   var $138=$137;
   $11=$138;
   var $139=$11;
   var $140=(($139+4)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=$__tmp_i_i_i;
   var $143 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$141]($142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
  case 9: 
   label = 11; break;
  case 10: 
   var $146$0 = ___cxa_find_matching_catch(-1, -1,0); $146$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 11: 
   label = 12; break;
  case 12: 
   var $148=$45;
   var $149=$46;
   var $150$0=$148;
   var $150$1=0;
   var $151$0=$150$0;
   var $151$1=$149;
   ___resumeException($151$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $__lv=__stackBase__;
   var $10=(__stackBase__)+(8);
   var $11=(__stackBase__)+(16);
   var $12=(__stackBase__)+(24);
   var $__ct;
   var $13=(__stackBase__)+(32);
   var $14;
   var $15;
   var $__np;
   var $16=(__stackBase__)+(40);
   var $__names=(__stackBase__)+(48);
   var $17;
   var $__i;
   var $18=(__stackBase__)+(72);
   var $19;
   $6=$this;
   $7=$__iob;
   $8=$__err;
   $9=$__v;
   var $20=$6;
   var $21=$7;
   $5=$21;
   var $22=$5;
   var $23=(($22+4)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$24 & 1;
   var $26=(($25)|(0))==0;
   if ($26) { label = 2; break; } else { label = 7; break; }
  case 2: 
   HEAP32[(($__lv)>>2)]=-1;
   var $28=$20;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$11;
   var $33=$__b;
   assert(4 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];
   var $34=$12;
   var $35=$__e;
   assert(4 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];
   var $36=$7;
   var $37=$8;
   FUNCTION_TABLE[$31]($10, $20, $11, $12, $36, $37, $__lv);
   var $38=$__b;
   var $39=$10;
   assert(4 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];
   var $40=HEAP32[(($__lv)>>2)];
   if ((($40)|(0))==0) {
    label = 3; break;
   }
   else if ((($40)|(0))==1) {
    label = 4; break;
   }
   else {
   label = 5; break;
   }
  case 3: 
   var $42=$9;
   HEAP8[($42)]=0;
   label = 6; break;
  case 4: 
   var $44=$9;
   HEAP8[($44)]=1;
   label = 6; break;
  case 5: 
   var $46=$9;
   HEAP8[($46)]=1;
   var $47=$8;
   HEAP32[(($47)>>2)]=4;
   label = 6; break;
  case 6: 
   var $49=$agg_result;
   var $50=$__b;
   assert(4 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];
   label = 27; break;
  case 7: 
   var $52=$7;
   __ZNKSt3__18ios_base6getlocEv($13, $52);
   $4=$13;
   var $53=$4;
   var $54 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($53, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 17; break; }
  case 8: 
   var $55=$54;
   label = 9; break;
  case 9: 
   __ZNSt3__16localeD2Ev($13);
   $__ct=$55;
   var $57=$7;
   __ZNKSt3__18ios_base6getlocEv($16, $57);
   $3=$16;
   var $58=$3;
   var $59 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($58, 19424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 18; break; }
  case 10: 
   var $60=$59;
   label = 11; break;
  case 11: 
   __ZNSt3__16localeD2Ev($16);
   $__np=$60;
   var $62=(($__names)|0);
   $17=$62;
   var $63=$__np;
   $2=$63;
   var $64=$2;
   var $65=$64;
   var $66=HEAP32[(($65)>>2)];
   var $67=(($66+24)|0);
   var $68=HEAP32[(($67)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$68]($62, $64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 19; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $70=(($62+12)|0);
   $17=$70;
   var $71=$__np;
   $1=$71;
   var $72=$1;
   var $73=$72;
   var $74=HEAP32[(($73)>>2)];
   var $75=(($74+28)|0);
   var $76=HEAP32[(($75)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$76]($70, $72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 19; break; }
  case 14: 
   label = 15; break;
  case 15: 
   var $78=$18;
   var $79=$__e;
   assert(4 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];
   var $80=(($__names)|0);
   var $81=(($__names)|0);
   var $82=(($81+24)|0);
   var $83=$__ct;
   var $84=$8;
   var $85 = (function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $18, $80, $82, $83, $84, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 22; break; }
  case 16: 
   $__i=$85;
   var $87=$__i;
   var $88=(($__names)|0);
   var $89=(($87)|(0))==(($88)|(0));
   var $90=$9;
   var $91=(($89)&(1));
   HEAP8[($90)]=$91;
   var $92=$agg_result;
   var $93=$__b;
   assert(4 % 1 === 0);HEAP32[(($92)>>2)]=HEAP32[(($93)>>2)];
   $19=1;
   var $94=(($__names)|0);
   var $95=(($94+24)|0);
   var $122 = $95;label = 23; break;
  case 17: 
   var $97$0 = ___cxa_find_matching_catch(-1, -1); $97$1 = tempRet0;
   var $98=$97$0;
   $14=$98;
   var $99=$97$1;
   $15=$99;
   __ZNSt3__16localeD2Ev($13);
   label = 28; break;
  case 18: 
   var $101$0 = ___cxa_find_matching_catch(-1, -1); $101$1 = tempRet0;
   var $102=$101$0;
   $14=$102;
   var $103=$101$1;
   $15=$103;
   __ZNSt3__16localeD2Ev($16);
   label = 28; break;
  case 19: 
   var $105$0 = ___cxa_find_matching_catch(-1, -1); $105$1 = tempRet0;
   var $106=$105$0;
   $14=$106;
   var $107=$105$1;
   $15=$107;
   var $108=$17;
   var $109=(($62)|(0))==(($108)|(0));
   if ($109) { label = 21; break; } else { var $111 = $108;label = 20; break; }
  case 20: 
   var $111;
   var $112=((($111)-(12))|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($112);
   var $113=(($112)|(0))==(($62)|(0));
   if ($113) { label = 21; break; } else { var $111 = $112;label = 20; break; }
  case 21: 
   label = 28; break;
  case 22: 
   var $116$0 = ___cxa_find_matching_catch(-1, -1); $116$1 = tempRet0;
   var $117=$116$0;
   $14=$117;
   var $118=$116$1;
   $15=$118;
   var $119=(($__names)|0);
   var $120=(($119+24)|0);
   var $127 = $120;label = 25; break;
  case 23: 
   var $122;
   var $123=((($122)-(12))|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($123);
   var $124=(($123)|(0))==(($94)|(0));
   if ($124) { label = 24; break; } else { var $122 = $123;label = 23; break; }
  case 24: 
   label = 27; break;
  case 25: 
   var $127;
   var $128=((($127)-(12))|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($128);
   var $129=(($128)|(0))==(($119)|(0));
   if ($129) { label = 26; break; } else { var $127 = $128;label = 25; break; }
  case 26: 
   label = 28; break;
  case 27: 
   STACKTOP = __stackBase__;
   return;
  case 28: 
   var $133=$14;
   var $134=$15;
   var $135$0=$133;
   var $135$1=0;
   var $136$0=$135$0;
   var $136$1=$134;
   ___resumeException($136$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 168)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $__tmp_i;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $__tmp_i_i_i3;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111=__stackBase__;
   var $112=(__stackBase__)+(8);
   var $113;
   var $114;
   var $115=(__stackBase__)+(16);
   var $116=(__stackBase__)+(24);
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $122;
   var $123;
   var $124;
   var $125;
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $__tmp_i_i_i;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139=(__stackBase__)+(32);
   var $140;
   var $141;
   var $142=(__stackBase__)+(40);
   var $143;
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $__nkw;
   var $__doesnt_match;
   var $__might_match;
   var $__does_match;
   var $__statbuf=(__stackBase__)+(48);
   var $__status;
   var $__stat_hold=(__stackBase__)+(152);
   var $149=(__stackBase__)+(160);
   var $150;
   var $151;
   var $__n_might_match;
   var $__n_does_match;
   var $__st;
   var $__ky;
   var $__indx;
   var $__c;
   var $__consume;
   var $__ky1;
   var $__kc;
   var $__ky2;
   var $152;
   $143=$__b;
   $144=$__kb;
   $145=$__ke;
   $146=$__ct;
   $147=$__err;
   var $153=(($__case_sensitive)&(1));
   $148=$153;
   var $154=$144;
   var $155=$145;
   $140=$154;
   $141=$155;
   var $156=$140;
   var $157=$141;
   var $tmp_i=$139;
   var $tmp1_i=$142;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $137=$156;
   $138=$157;
   var $158=$138;
   var $159=$137;
   var $160=$158;
   var $161=$159;
   var $162=((($160)-($161))|0);
   var $163=((((($162)|(0)))/(12))&-1);
   $__nkw=$163;
   $__doesnt_match=0;
   $__might_match=1;
   $__does_match=2;
   var $164=(($__statbuf)|0);
   $__status=$164;
   HEAP32[(($149)>>2)]=272;
   $124=$__stat_hold;
   $125=0;
   $126=$149;
   var $165=$124;
   var $166=$125;
   var $167=$126;
   $121=$165;
   $122=$166;
   $123=$167;
   var $168=$121;
   var $169=(($168)|0);
   var $170=$122;
   var $171=$123;
   $120=$171;
   var $172=$120;
   var $173=HEAP32[(($172)>>2)];
   $117=$169;
   $118=$170;
   $119=$173;
   var $174=$117;
   var $175=$118;
   var $176=$119;
   $114=$174;
   HEAP32[(($115)>>2)]=$175;
   HEAP32[(($116)>>2)]=$176;
   var $177=$114;
   var $178=$177;
   $113=$115;
   var $179=$113;
   var $180=HEAP32[(($179)>>2)];
   $107=$116;
   var $181=$107;
   var $182=HEAP32[(($181)>>2)];
   $110=$178;
   HEAP32[(($111)>>2)]=$180;
   HEAP32[(($112)>>2)]=$182;
   var $183=$110;
   var $184=(($183)|0);
   $109=$111;
   var $185=$109;
   var $186=HEAP32[(($185)>>2)];
   HEAP32[(($184)>>2)]=$186;
   var $187=(($183+4)|0);
   $108=$112;
   var $188=$108;
   var $189=HEAP32[(($188)>>2)];
   HEAP32[(($187)>>2)]=$189;
   var $190=$__nkw;
   var $191=(($190)>>>(0)) > 100;
   if ($191) { label = 2; break; } else { label = 15; break; }
  case 2: 
   var $193=$__nkw;
   var $194=_malloc($193);
   $__status=$194;
   var $195=$__status;
   var $196=(($195)|(0))==0;
   if ($196) { label = 3; break; } else { label = 10; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 10; break;
  case 5: 
   var $200$0 = ___cxa_find_matching_catch(-1, -1); $200$1 = tempRet0;
   var $201=$200$0;
   $150=$201;
   var $202=$200$1;
   $151=$202;
   $106=$__stat_hold;
   var $203=$106;
   $105=$203;
   var $204=$105;
   $103=$204;
   $104=0;
   var $205=$103;
   var $206=(($205)|0);
   $102=$206;
   var $207=$102;
   var $208=$207;
   $101=$208;
   var $209=$101;
   var $210=(($209)|0);
   var $211=HEAP32[(($210)>>2)];
   $__tmp_i_i_i3=$211;
   var $212=$104;
   var $213=(($205)|0);
   $100=$213;
   var $214=$100;
   var $215=$214;
   $99=$215;
   var $216=$99;
   var $217=(($216)|0);
   HEAP32[(($217)>>2)]=$212;
   var $218=$__tmp_i_i_i3;
   var $219=(($218)|(0))!=0;
   if ($219) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $221=(($205)|0);
   $98=$221;
   var $222=$98;
   var $223=$222;
   $97=$223;
   var $224=$97;
   var $225=(($224+4)|0);
   var $226=HEAP32[(($225)>>2)];
   var $227=$__tmp_i_i_i3;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$226]($227) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 9; break;
  case 8: 
   var $230$0 = ___cxa_find_matching_catch(-1, -1,0); $230$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 9: 
   label = 126; break;
  case 10: 
   var $232=$__status;
   $95=$__stat_hold;
   $96=$232;
   var $233=$95;
   var $234=(($233)|0);
   $94=$234;
   var $235=$94;
   var $236=$235;
   $93=$236;
   var $237=$93;
   var $238=(($237)|0);
   var $239=HEAP32[(($238)>>2)];
   $__tmp_i=$239;
   var $240=$96;
   var $241=(($233)|0);
   $92=$241;
   var $242=$92;
   var $243=$242;
   $91=$243;
   var $244=$91;
   var $245=(($244)|0);
   HEAP32[(($245)>>2)]=$240;
   var $246=$__tmp_i;
   var $247=(($246)|(0))!=0;
   if ($247) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $249=(($233)|0);
   $90=$249;
   var $250=$90;
   var $251=$250;
   $89=$251;
   var $252=$89;
   var $253=(($252+4)|0);
   var $254=HEAP32[(($253)>>2)];
   var $255=$__tmp_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$254]($255) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 13; break; }
  case 12: 
   label = 14; break;
  case 13: 
   var $258$0 = ___cxa_find_matching_catch(-1, -1,0); $258$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 14: 
   label = 15; break;
  case 15: 
   var $260=$__nkw;
   $__n_might_match=$260;
   $__n_does_match=0;
   var $261=$__status;
   $__st=$261;
   var $262=$144;
   $__ky=$262;
   label = 16; break;
  case 16: 
   var $264=$__ky;
   var $265=$145;
   var $266=(($264)|(0))!=(($265)|(0));
   if ($266) { label = 17; break; } else { label = 25; break; }
  case 17: 
   var $268=$__ky;
   $88=$268;
   var $269=$88;
   $87=$269;
   var $270=$87;
   $86=$270;
   var $271=$86;
   var $272=(($271)|0);
   $85=$272;
   var $273=$85;
   var $274=$273;
   $84=$274;
   var $275=$84;
   var $276=(($275)|0);
   var $277=(($276)|0);
   var $278=$277;
   var $279=(($278)|0);
   var $280=$279;
   var $281=HEAP8[($280)];
   var $282=(($281)&(255));
   var $283=$282 & 1;
   var $284=(($283)|(0))!=0;
   if ($284) { label = 18; break; } else { label = 19; break; }
  case 18: 
   $80=$270;
   var $286=$80;
   var $287=(($286)|0);
   $79=$287;
   var $288=$79;
   var $289=$288;
   $78=$289;
   var $290=$78;
   var $291=(($290)|0);
   var $292=(($291)|0);
   var $293=$292;
   var $294=(($293+4)|0);
   var $295=HEAP32[(($294)>>2)];
   var $310 = $295;label = 20; break;
  case 19: 
   $83=$270;
   var $297=$83;
   var $298=(($297)|0);
   $82=$298;
   var $299=$82;
   var $300=$299;
   $81=$300;
   var $301=$81;
   var $302=(($301)|0);
   var $303=(($302)|0);
   var $304=$303;
   var $305=(($304)|0);
   var $306=$305;
   var $307=HEAP8[($306)];
   var $308=(($307)&(255));
   var $309=$308 >> 1;
   var $310 = $309;label = 20; break;
  case 20: 
   var $310;
   var $311=(($310)|(0))==0;
   if ($311) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $313=$__st;
   HEAP8[($313)]=1;
   label = 23; break;
  case 22: 
   var $315=$__st;
   HEAP8[($315)]=2;
   var $316=$__n_might_match;
   var $317=((($316)-(1))|0);
   $__n_might_match=$317;
   var $318=$__n_does_match;
   var $319=((($318)+(1))|0);
   $__n_does_match=$319;
   label = 23; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $322=$__ky;
   var $323=(($322+12)|0);
   $__ky=$323;
   var $324=$__st;
   var $325=(($324+1)|0);
   $__st=$325;
   label = 16; break;
  case 25: 
   $__indx=0;
   label = 26; break;
  case 26: 
   var $328=$143;
   $76=$328;
   $77=$__e;
   var $329=$76;
   var $330=$77;
   $74=$329;
   $75=$330;
   var $331=$74;
   $73=$331;
   var $332=$73;
   var $333=(($332)|0);
   var $334=HEAP32[(($333)>>2)];
   var $335=(($334)|(0))!=0;
   if ($335) { label = 27; break; } else { label = 33; break; }
  case 27: 
   var $337=(($332)|0);
   var $338=HEAP32[(($337)>>2)];
   $72=$338;
   var $339=$72;
   var $340=(($339+12)|0);
   var $341=HEAP32[(($340)>>2)];
   var $342=(($339+16)|0);
   var $343=HEAP32[(($342)>>2)];
   var $344=(($341)|(0))==(($343)|(0));
   if ($344) { label = 28; break; } else { label = 30; break; }
  case 28: 
   var $346=$339;
   var $347=HEAP32[(($346)>>2)];
   var $348=(($347+36)|0);
   var $349=HEAP32[(($348)>>2)];
   var $350 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$349]($339) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 5; break; }
  case 29: 
   $71=$350;
   label = 31; break;
  case 30: 
   var $352=(($339+12)|0);
   var $353=HEAP32[(($352)>>2)];
   var $354=HEAP32[(($353)>>2)];
   $70=$354;
   var $355=$70;
   $71=$355;
   label = 31; break;
  case 31: 
   var $356=$71;
   $68=$356;
   $69=-1;
   var $357=$68;
   var $358=$69;
   var $359=(($357)|(0))==(($358)|(0));
   if ($359) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $361=(($332)|0);
   HEAP32[(($361)>>2)]=0;
   label = 33; break;
  case 33: 
   var $362=(($332)|0);
   var $363=HEAP32[(($362)>>2)];
   var $364=(($363)|(0))==0;
   var $365=(($364)&(1));
   var $366=$75;
   $67=$366;
   var $367=$67;
   var $368=(($367)|0);
   var $369=HEAP32[(($368)>>2)];
   var $370=(($369)|(0))!=0;
   if ($370) { label = 34; break; } else { label = 40; break; }
  case 34: 
   var $372=(($367)|0);
   var $373=HEAP32[(($372)>>2)];
   $66=$373;
   var $374=$66;
   var $375=(($374+12)|0);
   var $376=HEAP32[(($375)>>2)];
   var $377=(($374+16)|0);
   var $378=HEAP32[(($377)>>2)];
   var $379=(($376)|(0))==(($378)|(0));
   if ($379) { label = 35; break; } else { label = 37; break; }
  case 35: 
   var $381=$374;
   var $382=HEAP32[(($381)>>2)];
   var $383=(($382+36)|0);
   var $384=HEAP32[(($383)>>2)];
   var $385 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$384]($374) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 5; break; }
  case 36: 
   $65=$385;
   label = 38; break;
  case 37: 
   var $387=(($374+12)|0);
   var $388=HEAP32[(($387)>>2)];
   var $389=HEAP32[(($388)>>2)];
   $64=$389;
   var $390=$64;
   $65=$390;
   label = 38; break;
  case 38: 
   var $391=$65;
   $62=$391;
   $63=-1;
   var $392=$62;
   var $393=$63;
   var $394=(($392)|(0))==(($393)|(0));
   if ($394) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $396=(($367)|0);
   HEAP32[(($396)>>2)]=0;
   label = 40; break;
  case 40: 
   var $397=(($367)|0);
   var $398=HEAP32[(($397)>>2)];
   var $399=(($398)|(0))==0;
   var $400=(($399)&(1));
   var $401=(($365)|(0))==(($400)|(0));
   var $402=$401 ^ 1;
   label = 41; break;
  case 41: 
   if ($402) { label = 42; break; } else { var $408 = 0;label = 43; break; }
  case 42: 
   var $405=$__n_might_match;
   var $406=(($405)>>>(0)) > 0;
   var $408 = $406;label = 43; break;
  case 43: 
   var $408;
   if ($408) { label = 44; break; } else { label = 96; break; }
  case 44: 
   var $410=$143;
   $61=$410;
   var $411=$61;
   var $412=(($411)|0);
   var $413=HEAP32[(($412)>>2)];
   $60=$413;
   var $414=$60;
   var $415=(($414+12)|0);
   var $416=HEAP32[(($415)>>2)];
   var $417=(($414+16)|0);
   var $418=HEAP32[(($417)>>2)];
   var $419=(($416)|(0))==(($418)|(0));
   if ($419) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $421=$414;
   var $422=HEAP32[(($421)>>2)];
   var $423=(($422+36)|0);
   var $424=HEAP32[(($423)>>2)];
   var $425 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$424]($414) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 5; break; }
  case 46: 
   $59=$425;
   label = 48; break;
  case 47: 
   var $427=(($414+12)|0);
   var $428=HEAP32[(($427)>>2)];
   var $429=HEAP32[(($428)>>2)];
   $58=$429;
   var $430=$58;
   $59=$430;
   label = 48; break;
  case 48: 
   var $431=$59;
   label = 49; break;
  case 49: 
   $__c=$431;
   var $433=$148;
   var $434=(($433) & 1);
   if ($434) { label = 53; break; } else { label = 50; break; }
  case 50: 
   var $436=$146;
   var $437=$__c;
   $56=$436;
   $57=$437;
   var $438=$56;
   var $439=$438;
   var $440=HEAP32[(($439)>>2)];
   var $441=(($440+28)|0);
   var $442=HEAP32[(($441)>>2)];
   var $443=$57;
   var $444 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$442]($438, $443) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 51; break; } else { label = 5; break; }
  case 51: 
   label = 52; break;
  case 52: 
   $__c=$444;
   label = 53; break;
  case 53: 
   $__consume=0;
   var $447=$__status;
   $__st=$447;
   var $448=$144;
   $__ky1=$448;
   label = 54; break;
  case 54: 
   var $450=$__ky1;
   var $451=$145;
   var $452=(($450)|(0))!=(($451)|(0));
   if ($452) { label = 55; break; } else { label = 75; break; }
  case 55: 
   var $454=$__st;
   var $455=HEAP8[($454)];
   var $456=(($455)&(255));
   var $457=(($456)|(0))==1;
   if ($457) { label = 56; break; } else { label = 73; break; }
  case 56: 
   var $459=$__ky1;
   var $460=$__indx;
   $54=$459;
   $55=$460;
   var $461=$54;
   $53=$461;
   var $462=$53;
   $52=$462;
   var $463=$52;
   $51=$463;
   var $464=$51;
   var $465=(($464)|0);
   $50=$465;
   var $466=$50;
   var $467=$466;
   $49=$467;
   var $468=$49;
   var $469=(($468)|0);
   var $470=(($469)|0);
   var $471=$470;
   var $472=(($471)|0);
   var $473=$472;
   var $474=HEAP8[($473)];
   var $475=(($474)&(255));
   var $476=$475 & 1;
   var $477=(($476)|(0))!=0;
   if ($477) { label = 57; break; } else { label = 58; break; }
  case 57: 
   $45=$463;
   var $479=$45;
   var $480=(($479)|0);
   $44=$480;
   var $481=$44;
   var $482=$481;
   $43=$482;
   var $483=$43;
   var $484=(($483)|0);
   var $485=(($484)|0);
   var $486=$485;
   var $487=(($486+8)|0);
   var $488=HEAP32[(($487)>>2)];
   var $500 = $488;label = 59; break;
  case 58: 
   $48=$463;
   var $490=$48;
   var $491=(($490)|0);
   $47=$491;
   var $492=$47;
   var $493=$492;
   $46=$493;
   var $494=$46;
   var $495=(($494)|0);
   var $496=(($495)|0);
   var $497=$496;
   var $498=(($497+4)|0);
   var $499=(($498)|0);
   var $500 = $499;label = 59; break;
  case 59: 
   var $500;
   var $501=$55;
   var $502=(($500+($501<<2))|0);
   label = 60; break;
  case 60: 
   var $504=HEAP32[(($502)>>2)];
   $__kc=$504;
   var $505=$148;
   var $506=(($505) & 1);
   if ($506) { label = 64; break; } else { label = 61; break; }
  case 61: 
   var $508=$146;
   var $509=$__kc;
   $41=$508;
   $42=$509;
   var $510=$41;
   var $511=$510;
   var $512=HEAP32[(($511)>>2)];
   var $513=(($512+28)|0);
   var $514=HEAP32[(($513)>>2)];
   var $515=$42;
   var $516 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$514]($510, $515) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 62; break; } else { label = 5; break; }
  case 62: 
   label = 63; break;
  case 63: 
   $__kc=$516;
   label = 64; break;
  case 64: 
   var $519=$__c;
   var $520=$__kc;
   var $521=(($519)|(0))==(($520)|(0));
   if ($521) { label = 65; break; } else { label = 71; break; }
  case 65: 
   $__consume=1;
   var $523=$__ky1;
   $40=$523;
   var $524=$40;
   $39=$524;
   var $525=$39;
   var $526=(($525)|0);
   $38=$526;
   var $527=$38;
   var $528=$527;
   $37=$528;
   var $529=$37;
   var $530=(($529)|0);
   var $531=(($530)|0);
   var $532=$531;
   var $533=(($532)|0);
   var $534=$533;
   var $535=HEAP8[($534)];
   var $536=(($535)&(255));
   var $537=$536 & 1;
   var $538=(($537)|(0))!=0;
   if ($538) { label = 66; break; } else { label = 67; break; }
  case 66: 
   $33=$524;
   var $540=$33;
   var $541=(($540)|0);
   $32=$541;
   var $542=$32;
   var $543=$542;
   $31=$543;
   var $544=$31;
   var $545=(($544)|0);
   var $546=(($545)|0);
   var $547=$546;
   var $548=(($547+4)|0);
   var $549=HEAP32[(($548)>>2)];
   var $564 = $549;label = 68; break;
  case 67: 
   $36=$524;
   var $551=$36;
   var $552=(($551)|0);
   $35=$552;
   var $553=$35;
   var $554=$553;
   $34=$554;
   var $555=$34;
   var $556=(($555)|0);
   var $557=(($556)|0);
   var $558=$557;
   var $559=(($558)|0);
   var $560=$559;
   var $561=HEAP8[($560)];
   var $562=(($561)&(255));
   var $563=$562 >> 1;
   var $564 = $563;label = 68; break;
  case 68: 
   var $564;
   var $565=$__indx;
   var $566=((($565)+(1))|0);
   var $567=(($564)|(0))==(($566)|(0));
   if ($567) { label = 69; break; } else { label = 70; break; }
  case 69: 
   var $569=$__st;
   HEAP8[($569)]=2;
   var $570=$__n_might_match;
   var $571=((($570)-(1))|0);
   $__n_might_match=$571;
   var $572=$__n_does_match;
   var $573=((($572)+(1))|0);
   $__n_does_match=$573;
   label = 70; break;
  case 70: 
   label = 72; break;
  case 71: 
   var $576=$__st;
   HEAP8[($576)]=0;
   var $577=$__n_might_match;
   var $578=((($577)-(1))|0);
   $__n_might_match=$578;
   label = 72; break;
  case 72: 
   label = 73; break;
  case 73: 
   label = 74; break;
  case 74: 
   var $582=$__ky1;
   var $583=(($582+12)|0);
   $__ky1=$583;
   var $584=$__st;
   var $585=(($584+1)|0);
   $__st=$585;
   label = 54; break;
  case 75: 
   var $587=$__consume;
   var $588=(($587) & 1);
   if ($588) { label = 76; break; } else { label = 94; break; }
  case 76: 
   var $590=$143;
   $30=$590;
   var $591=$30;
   var $592=(($591)|0);
   var $593=HEAP32[(($592)>>2)];
   $29=$593;
   var $594=$29;
   var $595=(($594+12)|0);
   var $596=HEAP32[(($595)>>2)];
   var $597=(($594+16)|0);
   var $598=HEAP32[(($597)>>2)];
   var $599=(($596)|(0))==(($598)|(0));
   if ($599) { label = 77; break; } else { label = 79; break; }
  case 77: 
   var $601=$594;
   var $602=HEAP32[(($601)>>2)];
   var $603=(($602+40)|0);
   var $604=HEAP32[(($603)>>2)];
   var $605 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$604]($594) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 78; break; } else { label = 5; break; }
  case 78: 
   $28=$605;
   label = 80; break;
  case 79: 
   var $607=(($594+12)|0);
   var $608=HEAP32[(($607)>>2)];
   var $609=(($608+4)|0);
   HEAP32[(($607)>>2)]=$609;
   var $610=HEAP32[(($608)>>2)];
   $27=$610;
   var $611=$27;
   $28=$611;
   label = 80; break;
  case 80: 
   var $612=$28;
   label = 81; break;
  case 81: 
   var $614=$__n_might_match;
   var $615=$__n_does_match;
   var $616=((($614)+($615))|0);
   var $617=(($616)>>>(0)) > 1;
   if ($617) { label = 82; break; } else { label = 93; break; }
  case 82: 
   var $619=$__status;
   $__st=$619;
   var $620=$144;
   $__ky2=$620;
   label = 83; break;
  case 83: 
   var $622=$__ky2;
   var $623=$145;
   var $624=(($622)|(0))!=(($623)|(0));
   if ($624) { label = 84; break; } else { label = 92; break; }
  case 84: 
   var $626=$__st;
   var $627=HEAP8[($626)];
   var $628=(($627)&(255));
   var $629=(($628)|(0))==2;
   if ($629) { label = 85; break; } else { label = 90; break; }
  case 85: 
   var $631=$__ky2;
   $26=$631;
   var $632=$26;
   $25=$632;
   var $633=$25;
   var $634=(($633)|0);
   $24=$634;
   var $635=$24;
   var $636=$635;
   $23=$636;
   var $637=$23;
   var $638=(($637)|0);
   var $639=(($638)|0);
   var $640=$639;
   var $641=(($640)|0);
   var $642=$641;
   var $643=HEAP8[($642)];
   var $644=(($643)&(255));
   var $645=$644 & 1;
   var $646=(($645)|(0))!=0;
   if ($646) { label = 86; break; } else { label = 87; break; }
  case 86: 
   $19=$632;
   var $648=$19;
   var $649=(($648)|0);
   $18=$649;
   var $650=$18;
   var $651=$650;
   $17=$651;
   var $652=$17;
   var $653=(($652)|0);
   var $654=(($653)|0);
   var $655=$654;
   var $656=(($655+4)|0);
   var $657=HEAP32[(($656)>>2)];
   var $672 = $657;label = 88; break;
  case 87: 
   $22=$632;
   var $659=$22;
   var $660=(($659)|0);
   $21=$660;
   var $661=$21;
   var $662=$661;
   $20=$662;
   var $663=$20;
   var $664=(($663)|0);
   var $665=(($664)|0);
   var $666=$665;
   var $667=(($666)|0);
   var $668=$667;
   var $669=HEAP8[($668)];
   var $670=(($669)&(255));
   var $671=$670 >> 1;
   var $672 = $671;label = 88; break;
  case 88: 
   var $672;
   var $673=$__indx;
   var $674=((($673)+(1))|0);
   var $675=(($672)|(0))!=(($674)|(0));
   if ($675) { label = 89; break; } else { label = 90; break; }
  case 89: 
   var $677=$__st;
   HEAP8[($677)]=0;
   var $678=$__n_does_match;
   var $679=((($678)-(1))|0);
   $__n_does_match=$679;
   label = 90; break;
  case 90: 
   label = 91; break;
  case 91: 
   var $682=$__ky2;
   var $683=(($682+12)|0);
   $__ky2=$683;
   var $684=$__st;
   var $685=(($684+1)|0);
   $__st=$685;
   label = 83; break;
  case 92: 
   label = 93; break;
  case 93: 
   label = 94; break;
  case 94: 
   label = 95; break;
  case 95: 
   var $690=$__indx;
   var $691=((($690)+(1))|0);
   $__indx=$691;
   label = 26; break;
  case 96: 
   var $693=$143;
   $15=$693;
   $16=$__e;
   var $694=$15;
   var $695=$16;
   $13=$694;
   $14=$695;
   var $696=$13;
   $12=$696;
   var $697=$12;
   var $698=(($697)|0);
   var $699=HEAP32[(($698)>>2)];
   var $700=(($699)|(0))!=0;
   if ($700) { label = 97; break; } else { label = 103; break; }
  case 97: 
   var $702=(($697)|0);
   var $703=HEAP32[(($702)>>2)];
   $11=$703;
   var $704=$11;
   var $705=(($704+12)|0);
   var $706=HEAP32[(($705)>>2)];
   var $707=(($704+16)|0);
   var $708=HEAP32[(($707)>>2)];
   var $709=(($706)|(0))==(($708)|(0));
   if ($709) { label = 98; break; } else { label = 100; break; }
  case 98: 
   var $711=$704;
   var $712=HEAP32[(($711)>>2)];
   var $713=(($712+36)|0);
   var $714=HEAP32[(($713)>>2)];
   var $715 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$714]($704) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 99; break; } else { label = 5; break; }
  case 99: 
   $10=$715;
   label = 101; break;
  case 100: 
   var $717=(($704+12)|0);
   var $718=HEAP32[(($717)>>2)];
   var $719=HEAP32[(($718)>>2)];
   $9=$719;
   var $720=$9;
   $10=$720;
   label = 101; break;
  case 101: 
   var $721=$10;
   $7=$721;
   $8=-1;
   var $722=$7;
   var $723=$8;
   var $724=(($722)|(0))==(($723)|(0));
   if ($724) { label = 102; break; } else { label = 103; break; }
  case 102: 
   var $726=(($697)|0);
   HEAP32[(($726)>>2)]=0;
   label = 103; break;
  case 103: 
   var $727=(($697)|0);
   var $728=HEAP32[(($727)>>2)];
   var $729=(($728)|(0))==0;
   var $730=(($729)&(1));
   var $731=$14;
   $6=$731;
   var $732=$6;
   var $733=(($732)|0);
   var $734=HEAP32[(($733)>>2)];
   var $735=(($734)|(0))!=0;
   if ($735) { label = 104; break; } else { label = 110; break; }
  case 104: 
   var $737=(($732)|0);
   var $738=HEAP32[(($737)>>2)];
   $5=$738;
   var $739=$5;
   var $740=(($739+12)|0);
   var $741=HEAP32[(($740)>>2)];
   var $742=(($739+16)|0);
   var $743=HEAP32[(($742)>>2)];
   var $744=(($741)|(0))==(($743)|(0));
   if ($744) { label = 105; break; } else { label = 107; break; }
  case 105: 
   var $746=$739;
   var $747=HEAP32[(($746)>>2)];
   var $748=(($747+36)|0);
   var $749=HEAP32[(($748)>>2)];
   var $750 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$749]($739) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 106; break; } else { label = 5; break; }
  case 106: 
   $4=$750;
   label = 108; break;
  case 107: 
   var $752=(($739+12)|0);
   var $753=HEAP32[(($752)>>2)];
   var $754=HEAP32[(($753)>>2)];
   $3=$754;
   var $755=$3;
   $4=$755;
   label = 108; break;
  case 108: 
   var $756=$4;
   $1=$756;
   $2=-1;
   var $757=$1;
   var $758=$2;
   var $759=(($757)|(0))==(($758)|(0));
   if ($759) { label = 109; break; } else { label = 110; break; }
  case 109: 
   var $761=(($732)|0);
   HEAP32[(($761)>>2)]=0;
   label = 110; break;
  case 110: 
   var $762=(($732)|0);
   var $763=HEAP32[(($762)>>2)];
   var $764=(($763)|(0))==0;
   var $765=(($764)&(1));
   var $766=(($730)|(0))==(($765)|(0));
   label = 111; break;
  case 111: 
   if ($766) { label = 112; break; } else { label = 113; break; }
  case 112: 
   var $769=$147;
   var $770=HEAP32[(($769)>>2)];
   var $771=$770 | 2;
   HEAP32[(($769)>>2)]=$771;
   label = 113; break;
  case 113: 
   var $773=$__status;
   $__st=$773;
   label = 114; break;
  case 114: 
   var $775=$144;
   var $776=$145;
   var $777=(($775)|(0))!=(($776)|(0));
   if ($777) { label = 115; break; } else { label = 119; break; }
  case 115: 
   var $779=$__st;
   var $780=HEAP8[($779)];
   var $781=(($780)&(255));
   var $782=(($781)|(0))==2;
   if ($782) { label = 116; break; } else { label = 117; break; }
  case 116: 
   label = 119; break;
  case 117: 
   label = 118; break;
  case 118: 
   var $786=$144;
   var $787=(($786+12)|0);
   $144=$787;
   var $788=$__st;
   var $789=(($788+1)|0);
   $__st=$789;
   label = 114; break;
  case 119: 
   var $791=$144;
   var $792=$145;
   var $793=(($791)|(0))==(($792)|(0));
   if ($793) { label = 120; break; } else { label = 121; break; }
  case 120: 
   var $795=$147;
   var $796=HEAP32[(($795)>>2)];
   var $797=$796 | 4;
   HEAP32[(($795)>>2)]=$797;
   label = 121; break;
  case 121: 
   var $799=$144;
   $152=1;
   $136=$__stat_hold;
   var $800=$136;
   $135=$800;
   var $801=$135;
   $133=$801;
   $134=0;
   var $802=$133;
   var $803=(($802)|0);
   $132=$803;
   var $804=$132;
   var $805=$804;
   $131=$805;
   var $806=$131;
   var $807=(($806)|0);
   var $808=HEAP32[(($807)>>2)];
   $__tmp_i_i_i=$808;
   var $809=$134;
   var $810=(($802)|0);
   $130=$810;
   var $811=$130;
   var $812=$811;
   $129=$812;
   var $813=$129;
   var $814=(($813)|0);
   HEAP32[(($814)>>2)]=$809;
   var $815=$__tmp_i_i_i;
   var $816=(($815)|(0))!=0;
   if ($816) { label = 122; break; } else { label = 125; break; }
  case 122: 
   var $818=(($802)|0);
   $128=$818;
   var $819=$128;
   var $820=$819;
   $127=$820;
   var $821=$127;
   var $822=(($821+4)|0);
   var $823=HEAP32[(($822)>>2)];
   var $824=$__tmp_i_i_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$823]($824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 123; break; } else { label = 124; break; }
  case 123: 
   label = 125; break;
  case 124: 
   var $827$0 = ___cxa_find_matching_catch(-1, -1,0); $827$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 125: 
   STACKTOP = __stackBase__;
   return $799;
  case 126: 
   var $829=$150;
   var $830=$151;
   var $831$0=$829;
   var $831$1=0;
   var $832$0=$831$0;
   var $832$1=$830;
   ___resumeException($832$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 352)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep=(__stackBase__)+(104);
   var $__grouping=(__stackBase__)+(112);
   var $__a=(__stackBase__)+(128);
   var $__a_end=(__stackBase__)+(168);
   var $__g=(__stackBase__)+(176);
   var $__g_end=(__stackBase__)+(336);
   var $__dc=(__stackBase__)+(344);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($59);
   $__base=$60;
   var $61=$52;
   var $62=(($__atoms)|0);
   __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $61, $62, $__thousands_sep);
   var $63=$__a;
   _memset($63, 0, 40);
   var $64=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$64;
   var $65=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$65;
   HEAP32[(($__dc)>>2)]=0;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $67=$49;
   var $68=$50;
   $47=$67;
   $48=$68;
   var $69=$47;
   $46=$69;
   var $70=$46;
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=0;
   if ($73) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $75=(($70)|0);
   var $76=HEAP32[(($75)>>2)];
   $45=$76;
   var $77=$45;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($79)|(0))==(($81)|(0));
   if ($82) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $84=$77;
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+36)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$88;
   label = 7; break;
  case 6: 
   var $90=(($77+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=HEAP32[(($91)>>2)];
   $43=$92;
   var $93=$43;
   $44=$93;
   label = 7; break;
  case 7: 
   var $94=$44;
   $41=$94;
   $42=-1;
   var $95=$41;
   var $96=$42;
   var $97=(($95)|(0))==(($96)|(0));
   if ($97) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $99=(($70)|0);
   HEAP32[(($99)>>2)]=0;
   label = 9; break;
  case 9: 
   var $100=(($70)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|(0))==0;
   var $103=(($102)&(1));
   var $104=$48;
   $40=$104;
   var $105=$40;
   var $106=(($105)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107)|(0))!=0;
   if ($108) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $110=(($105)|0);
   var $111=HEAP32[(($110)>>2)];
   $39=$111;
   var $112=$39;
   var $113=(($112+12)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($112+16)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($114)|(0))==(($116)|(0));
   if ($117) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $119=$112;
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120+36)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$122]($112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$123;
   label = 14; break;
  case 13: 
   var $125=(($112+12)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=HEAP32[(($126)>>2)];
   $37=$127;
   var $128=$37;
   $38=$128;
   label = 14; break;
  case 14: 
   var $129=$38;
   $35=$129;
   $36=-1;
   var $130=$35;
   var $131=$36;
   var $132=(($130)|(0))==(($131)|(0));
   if ($132) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $134=(($105)|0);
   HEAP32[(($134)>>2)]=0;
   label = 16; break;
  case 16: 
   var $135=(($105)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136)|(0))==0;
   var $138=(($137)&(1));
   var $139=(($103)|(0))==(($138)|(0));
   var $140=$139 ^ 1;
   label = 17; break;
  case 17: 
   if ($140) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $143=$34;
   var $144=(($143)|0);
   var $145=HEAP32[(($144)>>2)];
   $33=$145;
   var $146=$33;
   var $147=(($146+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($146+16)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148)|(0))==(($150)|(0));
   if ($151) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $153=$146;
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154+36)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$157;
   label = 22; break;
  case 21: 
   var $159=(($146+12)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=HEAP32[(($160)>>2)];
   $31=$161;
   var $162=$31;
   $32=$162;
   label = 22; break;
  case 22: 
   var $163=$32;
   label = 23; break;
  case 23: 
   var $165=$__base;
   var $166=(($__a)|0);
   var $167=HEAP32[(($__thousands_sep)>>2)];
   var $168=(($__g)|0);
   var $169=(($__atoms)|0);
   var $170 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($163, $165, $166, $__a_end, $__dc, $167, $__grouping, $168, $__g_end, $169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $172=(($170)|(0))!=0;
   if ($172) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $175$0 = ___cxa_find_matching_catch(-1, -1); $175$1 = tempRet0;
   var $176=$175$0;
   $55=$176;
   var $177=$175$1;
   $56=$177;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 60; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $180=$30;
   var $181=(($180)|0);
   var $182=HEAP32[(($181)>>2)];
   $29=$182;
   var $183=$29;
   var $184=(($183+12)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($183+16)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($185)|(0))==(($187)|(0));
   if ($188) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $190=$183;
   var $191=HEAP32[(($190)>>2)];
   var $192=(($191+40)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$194;
   label = 32; break;
  case 31: 
   var $196=(($183+12)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=(($197+4)|0);
   HEAP32[(($196)>>2)]=$198;
   var $199=HEAP32[(($197)>>2)];
   $27=$199;
   var $200=$27;
   $28=$200;
   label = 32; break;
  case 32: 
   var $201=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $204=$26;
   $25=$204;
   var $205=$25;
   var $206=(($205)|0);
   $24=$206;
   var $207=$24;
   var $208=$207;
   $23=$208;
   var $209=$23;
   var $210=(($209)|0);
   var $211=(($210)|0);
   var $212=$211;
   var $213=(($212)|0);
   var $214=$213;
   var $215=HEAP8[($214)];
   var $216=(($215)&(255));
   var $217=$216 & 1;
   var $218=(($217)|(0))!=0;
   if ($218) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$204;
   var $220=$19;
   var $221=(($220)|0);
   $18=$221;
   var $222=$18;
   var $223=$222;
   $17=$223;
   var $224=$17;
   var $225=(($224)|0);
   var $226=(($225)|0);
   var $227=$226;
   var $228=(($227+4)|0);
   var $229=HEAP32[(($228)>>2)];
   var $244 = $229;label = 37; break;
  case 36: 
   $22=$204;
   var $231=$22;
   var $232=(($231)|0);
   $21=$232;
   var $233=$21;
   var $234=$233;
   $20=$234;
   var $235=$20;
   var $236=(($235)|0);
   var $237=(($236)|0);
   var $238=$237;
   var $239=(($238)|0);
   var $240=$239;
   var $241=HEAP8[($240)];
   var $242=(($241)&(255));
   var $243=$242 >> 1;
   var $244 = $243;label = 37; break;
  case 37: 
   var $244;
   var $245=(($244)|(0))!=0;
   if ($245) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $247=HEAP32[(($__g_end)>>2)];
   var $248=(($__g)|0);
   var $249=$247;
   var $250=$248;
   var $251=((($249)-($250))|0);
   var $252=((((($251)|(0)))/(4))&-1);
   var $253=(($252)|(0)) < 40;
   if ($253) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $255=HEAP32[(($__dc)>>2)];
   var $256=HEAP32[(($__g_end)>>2)];
   var $257=(($256+4)|0);
   HEAP32[(($__g_end)>>2)]=$257;
   HEAP32[(($256)>>2)]=$255;
   label = 40; break;
  case 40: 
   var $259=(($__a)|0);
   var $260=HEAP32[(($__a_end)>>2)];
   var $261=$53;
   var $262=$__base;
   var $263 = (function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($259, $260, $261, $262) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 26; break; }
  case 41: 
   var $265=$54;
   HEAP32[(($265)>>2)]=$263;
   var $266=(($__g)|0);
   var $267=HEAP32[(($__g_end)>>2)];
   var $268=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $266, $267, $268) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   $15=$__b;
   $16=$__e;
   var $270=$15;
   var $271=$16;
   $13=$270;
   $14=$271;
   var $272=$13;
   $12=$272;
   var $273=$12;
   var $274=(($273)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=(($275)|(0))!=0;
   if ($276) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $278=(($273)|0);
   var $279=HEAP32[(($278)>>2)];
   $11=$279;
   var $280=$11;
   var $281=(($280+12)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=(($280+16)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($282)|(0))==(($284)|(0));
   if ($285) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $287=$280;
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288+36)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$290]($280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 26; break; }
  case 45: 
   $10=$291;
   label = 47; break;
  case 46: 
   var $293=(($280+12)|0);
   var $294=HEAP32[(($293)>>2)];
   var $295=HEAP32[(($294)>>2)];
   $9=$295;
   var $296=$9;
   $10=$296;
   label = 47; break;
  case 47: 
   var $297=$10;
   $7=$297;
   $8=-1;
   var $298=$7;
   var $299=$8;
   var $300=(($298)|(0))==(($299)|(0));
   if ($300) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $302=(($273)|0);
   HEAP32[(($302)>>2)]=0;
   label = 49; break;
  case 49: 
   var $303=(($273)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=(($304)|(0))==0;
   var $306=(($305)&(1));
   var $307=$14;
   $6=$307;
   var $308=$6;
   var $309=(($308)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))!=0;
   if ($311) { label = 50; break; } else { label = 56; break; }
  case 50: 
   var $313=(($308)|0);
   var $314=HEAP32[(($313)>>2)];
   $5=$314;
   var $315=$5;
   var $316=(($315+12)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($315+16)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=(($317)|(0))==(($319)|(0));
   if ($320) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $322=$315;
   var $323=HEAP32[(($322)>>2)];
   var $324=(($323+36)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$325]($315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 26; break; }
  case 52: 
   $4=$326;
   label = 54; break;
  case 53: 
   var $328=(($315+12)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=HEAP32[(($329)>>2)];
   $3=$330;
   var $331=$3;
   $4=$331;
   label = 54; break;
  case 54: 
   var $332=$4;
   $1=$332;
   $2=-1;
   var $333=$1;
   var $334=$2;
   var $335=(($333)|(0))==(($334)|(0));
   if ($335) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $337=(($308)|0);
   HEAP32[(($337)>>2)]=0;
   label = 56; break;
  case 56: 
   var $338=(($308)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340=(($339)|(0))==0;
   var $341=(($340)&(1));
   var $342=(($306)|(0))==(($341)|(0));
   label = 57; break;
  case 57: 
   if ($342) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $345=$53;
   var $346=HEAP32[(($345)>>2)];
   var $347=$346 | 2;
   HEAP32[(($345)>>2)]=$347;
   label = 59; break;
  case 59: 
   var $349=$agg_result;
   var $350=$__b;
   assert(4 % 1 === 0);HEAP32[(($349)>>2)]=HEAP32[(($350)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 60: 
   var $352=$55;
   var $353=$56;
   var $354$0=$352;
   var $354$1=0;
   var $355$0=$354$0;
   var $355$1=$353;
   ___resumeException($355$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg_result, $__iob, $__atoms, $__thousands_sep) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $__loc=__stackBase__;
   var $12;
   var $13;
   var $__np;
   var $14;
   $9=$__iob;
   $10=$__atoms;
   $11=$__thousands_sep;
   var $15=$9;
   __ZNKSt3__18ios_base6getlocEv($__loc, $15);
   $8=$__loc;
   var $16=$8;
   var $17 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($16, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 12; break; }
  case 2: 
   var $18=$17;
   label = 3; break;
  case 3: 
   var $20=$10;
   $4=$18;
   $5=((20272)|0);
   $6=((20298)|0);
   $7=$20;
   var $21=$4;
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23+48)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$5;
   var $27=$6;
   var $28=$7;
   var $29 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$25]($21, $26, $27, $28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 12; break; }
  case 4: 
   label = 5; break;
  case 5: 
   $3=$__loc;
   var $31=$3;
   var $32 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($31, 19424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 12; break; }
  case 6: 
   var $33=$32;
   label = 7; break;
  case 7: 
   $__np=$33;
   var $35=$__np;
   $2=$35;
   var $36=$2;
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38+16)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 12; break; }
  case 8: 
   label = 9; break;
  case 9: 
   var $43=$11;
   HEAP32[(($43)>>2)]=$41;
   var $44=$__np;
   $1=$44;
   var $45=$1;
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+20)|0);
   var $49=HEAP32[(($48)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($agg_result, $45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 12; break; }
  case 10: 
   label = 11; break;
  case 11: 
   $14=1;
   __ZNSt3__16localeD2Ev($__loc);
   STACKTOP = __stackBase__;
   return;
  case 12: 
   var $52$0 = ___cxa_find_matching_catch(-1, -1); $52$1 = tempRet0;
   var $53=$52$0;
   $12=$53;
   var $54=$52$1;
   $13=$54;
   __ZNSt3__16localeD2Ev($__loc);
   label = 13; break;
  case 13: 
   var $56=$12;
   var $57=$13;
   var $58$0=$56;
   var $58$1=0;
   var $59$0=$58$0;
   var $59$1=$57;
   ___resumeException($59$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15=__stackBase__;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $__f;
   HEAP32[(($15)>>2)]=$__ct;
   $16=$__base;
   $17=$__a;
   $18=$__a_end;
   $19=$__dc;
   $20=$__thousands_sep;
   $21=$__grouping;
   $22=$__g;
   $23=$__g_end;
   $24=$__atoms;
   var $25=$18;
   var $26=HEAP32[(($25)>>2)];
   var $27=$17;
   var $28=(($26)|(0))==(($27)|(0));
   if ($28) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $30=HEAP32[(($15)>>2)];
   var $31=$24;
   var $32=(($31+96)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($30)|(0))==(($33)|(0));
   if ($34) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $36=HEAP32[(($15)>>2)];
   var $37=$24;
   var $38=(($37+100)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($36)|(0))==(($39)|(0));
   if ($40) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $42=HEAP32[(($15)>>2)];
   var $43=$24;
   var $44=(($43+96)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($42)|(0))==(($45)|(0));
   var $47=$46 ? 43 : 45;
   var $48=$18;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+1)|0);
   HEAP32[(($48)>>2)]=$50;
   HEAP8[($49)]=$47;
   var $51=$19;
   HEAP32[(($51)>>2)]=0;
   $14=0;
   label = 34; break;
  case 5: 
   var $53=$21;
   $13=$53;
   var $54=$13;
   $12=$54;
   var $55=$12;
   var $56=(($55)|0);
   $11=$56;
   var $57=$11;
   var $58=$57;
   $10=$58;
   var $59=$10;
   var $60=(($59)|0);
   var $61=(($60)|0);
   var $62=$61;
   var $63=(($62)|0);
   var $64=$63;
   var $65=HEAP8[($64)];
   var $66=(($65)&(255));
   var $67=$66 & 1;
   var $68=(($67)|(0))!=0;
   if ($68) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $6=$54;
   var $70=$6;
   var $71=(($70)|0);
   $5=$71;
   var $72=$5;
   var $73=$72;
   $4=$73;
   var $74=$4;
   var $75=(($74)|0);
   var $76=(($75)|0);
   var $77=$76;
   var $78=(($77+4)|0);
   var $79=HEAP32[(($78)>>2)];
   var $94 = $79;label = 8; break;
  case 7: 
   $9=$54;
   var $81=$9;
   var $82=(($81)|0);
   $8=$82;
   var $83=$8;
   var $84=$83;
   $7=$84;
   var $85=$7;
   var $86=(($85)|0);
   var $87=(($86)|0);
   var $88=$87;
   var $89=(($88)|0);
   var $90=$89;
   var $91=HEAP8[($90)];
   var $92=(($91)&(255));
   var $93=$92 >> 1;
   var $94 = $93;label = 8; break;
  case 8: 
   var $94;
   var $95=(($94)|(0))!=0;
   if ($95) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $97=HEAP32[(($15)>>2)];
   var $98=$20;
   var $99=(($97)|(0))==(($98)|(0));
   if ($99) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $101=$23;
   var $102=HEAP32[(($101)>>2)];
   var $103=$22;
   var $104=$102;
   var $105=$103;
   var $106=((($104)-($105))|0);
   var $107=((((($106)|(0)))/(4))&-1);
   var $108=(($107)|(0)) < 40;
   if ($108) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $110=$19;
   var $111=HEAP32[(($110)>>2)];
   var $112=$23;
   var $113=HEAP32[(($112)>>2)];
   var $114=(($113+4)|0);
   HEAP32[(($112)>>2)]=$114;
   HEAP32[(($113)>>2)]=$111;
   var $115=$19;
   HEAP32[(($115)>>2)]=0;
   label = 12; break;
  case 12: 
   $14=0;
   label = 34; break;
  case 13: 
   var $118=$24;
   var $119=$24;
   var $120=(($119+104)|0);
   $1=$118;
   $2=$120;
   $3=$15;
   label = 14; break;
  case 14: 
   var $122=$1;
   var $123=$2;
   var $124=(($122)|(0))!=(($123)|(0));
   if ($124) { label = 15; break; } else { label = 18; break; }
  case 15: 
   var $126=$1;
   var $127=HEAP32[(($126)>>2)];
   var $128=$3;
   var $129=HEAP32[(($128)>>2)];
   var $130=(($127)|(0))==(($129)|(0));
   if ($130) { label = 16; break; } else { label = 17; break; }
  case 16: 
   label = 18; break;
  case 17: 
   var $133=$1;
   var $134=(($133+4)|0);
   $1=$134;
   label = 14; break;
  case 18: 
   var $135=$1;
   var $136=$24;
   var $137=$135;
   var $138=$136;
   var $139=((($137)-($138))|0);
   var $140=((((($139)|(0)))/(4))&-1);
   $__f=$140;
   var $141=$__f;
   var $142=(($141)|(0)) >= 24;
   if ($142) { label = 19; break; } else { label = 20; break; }
  case 19: 
   $14=-1;
   label = 34; break;
  case 20: 
   var $145=$16;
   if ((($145)|(0))==8 | (($145)|(0))==10) {
    label = 21; break;
   }
   else if ((($145)|(0))==16) {
    label = 24; break;
   }
   else {
   label = 31; break;
   }
  case 21: 
   var $147=$__f;
   var $148=$16;
   var $149=(($147)|(0)) >= (($148)|(0));
   if ($149) { label = 22; break; } else { label = 23; break; }
  case 22: 
   $14=-1;
   label = 34; break;
  case 23: 
   label = 31; break;
  case 24: 
   var $153=$__f;
   var $154=(($153)|(0)) < 22;
   if ($154) { label = 25; break; } else { label = 26; break; }
  case 25: 
   label = 31; break;
  case 26: 
   var $157=$18;
   var $158=HEAP32[(($157)>>2)];
   var $159=$17;
   var $160=(($158)|(0))!=(($159)|(0));
   if ($160) { label = 27; break; } else { label = 30; break; }
  case 27: 
   var $162=$18;
   var $163=HEAP32[(($162)>>2)];
   var $164=$17;
   var $165=$163;
   var $166=$164;
   var $167=((($165)-($166))|0);
   var $168=(($167)|(0)) <= 2;
   if ($168) { label = 28; break; } else { label = 30; break; }
  case 28: 
   var $170=$18;
   var $171=HEAP32[(($170)>>2)];
   var $172=((($171)-(1))|0);
   var $173=HEAP8[($172)];
   var $174=(($173 << 24) >> 24);
   var $175=(($174)|(0))==48;
   if ($175) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $177=$19;
   HEAP32[(($177)>>2)]=0;
   var $178=$__f;
   var $179=((20272+$178)|0);
   var $180=HEAP8[($179)];
   var $181=$18;
   var $182=HEAP32[(($181)>>2)];
   var $183=(($182+1)|0);
   HEAP32[(($181)>>2)]=$183;
   HEAP8[($182)]=$180;
   $14=0;
   label = 34; break;
  case 30: 
   $14=-1;
   label = 34; break;
  case 31: 
   var $186=$18;
   var $187=HEAP32[(($186)>>2)];
   var $188=$17;
   var $189=$187;
   var $190=$188;
   var $191=((($189)-($190))|0);
   var $192=(($191)|(0)) < 39;
   if ($192) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $194=$__f;
   var $195=((20272+$194)|0);
   var $196=HEAP8[($195)];
   var $197=$18;
   var $198=HEAP32[(($197)>>2)];
   var $199=(($198+1)|0);
   HEAP32[(($197)>>2)]=$199;
   HEAP8[($198)]=$196;
   label = 33; break;
  case 33: 
   var $201=$19;
   var $202=HEAP32[(($201)>>2)];
   var $203=((($202)+(1))|0);
   HEAP32[(($201)>>2)]=$203;
   $14=0;
   label = 34; break;
  case 34: 
   var $205=$14;
   STACKTOP = __stackBase__;
   return $205;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 352)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep=(__stackBase__)+(104);
   var $__grouping=(__stackBase__)+(112);
   var $__a=(__stackBase__)+(128);
   var $__a_end=(__stackBase__)+(168);
   var $__g=(__stackBase__)+(176);
   var $__g_end=(__stackBase__)+(336);
   var $__dc=(__stackBase__)+(344);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($59);
   $__base=$60;
   var $61=$52;
   var $62=(($__atoms)|0);
   __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $61, $62, $__thousands_sep);
   var $63=$__a;
   _memset($63, 0, 40);
   var $64=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$64;
   var $65=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$65;
   HEAP32[(($__dc)>>2)]=0;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $67=$49;
   var $68=$50;
   $47=$67;
   $48=$68;
   var $69=$47;
   $46=$69;
   var $70=$46;
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=0;
   if ($73) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $75=(($70)|0);
   var $76=HEAP32[(($75)>>2)];
   $45=$76;
   var $77=$45;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($79)|(0))==(($81)|(0));
   if ($82) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $84=$77;
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+36)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$88;
   label = 7; break;
  case 6: 
   var $90=(($77+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=HEAP32[(($91)>>2)];
   $43=$92;
   var $93=$43;
   $44=$93;
   label = 7; break;
  case 7: 
   var $94=$44;
   $41=$94;
   $42=-1;
   var $95=$41;
   var $96=$42;
   var $97=(($95)|(0))==(($96)|(0));
   if ($97) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $99=(($70)|0);
   HEAP32[(($99)>>2)]=0;
   label = 9; break;
  case 9: 
   var $100=(($70)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|(0))==0;
   var $103=(($102)&(1));
   var $104=$48;
   $40=$104;
   var $105=$40;
   var $106=(($105)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107)|(0))!=0;
   if ($108) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $110=(($105)|0);
   var $111=HEAP32[(($110)>>2)];
   $39=$111;
   var $112=$39;
   var $113=(($112+12)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($112+16)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($114)|(0))==(($116)|(0));
   if ($117) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $119=$112;
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120+36)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$122]($112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$123;
   label = 14; break;
  case 13: 
   var $125=(($112+12)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=HEAP32[(($126)>>2)];
   $37=$127;
   var $128=$37;
   $38=$128;
   label = 14; break;
  case 14: 
   var $129=$38;
   $35=$129;
   $36=-1;
   var $130=$35;
   var $131=$36;
   var $132=(($130)|(0))==(($131)|(0));
   if ($132) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $134=(($105)|0);
   HEAP32[(($134)>>2)]=0;
   label = 16; break;
  case 16: 
   var $135=(($105)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136)|(0))==0;
   var $138=(($137)&(1));
   var $139=(($103)|(0))==(($138)|(0));
   var $140=$139 ^ 1;
   label = 17; break;
  case 17: 
   if ($140) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $143=$34;
   var $144=(($143)|0);
   var $145=HEAP32[(($144)>>2)];
   $33=$145;
   var $146=$33;
   var $147=(($146+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($146+16)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148)|(0))==(($150)|(0));
   if ($151) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $153=$146;
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154+36)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$157;
   label = 22; break;
  case 21: 
   var $159=(($146+12)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=HEAP32[(($160)>>2)];
   $31=$161;
   var $162=$31;
   $32=$162;
   label = 22; break;
  case 22: 
   var $163=$32;
   label = 23; break;
  case 23: 
   var $165=$__base;
   var $166=(($__a)|0);
   var $167=HEAP32[(($__thousands_sep)>>2)];
   var $168=(($__g)|0);
   var $169=(($__atoms)|0);
   var $170 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($163, $165, $166, $__a_end, $__dc, $167, $__grouping, $168, $__g_end, $169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $172=(($170)|(0))!=0;
   if ($172) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $175$0 = ___cxa_find_matching_catch(-1, -1); $175$1 = tempRet0;
   var $176=$175$0;
   $55=$176;
   var $177=$175$1;
   $56=$177;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 60; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $180=$30;
   var $181=(($180)|0);
   var $182=HEAP32[(($181)>>2)];
   $29=$182;
   var $183=$29;
   var $184=(($183+12)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($183+16)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($185)|(0))==(($187)|(0));
   if ($188) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $190=$183;
   var $191=HEAP32[(($190)>>2)];
   var $192=(($191+40)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$194;
   label = 32; break;
  case 31: 
   var $196=(($183+12)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=(($197+4)|0);
   HEAP32[(($196)>>2)]=$198;
   var $199=HEAP32[(($197)>>2)];
   $27=$199;
   var $200=$27;
   $28=$200;
   label = 32; break;
  case 32: 
   var $201=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $204=$26;
   $25=$204;
   var $205=$25;
   var $206=(($205)|0);
   $24=$206;
   var $207=$24;
   var $208=$207;
   $23=$208;
   var $209=$23;
   var $210=(($209)|0);
   var $211=(($210)|0);
   var $212=$211;
   var $213=(($212)|0);
   var $214=$213;
   var $215=HEAP8[($214)];
   var $216=(($215)&(255));
   var $217=$216 & 1;
   var $218=(($217)|(0))!=0;
   if ($218) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$204;
   var $220=$19;
   var $221=(($220)|0);
   $18=$221;
   var $222=$18;
   var $223=$222;
   $17=$223;
   var $224=$17;
   var $225=(($224)|0);
   var $226=(($225)|0);
   var $227=$226;
   var $228=(($227+4)|0);
   var $229=HEAP32[(($228)>>2)];
   var $244 = $229;label = 37; break;
  case 36: 
   $22=$204;
   var $231=$22;
   var $232=(($231)|0);
   $21=$232;
   var $233=$21;
   var $234=$233;
   $20=$234;
   var $235=$20;
   var $236=(($235)|0);
   var $237=(($236)|0);
   var $238=$237;
   var $239=(($238)|0);
   var $240=$239;
   var $241=HEAP8[($240)];
   var $242=(($241)&(255));
   var $243=$242 >> 1;
   var $244 = $243;label = 37; break;
  case 37: 
   var $244;
   var $245=(($244)|(0))!=0;
   if ($245) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $247=HEAP32[(($__g_end)>>2)];
   var $248=(($__g)|0);
   var $249=$247;
   var $250=$248;
   var $251=((($249)-($250))|0);
   var $252=((((($251)|(0)))/(4))&-1);
   var $253=(($252)|(0)) < 40;
   if ($253) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $255=HEAP32[(($__dc)>>2)];
   var $256=HEAP32[(($__g_end)>>2)];
   var $257=(($256+4)|0);
   HEAP32[(($__g_end)>>2)]=$257;
   HEAP32[(($256)>>2)]=$255;
   label = 40; break;
  case 40: 
   var $259=(($__a)|0);
   var $260=HEAP32[(($__a_end)>>2)];
   var $261=$53;
   var $262=$__base;
   var $263 = (function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($259, $260, $261, $262) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $263$0 = $263;var $263$1 = tempRet0;if (!__THREW__) { label = 41; break; } else { label = 26; break; }
  case 41: 
   var $265=$54;
   var $st$0$0=(($265)|0);
   HEAP32[(($st$0$0)>>2)]=$263$0;
   var $st$1$1=(($265+4)|0);
   HEAP32[(($st$1$1)>>2)]=$263$1;
   var $266=(($__g)|0);
   var $267=HEAP32[(($__g_end)>>2)];
   var $268=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $266, $267, $268) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   $15=$__b;
   $16=$__e;
   var $270=$15;
   var $271=$16;
   $13=$270;
   $14=$271;
   var $272=$13;
   $12=$272;
   var $273=$12;
   var $274=(($273)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=(($275)|(0))!=0;
   if ($276) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $278=(($273)|0);
   var $279=HEAP32[(($278)>>2)];
   $11=$279;
   var $280=$11;
   var $281=(($280+12)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=(($280+16)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($282)|(0))==(($284)|(0));
   if ($285) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $287=$280;
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288+36)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$290]($280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 26; break; }
  case 45: 
   $10=$291;
   label = 47; break;
  case 46: 
   var $293=(($280+12)|0);
   var $294=HEAP32[(($293)>>2)];
   var $295=HEAP32[(($294)>>2)];
   $9=$295;
   var $296=$9;
   $10=$296;
   label = 47; break;
  case 47: 
   var $297=$10;
   $7=$297;
   $8=-1;
   var $298=$7;
   var $299=$8;
   var $300=(($298)|(0))==(($299)|(0));
   if ($300) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $302=(($273)|0);
   HEAP32[(($302)>>2)]=0;
   label = 49; break;
  case 49: 
   var $303=(($273)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=(($304)|(0))==0;
   var $306=(($305)&(1));
   var $307=$14;
   $6=$307;
   var $308=$6;
   var $309=(($308)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))!=0;
   if ($311) { label = 50; break; } else { label = 56; break; }
  case 50: 
   var $313=(($308)|0);
   var $314=HEAP32[(($313)>>2)];
   $5=$314;
   var $315=$5;
   var $316=(($315+12)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($315+16)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=(($317)|(0))==(($319)|(0));
   if ($320) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $322=$315;
   var $323=HEAP32[(($322)>>2)];
   var $324=(($323+36)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$325]($315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 26; break; }
  case 52: 
   $4=$326;
   label = 54; break;
  case 53: 
   var $328=(($315+12)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=HEAP32[(($329)>>2)];
   $3=$330;
   var $331=$3;
   $4=$331;
   label = 54; break;
  case 54: 
   var $332=$4;
   $1=$332;
   $2=-1;
   var $333=$1;
   var $334=$2;
   var $335=(($333)|(0))==(($334)|(0));
   if ($335) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $337=(($308)|0);
   HEAP32[(($337)>>2)]=0;
   label = 56; break;
  case 56: 
   var $338=(($308)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340=(($339)|(0))==0;
   var $341=(($340)&(1));
   var $342=(($306)|(0))==(($341)|(0));
   label = 57; break;
  case 57: 
   if ($342) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $345=$53;
   var $346=HEAP32[(($345)>>2)];
   var $347=$346 | 2;
   HEAP32[(($345)>>2)]=$347;
   label = 59; break;
  case 59: 
   var $349=$agg_result;
   var $350=$__b;
   assert(4 % 1 === 0);HEAP32[(($349)>>2)]=HEAP32[(($350)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 60: 
   var $352=$55;
   var $353=$56;
   var $354$0=$352;
   var $354$1=0;
   var $355$0=$354$0;
   var $355$1=$353;
   ___resumeException($355$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 352)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep=(__stackBase__)+(104);
   var $__grouping=(__stackBase__)+(112);
   var $__a=(__stackBase__)+(128);
   var $__a_end=(__stackBase__)+(168);
   var $__g=(__stackBase__)+(176);
   var $__g_end=(__stackBase__)+(336);
   var $__dc=(__stackBase__)+(344);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($59);
   $__base=$60;
   var $61=$52;
   var $62=(($__atoms)|0);
   __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $61, $62, $__thousands_sep);
   var $63=$__a;
   _memset($63, 0, 40);
   var $64=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$64;
   var $65=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$65;
   HEAP32[(($__dc)>>2)]=0;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $67=$49;
   var $68=$50;
   $47=$67;
   $48=$68;
   var $69=$47;
   $46=$69;
   var $70=$46;
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=0;
   if ($73) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $75=(($70)|0);
   var $76=HEAP32[(($75)>>2)];
   $45=$76;
   var $77=$45;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($79)|(0))==(($81)|(0));
   if ($82) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $84=$77;
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+36)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$88;
   label = 7; break;
  case 6: 
   var $90=(($77+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=HEAP32[(($91)>>2)];
   $43=$92;
   var $93=$43;
   $44=$93;
   label = 7; break;
  case 7: 
   var $94=$44;
   $41=$94;
   $42=-1;
   var $95=$41;
   var $96=$42;
   var $97=(($95)|(0))==(($96)|(0));
   if ($97) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $99=(($70)|0);
   HEAP32[(($99)>>2)]=0;
   label = 9; break;
  case 9: 
   var $100=(($70)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|(0))==0;
   var $103=(($102)&(1));
   var $104=$48;
   $40=$104;
   var $105=$40;
   var $106=(($105)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107)|(0))!=0;
   if ($108) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $110=(($105)|0);
   var $111=HEAP32[(($110)>>2)];
   $39=$111;
   var $112=$39;
   var $113=(($112+12)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($112+16)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($114)|(0))==(($116)|(0));
   if ($117) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $119=$112;
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120+36)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$122]($112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$123;
   label = 14; break;
  case 13: 
   var $125=(($112+12)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=HEAP32[(($126)>>2)];
   $37=$127;
   var $128=$37;
   $38=$128;
   label = 14; break;
  case 14: 
   var $129=$38;
   $35=$129;
   $36=-1;
   var $130=$35;
   var $131=$36;
   var $132=(($130)|(0))==(($131)|(0));
   if ($132) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $134=(($105)|0);
   HEAP32[(($134)>>2)]=0;
   label = 16; break;
  case 16: 
   var $135=(($105)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136)|(0))==0;
   var $138=(($137)&(1));
   var $139=(($103)|(0))==(($138)|(0));
   var $140=$139 ^ 1;
   label = 17; break;
  case 17: 
   if ($140) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $143=$34;
   var $144=(($143)|0);
   var $145=HEAP32[(($144)>>2)];
   $33=$145;
   var $146=$33;
   var $147=(($146+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($146+16)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148)|(0))==(($150)|(0));
   if ($151) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $153=$146;
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154+36)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$157;
   label = 22; break;
  case 21: 
   var $159=(($146+12)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=HEAP32[(($160)>>2)];
   $31=$161;
   var $162=$31;
   $32=$162;
   label = 22; break;
  case 22: 
   var $163=$32;
   label = 23; break;
  case 23: 
   var $165=$__base;
   var $166=(($__a)|0);
   var $167=HEAP32[(($__thousands_sep)>>2)];
   var $168=(($__g)|0);
   var $169=(($__atoms)|0);
   var $170 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($163, $165, $166, $__a_end, $__dc, $167, $__grouping, $168, $__g_end, $169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $172=(($170)|(0))!=0;
   if ($172) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $175$0 = ___cxa_find_matching_catch(-1, -1); $175$1 = tempRet0;
   var $176=$175$0;
   $55=$176;
   var $177=$175$1;
   $56=$177;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 60; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $180=$30;
   var $181=(($180)|0);
   var $182=HEAP32[(($181)>>2)];
   $29=$182;
   var $183=$29;
   var $184=(($183+12)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($183+16)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($185)|(0))==(($187)|(0));
   if ($188) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $190=$183;
   var $191=HEAP32[(($190)>>2)];
   var $192=(($191+40)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$194;
   label = 32; break;
  case 31: 
   var $196=(($183+12)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=(($197+4)|0);
   HEAP32[(($196)>>2)]=$198;
   var $199=HEAP32[(($197)>>2)];
   $27=$199;
   var $200=$27;
   $28=$200;
   label = 32; break;
  case 32: 
   var $201=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $204=$26;
   $25=$204;
   var $205=$25;
   var $206=(($205)|0);
   $24=$206;
   var $207=$24;
   var $208=$207;
   $23=$208;
   var $209=$23;
   var $210=(($209)|0);
   var $211=(($210)|0);
   var $212=$211;
   var $213=(($212)|0);
   var $214=$213;
   var $215=HEAP8[($214)];
   var $216=(($215)&(255));
   var $217=$216 & 1;
   var $218=(($217)|(0))!=0;
   if ($218) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$204;
   var $220=$19;
   var $221=(($220)|0);
   $18=$221;
   var $222=$18;
   var $223=$222;
   $17=$223;
   var $224=$17;
   var $225=(($224)|0);
   var $226=(($225)|0);
   var $227=$226;
   var $228=(($227+4)|0);
   var $229=HEAP32[(($228)>>2)];
   var $244 = $229;label = 37; break;
  case 36: 
   $22=$204;
   var $231=$22;
   var $232=(($231)|0);
   $21=$232;
   var $233=$21;
   var $234=$233;
   $20=$234;
   var $235=$20;
   var $236=(($235)|0);
   var $237=(($236)|0);
   var $238=$237;
   var $239=(($238)|0);
   var $240=$239;
   var $241=HEAP8[($240)];
   var $242=(($241)&(255));
   var $243=$242 >> 1;
   var $244 = $243;label = 37; break;
  case 37: 
   var $244;
   var $245=(($244)|(0))!=0;
   if ($245) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $247=HEAP32[(($__g_end)>>2)];
   var $248=(($__g)|0);
   var $249=$247;
   var $250=$248;
   var $251=((($249)-($250))|0);
   var $252=((((($251)|(0)))/(4))&-1);
   var $253=(($252)|(0)) < 40;
   if ($253) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $255=HEAP32[(($__dc)>>2)];
   var $256=HEAP32[(($__g_end)>>2)];
   var $257=(($256+4)|0);
   HEAP32[(($__g_end)>>2)]=$257;
   HEAP32[(($256)>>2)]=$255;
   label = 40; break;
  case 40: 
   var $259=(($__a)|0);
   var $260=HEAP32[(($__a_end)>>2)];
   var $261=$53;
   var $262=$__base;
   var $263 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($259, $260, $261, $262) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 26; break; }
  case 41: 
   var $265=$54;
   HEAP16[(($265)>>1)]=$263;
   var $266=(($__g)|0);
   var $267=HEAP32[(($__g_end)>>2)];
   var $268=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $266, $267, $268) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   $15=$__b;
   $16=$__e;
   var $270=$15;
   var $271=$16;
   $13=$270;
   $14=$271;
   var $272=$13;
   $12=$272;
   var $273=$12;
   var $274=(($273)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=(($275)|(0))!=0;
   if ($276) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $278=(($273)|0);
   var $279=HEAP32[(($278)>>2)];
   $11=$279;
   var $280=$11;
   var $281=(($280+12)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=(($280+16)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($282)|(0))==(($284)|(0));
   if ($285) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $287=$280;
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288+36)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$290]($280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 26; break; }
  case 45: 
   $10=$291;
   label = 47; break;
  case 46: 
   var $293=(($280+12)|0);
   var $294=HEAP32[(($293)>>2)];
   var $295=HEAP32[(($294)>>2)];
   $9=$295;
   var $296=$9;
   $10=$296;
   label = 47; break;
  case 47: 
   var $297=$10;
   $7=$297;
   $8=-1;
   var $298=$7;
   var $299=$8;
   var $300=(($298)|(0))==(($299)|(0));
   if ($300) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $302=(($273)|0);
   HEAP32[(($302)>>2)]=0;
   label = 49; break;
  case 49: 
   var $303=(($273)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=(($304)|(0))==0;
   var $306=(($305)&(1));
   var $307=$14;
   $6=$307;
   var $308=$6;
   var $309=(($308)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))!=0;
   if ($311) { label = 50; break; } else { label = 56; break; }
  case 50: 
   var $313=(($308)|0);
   var $314=HEAP32[(($313)>>2)];
   $5=$314;
   var $315=$5;
   var $316=(($315+12)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($315+16)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=(($317)|(0))==(($319)|(0));
   if ($320) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $322=$315;
   var $323=HEAP32[(($322)>>2)];
   var $324=(($323+36)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$325]($315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 26; break; }
  case 52: 
   $4=$326;
   label = 54; break;
  case 53: 
   var $328=(($315+12)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=HEAP32[(($329)>>2)];
   $3=$330;
   var $331=$3;
   $4=$331;
   label = 54; break;
  case 54: 
   var $332=$4;
   $1=$332;
   $2=-1;
   var $333=$1;
   var $334=$2;
   var $335=(($333)|(0))==(($334)|(0));
   if ($335) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $337=(($308)|0);
   HEAP32[(($337)>>2)]=0;
   label = 56; break;
  case 56: 
   var $338=(($308)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340=(($339)|(0))==0;
   var $341=(($340)&(1));
   var $342=(($306)|(0))==(($341)|(0));
   label = 57; break;
  case 57: 
   if ($342) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $345=$53;
   var $346=HEAP32[(($345)>>2)];
   var $347=$346 | 2;
   HEAP32[(($345)>>2)]=$347;
   label = 59; break;
  case 59: 
   var $349=$agg_result;
   var $350=$__b;
   assert(4 % 1 === 0);HEAP32[(($349)>>2)]=HEAP32[(($350)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 60: 
   var $352=$55;
   var $353=$56;
   var $354$0=$352;
   var $354$1=0;
   var $355$0=$354$0;
   var $355$1=$353;
   ___resumeException($355$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 352)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep=(__stackBase__)+(104);
   var $__grouping=(__stackBase__)+(112);
   var $__a=(__stackBase__)+(128);
   var $__a_end=(__stackBase__)+(168);
   var $__g=(__stackBase__)+(176);
   var $__g_end=(__stackBase__)+(336);
   var $__dc=(__stackBase__)+(344);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($59);
   $__base=$60;
   var $61=$52;
   var $62=(($__atoms)|0);
   __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $61, $62, $__thousands_sep);
   var $63=$__a;
   _memset($63, 0, 40);
   var $64=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$64;
   var $65=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$65;
   HEAP32[(($__dc)>>2)]=0;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $67=$49;
   var $68=$50;
   $47=$67;
   $48=$68;
   var $69=$47;
   $46=$69;
   var $70=$46;
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=0;
   if ($73) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $75=(($70)|0);
   var $76=HEAP32[(($75)>>2)];
   $45=$76;
   var $77=$45;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($79)|(0))==(($81)|(0));
   if ($82) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $84=$77;
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+36)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$88;
   label = 7; break;
  case 6: 
   var $90=(($77+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=HEAP32[(($91)>>2)];
   $43=$92;
   var $93=$43;
   $44=$93;
   label = 7; break;
  case 7: 
   var $94=$44;
   $41=$94;
   $42=-1;
   var $95=$41;
   var $96=$42;
   var $97=(($95)|(0))==(($96)|(0));
   if ($97) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $99=(($70)|0);
   HEAP32[(($99)>>2)]=0;
   label = 9; break;
  case 9: 
   var $100=(($70)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|(0))==0;
   var $103=(($102)&(1));
   var $104=$48;
   $40=$104;
   var $105=$40;
   var $106=(($105)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107)|(0))!=0;
   if ($108) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $110=(($105)|0);
   var $111=HEAP32[(($110)>>2)];
   $39=$111;
   var $112=$39;
   var $113=(($112+12)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($112+16)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($114)|(0))==(($116)|(0));
   if ($117) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $119=$112;
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120+36)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$122]($112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$123;
   label = 14; break;
  case 13: 
   var $125=(($112+12)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=HEAP32[(($126)>>2)];
   $37=$127;
   var $128=$37;
   $38=$128;
   label = 14; break;
  case 14: 
   var $129=$38;
   $35=$129;
   $36=-1;
   var $130=$35;
   var $131=$36;
   var $132=(($130)|(0))==(($131)|(0));
   if ($132) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $134=(($105)|0);
   HEAP32[(($134)>>2)]=0;
   label = 16; break;
  case 16: 
   var $135=(($105)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136)|(0))==0;
   var $138=(($137)&(1));
   var $139=(($103)|(0))==(($138)|(0));
   var $140=$139 ^ 1;
   label = 17; break;
  case 17: 
   if ($140) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $143=$34;
   var $144=(($143)|0);
   var $145=HEAP32[(($144)>>2)];
   $33=$145;
   var $146=$33;
   var $147=(($146+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($146+16)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148)|(0))==(($150)|(0));
   if ($151) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $153=$146;
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154+36)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$157;
   label = 22; break;
  case 21: 
   var $159=(($146+12)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=HEAP32[(($160)>>2)];
   $31=$161;
   var $162=$31;
   $32=$162;
   label = 22; break;
  case 22: 
   var $163=$32;
   label = 23; break;
  case 23: 
   var $165=$__base;
   var $166=(($__a)|0);
   var $167=HEAP32[(($__thousands_sep)>>2)];
   var $168=(($__g)|0);
   var $169=(($__atoms)|0);
   var $170 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($163, $165, $166, $__a_end, $__dc, $167, $__grouping, $168, $__g_end, $169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $172=(($170)|(0))!=0;
   if ($172) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $175$0 = ___cxa_find_matching_catch(-1, -1); $175$1 = tempRet0;
   var $176=$175$0;
   $55=$176;
   var $177=$175$1;
   $56=$177;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 60; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $180=$30;
   var $181=(($180)|0);
   var $182=HEAP32[(($181)>>2)];
   $29=$182;
   var $183=$29;
   var $184=(($183+12)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($183+16)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($185)|(0))==(($187)|(0));
   if ($188) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $190=$183;
   var $191=HEAP32[(($190)>>2)];
   var $192=(($191+40)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$194;
   label = 32; break;
  case 31: 
   var $196=(($183+12)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=(($197+4)|0);
   HEAP32[(($196)>>2)]=$198;
   var $199=HEAP32[(($197)>>2)];
   $27=$199;
   var $200=$27;
   $28=$200;
   label = 32; break;
  case 32: 
   var $201=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $204=$26;
   $25=$204;
   var $205=$25;
   var $206=(($205)|0);
   $24=$206;
   var $207=$24;
   var $208=$207;
   $23=$208;
   var $209=$23;
   var $210=(($209)|0);
   var $211=(($210)|0);
   var $212=$211;
   var $213=(($212)|0);
   var $214=$213;
   var $215=HEAP8[($214)];
   var $216=(($215)&(255));
   var $217=$216 & 1;
   var $218=(($217)|(0))!=0;
   if ($218) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$204;
   var $220=$19;
   var $221=(($220)|0);
   $18=$221;
   var $222=$18;
   var $223=$222;
   $17=$223;
   var $224=$17;
   var $225=(($224)|0);
   var $226=(($225)|0);
   var $227=$226;
   var $228=(($227+4)|0);
   var $229=HEAP32[(($228)>>2)];
   var $244 = $229;label = 37; break;
  case 36: 
   $22=$204;
   var $231=$22;
   var $232=(($231)|0);
   $21=$232;
   var $233=$21;
   var $234=$233;
   $20=$234;
   var $235=$20;
   var $236=(($235)|0);
   var $237=(($236)|0);
   var $238=$237;
   var $239=(($238)|0);
   var $240=$239;
   var $241=HEAP8[($240)];
   var $242=(($241)&(255));
   var $243=$242 >> 1;
   var $244 = $243;label = 37; break;
  case 37: 
   var $244;
   var $245=(($244)|(0))!=0;
   if ($245) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $247=HEAP32[(($__g_end)>>2)];
   var $248=(($__g)|0);
   var $249=$247;
   var $250=$248;
   var $251=((($249)-($250))|0);
   var $252=((((($251)|(0)))/(4))&-1);
   var $253=(($252)|(0)) < 40;
   if ($253) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $255=HEAP32[(($__dc)>>2)];
   var $256=HEAP32[(($__g_end)>>2)];
   var $257=(($256+4)|0);
   HEAP32[(($__g_end)>>2)]=$257;
   HEAP32[(($256)>>2)]=$255;
   label = 40; break;
  case 40: 
   var $259=(($__a)|0);
   var $260=HEAP32[(($__a_end)>>2)];
   var $261=$53;
   var $262=$__base;
   var $263 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($259, $260, $261, $262) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 26; break; }
  case 41: 
   var $265=$54;
   HEAP32[(($265)>>2)]=$263;
   var $266=(($__g)|0);
   var $267=HEAP32[(($__g_end)>>2)];
   var $268=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $266, $267, $268) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   $15=$__b;
   $16=$__e;
   var $270=$15;
   var $271=$16;
   $13=$270;
   $14=$271;
   var $272=$13;
   $12=$272;
   var $273=$12;
   var $274=(($273)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=(($275)|(0))!=0;
   if ($276) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $278=(($273)|0);
   var $279=HEAP32[(($278)>>2)];
   $11=$279;
   var $280=$11;
   var $281=(($280+12)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=(($280+16)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($282)|(0))==(($284)|(0));
   if ($285) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $287=$280;
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288+36)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$290]($280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 26; break; }
  case 45: 
   $10=$291;
   label = 47; break;
  case 46: 
   var $293=(($280+12)|0);
   var $294=HEAP32[(($293)>>2)];
   var $295=HEAP32[(($294)>>2)];
   $9=$295;
   var $296=$9;
   $10=$296;
   label = 47; break;
  case 47: 
   var $297=$10;
   $7=$297;
   $8=-1;
   var $298=$7;
   var $299=$8;
   var $300=(($298)|(0))==(($299)|(0));
   if ($300) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $302=(($273)|0);
   HEAP32[(($302)>>2)]=0;
   label = 49; break;
  case 49: 
   var $303=(($273)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=(($304)|(0))==0;
   var $306=(($305)&(1));
   var $307=$14;
   $6=$307;
   var $308=$6;
   var $309=(($308)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))!=0;
   if ($311) { label = 50; break; } else { label = 56; break; }
  case 50: 
   var $313=(($308)|0);
   var $314=HEAP32[(($313)>>2)];
   $5=$314;
   var $315=$5;
   var $316=(($315+12)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($315+16)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=(($317)|(0))==(($319)|(0));
   if ($320) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $322=$315;
   var $323=HEAP32[(($322)>>2)];
   var $324=(($323+36)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$325]($315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 26; break; }
  case 52: 
   $4=$326;
   label = 54; break;
  case 53: 
   var $328=(($315+12)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=HEAP32[(($329)>>2)];
   $3=$330;
   var $331=$3;
   $4=$331;
   label = 54; break;
  case 54: 
   var $332=$4;
   $1=$332;
   $2=-1;
   var $333=$1;
   var $334=$2;
   var $335=(($333)|(0))==(($334)|(0));
   if ($335) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $337=(($308)|0);
   HEAP32[(($337)>>2)]=0;
   label = 56; break;
  case 56: 
   var $338=(($308)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340=(($339)|(0))==0;
   var $341=(($340)&(1));
   var $342=(($306)|(0))==(($341)|(0));
   label = 57; break;
  case 57: 
   if ($342) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $345=$53;
   var $346=HEAP32[(($345)>>2)];
   var $347=$346 | 2;
   HEAP32[(($345)>>2)]=$347;
   label = 59; break;
  case 59: 
   var $349=$agg_result;
   var $350=$__b;
   assert(4 % 1 === 0);HEAP32[(($349)>>2)]=HEAP32[(($350)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 60: 
   var $352=$55;
   var $353=$56;
   var $354$0=$352;
   var $354$1=0;
   var $355$0=$354$0;
   var $355$1=$353;
   ___resumeException($355$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 352)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep=(__stackBase__)+(104);
   var $__grouping=(__stackBase__)+(112);
   var $__a=(__stackBase__)+(128);
   var $__a_end=(__stackBase__)+(168);
   var $__g=(__stackBase__)+(176);
   var $__g_end=(__stackBase__)+(336);
   var $__dc=(__stackBase__)+(344);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($59);
   $__base=$60;
   var $61=$52;
   var $62=(($__atoms)|0);
   __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $61, $62, $__thousands_sep);
   var $63=$__a;
   _memset($63, 0, 40);
   var $64=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$64;
   var $65=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$65;
   HEAP32[(($__dc)>>2)]=0;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $67=$49;
   var $68=$50;
   $47=$67;
   $48=$68;
   var $69=$47;
   $46=$69;
   var $70=$46;
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=0;
   if ($73) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $75=(($70)|0);
   var $76=HEAP32[(($75)>>2)];
   $45=$76;
   var $77=$45;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($79)|(0))==(($81)|(0));
   if ($82) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $84=$77;
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+36)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$88;
   label = 7; break;
  case 6: 
   var $90=(($77+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=HEAP32[(($91)>>2)];
   $43=$92;
   var $93=$43;
   $44=$93;
   label = 7; break;
  case 7: 
   var $94=$44;
   $41=$94;
   $42=-1;
   var $95=$41;
   var $96=$42;
   var $97=(($95)|(0))==(($96)|(0));
   if ($97) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $99=(($70)|0);
   HEAP32[(($99)>>2)]=0;
   label = 9; break;
  case 9: 
   var $100=(($70)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|(0))==0;
   var $103=(($102)&(1));
   var $104=$48;
   $40=$104;
   var $105=$40;
   var $106=(($105)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107)|(0))!=0;
   if ($108) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $110=(($105)|0);
   var $111=HEAP32[(($110)>>2)];
   $39=$111;
   var $112=$39;
   var $113=(($112+12)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($112+16)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($114)|(0))==(($116)|(0));
   if ($117) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $119=$112;
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120+36)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$122]($112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$123;
   label = 14; break;
  case 13: 
   var $125=(($112+12)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=HEAP32[(($126)>>2)];
   $37=$127;
   var $128=$37;
   $38=$128;
   label = 14; break;
  case 14: 
   var $129=$38;
   $35=$129;
   $36=-1;
   var $130=$35;
   var $131=$36;
   var $132=(($130)|(0))==(($131)|(0));
   if ($132) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $134=(($105)|0);
   HEAP32[(($134)>>2)]=0;
   label = 16; break;
  case 16: 
   var $135=(($105)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136)|(0))==0;
   var $138=(($137)&(1));
   var $139=(($103)|(0))==(($138)|(0));
   var $140=$139 ^ 1;
   label = 17; break;
  case 17: 
   if ($140) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $143=$34;
   var $144=(($143)|0);
   var $145=HEAP32[(($144)>>2)];
   $33=$145;
   var $146=$33;
   var $147=(($146+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($146+16)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148)|(0))==(($150)|(0));
   if ($151) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $153=$146;
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154+36)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$157;
   label = 22; break;
  case 21: 
   var $159=(($146+12)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=HEAP32[(($160)>>2)];
   $31=$161;
   var $162=$31;
   $32=$162;
   label = 22; break;
  case 22: 
   var $163=$32;
   label = 23; break;
  case 23: 
   var $165=$__base;
   var $166=(($__a)|0);
   var $167=HEAP32[(($__thousands_sep)>>2)];
   var $168=(($__g)|0);
   var $169=(($__atoms)|0);
   var $170 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($163, $165, $166, $__a_end, $__dc, $167, $__grouping, $168, $__g_end, $169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $172=(($170)|(0))!=0;
   if ($172) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $175$0 = ___cxa_find_matching_catch(-1, -1); $175$1 = tempRet0;
   var $176=$175$0;
   $55=$176;
   var $177=$175$1;
   $56=$177;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 60; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $180=$30;
   var $181=(($180)|0);
   var $182=HEAP32[(($181)>>2)];
   $29=$182;
   var $183=$29;
   var $184=(($183+12)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($183+16)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($185)|(0))==(($187)|(0));
   if ($188) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $190=$183;
   var $191=HEAP32[(($190)>>2)];
   var $192=(($191+40)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$194;
   label = 32; break;
  case 31: 
   var $196=(($183+12)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=(($197+4)|0);
   HEAP32[(($196)>>2)]=$198;
   var $199=HEAP32[(($197)>>2)];
   $27=$199;
   var $200=$27;
   $28=$200;
   label = 32; break;
  case 32: 
   var $201=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $204=$26;
   $25=$204;
   var $205=$25;
   var $206=(($205)|0);
   $24=$206;
   var $207=$24;
   var $208=$207;
   $23=$208;
   var $209=$23;
   var $210=(($209)|0);
   var $211=(($210)|0);
   var $212=$211;
   var $213=(($212)|0);
   var $214=$213;
   var $215=HEAP8[($214)];
   var $216=(($215)&(255));
   var $217=$216 & 1;
   var $218=(($217)|(0))!=0;
   if ($218) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$204;
   var $220=$19;
   var $221=(($220)|0);
   $18=$221;
   var $222=$18;
   var $223=$222;
   $17=$223;
   var $224=$17;
   var $225=(($224)|0);
   var $226=(($225)|0);
   var $227=$226;
   var $228=(($227+4)|0);
   var $229=HEAP32[(($228)>>2)];
   var $244 = $229;label = 37; break;
  case 36: 
   $22=$204;
   var $231=$22;
   var $232=(($231)|0);
   $21=$232;
   var $233=$21;
   var $234=$233;
   $20=$234;
   var $235=$20;
   var $236=(($235)|0);
   var $237=(($236)|0);
   var $238=$237;
   var $239=(($238)|0);
   var $240=$239;
   var $241=HEAP8[($240)];
   var $242=(($241)&(255));
   var $243=$242 >> 1;
   var $244 = $243;label = 37; break;
  case 37: 
   var $244;
   var $245=(($244)|(0))!=0;
   if ($245) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $247=HEAP32[(($__g_end)>>2)];
   var $248=(($__g)|0);
   var $249=$247;
   var $250=$248;
   var $251=((($249)-($250))|0);
   var $252=((((($251)|(0)))/(4))&-1);
   var $253=(($252)|(0)) < 40;
   if ($253) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $255=HEAP32[(($__dc)>>2)];
   var $256=HEAP32[(($__g_end)>>2)];
   var $257=(($256+4)|0);
   HEAP32[(($__g_end)>>2)]=$257;
   HEAP32[(($256)>>2)]=$255;
   label = 40; break;
  case 40: 
   var $259=(($__a)|0);
   var $260=HEAP32[(($__a_end)>>2)];
   var $261=$53;
   var $262=$__base;
   var $263 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($259, $260, $261, $262) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 26; break; }
  case 41: 
   var $265=$54;
   HEAP32[(($265)>>2)]=$263;
   var $266=(($__g)|0);
   var $267=HEAP32[(($__g_end)>>2)];
   var $268=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $266, $267, $268) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   $15=$__b;
   $16=$__e;
   var $270=$15;
   var $271=$16;
   $13=$270;
   $14=$271;
   var $272=$13;
   $12=$272;
   var $273=$12;
   var $274=(($273)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=(($275)|(0))!=0;
   if ($276) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $278=(($273)|0);
   var $279=HEAP32[(($278)>>2)];
   $11=$279;
   var $280=$11;
   var $281=(($280+12)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=(($280+16)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($282)|(0))==(($284)|(0));
   if ($285) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $287=$280;
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288+36)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$290]($280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 26; break; }
  case 45: 
   $10=$291;
   label = 47; break;
  case 46: 
   var $293=(($280+12)|0);
   var $294=HEAP32[(($293)>>2)];
   var $295=HEAP32[(($294)>>2)];
   $9=$295;
   var $296=$9;
   $10=$296;
   label = 47; break;
  case 47: 
   var $297=$10;
   $7=$297;
   $8=-1;
   var $298=$7;
   var $299=$8;
   var $300=(($298)|(0))==(($299)|(0));
   if ($300) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $302=(($273)|0);
   HEAP32[(($302)>>2)]=0;
   label = 49; break;
  case 49: 
   var $303=(($273)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=(($304)|(0))==0;
   var $306=(($305)&(1));
   var $307=$14;
   $6=$307;
   var $308=$6;
   var $309=(($308)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))!=0;
   if ($311) { label = 50; break; } else { label = 56; break; }
  case 50: 
   var $313=(($308)|0);
   var $314=HEAP32[(($313)>>2)];
   $5=$314;
   var $315=$5;
   var $316=(($315+12)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($315+16)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=(($317)|(0))==(($319)|(0));
   if ($320) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $322=$315;
   var $323=HEAP32[(($322)>>2)];
   var $324=(($323+36)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$325]($315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 26; break; }
  case 52: 
   $4=$326;
   label = 54; break;
  case 53: 
   var $328=(($315+12)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=HEAP32[(($329)>>2)];
   $3=$330;
   var $331=$3;
   $4=$331;
   label = 54; break;
  case 54: 
   var $332=$4;
   $1=$332;
   $2=-1;
   var $333=$1;
   var $334=$2;
   var $335=(($333)|(0))==(($334)|(0));
   if ($335) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $337=(($308)|0);
   HEAP32[(($337)>>2)]=0;
   label = 56; break;
  case 56: 
   var $338=(($308)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340=(($339)|(0))==0;
   var $341=(($340)&(1));
   var $342=(($306)|(0))==(($341)|(0));
   label = 57; break;
  case 57: 
   if ($342) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $345=$53;
   var $346=HEAP32[(($345)>>2)];
   var $347=$346 | 2;
   HEAP32[(($345)>>2)]=$347;
   label = 59; break;
  case 59: 
   var $349=$agg_result;
   var $350=$__b;
   assert(4 % 1 === 0);HEAP32[(($349)>>2)]=HEAP32[(($350)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 60: 
   var $352=$55;
   var $353=$56;
   var $354$0=$352;
   var $354$1=0;
   var $355$0=$354$0;
   var $355$1=$353;
   ___resumeException($355$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 352)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep=(__stackBase__)+(104);
   var $__grouping=(__stackBase__)+(112);
   var $__a=(__stackBase__)+(128);
   var $__a_end=(__stackBase__)+(168);
   var $__g=(__stackBase__)+(176);
   var $__g_end=(__stackBase__)+(336);
   var $__dc=(__stackBase__)+(344);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($59);
   $__base=$60;
   var $61=$52;
   var $62=(($__atoms)|0);
   __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $61, $62, $__thousands_sep);
   var $63=$__a;
   _memset($63, 0, 40);
   var $64=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$64;
   var $65=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$65;
   HEAP32[(($__dc)>>2)]=0;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $67=$49;
   var $68=$50;
   $47=$67;
   $48=$68;
   var $69=$47;
   $46=$69;
   var $70=$46;
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=0;
   if ($73) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $75=(($70)|0);
   var $76=HEAP32[(($75)>>2)];
   $45=$76;
   var $77=$45;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($79)|(0))==(($81)|(0));
   if ($82) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $84=$77;
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+36)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$88;
   label = 7; break;
  case 6: 
   var $90=(($77+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=HEAP32[(($91)>>2)];
   $43=$92;
   var $93=$43;
   $44=$93;
   label = 7; break;
  case 7: 
   var $94=$44;
   $41=$94;
   $42=-1;
   var $95=$41;
   var $96=$42;
   var $97=(($95)|(0))==(($96)|(0));
   if ($97) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $99=(($70)|0);
   HEAP32[(($99)>>2)]=0;
   label = 9; break;
  case 9: 
   var $100=(($70)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|(0))==0;
   var $103=(($102)&(1));
   var $104=$48;
   $40=$104;
   var $105=$40;
   var $106=(($105)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107)|(0))!=0;
   if ($108) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $110=(($105)|0);
   var $111=HEAP32[(($110)>>2)];
   $39=$111;
   var $112=$39;
   var $113=(($112+12)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($112+16)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($114)|(0))==(($116)|(0));
   if ($117) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $119=$112;
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120+36)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$122]($112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$123;
   label = 14; break;
  case 13: 
   var $125=(($112+12)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=HEAP32[(($126)>>2)];
   $37=$127;
   var $128=$37;
   $38=$128;
   label = 14; break;
  case 14: 
   var $129=$38;
   $35=$129;
   $36=-1;
   var $130=$35;
   var $131=$36;
   var $132=(($130)|(0))==(($131)|(0));
   if ($132) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $134=(($105)|0);
   HEAP32[(($134)>>2)]=0;
   label = 16; break;
  case 16: 
   var $135=(($105)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136)|(0))==0;
   var $138=(($137)&(1));
   var $139=(($103)|(0))==(($138)|(0));
   var $140=$139 ^ 1;
   label = 17; break;
  case 17: 
   if ($140) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $143=$34;
   var $144=(($143)|0);
   var $145=HEAP32[(($144)>>2)];
   $33=$145;
   var $146=$33;
   var $147=(($146+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($146+16)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148)|(0))==(($150)|(0));
   if ($151) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $153=$146;
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154+36)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$157;
   label = 22; break;
  case 21: 
   var $159=(($146+12)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=HEAP32[(($160)>>2)];
   $31=$161;
   var $162=$31;
   $32=$162;
   label = 22; break;
  case 22: 
   var $163=$32;
   label = 23; break;
  case 23: 
   var $165=$__base;
   var $166=(($__a)|0);
   var $167=HEAP32[(($__thousands_sep)>>2)];
   var $168=(($__g)|0);
   var $169=(($__atoms)|0);
   var $170 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($163, $165, $166, $__a_end, $__dc, $167, $__grouping, $168, $__g_end, $169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $172=(($170)|(0))!=0;
   if ($172) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $175$0 = ___cxa_find_matching_catch(-1, -1); $175$1 = tempRet0;
   var $176=$175$0;
   $55=$176;
   var $177=$175$1;
   $56=$177;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 60; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $180=$30;
   var $181=(($180)|0);
   var $182=HEAP32[(($181)>>2)];
   $29=$182;
   var $183=$29;
   var $184=(($183+12)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($183+16)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($185)|(0))==(($187)|(0));
   if ($188) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $190=$183;
   var $191=HEAP32[(($190)>>2)];
   var $192=(($191+40)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$194;
   label = 32; break;
  case 31: 
   var $196=(($183+12)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=(($197+4)|0);
   HEAP32[(($196)>>2)]=$198;
   var $199=HEAP32[(($197)>>2)];
   $27=$199;
   var $200=$27;
   $28=$200;
   label = 32; break;
  case 32: 
   var $201=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $204=$26;
   $25=$204;
   var $205=$25;
   var $206=(($205)|0);
   $24=$206;
   var $207=$24;
   var $208=$207;
   $23=$208;
   var $209=$23;
   var $210=(($209)|0);
   var $211=(($210)|0);
   var $212=$211;
   var $213=(($212)|0);
   var $214=$213;
   var $215=HEAP8[($214)];
   var $216=(($215)&(255));
   var $217=$216 & 1;
   var $218=(($217)|(0))!=0;
   if ($218) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$204;
   var $220=$19;
   var $221=(($220)|0);
   $18=$221;
   var $222=$18;
   var $223=$222;
   $17=$223;
   var $224=$17;
   var $225=(($224)|0);
   var $226=(($225)|0);
   var $227=$226;
   var $228=(($227+4)|0);
   var $229=HEAP32[(($228)>>2)];
   var $244 = $229;label = 37; break;
  case 36: 
   $22=$204;
   var $231=$22;
   var $232=(($231)|0);
   $21=$232;
   var $233=$21;
   var $234=$233;
   $20=$234;
   var $235=$20;
   var $236=(($235)|0);
   var $237=(($236)|0);
   var $238=$237;
   var $239=(($238)|0);
   var $240=$239;
   var $241=HEAP8[($240)];
   var $242=(($241)&(255));
   var $243=$242 >> 1;
   var $244 = $243;label = 37; break;
  case 37: 
   var $244;
   var $245=(($244)|(0))!=0;
   if ($245) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $247=HEAP32[(($__g_end)>>2)];
   var $248=(($__g)|0);
   var $249=$247;
   var $250=$248;
   var $251=((($249)-($250))|0);
   var $252=((((($251)|(0)))/(4))&-1);
   var $253=(($252)|(0)) < 40;
   if ($253) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $255=HEAP32[(($__dc)>>2)];
   var $256=HEAP32[(($__g_end)>>2)];
   var $257=(($256+4)|0);
   HEAP32[(($__g_end)>>2)]=$257;
   HEAP32[(($256)>>2)]=$255;
   label = 40; break;
  case 40: 
   var $259=(($__a)|0);
   var $260=HEAP32[(($__a_end)>>2)];
   var $261=$53;
   var $262=$__base;
   var $263 = (function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($259, $260, $261, $262) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $263$0 = $263;var $263$1 = tempRet0;if (!__THREW__) { label = 41; break; } else { label = 26; break; }
  case 41: 
   var $265=$54;
   var $st$0$0=(($265)|0);
   HEAP32[(($st$0$0)>>2)]=$263$0;
   var $st$1$1=(($265+4)|0);
   HEAP32[(($st$1$1)>>2)]=$263$1;
   var $266=(($__g)|0);
   var $267=HEAP32[(($__g_end)>>2)];
   var $268=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $266, $267, $268) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   $15=$__b;
   $16=$__e;
   var $270=$15;
   var $271=$16;
   $13=$270;
   $14=$271;
   var $272=$13;
   $12=$272;
   var $273=$12;
   var $274=(($273)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=(($275)|(0))!=0;
   if ($276) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $278=(($273)|0);
   var $279=HEAP32[(($278)>>2)];
   $11=$279;
   var $280=$11;
   var $281=(($280+12)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=(($280+16)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($282)|(0))==(($284)|(0));
   if ($285) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $287=$280;
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288+36)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$290]($280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 26; break; }
  case 45: 
   $10=$291;
   label = 47; break;
  case 46: 
   var $293=(($280+12)|0);
   var $294=HEAP32[(($293)>>2)];
   var $295=HEAP32[(($294)>>2)];
   $9=$295;
   var $296=$9;
   $10=$296;
   label = 47; break;
  case 47: 
   var $297=$10;
   $7=$297;
   $8=-1;
   var $298=$7;
   var $299=$8;
   var $300=(($298)|(0))==(($299)|(0));
   if ($300) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $302=(($273)|0);
   HEAP32[(($302)>>2)]=0;
   label = 49; break;
  case 49: 
   var $303=(($273)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=(($304)|(0))==0;
   var $306=(($305)&(1));
   var $307=$14;
   $6=$307;
   var $308=$6;
   var $309=(($308)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))!=0;
   if ($311) { label = 50; break; } else { label = 56; break; }
  case 50: 
   var $313=(($308)|0);
   var $314=HEAP32[(($313)>>2)];
   $5=$314;
   var $315=$5;
   var $316=(($315+12)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($315+16)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=(($317)|(0))==(($319)|(0));
   if ($320) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $322=$315;
   var $323=HEAP32[(($322)>>2)];
   var $324=(($323+36)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$325]($315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 26; break; }
  case 52: 
   $4=$326;
   label = 54; break;
  case 53: 
   var $328=(($315+12)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=HEAP32[(($329)>>2)];
   $3=$330;
   var $331=$3;
   $4=$331;
   label = 54; break;
  case 54: 
   var $332=$4;
   $1=$332;
   $2=-1;
   var $333=$1;
   var $334=$2;
   var $335=(($333)|(0))==(($334)|(0));
   if ($335) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $337=(($308)|0);
   HEAP32[(($337)>>2)]=0;
   label = 56; break;
  case 56: 
   var $338=(($308)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340=(($339)|(0))==0;
   var $341=(($340)&(1));
   var $342=(($306)|(0))==(($341)|(0));
   label = 57; break;
  case 57: 
   if ($342) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $345=$53;
   var $346=HEAP32[(($345)>>2)];
   var $347=$346 | 2;
   HEAP32[(($345)>>2)]=$347;
   label = 59; break;
  case 59: 
   var $349=$agg_result;
   var $350=$__b;
   assert(4 % 1 === 0);HEAP32[(($349)>>2)]=HEAP32[(($350)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 60: 
   var $352=$55;
   var $353=$56;
   var $354$0=$352;
   var $354$1=0;
   var $355$0=$354$0;
   var $355$1=$353;
   ___resumeException($355$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 400)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__atoms=__stackBase__;
   var $__decimal_point=(__stackBase__)+(128);
   var $__thousands_sep=(__stackBase__)+(136);
   var $__grouping=(__stackBase__)+(144);
   var $__a=(__stackBase__)+(160);
   var $__a_end=(__stackBase__)+(200);
   var $__g=(__stackBase__)+(208);
   var $__g_end=(__stackBase__)+(368);
   var $__dc=(__stackBase__)+(376);
   var $__in_units=(__stackBase__)+(384);
   var $__exp=(__stackBase__)+(392);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=(($__atoms)|0);
   __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $59, $60, $__decimal_point, $__thousands_sep);
   var $61=$__a;
   _memset($61, 0, 40);
   var $62=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$62;
   var $63=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$63;
   HEAP32[(($__dc)>>2)]=0;
   HEAP8[($__in_units)]=1;
   HEAP8[($__exp)]=69;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $65=$49;
   var $66=$50;
   $47=$65;
   $48=$66;
   var $67=$47;
   $46=$67;
   var $68=$46;
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|(0))!=0;
   if ($71) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $73=(($68)|0);
   var $74=HEAP32[(($73)>>2)];
   $45=$74;
   var $75=$45;
   var $76=(($75+12)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($75+16)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77)|(0))==(($79)|(0));
   if ($80) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $82=$75;
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+36)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$86;
   label = 7; break;
  case 6: 
   var $88=(($75+12)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=HEAP32[(($89)>>2)];
   $43=$90;
   var $91=$43;
   $44=$91;
   label = 7; break;
  case 7: 
   var $92=$44;
   $41=$92;
   $42=-1;
   var $93=$41;
   var $94=$42;
   var $95=(($93)|(0))==(($94)|(0));
   if ($95) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $97=(($68)|0);
   HEAP32[(($97)>>2)]=0;
   label = 9; break;
  case 9: 
   var $98=(($68)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99)|(0))==0;
   var $101=(($100)&(1));
   var $102=$48;
   $40=$102;
   var $103=$40;
   var $104=(($103)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=(($105)|(0))!=0;
   if ($106) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $108=(($103)|0);
   var $109=HEAP32[(($108)>>2)];
   $39=$109;
   var $110=$39;
   var $111=(($110+12)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=(($110+16)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($112)|(0))==(($114)|(0));
   if ($115) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $117=$110;
   var $118=HEAP32[(($117)>>2)];
   var $119=(($118+36)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$120]($110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$121;
   label = 14; break;
  case 13: 
   var $123=(($110+12)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=HEAP32[(($124)>>2)];
   $37=$125;
   var $126=$37;
   $38=$126;
   label = 14; break;
  case 14: 
   var $127=$38;
   $35=$127;
   $36=-1;
   var $128=$35;
   var $129=$36;
   var $130=(($128)|(0))==(($129)|(0));
   if ($130) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $132=(($103)|0);
   HEAP32[(($132)>>2)]=0;
   label = 16; break;
  case 16: 
   var $133=(($103)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=(($134)|(0))==0;
   var $136=(($135)&(1));
   var $137=(($101)|(0))==(($136)|(0));
   var $138=$137 ^ 1;
   label = 17; break;
  case 17: 
   if ($138) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $141=$34;
   var $142=(($141)|0);
   var $143=HEAP32[(($142)>>2)];
   $33=$143;
   var $144=$33;
   var $145=(($144+12)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=(($144+16)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($146)|(0))==(($148)|(0));
   if ($149) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $151=$144;
   var $152=HEAP32[(($151)>>2)];
   var $153=(($152+36)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$154]($144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$155;
   label = 22; break;
  case 21: 
   var $157=(($144+12)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=HEAP32[(($158)>>2)];
   $31=$159;
   var $160=$31;
   $32=$160;
   label = 22; break;
  case 22: 
   var $161=$32;
   label = 23; break;
  case 23: 
   var $163=(($__a)|0);
   var $164=HEAP32[(($__decimal_point)>>2)];
   var $165=HEAP32[(($__thousands_sep)>>2)];
   var $166=(($__g)|0);
   var $167=(($__atoms)|0);
   var $168 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($161, $__in_units, $__exp, $163, $__a_end, $164, $165, $__grouping, $166, $__g_end, $__dc, $167) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $170=(($168)|(0))!=0;
   if ($170) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $173$0 = ___cxa_find_matching_catch(-1, -1); $173$1 = tempRet0;
   var $174=$173$0;
   $55=$174;
   var $175=$173$1;
   $56=$175;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 61; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $178=$30;
   var $179=(($178)|0);
   var $180=HEAP32[(($179)>>2)];
   $29=$180;
   var $181=$29;
   var $182=(($181+12)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($181+16)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($183)|(0))==(($185)|(0));
   if ($186) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $188=$181;
   var $189=HEAP32[(($188)>>2)];
   var $190=(($189+40)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$192;
   label = 32; break;
  case 31: 
   var $194=(($181+12)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=(($195+4)|0);
   HEAP32[(($194)>>2)]=$196;
   var $197=HEAP32[(($195)>>2)];
   $27=$197;
   var $198=$27;
   $28=$198;
   label = 32; break;
  case 32: 
   var $199=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $202=$26;
   $25=$202;
   var $203=$25;
   var $204=(($203)|0);
   $24=$204;
   var $205=$24;
   var $206=$205;
   $23=$206;
   var $207=$23;
   var $208=(($207)|0);
   var $209=(($208)|0);
   var $210=$209;
   var $211=(($210)|0);
   var $212=$211;
   var $213=HEAP8[($212)];
   var $214=(($213)&(255));
   var $215=$214 & 1;
   var $216=(($215)|(0))!=0;
   if ($216) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$202;
   var $218=$19;
   var $219=(($218)|0);
   $18=$219;
   var $220=$18;
   var $221=$220;
   $17=$221;
   var $222=$17;
   var $223=(($222)|0);
   var $224=(($223)|0);
   var $225=$224;
   var $226=(($225+4)|0);
   var $227=HEAP32[(($226)>>2)];
   var $242 = $227;label = 37; break;
  case 36: 
   $22=$202;
   var $229=$22;
   var $230=(($229)|0);
   $21=$230;
   var $231=$21;
   var $232=$231;
   $20=$232;
   var $233=$20;
   var $234=(($233)|0);
   var $235=(($234)|0);
   var $236=$235;
   var $237=(($236)|0);
   var $238=$237;
   var $239=HEAP8[($238)];
   var $240=(($239)&(255));
   var $241=$240 >> 1;
   var $242 = $241;label = 37; break;
  case 37: 
   var $242;
   var $243=(($242)|(0))!=0;
   if ($243) { label = 38; break; } else { label = 41; break; }
  case 38: 
   var $245=HEAP8[($__in_units)];
   var $246=(($245) & 1);
   if ($246) { label = 39; break; } else { label = 41; break; }
  case 39: 
   var $248=HEAP32[(($__g_end)>>2)];
   var $249=(($__g)|0);
   var $250=$248;
   var $251=$249;
   var $252=((($250)-($251))|0);
   var $253=((((($252)|(0)))/(4))&-1);
   var $254=(($253)|(0)) < 40;
   if ($254) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $256=HEAP32[(($__dc)>>2)];
   var $257=HEAP32[(($__g_end)>>2)];
   var $258=(($257+4)|0);
   HEAP32[(($__g_end)>>2)]=$258;
   HEAP32[(($257)>>2)]=$256;
   label = 41; break;
  case 41: 
   var $260=(($__a)|0);
   var $261=HEAP32[(($__a_end)>>2)];
   var $262=$53;
   var $263 = (function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($260, $261, $262) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   var $265=$54;
   HEAPF32[(($265)>>2)]=$263;
   var $266=(($__g)|0);
   var $267=HEAP32[(($__g_end)>>2)];
   var $268=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $266, $267, $268) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 26; break; }
  case 43: 
   $15=$__b;
   $16=$__e;
   var $270=$15;
   var $271=$16;
   $13=$270;
   $14=$271;
   var $272=$13;
   $12=$272;
   var $273=$12;
   var $274=(($273)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=(($275)|(0))!=0;
   if ($276) { label = 44; break; } else { label = 50; break; }
  case 44: 
   var $278=(($273)|0);
   var $279=HEAP32[(($278)>>2)];
   $11=$279;
   var $280=$11;
   var $281=(($280+12)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=(($280+16)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($282)|(0))==(($284)|(0));
   if ($285) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $287=$280;
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288+36)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$290]($280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 26; break; }
  case 46: 
   $10=$291;
   label = 48; break;
  case 47: 
   var $293=(($280+12)|0);
   var $294=HEAP32[(($293)>>2)];
   var $295=HEAP32[(($294)>>2)];
   $9=$295;
   var $296=$9;
   $10=$296;
   label = 48; break;
  case 48: 
   var $297=$10;
   $7=$297;
   $8=-1;
   var $298=$7;
   var $299=$8;
   var $300=(($298)|(0))==(($299)|(0));
   if ($300) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $302=(($273)|0);
   HEAP32[(($302)>>2)]=0;
   label = 50; break;
  case 50: 
   var $303=(($273)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=(($304)|(0))==0;
   var $306=(($305)&(1));
   var $307=$14;
   $6=$307;
   var $308=$6;
   var $309=(($308)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))!=0;
   if ($311) { label = 51; break; } else { label = 57; break; }
  case 51: 
   var $313=(($308)|0);
   var $314=HEAP32[(($313)>>2)];
   $5=$314;
   var $315=$5;
   var $316=(($315+12)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($315+16)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=(($317)|(0))==(($319)|(0));
   if ($320) { label = 52; break; } else { label = 54; break; }
  case 52: 
   var $322=$315;
   var $323=HEAP32[(($322)>>2)];
   var $324=(($323+36)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$325]($315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 26; break; }
  case 53: 
   $4=$326;
   label = 55; break;
  case 54: 
   var $328=(($315+12)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=HEAP32[(($329)>>2)];
   $3=$330;
   var $331=$3;
   $4=$331;
   label = 55; break;
  case 55: 
   var $332=$4;
   $1=$332;
   $2=-1;
   var $333=$1;
   var $334=$2;
   var $335=(($333)|(0))==(($334)|(0));
   if ($335) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $337=(($308)|0);
   HEAP32[(($337)>>2)]=0;
   label = 57; break;
  case 57: 
   var $338=(($308)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340=(($339)|(0))==0;
   var $341=(($340)&(1));
   var $342=(($306)|(0))==(($341)|(0));
   label = 58; break;
  case 58: 
   if ($342) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $345=$53;
   var $346=HEAP32[(($345)>>2)];
   var $347=$346 | 2;
   HEAP32[(($345)>>2)]=$347;
   label = 60; break;
  case 60: 
   var $349=$agg_result;
   var $350=$__b;
   assert(4 % 1 === 0);HEAP32[(($349)>>2)]=HEAP32[(($350)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 61: 
   var $352=$55;
   var $353=$56;
   var $354$0=$352;
   var $354$1=0;
   var $355$0=$354$0;
   var $355$1=$353;
   ___resumeException($355$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg_result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $__loc=__stackBase__;
   var $14;
   var $15;
   var $__np;
   var $16;
   $10=$__iob;
   $11=$__atoms;
   $12=$__decimal_point;
   $13=$__thousands_sep;
   var $17=$10;
   __ZNKSt3__18ios_base6getlocEv($__loc, $17);
   $9=$__loc;
   var $18=$9;
   var $19 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($18, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 14; break; }
  case 2: 
   var $20=$19;
   label = 3; break;
  case 3: 
   var $22=$11;
   $5=$20;
   $6=((20272)|0);
   $7=((20304)|0);
   $8=$22;
   var $23=$5;
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+48)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$6;
   var $29=$7;
   var $30=$8;
   var $31 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($23, $28, $29, $30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 14; break; }
  case 4: 
   label = 5; break;
  case 5: 
   $4=$__loc;
   var $33=$4;
   var $34 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($33, 19424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 14; break; }
  case 6: 
   var $35=$34;
   label = 7; break;
  case 7: 
   $__np=$35;
   var $37=$__np;
   $3=$37;
   var $38=$3;
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40+12)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 14; break; }
  case 8: 
   label = 9; break;
  case 9: 
   var $45=$12;
   HEAP32[(($45)>>2)]=$43;
   var $46=$__np;
   $2=$46;
   var $47=$2;
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+16)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 14; break; }
  case 10: 
   label = 11; break;
  case 11: 
   var $54=$13;
   HEAP32[(($54)>>2)]=$52;
   var $55=$__np;
   $1=$55;
   var $56=$1;
   var $57=$56;
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+20)|0);
   var $60=HEAP32[(($59)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]($agg_result, $56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 14; break; }
  case 12: 
   label = 13; break;
  case 13: 
   $16=1;
   __ZNSt3__16localeD2Ev($__loc);
   STACKTOP = __stackBase__;
   return;
  case 14: 
   var $63$0 = ___cxa_find_matching_catch(-1, -1); $63$1 = tempRet0;
   var $64=$63$0;
   $14=$64;
   var $65=$63$1;
   $15=$65;
   __ZNSt3__16localeD2Ev($__loc);
   label = 15; break;
  case 15: 
   var $67=$14;
   var $68=$15;
   var $69$0=$67;
   var $69$1=0;
   var $70$0=$69$0;
   var $70$1=$68;
   ___resumeException($70$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35=__stackBase__;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $__f;
   var $__x;
   HEAP32[(($35)>>2)]=$__ct;
   $36=$__in_units;
   $37=$__exp;
   $38=$__a;
   $39=$__a_end;
   $40=$__decimal_point;
   $41=$__thousands_sep;
   $42=$__grouping;
   $43=$__g;
   $44=$__g_end;
   $45=$__dc;
   $46=$__atoms;
   var $47=$39;
   var $48=HEAP32[(($47)>>2)];
   var $49=$38;
   var $50=$48;
   var $51=$49;
   var $52=((($50)-($51))|0);
   var $53=(($52)|(0)) >= 39;
   if ($53) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $34=-1;
   label = 55; break;
  case 3: 
   var $56=HEAP32[(($35)>>2)];
   var $57=$40;
   var $58=(($56)|(0))==(($57)|(0));
   if ($58) { label = 4; break; } else { label = 13; break; }
  case 4: 
   var $60=$36;
   var $61=HEAP8[($60)];
   var $62=(($61) & 1);
   if ($62) { label = 6; break; } else { label = 5; break; }
  case 5: 
   $34=-1;
   label = 55; break;
  case 6: 
   var $65=$36;
   HEAP8[($65)]=0;
   var $66=$39;
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67+1)|0);
   HEAP32[(($66)>>2)]=$68;
   HEAP8[($67)]=46;
   var $69=$42;
   $33=$69;
   var $70=$33;
   $32=$70;
   var $71=$32;
   var $72=(($71)|0);
   $31=$72;
   var $73=$31;
   var $74=$73;
   $30=$74;
   var $75=$30;
   var $76=(($75)|0);
   var $77=(($76)|0);
   var $78=$77;
   var $79=(($78)|0);
   var $80=$79;
   var $81=HEAP8[($80)];
   var $82=(($81)&(255));
   var $83=$82 & 1;
   var $84=(($83)|(0))!=0;
   if ($84) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $26=$70;
   var $86=$26;
   var $87=(($86)|0);
   $25=$87;
   var $88=$25;
   var $89=$88;
   $24=$89;
   var $90=$24;
   var $91=(($90)|0);
   var $92=(($91)|0);
   var $93=$92;
   var $94=(($93+4)|0);
   var $95=HEAP32[(($94)>>2)];
   var $110 = $95;label = 9; break;
  case 8: 
   $29=$70;
   var $97=$29;
   var $98=(($97)|0);
   $28=$98;
   var $99=$28;
   var $100=$99;
   $27=$100;
   var $101=$27;
   var $102=(($101)|0);
   var $103=(($102)|0);
   var $104=$103;
   var $105=(($104)|0);
   var $106=$105;
   var $107=HEAP8[($106)];
   var $108=(($107)&(255));
   var $109=$108 >> 1;
   var $110 = $109;label = 9; break;
  case 9: 
   var $110;
   var $111=(($110)|(0))!=0;
   if ($111) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $113=$44;
   var $114=HEAP32[(($113)>>2)];
   var $115=$43;
   var $116=$114;
   var $117=$115;
   var $118=((($116)-($117))|0);
   var $119=((((($118)|(0)))/(4))&-1);
   var $120=(($119)|(0)) < 40;
   if ($120) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $122=$45;
   var $123=HEAP32[(($122)>>2)];
   var $124=$44;
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125+4)|0);
   HEAP32[(($124)>>2)]=$126;
   HEAP32[(($125)>>2)]=$123;
   label = 12; break;
  case 12: 
   $34=0;
   label = 55; break;
  case 13: 
   var $129=HEAP32[(($35)>>2)];
   var $130=$41;
   var $131=(($129)|(0))==(($130)|(0));
   if ($131) { label = 14; break; } else { label = 23; break; }
  case 14: 
   var $133=$42;
   $10=$133;
   var $134=$10;
   $9=$134;
   var $135=$9;
   var $136=(($135)|0);
   $8=$136;
   var $137=$8;
   var $138=$137;
   $7=$138;
   var $139=$7;
   var $140=(($139)|0);
   var $141=(($140)|0);
   var $142=$141;
   var $143=(($142)|0);
   var $144=$143;
   var $145=HEAP8[($144)];
   var $146=(($145)&(255));
   var $147=$146 & 1;
   var $148=(($147)|(0))!=0;
   if ($148) { label = 15; break; } else { label = 16; break; }
  case 15: 
   $3=$134;
   var $150=$3;
   var $151=(($150)|0);
   $2=$151;
   var $152=$2;
   var $153=$152;
   $1=$153;
   var $154=$1;
   var $155=(($154)|0);
   var $156=(($155)|0);
   var $157=$156;
   var $158=(($157+4)|0);
   var $159=HEAP32[(($158)>>2)];
   var $174 = $159;label = 17; break;
  case 16: 
   $6=$134;
   var $161=$6;
   var $162=(($161)|0);
   $5=$162;
   var $163=$5;
   var $164=$163;
   $4=$164;
   var $165=$4;
   var $166=(($165)|0);
   var $167=(($166)|0);
   var $168=$167;
   var $169=(($168)|0);
   var $170=$169;
   var $171=HEAP8[($170)];
   var $172=(($171)&(255));
   var $173=$172 >> 1;
   var $174 = $173;label = 17; break;
  case 17: 
   var $174;
   var $175=(($174)|(0))!=0;
   if ($175) { label = 18; break; } else { label = 23; break; }
  case 18: 
   var $177=$36;
   var $178=HEAP8[($177)];
   var $179=(($178) & 1);
   if ($179) { label = 20; break; } else { label = 19; break; }
  case 19: 
   $34=-1;
   label = 55; break;
  case 20: 
   var $182=$44;
   var $183=HEAP32[(($182)>>2)];
   var $184=$43;
   var $185=$183;
   var $186=$184;
   var $187=((($185)-($186))|0);
   var $188=((((($187)|(0)))/(4))&-1);
   var $189=(($188)|(0)) < 40;
   if ($189) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $191=$45;
   var $192=HEAP32[(($191)>>2)];
   var $193=$44;
   var $194=HEAP32[(($193)>>2)];
   var $195=(($194+4)|0);
   HEAP32[(($193)>>2)]=$195;
   HEAP32[(($194)>>2)]=$192;
   var $196=$45;
   HEAP32[(($196)>>2)]=0;
   label = 22; break;
  case 22: 
   $34=0;
   label = 55; break;
  case 23: 
   var $199=$46;
   var $200=$46;
   var $201=(($200+128)|0);
   $11=$199;
   $12=$201;
   $13=$35;
   label = 24; break;
  case 24: 
   var $203=$11;
   var $204=$12;
   var $205=(($203)|(0))!=(($204)|(0));
   if ($205) { label = 25; break; } else { label = 28; break; }
  case 25: 
   var $207=$11;
   var $208=HEAP32[(($207)>>2)];
   var $209=$13;
   var $210=HEAP32[(($209)>>2)];
   var $211=(($208)|(0))==(($210)|(0));
   if ($211) { label = 26; break; } else { label = 27; break; }
  case 26: 
   label = 28; break;
  case 27: 
   var $214=$11;
   var $215=(($214+4)|0);
   $11=$215;
   label = 24; break;
  case 28: 
   var $216=$11;
   var $217=$46;
   var $218=$216;
   var $219=$217;
   var $220=((($218)-($219))|0);
   var $221=((((($220)|(0)))/(4))&-1);
   $__f=$221;
   var $222=$__f;
   var $223=(($222)|(0)) >= 32;
   if ($223) { label = 29; break; } else { label = 30; break; }
  case 29: 
   $34=-1;
   label = 55; break;
  case 30: 
   var $226=$__f;
   var $227=((20272+$226)|0);
   var $228=HEAP8[($227)];
   $__x=$228;
   var $229=$__x;
   var $230=(($229 << 24) >> 24);
   var $231=(($230)|(0))==45;
   if ($231) { label = 32; break; } else { label = 31; break; }
  case 31: 
   var $233=$__x;
   var $234=(($233 << 24) >> 24);
   var $235=(($234)|(0))==43;
   if ($235) { label = 32; break; } else { label = 36; break; }
  case 32: 
   var $237=$39;
   var $238=HEAP32[(($237)>>2)];
   var $239=$38;
   var $240=(($238)|(0))==(($239)|(0));
   if ($240) { label = 34; break; } else { label = 33; break; }
  case 33: 
   var $242=$39;
   var $243=HEAP32[(($242)>>2)];
   var $244=((($243)-(1))|0);
   var $245=HEAP8[($244)];
   var $246=(($245 << 24) >> 24);
   var $247=$246 & 95;
   var $248=$37;
   var $249=HEAP8[($248)];
   var $250=(($249 << 24) >> 24);
   var $251=$250 & 127;
   var $252=(($247)|(0))==(($251)|(0));
   if ($252) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $254=$__x;
   var $255=$39;
   var $256=HEAP32[(($255)>>2)];
   var $257=(($256+1)|0);
   HEAP32[(($255)>>2)]=$257;
   HEAP8[($256)]=$254;
   $34=0;
   label = 55; break;
  case 35: 
   $34=-1;
   label = 55; break;
  case 36: 
   var $260=$__x;
   var $261=(($260 << 24) >> 24);
   var $262=(($261)|(0))==120;
   if ($262) { label = 38; break; } else { label = 37; break; }
  case 37: 
   var $264=$__x;
   var $265=(($264 << 24) >> 24);
   var $266=(($265)|(0))==88;
   if ($266) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $268=$37;
   HEAP8[($268)]=80;
   label = 50; break;
  case 39: 
   var $270=$__x;
   var $271=(($270 << 24) >> 24);
   var $272=$271 & 95;
   var $273=$37;
   var $274=HEAP8[($273)];
   var $275=(($274 << 24) >> 24);
   var $276=(($272)|(0))==(($275)|(0));
   if ($276) { label = 40; break; } else { label = 49; break; }
  case 40: 
   var $278=$37;
   var $279=HEAP8[($278)];
   var $280=(($279 << 24) >> 24);
   var $281=$280 | 128;
   var $282=(($281) & 255);
   HEAP8[($278)]=$282;
   var $283=$36;
   var $284=HEAP8[($283)];
   var $285=(($284) & 1);
   if ($285) { label = 41; break; } else { label = 48; break; }
  case 41: 
   var $287=$36;
   HEAP8[($287)]=0;
   var $288=$42;
   $23=$288;
   var $289=$23;
   $22=$289;
   var $290=$22;
   var $291=(($290)|0);
   $21=$291;
   var $292=$21;
   var $293=$292;
   $20=$293;
   var $294=$20;
   var $295=(($294)|0);
   var $296=(($295)|0);
   var $297=$296;
   var $298=(($297)|0);
   var $299=$298;
   var $300=HEAP8[($299)];
   var $301=(($300)&(255));
   var $302=$301 & 1;
   var $303=(($302)|(0))!=0;
   if ($303) { label = 42; break; } else { label = 43; break; }
  case 42: 
   $16=$289;
   var $305=$16;
   var $306=(($305)|0);
   $15=$306;
   var $307=$15;
   var $308=$307;
   $14=$308;
   var $309=$14;
   var $310=(($309)|0);
   var $311=(($310)|0);
   var $312=$311;
   var $313=(($312+4)|0);
   var $314=HEAP32[(($313)>>2)];
   var $329 = $314;label = 44; break;
  case 43: 
   $19=$289;
   var $316=$19;
   var $317=(($316)|0);
   $18=$317;
   var $318=$18;
   var $319=$318;
   $17=$319;
   var $320=$17;
   var $321=(($320)|0);
   var $322=(($321)|0);
   var $323=$322;
   var $324=(($323)|0);
   var $325=$324;
   var $326=HEAP8[($325)];
   var $327=(($326)&(255));
   var $328=$327 >> 1;
   var $329 = $328;label = 44; break;
  case 44: 
   var $329;
   var $330=(($329)|(0))!=0;
   if ($330) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $332=$44;
   var $333=HEAP32[(($332)>>2)];
   var $334=$43;
   var $335=$333;
   var $336=$334;
   var $337=((($335)-($336))|0);
   var $338=((((($337)|(0)))/(4))&-1);
   var $339=(($338)|(0)) < 40;
   if ($339) { label = 46; break; } else { label = 47; break; }
  case 46: 
   var $341=$45;
   var $342=HEAP32[(($341)>>2)];
   var $343=$44;
   var $344=HEAP32[(($343)>>2)];
   var $345=(($344+4)|0);
   HEAP32[(($343)>>2)]=$345;
   HEAP32[(($344)>>2)]=$342;
   label = 47; break;
  case 47: 
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   label = 50; break;
  case 50: 
   var $350=$39;
   var $351=HEAP32[(($350)>>2)];
   var $352=$38;
   var $353=$351;
   var $354=$352;
   var $355=((($353)-($354))|0);
   var $356=$37;
   var $357=HEAP8[($356)];
   var $358=(($357 << 24) >> 24);
   var $359=$358 & 128;
   var $360=(($359)|(0))!=0;
   var $361=$360 ? 1 : 11;
   var $362=(((40)-($361))|0);
   var $363=(($355)|(0)) < (($362)|(0));
   if ($363) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $365=$__x;
   var $366=$39;
   var $367=HEAP32[(($366)>>2)];
   var $368=(($367+1)|0);
   HEAP32[(($366)>>2)]=$368;
   HEAP8[($367)]=$365;
   label = 52; break;
  case 52: 
   var $370=$__f;
   var $371=(($370)|(0)) >= 22;
   if ($371) { label = 53; break; } else { label = 54; break; }
  case 53: 
   $34=0;
   label = 55; break;
  case 54: 
   var $374=$45;
   var $375=HEAP32[(($374)>>2)];
   var $376=((($375)+(1))|0);
   HEAP32[(($374)>>2)]=$376;
   $34=0;
   label = 55; break;
  case 55: 
   var $378=$34;
   STACKTOP = __stackBase__;
   return $378;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 400)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__atoms=__stackBase__;
   var $__decimal_point=(__stackBase__)+(128);
   var $__thousands_sep=(__stackBase__)+(136);
   var $__grouping=(__stackBase__)+(144);
   var $__a=(__stackBase__)+(160);
   var $__a_end=(__stackBase__)+(200);
   var $__g=(__stackBase__)+(208);
   var $__g_end=(__stackBase__)+(368);
   var $__dc=(__stackBase__)+(376);
   var $__in_units=(__stackBase__)+(384);
   var $__exp=(__stackBase__)+(392);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=(($__atoms)|0);
   __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $59, $60, $__decimal_point, $__thousands_sep);
   var $61=$__a;
   _memset($61, 0, 40);
   var $62=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$62;
   var $63=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$63;
   HEAP32[(($__dc)>>2)]=0;
   HEAP8[($__in_units)]=1;
   HEAP8[($__exp)]=69;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $65=$49;
   var $66=$50;
   $47=$65;
   $48=$66;
   var $67=$47;
   $46=$67;
   var $68=$46;
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|(0))!=0;
   if ($71) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $73=(($68)|0);
   var $74=HEAP32[(($73)>>2)];
   $45=$74;
   var $75=$45;
   var $76=(($75+12)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($75+16)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77)|(0))==(($79)|(0));
   if ($80) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $82=$75;
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+36)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$86;
   label = 7; break;
  case 6: 
   var $88=(($75+12)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=HEAP32[(($89)>>2)];
   $43=$90;
   var $91=$43;
   $44=$91;
   label = 7; break;
  case 7: 
   var $92=$44;
   $41=$92;
   $42=-1;
   var $93=$41;
   var $94=$42;
   var $95=(($93)|(0))==(($94)|(0));
   if ($95) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $97=(($68)|0);
   HEAP32[(($97)>>2)]=0;
   label = 9; break;
  case 9: 
   var $98=(($68)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99)|(0))==0;
   var $101=(($100)&(1));
   var $102=$48;
   $40=$102;
   var $103=$40;
   var $104=(($103)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=(($105)|(0))!=0;
   if ($106) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $108=(($103)|0);
   var $109=HEAP32[(($108)>>2)];
   $39=$109;
   var $110=$39;
   var $111=(($110+12)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=(($110+16)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($112)|(0))==(($114)|(0));
   if ($115) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $117=$110;
   var $118=HEAP32[(($117)>>2)];
   var $119=(($118+36)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$120]($110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$121;
   label = 14; break;
  case 13: 
   var $123=(($110+12)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=HEAP32[(($124)>>2)];
   $37=$125;
   var $126=$37;
   $38=$126;
   label = 14; break;
  case 14: 
   var $127=$38;
   $35=$127;
   $36=-1;
   var $128=$35;
   var $129=$36;
   var $130=(($128)|(0))==(($129)|(0));
   if ($130) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $132=(($103)|0);
   HEAP32[(($132)>>2)]=0;
   label = 16; break;
  case 16: 
   var $133=(($103)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=(($134)|(0))==0;
   var $136=(($135)&(1));
   var $137=(($101)|(0))==(($136)|(0));
   var $138=$137 ^ 1;
   label = 17; break;
  case 17: 
   if ($138) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $141=$34;
   var $142=(($141)|0);
   var $143=HEAP32[(($142)>>2)];
   $33=$143;
   var $144=$33;
   var $145=(($144+12)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=(($144+16)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($146)|(0))==(($148)|(0));
   if ($149) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $151=$144;
   var $152=HEAP32[(($151)>>2)];
   var $153=(($152+36)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$154]($144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$155;
   label = 22; break;
  case 21: 
   var $157=(($144+12)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=HEAP32[(($158)>>2)];
   $31=$159;
   var $160=$31;
   $32=$160;
   label = 22; break;
  case 22: 
   var $161=$32;
   label = 23; break;
  case 23: 
   var $163=(($__a)|0);
   var $164=HEAP32[(($__decimal_point)>>2)];
   var $165=HEAP32[(($__thousands_sep)>>2)];
   var $166=(($__g)|0);
   var $167=(($__atoms)|0);
   var $168 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($161, $__in_units, $__exp, $163, $__a_end, $164, $165, $__grouping, $166, $__g_end, $__dc, $167) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $170=(($168)|(0))!=0;
   if ($170) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $173$0 = ___cxa_find_matching_catch(-1, -1); $173$1 = tempRet0;
   var $174=$173$0;
   $55=$174;
   var $175=$173$1;
   $56=$175;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 61; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $178=$30;
   var $179=(($178)|0);
   var $180=HEAP32[(($179)>>2)];
   $29=$180;
   var $181=$29;
   var $182=(($181+12)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($181+16)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($183)|(0))==(($185)|(0));
   if ($186) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $188=$181;
   var $189=HEAP32[(($188)>>2)];
   var $190=(($189+40)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$192;
   label = 32; break;
  case 31: 
   var $194=(($181+12)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=(($195+4)|0);
   HEAP32[(($194)>>2)]=$196;
   var $197=HEAP32[(($195)>>2)];
   $27=$197;
   var $198=$27;
   $28=$198;
   label = 32; break;
  case 32: 
   var $199=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $202=$26;
   $25=$202;
   var $203=$25;
   var $204=(($203)|0);
   $24=$204;
   var $205=$24;
   var $206=$205;
   $23=$206;
   var $207=$23;
   var $208=(($207)|0);
   var $209=(($208)|0);
   var $210=$209;
   var $211=(($210)|0);
   var $212=$211;
   var $213=HEAP8[($212)];
   var $214=(($213)&(255));
   var $215=$214 & 1;
   var $216=(($215)|(0))!=0;
   if ($216) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$202;
   var $218=$19;
   var $219=(($218)|0);
   $18=$219;
   var $220=$18;
   var $221=$220;
   $17=$221;
   var $222=$17;
   var $223=(($222)|0);
   var $224=(($223)|0);
   var $225=$224;
   var $226=(($225+4)|0);
   var $227=HEAP32[(($226)>>2)];
   var $242 = $227;label = 37; break;
  case 36: 
   $22=$202;
   var $229=$22;
   var $230=(($229)|0);
   $21=$230;
   var $231=$21;
   var $232=$231;
   $20=$232;
   var $233=$20;
   var $234=(($233)|0);
   var $235=(($234)|0);
   var $236=$235;
   var $237=(($236)|0);
   var $238=$237;
   var $239=HEAP8[($238)];
   var $240=(($239)&(255));
   var $241=$240 >> 1;
   var $242 = $241;label = 37; break;
  case 37: 
   var $242;
   var $243=(($242)|(0))!=0;
   if ($243) { label = 38; break; } else { label = 41; break; }
  case 38: 
   var $245=HEAP8[($__in_units)];
   var $246=(($245) & 1);
   if ($246) { label = 39; break; } else { label = 41; break; }
  case 39: 
   var $248=HEAP32[(($__g_end)>>2)];
   var $249=(($__g)|0);
   var $250=$248;
   var $251=$249;
   var $252=((($250)-($251))|0);
   var $253=((((($252)|(0)))/(4))&-1);
   var $254=(($253)|(0)) < 40;
   if ($254) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $256=HEAP32[(($__dc)>>2)];
   var $257=HEAP32[(($__g_end)>>2)];
   var $258=(($257+4)|0);
   HEAP32[(($__g_end)>>2)]=$258;
   HEAP32[(($257)>>2)]=$256;
   label = 41; break;
  case 41: 
   var $260=(($__a)|0);
   var $261=HEAP32[(($__a_end)>>2)];
   var $262=$53;
   var $263 = (function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($260, $261, $262) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   var $265=$54;
   HEAPF64[(($265)>>3)]=$263;
   var $266=(($__g)|0);
   var $267=HEAP32[(($__g_end)>>2)];
   var $268=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $266, $267, $268) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 26; break; }
  case 43: 
   $15=$__b;
   $16=$__e;
   var $270=$15;
   var $271=$16;
   $13=$270;
   $14=$271;
   var $272=$13;
   $12=$272;
   var $273=$12;
   var $274=(($273)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=(($275)|(0))!=0;
   if ($276) { label = 44; break; } else { label = 50; break; }
  case 44: 
   var $278=(($273)|0);
   var $279=HEAP32[(($278)>>2)];
   $11=$279;
   var $280=$11;
   var $281=(($280+12)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=(($280+16)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($282)|(0))==(($284)|(0));
   if ($285) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $287=$280;
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288+36)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$290]($280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 26; break; }
  case 46: 
   $10=$291;
   label = 48; break;
  case 47: 
   var $293=(($280+12)|0);
   var $294=HEAP32[(($293)>>2)];
   var $295=HEAP32[(($294)>>2)];
   $9=$295;
   var $296=$9;
   $10=$296;
   label = 48; break;
  case 48: 
   var $297=$10;
   $7=$297;
   $8=-1;
   var $298=$7;
   var $299=$8;
   var $300=(($298)|(0))==(($299)|(0));
   if ($300) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $302=(($273)|0);
   HEAP32[(($302)>>2)]=0;
   label = 50; break;
  case 50: 
   var $303=(($273)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=(($304)|(0))==0;
   var $306=(($305)&(1));
   var $307=$14;
   $6=$307;
   var $308=$6;
   var $309=(($308)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))!=0;
   if ($311) { label = 51; break; } else { label = 57; break; }
  case 51: 
   var $313=(($308)|0);
   var $314=HEAP32[(($313)>>2)];
   $5=$314;
   var $315=$5;
   var $316=(($315+12)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($315+16)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=(($317)|(0))==(($319)|(0));
   if ($320) { label = 52; break; } else { label = 54; break; }
  case 52: 
   var $322=$315;
   var $323=HEAP32[(($322)>>2)];
   var $324=(($323+36)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$325]($315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 26; break; }
  case 53: 
   $4=$326;
   label = 55; break;
  case 54: 
   var $328=(($315+12)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=HEAP32[(($329)>>2)];
   $3=$330;
   var $331=$3;
   $4=$331;
   label = 55; break;
  case 55: 
   var $332=$4;
   $1=$332;
   $2=-1;
   var $333=$1;
   var $334=$2;
   var $335=(($333)|(0))==(($334)|(0));
   if ($335) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $337=(($308)|0);
   HEAP32[(($337)>>2)]=0;
   label = 57; break;
  case 57: 
   var $338=(($308)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340=(($339)|(0))==0;
   var $341=(($340)&(1));
   var $342=(($306)|(0))==(($341)|(0));
   label = 58; break;
  case 58: 
   if ($342) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $345=$53;
   var $346=HEAP32[(($345)>>2)];
   var $347=$346 | 2;
   HEAP32[(($345)>>2)]=$347;
   label = 60; break;
  case 60: 
   var $349=$agg_result;
   var $350=$__b;
   assert(4 % 1 === 0);HEAP32[(($349)>>2)]=HEAP32[(($350)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 61: 
   var $352=$55;
   var $353=$56;
   var $354$0=$352;
   var $354$1=0;
   var $355$0=$354$0;
   var $355$1=$353;
   ___resumeException($355$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 400)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $__atoms=__stackBase__;
   var $__decimal_point=(__stackBase__)+(128);
   var $__thousands_sep=(__stackBase__)+(136);
   var $__grouping=(__stackBase__)+(144);
   var $__a=(__stackBase__)+(160);
   var $__a_end=(__stackBase__)+(200);
   var $__g=(__stackBase__)+(208);
   var $__g_end=(__stackBase__)+(368);
   var $__dc=(__stackBase__)+(376);
   var $__in_units=(__stackBase__)+(384);
   var $__exp=(__stackBase__)+(392);
   var $55;
   var $56;
   var $57;
   $51=$this;
   $52=$__iob;
   $53=$__err;
   $54=$__v;
   var $58=$51;
   var $59=$52;
   var $60=(($__atoms)|0);
   __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $59, $60, $__decimal_point, $__thousands_sep);
   var $61=$__a;
   _memset($61, 0, 40);
   var $62=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$62;
   var $63=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$63;
   HEAP32[(($__dc)>>2)]=0;
   HEAP8[($__in_units)]=1;
   HEAP8[($__exp)]=69;
   label = 2; break;
  case 2: 
   $49=$__b;
   $50=$__e;
   var $65=$49;
   var $66=$50;
   $47=$65;
   $48=$66;
   var $67=$47;
   $46=$67;
   var $68=$46;
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|(0))!=0;
   if ($71) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $73=(($68)|0);
   var $74=HEAP32[(($73)>>2)];
   $45=$74;
   var $75=$45;
   var $76=(($75+12)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($75+16)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($77)|(0))==(($79)|(0));
   if ($80) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $82=$75;
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+36)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 26; break; }
  case 5: 
   $44=$86;
   label = 7; break;
  case 6: 
   var $88=(($75+12)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=HEAP32[(($89)>>2)];
   $43=$90;
   var $91=$43;
   $44=$91;
   label = 7; break;
  case 7: 
   var $92=$44;
   $41=$92;
   $42=-1;
   var $93=$41;
   var $94=$42;
   var $95=(($93)|(0))==(($94)|(0));
   if ($95) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $97=(($68)|0);
   HEAP32[(($97)>>2)]=0;
   label = 9; break;
  case 9: 
   var $98=(($68)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99)|(0))==0;
   var $101=(($100)&(1));
   var $102=$48;
   $40=$102;
   var $103=$40;
   var $104=(($103)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=(($105)|(0))!=0;
   if ($106) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $108=(($103)|0);
   var $109=HEAP32[(($108)>>2)];
   $39=$109;
   var $110=$39;
   var $111=(($110+12)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=(($110+16)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($112)|(0))==(($114)|(0));
   if ($115) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $117=$110;
   var $118=HEAP32[(($117)>>2)];
   var $119=(($118+36)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$120]($110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 26; break; }
  case 12: 
   $38=$121;
   label = 14; break;
  case 13: 
   var $123=(($110+12)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=HEAP32[(($124)>>2)];
   $37=$125;
   var $126=$37;
   $38=$126;
   label = 14; break;
  case 14: 
   var $127=$38;
   $35=$127;
   $36=-1;
   var $128=$35;
   var $129=$36;
   var $130=(($128)|(0))==(($129)|(0));
   if ($130) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $132=(($103)|0);
   HEAP32[(($132)>>2)]=0;
   label = 16; break;
  case 16: 
   var $133=(($103)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=(($134)|(0))==0;
   var $136=(($135)&(1));
   var $137=(($101)|(0))==(($136)|(0));
   var $138=$137 ^ 1;
   label = 17; break;
  case 17: 
   if ($138) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $34=$__b;
   var $141=$34;
   var $142=(($141)|0);
   var $143=HEAP32[(($142)>>2)];
   $33=$143;
   var $144=$33;
   var $145=(($144+12)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=(($144+16)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($146)|(0))==(($148)|(0));
   if ($149) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $151=$144;
   var $152=HEAP32[(($151)>>2)];
   var $153=(($152+36)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$154]($144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $32=$155;
   label = 22; break;
  case 21: 
   var $157=(($144+12)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=HEAP32[(($158)>>2)];
   $31=$159;
   var $160=$31;
   $32=$160;
   label = 22; break;
  case 22: 
   var $161=$32;
   label = 23; break;
  case 23: 
   var $163=(($__a)|0);
   var $164=HEAP32[(($__decimal_point)>>2)];
   var $165=HEAP32[(($__thousands_sep)>>2)];
   var $166=(($__g)|0);
   var $167=(($__atoms)|0);
   var $168 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($161, $__in_units, $__exp, $163, $__a_end, $164, $165, $__grouping, $166, $__g_end, $__dc, $167) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $170=(($168)|(0))!=0;
   if ($170) { label = 25; break; } else { label = 27; break; }
  case 25: 
   label = 34; break;
  case 26: 
   var $173$0 = ___cxa_find_matching_catch(-1, -1); $173$1 = tempRet0;
   var $174=$173$0;
   $55=$174;
   var $175=$173$1;
   $56=$175;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 61; break;
  case 27: 
   label = 28; break;
  case 28: 
   $30=$__b;
   var $178=$30;
   var $179=(($178)|0);
   var $180=HEAP32[(($179)>>2)];
   $29=$180;
   var $181=$29;
   var $182=(($181+12)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($181+16)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($183)|(0))==(($185)|(0));
   if ($186) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $188=$181;
   var $189=HEAP32[(($188)>>2)];
   var $190=(($189+40)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 26; break; }
  case 30: 
   $28=$192;
   label = 32; break;
  case 31: 
   var $194=(($181+12)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=(($195+4)|0);
   HEAP32[(($194)>>2)]=$196;
   var $197=HEAP32[(($195)>>2)];
   $27=$197;
   var $198=$27;
   $28=$198;
   label = 32; break;
  case 32: 
   var $199=$28;
   label = 33; break;
  case 33: 
   label = 2; break;
  case 34: 
   $26=$__grouping;
   var $202=$26;
   $25=$202;
   var $203=$25;
   var $204=(($203)|0);
   $24=$204;
   var $205=$24;
   var $206=$205;
   $23=$206;
   var $207=$23;
   var $208=(($207)|0);
   var $209=(($208)|0);
   var $210=$209;
   var $211=(($210)|0);
   var $212=$211;
   var $213=HEAP8[($212)];
   var $214=(($213)&(255));
   var $215=$214 & 1;
   var $216=(($215)|(0))!=0;
   if ($216) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $19=$202;
   var $218=$19;
   var $219=(($218)|0);
   $18=$219;
   var $220=$18;
   var $221=$220;
   $17=$221;
   var $222=$17;
   var $223=(($222)|0);
   var $224=(($223)|0);
   var $225=$224;
   var $226=(($225+4)|0);
   var $227=HEAP32[(($226)>>2)];
   var $242 = $227;label = 37; break;
  case 36: 
   $22=$202;
   var $229=$22;
   var $230=(($229)|0);
   $21=$230;
   var $231=$21;
   var $232=$231;
   $20=$232;
   var $233=$20;
   var $234=(($233)|0);
   var $235=(($234)|0);
   var $236=$235;
   var $237=(($236)|0);
   var $238=$237;
   var $239=HEAP8[($238)];
   var $240=(($239)&(255));
   var $241=$240 >> 1;
   var $242 = $241;label = 37; break;
  case 37: 
   var $242;
   var $243=(($242)|(0))!=0;
   if ($243) { label = 38; break; } else { label = 41; break; }
  case 38: 
   var $245=HEAP8[($__in_units)];
   var $246=(($245) & 1);
   if ($246) { label = 39; break; } else { label = 41; break; }
  case 39: 
   var $248=HEAP32[(($__g_end)>>2)];
   var $249=(($__g)|0);
   var $250=$248;
   var $251=$249;
   var $252=((($250)-($251))|0);
   var $253=((((($252)|(0)))/(4))&-1);
   var $254=(($253)|(0)) < 40;
   if ($254) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $256=HEAP32[(($__dc)>>2)];
   var $257=HEAP32[(($__g_end)>>2)];
   var $258=(($257+4)|0);
   HEAP32[(($__g_end)>>2)]=$258;
   HEAP32[(($257)>>2)]=$256;
   label = 41; break;
  case 41: 
   var $260=(($__a)|0);
   var $261=HEAP32[(($__a_end)>>2)];
   var $262=$53;
   var $263 = (function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($260, $261, $262) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 26; break; }
  case 42: 
   var $265=$54;
   HEAPF64[(($265)>>3)]=$263;
   var $266=(($__g)|0);
   var $267=HEAP32[(($__g_end)>>2)];
   var $268=$53;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $266, $267, $268) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 26; break; }
  case 43: 
   $15=$__b;
   $16=$__e;
   var $270=$15;
   var $271=$16;
   $13=$270;
   $14=$271;
   var $272=$13;
   $12=$272;
   var $273=$12;
   var $274=(($273)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=(($275)|(0))!=0;
   if ($276) { label = 44; break; } else { label = 50; break; }
  case 44: 
   var $278=(($273)|0);
   var $279=HEAP32[(($278)>>2)];
   $11=$279;
   var $280=$11;
   var $281=(($280+12)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=(($280+16)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($282)|(0))==(($284)|(0));
   if ($285) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $287=$280;
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288+36)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$290]($280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 26; break; }
  case 46: 
   $10=$291;
   label = 48; break;
  case 47: 
   var $293=(($280+12)|0);
   var $294=HEAP32[(($293)>>2)];
   var $295=HEAP32[(($294)>>2)];
   $9=$295;
   var $296=$9;
   $10=$296;
   label = 48; break;
  case 48: 
   var $297=$10;
   $7=$297;
   $8=-1;
   var $298=$7;
   var $299=$8;
   var $300=(($298)|(0))==(($299)|(0));
   if ($300) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $302=(($273)|0);
   HEAP32[(($302)>>2)]=0;
   label = 50; break;
  case 50: 
   var $303=(($273)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=(($304)|(0))==0;
   var $306=(($305)&(1));
   var $307=$14;
   $6=$307;
   var $308=$6;
   var $309=(($308)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310)|(0))!=0;
   if ($311) { label = 51; break; } else { label = 57; break; }
  case 51: 
   var $313=(($308)|0);
   var $314=HEAP32[(($313)>>2)];
   $5=$314;
   var $315=$5;
   var $316=(($315+12)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($315+16)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=(($317)|(0))==(($319)|(0));
   if ($320) { label = 52; break; } else { label = 54; break; }
  case 52: 
   var $322=$315;
   var $323=HEAP32[(($322)>>2)];
   var $324=(($323+36)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$325]($315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 26; break; }
  case 53: 
   $4=$326;
   label = 55; break;
  case 54: 
   var $328=(($315+12)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=HEAP32[(($329)>>2)];
   $3=$330;
   var $331=$3;
   $4=$331;
   label = 55; break;
  case 55: 
   var $332=$4;
   $1=$332;
   $2=-1;
   var $333=$1;
   var $334=$2;
   var $335=(($333)|(0))==(($334)|(0));
   if ($335) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $337=(($308)|0);
   HEAP32[(($337)>>2)]=0;
   label = 57; break;
  case 57: 
   var $338=(($308)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340=(($339)|(0))==0;
   var $341=(($340)&(1));
   var $342=(($306)|(0))==(($341)|(0));
   label = 58; break;
  case 58: 
   if ($342) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $345=$53;
   var $346=HEAP32[(($345)>>2)];
   var $347=$346 | 2;
   HEAP32[(($345)>>2)]=$347;
   label = 60; break;
  case 60: 
   var $349=$agg_result;
   var $350=$__b;
   assert(4 % 1 === 0);HEAP32[(($349)>>2)]=HEAP32[(($350)>>2)];
   $57=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 61: 
   var $352=$55;
   var $353=$56;
   var $354$0=$352;
   var $354$1=0;
   var $355$0=$354$0;
   var $355$1=$353;
   ___resumeException($355$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result, $this, $__b, $__e, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 352)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $__base;
   var $__atoms=__stackBase__;
   var $__thousands_sep;
   var $__grouping=(__stackBase__)+(104);
   var $59=(__stackBase__)+(120);
   var $60;
   var $61;
   var $__a=(__stackBase__)+(128);
   var $__a_end=(__stackBase__)+(168);
   var $__g=(__stackBase__)+(176);
   var $__g_end=(__stackBase__)+(336);
   var $__dc=(__stackBase__)+(344);
   var $62;
   $55=$this;
   $56=$__iob;
   $57=$__err;
   $58=$__v;
   var $63=$55;
   $__base=16;
   $__thousands_sep=0;
   $54=$__grouping;
   var $64=$54;
   $53=$64;
   var $65=$53;
   var $66=$65;
   var $67=(($65)|0);
   $52=$67;
   var $68=$52;
   $51=$68;
   var $69=$51;
   var $70=$69;
   $50=$70;
   var $71=$50;
   var $72=$71;
   $49=$72;
   var $73=$49;
   var $74=(($71)|0);
   $48=$65;
   var $75=$48;
   var $76=(($75)|0);
   $47=$76;
   var $77=$47;
   var $78=$77;
   $46=$78;
   var $79=$46;
   var $80=(($79)|0);
   var $81=(($80)|0);
   var $82=$81;
   var $83=(($82)|0);
   $__a_i_i_i=$83;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $85=$__i_i_i_i;
   var $86=(($85)>>>(0)) < 3;
   if ($86) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $88=$__i_i_i_i;
   var $89=$__a_i_i_i;
   var $90=(($89+($88<<2))|0);
   HEAP32[(($90)>>2)]=0;
   var $91=$__i_i_i_i;
   var $92=((($91)+(1))|0);
   $__i_i_i_i=$92;
   label = 2; break;
  case 4: 
   var $93=$56;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($59, $93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 34; break; }
  case 5: 
   $29=$59;
   var $95=$29;
   var $96 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($95, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 35; break; }
  case 6: 
   var $97=$96;
   label = 7; break;
  case 7: 
   var $99=(($__atoms)|0);
   $25=$97;
   $26=((20272)|0);
   $27=((20298)|0);
   $28=$99;
   var $100=$25;
   var $101=$100;
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102+48)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=$26;
   var $106=$27;
   var $107=$28;
   var $108 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$104]($100, $105, $106, $107) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 35; break; }
  case 8: 
   label = 9; break;
  case 9: 
   __ZNSt3__16localeD2Ev($59);
   var $110=$__a;
   _memset($110, 0, 40);
   var $111=(($__a)|0);
   HEAP32[(($__a_end)>>2)]=$111;
   var $112=(($__g)|0);
   HEAP32[(($__g_end)>>2)]=$112;
   HEAP32[(($__dc)>>2)]=0;
   label = 10; break;
  case 10: 
   $23=$__b;
   $24=$__e;
   var $114=$23;
   var $115=$24;
   $21=$114;
   $22=$115;
   var $116=$21;
   $20=$116;
   var $117=$20;
   var $118=(($117)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119)|(0))!=0;
   if ($120) { label = 11; break; } else { label = 17; break; }
  case 11: 
   var $122=(($117)|0);
   var $123=HEAP32[(($122)>>2)];
   $19=$123;
   var $124=$19;
   var $125=(($124+12)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=(($124+16)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=(($126)|(0))==(($128)|(0));
   if ($129) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $131=$124;
   var $132=HEAP32[(($131)>>2)];
   var $133=(($132+36)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($124) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 34; break; }
  case 13: 
   $18=$135;
   label = 15; break;
  case 14: 
   var $137=(($124+12)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=HEAP32[(($138)>>2)];
   $17=$139;
   var $140=$17;
   $18=$140;
   label = 15; break;
  case 15: 
   var $141=$18;
   $15=$141;
   $16=-1;
   var $142=$15;
   var $143=$16;
   var $144=(($142)|(0))==(($143)|(0));
   if ($144) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $146=(($117)|0);
   HEAP32[(($146)>>2)]=0;
   label = 17; break;
  case 17: 
   var $147=(($117)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($148)|(0))==0;
   var $150=(($149)&(1));
   var $151=$22;
   $14=$151;
   var $152=$14;
   var $153=(($152)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154)|(0))!=0;
   if ($155) { label = 18; break; } else { label = 24; break; }
  case 18: 
   var $157=(($152)|0);
   var $158=HEAP32[(($157)>>2)];
   $13=$158;
   var $159=$13;
   var $160=(($159+12)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($159+16)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($161)|(0))==(($163)|(0));
   if ($164) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $166=$159;
   var $167=HEAP32[(($166)>>2)];
   var $168=(($167+36)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$169]($159) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 34; break; }
  case 20: 
   $12=$170;
   label = 22; break;
  case 21: 
   var $172=(($159+12)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=HEAP32[(($173)>>2)];
   $11=$174;
   var $175=$11;
   $12=$175;
   label = 22; break;
  case 22: 
   var $176=$12;
   $9=$176;
   $10=-1;
   var $177=$9;
   var $178=$10;
   var $179=(($177)|(0))==(($178)|(0));
   if ($179) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $181=(($152)|0);
   HEAP32[(($181)>>2)]=0;
   label = 24; break;
  case 24: 
   var $182=(($152)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($183)|(0))==0;
   var $185=(($184)&(1));
   var $186=(($150)|(0))==(($185)|(0));
   var $187=$186 ^ 1;
   label = 25; break;
  case 25: 
   if ($187) { label = 26; break; } else { label = 43; break; }
  case 26: 
   $8=$__b;
   var $190=$8;
   var $191=(($190)|0);
   var $192=HEAP32[(($191)>>2)];
   $7=$192;
   var $193=$7;
   var $194=(($193+12)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=(($193+16)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=(($195)|(0))==(($197)|(0));
   if ($198) { label = 27; break; } else { label = 29; break; }
  case 27: 
   var $200=$193;
   var $201=HEAP32[(($200)>>2)];
   var $202=(($201+36)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$203]($193) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 34; break; }
  case 28: 
   $6=$204;
   label = 30; break;
  case 29: 
   var $206=(($193+12)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=HEAP32[(($207)>>2)];
   $5=$208;
   var $209=$5;
   $6=$209;
   label = 30; break;
  case 30: 
   var $210=$6;
   label = 31; break;
  case 31: 
   var $212=$__base;
   var $213=(($__a)|0);
   var $214=$__thousands_sep;
   var $215=(($__g)|0);
   var $216=(($__atoms)|0);
   var $217 = (function() { try { __THREW__ = 0; return __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($210, $212, $213, $__a_end, $__dc, $214, $__grouping, $215, $__g_end, $216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 34; break; }
  case 32: 
   var $219=(($217)|(0))!=0;
   if ($219) { label = 33; break; } else { label = 36; break; }
  case 33: 
   label = 43; break;
  case 34: 
   var $222$0 = ___cxa_find_matching_catch(-1, -1); $222$1 = tempRet0;
   var $223=$222$0;
   $60=$223;
   var $224=$222$1;
   $61=$224;
   label = 65; break;
  case 35: 
   var $226$0 = ___cxa_find_matching_catch(-1, -1); $226$1 = tempRet0;
   var $227=$226$0;
   $60=$227;
   var $228=$226$1;
   $61=$228;
   __ZNSt3__16localeD2Ev($59);
   label = 65; break;
  case 36: 
   label = 37; break;
  case 37: 
   $4=$__b;
   var $231=$4;
   var $232=(($231)|0);
   var $233=HEAP32[(($232)>>2)];
   $3=$233;
   var $234=$3;
   var $235=(($234+12)|0);
   var $236=HEAP32[(($235)>>2)];
   var $237=(($234+16)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239=(($236)|(0))==(($238)|(0));
   if ($239) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $241=$234;
   var $242=HEAP32[(($241)>>2)];
   var $243=(($242+40)|0);
   var $244=HEAP32[(($243)>>2)];
   var $245 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$244]($234) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 34; break; }
  case 39: 
   $2=$245;
   label = 41; break;
  case 40: 
   var $247=(($234+12)|0);
   var $248=HEAP32[(($247)>>2)];
   var $249=(($248+4)|0);
   HEAP32[(($247)>>2)]=$249;
   var $250=HEAP32[(($248)>>2)];
   $1=$250;
   var $251=$1;
   $2=$251;
   label = 41; break;
  case 41: 
   var $252=$2;
   label = 42; break;
  case 42: 
   label = 10; break;
  case 43: 
   var $255=(($__a+39)|0);
   HEAP8[($255)]=0;
   var $256=(($__a)|0);
   var $257 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 34; break; }
  case 44: 
   var $259=$58;
   var $260 = (function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcPvS1_z($256, $257, ((2688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$259,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 34; break; }
  case 45: 
   var $262=(($260)|(0))!=1;
   if ($262) { label = 46; break; } else { label = 47; break; }
  case 46: 
   var $264=$57;
   HEAP32[(($264)>>2)]=4;
   label = 47; break;
  case 47: 
   $44=$__b;
   $45=$__e;
   var $266=$44;
   var $267=$45;
   $42=$266;
   $43=$267;
   var $268=$42;
   $41=$268;
   var $269=$41;
   var $270=(($269)|0);
   var $271=HEAP32[(($270)>>2)];
   var $272=(($271)|(0))!=0;
   if ($272) { label = 48; break; } else { label = 54; break; }
  case 48: 
   var $274=(($269)|0);
   var $275=HEAP32[(($274)>>2)];
   $40=$275;
   var $276=$40;
   var $277=(($276+12)|0);
   var $278=HEAP32[(($277)>>2)];
   var $279=(($276+16)|0);
   var $280=HEAP32[(($279)>>2)];
   var $281=(($278)|(0))==(($280)|(0));
   if ($281) { label = 49; break; } else { label = 51; break; }
  case 49: 
   var $283=$276;
   var $284=HEAP32[(($283)>>2)];
   var $285=(($284+36)|0);
   var $286=HEAP32[(($285)>>2)];
   var $287 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$286]($276) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 50; break; } else { label = 34; break; }
  case 50: 
   $39=$287;
   label = 52; break;
  case 51: 
   var $289=(($276+12)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291=HEAP32[(($290)>>2)];
   $38=$291;
   var $292=$38;
   $39=$292;
   label = 52; break;
  case 52: 
   var $293=$39;
   $36=$293;
   $37=-1;
   var $294=$36;
   var $295=$37;
   var $296=(($294)|(0))==(($295)|(0));
   if ($296) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $298=(($269)|0);
   HEAP32[(($298)>>2)]=0;
   label = 54; break;
  case 54: 
   var $299=(($269)|0);
   var $300=HEAP32[(($299)>>2)];
   var $301=(($300)|(0))==0;
   var $302=(($301)&(1));
   var $303=$43;
   $35=$303;
   var $304=$35;
   var $305=(($304)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=(($306)|(0))!=0;
   if ($307) { label = 55; break; } else { label = 61; break; }
  case 55: 
   var $309=(($304)|0);
   var $310=HEAP32[(($309)>>2)];
   $34=$310;
   var $311=$34;
   var $312=(($311+12)|0);
   var $313=HEAP32[(($312)>>2)];
   var $314=(($311+16)|0);
   var $315=HEAP32[(($314)>>2)];
   var $316=(($313)|(0))==(($315)|(0));
   if ($316) { label = 56; break; } else { label = 58; break; }
  case 56: 
   var $318=$311;
   var $319=HEAP32[(($318)>>2)];
   var $320=(($319+36)|0);
   var $321=HEAP32[(($320)>>2)];
   var $322 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$321]($311) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { label = 34; break; }
  case 57: 
   $33=$322;
   label = 59; break;
  case 58: 
   var $324=(($311+12)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326=HEAP32[(($325)>>2)];
   $32=$326;
   var $327=$32;
   $33=$327;
   label = 59; break;
  case 59: 
   var $328=$33;
   $30=$328;
   $31=-1;
   var $329=$30;
   var $330=$31;
   var $331=(($329)|(0))==(($330)|(0));
   if ($331) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $333=(($304)|0);
   HEAP32[(($333)>>2)]=0;
   label = 61; break;
  case 61: 
   var $334=(($304)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=(($335)|(0))==0;
   var $337=(($336)&(1));
   var $338=(($302)|(0))==(($337)|(0));
   label = 62; break;
  case 62: 
   if ($338) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $341=$57;
   var $342=HEAP32[(($341)>>2)];
   var $343=$342 | 2;
   HEAP32[(($341)>>2)]=$343;
   label = 64; break;
  case 64: 
   var $345=$agg_result;
   var $346=$__b;
   assert(4 % 1 === 0);HEAP32[(($345)>>2)]=HEAP32[(($346)>>2)];
   $62=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 65: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 66; break;
  case 66: 
   var $349=$60;
   var $350=$61;
   var $351$0=$349;
   var $351$1=0;
   var $352$0=$351$0;
   var $352$1=$350;
   ___resumeException($352$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp, $__len, $__signd, $__flags) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$__fmtp;
   $2=$__len;
   var $5=(($__signd)&(1));
   $3=$5;
   $4=$__flags;
   var $6=$4;
   var $7=$6 & 2048;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=(($10+1)|0);
   $1=$11;
   HEAP8[($10)]=43;
   label = 3; break;
  case 3: 
   var $13=$4;
   var $14=$13 & 512;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=$1;
   var $18=(($17+1)|0);
   $1=$18;
   HEAP8[($17)]=35;
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $21=$2;
   var $22=HEAP8[($21)];
   var $23=(($22 << 24) >> 24)!=0;
   if ($23) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $25=$2;
   var $26=(($25+1)|0);
   $2=$26;
   var $27=HEAP8[($25)];
   var $28=$1;
   var $29=(($28+1)|0);
   $1=$29;
   HEAP8[($28)]=$27;
   label = 6; break;
  case 8: 
   var $31=$4;
   var $32=$31 & 74;
   var $33=(($32)|(0))==64;
   if ($33) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $35=$1;
   HEAP8[($35)]=111;
   label = 20; break;
  case 10: 
   var $37=$4;
   var $38=$37 & 74;
   var $39=(($38)|(0))==8;
   if ($39) { label = 11; break; } else { label = 15; break; }
  case 11: 
   var $41=$4;
   var $42=$41 & 16384;
   var $43=(($42)|(0))!=0;
   if ($43) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $45=$1;
   HEAP8[($45)]=88;
   label = 14; break;
  case 13: 
   var $47=$1;
   HEAP8[($47)]=120;
   label = 14; break;
  case 14: 
   label = 19; break;
  case 15: 
   var $50=$3;
   var $51=(($50) & 1);
   if ($51) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $53=$1;
   HEAP8[($53)]=100;
   label = 18; break;
  case 17: 
   var $55=$1;
   HEAP8[($55)]=117;
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68=__stackBase__;
   var $__np;
   var $69=(__stackBase__)+(8);
   var $70;
   var $71;
   var $__nm=(__stackBase__)+(16);
   var $__i=(__stackBase__)+(32);
   var $72=(__stackBase__)+(40);
   var $73;
   $64=$this;
   $65=$__iob;
   $66=$__fl;
   var $74=(($__v)&(1));
   $67=$74;
   var $75=$64;
   var $76=$65;
   $63=$76;
   var $77=$63;
   var $78=(($77+4)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=$79 & 1;
   var $81=(($80)|(0))==0;
   if ($81) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $83=$75;
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84+24)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=$68;
   var $88=$__s;
   assert(4 % 1 === 0);HEAP32[(($87)>>2)]=HEAP32[(($88)>>2)];
   var $89=$65;
   var $90=$66;
   var $91=$67;
   var $92=(($91) & 1);
   var $93=(($92)&(1));
   FUNCTION_TABLE[$86]($agg_result, $75, $68, $89, $90, $93);
   label = 34; break;
  case 3: 
   var $95=$65;
   __ZNKSt3__18ios_base6getlocEv($69, $95);
   $62=$69;
   var $96=$62;
   var $97 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($96, 19432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 31; break; }
  case 4: 
   var $98=$97;
   label = 5; break;
  case 5: 
   __ZNSt3__16localeD2Ev($69);
   $__np=$98;
   var $100=$67;
   var $101=(($100) & 1);
   if ($101) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $103=$__np;
   $61=$103;
   var $104=$61;
   var $105=$104;
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106+24)|0);
   var $108=HEAP32[(($107)>>2)];
   FUNCTION_TABLE[$108]($__nm, $104);
   label = 8; break;
  case 7: 
   var $110=$__np;
   $60=$110;
   var $111=$60;
   var $112=$111;
   var $113=HEAP32[(($112)>>2)];
   var $114=(($113+28)|0);
   var $115=HEAP32[(($114)>>2)];
   FUNCTION_TABLE[$115]($__nm, $111);
   label = 8; break;
  case 8: 
   $59=$__nm;
   var $117=$59;
   $58=$117;
   var $118=$58;
   $57=$118;
   var $119=$57;
   var $120=(($119)|0);
   $56=$120;
   var $121=$56;
   var $122=$121;
   $55=$122;
   var $123=$55;
   var $124=(($123)|0);
   var $125=(($124)|0);
   var $126=$125;
   var $127=(($126)|0);
   var $128=$127;
   var $129=HEAP8[($128)];
   var $130=(($129)&(255));
   var $131=$130 & 1;
   var $132=(($131)|(0))!=0;
   if ($132) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $51=$118;
   var $134=$51;
   var $135=(($134)|0);
   $50=$135;
   var $136=$50;
   var $137=$136;
   $49=$137;
   var $138=$49;
   var $139=(($138)|0);
   var $140=(($139)|0);
   var $141=$140;
   var $142=(($141+8)|0);
   var $143=HEAP32[(($142)>>2)];
   var $155 = $143;label = 11; break;
  case 10: 
   $54=$118;
   var $145=$54;
   var $146=(($145)|0);
   $53=$146;
   var $147=$53;
   var $148=$147;
   $52=$148;
   var $149=$52;
   var $150=(($149)|0);
   var $151=(($150)|0);
   var $152=$151;
   var $153=(($152+1)|0);
   var $154=(($153)|0);
   var $155 = $154;label = 11; break;
  case 11: 
   var $155;
   $47=$__i;
   $48=$155;
   var $156=$47;
   var $157=$48;
   $45=$156;
   $46=$157;
   var $158=$45;
   var $159=(($158)|0);
   var $160=$46;
   HEAP32[(($159)>>2)]=$160;
   label = 12; break;
  case 12: 
   $33=$__nm;
   var $162=$33;
   $32=$162;
   var $163=$32;
   $31=$163;
   var $164=$31;
   var $165=(($164)|0);
   $30=$165;
   var $166=$30;
   var $167=$166;
   $29=$167;
   var $168=$29;
   var $169=(($168)|0);
   var $170=(($169)|0);
   var $171=$170;
   var $172=(($171)|0);
   var $173=$172;
   var $174=HEAP8[($173)];
   var $175=(($174)&(255));
   var $176=$175 & 1;
   var $177=(($176)|(0))!=0;
   if ($177) { label = 13; break; } else { label = 14; break; }
  case 13: 
   $25=$163;
   var $179=$25;
   var $180=(($179)|0);
   $24=$180;
   var $181=$24;
   var $182=$181;
   $23=$182;
   var $183=$23;
   var $184=(($183)|0);
   var $185=(($184)|0);
   var $186=$185;
   var $187=(($186+8)|0);
   var $188=HEAP32[(($187)>>2)];
   var $200 = $188;label = 15; break;
  case 14: 
   $28=$163;
   var $190=$28;
   var $191=(($190)|0);
   $27=$191;
   var $192=$27;
   var $193=$192;
   $26=$193;
   var $194=$26;
   var $195=(($194)|0);
   var $196=(($195)|0);
   var $197=$196;
   var $198=(($197+1)|0);
   var $199=(($198)|0);
   var $200 = $199;label = 15; break;
  case 15: 
   var $200;
   $18=$162;
   var $201=$18;
   $17=$201;
   var $202=$17;
   var $203=(($202)|0);
   $16=$203;
   var $204=$16;
   var $205=$204;
   $15=$205;
   var $206=$15;
   var $207=(($206)|0);
   var $208=(($207)|0);
   var $209=$208;
   var $210=(($209)|0);
   var $211=$210;
   var $212=HEAP8[($211)];
   var $213=(($212)&(255));
   var $214=$213 & 1;
   var $215=(($214)|(0))!=0;
   if ($215) { label = 16; break; } else { label = 17; break; }
  case 16: 
   $11=$201;
   var $217=$11;
   var $218=(($217)|0);
   $10=$218;
   var $219=$10;
   var $220=$219;
   $9=$220;
   var $221=$9;
   var $222=(($221)|0);
   var $223=(($222)|0);
   var $224=$223;
   var $225=(($224+4)|0);
   var $226=HEAP32[(($225)>>2)];
   var $241 = $226;label = 18; break;
  case 17: 
   $14=$201;
   var $228=$14;
   var $229=(($228)|0);
   $13=$229;
   var $230=$13;
   var $231=$230;
   $12=$231;
   var $232=$12;
   var $233=(($232)|0);
   var $234=(($233)|0);
   var $235=$234;
   var $236=(($235)|0);
   var $237=$236;
   var $238=HEAP8[($237)];
   var $239=(($238)&(255));
   var $240=$239 >> 1;
   var $241 = $240;label = 18; break;
  case 18: 
   var $241;
   var $242=(($200+$241)|0);
   $21=$72;
   $22=$242;
   var $243=$21;
   var $244=$22;
   $19=$243;
   $20=$244;
   var $245=$19;
   var $246=(($245)|0);
   var $247=$20;
   HEAP32[(($246)>>2)]=$247;
   $5=$__i;
   $6=$72;
   var $248=$5;
   var $249=$6;
   $3=$248;
   $4=$249;
   var $250=$3;
   $2=$250;
   var $251=$2;
   var $252=(($251)|0);
   var $253=HEAP32[(($252)>>2)];
   var $254=$4;
   $1=$254;
   var $255=$1;
   var $256=(($255)|0);
   var $257=HEAP32[(($256)>>2)];
   var $258=(($253)|(0))==(($257)|(0));
   var $259=$258 ^ 1;
   if ($259) { label = 19; break; } else { label = 33; break; }
  case 19: 
   $7=$__s;
   var $261=$7;
   label = 20; break;
  case 20: 
   $8=$__i;
   var $263=$8;
   var $264=(($263)|0);
   var $265=HEAP32[(($264)>>2)];
   var $266=HEAP8[($265)];
   $41=$261;
   $42=$266;
   var $267=$41;
   var $268=(($267)|0);
   var $269=HEAP32[(($268)>>2)];
   var $270=(($269)|(0))!=0;
   if ($270) { label = 21; break; } else { label = 27; break; }
  case 21: 
   var $272=(($267)|0);
   var $273=HEAP32[(($272)>>2)];
   var $274=$42;
   $39=$273;
   $40=$274;
   var $275=$39;
   var $276=(($275+24)|0);
   var $277=HEAP32[(($276)>>2)];
   var $278=(($275+28)|0);
   var $279=HEAP32[(($278)>>2)];
   var $280=(($277)|(0))==(($279)|(0));
   if ($280) { label = 22; break; } else { label = 24; break; }
  case 22: 
   var $282=$275;
   var $283=HEAP32[(($282)>>2)];
   var $284=(($283+52)|0);
   var $285=HEAP32[(($284)>>2)];
   var $286=$40;
   $37=$286;
   var $287=$37;
   var $288=(($287)&(255));
   var $289 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$285]($275, $288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 32; break; }
  case 23: 
   $38=$289;
   label = 25; break;
  case 24: 
   var $291=$40;
   var $292=(($275+24)|0);
   var $293=HEAP32[(($292)>>2)];
   var $294=(($293+1)|0);
   HEAP32[(($292)>>2)]=$294;
   HEAP8[($293)]=$291;
   var $295=$40;
   $36=$295;
   var $296=$36;
   var $297=(($296)&(255));
   $38=$297;
   label = 25; break;
  case 25: 
   var $298=$38;
   $34=$298;
   $35=-1;
   var $299=$34;
   var $300=$35;
   var $301=(($299)|(0))==(($300)|(0));
   if ($301) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $303=(($267)|0);
   HEAP32[(($303)>>2)]=0;
   label = 27; break;
  case 27: 
   label = 28; break;
  case 28: 
   label = 29; break;
  case 29: 
   $43=$__i;
   var $306=$43;
   var $307=(($306)|0);
   var $308=HEAP32[(($307)>>2)];
   var $309=(($308+1)|0);
   HEAP32[(($307)>>2)]=$309;
   $44=$__s;
   var $310=$44;
   label = 30; break;
  case 30: 
   label = 12; break;
  case 31: 
   var $313$0 = ___cxa_find_matching_catch(-1, -1); $313$1 = tempRet0;
   var $314=$313$0;
   $70=$314;
   var $315=$313$1;
   $71=$315;
   __ZNSt3__16localeD2Ev($69);
   label = 35; break;
  case 32: 
   var $317$0 = ___cxa_find_matching_catch(-1, -1); $317$1 = tempRet0;
   var $318=$317$0;
   $70=$318;
   var $319=$317$1;
   $71=$319;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
   label = 35; break;
  case 33: 
   var $321=$agg_result;
   var $322=$__s;
   assert(4 % 1 === 0);HEAP32[(($321)>>2)]=HEAP32[(($322)>>2)];
   $73=1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
   label = 34; break;
  case 34: 
   STACKTOP = __stackBase__;
   return;
  case 35: 
   var $325=$70;
   var $326=$71;
   var $327$0=$325;
   var $327$1=0;
   var $328$0=$327$0;
   var $328$1=$326;
   ___resumeException($328$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__fmt=__stackBase__;
   var $__len;
   var $__nbuf;
   var $__nar=(__stackBase__)+(8);
   var $__nc;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(24);
   var $__op=(__stackBase__)+(48);
   var $__oe=(__stackBase__)+(56);
   var $6=(__stackBase__)+(64);
   var $7;
   var $8;
   var $9=(__stackBase__)+(72);
   $2=$this;
   $3=$__iob;
   $4=$__fl;
   $5=$__v;
   var $10=$2;
   var $11=$__fmt;
   assert(6 % 1 === 0);HEAP8[($11)]=HEAP8[((((10600)|0))|0)];HEAP8[((($11)+(1))|0)]=HEAP8[(((((10600)|0))+(1))|0)];HEAP8[((($11)+(2))|0)]=HEAP8[(((((10600)|0))+(2))|0)];HEAP8[((($11)+(3))|0)]=HEAP8[(((((10600)|0))+(3))|0)];HEAP8[((($11)+(4))|0)]=HEAP8[(((((10600)|0))+(4))|0)];HEAP8[((($11)+(5))|0)]=HEAP8[(((((10600)|0))+(5))|0)];
   $__len=((3832)|0);
   var $12=(($__fmt)|0);
   var $13=(($12+1)|0);
   var $14=$__len;
   var $15=$3;
   $1=$15;
   var $16=$1;
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   __ZNSt3__114__num_put_base12__format_intEPcPKcbj($13, $14, 1, $18);
   $__nbuf=12;
   var $19=(($__nar)|0);
   var $20=__ZNSt3__16__clocEv();
   var $21=(($__fmt)|0);
   var $22=$5;
   var $23=__ZNSt3__111__sprintf_lEPcPvPKcz($19, $20, $21, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$22,tempInt));
   $__nc=$23;
   var $24=(($__nar)|0);
   var $25=$__nc;
   var $26=(($24+$25)|0);
   $__ne=$26;
   var $27=(($__nar)|0);
   var $28=$__ne;
   var $29=$3;
   var $30=__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($27, $28, $29);
   $__np=$30;
   var $31=(($__nar)|0);
   var $32=$__np;
   var $33=$__ne;
   var $34=(($__o)|0);
   var $35=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $35);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($31, $32, $33, $34, $__op, $__oe, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNSt3__16localeD2Ev($6);
   var $37=$9;
   var $38=$__s;
   assert(4 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];
   var $39=(($__o)|0);
   var $40=HEAP32[(($__op)>>2)];
   var $41=HEAP32[(($__oe)>>2)];
   var $42=$3;
   var $43=$4;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $9, $39, $40, $41, $42, $43);
   STACKTOP = __stackBase__;
   return;
  case 3: 
   var $45$0 = ___cxa_find_matching_catch(-1, -1); $45$1 = tempRet0;
   var $46=$45$0;
   $7=$46;
   var $47=$45$1;
   $8=$47;
   __ZNSt3__16localeD2Ev($6);
   label = 4; break;
  case 4: 
   var $49=$7;
   var $50=$8;
   var $51$0=$49;
   var $51$1=0;
   var $52$0=$51$0;
   var $52$1=$50;
   ___resumeException($52$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__sprintf_lEPcPvPKcz($__s, $__l, $__format, varrp) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i1;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25=__stackBase__;
   var $26=(__stackBase__)+(8);
   var $27;
   var $28;
   var $29=(__stackBase__)+(16);
   var $30=(__stackBase__)+(24);
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $__va=(__stackBase__)+(32);
   var $__current=(__stackBase__)+(48);
   var $44=(__stackBase__)+(56);
   var $__res;
   var $45;
   var $46;
   var $47;
   $41=$__s;
   $42=$__l;
   $43=$__format;
   var $48=(($__va)|0);
   var $49=$48;
   HEAP32[(($49)>>2)]=varrp;HEAP32[((($49)+(4))>>2)]=0;
   var $50=$42;
   var $51=_uselocale($50);
   HEAP32[(($44)>>2)]=284;
   $38=$__current;
   $39=$51;
   $40=$44;
   var $52=$38;
   var $53=$39;
   var $54=$40;
   $35=$52;
   $36=$53;
   $37=$54;
   var $55=$35;
   var $56=(($55)|0);
   var $57=$36;
   var $58=$37;
   $34=$58;
   var $59=$34;
   var $60=HEAP32[(($59)>>2)];
   $31=$56;
   $32=$57;
   $33=$60;
   var $61=$31;
   var $62=$32;
   var $63=$33;
   $28=$61;
   HEAP32[(($29)>>2)]=$62;
   HEAP32[(($30)>>2)]=$63;
   var $64=$28;
   var $65=$64;
   $27=$29;
   var $66=$27;
   var $67=HEAP32[(($66)>>2)];
   $21=$30;
   var $68=$21;
   var $69=HEAP32[(($68)>>2)];
   $24=$65;
   HEAP32[(($25)>>2)]=$67;
   HEAP32[(($26)>>2)]=$69;
   var $70=$24;
   var $71=(($70)|0);
   $23=$25;
   var $72=$23;
   var $73=HEAP32[(($72)>>2)];
   HEAP32[(($71)>>2)]=$73;
   var $74=(($70+4)|0);
   $22=$26;
   var $75=$22;
   var $76=HEAP32[(($75)>>2)];
   HEAP32[(($74)>>2)]=$76;
   var $77=$41;
   var $78=$43;
   var $79=(($__va)|0);
   var $80 = (function() { try { __THREW__ = 0; return _vsprintf($77, $78, $79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 7; break; }
  case 2: 
   $__res=$80;
   var $82=(($__va)|0);
   var $83=$82;
   var $84=$__res;
   $47=1;
   $10=$__current;
   var $85=$10;
   $9=$85;
   var $86=$9;
   $7=$86;
   $8=0;
   var $87=$7;
   var $88=(($87)|0);
   $6=$88;
   var $89=$6;
   var $90=$89;
   $5=$90;
   var $91=$5;
   var $92=(($91)|0);
   var $93=HEAP32[(($92)>>2)];
   $__tmp_i_i_i1=$93;
   var $94=$8;
   var $95=(($87)|0);
   $4=$95;
   var $96=$4;
   var $97=$96;
   $3=$97;
   var $98=$3;
   var $99=(($98)|0);
   HEAP32[(($99)>>2)]=$94;
   var $100=$__tmp_i_i_i1;
   var $101=(($100)|(0))!=0;
   if ($101) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $103=(($87)|0);
   $2=$103;
   var $104=$2;
   var $105=$104;
   $1=$105;
   var $106=$1;
   var $107=(($106+4)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=$__tmp_i_i_i1;
   var $110 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 6; break;
  case 5: 
   var $113$0 = ___cxa_find_matching_catch(-1, -1,0); $113$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 6: 
   STACKTOP = __stackBase__;
   return $84;
  case 7: 
   var $115$0 = ___cxa_find_matching_catch(-1, -1); $115$1 = tempRet0;
   var $116=$115$0;
   $45=$116;
   var $117=$115$1;
   $46=$117;
   $20=$__current;
   var $118=$20;
   $19=$118;
   var $119=$19;
   $17=$119;
   $18=0;
   var $120=$17;
   var $121=(($120)|0);
   $16=$121;
   var $122=$16;
   var $123=$122;
   $15=$123;
   var $124=$15;
   var $125=(($124)|0);
   var $126=HEAP32[(($125)>>2)];
   $__tmp_i_i_i=$126;
   var $127=$18;
   var $128=(($120)|0);
   $14=$128;
   var $129=$14;
   var $130=$129;
   $13=$130;
   var $131=$13;
   var $132=(($131)|0);
   HEAP32[(($132)>>2)]=$127;
   var $133=$__tmp_i_i_i;
   var $134=(($133)|(0))!=0;
   if ($134) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $136=(($120)|0);
   $12=$136;
   var $137=$12;
   var $138=$137;
   $11=$138;
   var $139=$11;
   var $140=(($139+4)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=$__tmp_i_i_i;
   var $143 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$141]($142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
  case 9: 
   label = 11; break;
  case 10: 
   var $146$0 = ___cxa_find_matching_catch(-1, -1,0); $146$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 11: 
   label = 12; break;
  case 12: 
   var $148=$45;
   var $149=$46;
   var $150$0=$148;
   var $150$1=0;
   var $151$0=$150$0;
   var $151$1=$149;
   ___resumeException($151$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb, $__ne, $__iob) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   $3=$__nb;
   $4=$__ne;
   $5=$__iob;
   var $6=$5;
   $1=$6;
   var $7=$1;
   var $8=(($7+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9 & 176;
   if ((($10)|(0))==16) {
    label = 2; break;
   }
   else if ((($10)|(0))==32) {
    label = 11; break;
   }
   else if ((($10)|(0))==128) {
    label = 12; break;
   }
   else {
   label = 13; break;
   }
  case 2: 
   var $12=$3;
   var $13=(($12)|0);
   var $14=HEAP8[($13)];
   var $15=(($14 << 24) >> 24);
   var $16=(($15)|(0))==45;
   if ($16) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $18=$3;
   var $19=(($18)|0);
   var $20=HEAP8[($19)];
   var $21=(($20 << 24) >> 24);
   var $22=(($21)|(0))==43;
   if ($22) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $24=$3;
   var $25=(($24+1)|0);
   $2=$25;
   label = 15; break;
  case 5: 
   var $27=$4;
   var $28=$3;
   var $29=$27;
   var $30=$28;
   var $31=((($29)-($30))|0);
   var $32=(($31)|(0)) >= 2;
   if ($32) { label = 6; break; } else { label = 10; break; }
  case 6: 
   var $34=$3;
   var $35=(($34)|0);
   var $36=HEAP8[($35)];
   var $37=(($36 << 24) >> 24);
   var $38=(($37)|(0))==48;
   if ($38) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $40=$3;
   var $41=(($40+1)|0);
   var $42=HEAP8[($41)];
   var $43=(($42 << 24) >> 24);
   var $44=(($43)|(0))==120;
   if ($44) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $46=$3;
   var $47=(($46+1)|0);
   var $48=HEAP8[($47)];
   var $49=(($48 << 24) >> 24);
   var $50=(($49)|(0))==88;
   if ($50) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $52=$3;
   var $53=(($52+2)|0);
   $2=$53;
   label = 15; break;
  case 10: 
   label = 14; break;
  case 11: 
   var $56=$4;
   $2=$56;
   label = 15; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $60=$3;
   $2=$60;
   label = 15; break;
  case 15: 
   var $62=$2;
   return $62;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $__t_i_i_i4=__stackBase__;
   var $41;
   var $42;
   var $43=(__stackBase__)+(8);
   var $44;
   var $45;
   var $46=(__stackBase__)+(16);
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $__t_i_i_i=(__stackBase__)+(24);
   var $64;
   var $65;
   var $66=(__stackBase__)+(32);
   var $67;
   var $68;
   var $69=(__stackBase__)+(40);
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $__ct;
   var $__npt;
   var $__grouping=(__stackBase__)+(48);
   var $91;
   var $92;
   var $__nf;
   var $__thousands_sep;
   var $__dc;
   var $__dg;
   var $__p;
   $84=$__nb;
   $85=$__np;
   $86=$__ne;
   $87=$__ob;
   $88=$__op;
   $89=$__oe;
   $90=$__loc;
   var $93=$90;
   $83=$93;
   var $94=$83;
   var $95=__ZNKSt3__16locale9use_facetERNS0_2idE($94, 19816);
   var $96=$95;
   $__ct=$96;
   var $97=$90;
   $82=$97;
   var $98=$82;
   var $99=__ZNKSt3__16locale9use_facetERNS0_2idE($98, 19432);
   var $100=$99;
   $__npt=$100;
   var $101=$__npt;
   $81=$101;
   var $102=$81;
   var $103=$102;
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+20)|0);
   var $106=HEAP32[(($105)>>2)];
   FUNCTION_TABLE[$106]($__grouping, $102);
   $80=$__grouping;
   var $107=$80;
   $79=$107;
   var $108=$79;
   $78=$108;
   var $109=$78;
   var $110=(($109)|0);
   $77=$110;
   var $111=$77;
   var $112=$111;
   $76=$112;
   var $113=$76;
   var $114=(($113)|0);
   var $115=(($114)|0);
   var $116=$115;
   var $117=(($116)|0);
   var $118=$117;
   var $119=HEAP8[($118)];
   var $120=(($119)&(255));
   var $121=$120 & 1;
   var $122=(($121)|(0))!=0;
   if ($122) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $72=$108;
   var $124=$72;
   var $125=(($124)|0);
   $71=$125;
   var $126=$71;
   var $127=$126;
   $70=$127;
   var $128=$70;
   var $129=(($128)|0);
   var $130=(($129)|0);
   var $131=$130;
   var $132=(($131+4)|0);
   var $133=HEAP32[(($132)>>2)];
   var $148 = $133;label = 4; break;
  case 3: 
   $75=$108;
   var $135=$75;
   var $136=(($135)|0);
   $74=$136;
   var $137=$74;
   var $138=$137;
   $73=$138;
   var $139=$73;
   var $140=(($139)|0);
   var $141=(($140)|0);
   var $142=$141;
   var $143=(($142)|0);
   var $144=$143;
   var $145=HEAP8[($144)];
   var $146=(($145)&(255));
   var $147=$146 >> 1;
   var $148 = $147;label = 4; break;
  case 4: 
   var $148;
   var $149=(($148)|(0))==0;
   if ($149) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $151=$__ct;
   var $152=$84;
   var $153=$86;
   var $154=$87;
   $53=$151;
   $54=$152;
   $55=$153;
   $56=$154;
   var $155=$53;
   var $156=$155;
   var $157=HEAP32[(($156)>>2)];
   var $158=(($157+32)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=$54;
   var $161=$55;
   var $162=$56;
   var $163 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$159]($155, $160, $161, $162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 8; break; }
  case 6: 
   label = 7; break;
  case 7: 
   var $165=$87;
   var $166=$86;
   var $167=$84;
   var $168=$166;
   var $169=$167;
   var $170=((($168)-($169))|0);
   var $171=(($165+$170)|0);
   var $172=$89;
   HEAP32[(($172)>>2)]=$171;
   label = 60; break;
  case 8: 
   var $174$0 = ___cxa_find_matching_catch(-1, -1); $174$1 = tempRet0;
   var $175=$174$0;
   $91=$175;
   var $176=$174$1;
   $92=$176;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 64; break;
  case 9: 
   var $178=$87;
   var $179=$89;
   HEAP32[(($179)>>2)]=$178;
   var $180=$84;
   $__nf=$180;
   var $181=$__nf;
   var $182=HEAP8[($181)];
   var $183=(($182 << 24) >> 24);
   var $184=(($183)|(0))==45;
   if ($184) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $186=$__nf;
   var $187=HEAP8[($186)];
   var $188=(($187 << 24) >> 24);
   var $189=(($188)|(0))==43;
   if ($189) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $191=$__ct;
   var $192=$__nf;
   var $193=(($192+1)|0);
   $__nf=$193;
   var $194=HEAP8[($192)];
   $51=$191;
   $52=$194;
   var $195=$51;
   var $196=$195;
   var $197=HEAP32[(($196)>>2)];
   var $198=(($197+28)|0);
   var $199=HEAP32[(($198)>>2)];
   var $200=$52;
   var $201 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$199]($195, $200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 8; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $203=$89;
   var $204=HEAP32[(($203)>>2)];
   var $205=(($204+1)|0);
   HEAP32[(($203)>>2)]=$205;
   HEAP8[($204)]=$201;
   label = 14; break;
  case 14: 
   var $207=$86;
   var $208=$__nf;
   var $209=$207;
   var $210=$208;
   var $211=((($209)-($210))|0);
   var $212=(($211)|(0)) >= 2;
   if ($212) { label = 15; break; } else { label = 23; break; }
  case 15: 
   var $214=$__nf;
   var $215=(($214)|0);
   var $216=HEAP8[($215)];
   var $217=(($216 << 24) >> 24);
   var $218=(($217)|(0))==48;
   if ($218) { label = 16; break; } else { label = 23; break; }
  case 16: 
   var $220=$__nf;
   var $221=(($220+1)|0);
   var $222=HEAP8[($221)];
   var $223=(($222 << 24) >> 24);
   var $224=(($223)|(0))==120;
   if ($224) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $226=$__nf;
   var $227=(($226+1)|0);
   var $228=HEAP8[($227)];
   var $229=(($228 << 24) >> 24);
   var $230=(($229)|(0))==88;
   if ($230) { label = 18; break; } else { label = 23; break; }
  case 18: 
   var $232=$__ct;
   var $233=$__nf;
   var $234=(($233+1)|0);
   $__nf=$234;
   var $235=HEAP8[($233)];
   $49=$232;
   $50=$235;
   var $236=$49;
   var $237=$236;
   var $238=HEAP32[(($237)>>2)];
   var $239=(($238+28)|0);
   var $240=HEAP32[(($239)>>2)];
   var $241=$50;
   var $242 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$240]($236, $241) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 8; break; }
  case 19: 
   label = 20; break;
  case 20: 
   var $244=$89;
   var $245=HEAP32[(($244)>>2)];
   var $246=(($245+1)|0);
   HEAP32[(($244)>>2)]=$246;
   HEAP8[($245)]=$242;
   var $247=$__ct;
   var $248=$__nf;
   var $249=(($248+1)|0);
   $__nf=$249;
   var $250=HEAP8[($248)];
   $47=$247;
   $48=$250;
   var $251=$47;
   var $252=$251;
   var $253=HEAP32[(($252)>>2)];
   var $254=(($253+28)|0);
   var $255=HEAP32[(($254)>>2)];
   var $256=$48;
   var $257 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$255]($251, $256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 8; break; }
  case 21: 
   label = 22; break;
  case 22: 
   var $259=$89;
   var $260=HEAP32[(($259)>>2)];
   var $261=(($260+1)|0);
   HEAP32[(($259)>>2)]=$261;
   HEAP8[($260)]=$257;
   label = 23; break;
  case 23: 
   var $263=$__nf;
   var $264=$86;
   $44=$263;
   $45=$264;
   var $265=$44;
   var $266=$45;
   var $tmp_i5=$43;
   var $tmp1_i6=$46;
   assert(1 % 1 === 0);HEAP8[($tmp_i5)]=HEAP8[($tmp1_i6)];
   $41=$265;
   $42=$266;
   var $267=$41;
   var $268=$42;
   var $269=(($267)|(0))!=(($268)|(0));
   if ($269) { label = 24; break; } else { label = 28; break; }
  case 24: 
   label = 25; break;
  case 25: 
   var $272=$41;
   var $273=$42;
   var $274=((($273)-(1))|0);
   $42=$274;
   var $275=(($272)>>>(0)) < (($274)>>>(0));
   if ($275) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $277=$41;
   var $278=$42;
   $39=$277;
   $40=$278;
   var $279=$39;
   $38=$279;
   var $280=$38;
   var $281=HEAP8[($280)];
   HEAP8[($__t_i_i_i4)]=$281;
   var $282=$40;
   $36=$282;
   var $283=$36;
   var $284=HEAP8[($283)];
   var $285=$39;
   HEAP8[($285)]=$284;
   $37=$__t_i_i_i4;
   var $286=$37;
   var $287=HEAP8[($286)];
   var $288=$40;
   HEAP8[($288)]=$287;
   var $289=$41;
   var $290=(($289+1)|0);
   $41=$290;
   label = 25; break;
  case 27: 
   label = 28; break;
  case 28: 
   label = 29; break;
  case 29: 
   var $293=$__npt;
   $1=$293;
   var $294=$1;
   var $295=$294;
   var $296=HEAP32[(($295)>>2)];
   var $297=(($296+16)|0);
   var $298=HEAP32[(($297)>>2)];
   var $299 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$298]($294) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 8; break; }
  case 30: 
   label = 31; break;
  case 31: 
   $__thousands_sep=$299;
   $__dc=0;
   $__dg=0;
   var $301=$__nf;
   $__p=$301;
   label = 32; break;
  case 32: 
   var $303=$__p;
   var $304=$86;
   var $305=(($303)>>>(0)) < (($304)>>>(0));
   if ($305) { label = 33; break; } else { label = 53; break; }
  case 33: 
   var $307=$__dg;
   $12=$__grouping;
   $13=$307;
   var $308=$12;
   $11=$308;
   var $309=$11;
   $10=$309;
   var $310=$10;
   var $311=(($310)|0);
   $9=$311;
   var $312=$9;
   var $313=$312;
   $8=$313;
   var $314=$8;
   var $315=(($314)|0);
   var $316=(($315)|0);
   var $317=$316;
   var $318=(($317)|0);
   var $319=$318;
   var $320=HEAP8[($319)];
   var $321=(($320)&(255));
   var $322=$321 & 1;
   var $323=(($322)|(0))!=0;
   if ($323) { label = 34; break; } else { label = 35; break; }
  case 34: 
   $4=$309;
   var $325=$4;
   var $326=(($325)|0);
   $3=$326;
   var $327=$3;
   var $328=$327;
   $2=$328;
   var $329=$2;
   var $330=(($329)|0);
   var $331=(($330)|0);
   var $332=$331;
   var $333=(($332+8)|0);
   var $334=HEAP32[(($333)>>2)];
   var $346 = $334;label = 36; break;
  case 35: 
   $7=$309;
   var $336=$7;
   var $337=(($336)|0);
   $6=$337;
   var $338=$6;
   var $339=$338;
   $5=$339;
   var $340=$5;
   var $341=(($340)|0);
   var $342=(($341)|0);
   var $343=$342;
   var $344=(($343+1)|0);
   var $345=(($344)|0);
   var $346 = $345;label = 36; break;
  case 36: 
   var $346;
   var $347=$13;
   var $348=(($346+$347)|0);
   label = 37; break;
  case 37: 
   var $350=HEAP8[($348)];
   var $351=(($350 << 24) >> 24);
   var $352=(($351)>>>(0)) > 0;
   if ($352) { label = 38; break; } else { label = 49; break; }
  case 38: 
   var $354=$__dc;
   var $355=$__dg;
   $24=$__grouping;
   $25=$355;
   var $356=$24;
   $23=$356;
   var $357=$23;
   $22=$357;
   var $358=$22;
   var $359=(($358)|0);
   $21=$359;
   var $360=$21;
   var $361=$360;
   $20=$361;
   var $362=$20;
   var $363=(($362)|0);
   var $364=(($363)|0);
   var $365=$364;
   var $366=(($365)|0);
   var $367=$366;
   var $368=HEAP8[($367)];
   var $369=(($368)&(255));
   var $370=$369 & 1;
   var $371=(($370)|(0))!=0;
   if ($371) { label = 39; break; } else { label = 40; break; }
  case 39: 
   $16=$357;
   var $373=$16;
   var $374=(($373)|0);
   $15=$374;
   var $375=$15;
   var $376=$375;
   $14=$376;
   var $377=$14;
   var $378=(($377)|0);
   var $379=(($378)|0);
   var $380=$379;
   var $381=(($380+8)|0);
   var $382=HEAP32[(($381)>>2)];
   var $394 = $382;label = 41; break;
  case 40: 
   $19=$357;
   var $384=$19;
   var $385=(($384)|0);
   $18=$385;
   var $386=$18;
   var $387=$386;
   $17=$387;
   var $388=$17;
   var $389=(($388)|0);
   var $390=(($389)|0);
   var $391=$390;
   var $392=(($391+1)|0);
   var $393=(($392)|0);
   var $394 = $393;label = 41; break;
  case 41: 
   var $394;
   var $395=$25;
   var $396=(($394+$395)|0);
   label = 42; break;
  case 42: 
   var $398=HEAP8[($396)];
   var $399=(($398 << 24) >> 24);
   var $400=(($354)|(0))==(($399)|(0));
   if ($400) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $402=$__thousands_sep;
   var $403=$89;
   var $404=HEAP32[(($403)>>2)];
   var $405=(($404+1)|0);
   HEAP32[(($403)>>2)]=$405;
   HEAP8[($404)]=$402;
   $__dc=0;
   var $406=$__dg;
   $35=$__grouping;
   var $407=$35;
   $34=$407;
   var $408=$34;
   var $409=(($408)|0);
   $33=$409;
   var $410=$33;
   var $411=$410;
   $32=$411;
   var $412=$32;
   var $413=(($412)|0);
   var $414=(($413)|0);
   var $415=$414;
   var $416=(($415)|0);
   var $417=$416;
   var $418=HEAP8[($417)];
   var $419=(($418)&(255));
   var $420=$419 & 1;
   var $421=(($420)|(0))!=0;
   if ($421) { label = 44; break; } else { label = 45; break; }
  case 44: 
   $28=$407;
   var $423=$28;
   var $424=(($423)|0);
   $27=$424;
   var $425=$27;
   var $426=$425;
   $26=$426;
   var $427=$26;
   var $428=(($427)|0);
   var $429=(($428)|0);
   var $430=$429;
   var $431=(($430+4)|0);
   var $432=HEAP32[(($431)>>2)];
   var $447 = $432;label = 46; break;
  case 45: 
   $31=$407;
   var $434=$31;
   var $435=(($434)|0);
   $30=$435;
   var $436=$30;
   var $437=$436;
   $29=$437;
   var $438=$29;
   var $439=(($438)|0);
   var $440=(($439)|0);
   var $441=$440;
   var $442=(($441)|0);
   var $443=$442;
   var $444=HEAP8[($443)];
   var $445=(($444)&(255));
   var $446=$445 >> 1;
   var $447 = $446;label = 46; break;
  case 46: 
   var $447;
   var $448=((($447)-(1))|0);
   var $449=(($406)>>>(0)) < (($448)>>>(0));
   if ($449) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $451=$__dg;
   var $452=((($451)+(1))|0);
   $__dg=$452;
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $455=$__ct;
   var $456=$__p;
   var $457=HEAP8[($456)];
   $57=$455;
   $58=$457;
   var $458=$57;
   var $459=$458;
   var $460=HEAP32[(($459)>>2)];
   var $461=(($460+28)|0);
   var $462=HEAP32[(($461)>>2)];
   var $463=$58;
   var $464 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$462]($458, $463) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 50; break; } else { label = 8; break; }
  case 50: 
   label = 51; break;
  case 51: 
   var $466=$89;
   var $467=HEAP32[(($466)>>2)];
   var $468=(($467+1)|0);
   HEAP32[(($466)>>2)]=$468;
   HEAP8[($467)]=$464;
   var $469=$__dc;
   var $470=((($469)+(1))|0);
   $__dc=$470;
   label = 52; break;
  case 52: 
   var $472=$__p;
   var $473=(($472+1)|0);
   $__p=$473;
   label = 32; break;
  case 53: 
   var $475=$87;
   var $476=$__nf;
   var $477=$84;
   var $478=$476;
   var $479=$477;
   var $480=((($478)-($479))|0);
   var $481=(($475+$480)|0);
   var $482=$89;
   var $483=HEAP32[(($482)>>2)];
   $67=$481;
   $68=$483;
   var $484=$67;
   var $485=$68;
   var $tmp_i=$66;
   var $tmp1_i=$69;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $64=$484;
   $65=$485;
   var $486=$64;
   var $487=$65;
   var $488=(($486)|(0))!=(($487)|(0));
   if ($488) { label = 54; break; } else { label = 58; break; }
  case 54: 
   label = 55; break;
  case 55: 
   var $491=$64;
   var $492=$65;
   var $493=((($492)-(1))|0);
   $65=$493;
   var $494=(($491)>>>(0)) < (($493)>>>(0));
   if ($494) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $496=$64;
   var $497=$65;
   $62=$496;
   $63=$497;
   var $498=$62;
   $61=$498;
   var $499=$61;
   var $500=HEAP8[($499)];
   HEAP8[($__t_i_i_i)]=$500;
   var $501=$63;
   $59=$501;
   var $502=$59;
   var $503=HEAP8[($502)];
   var $504=$62;
   HEAP8[($504)]=$503;
   $60=$__t_i_i_i;
   var $505=$60;
   var $506=HEAP8[($505)];
   var $507=$63;
   HEAP8[($507)]=$506;
   var $508=$64;
   var $509=(($508+1)|0);
   $64=$509;
   label = 55; break;
  case 57: 
   label = 58; break;
  case 58: 
   label = 59; break;
  case 59: 
   label = 60; break;
  case 60: 
   var $513=$85;
   var $514=$86;
   var $515=(($513)|(0))==(($514)|(0));
   if ($515) { label = 61; break; } else { label = 62; break; }
  case 61: 
   var $517=$89;
   var $518=HEAP32[(($517)>>2)];
   var $519=$88;
   HEAP32[(($519)>>2)]=$518;
   label = 63; break;
  case 62: 
   var $521=$87;
   var $522=$85;
   var $523=$84;
   var $524=$522;
   var $525=$523;
   var $526=((($524)-($525))|0);
   var $527=(($521+$526)|0);
   var $528=$88;
   HEAP32[(($528)>>2)]=$527;
   label = 63; break;
  case 63: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 64: 
   var $531=$91;
   var $532=$92;
   var $533$0=$531;
   var $533$1=0;
   var $534$0=$533$0;
   var $534$1=$532;
   ___resumeException($534$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg_result, $this, $__s, $__iob, $__fl, $__v$0, $__v$1) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5=__stackBase__;
   var $__fmt=(__stackBase__)+(8);
   var $__len;
   var $__nbuf;
   var $__nar=(__stackBase__)+(16);
   var $__nc;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(40);
   var $__op=(__stackBase__)+(88);
   var $__oe=(__stackBase__)+(96);
   var $6=(__stackBase__)+(104);
   var $7;
   var $8;
   var $9=(__stackBase__)+(112);
   $2=$this;
   $3=$__iob;
   $4=$__fl;
   var $st$0$0=(($5)|0);
   HEAP32[(($st$0$0)>>2)]=$__v$0;
   var $st$1$1=(($5+4)|0);
   HEAP32[(($st$1$1)>>2)]=$__v$1;
   var $10=$2;
   var $11=$__fmt;
   assert(8 % 1 === 0);(_memcpy($11, ((10584)|0), 8)|0);
   $__len=((2696)|0);
   var $12=(($__fmt)|0);
   var $13=(($12+1)|0);
   var $14=$__len;
   var $15=$3;
   $1=$15;
   var $16=$1;
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   __ZNSt3__114__num_put_base12__format_intEPcPKcbj($13, $14, 1, $18);
   $__nbuf=22;
   var $19=(($__nar)|0);
   var $20=__ZNSt3__16__clocEv();
   var $21=(($__fmt)|0);
   var $ld$2$0=(($5)|0);
   var $22$0=HEAP32[(($ld$2$0)>>2)];
   var $ld$3$1=(($5+4)|0);
   var $22$1=HEAP32[(($ld$3$1)>>2)];
   var $23=__ZNSt3__111__sprintf_lEPcPvPKcz($19, $20, $21, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$22$0,HEAP32[(((tempInt)+(8))>>2)]=$22$1,tempInt));
   $__nc=$23;
   var $24=(($__nar)|0);
   var $25=$__nc;
   var $26=(($24+$25)|0);
   $__ne=$26;
   var $27=(($__nar)|0);
   var $28=$__ne;
   var $29=$3;
   var $30=__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($27, $28, $29);
   $__np=$30;
   var $31=(($__nar)|0);
   var $32=$__np;
   var $33=$__ne;
   var $34=(($__o)|0);
   var $35=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $35);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($31, $32, $33, $34, $__op, $__oe, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNSt3__16localeD2Ev($6);
   var $37=$9;
   var $38=$__s;
   assert(4 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];
   var $39=(($__o)|0);
   var $40=HEAP32[(($__op)>>2)];
   var $41=HEAP32[(($__oe)>>2)];
   var $42=$3;
   var $43=$4;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $9, $39, $40, $41, $42, $43);
   STACKTOP = __stackBase__;
   return;
  case 3: 
   var $45$0 = ___cxa_find_matching_catch(-1, -1); $45$1 = tempRet0;
   var $46=$45$0;
   $7=$46;
   var $47=$45$1;
   $8=$47;
   __ZNSt3__16localeD2Ev($6);
   label = 4; break;
  case 4: 
   var $49=$7;
   var $50=$8;
   var $51$0=$49;
   var $51$1=0;
   var $52$0=$51$0;
   var $52$1=$50;
   ___resumeException($52$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__fmt=__stackBase__;
   var $__len;
   var $__nbuf;
   var $__nar=(__stackBase__)+(8);
   var $__nc;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(24);
   var $__op=(__stackBase__)+(48);
   var $__oe=(__stackBase__)+(56);
   var $6=(__stackBase__)+(64);
   var $7;
   var $8;
   var $9=(__stackBase__)+(72);
   $2=$this;
   $3=$__iob;
   $4=$__fl;
   $5=$__v;
   var $10=$2;
   var $11=$__fmt;
   assert(6 % 1 === 0);HEAP8[($11)]=HEAP8[((((10592)|0))|0)];HEAP8[((($11)+(1))|0)]=HEAP8[(((((10592)|0))+(1))|0)];HEAP8[((($11)+(2))|0)]=HEAP8[(((((10592)|0))+(2))|0)];HEAP8[((($11)+(3))|0)]=HEAP8[(((((10592)|0))+(3))|0)];HEAP8[((($11)+(4))|0)]=HEAP8[(((((10592)|0))+(4))|0)];HEAP8[((($11)+(5))|0)]=HEAP8[(((((10592)|0))+(5))|0)];
   $__len=((3832)|0);
   var $12=(($__fmt)|0);
   var $13=(($12+1)|0);
   var $14=$__len;
   var $15=$3;
   $1=$15;
   var $16=$1;
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   __ZNSt3__114__num_put_base12__format_intEPcPKcbj($13, $14, 0, $18);
   $__nbuf=12;
   var $19=(($__nar)|0);
   var $20=__ZNSt3__16__clocEv();
   var $21=(($__fmt)|0);
   var $22=$5;
   var $23=__ZNSt3__111__sprintf_lEPcPvPKcz($19, $20, $21, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$22,tempInt));
   $__nc=$23;
   var $24=(($__nar)|0);
   var $25=$__nc;
   var $26=(($24+$25)|0);
   $__ne=$26;
   var $27=(($__nar)|0);
   var $28=$__ne;
   var $29=$3;
   var $30=__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($27, $28, $29);
   $__np=$30;
   var $31=(($__nar)|0);
   var $32=$__np;
   var $33=$__ne;
   var $34=(($__o)|0);
   var $35=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $35);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($31, $32, $33, $34, $__op, $__oe, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNSt3__16localeD2Ev($6);
   var $37=$9;
   var $38=$__s;
   assert(4 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];
   var $39=(($__o)|0);
   var $40=HEAP32[(($__op)>>2)];
   var $41=HEAP32[(($__oe)>>2)];
   var $42=$3;
   var $43=$4;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $9, $39, $40, $41, $42, $43);
   STACKTOP = __stackBase__;
   return;
  case 3: 
   var $45$0 = ___cxa_find_matching_catch(-1, -1); $45$1 = tempRet0;
   var $46=$45$0;
   $7=$46;
   var $47=$45$1;
   $8=$47;
   __ZNSt3__16localeD2Ev($6);
   label = 4; break;
  case 4: 
   var $49=$7;
   var $50=$8;
   var $51$0=$49;
   var $51$1=0;
   var $52$0=$51$0;
   var $52$1=$50;
   ___resumeException($52$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg_result, $this, $__s, $__iob, $__fl, $__v$0, $__v$1) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5=__stackBase__;
   var $__fmt=(__stackBase__)+(8);
   var $__len;
   var $__nbuf;
   var $__nar=(__stackBase__)+(16);
   var $__nc;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(40);
   var $__op=(__stackBase__)+(88);
   var $__oe=(__stackBase__)+(96);
   var $6=(__stackBase__)+(104);
   var $7;
   var $8;
   var $9=(__stackBase__)+(112);
   $2=$this;
   $3=$__iob;
   $4=$__fl;
   var $st$0$0=(($5)|0);
   HEAP32[(($st$0$0)>>2)]=$__v$0;
   var $st$1$1=(($5+4)|0);
   HEAP32[(($st$1$1)>>2)]=$__v$1;
   var $10=$2;
   var $11=$__fmt;
   assert(8 % 1 === 0);(_memcpy($11, ((10576)|0), 8)|0);
   $__len=((2696)|0);
   var $12=(($__fmt)|0);
   var $13=(($12+1)|0);
   var $14=$__len;
   var $15=$3;
   $1=$15;
   var $16=$1;
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   __ZNSt3__114__num_put_base12__format_intEPcPKcbj($13, $14, 0, $18);
   $__nbuf=23;
   var $19=(($__nar)|0);
   var $20=__ZNSt3__16__clocEv();
   var $21=(($__fmt)|0);
   var $ld$2$0=(($5)|0);
   var $22$0=HEAP32[(($ld$2$0)>>2)];
   var $ld$3$1=(($5+4)|0);
   var $22$1=HEAP32[(($ld$3$1)>>2)];
   var $23=__ZNSt3__111__sprintf_lEPcPvPKcz($19, $20, $21, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$22$0,HEAP32[(((tempInt)+(8))>>2)]=$22$1,tempInt));
   $__nc=$23;
   var $24=(($__nar)|0);
   var $25=$__nc;
   var $26=(($24+$25)|0);
   $__ne=$26;
   var $27=(($__nar)|0);
   var $28=$__ne;
   var $29=$3;
   var $30=__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($27, $28, $29);
   $__np=$30;
   var $31=(($__nar)|0);
   var $32=$__np;
   var $33=$__ne;
   var $34=(($__o)|0);
   var $35=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $35);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($31, $32, $33, $34, $__op, $__oe, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNSt3__16localeD2Ev($6);
   var $37=$9;
   var $38=$__s;
   assert(4 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];
   var $39=(($__o)|0);
   var $40=HEAP32[(($__op)>>2)];
   var $41=HEAP32[(($__oe)>>2)];
   var $42=$3;
   var $43=$4;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $9, $39, $40, $41, $42, $43);
   STACKTOP = __stackBase__;
   return;
  case 3: 
   var $45$0 = ___cxa_find_matching_catch(-1, -1); $45$1 = tempRet0;
   var $46=$45$0;
   $7=$46;
   var $47=$45$1;
   $8=$47;
   __ZNSt3__16localeD2Ev($6);
   label = 4; break;
  case 4: 
   var $49=$7;
   var $50=$8;
   var $51$0=$49;
   var $51$1=0;
   var $52$0=$51$0;
   var $52$1=$50;
   ___resumeException($52$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $__r_i;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $__sz;
   var $__ns;
   var $__np;
   var $__sp=__stackBase__;
   var $39;
   var $40;
   var $41;
   $34=$__ob;
   $35=$__op;
   $36=$__oe;
   $37=$__iob;
   $38=$__fl;
   var $42=(($__s)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43)|(0))==0;
   if ($44) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $46=$agg_result;
   var $47=$__s;
   assert(4 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];
   label = 27; break;
  case 3: 
   var $49=$36;
   var $50=$34;
   var $51=$49;
   var $52=$50;
   var $53=((($51)-($52))|0);
   $__sz=$53;
   var $54=$37;
   $33=$54;
   var $55=$33;
   var $56=(($55+12)|0);
   var $57=HEAP32[(($56)>>2)];
   $__ns=$57;
   var $58=$__ns;
   var $59=$__sz;
   var $60=(($58)|(0)) > (($59)|(0));
   if ($60) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $62=$__sz;
   var $63=$__ns;
   var $64=((($63)-($62))|0);
   $__ns=$64;
   label = 6; break;
  case 5: 
   $__ns=0;
   label = 6; break;
  case 6: 
   var $67=$35;
   var $68=$34;
   var $69=$67;
   var $70=$68;
   var $71=((($69)-($70))|0);
   $__np=$71;
   var $72=$__np;
   var $73=(($72)|(0)) > 0;
   if ($73) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $75=(($__s)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$34;
   var $78=$__np;
   $25=$76;
   $26=$77;
   $27=$78;
   var $79=$25;
   var $80=$79;
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81+48)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=$26;
   var $85=$27;
   var $86=FUNCTION_TABLE[$83]($79, $84, $85);
   var $87=$__np;
   var $88=(($86)|(0))!=(($87)|(0));
   if ($88) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $90=(($__s)|0);
   HEAP32[(($90)>>2)]=0;
   var $91=$agg_result;
   var $92=$__s;
   assert(4 % 1 === 0);HEAP32[(($91)>>2)]=HEAP32[(($92)>>2)];
   label = 27; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $95=$__ns;
   var $96=(($95)|(0)) > 0;
   if ($96) { label = 11; break; } else { label = 22; break; }
  case 11: 
   var $98=$__ns;
   var $99=$38;
   $22=$__sp;
   $23=$98;
   $24=$99;
   var $100=$22;
   var $101=$23;
   var $102=$24;
   $19=$100;
   $20=$101;
   $21=$102;
   var $103=$19;
   var $104=$103;
   var $105=(($103)|0);
   $18=$105;
   var $106=$18;
   $17=$106;
   var $107=$17;
   var $108=$107;
   $16=$108;
   var $109=$16;
   var $110=$109;
   $15=$110;
   var $111=$15;
   var $112=(($109)|0);
   var $113=$20;
   var $114=$21;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($103, $113, $114);
   var $115=(($__s)|0);
   var $116=HEAP32[(($115)>>2)];
   $14=$__sp;
   var $117=$14;
   $13=$117;
   var $118=$13;
   $12=$118;
   var $119=$12;
   var $120=(($119)|0);
   $11=$120;
   var $121=$11;
   var $122=$121;
   $10=$122;
   var $123=$10;
   var $124=(($123)|0);
   var $125=(($124)|0);
   var $126=$125;
   var $127=(($126)|0);
   var $128=$127;
   var $129=HEAP8[($128)];
   var $130=(($129)&(255));
   var $131=$130 & 1;
   var $132=(($131)|(0))!=0;
   if ($132) { label = 12; break; } else { label = 13; break; }
  case 12: 
   $6=$118;
   var $134=$6;
   var $135=(($134)|0);
   $5=$135;
   var $136=$5;
   var $137=$136;
   $4=$137;
   var $138=$4;
   var $139=(($138)|0);
   var $140=(($139)|0);
   var $141=$140;
   var $142=(($141+8)|0);
   var $143=HEAP32[(($142)>>2)];
   var $155 = $143;label = 14; break;
  case 13: 
   $9=$118;
   var $145=$9;
   var $146=(($145)|0);
   $8=$146;
   var $147=$8;
   var $148=$147;
   $7=$148;
   var $149=$7;
   var $150=(($149)|0);
   var $151=(($150)|0);
   var $152=$151;
   var $153=(($152+1)|0);
   var $154=(($153)|0);
   var $155 = $154;label = 14; break;
  case 14: 
   var $155;
   var $156=$__ns;
   $1=$116;
   $2=$155;
   $3=$156;
   var $157=$1;
   var $158=$157;
   var $159=HEAP32[(($158)>>2)];
   var $160=(($159+48)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=$2;
   var $163=$3;
   var $164 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$161]($157, $162, $163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 18; break; }
  case 15: 
   label = 16; break;
  case 16: 
   var $166=$__ns;
   var $167=(($164)|(0))!=(($166)|(0));
   if ($167) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $169=(($__s)|0);
   HEAP32[(($169)>>2)]=0;
   var $170=$agg_result;
   var $171=$__s;
   assert(4 % 1 === 0);HEAP32[(($170)>>2)]=HEAP32[(($171)>>2)];
   $41=1;
   label = 20; break;
  case 18: 
   var $173$0 = ___cxa_find_matching_catch(-1, -1); $173$1 = tempRet0;
   var $174=$173$0;
   $39=$174;
   var $175=$173$1;
   $40=$175;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   label = 28; break;
  case 19: 
   $41=0;
   label = 20; break;
  case 20: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   var $cleanup_dest=$41;
   if ((($cleanup_dest)|(0))==0) {
    label = 21; break;
   }
   else if ((($cleanup_dest)|(0))==1) {
    label = 27; break;
   }
   else {
   label = 29; break;
   }
  case 21: 
   label = 22; break;
  case 22: 
   var $180=$36;
   var $181=$35;
   var $182=$180;
   var $183=$181;
   var $184=((($182)-($183))|0);
   $__np=$184;
   var $185=$__np;
   var $186=(($185)|(0)) > 0;
   if ($186) { label = 23; break; } else { label = 26; break; }
  case 23: 
   var $188=(($__s)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=$35;
   var $191=$__np;
   $28=$189;
   $29=$190;
   $30=$191;
   var $192=$28;
   var $193=$192;
   var $194=HEAP32[(($193)>>2)];
   var $195=(($194+48)|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=$29;
   var $198=$30;
   var $199=FUNCTION_TABLE[$196]($192, $197, $198);
   var $200=$__np;
   var $201=(($199)|(0))!=(($200)|(0));
   if ($201) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $203=(($__s)|0);
   HEAP32[(($203)>>2)]=0;
   var $204=$agg_result;
   var $205=$__s;
   assert(4 % 1 === 0);HEAP32[(($204)>>2)]=HEAP32[(($205)>>2)];
   label = 27; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $208=$37;
   $31=$208;
   $32=0;
   var $209=$31;
   var $210=(($209+12)|0);
   var $211=HEAP32[(($210)>>2)];
   $__r_i=$211;
   var $212=$32;
   var $213=(($209+12)|0);
   HEAP32[(($213)>>2)]=$212;
   var $214=$__r_i;
   var $215=$agg_result;
   var $216=$__s;
   assert(4 % 1 === 0);HEAP32[(($215)>>2)]=HEAP32[(($216)>>2)];
   label = 27; break;
  case 27: 
   STACKTOP = __stackBase__;
   return;
  case 28: 
   var $219=$39;
   var $220=$40;
   var $221$0=$219;
   var $221$1=0;
   var $222$0=$221$0;
   var $222$1=$220;
   ___resumeException($222$0)
  case 29: 
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp, $__len, $__flags) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $specify_precision;
   var $floatfield;
   var $uppercase;
   $1=$__fmtp;
   $2=$__len;
   $3=$__flags;
   $specify_precision=1;
   var $4=$3;
   var $5=$4 & 2048;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$1;
   var $9=(($8+1)|0);
   $1=$9;
   HEAP8[($8)]=43;
   label = 3; break;
  case 3: 
   var $11=$3;
   var $12=$11 & 1024;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $15=$1;
   var $16=(($15+1)|0);
   $1=$16;
   HEAP8[($15)]=35;
   label = 5; break;
  case 5: 
   var $18=$3;
   var $19=$18 & 260;
   $floatfield=$19;
   var $20=$3;
   var $21=$20 & 16384;
   var $22=(($21)|(0))!=0;
   var $23=(($22)&(1));
   $uppercase=$23;
   var $24=$floatfield;
   var $25=(($24)|(0))==260;
   if ($25) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $specify_precision=0;
   label = 8; break;
  case 7: 
   var $28=$1;
   var $29=(($28+1)|0);
   $1=$29;
   HEAP8[($28)]=46;
   var $30=$1;
   var $31=(($30+1)|0);
   $1=$31;
   HEAP8[($30)]=42;
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $34=$2;
   var $35=HEAP8[($34)];
   var $36=(($35 << 24) >> 24)!=0;
   if ($36) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $38=$2;
   var $39=(($38+1)|0);
   $2=$39;
   var $40=HEAP8[($38)];
   var $41=$1;
   var $42=(($41+1)|0);
   $1=$42;
   HEAP8[($41)]=$40;
   label = 9; break;
  case 11: 
   var $44=$floatfield;
   var $45=(($44)|(0))==4;
   if ($45) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $47=$uppercase;
   var $48=(($47) & 1);
   if ($48) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $50=$1;
   HEAP8[($50)]=70;
   label = 15; break;
  case 14: 
   var $52=$1;
   HEAP8[($52)]=102;
   label = 15; break;
  case 15: 
   label = 32; break;
  case 16: 
   var $55=$floatfield;
   var $56=(($55)|(0))==256;
   if ($56) { label = 17; break; } else { label = 21; break; }
  case 17: 
   var $58=$uppercase;
   var $59=(($58) & 1);
   if ($59) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $61=$1;
   HEAP8[($61)]=69;
   label = 20; break;
  case 19: 
   var $63=$1;
   HEAP8[($63)]=101;
   label = 20; break;
  case 20: 
   label = 31; break;
  case 21: 
   var $66=$floatfield;
   var $67=(($66)|(0))==260;
   if ($67) { label = 22; break; } else { label = 26; break; }
  case 22: 
   var $69=$uppercase;
   var $70=(($69) & 1);
   if ($70) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $72=$1;
   HEAP8[($72)]=65;
   label = 25; break;
  case 24: 
   var $74=$1;
   HEAP8[($74)]=97;
   label = 25; break;
  case 25: 
   label = 30; break;
  case 26: 
   var $77=$uppercase;
   var $78=(($77) & 1);
   if ($78) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $80=$1;
   HEAP8[($80)]=71;
   label = 29; break;
  case 28: 
   var $82=$1;
   HEAP8[($82)]=103;
   label = 29; break;
  case 29: 
   label = 30; break;
  case 30: 
   label = 31; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $87=$specify_precision;
   var $88=(($87) & 1);
   return $88;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i7;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i5;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $__tmp_i3;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33=__stackBase__;
   var $34=(__stackBase__)+(8);
   var $35;
   var $36;
   var $37=(__stackBase__)+(16);
   var $38=(__stackBase__)+(24);
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $__tmp_i;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $__tmp_i_i_i1;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73=(__stackBase__)+(32);
   var $74=(__stackBase__)+(40);
   var $75;
   var $76;
   var $77=(__stackBase__)+(48);
   var $78=(__stackBase__)+(56);
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $__tmp_i_i_i;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $__fmt=(__stackBase__)+(64);
   var $__len;
   var $__specify_precision;
   var $__nbuf;
   var $__nar=(__stackBase__)+(72);
   var $__nb=(__stackBase__)+(104);
   var $__nc;
   var $__nbh=(__stackBase__)+(112);
   var $105=(__stackBase__)+(120);
   var $106;
   var $107;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(128);
   var $__ob;
   var $__obh=(__stackBase__)+(192);
   var $108=(__stackBase__)+(200);
   var $__op=(__stackBase__)+(208);
   var $__oe=(__stackBase__)+(216);
   var $109=(__stackBase__)+(224);
   var $110=(__stackBase__)+(232);
   var $111=(__stackBase__)+(240);
   var $112;
   $101=$this;
   $102=$__iob;
   $103=$__fl;
   $104=$__v;
   var $113=$101;
   var $114=$__fmt;
   assert(8 % 1 === 0);(_memcpy($114, ((10616)|0), 8)|0);
   $__len=((2336)|0);
   var $115=(($__fmt)|0);
   var $116=(($115+1)|0);
   var $117=$__len;
   var $118=$102;
   $100=$118;
   var $119=$100;
   var $120=(($119+4)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=__ZNSt3__114__num_put_base14__format_floatEPcPKcj($116, $117, $121);
   var $123=(($122)&(1));
   $__specify_precision=$123;
   $__nbuf=30;
   var $124=(($__nar)|0);
   HEAP32[(($__nb)>>2)]=$124;
   var $125=$__specify_precision;
   var $126=(($125) & 1);
   if ($126) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $128=HEAP32[(($__nb)>>2)];
   var $129=__ZNSt3__16__clocEv();
   var $130=(($__fmt)|0);
   var $131=$102;
   $89=$131;
   var $132=$89;
   var $133=(($132+8)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=$104;
   var $136=__ZNSt3__112__snprintf_lEPcjPvPKcz($128, 30, $129, $130, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$134,HEAPF64[(((tempInt)+(8))>>3)]=$135,tempInt));
   $__nc=$136;
   label = 4; break;
  case 3: 
   var $138=HEAP32[(($__nb)>>2)];
   var $139=__ZNSt3__16__clocEv();
   var $140=(($__fmt)|0);
   var $141=$104;
   var $142=__ZNSt3__112__snprintf_lEPcjPvPKcz($138, 30, $139, $140, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$141,tempInt));
   $__nc=$142;
   label = 4; break;
  case 4: 
   HEAP32[(($105)>>2)]=272;
   $86=$__nbh;
   $87=0;
   $88=$105;
   var $144=$86;
   var $145=$87;
   var $146=$88;
   $83=$144;
   $84=$145;
   $85=$146;
   var $147=$83;
   var $148=(($147)|0);
   var $149=$84;
   var $150=$85;
   $82=$150;
   var $151=$82;
   var $152=HEAP32[(($151)>>2)];
   $79=$148;
   $80=$149;
   $81=$152;
   var $153=$79;
   var $154=$80;
   var $155=$81;
   $76=$153;
   HEAP32[(($77)>>2)]=$154;
   HEAP32[(($78)>>2)]=$155;
   var $156=$76;
   var $157=$156;
   $75=$77;
   var $158=$75;
   var $159=HEAP32[(($158)>>2)];
   $69=$78;
   var $160=$69;
   var $161=HEAP32[(($160)>>2)];
   $72=$157;
   HEAP32[(($73)>>2)]=$159;
   HEAP32[(($74)>>2)]=$161;
   var $162=$72;
   var $163=(($162)|0);
   $71=$73;
   var $164=$71;
   var $165=HEAP32[(($164)>>2)];
   HEAP32[(($163)>>2)]=$165;
   var $166=(($162+4)|0);
   $70=$74;
   var $167=$70;
   var $168=HEAP32[(($167)>>2)];
   HEAP32[(($166)>>2)]=$168;
   var $169=$__nc;
   var $170=(($169)|(0)) > 29;
   if ($170) { label = 5; break; } else { label = 23; break; }
  case 5: 
   var $172=$__specify_precision;
   var $173=(($172) & 1);
   if ($173) { label = 6; break; } else { label = 11; break; }
  case 6: 
   var $175 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $177=(($__fmt)|0);
   var $178=$102;
   $58=$178;
   var $179=$58;
   var $180=(($179+8)|0);
   var $181=HEAP32[(($180)>>2)];
   label = 8; break;
  case 8: 
   var $183=$104;
   var $184 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, $175, $177, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$181,HEAPF64[(((tempInt)+(8))>>3)]=$183,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $__nc=$184;
   label = 15; break;
  case 10: 
   var $187$0 = ___cxa_find_matching_catch(-1, -1); $187$1 = tempRet0;
   var $188=$187$0;
   $106=$188;
   var $189=$187$1;
   $107=$189;
   label = 52; break;
  case 11: 
   var $191 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 10; break; }
  case 12: 
   var $193=(($__fmt)|0);
   var $194=$102;
   $57=$194;
   var $195=$57;
   var $196=(($195+8)|0);
   var $197=HEAP32[(($196)>>2)];
   label = 13; break;
  case 13: 
   var $199=$104;
   var $200 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, $191, $193, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$197,HEAPF64[(((tempInt)+(8))>>3)]=$199,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 10; break; }
  case 14: 
   $__nc=$200;
   label = 15; break;
  case 15: 
   var $203=HEAP32[(($__nb)>>2)];
   var $204=(($203)|(0))==0;
   if ($204) { label = 16; break; } else { label = 18; break; }
  case 16: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 10; break; }
  case 17: 
   label = 18; break;
  case 18: 
   var $208=HEAP32[(($__nb)>>2)];
   $55=$__nbh;
   $56=$208;
   var $209=$55;
   var $210=(($209)|0);
   $54=$210;
   var $211=$54;
   var $212=$211;
   $53=$212;
   var $213=$53;
   var $214=(($213)|0);
   var $215=HEAP32[(($214)>>2)];
   $__tmp_i=$215;
   var $216=$56;
   var $217=(($209)|0);
   $52=$217;
   var $218=$52;
   var $219=$218;
   $51=$219;
   var $220=$51;
   var $221=(($220)|0);
   HEAP32[(($221)>>2)]=$216;
   var $222=$__tmp_i;
   var $223=(($222)|(0))!=0;
   if ($223) { label = 19; break; } else { label = 22; break; }
  case 19: 
   var $225=(($209)|0);
   $50=$225;
   var $226=$50;
   var $227=$226;
   $49=$227;
   var $228=$49;
   var $229=(($228+4)|0);
   var $230=HEAP32[(($229)>>2)];
   var $231=$__tmp_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$230]($231) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 21; break; }
  case 20: 
   label = 22; break;
  case 21: 
   var $234$0 = ___cxa_find_matching_catch(-1, -1,0); $234$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 22: 
   label = 23; break;
  case 23: 
   var $236=HEAP32[(($__nb)>>2)];
   var $237=$__nc;
   var $238=(($236+$237)|0);
   $__ne=$238;
   var $239=HEAP32[(($__nb)>>2)];
   var $240=$__ne;
   var $241=$102;
   var $242 = (function() { try { __THREW__ = 0; return __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($239, $240, $241) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 10; break; }
  case 24: 
   $__np=$242;
   var $244=(($__o)|0);
   $__ob=$244;
   HEAP32[(($108)>>2)]=272;
   $46=$__obh;
   $47=0;
   $48=$108;
   var $245=$46;
   var $246=$47;
   var $247=$48;
   $43=$245;
   $44=$246;
   $45=$247;
   var $248=$43;
   var $249=(($248)|0);
   var $250=$44;
   var $251=$45;
   $42=$251;
   var $252=$42;
   var $253=HEAP32[(($252)>>2)];
   $39=$249;
   $40=$250;
   $41=$253;
   var $254=$39;
   var $255=$40;
   var $256=$41;
   $36=$254;
   HEAP32[(($37)>>2)]=$255;
   HEAP32[(($38)>>2)]=$256;
   var $257=$36;
   var $258=$257;
   $35=$37;
   var $259=$35;
   var $260=HEAP32[(($259)>>2)];
   $29=$38;
   var $261=$29;
   var $262=HEAP32[(($261)>>2)];
   $32=$258;
   HEAP32[(($33)>>2)]=$260;
   HEAP32[(($34)>>2)]=$262;
   var $263=$32;
   var $264=(($263)|0);
   $31=$33;
   var $265=$31;
   var $266=HEAP32[(($265)>>2)];
   HEAP32[(($264)>>2)]=$266;
   var $267=(($263+4)|0);
   $30=$34;
   var $268=$30;
   var $269=HEAP32[(($268)>>2)];
   HEAP32[(($267)>>2)]=$269;
   var $270=HEAP32[(($__nb)>>2)];
   var $271=(($__nar)|0);
   var $272=(($270)|(0))!=(($271)|(0));
   if ($272) { label = 25; break; } else { label = 34; break; }
  case 25: 
   var $274=$__nc;
   var $275=($274<<1);
   var $276=$275;
   var $277=_malloc($276);
   $__ob=$277;
   var $278=$__ob;
   var $279=(($278)|(0))==0;
   if ($279) { label = 26; break; } else { label = 29; break; }
  case 26: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 28; break; }
  case 27: 
   label = 29; break;
  case 28: 
   var $283$0 = ___cxa_find_matching_catch(-1, -1); $283$1 = tempRet0;
   var $284=$283$0;
   $106=$284;
   var $285=$283$1;
   $107=$285;
   label = 47; break;
  case 29: 
   var $287=$__ob;
   $27=$__obh;
   $28=$287;
   var $288=$27;
   var $289=(($288)|0);
   $26=$289;
   var $290=$26;
   var $291=$290;
   $25=$291;
   var $292=$25;
   var $293=(($292)|0);
   var $294=HEAP32[(($293)>>2)];
   $__tmp_i3=$294;
   var $295=$28;
   var $296=(($288)|0);
   $24=$296;
   var $297=$24;
   var $298=$297;
   $23=$298;
   var $299=$23;
   var $300=(($299)|0);
   HEAP32[(($300)>>2)]=$295;
   var $301=$__tmp_i3;
   var $302=(($301)|(0))!=0;
   if ($302) { label = 30; break; } else { label = 33; break; }
  case 30: 
   var $304=(($288)|0);
   $22=$304;
   var $305=$22;
   var $306=$305;
   $21=$306;
   var $307=$21;
   var $308=(($307+4)|0);
   var $309=HEAP32[(($308)>>2)];
   var $310=$__tmp_i3;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$309]($310) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 32; break; }
  case 31: 
   label = 33; break;
  case 32: 
   var $313$0 = ___cxa_find_matching_catch(-1, -1,0); $313$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 33: 
   label = 34; break;
  case 34: 
   var $315=HEAP32[(($__nb)>>2)];
   var $316=$__np;
   var $317=$__ne;
   var $318=$__ob;
   var $319=$102;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($109, $319) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 28; break; }
  case 35: 
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($315, $316, $317, $318, $__op, $__oe, $109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 46; break; }
  case 36: 
   __ZNSt3__16localeD2Ev($109);
   var $322=$111;
   var $323=$__s;
   assert(4 % 1 === 0);HEAP32[(($322)>>2)]=HEAP32[(($323)>>2)];
   var $324=$__ob;
   var $325=HEAP32[(($__op)>>2)];
   var $326=HEAP32[(($__oe)>>2)];
   var $327=$102;
   var $328=$103;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($110, $111, $324, $325, $326, $327, $328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 28; break; }
  case 37: 
   var $330=$__s;
   var $331=$110;
   assert(4 % 1 === 0);HEAP32[(($330)>>2)]=HEAP32[(($331)>>2)];
   var $332=$agg_result;
   var $333=$__s;
   assert(4 % 1 === 0);HEAP32[(($332)>>2)]=HEAP32[(($333)>>2)];
   $112=1;
   $20=$__obh;
   var $334=$20;
   $19=$334;
   var $335=$19;
   $17=$335;
   $18=0;
   var $336=$17;
   var $337=(($336)|0);
   $16=$337;
   var $338=$16;
   var $339=$338;
   $15=$339;
   var $340=$15;
   var $341=(($340)|0);
   var $342=HEAP32[(($341)>>2)];
   $__tmp_i_i_i5=$342;
   var $343=$18;
   var $344=(($336)|0);
   $14=$344;
   var $345=$14;
   var $346=$345;
   $13=$346;
   var $347=$13;
   var $348=(($347)|0);
   HEAP32[(($348)>>2)]=$343;
   var $349=$__tmp_i_i_i5;
   var $350=(($349)|(0))!=0;
   if ($350) { label = 38; break; } else { label = 41; break; }
  case 38: 
   var $352=(($336)|0);
   $12=$352;
   var $353=$12;
   var $354=$353;
   $11=$354;
   var $355=$11;
   var $356=(($355+4)|0);
   var $357=HEAP32[(($356)>>2)];
   var $358=$__tmp_i_i_i5;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$357]($358) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 40; break; }
  case 39: 
   label = 41; break;
  case 40: 
   var $361$0 = ___cxa_find_matching_catch(-1, -1,0); $361$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 41: 
   $10=$__nbh;
   var $362=$10;
   $9=$362;
   var $363=$9;
   $7=$363;
   $8=0;
   var $364=$7;
   var $365=(($364)|0);
   $6=$365;
   var $366=$6;
   var $367=$366;
   $5=$367;
   var $368=$5;
   var $369=(($368)|0);
   var $370=HEAP32[(($369)>>2)];
   $__tmp_i_i_i7=$370;
   var $371=$8;
   var $372=(($364)|0);
   $4=$372;
   var $373=$4;
   var $374=$373;
   $3=$374;
   var $375=$3;
   var $376=(($375)|0);
   HEAP32[(($376)>>2)]=$371;
   var $377=$__tmp_i_i_i7;
   var $378=(($377)|(0))!=0;
   if ($378) { label = 42; break; } else { label = 45; break; }
  case 42: 
   var $380=(($364)|0);
   $2=$380;
   var $381=$2;
   var $382=$381;
   $1=$382;
   var $383=$1;
   var $384=(($383+4)|0);
   var $385=HEAP32[(($384)>>2)];
   var $386=$__tmp_i_i_i7;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$385]($386) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 44; break; }
  case 43: 
   label = 45; break;
  case 44: 
   var $389$0 = ___cxa_find_matching_catch(-1, -1,0); $389$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 45: 
   STACKTOP = __stackBase__;
   return;
  case 46: 
   var $391$0 = ___cxa_find_matching_catch(-1, -1); $391$1 = tempRet0;
   var $392=$391$0;
   $106=$392;
   var $393=$391$1;
   $107=$393;
   __ZNSt3__16localeD2Ev($109);
   label = 47; break;
  case 47: 
   $68=$__obh;
   var $395=$68;
   $67=$395;
   var $396=$67;
   $65=$396;
   $66=0;
   var $397=$65;
   var $398=(($397)|0);
   $64=$398;
   var $399=$64;
   var $400=$399;
   $63=$400;
   var $401=$63;
   var $402=(($401)|0);
   var $403=HEAP32[(($402)>>2)];
   $__tmp_i_i_i1=$403;
   var $404=$66;
   var $405=(($397)|0);
   $62=$405;
   var $406=$62;
   var $407=$406;
   $61=$407;
   var $408=$61;
   var $409=(($408)|0);
   HEAP32[(($409)>>2)]=$404;
   var $410=$__tmp_i_i_i1;
   var $411=(($410)|(0))!=0;
   if ($411) { label = 48; break; } else { label = 51; break; }
  case 48: 
   var $413=(($397)|0);
   $60=$413;
   var $414=$60;
   var $415=$414;
   $59=$415;
   var $416=$59;
   var $417=(($416+4)|0);
   var $418=HEAP32[(($417)>>2)];
   var $419=$__tmp_i_i_i1;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$418]($419) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 50; break; }
  case 49: 
   label = 51; break;
  case 50: 
   var $422$0 = ___cxa_find_matching_catch(-1, -1,0); $422$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 51: 
   label = 52; break;
  case 52: 
   $99=$__nbh;
   var $424=$99;
   $98=$424;
   var $425=$98;
   $96=$425;
   $97=0;
   var $426=$96;
   var $427=(($426)|0);
   $95=$427;
   var $428=$95;
   var $429=$428;
   $94=$429;
   var $430=$94;
   var $431=(($430)|0);
   var $432=HEAP32[(($431)>>2)];
   $__tmp_i_i_i=$432;
   var $433=$97;
   var $434=(($426)|0);
   $93=$434;
   var $435=$93;
   var $436=$435;
   $92=$436;
   var $437=$92;
   var $438=(($437)|0);
   HEAP32[(($438)>>2)]=$433;
   var $439=$__tmp_i_i_i;
   var $440=(($439)|(0))!=0;
   if ($440) { label = 53; break; } else { label = 56; break; }
  case 53: 
   var $442=(($426)|0);
   $91=$442;
   var $443=$91;
   var $444=$443;
   $90=$444;
   var $445=$90;
   var $446=(($445+4)|0);
   var $447=HEAP32[(($446)>>2)];
   var $448=$__tmp_i_i_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$447]($448) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 54; break; } else { label = 55; break; }
  case 54: 
   label = 56; break;
  case 55: 
   var $451$0 = ___cxa_find_matching_catch(-1, -1,0); $451$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 56: 
   label = 57; break;
  case 57: 
   var $453=$106;
   var $454=$107;
   var $455$0=$453;
   var $455$1=0;
   var $456$0=$455$0;
   var $456$1=$454;
   ___resumeException($456$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__snprintf_lEPcjPvPKcz($__s, $__n, $__l, $__format, varrp) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i1;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25=__stackBase__;
   var $26=(__stackBase__)+(8);
   var $27;
   var $28;
   var $29=(__stackBase__)+(16);
   var $30=(__stackBase__)+(24);
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $__va=(__stackBase__)+(32);
   var $__current=(__stackBase__)+(48);
   var $45=(__stackBase__)+(56);
   var $__res;
   var $46;
   var $47;
   var $48;
   $41=$__s;
   $42=$__n;
   $43=$__l;
   $44=$__format;
   var $49=(($__va)|0);
   var $50=$49;
   HEAP32[(($50)>>2)]=varrp;HEAP32[((($50)+(4))>>2)]=0;
   var $51=$43;
   var $52=_uselocale($51);
   HEAP32[(($45)>>2)]=284;
   $38=$__current;
   $39=$52;
   $40=$45;
   var $53=$38;
   var $54=$39;
   var $55=$40;
   $35=$53;
   $36=$54;
   $37=$55;
   var $56=$35;
   var $57=(($56)|0);
   var $58=$36;
   var $59=$37;
   $34=$59;
   var $60=$34;
   var $61=HEAP32[(($60)>>2)];
   $31=$57;
   $32=$58;
   $33=$61;
   var $62=$31;
   var $63=$32;
   var $64=$33;
   $28=$62;
   HEAP32[(($29)>>2)]=$63;
   HEAP32[(($30)>>2)]=$64;
   var $65=$28;
   var $66=$65;
   $27=$29;
   var $67=$27;
   var $68=HEAP32[(($67)>>2)];
   $21=$30;
   var $69=$21;
   var $70=HEAP32[(($69)>>2)];
   $24=$66;
   HEAP32[(($25)>>2)]=$68;
   HEAP32[(($26)>>2)]=$70;
   var $71=$24;
   var $72=(($71)|0);
   $23=$25;
   var $73=$23;
   var $74=HEAP32[(($73)>>2)];
   HEAP32[(($72)>>2)]=$74;
   var $75=(($71+4)|0);
   $22=$26;
   var $76=$22;
   var $77=HEAP32[(($76)>>2)];
   HEAP32[(($75)>>2)]=$77;
   var $78=$41;
   var $79=$42;
   var $80=$44;
   var $81=(($__va)|0);
   var $82 = (function() { try { __THREW__ = 0; return _vsnprintf($78, $79, $80, $81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 7; break; }
  case 2: 
   $__res=$82;
   var $84=(($__va)|0);
   var $85=$84;
   var $86=$__res;
   $48=1;
   $10=$__current;
   var $87=$10;
   $9=$87;
   var $88=$9;
   $7=$88;
   $8=0;
   var $89=$7;
   var $90=(($89)|0);
   $6=$90;
   var $91=$6;
   var $92=$91;
   $5=$92;
   var $93=$5;
   var $94=(($93)|0);
   var $95=HEAP32[(($94)>>2)];
   $__tmp_i_i_i1=$95;
   var $96=$8;
   var $97=(($89)|0);
   $4=$97;
   var $98=$4;
   var $99=$98;
   $3=$99;
   var $100=$3;
   var $101=(($100)|0);
   HEAP32[(($101)>>2)]=$96;
   var $102=$__tmp_i_i_i1;
   var $103=(($102)|(0))!=0;
   if ($103) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $105=(($89)|0);
   $2=$105;
   var $106=$2;
   var $107=$106;
   $1=$107;
   var $108=$1;
   var $109=(($108+4)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=$__tmp_i_i_i1;
   var $112 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$110]($111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 6; break;
  case 5: 
   var $115$0 = ___cxa_find_matching_catch(-1, -1,0); $115$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 6: 
   STACKTOP = __stackBase__;
   return $86;
  case 7: 
   var $117$0 = ___cxa_find_matching_catch(-1, -1); $117$1 = tempRet0;
   var $118=$117$0;
   $46=$118;
   var $119=$117$1;
   $47=$119;
   $20=$__current;
   var $120=$20;
   $19=$120;
   var $121=$19;
   $17=$121;
   $18=0;
   var $122=$17;
   var $123=(($122)|0);
   $16=$123;
   var $124=$16;
   var $125=$124;
   $15=$125;
   var $126=$15;
   var $127=(($126)|0);
   var $128=HEAP32[(($127)>>2)];
   $__tmp_i_i_i=$128;
   var $129=$18;
   var $130=(($122)|0);
   $14=$130;
   var $131=$14;
   var $132=$131;
   $13=$132;
   var $133=$13;
   var $134=(($133)|0);
   HEAP32[(($134)>>2)]=$129;
   var $135=$__tmp_i_i_i;
   var $136=(($135)|(0))!=0;
   if ($136) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $138=(($122)|0);
   $12=$138;
   var $139=$12;
   var $140=$139;
   $11=$140;
   var $141=$11;
   var $142=(($141+4)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=$__tmp_i_i_i;
   var $145 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$143]($144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
  case 9: 
   label = 11; break;
  case 10: 
   var $148$0 = ___cxa_find_matching_catch(-1, -1,0); $148$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 11: 
   label = 12; break;
  case 12: 
   var $150=$46;
   var $151=$47;
   var $152$0=$150;
   var $152$1=0;
   var $153$0=$152$0;
   var $153$1=$151;
   ___resumeException($153$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__asprintf_lEPPcPvPKcz($__s, $__l, $__format, varrp) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i1;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25=__stackBase__;
   var $26=(__stackBase__)+(8);
   var $27;
   var $28;
   var $29=(__stackBase__)+(16);
   var $30=(__stackBase__)+(24);
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $__va=(__stackBase__)+(32);
   var $__current=(__stackBase__)+(48);
   var $44=(__stackBase__)+(56);
   var $__res;
   var $45;
   var $46;
   var $47;
   $41=$__s;
   $42=$__l;
   $43=$__format;
   var $48=(($__va)|0);
   var $49=$48;
   HEAP32[(($49)>>2)]=varrp;HEAP32[((($49)+(4))>>2)]=0;
   var $50=$42;
   var $51=_uselocale($50);
   HEAP32[(($44)>>2)]=284;
   $38=$__current;
   $39=$51;
   $40=$44;
   var $52=$38;
   var $53=$39;
   var $54=$40;
   $35=$52;
   $36=$53;
   $37=$54;
   var $55=$35;
   var $56=(($55)|0);
   var $57=$36;
   var $58=$37;
   $34=$58;
   var $59=$34;
   var $60=HEAP32[(($59)>>2)];
   $31=$56;
   $32=$57;
   $33=$60;
   var $61=$31;
   var $62=$32;
   var $63=$33;
   $28=$61;
   HEAP32[(($29)>>2)]=$62;
   HEAP32[(($30)>>2)]=$63;
   var $64=$28;
   var $65=$64;
   $27=$29;
   var $66=$27;
   var $67=HEAP32[(($66)>>2)];
   $21=$30;
   var $68=$21;
   var $69=HEAP32[(($68)>>2)];
   $24=$65;
   HEAP32[(($25)>>2)]=$67;
   HEAP32[(($26)>>2)]=$69;
   var $70=$24;
   var $71=(($70)|0);
   $23=$25;
   var $72=$23;
   var $73=HEAP32[(($72)>>2)];
   HEAP32[(($71)>>2)]=$73;
   var $74=(($70+4)|0);
   $22=$26;
   var $75=$22;
   var $76=HEAP32[(($75)>>2)];
   HEAP32[(($74)>>2)]=$76;
   var $77=$41;
   var $78=$43;
   var $79=(($__va)|0);
   var $80 = (function() { try { __THREW__ = 0; return _vasprintf($77, $78, $79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 7; break; }
  case 2: 
   $__res=$80;
   var $82=(($__va)|0);
   var $83=$82;
   var $84=$__res;
   $47=1;
   $10=$__current;
   var $85=$10;
   $9=$85;
   var $86=$9;
   $7=$86;
   $8=0;
   var $87=$7;
   var $88=(($87)|0);
   $6=$88;
   var $89=$6;
   var $90=$89;
   $5=$90;
   var $91=$5;
   var $92=(($91)|0);
   var $93=HEAP32[(($92)>>2)];
   $__tmp_i_i_i1=$93;
   var $94=$8;
   var $95=(($87)|0);
   $4=$95;
   var $96=$4;
   var $97=$96;
   $3=$97;
   var $98=$3;
   var $99=(($98)|0);
   HEAP32[(($99)>>2)]=$94;
   var $100=$__tmp_i_i_i1;
   var $101=(($100)|(0))!=0;
   if ($101) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $103=(($87)|0);
   $2=$103;
   var $104=$2;
   var $105=$104;
   $1=$105;
   var $106=$1;
   var $107=(($106+4)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=$__tmp_i_i_i1;
   var $110 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 6; break;
  case 5: 
   var $113$0 = ___cxa_find_matching_catch(-1, -1,0); $113$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 6: 
   STACKTOP = __stackBase__;
   return $84;
  case 7: 
   var $115$0 = ___cxa_find_matching_catch(-1, -1); $115$1 = tempRet0;
   var $116=$115$0;
   $45=$116;
   var $117=$115$1;
   $46=$117;
   $20=$__current;
   var $118=$20;
   $19=$118;
   var $119=$19;
   $17=$119;
   $18=0;
   var $120=$17;
   var $121=(($120)|0);
   $16=$121;
   var $122=$16;
   var $123=$122;
   $15=$123;
   var $124=$15;
   var $125=(($124)|0);
   var $126=HEAP32[(($125)>>2)];
   $__tmp_i_i_i=$126;
   var $127=$18;
   var $128=(($120)|0);
   $14=$128;
   var $129=$14;
   var $130=$129;
   $13=$130;
   var $131=$13;
   var $132=(($131)|0);
   HEAP32[(($132)>>2)]=$127;
   var $133=$__tmp_i_i_i;
   var $134=(($133)|(0))!=0;
   if ($134) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $136=(($120)|0);
   $12=$136;
   var $137=$12;
   var $138=$137;
   $11=$138;
   var $139=$11;
   var $140=(($139+4)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=$__tmp_i_i_i;
   var $143 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$141]($142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
  case 9: 
   label = 11; break;
  case 10: 
   var $146$0 = ___cxa_find_matching_catch(-1, -1,0); $146$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 11: 
   label = 12; break;
  case 12: 
   var $148=$45;
   var $149=$46;
   var $150$0=$148;
   var $150$1=0;
   var $151$0=$150$0;
   var $151$1=$149;
   ___resumeException($151$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $__t_i_i_i6=__stackBase__;
   var $18;
   var $19;
   var $20=(__stackBase__)+(8);
   var $21;
   var $22;
   var $23=(__stackBase__)+(16);
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $__t_i_i_i=(__stackBase__)+(24);
   var $57;
   var $58;
   var $59=(__stackBase__)+(32);
   var $60;
   var $61;
   var $62=(__stackBase__)+(40);
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $__ct;
   var $__npt;
   var $__grouping=(__stackBase__)+(48);
   var $__nf;
   var $98;
   var $99;
   var $__ns;
   var $__thousands_sep;
   var $__dc;
   var $__dg;
   var $__p;
   $91=$__nb;
   $92=$__np;
   $93=$__ne;
   $94=$__ob;
   $95=$__op;
   $96=$__oe;
   $97=$__loc;
   var $100=$97;
   $90=$100;
   var $101=$90;
   var $102=__ZNKSt3__16locale9use_facetERNS0_2idE($101, 19816);
   var $103=$102;
   $__ct=$103;
   var $104=$97;
   $89=$104;
   var $105=$89;
   var $106=__ZNKSt3__16locale9use_facetERNS0_2idE($105, 19432);
   var $107=$106;
   $__npt=$107;
   var $108=$__npt;
   $88=$108;
   var $109=$88;
   var $110=$109;
   var $111=HEAP32[(($110)>>2)];
   var $112=(($111+20)|0);
   var $113=HEAP32[(($112)>>2)];
   FUNCTION_TABLE[$113]($__grouping, $109);
   var $114=$94;
   var $115=$96;
   HEAP32[(($115)>>2)]=$114;
   var $116=$91;
   $__nf=$116;
   var $117=$__nf;
   var $118=HEAP8[($117)];
   var $119=(($118 << 24) >> 24);
   var $120=(($119)|(0))==45;
   if ($120) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $122=$__nf;
   var $123=HEAP8[($122)];
   var $124=(($123 << 24) >> 24);
   var $125=(($124)|(0))==43;
   if ($125) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $127=$__ct;
   var $128=$__nf;
   var $129=(($128+1)|0);
   $__nf=$129;
   var $130=HEAP8[($128)];
   $86=$127;
   $87=$130;
   var $131=$86;
   var $132=$131;
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133+28)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=$87;
   var $137 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$135]($131, $136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $139=$96;
   var $140=HEAP32[(($139)>>2)];
   var $141=(($140+1)|0);
   HEAP32[(($139)>>2)]=$141;
   HEAP8[($140)]=$137;
   label = 7; break;
  case 6: 
   var $143$0 = ___cxa_find_matching_catch(-1, -1); $143$1 = tempRet0;
   var $144=$143$0;
   $98=$144;
   var $145=$143$1;
   $99=$145;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 94; break;
  case 7: 
   var $147=$93;
   var $148=$__nf;
   var $149=$147;
   var $150=$148;
   var $151=((($149)-($150))|0);
   var $152=(($151)|(0)) >= 2;
   if ($152) { label = 8; break; } else { label = 24; break; }
  case 8: 
   var $154=$__nf;
   var $155=(($154)|0);
   var $156=HEAP8[($155)];
   var $157=(($156 << 24) >> 24);
   var $158=(($157)|(0))==48;
   if ($158) { label = 9; break; } else { label = 24; break; }
  case 9: 
   var $160=$__nf;
   var $161=(($160+1)|0);
   var $162=HEAP8[($161)];
   var $163=(($162 << 24) >> 24);
   var $164=(($163)|(0))==120;
   if ($164) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $166=$__nf;
   var $167=(($166+1)|0);
   var $168=HEAP8[($167)];
   var $169=(($168 << 24) >> 24);
   var $170=(($169)|(0))==88;
   if ($170) { label = 11; break; } else { label = 24; break; }
  case 11: 
   var $172=$__ct;
   var $173=$__nf;
   var $174=(($173+1)|0);
   $__nf=$174;
   var $175=HEAP8[($173)];
   $84=$172;
   $85=$175;
   var $176=$84;
   var $177=$176;
   var $178=HEAP32[(($177)>>2)];
   var $179=(($178+28)|0);
   var $180=HEAP32[(($179)>>2)];
   var $181=$85;
   var $182 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$180]($176, $181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 6; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $184=$96;
   var $185=HEAP32[(($184)>>2)];
   var $186=(($185+1)|0);
   HEAP32[(($184)>>2)]=$186;
   HEAP8[($185)]=$182;
   var $187=$__ct;
   var $188=$__nf;
   var $189=(($188+1)|0);
   $__nf=$189;
   var $190=HEAP8[($188)];
   $82=$187;
   $83=$190;
   var $191=$82;
   var $192=$191;
   var $193=HEAP32[(($192)>>2)];
   var $194=(($193+28)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=$83;
   var $197 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$195]($191, $196) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 6; break; }
  case 14: 
   label = 15; break;
  case 15: 
   var $199=$96;
   var $200=HEAP32[(($199)>>2)];
   var $201=(($200+1)|0);
   HEAP32[(($199)>>2)]=$201;
   HEAP8[($200)]=$197;
   var $202=$__nf;
   $__ns=$202;
   label = 16; break;
  case 16: 
   var $204=$__ns;
   var $205=$93;
   var $206=(($204)>>>(0)) < (($205)>>>(0));
   if ($206) { label = 17; break; } else { label = 23; break; }
  case 17: 
   var $208=$__ns;
   var $209=HEAP8[($208)];
   var $210=(($209 << 24) >> 24);
   var $211 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 6; break; }
  case 18: 
   var $213 = (function() { try { __THREW__ = 0; return _isxdigit($210, $211) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 6; break; }
  case 19: 
   var $215=(($213)|(0))!=0;
   if ($215) { label = 21; break; } else { label = 20; break; }
  case 20: 
   label = 23; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $219=$__ns;
   var $220=(($219+1)|0);
   $__ns=$220;
   label = 16; break;
  case 23: 
   label = 33; break;
  case 24: 
   var $223=$__nf;
   $__ns=$223;
   label = 25; break;
  case 25: 
   var $225=$__ns;
   var $226=$93;
   var $227=(($225)>>>(0)) < (($226)>>>(0));
   if ($227) { label = 26; break; } else { label = 32; break; }
  case 26: 
   var $229=$__ns;
   var $230=HEAP8[($229)];
   var $231=(($230 << 24) >> 24);
   var $232 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 6; break; }
  case 27: 
   var $234 = (function() { try { __THREW__ = 0; return _isdigit($231, $232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 6; break; }
  case 28: 
   var $236=(($234)|(0))!=0;
   if ($236) { label = 30; break; } else { label = 29; break; }
  case 29: 
   label = 32; break;
  case 30: 
   label = 31; break;
  case 31: 
   var $240=$__ns;
   var $241=(($240+1)|0);
   $__ns=$241;
   label = 25; break;
  case 32: 
   label = 33; break;
  case 33: 
   $81=$__grouping;
   var $244=$81;
   $80=$244;
   var $245=$80;
   $79=$245;
   var $246=$79;
   var $247=(($246)|0);
   $78=$247;
   var $248=$78;
   var $249=$248;
   $77=$249;
   var $250=$77;
   var $251=(($250)|0);
   var $252=(($251)|0);
   var $253=$252;
   var $254=(($253)|0);
   var $255=$254;
   var $256=HEAP8[($255)];
   var $257=(($256)&(255));
   var $258=$257 & 1;
   var $259=(($258)|(0))!=0;
   if ($259) { label = 34; break; } else { label = 35; break; }
  case 34: 
   $73=$245;
   var $261=$73;
   var $262=(($261)|0);
   $72=$262;
   var $263=$72;
   var $264=$263;
   $71=$264;
   var $265=$71;
   var $266=(($265)|0);
   var $267=(($266)|0);
   var $268=$267;
   var $269=(($268+4)|0);
   var $270=HEAP32[(($269)>>2)];
   var $285 = $270;label = 36; break;
  case 35: 
   $76=$245;
   var $272=$76;
   var $273=(($272)|0);
   $75=$273;
   var $274=$75;
   var $275=$274;
   $74=$275;
   var $276=$74;
   var $277=(($276)|0);
   var $278=(($277)|0);
   var $279=$278;
   var $280=(($279)|0);
   var $281=$280;
   var $282=HEAP8[($281)];
   var $283=(($282)&(255));
   var $284=$283 >> 1;
   var $285 = $284;label = 36; break;
  case 36: 
   var $285;
   var $286=(($285)|(0))==0;
   if ($286) { label = 37; break; } else { label = 40; break; }
  case 37: 
   var $288=$__ct;
   var $289=$__nf;
   var $290=$__ns;
   var $291=$96;
   var $292=HEAP32[(($291)>>2)];
   $63=$288;
   $64=$289;
   $65=$290;
   $66=$292;
   var $293=$63;
   var $294=$293;
   var $295=HEAP32[(($294)>>2)];
   var $296=(($295+32)|0);
   var $297=HEAP32[(($296)>>2)];
   var $298=$64;
   var $299=$65;
   var $300=$66;
   var $301 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$297]($293, $298, $299, $300) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 6; break; }
  case 38: 
   label = 39; break;
  case 39: 
   var $303=$__ns;
   var $304=$__nf;
   var $305=$303;
   var $306=$304;
   var $307=((($305)-($306))|0);
   var $308=$96;
   var $309=HEAP32[(($308)>>2)];
   var $310=(($309+$307)|0);
   HEAP32[(($308)>>2)]=$310;
   label = 77; break;
  case 40: 
   var $312=$__nf;
   var $313=$__ns;
   $60=$312;
   $61=$313;
   var $314=$60;
   var $315=$61;
   var $tmp_i=$59;
   var $tmp1_i=$62;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $57=$314;
   $58=$315;
   var $316=$57;
   var $317=$58;
   var $318=(($316)|(0))!=(($317)|(0));
   if ($318) { label = 41; break; } else { label = 45; break; }
  case 41: 
   label = 42; break;
  case 42: 
   var $321=$57;
   var $322=$58;
   var $323=((($322)-(1))|0);
   $58=$323;
   var $324=(($321)>>>(0)) < (($323)>>>(0));
   if ($324) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $326=$57;
   var $327=$58;
   $55=$326;
   $56=$327;
   var $328=$55;
   $54=$328;
   var $329=$54;
   var $330=HEAP8[($329)];
   HEAP8[($__t_i_i_i)]=$330;
   var $331=$56;
   $52=$331;
   var $332=$52;
   var $333=HEAP8[($332)];
   var $334=$55;
   HEAP8[($334)]=$333;
   $53=$__t_i_i_i;
   var $335=$53;
   var $336=HEAP8[($335)];
   var $337=$56;
   HEAP8[($337)]=$336;
   var $338=$57;
   var $339=(($338+1)|0);
   $57=$339;
   label = 42; break;
  case 44: 
   label = 45; break;
  case 45: 
   label = 46; break;
  case 46: 
   var $342=$__npt;
   $49=$342;
   var $343=$49;
   var $344=$343;
   var $345=HEAP32[(($344)>>2)];
   var $346=(($345+16)|0);
   var $347=HEAP32[(($346)>>2)];
   var $348 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$347]($343) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 47; break; } else { label = 6; break; }
  case 47: 
   label = 48; break;
  case 48: 
   $__thousands_sep=$348;
   $__dc=0;
   $__dg=0;
   var $350=$__nf;
   $__p=$350;
   label = 49; break;
  case 49: 
   var $352=$__p;
   var $353=$__ns;
   var $354=(($352)>>>(0)) < (($353)>>>(0));
   if ($354) { label = 50; break; } else { label = 70; break; }
  case 50: 
   var $356=$__dg;
   $47=$__grouping;
   $48=$356;
   var $357=$47;
   $46=$357;
   var $358=$46;
   $45=$358;
   var $359=$45;
   var $360=(($359)|0);
   $44=$360;
   var $361=$44;
   var $362=$361;
   $43=$362;
   var $363=$43;
   var $364=(($363)|0);
   var $365=(($364)|0);
   var $366=$365;
   var $367=(($366)|0);
   var $368=$367;
   var $369=HEAP8[($368)];
   var $370=(($369)&(255));
   var $371=$370 & 1;
   var $372=(($371)|(0))!=0;
   if ($372) { label = 51; break; } else { label = 52; break; }
  case 51: 
   $39=$358;
   var $374=$39;
   var $375=(($374)|0);
   $38=$375;
   var $376=$38;
   var $377=$376;
   $37=$377;
   var $378=$37;
   var $379=(($378)|0);
   var $380=(($379)|0);
   var $381=$380;
   var $382=(($381+8)|0);
   var $383=HEAP32[(($382)>>2)];
   var $395 = $383;label = 53; break;
  case 52: 
   $42=$358;
   var $385=$42;
   var $386=(($385)|0);
   $41=$386;
   var $387=$41;
   var $388=$387;
   $40=$388;
   var $389=$40;
   var $390=(($389)|0);
   var $391=(($390)|0);
   var $392=$391;
   var $393=(($392+1)|0);
   var $394=(($393)|0);
   var $395 = $394;label = 53; break;
  case 53: 
   var $395;
   var $396=$48;
   var $397=(($395+$396)|0);
   label = 54; break;
  case 54: 
   var $399=HEAP8[($397)];
   var $400=(($399 << 24) >> 24);
   var $401=(($400)|(0)) > 0;
   if ($401) { label = 55; break; } else { label = 66; break; }
  case 55: 
   var $403=$__dc;
   var $404=$__dg;
   $34=$__grouping;
   $35=$404;
   var $405=$34;
   $33=$405;
   var $406=$33;
   $32=$406;
   var $407=$32;
   var $408=(($407)|0);
   $31=$408;
   var $409=$31;
   var $410=$409;
   $30=$410;
   var $411=$30;
   var $412=(($411)|0);
   var $413=(($412)|0);
   var $414=$413;
   var $415=(($414)|0);
   var $416=$415;
   var $417=HEAP8[($416)];
   var $418=(($417)&(255));
   var $419=$418 & 1;
   var $420=(($419)|(0))!=0;
   if ($420) { label = 56; break; } else { label = 57; break; }
  case 56: 
   $26=$406;
   var $422=$26;
   var $423=(($422)|0);
   $25=$423;
   var $424=$25;
   var $425=$424;
   $24=$425;
   var $426=$24;
   var $427=(($426)|0);
   var $428=(($427)|0);
   var $429=$428;
   var $430=(($429+8)|0);
   var $431=HEAP32[(($430)>>2)];
   var $443 = $431;label = 58; break;
  case 57: 
   $29=$406;
   var $433=$29;
   var $434=(($433)|0);
   $28=$434;
   var $435=$28;
   var $436=$435;
   $27=$436;
   var $437=$27;
   var $438=(($437)|0);
   var $439=(($438)|0);
   var $440=$439;
   var $441=(($440+1)|0);
   var $442=(($441)|0);
   var $443 = $442;label = 58; break;
  case 58: 
   var $443;
   var $444=$35;
   var $445=(($443+$444)|0);
   label = 59; break;
  case 59: 
   var $447=HEAP8[($445)];
   var $448=(($447 << 24) >> 24);
   var $449=(($403)|(0))==(($448)|(0));
   if ($449) { label = 60; break; } else { label = 66; break; }
  case 60: 
   var $451=$__thousands_sep;
   var $452=$96;
   var $453=HEAP32[(($452)>>2)];
   var $454=(($453+1)|0);
   HEAP32[(($452)>>2)]=$454;
   HEAP8[($453)]=$451;
   $__dc=0;
   var $455=$__dg;
   $10=$__grouping;
   var $456=$10;
   $9=$456;
   var $457=$9;
   var $458=(($457)|0);
   $8=$458;
   var $459=$8;
   var $460=$459;
   $7=$460;
   var $461=$7;
   var $462=(($461)|0);
   var $463=(($462)|0);
   var $464=$463;
   var $465=(($464)|0);
   var $466=$465;
   var $467=HEAP8[($466)];
   var $468=(($467)&(255));
   var $469=$468 & 1;
   var $470=(($469)|(0))!=0;
   if ($470) { label = 61; break; } else { label = 62; break; }
  case 61: 
   $3=$456;
   var $472=$3;
   var $473=(($472)|0);
   $2=$473;
   var $474=$2;
   var $475=$474;
   $1=$475;
   var $476=$1;
   var $477=(($476)|0);
   var $478=(($477)|0);
   var $479=$478;
   var $480=(($479+4)|0);
   var $481=HEAP32[(($480)>>2)];
   var $496 = $481;label = 63; break;
  case 62: 
   $6=$456;
   var $483=$6;
   var $484=(($483)|0);
   $5=$484;
   var $485=$5;
   var $486=$485;
   $4=$486;
   var $487=$4;
   var $488=(($487)|0);
   var $489=(($488)|0);
   var $490=$489;
   var $491=(($490)|0);
   var $492=$491;
   var $493=HEAP8[($492)];
   var $494=(($493)&(255));
   var $495=$494 >> 1;
   var $496 = $495;label = 63; break;
  case 63: 
   var $496;
   var $497=((($496)-(1))|0);
   var $498=(($455)>>>(0)) < (($497)>>>(0));
   if ($498) { label = 64; break; } else { label = 65; break; }
  case 64: 
   var $500=$__dg;
   var $501=((($500)+(1))|0);
   $__dg=$501;
   label = 65; break;
  case 65: 
   label = 66; break;
  case 66: 
   var $504=$__ct;
   var $505=$__p;
   var $506=HEAP8[($505)];
   $11=$504;
   $12=$506;
   var $507=$11;
   var $508=$507;
   var $509=HEAP32[(($508)>>2)];
   var $510=(($509+28)|0);
   var $511=HEAP32[(($510)>>2)];
   var $512=$12;
   var $513 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$511]($507, $512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 67; break; } else { label = 6; break; }
  case 67: 
   label = 68; break;
  case 68: 
   var $515=$96;
   var $516=HEAP32[(($515)>>2)];
   var $517=(($516+1)|0);
   HEAP32[(($515)>>2)]=$517;
   HEAP8[($516)]=$513;
   var $518=$__dc;
   var $519=((($518)+(1))|0);
   $__dc=$519;
   label = 69; break;
  case 69: 
   var $521=$__p;
   var $522=(($521+1)|0);
   $__p=$522;
   label = 49; break;
  case 70: 
   var $524=$94;
   var $525=$__nf;
   var $526=$91;
   var $527=$525;
   var $528=$526;
   var $529=((($527)-($528))|0);
   var $530=(($524+$529)|0);
   var $531=$96;
   var $532=HEAP32[(($531)>>2)];
   $21=$530;
   $22=$532;
   var $533=$21;
   var $534=$22;
   var $tmp_i7=$20;
   var $tmp1_i8=$23;
   assert(1 % 1 === 0);HEAP8[($tmp_i7)]=HEAP8[($tmp1_i8)];
   $18=$533;
   $19=$534;
   var $535=$18;
   var $536=$19;
   var $537=(($535)|(0))!=(($536)|(0));
   if ($537) { label = 71; break; } else { label = 75; break; }
  case 71: 
   label = 72; break;
  case 72: 
   var $540=$18;
   var $541=$19;
   var $542=((($541)-(1))|0);
   $19=$542;
   var $543=(($540)>>>(0)) < (($542)>>>(0));
   if ($543) { label = 73; break; } else { label = 74; break; }
  case 73: 
   var $545=$18;
   var $546=$19;
   $16=$545;
   $17=$546;
   var $547=$16;
   $15=$547;
   var $548=$15;
   var $549=HEAP8[($548)];
   HEAP8[($__t_i_i_i6)]=$549;
   var $550=$17;
   $13=$550;
   var $551=$13;
   var $552=HEAP8[($551)];
   var $553=$16;
   HEAP8[($553)]=$552;
   $14=$__t_i_i_i6;
   var $554=$14;
   var $555=HEAP8[($554)];
   var $556=$17;
   HEAP8[($556)]=$555;
   var $557=$18;
   var $558=(($557+1)|0);
   $18=$558;
   label = 72; break;
  case 74: 
   label = 75; break;
  case 75: 
   label = 76; break;
  case 76: 
   label = 77; break;
  case 77: 
   var $562=$__ns;
   $__nf=$562;
   label = 78; break;
  case 78: 
   var $564=$__nf;
   var $565=$93;
   var $566=(($564)>>>(0)) < (($565)>>>(0));
   if ($566) { label = 79; break; } else { label = 88; break; }
  case 79: 
   var $568=$__nf;
   var $569=HEAP8[($568)];
   var $570=(($569 << 24) >> 24);
   var $571=(($570)|(0))==46;
   if ($571) { label = 80; break; } else { label = 83; break; }
  case 80: 
   var $573=$__npt;
   $36=$573;
   var $574=$36;
   var $575=$574;
   var $576=HEAP32[(($575)>>2)];
   var $577=(($576+12)|0);
   var $578=HEAP32[(($577)>>2)];
   var $579 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$578]($574) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 81; break; } else { label = 6; break; }
  case 81: 
   label = 82; break;
  case 82: 
   var $581=$96;
   var $582=HEAP32[(($581)>>2)];
   var $583=(($582+1)|0);
   HEAP32[(($581)>>2)]=$583;
   HEAP8[($582)]=$579;
   var $584=$__nf;
   var $585=(($584+1)|0);
   $__nf=$585;
   label = 88; break;
  case 83: 
   var $587=$__ct;
   var $588=$__nf;
   var $589=HEAP8[($588)];
   $50=$587;
   $51=$589;
   var $590=$50;
   var $591=$590;
   var $592=HEAP32[(($591)>>2)];
   var $593=(($592+28)|0);
   var $594=HEAP32[(($593)>>2)];
   var $595=$51;
   var $596 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$594]($590, $595) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 84; break; } else { label = 6; break; }
  case 84: 
   label = 85; break;
  case 85: 
   var $598=$96;
   var $599=HEAP32[(($598)>>2)];
   var $600=(($599+1)|0);
   HEAP32[(($598)>>2)]=$600;
   HEAP8[($599)]=$596;
   label = 86; break;
  case 86: 
   label = 87; break;
  case 87: 
   var $603=$__nf;
   var $604=(($603+1)|0);
   $__nf=$604;
   label = 78; break;
  case 88: 
   var $606=$__ct;
   var $607=$__nf;
   var $608=$93;
   var $609=$96;
   var $610=HEAP32[(($609)>>2)];
   $67=$606;
   $68=$607;
   $69=$608;
   $70=$610;
   var $611=$67;
   var $612=$611;
   var $613=HEAP32[(($612)>>2)];
   var $614=(($613+32)|0);
   var $615=HEAP32[(($614)>>2)];
   var $616=$68;
   var $617=$69;
   var $618=$70;
   var $619 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$615]($611, $616, $617, $618) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 89; break; } else { label = 6; break; }
  case 89: 
   label = 90; break;
  case 90: 
   var $621=$93;
   var $622=$__nf;
   var $623=$621;
   var $624=$622;
   var $625=((($623)-($624))|0);
   var $626=$96;
   var $627=HEAP32[(($626)>>2)];
   var $628=(($627+$625)|0);
   HEAP32[(($626)>>2)]=$628;
   var $629=$92;
   var $630=$93;
   var $631=(($629)|(0))==(($630)|(0));
   if ($631) { label = 91; break; } else { label = 92; break; }
  case 91: 
   var $633=$96;
   var $634=HEAP32[(($633)>>2)];
   var $635=$95;
   HEAP32[(($635)>>2)]=$634;
   label = 93; break;
  case 92: 
   var $637=$94;
   var $638=$92;
   var $639=$91;
   var $640=$638;
   var $641=$639;
   var $642=((($640)-($641))|0);
   var $643=(($637+$642)|0);
   var $644=$95;
   HEAP32[(($644)>>2)]=$643;
   label = 93; break;
  case 93: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 94: 
   var $647=$98;
   var $648=$99;
   var $649$0=$647;
   var $649$1=0;
   var $650$0=$649$0;
   var $650$1=$648;
   ___resumeException($650$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $__fmt=__stackBase__;
   var $__nbuf;
   var $__nar=(__stackBase__)+(8);
   var $__nc;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(32);
   var $__op;
   var $__oe;
   var $__ct;
   var $10=(__stackBase__)+(72);
   var $11;
   var $12;
   var $13=(__stackBase__)+(80);
   $6=$this;
   $7=$__iob;
   $8=$__fl;
   $9=$__v;
   var $14=$6;
   var $15=$__fmt;
   assert(6 % 1 === 0);HEAP8[($15)]=HEAP8[((((10624)|0))|0)];HEAP8[((($15)+(1))|0)]=HEAP8[(((((10624)|0))+(1))|0)];HEAP8[((($15)+(2))|0)]=HEAP8[(((((10624)|0))+(2))|0)];HEAP8[((($15)+(3))|0)]=HEAP8[(((((10624)|0))+(3))|0)];HEAP8[((($15)+(4))|0)]=HEAP8[(((((10624)|0))+(4))|0)];HEAP8[((($15)+(5))|0)]=HEAP8[(((((10624)|0))+(5))|0)];
   $__nbuf=20;
   var $16=(($__nar)|0);
   var $17=__ZNSt3__16__clocEv();
   var $18=(($__fmt)|0);
   var $19=$9;
   var $20=__ZNSt3__111__sprintf_lEPcPvPKcz($16, $17, $18, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$19,tempInt));
   $__nc=$20;
   var $21=(($__nar)|0);
   var $22=$__nc;
   var $23=(($21+$22)|0);
   $__ne=$23;
   var $24=(($__nar)|0);
   var $25=$__ne;
   var $26=$7;
   var $27=__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24, $25, $26);
   $__np=$27;
   var $28=$7;
   __ZNKSt3__18ios_base6getlocEv($10, $28);
   $5=$10;
   var $29=$5;
   var $30 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($29, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $31=$30;
   label = 3; break;
  case 3: 
   __ZNSt3__16localeD2Ev($10);
   $__ct=$31;
   var $33=$__ct;
   var $34=(($__nar)|0);
   var $35=$__ne;
   var $36=(($__o)|0);
   $1=$33;
   $2=$34;
   $3=$35;
   $4=$36;
   var $37=$1;
   var $38=$37;
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+32)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$2;
   var $43=$3;
   var $44=$4;
   var $45=FUNCTION_TABLE[$41]($37, $42, $43, $44);
   var $46=(($__o)|0);
   var $47=$__ne;
   var $48=(($__nar)|0);
   var $49=$47;
   var $50=$48;
   var $51=((($49)-($50))|0);
   var $52=(($46+$51)|0);
   $__oe=$52;
   var $53=$__np;
   var $54=$__ne;
   var $55=(($53)|(0))==(($54)|(0));
   if ($55) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $57=$__oe;
   $__op=$57;
   label = 7; break;
  case 5: 
   var $59$0 = ___cxa_find_matching_catch(-1, -1); $59$1 = tempRet0;
   var $60=$59$0;
   $11=$60;
   var $61=$59$1;
   $12=$61;
   __ZNSt3__16localeD2Ev($10);
   label = 8; break;
  case 6: 
   var $63=(($__o)|0);
   var $64=$__np;
   var $65=(($__nar)|0);
   var $66=$64;
   var $67=$65;
   var $68=((($66)-($67))|0);
   var $69=(($63+$68)|0);
   $__op=$69;
   label = 7; break;
  case 7: 
   var $71=$13;
   var $72=$__s;
   assert(4 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];
   var $73=(($__o)|0);
   var $74=$__op;
   var $75=$__oe;
   var $76=$7;
   var $77=$8;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $13, $73, $74, $75, $76, $77);
   STACKTOP = __stackBase__;
   return;
  case 8: 
   var $79=$11;
   var $80=$12;
   var $81$0=$79;
   var $81$1=0;
   var $82$0=$81$0;
   var $82$1=$80;
   ___resumeException($82$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i7;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i5;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $__tmp_i3;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33=__stackBase__;
   var $34=(__stackBase__)+(8);
   var $35;
   var $36;
   var $37=(__stackBase__)+(16);
   var $38=(__stackBase__)+(24);
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $__tmp_i;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $__tmp_i_i_i1;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72=(__stackBase__)+(32);
   var $73=(__stackBase__)+(40);
   var $74;
   var $75;
   var $76=(__stackBase__)+(48);
   var $77=(__stackBase__)+(56);
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $__tmp_i_i_i;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $__fmt=(__stackBase__)+(64);
   var $__len;
   var $__specify_precision;
   var $__nbuf;
   var $__nar=(__stackBase__)+(72);
   var $__nb=(__stackBase__)+(104);
   var $__nc;
   var $__nbh=(__stackBase__)+(112);
   var $104=(__stackBase__)+(120);
   var $105;
   var $106;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(128);
   var $__ob;
   var $__obh=(__stackBase__)+(192);
   var $107=(__stackBase__)+(200);
   var $__op=(__stackBase__)+(208);
   var $__oe=(__stackBase__)+(216);
   var $108=(__stackBase__)+(224);
   var $109=(__stackBase__)+(232);
   var $110=(__stackBase__)+(240);
   var $111;
   $100=$this;
   $101=$__iob;
   $102=$__fl;
   $103=$__v;
   var $112=$100;
   var $113=$__fmt;
   assert(8 % 1 === 0);(_memcpy($113, ((10608)|0), 8)|0);
   $__len=((1872)|0);
   var $114=(($__fmt)|0);
   var $115=(($114+1)|0);
   var $116=$__len;
   var $117=$101;
   $99=$117;
   var $118=$99;
   var $119=(($118+4)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=__ZNSt3__114__num_put_base14__format_floatEPcPKcj($115, $116, $120);
   var $122=(($121)&(1));
   $__specify_precision=$122;
   $__nbuf=30;
   var $123=(($__nar)|0);
   HEAP32[(($__nb)>>2)]=$123;
   var $124=$__specify_precision;
   var $125=(($124) & 1);
   if ($125) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $127=HEAP32[(($__nb)>>2)];
   var $128=__ZNSt3__16__clocEv();
   var $129=(($__fmt)|0);
   var $130=$101;
   $88=$130;
   var $131=$88;
   var $132=(($131+8)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=$103;
   var $135=__ZNSt3__112__snprintf_lEPcjPvPKcz($127, 30, $128, $129, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$133,HEAPF64[(((tempInt)+(8))>>3)]=$134,tempInt));
   $__nc=$135;
   label = 4; break;
  case 3: 
   var $137=HEAP32[(($__nb)>>2)];
   var $138=__ZNSt3__16__clocEv();
   var $139=(($__fmt)|0);
   var $140=$103;
   var $141=__ZNSt3__112__snprintf_lEPcjPvPKcz($137, 30, $138, $139, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$140,tempInt));
   $__nc=$141;
   label = 4; break;
  case 4: 
   HEAP32[(($104)>>2)]=272;
   $85=$__nbh;
   $86=0;
   $87=$104;
   var $143=$85;
   var $144=$86;
   var $145=$87;
   $82=$143;
   $83=$144;
   $84=$145;
   var $146=$82;
   var $147=(($146)|0);
   var $148=$83;
   var $149=$84;
   $81=$149;
   var $150=$81;
   var $151=HEAP32[(($150)>>2)];
   $78=$147;
   $79=$148;
   $80=$151;
   var $152=$78;
   var $153=$79;
   var $154=$80;
   $75=$152;
   HEAP32[(($76)>>2)]=$153;
   HEAP32[(($77)>>2)]=$154;
   var $155=$75;
   var $156=$155;
   $74=$76;
   var $157=$74;
   var $158=HEAP32[(($157)>>2)];
   $68=$77;
   var $159=$68;
   var $160=HEAP32[(($159)>>2)];
   $71=$156;
   HEAP32[(($72)>>2)]=$158;
   HEAP32[(($73)>>2)]=$160;
   var $161=$71;
   var $162=(($161)|0);
   $70=$72;
   var $163=$70;
   var $164=HEAP32[(($163)>>2)];
   HEAP32[(($162)>>2)]=$164;
   var $165=(($161+4)|0);
   $69=$73;
   var $166=$69;
   var $167=HEAP32[(($166)>>2)];
   HEAP32[(($165)>>2)]=$167;
   var $168=$__nc;
   var $169=(($168)|(0)) > 29;
   if ($169) { label = 5; break; } else { label = 22; break; }
  case 5: 
   var $171=$__specify_precision;
   var $172=(($171) & 1);
   if ($172) { label = 6; break; } else { label = 11; break; }
  case 6: 
   var $174 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $176=(($__fmt)|0);
   var $177=$101;
   $57=$177;
   var $178=$57;
   var $179=(($178+8)|0);
   var $180=HEAP32[(($179)>>2)];
   label = 8; break;
  case 8: 
   var $182=$103;
   var $183 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, $174, $176, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$180,HEAPF64[(((tempInt)+(8))>>3)]=$182,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $__nc=$183;
   label = 14; break;
  case 10: 
   var $186$0 = ___cxa_find_matching_catch(-1, -1); $186$1 = tempRet0;
   var $187=$186$0;
   $105=$187;
   var $188=$186$1;
   $106=$188;
   label = 51; break;
  case 11: 
   var $190 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 10; break; }
  case 12: 
   var $192=(($__fmt)|0);
   var $193=$103;
   var $194 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, $190, $192, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$193,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 10; break; }
  case 13: 
   $__nc=$194;
   label = 14; break;
  case 14: 
   var $197=HEAP32[(($__nb)>>2)];
   var $198=(($197)|(0))==0;
   if ($198) { label = 15; break; } else { label = 17; break; }
  case 15: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 10; break; }
  case 16: 
   label = 17; break;
  case 17: 
   var $202=HEAP32[(($__nb)>>2)];
   $55=$__nbh;
   $56=$202;
   var $203=$55;
   var $204=(($203)|0);
   $54=$204;
   var $205=$54;
   var $206=$205;
   $53=$206;
   var $207=$53;
   var $208=(($207)|0);
   var $209=HEAP32[(($208)>>2)];
   $__tmp_i=$209;
   var $210=$56;
   var $211=(($203)|0);
   $52=$211;
   var $212=$52;
   var $213=$212;
   $51=$213;
   var $214=$51;
   var $215=(($214)|0);
   HEAP32[(($215)>>2)]=$210;
   var $216=$__tmp_i;
   var $217=(($216)|(0))!=0;
   if ($217) { label = 18; break; } else { label = 21; break; }
  case 18: 
   var $219=(($203)|0);
   $50=$219;
   var $220=$50;
   var $221=$220;
   $49=$221;
   var $222=$49;
   var $223=(($222+4)|0);
   var $224=HEAP32[(($223)>>2)];
   var $225=$__tmp_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$224]($225) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 20; break; }
  case 19: 
   label = 21; break;
  case 20: 
   var $228$0 = ___cxa_find_matching_catch(-1, -1,0); $228$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 21: 
   label = 22; break;
  case 22: 
   var $230=HEAP32[(($__nb)>>2)];
   var $231=$__nc;
   var $232=(($230+$231)|0);
   $__ne=$232;
   var $233=HEAP32[(($__nb)>>2)];
   var $234=$__ne;
   var $235=$101;
   var $236 = (function() { try { __THREW__ = 0; return __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($233, $234, $235) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 10; break; }
  case 23: 
   $__np=$236;
   var $238=(($__o)|0);
   $__ob=$238;
   HEAP32[(($107)>>2)]=272;
   $46=$__obh;
   $47=0;
   $48=$107;
   var $239=$46;
   var $240=$47;
   var $241=$48;
   $43=$239;
   $44=$240;
   $45=$241;
   var $242=$43;
   var $243=(($242)|0);
   var $244=$44;
   var $245=$45;
   $42=$245;
   var $246=$42;
   var $247=HEAP32[(($246)>>2)];
   $39=$243;
   $40=$244;
   $41=$247;
   var $248=$39;
   var $249=$40;
   var $250=$41;
   $36=$248;
   HEAP32[(($37)>>2)]=$249;
   HEAP32[(($38)>>2)]=$250;
   var $251=$36;
   var $252=$251;
   $35=$37;
   var $253=$35;
   var $254=HEAP32[(($253)>>2)];
   $29=$38;
   var $255=$29;
   var $256=HEAP32[(($255)>>2)];
   $32=$252;
   HEAP32[(($33)>>2)]=$254;
   HEAP32[(($34)>>2)]=$256;
   var $257=$32;
   var $258=(($257)|0);
   $31=$33;
   var $259=$31;
   var $260=HEAP32[(($259)>>2)];
   HEAP32[(($258)>>2)]=$260;
   var $261=(($257+4)|0);
   $30=$34;
   var $262=$30;
   var $263=HEAP32[(($262)>>2)];
   HEAP32[(($261)>>2)]=$263;
   var $264=HEAP32[(($__nb)>>2)];
   var $265=(($__nar)|0);
   var $266=(($264)|(0))!=(($265)|(0));
   if ($266) { label = 24; break; } else { label = 33; break; }
  case 24: 
   var $268=$__nc;
   var $269=($268<<1);
   var $270=$269;
   var $271=_malloc($270);
   $__ob=$271;
   var $272=$__ob;
   var $273=(($272)|(0))==0;
   if ($273) { label = 25; break; } else { label = 28; break; }
  case 25: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 27; break; }
  case 26: 
   label = 28; break;
  case 27: 
   var $277$0 = ___cxa_find_matching_catch(-1, -1); $277$1 = tempRet0;
   var $278=$277$0;
   $105=$278;
   var $279=$277$1;
   $106=$279;
   label = 46; break;
  case 28: 
   var $281=$__ob;
   $27=$__obh;
   $28=$281;
   var $282=$27;
   var $283=(($282)|0);
   $26=$283;
   var $284=$26;
   var $285=$284;
   $25=$285;
   var $286=$25;
   var $287=(($286)|0);
   var $288=HEAP32[(($287)>>2)];
   $__tmp_i3=$288;
   var $289=$28;
   var $290=(($282)|0);
   $24=$290;
   var $291=$24;
   var $292=$291;
   $23=$292;
   var $293=$23;
   var $294=(($293)|0);
   HEAP32[(($294)>>2)]=$289;
   var $295=$__tmp_i3;
   var $296=(($295)|(0))!=0;
   if ($296) { label = 29; break; } else { label = 32; break; }
  case 29: 
   var $298=(($282)|0);
   $22=$298;
   var $299=$22;
   var $300=$299;
   $21=$300;
   var $301=$21;
   var $302=(($301+4)|0);
   var $303=HEAP32[(($302)>>2)];
   var $304=$__tmp_i3;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$303]($304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 31; break; }
  case 30: 
   label = 32; break;
  case 31: 
   var $307$0 = ___cxa_find_matching_catch(-1, -1,0); $307$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 32: 
   label = 33; break;
  case 33: 
   var $309=HEAP32[(($__nb)>>2)];
   var $310=$__np;
   var $311=$__ne;
   var $312=$__ob;
   var $313=$101;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($108, $313) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 27; break; }
  case 34: 
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($309, $310, $311, $312, $__op, $__oe, $108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 45; break; }
  case 35: 
   __ZNSt3__16localeD2Ev($108);
   var $316=$110;
   var $317=$__s;
   assert(4 % 1 === 0);HEAP32[(($316)>>2)]=HEAP32[(($317)>>2)];
   var $318=$__ob;
   var $319=HEAP32[(($__op)>>2)];
   var $320=HEAP32[(($__oe)>>2)];
   var $321=$101;
   var $322=$102;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($109, $110, $318, $319, $320, $321, $322) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 27; break; }
  case 36: 
   var $324=$__s;
   var $325=$109;
   assert(4 % 1 === 0);HEAP32[(($324)>>2)]=HEAP32[(($325)>>2)];
   var $326=$agg_result;
   var $327=$__s;
   assert(4 % 1 === 0);HEAP32[(($326)>>2)]=HEAP32[(($327)>>2)];
   $111=1;
   $20=$__obh;
   var $328=$20;
   $19=$328;
   var $329=$19;
   $17=$329;
   $18=0;
   var $330=$17;
   var $331=(($330)|0);
   $16=$331;
   var $332=$16;
   var $333=$332;
   $15=$333;
   var $334=$15;
   var $335=(($334)|0);
   var $336=HEAP32[(($335)>>2)];
   $__tmp_i_i_i5=$336;
   var $337=$18;
   var $338=(($330)|0);
   $14=$338;
   var $339=$14;
   var $340=$339;
   $13=$340;
   var $341=$13;
   var $342=(($341)|0);
   HEAP32[(($342)>>2)]=$337;
   var $343=$__tmp_i_i_i5;
   var $344=(($343)|(0))!=0;
   if ($344) { label = 37; break; } else { label = 40; break; }
  case 37: 
   var $346=(($330)|0);
   $12=$346;
   var $347=$12;
   var $348=$347;
   $11=$348;
   var $349=$11;
   var $350=(($349+4)|0);
   var $351=HEAP32[(($350)>>2)];
   var $352=$__tmp_i_i_i5;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$351]($352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 39; break; }
  case 38: 
   label = 40; break;
  case 39: 
   var $355$0 = ___cxa_find_matching_catch(-1, -1,0); $355$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 40: 
   $10=$__nbh;
   var $356=$10;
   $9=$356;
   var $357=$9;
   $7=$357;
   $8=0;
   var $358=$7;
   var $359=(($358)|0);
   $6=$359;
   var $360=$6;
   var $361=$360;
   $5=$361;
   var $362=$5;
   var $363=(($362)|0);
   var $364=HEAP32[(($363)>>2)];
   $__tmp_i_i_i7=$364;
   var $365=$8;
   var $366=(($358)|0);
   $4=$366;
   var $367=$4;
   var $368=$367;
   $3=$368;
   var $369=$3;
   var $370=(($369)|0);
   HEAP32[(($370)>>2)]=$365;
   var $371=$__tmp_i_i_i7;
   var $372=(($371)|(0))!=0;
   if ($372) { label = 41; break; } else { label = 44; break; }
  case 41: 
   var $374=(($358)|0);
   $2=$374;
   var $375=$2;
   var $376=$375;
   $1=$376;
   var $377=$1;
   var $378=(($377+4)|0);
   var $379=HEAP32[(($378)>>2)];
   var $380=$__tmp_i_i_i7;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$379]($380) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 43; break; }
  case 42: 
   label = 44; break;
  case 43: 
   var $383$0 = ___cxa_find_matching_catch(-1, -1,0); $383$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 44: 
   STACKTOP = __stackBase__;
   return;
  case 45: 
   var $385$0 = ___cxa_find_matching_catch(-1, -1); $385$1 = tempRet0;
   var $386=$385$0;
   $105=$386;
   var $387=$385$1;
   $106=$387;
   __ZNSt3__16localeD2Ev($108);
   label = 46; break;
  case 46: 
   $67=$__obh;
   var $389=$67;
   $66=$389;
   var $390=$66;
   $64=$390;
   $65=0;
   var $391=$64;
   var $392=(($391)|0);
   $63=$392;
   var $393=$63;
   var $394=$393;
   $62=$394;
   var $395=$62;
   var $396=(($395)|0);
   var $397=HEAP32[(($396)>>2)];
   $__tmp_i_i_i1=$397;
   var $398=$65;
   var $399=(($391)|0);
   $61=$399;
   var $400=$61;
   var $401=$400;
   $60=$401;
   var $402=$60;
   var $403=(($402)|0);
   HEAP32[(($403)>>2)]=$398;
   var $404=$__tmp_i_i_i1;
   var $405=(($404)|(0))!=0;
   if ($405) { label = 47; break; } else { label = 50; break; }
  case 47: 
   var $407=(($391)|0);
   $59=$407;
   var $408=$59;
   var $409=$408;
   $58=$409;
   var $410=$58;
   var $411=(($410+4)|0);
   var $412=HEAP32[(($411)>>2)];
   var $413=$__tmp_i_i_i1;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$412]($413) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 49; break; }
  case 48: 
   label = 50; break;
  case 49: 
   var $416$0 = ___cxa_find_matching_catch(-1, -1,0); $416$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 50: 
   label = 51; break;
  case 51: 
   $98=$__nbh;
   var $418=$98;
   $97=$418;
   var $419=$97;
   $95=$419;
   $96=0;
   var $420=$95;
   var $421=(($420)|0);
   $94=$421;
   var $422=$94;
   var $423=$422;
   $93=$423;
   var $424=$93;
   var $425=(($424)|0);
   var $426=HEAP32[(($425)>>2)];
   $__tmp_i_i_i=$426;
   var $427=$96;
   var $428=(($420)|0);
   $92=$428;
   var $429=$92;
   var $430=$429;
   $91=$430;
   var $431=$91;
   var $432=(($431)|0);
   HEAP32[(($432)>>2)]=$427;
   var $433=$__tmp_i_i_i;
   var $434=(($433)|(0))!=0;
   if ($434) { label = 52; break; } else { label = 55; break; }
  case 52: 
   var $436=(($420)|0);
   $90=$436;
   var $437=$90;
   var $438=$437;
   $89=$438;
   var $439=$89;
   var $440=(($439+4)|0);
   var $441=HEAP32[(($440)>>2)];
   var $442=$__tmp_i_i_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$441]($442) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 54; break; }
  case 53: 
   label = 55; break;
  case 54: 
   var $445$0 = ___cxa_find_matching_catch(-1, -1,0); $445$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 55: 
   label = 56; break;
  case 56: 
   var $447=$105;
   var $448=$106;
   var $449$0=$447;
   var $449$1=0;
   var $450$0=$449$0;
   var $450$1=$448;
   ___resumeException($450$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68=__stackBase__;
   var $__np;
   var $69=(__stackBase__)+(8);
   var $70;
   var $71;
   var $__nm=(__stackBase__)+(16);
   var $__i=(__stackBase__)+(32);
   var $72=(__stackBase__)+(40);
   var $73;
   $64=$this;
   $65=$__iob;
   $66=$__fl;
   var $74=(($__v)&(1));
   $67=$74;
   var $75=$64;
   var $76=$65;
   $63=$76;
   var $77=$63;
   var $78=(($77+4)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=$79 & 1;
   var $81=(($80)|(0))==0;
   if ($81) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $83=$75;
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84+24)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=$68;
   var $88=$__s;
   assert(4 % 1 === 0);HEAP32[(($87)>>2)]=HEAP32[(($88)>>2)];
   var $89=$65;
   var $90=$66;
   var $91=$67;
   var $92=(($91) & 1);
   var $93=(($92)&(1));
   FUNCTION_TABLE[$86]($agg_result, $75, $68, $89, $90, $93);
   label = 34; break;
  case 3: 
   var $95=$65;
   __ZNKSt3__18ios_base6getlocEv($69, $95);
   $62=$69;
   var $96=$62;
   var $97 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($96, 19424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 31; break; }
  case 4: 
   var $98=$97;
   label = 5; break;
  case 5: 
   __ZNSt3__16localeD2Ev($69);
   $__np=$98;
   var $100=$67;
   var $101=(($100) & 1);
   if ($101) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $103=$__np;
   $61=$103;
   var $104=$61;
   var $105=$104;
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106+24)|0);
   var $108=HEAP32[(($107)>>2)];
   FUNCTION_TABLE[$108]($__nm, $104);
   label = 8; break;
  case 7: 
   var $110=$__np;
   $60=$110;
   var $111=$60;
   var $112=$111;
   var $113=HEAP32[(($112)>>2)];
   var $114=(($113+28)|0);
   var $115=HEAP32[(($114)>>2)];
   FUNCTION_TABLE[$115]($__nm, $111);
   label = 8; break;
  case 8: 
   $59=$__nm;
   var $117=$59;
   $58=$117;
   var $118=$58;
   $57=$118;
   var $119=$57;
   var $120=(($119)|0);
   $56=$120;
   var $121=$56;
   var $122=$121;
   $55=$122;
   var $123=$55;
   var $124=(($123)|0);
   var $125=(($124)|0);
   var $126=$125;
   var $127=(($126)|0);
   var $128=$127;
   var $129=HEAP8[($128)];
   var $130=(($129)&(255));
   var $131=$130 & 1;
   var $132=(($131)|(0))!=0;
   if ($132) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $51=$118;
   var $134=$51;
   var $135=(($134)|0);
   $50=$135;
   var $136=$50;
   var $137=$136;
   $49=$137;
   var $138=$49;
   var $139=(($138)|0);
   var $140=(($139)|0);
   var $141=$140;
   var $142=(($141+8)|0);
   var $143=HEAP32[(($142)>>2)];
   var $155 = $143;label = 11; break;
  case 10: 
   $54=$118;
   var $145=$54;
   var $146=(($145)|0);
   $53=$146;
   var $147=$53;
   var $148=$147;
   $52=$148;
   var $149=$52;
   var $150=(($149)|0);
   var $151=(($150)|0);
   var $152=$151;
   var $153=(($152+4)|0);
   var $154=(($153)|0);
   var $155 = $154;label = 11; break;
  case 11: 
   var $155;
   $47=$__i;
   $48=$155;
   var $156=$47;
   var $157=$48;
   $45=$156;
   $46=$157;
   var $158=$45;
   var $159=(($158)|0);
   var $160=$46;
   HEAP32[(($159)>>2)]=$160;
   label = 12; break;
  case 12: 
   $33=$__nm;
   var $162=$33;
   $32=$162;
   var $163=$32;
   $31=$163;
   var $164=$31;
   var $165=(($164)|0);
   $30=$165;
   var $166=$30;
   var $167=$166;
   $29=$167;
   var $168=$29;
   var $169=(($168)|0);
   var $170=(($169)|0);
   var $171=$170;
   var $172=(($171)|0);
   var $173=$172;
   var $174=HEAP8[($173)];
   var $175=(($174)&(255));
   var $176=$175 & 1;
   var $177=(($176)|(0))!=0;
   if ($177) { label = 13; break; } else { label = 14; break; }
  case 13: 
   $25=$163;
   var $179=$25;
   var $180=(($179)|0);
   $24=$180;
   var $181=$24;
   var $182=$181;
   $23=$182;
   var $183=$23;
   var $184=(($183)|0);
   var $185=(($184)|0);
   var $186=$185;
   var $187=(($186+8)|0);
   var $188=HEAP32[(($187)>>2)];
   var $200 = $188;label = 15; break;
  case 14: 
   $28=$163;
   var $190=$28;
   var $191=(($190)|0);
   $27=$191;
   var $192=$27;
   var $193=$192;
   $26=$193;
   var $194=$26;
   var $195=(($194)|0);
   var $196=(($195)|0);
   var $197=$196;
   var $198=(($197+4)|0);
   var $199=(($198)|0);
   var $200 = $199;label = 15; break;
  case 15: 
   var $200;
   $18=$162;
   var $201=$18;
   $17=$201;
   var $202=$17;
   var $203=(($202)|0);
   $16=$203;
   var $204=$16;
   var $205=$204;
   $15=$205;
   var $206=$15;
   var $207=(($206)|0);
   var $208=(($207)|0);
   var $209=$208;
   var $210=(($209)|0);
   var $211=$210;
   var $212=HEAP8[($211)];
   var $213=(($212)&(255));
   var $214=$213 & 1;
   var $215=(($214)|(0))!=0;
   if ($215) { label = 16; break; } else { label = 17; break; }
  case 16: 
   $11=$201;
   var $217=$11;
   var $218=(($217)|0);
   $10=$218;
   var $219=$10;
   var $220=$219;
   $9=$220;
   var $221=$9;
   var $222=(($221)|0);
   var $223=(($222)|0);
   var $224=$223;
   var $225=(($224+4)|0);
   var $226=HEAP32[(($225)>>2)];
   var $241 = $226;label = 18; break;
  case 17: 
   $14=$201;
   var $228=$14;
   var $229=(($228)|0);
   $13=$229;
   var $230=$13;
   var $231=$230;
   $12=$231;
   var $232=$12;
   var $233=(($232)|0);
   var $234=(($233)|0);
   var $235=$234;
   var $236=(($235)|0);
   var $237=$236;
   var $238=HEAP8[($237)];
   var $239=(($238)&(255));
   var $240=$239 >> 1;
   var $241 = $240;label = 18; break;
  case 18: 
   var $241;
   var $242=(($200+($241<<2))|0);
   $21=$72;
   $22=$242;
   var $243=$21;
   var $244=$22;
   $19=$243;
   $20=$244;
   var $245=$19;
   var $246=(($245)|0);
   var $247=$20;
   HEAP32[(($246)>>2)]=$247;
   $5=$__i;
   $6=$72;
   var $248=$5;
   var $249=$6;
   $3=$248;
   $4=$249;
   var $250=$3;
   $2=$250;
   var $251=$2;
   var $252=(($251)|0);
   var $253=HEAP32[(($252)>>2)];
   var $254=$4;
   $1=$254;
   var $255=$1;
   var $256=(($255)|0);
   var $257=HEAP32[(($256)>>2)];
   var $258=(($253)|(0))==(($257)|(0));
   var $259=$258 ^ 1;
   if ($259) { label = 19; break; } else { label = 33; break; }
  case 19: 
   $7=$__s;
   var $261=$7;
   label = 20; break;
  case 20: 
   $8=$__i;
   var $263=$8;
   var $264=(($263)|0);
   var $265=HEAP32[(($264)>>2)];
   var $266=HEAP32[(($265)>>2)];
   $41=$261;
   $42=$266;
   var $267=$41;
   var $268=(($267)|0);
   var $269=HEAP32[(($268)>>2)];
   var $270=(($269)|(0))!=0;
   if ($270) { label = 21; break; } else { label = 27; break; }
  case 21: 
   var $272=(($267)|0);
   var $273=HEAP32[(($272)>>2)];
   var $274=$42;
   $39=$273;
   $40=$274;
   var $275=$39;
   var $276=(($275+24)|0);
   var $277=HEAP32[(($276)>>2)];
   var $278=(($275+28)|0);
   var $279=HEAP32[(($278)>>2)];
   var $280=(($277)|(0))==(($279)|(0));
   if ($280) { label = 22; break; } else { label = 24; break; }
  case 22: 
   var $282=$275;
   var $283=HEAP32[(($282)>>2)];
   var $284=(($283+52)|0);
   var $285=HEAP32[(($284)>>2)];
   var $286=$40;
   $37=$286;
   var $287=$37;
   var $288 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$285]($275, $287) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 32; break; }
  case 23: 
   $38=$288;
   label = 25; break;
  case 24: 
   var $290=$40;
   var $291=(($275+24)|0);
   var $292=HEAP32[(($291)>>2)];
   var $293=(($292+4)|0);
   HEAP32[(($291)>>2)]=$293;
   HEAP32[(($292)>>2)]=$290;
   var $294=$40;
   $36=$294;
   var $295=$36;
   $38=$295;
   label = 25; break;
  case 25: 
   var $296=$38;
   $34=$296;
   $35=-1;
   var $297=$34;
   var $298=$35;
   var $299=(($297)|(0))==(($298)|(0));
   if ($299) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $301=(($267)|0);
   HEAP32[(($301)>>2)]=0;
   label = 27; break;
  case 27: 
   label = 28; break;
  case 28: 
   label = 29; break;
  case 29: 
   $43=$__i;
   var $304=$43;
   var $305=(($304)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=(($306+4)|0);
   HEAP32[(($305)>>2)]=$307;
   $44=$__s;
   var $308=$44;
   label = 30; break;
  case 30: 
   label = 12; break;
  case 31: 
   var $311$0 = ___cxa_find_matching_catch(-1, -1); $311$1 = tempRet0;
   var $312=$311$0;
   $70=$312;
   var $313=$311$1;
   $71=$313;
   __ZNSt3__16localeD2Ev($69);
   label = 35; break;
  case 32: 
   var $315$0 = ___cxa_find_matching_catch(-1, -1); $315$1 = tempRet0;
   var $316=$315$0;
   $70=$316;
   var $317=$315$1;
   $71=$317;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
   label = 35; break;
  case 33: 
   var $319=$agg_result;
   var $320=$__s;
   assert(4 % 1 === 0);HEAP32[(($319)>>2)]=HEAP32[(($320)>>2)];
   $73=1;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
   label = 34; break;
  case 34: 
   STACKTOP = __stackBase__;
   return;
  case 35: 
   var $323=$70;
   var $324=$71;
   var $325$0=$323;
   var $325$1=0;
   var $326$0=$325$0;
   var $326$1=$324;
   ___resumeException($326$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__fmt=__stackBase__;
   var $__len;
   var $__nbuf;
   var $__nar=(__stackBase__)+(8);
   var $__nc;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(24);
   var $__op=(__stackBase__)+(112);
   var $__oe=(__stackBase__)+(120);
   var $6=(__stackBase__)+(128);
   var $7;
   var $8;
   var $9=(__stackBase__)+(136);
   $2=$this;
   $3=$__iob;
   $4=$__fl;
   $5=$__v;
   var $10=$2;
   var $11=$__fmt;
   assert(6 % 1 === 0);HEAP8[($11)]=HEAP8[((((10544)|0))|0)];HEAP8[((($11)+(1))|0)]=HEAP8[(((((10544)|0))+(1))|0)];HEAP8[((($11)+(2))|0)]=HEAP8[(((((10544)|0))+(2))|0)];HEAP8[((($11)+(3))|0)]=HEAP8[(((((10544)|0))+(3))|0)];HEAP8[((($11)+(4))|0)]=HEAP8[(((((10544)|0))+(4))|0)];HEAP8[((($11)+(5))|0)]=HEAP8[(((((10544)|0))+(5))|0)];
   $__len=((3832)|0);
   var $12=(($__fmt)|0);
   var $13=(($12+1)|0);
   var $14=$__len;
   var $15=$3;
   $1=$15;
   var $16=$1;
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   __ZNSt3__114__num_put_base12__format_intEPcPKcbj($13, $14, 1, $18);
   $__nbuf=12;
   var $19=(($__nar)|0);
   var $20=__ZNSt3__16__clocEv();
   var $21=(($__fmt)|0);
   var $22=$5;
   var $23=__ZNSt3__111__sprintf_lEPcPvPKcz($19, $20, $21, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$22,tempInt));
   $__nc=$23;
   var $24=(($__nar)|0);
   var $25=$__nc;
   var $26=(($24+$25)|0);
   $__ne=$26;
   var $27=(($__nar)|0);
   var $28=$__ne;
   var $29=$3;
   var $30=__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($27, $28, $29);
   $__np=$30;
   var $31=(($__nar)|0);
   var $32=$__np;
   var $33=$__ne;
   var $34=(($__o)|0);
   var $35=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $35);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($31, $32, $33, $34, $__op, $__oe, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNSt3__16localeD2Ev($6);
   var $37=$9;
   var $38=$__s;
   assert(4 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];
   var $39=(($__o)|0);
   var $40=HEAP32[(($__op)>>2)];
   var $41=HEAP32[(($__oe)>>2)];
   var $42=$3;
   var $43=$4;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $9, $39, $40, $41, $42, $43);
   STACKTOP = __stackBase__;
   return;
  case 3: 
   var $45$0 = ___cxa_find_matching_catch(-1, -1); $45$1 = tempRet0;
   var $46=$45$0;
   $7=$46;
   var $47=$45$1;
   $8=$47;
   __ZNSt3__16localeD2Ev($6);
   label = 4; break;
  case 4: 
   var $49=$7;
   var $50=$8;
   var $51$0=$49;
   var $51$1=0;
   var $52$0=$51$0;
   var $52$1=$50;
   ___resumeException($52$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $__t_i_i_i4=__stackBase__;
   var $41;
   var $42;
   var $43=(__stackBase__)+(8);
   var $44;
   var $45;
   var $46=(__stackBase__)+(16);
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $__t_i_i_i=(__stackBase__)+(24);
   var $64;
   var $65;
   var $66=(__stackBase__)+(32);
   var $67;
   var $68;
   var $69=(__stackBase__)+(40);
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $__ct;
   var $__npt;
   var $__grouping=(__stackBase__)+(48);
   var $91;
   var $92;
   var $__nf;
   var $__thousands_sep;
   var $__dc;
   var $__dg;
   var $__p;
   $84=$__nb;
   $85=$__np;
   $86=$__ne;
   $87=$__ob;
   $88=$__op;
   $89=$__oe;
   $90=$__loc;
   var $93=$90;
   $83=$93;
   var $94=$83;
   var $95=__ZNKSt3__16locale9use_facetERNS0_2idE($94, 19808);
   var $96=$95;
   $__ct=$96;
   var $97=$90;
   $82=$97;
   var $98=$82;
   var $99=__ZNKSt3__16locale9use_facetERNS0_2idE($98, 19424);
   var $100=$99;
   $__npt=$100;
   var $101=$__npt;
   $81=$101;
   var $102=$81;
   var $103=$102;
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+20)|0);
   var $106=HEAP32[(($105)>>2)];
   FUNCTION_TABLE[$106]($__grouping, $102);
   $80=$__grouping;
   var $107=$80;
   $79=$107;
   var $108=$79;
   $78=$108;
   var $109=$78;
   var $110=(($109)|0);
   $77=$110;
   var $111=$77;
   var $112=$111;
   $76=$112;
   var $113=$76;
   var $114=(($113)|0);
   var $115=(($114)|0);
   var $116=$115;
   var $117=(($116)|0);
   var $118=$117;
   var $119=HEAP8[($118)];
   var $120=(($119)&(255));
   var $121=$120 & 1;
   var $122=(($121)|(0))!=0;
   if ($122) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $72=$108;
   var $124=$72;
   var $125=(($124)|0);
   $71=$125;
   var $126=$71;
   var $127=$126;
   $70=$127;
   var $128=$70;
   var $129=(($128)|0);
   var $130=(($129)|0);
   var $131=$130;
   var $132=(($131+4)|0);
   var $133=HEAP32[(($132)>>2)];
   var $148 = $133;label = 4; break;
  case 3: 
   $75=$108;
   var $135=$75;
   var $136=(($135)|0);
   $74=$136;
   var $137=$74;
   var $138=$137;
   $73=$138;
   var $139=$73;
   var $140=(($139)|0);
   var $141=(($140)|0);
   var $142=$141;
   var $143=(($142)|0);
   var $144=$143;
   var $145=HEAP8[($144)];
   var $146=(($145)&(255));
   var $147=$146 >> 1;
   var $148 = $147;label = 4; break;
  case 4: 
   var $148;
   var $149=(($148)|(0))==0;
   if ($149) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $151=$__ct;
   var $152=$84;
   var $153=$86;
   var $154=$87;
   $53=$151;
   $54=$152;
   $55=$153;
   $56=$154;
   var $155=$53;
   var $156=$155;
   var $157=HEAP32[(($156)>>2)];
   var $158=(($157+48)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=$54;
   var $161=$55;
   var $162=$56;
   var $163 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$159]($155, $160, $161, $162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 8; break; }
  case 6: 
   label = 7; break;
  case 7: 
   var $165=$87;
   var $166=$86;
   var $167=$84;
   var $168=$166;
   var $169=$167;
   var $170=((($168)-($169))|0);
   var $171=(($165+($170<<2))|0);
   var $172=$89;
   HEAP32[(($172)>>2)]=$171;
   label = 60; break;
  case 8: 
   var $174$0 = ___cxa_find_matching_catch(-1, -1); $174$1 = tempRet0;
   var $175=$174$0;
   $91=$175;
   var $176=$174$1;
   $92=$176;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 64; break;
  case 9: 
   var $178=$87;
   var $179=$89;
   HEAP32[(($179)>>2)]=$178;
   var $180=$84;
   $__nf=$180;
   var $181=$__nf;
   var $182=HEAP8[($181)];
   var $183=(($182 << 24) >> 24);
   var $184=(($183)|(0))==45;
   if ($184) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $186=$__nf;
   var $187=HEAP8[($186)];
   var $188=(($187 << 24) >> 24);
   var $189=(($188)|(0))==43;
   if ($189) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $191=$__ct;
   var $192=$__nf;
   var $193=(($192+1)|0);
   $__nf=$193;
   var $194=HEAP8[($192)];
   $51=$191;
   $52=$194;
   var $195=$51;
   var $196=$195;
   var $197=HEAP32[(($196)>>2)];
   var $198=(($197+44)|0);
   var $199=HEAP32[(($198)>>2)];
   var $200=$52;
   var $201 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$199]($195, $200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 8; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $203=$89;
   var $204=HEAP32[(($203)>>2)];
   var $205=(($204+4)|0);
   HEAP32[(($203)>>2)]=$205;
   HEAP32[(($204)>>2)]=$201;
   label = 14; break;
  case 14: 
   var $207=$86;
   var $208=$__nf;
   var $209=$207;
   var $210=$208;
   var $211=((($209)-($210))|0);
   var $212=(($211)|(0)) >= 2;
   if ($212) { label = 15; break; } else { label = 23; break; }
  case 15: 
   var $214=$__nf;
   var $215=(($214)|0);
   var $216=HEAP8[($215)];
   var $217=(($216 << 24) >> 24);
   var $218=(($217)|(0))==48;
   if ($218) { label = 16; break; } else { label = 23; break; }
  case 16: 
   var $220=$__nf;
   var $221=(($220+1)|0);
   var $222=HEAP8[($221)];
   var $223=(($222 << 24) >> 24);
   var $224=(($223)|(0))==120;
   if ($224) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $226=$__nf;
   var $227=(($226+1)|0);
   var $228=HEAP8[($227)];
   var $229=(($228 << 24) >> 24);
   var $230=(($229)|(0))==88;
   if ($230) { label = 18; break; } else { label = 23; break; }
  case 18: 
   var $232=$__ct;
   var $233=$__nf;
   var $234=(($233+1)|0);
   $__nf=$234;
   var $235=HEAP8[($233)];
   $49=$232;
   $50=$235;
   var $236=$49;
   var $237=$236;
   var $238=HEAP32[(($237)>>2)];
   var $239=(($238+44)|0);
   var $240=HEAP32[(($239)>>2)];
   var $241=$50;
   var $242 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$240]($236, $241) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 8; break; }
  case 19: 
   label = 20; break;
  case 20: 
   var $244=$89;
   var $245=HEAP32[(($244)>>2)];
   var $246=(($245+4)|0);
   HEAP32[(($244)>>2)]=$246;
   HEAP32[(($245)>>2)]=$242;
   var $247=$__ct;
   var $248=$__nf;
   var $249=(($248+1)|0);
   $__nf=$249;
   var $250=HEAP8[($248)];
   $47=$247;
   $48=$250;
   var $251=$47;
   var $252=$251;
   var $253=HEAP32[(($252)>>2)];
   var $254=(($253+44)|0);
   var $255=HEAP32[(($254)>>2)];
   var $256=$48;
   var $257 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$255]($251, $256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 8; break; }
  case 21: 
   label = 22; break;
  case 22: 
   var $259=$89;
   var $260=HEAP32[(($259)>>2)];
   var $261=(($260+4)|0);
   HEAP32[(($259)>>2)]=$261;
   HEAP32[(($260)>>2)]=$257;
   label = 23; break;
  case 23: 
   var $263=$__nf;
   var $264=$86;
   $44=$263;
   $45=$264;
   var $265=$44;
   var $266=$45;
   var $tmp_i5=$43;
   var $tmp1_i6=$46;
   assert(1 % 1 === 0);HEAP8[($tmp_i5)]=HEAP8[($tmp1_i6)];
   $41=$265;
   $42=$266;
   var $267=$41;
   var $268=$42;
   var $269=(($267)|(0))!=(($268)|(0));
   if ($269) { label = 24; break; } else { label = 28; break; }
  case 24: 
   label = 25; break;
  case 25: 
   var $272=$41;
   var $273=$42;
   var $274=((($273)-(1))|0);
   $42=$274;
   var $275=(($272)>>>(0)) < (($274)>>>(0));
   if ($275) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $277=$41;
   var $278=$42;
   $39=$277;
   $40=$278;
   var $279=$39;
   $38=$279;
   var $280=$38;
   var $281=HEAP8[($280)];
   HEAP8[($__t_i_i_i4)]=$281;
   var $282=$40;
   $36=$282;
   var $283=$36;
   var $284=HEAP8[($283)];
   var $285=$39;
   HEAP8[($285)]=$284;
   $37=$__t_i_i_i4;
   var $286=$37;
   var $287=HEAP8[($286)];
   var $288=$40;
   HEAP8[($288)]=$287;
   var $289=$41;
   var $290=(($289+1)|0);
   $41=$290;
   label = 25; break;
  case 27: 
   label = 28; break;
  case 28: 
   label = 29; break;
  case 29: 
   var $293=$__npt;
   $1=$293;
   var $294=$1;
   var $295=$294;
   var $296=HEAP32[(($295)>>2)];
   var $297=(($296+16)|0);
   var $298=HEAP32[(($297)>>2)];
   var $299 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$298]($294) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 8; break; }
  case 30: 
   label = 31; break;
  case 31: 
   $__thousands_sep=$299;
   $__dc=0;
   $__dg=0;
   var $301=$__nf;
   $__p=$301;
   label = 32; break;
  case 32: 
   var $303=$__p;
   var $304=$86;
   var $305=(($303)>>>(0)) < (($304)>>>(0));
   if ($305) { label = 33; break; } else { label = 53; break; }
  case 33: 
   var $307=$__dg;
   $12=$__grouping;
   $13=$307;
   var $308=$12;
   $11=$308;
   var $309=$11;
   $10=$309;
   var $310=$10;
   var $311=(($310)|0);
   $9=$311;
   var $312=$9;
   var $313=$312;
   $8=$313;
   var $314=$8;
   var $315=(($314)|0);
   var $316=(($315)|0);
   var $317=$316;
   var $318=(($317)|0);
   var $319=$318;
   var $320=HEAP8[($319)];
   var $321=(($320)&(255));
   var $322=$321 & 1;
   var $323=(($322)|(0))!=0;
   if ($323) { label = 34; break; } else { label = 35; break; }
  case 34: 
   $4=$309;
   var $325=$4;
   var $326=(($325)|0);
   $3=$326;
   var $327=$3;
   var $328=$327;
   $2=$328;
   var $329=$2;
   var $330=(($329)|0);
   var $331=(($330)|0);
   var $332=$331;
   var $333=(($332+8)|0);
   var $334=HEAP32[(($333)>>2)];
   var $346 = $334;label = 36; break;
  case 35: 
   $7=$309;
   var $336=$7;
   var $337=(($336)|0);
   $6=$337;
   var $338=$6;
   var $339=$338;
   $5=$339;
   var $340=$5;
   var $341=(($340)|0);
   var $342=(($341)|0);
   var $343=$342;
   var $344=(($343+1)|0);
   var $345=(($344)|0);
   var $346 = $345;label = 36; break;
  case 36: 
   var $346;
   var $347=$13;
   var $348=(($346+$347)|0);
   label = 37; break;
  case 37: 
   var $350=HEAP8[($348)];
   var $351=(($350 << 24) >> 24);
   var $352=(($351)>>>(0)) > 0;
   if ($352) { label = 38; break; } else { label = 49; break; }
  case 38: 
   var $354=$__dc;
   var $355=$__dg;
   $24=$__grouping;
   $25=$355;
   var $356=$24;
   $23=$356;
   var $357=$23;
   $22=$357;
   var $358=$22;
   var $359=(($358)|0);
   $21=$359;
   var $360=$21;
   var $361=$360;
   $20=$361;
   var $362=$20;
   var $363=(($362)|0);
   var $364=(($363)|0);
   var $365=$364;
   var $366=(($365)|0);
   var $367=$366;
   var $368=HEAP8[($367)];
   var $369=(($368)&(255));
   var $370=$369 & 1;
   var $371=(($370)|(0))!=0;
   if ($371) { label = 39; break; } else { label = 40; break; }
  case 39: 
   $16=$357;
   var $373=$16;
   var $374=(($373)|0);
   $15=$374;
   var $375=$15;
   var $376=$375;
   $14=$376;
   var $377=$14;
   var $378=(($377)|0);
   var $379=(($378)|0);
   var $380=$379;
   var $381=(($380+8)|0);
   var $382=HEAP32[(($381)>>2)];
   var $394 = $382;label = 41; break;
  case 40: 
   $19=$357;
   var $384=$19;
   var $385=(($384)|0);
   $18=$385;
   var $386=$18;
   var $387=$386;
   $17=$387;
   var $388=$17;
   var $389=(($388)|0);
   var $390=(($389)|0);
   var $391=$390;
   var $392=(($391+1)|0);
   var $393=(($392)|0);
   var $394 = $393;label = 41; break;
  case 41: 
   var $394;
   var $395=$25;
   var $396=(($394+$395)|0);
   label = 42; break;
  case 42: 
   var $398=HEAP8[($396)];
   var $399=(($398 << 24) >> 24);
   var $400=(($354)|(0))==(($399)|(0));
   if ($400) { label = 43; break; } else { label = 49; break; }
  case 43: 
   var $402=$__thousands_sep;
   var $403=$89;
   var $404=HEAP32[(($403)>>2)];
   var $405=(($404+4)|0);
   HEAP32[(($403)>>2)]=$405;
   HEAP32[(($404)>>2)]=$402;
   $__dc=0;
   var $406=$__dg;
   $35=$__grouping;
   var $407=$35;
   $34=$407;
   var $408=$34;
   var $409=(($408)|0);
   $33=$409;
   var $410=$33;
   var $411=$410;
   $32=$411;
   var $412=$32;
   var $413=(($412)|0);
   var $414=(($413)|0);
   var $415=$414;
   var $416=(($415)|0);
   var $417=$416;
   var $418=HEAP8[($417)];
   var $419=(($418)&(255));
   var $420=$419 & 1;
   var $421=(($420)|(0))!=0;
   if ($421) { label = 44; break; } else { label = 45; break; }
  case 44: 
   $28=$407;
   var $423=$28;
   var $424=(($423)|0);
   $27=$424;
   var $425=$27;
   var $426=$425;
   $26=$426;
   var $427=$26;
   var $428=(($427)|0);
   var $429=(($428)|0);
   var $430=$429;
   var $431=(($430+4)|0);
   var $432=HEAP32[(($431)>>2)];
   var $447 = $432;label = 46; break;
  case 45: 
   $31=$407;
   var $434=$31;
   var $435=(($434)|0);
   $30=$435;
   var $436=$30;
   var $437=$436;
   $29=$437;
   var $438=$29;
   var $439=(($438)|0);
   var $440=(($439)|0);
   var $441=$440;
   var $442=(($441)|0);
   var $443=$442;
   var $444=HEAP8[($443)];
   var $445=(($444)&(255));
   var $446=$445 >> 1;
   var $447 = $446;label = 46; break;
  case 46: 
   var $447;
   var $448=((($447)-(1))|0);
   var $449=(($406)>>>(0)) < (($448)>>>(0));
   if ($449) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $451=$__dg;
   var $452=((($451)+(1))|0);
   $__dg=$452;
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $455=$__ct;
   var $456=$__p;
   var $457=HEAP8[($456)];
   $57=$455;
   $58=$457;
   var $458=$57;
   var $459=$458;
   var $460=HEAP32[(($459)>>2)];
   var $461=(($460+44)|0);
   var $462=HEAP32[(($461)>>2)];
   var $463=$58;
   var $464 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$462]($458, $463) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 50; break; } else { label = 8; break; }
  case 50: 
   label = 51; break;
  case 51: 
   var $466=$89;
   var $467=HEAP32[(($466)>>2)];
   var $468=(($467+4)|0);
   HEAP32[(($466)>>2)]=$468;
   HEAP32[(($467)>>2)]=$464;
   var $469=$__dc;
   var $470=((($469)+(1))|0);
   $__dc=$470;
   label = 52; break;
  case 52: 
   var $472=$__p;
   var $473=(($472+1)|0);
   $__p=$473;
   label = 32; break;
  case 53: 
   var $475=$87;
   var $476=$__nf;
   var $477=$84;
   var $478=$476;
   var $479=$477;
   var $480=((($478)-($479))|0);
   var $481=(($475+($480<<2))|0);
   var $482=$89;
   var $483=HEAP32[(($482)>>2)];
   $67=$481;
   $68=$483;
   var $484=$67;
   var $485=$68;
   var $tmp_i=$66;
   var $tmp1_i=$69;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $64=$484;
   $65=$485;
   var $486=$64;
   var $487=$65;
   var $488=(($486)|(0))!=(($487)|(0));
   if ($488) { label = 54; break; } else { label = 58; break; }
  case 54: 
   label = 55; break;
  case 55: 
   var $491=$64;
   var $492=$65;
   var $493=((($492)-(4))|0);
   $65=$493;
   var $494=(($491)>>>(0)) < (($493)>>>(0));
   if ($494) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $496=$64;
   var $497=$65;
   $62=$496;
   $63=$497;
   var $498=$62;
   $61=$498;
   var $499=$61;
   var $500=HEAP32[(($499)>>2)];
   HEAP32[(($__t_i_i_i)>>2)]=$500;
   var $501=$63;
   $59=$501;
   var $502=$59;
   var $503=HEAP32[(($502)>>2)];
   var $504=$62;
   HEAP32[(($504)>>2)]=$503;
   $60=$__t_i_i_i;
   var $505=$60;
   var $506=HEAP32[(($505)>>2)];
   var $507=$63;
   HEAP32[(($507)>>2)]=$506;
   var $508=$64;
   var $509=(($508+4)|0);
   $64=$509;
   label = 55; break;
  case 57: 
   label = 58; break;
  case 58: 
   label = 59; break;
  case 59: 
   label = 60; break;
  case 60: 
   var $513=$85;
   var $514=$86;
   var $515=(($513)|(0))==(($514)|(0));
   if ($515) { label = 61; break; } else { label = 62; break; }
  case 61: 
   var $517=$89;
   var $518=HEAP32[(($517)>>2)];
   var $519=$88;
   HEAP32[(($519)>>2)]=$518;
   label = 63; break;
  case 62: 
   var $521=$87;
   var $522=$85;
   var $523=$84;
   var $524=$522;
   var $525=$523;
   var $526=((($524)-($525))|0);
   var $527=(($521+($526<<2))|0);
   var $528=$88;
   HEAP32[(($528)>>2)]=$527;
   label = 63; break;
  case 63: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 64: 
   var $531=$91;
   var $532=$92;
   var $533$0=$531;
   var $533$1=0;
   var $534$0=$533$0;
   var $534$1=$532;
   ___resumeException($534$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg_result, $this, $__s, $__iob, $__fl, $__v$0, $__v$1) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5=__stackBase__;
   var $__fmt=(__stackBase__)+(8);
   var $__len;
   var $__nbuf;
   var $__nar=(__stackBase__)+(16);
   var $__nc;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(40);
   var $__op=(__stackBase__)+(208);
   var $__oe=(__stackBase__)+(216);
   var $6=(__stackBase__)+(224);
   var $7;
   var $8;
   var $9=(__stackBase__)+(232);
   $2=$this;
   $3=$__iob;
   $4=$__fl;
   var $st$0$0=(($5)|0);
   HEAP32[(($st$0$0)>>2)]=$__v$0;
   var $st$1$1=(($5+4)|0);
   HEAP32[(($st$1$1)>>2)]=$__v$1;
   var $10=$2;
   var $11=$__fmt;
   assert(8 % 1 === 0);(_memcpy($11, ((10528)|0), 8)|0);
   $__len=((2696)|0);
   var $12=(($__fmt)|0);
   var $13=(($12+1)|0);
   var $14=$__len;
   var $15=$3;
   $1=$15;
   var $16=$1;
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   __ZNSt3__114__num_put_base12__format_intEPcPKcbj($13, $14, 1, $18);
   $__nbuf=22;
   var $19=(($__nar)|0);
   var $20=__ZNSt3__16__clocEv();
   var $21=(($__fmt)|0);
   var $ld$2$0=(($5)|0);
   var $22$0=HEAP32[(($ld$2$0)>>2)];
   var $ld$3$1=(($5+4)|0);
   var $22$1=HEAP32[(($ld$3$1)>>2)];
   var $23=__ZNSt3__111__sprintf_lEPcPvPKcz($19, $20, $21, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$22$0,HEAP32[(((tempInt)+(8))>>2)]=$22$1,tempInt));
   $__nc=$23;
   var $24=(($__nar)|0);
   var $25=$__nc;
   var $26=(($24+$25)|0);
   $__ne=$26;
   var $27=(($__nar)|0);
   var $28=$__ne;
   var $29=$3;
   var $30=__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($27, $28, $29);
   $__np=$30;
   var $31=(($__nar)|0);
   var $32=$__np;
   var $33=$__ne;
   var $34=(($__o)|0);
   var $35=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $35);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($31, $32, $33, $34, $__op, $__oe, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNSt3__16localeD2Ev($6);
   var $37=$9;
   var $38=$__s;
   assert(4 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];
   var $39=(($__o)|0);
   var $40=HEAP32[(($__op)>>2)];
   var $41=HEAP32[(($__oe)>>2)];
   var $42=$3;
   var $43=$4;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $9, $39, $40, $41, $42, $43);
   STACKTOP = __stackBase__;
   return;
  case 3: 
   var $45$0 = ___cxa_find_matching_catch(-1, -1); $45$1 = tempRet0;
   var $46=$45$0;
   $7=$46;
   var $47=$45$1;
   $8=$47;
   __ZNSt3__16localeD2Ev($6);
   label = 4; break;
  case 4: 
   var $49=$7;
   var $50=$8;
   var $51$0=$49;
   var $51$1=0;
   var $52$0=$51$0;
   var $52$1=$50;
   ___resumeException($52$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__fmt=__stackBase__;
   var $__len;
   var $__nbuf;
   var $__nar=(__stackBase__)+(8);
   var $__nc;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(24);
   var $__op=(__stackBase__)+(112);
   var $__oe=(__stackBase__)+(120);
   var $6=(__stackBase__)+(128);
   var $7;
   var $8;
   var $9=(__stackBase__)+(136);
   $2=$this;
   $3=$__iob;
   $4=$__fl;
   $5=$__v;
   var $10=$2;
   var $11=$__fmt;
   assert(6 % 1 === 0);HEAP8[($11)]=HEAP8[((((10536)|0))|0)];HEAP8[((($11)+(1))|0)]=HEAP8[(((((10536)|0))+(1))|0)];HEAP8[((($11)+(2))|0)]=HEAP8[(((((10536)|0))+(2))|0)];HEAP8[((($11)+(3))|0)]=HEAP8[(((((10536)|0))+(3))|0)];HEAP8[((($11)+(4))|0)]=HEAP8[(((((10536)|0))+(4))|0)];HEAP8[((($11)+(5))|0)]=HEAP8[(((((10536)|0))+(5))|0)];
   $__len=((3832)|0);
   var $12=(($__fmt)|0);
   var $13=(($12+1)|0);
   var $14=$__len;
   var $15=$3;
   $1=$15;
   var $16=$1;
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   __ZNSt3__114__num_put_base12__format_intEPcPKcbj($13, $14, 0, $18);
   $__nbuf=12;
   var $19=(($__nar)|0);
   var $20=__ZNSt3__16__clocEv();
   var $21=(($__fmt)|0);
   var $22=$5;
   var $23=__ZNSt3__111__sprintf_lEPcPvPKcz($19, $20, $21, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$22,tempInt));
   $__nc=$23;
   var $24=(($__nar)|0);
   var $25=$__nc;
   var $26=(($24+$25)|0);
   $__ne=$26;
   var $27=(($__nar)|0);
   var $28=$__ne;
   var $29=$3;
   var $30=__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($27, $28, $29);
   $__np=$30;
   var $31=(($__nar)|0);
   var $32=$__np;
   var $33=$__ne;
   var $34=(($__o)|0);
   var $35=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $35);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($31, $32, $33, $34, $__op, $__oe, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNSt3__16localeD2Ev($6);
   var $37=$9;
   var $38=$__s;
   assert(4 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];
   var $39=(($__o)|0);
   var $40=HEAP32[(($__op)>>2)];
   var $41=HEAP32[(($__oe)>>2)];
   var $42=$3;
   var $43=$4;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $9, $39, $40, $41, $42, $43);
   STACKTOP = __stackBase__;
   return;
  case 3: 
   var $45$0 = ___cxa_find_matching_catch(-1, -1); $45$1 = tempRet0;
   var $46=$45$0;
   $7=$46;
   var $47=$45$1;
   $8=$47;
   __ZNSt3__16localeD2Ev($6);
   label = 4; break;
  case 4: 
   var $49=$7;
   var $50=$8;
   var $51$0=$49;
   var $51$1=0;
   var $52$0=$51$0;
   var $52$1=$50;
   ___resumeException($52$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg_result, $this, $__s, $__iob, $__fl, $__v$0, $__v$1) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5=__stackBase__;
   var $__fmt=(__stackBase__)+(8);
   var $__len;
   var $__nbuf;
   var $__nar=(__stackBase__)+(16);
   var $__nc;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(40);
   var $__op=(__stackBase__)+(216);
   var $__oe=(__stackBase__)+(224);
   var $6=(__stackBase__)+(232);
   var $7;
   var $8;
   var $9=(__stackBase__)+(240);
   $2=$this;
   $3=$__iob;
   $4=$__fl;
   var $st$0$0=(($5)|0);
   HEAP32[(($st$0$0)>>2)]=$__v$0;
   var $st$1$1=(($5+4)|0);
   HEAP32[(($st$1$1)>>2)]=$__v$1;
   var $10=$2;
   var $11=$__fmt;
   assert(8 % 1 === 0);(_memcpy($11, ((10520)|0), 8)|0);
   $__len=((2696)|0);
   var $12=(($__fmt)|0);
   var $13=(($12+1)|0);
   var $14=$__len;
   var $15=$3;
   $1=$15;
   var $16=$1;
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   __ZNSt3__114__num_put_base12__format_intEPcPKcbj($13, $14, 0, $18);
   $__nbuf=23;
   var $19=(($__nar)|0);
   var $20=__ZNSt3__16__clocEv();
   var $21=(($__fmt)|0);
   var $ld$2$0=(($5)|0);
   var $22$0=HEAP32[(($ld$2$0)>>2)];
   var $ld$3$1=(($5+4)|0);
   var $22$1=HEAP32[(($ld$3$1)>>2)];
   var $23=__ZNSt3__111__sprintf_lEPcPvPKcz($19, $20, $21, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$22$0,HEAP32[(((tempInt)+(8))>>2)]=$22$1,tempInt));
   $__nc=$23;
   var $24=(($__nar)|0);
   var $25=$__nc;
   var $26=(($24+$25)|0);
   $__ne=$26;
   var $27=(($__nar)|0);
   var $28=$__ne;
   var $29=$3;
   var $30=__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($27, $28, $29);
   $__np=$30;
   var $31=(($__nar)|0);
   var $32=$__np;
   var $33=$__ne;
   var $34=(($__o)|0);
   var $35=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $35);
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($31, $32, $33, $34, $__op, $__oe, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   __ZNSt3__16localeD2Ev($6);
   var $37=$9;
   var $38=$__s;
   assert(4 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];
   var $39=(($__o)|0);
   var $40=HEAP32[(($__op)>>2)];
   var $41=HEAP32[(($__oe)>>2)];
   var $42=$3;
   var $43=$4;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $9, $39, $40, $41, $42, $43);
   STACKTOP = __stackBase__;
   return;
  case 3: 
   var $45$0 = ___cxa_find_matching_catch(-1, -1); $45$1 = tempRet0;
   var $46=$45$0;
   $7=$46;
   var $47=$45$1;
   $8=$47;
   __ZNSt3__16localeD2Ev($6);
   label = 4; break;
  case 4: 
   var $49=$7;
   var $50=$8;
   var $51$0=$49;
   var $51$1=0;
   var $52$0=$51$0;
   var $52$1=$50;
   ___resumeException($52$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $__r_i;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $__sz;
   var $__ns;
   var $__np;
   var $__sp=__stackBase__;
   var $39;
   var $40;
   var $41;
   $34=$__ob;
   $35=$__op;
   $36=$__oe;
   $37=$__iob;
   $38=$__fl;
   var $42=(($__s)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43)|(0))==0;
   if ($44) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $46=$agg_result;
   var $47=$__s;
   assert(4 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];
   label = 27; break;
  case 3: 
   var $49=$36;
   var $50=$34;
   var $51=$49;
   var $52=$50;
   var $53=((($51)-($52))|0);
   var $54=((((($53)|(0)))/(4))&-1);
   $__sz=$54;
   var $55=$37;
   $33=$55;
   var $56=$33;
   var $57=(($56+12)|0);
   var $58=HEAP32[(($57)>>2)];
   $__ns=$58;
   var $59=$__ns;
   var $60=$__sz;
   var $61=(($59)|(0)) > (($60)|(0));
   if ($61) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $63=$__sz;
   var $64=$__ns;
   var $65=((($64)-($63))|0);
   $__ns=$65;
   label = 6; break;
  case 5: 
   $__ns=0;
   label = 6; break;
  case 6: 
   var $68=$35;
   var $69=$34;
   var $70=$68;
   var $71=$69;
   var $72=((($70)-($71))|0);
   var $73=((((($72)|(0)))/(4))&-1);
   $__np=$73;
   var $74=$__np;
   var $75=(($74)|(0)) > 0;
   if ($75) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $77=(($__s)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$34;
   var $80=$__np;
   $25=$78;
   $26=$79;
   $27=$80;
   var $81=$25;
   var $82=$81;
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+48)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=$26;
   var $87=$27;
   var $88=FUNCTION_TABLE[$85]($81, $86, $87);
   var $89=$__np;
   var $90=(($88)|(0))!=(($89)|(0));
   if ($90) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $92=(($__s)|0);
   HEAP32[(($92)>>2)]=0;
   var $93=$agg_result;
   var $94=$__s;
   assert(4 % 1 === 0);HEAP32[(($93)>>2)]=HEAP32[(($94)>>2)];
   label = 27; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $97=$__ns;
   var $98=(($97)|(0)) > 0;
   if ($98) { label = 11; break; } else { label = 22; break; }
  case 11: 
   var $100=$__ns;
   var $101=$38;
   $22=$__sp;
   $23=$100;
   $24=$101;
   var $102=$22;
   var $103=$23;
   var $104=$24;
   $19=$102;
   $20=$103;
   $21=$104;
   var $105=$19;
   var $106=$105;
   var $107=(($105)|0);
   $18=$107;
   var $108=$18;
   $17=$108;
   var $109=$17;
   var $110=$109;
   $16=$110;
   var $111=$16;
   var $112=$111;
   $15=$112;
   var $113=$15;
   var $114=(($111)|0);
   var $115=$20;
   var $116=$21;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($105, $115, $116);
   var $117=(($__s)|0);
   var $118=HEAP32[(($117)>>2)];
   $14=$__sp;
   var $119=$14;
   $13=$119;
   var $120=$13;
   $12=$120;
   var $121=$12;
   var $122=(($121)|0);
   $11=$122;
   var $123=$11;
   var $124=$123;
   $10=$124;
   var $125=$10;
   var $126=(($125)|0);
   var $127=(($126)|0);
   var $128=$127;
   var $129=(($128)|0);
   var $130=$129;
   var $131=HEAP8[($130)];
   var $132=(($131)&(255));
   var $133=$132 & 1;
   var $134=(($133)|(0))!=0;
   if ($134) { label = 12; break; } else { label = 13; break; }
  case 12: 
   $6=$120;
   var $136=$6;
   var $137=(($136)|0);
   $5=$137;
   var $138=$5;
   var $139=$138;
   $4=$139;
   var $140=$4;
   var $141=(($140)|0);
   var $142=(($141)|0);
   var $143=$142;
   var $144=(($143+8)|0);
   var $145=HEAP32[(($144)>>2)];
   var $157 = $145;label = 14; break;
  case 13: 
   $9=$120;
   var $147=$9;
   var $148=(($147)|0);
   $8=$148;
   var $149=$8;
   var $150=$149;
   $7=$150;
   var $151=$7;
   var $152=(($151)|0);
   var $153=(($152)|0);
   var $154=$153;
   var $155=(($154+4)|0);
   var $156=(($155)|0);
   var $157 = $156;label = 14; break;
  case 14: 
   var $157;
   var $158=$__ns;
   $1=$118;
   $2=$157;
   $3=$158;
   var $159=$1;
   var $160=$159;
   var $161=HEAP32[(($160)>>2)];
   var $162=(($161+48)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=$2;
   var $165=$3;
   var $166 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($159, $164, $165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 18; break; }
  case 15: 
   label = 16; break;
  case 16: 
   var $168=$__ns;
   var $169=(($166)|(0))!=(($168)|(0));
   if ($169) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $171=(($__s)|0);
   HEAP32[(($171)>>2)]=0;
   var $172=$agg_result;
   var $173=$__s;
   assert(4 % 1 === 0);HEAP32[(($172)>>2)]=HEAP32[(($173)>>2)];
   $41=1;
   label = 20; break;
  case 18: 
   var $175$0 = ___cxa_find_matching_catch(-1, -1); $175$1 = tempRet0;
   var $176=$175$0;
   $39=$176;
   var $177=$175$1;
   $40=$177;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   label = 28; break;
  case 19: 
   $41=0;
   label = 20; break;
  case 20: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   var $cleanup_dest=$41;
   if ((($cleanup_dest)|(0))==0) {
    label = 21; break;
   }
   else if ((($cleanup_dest)|(0))==1) {
    label = 27; break;
   }
   else {
   label = 29; break;
   }
  case 21: 
   label = 22; break;
  case 22: 
   var $182=$36;
   var $183=$35;
   var $184=$182;
   var $185=$183;
   var $186=((($184)-($185))|0);
   var $187=((((($186)|(0)))/(4))&-1);
   $__np=$187;
   var $188=$__np;
   var $189=(($188)|(0)) > 0;
   if ($189) { label = 23; break; } else { label = 26; break; }
  case 23: 
   var $191=(($__s)|0);
   var $192=HEAP32[(($191)>>2)];
   var $193=$35;
   var $194=$__np;
   $28=$192;
   $29=$193;
   $30=$194;
   var $195=$28;
   var $196=$195;
   var $197=HEAP32[(($196)>>2)];
   var $198=(($197+48)|0);
   var $199=HEAP32[(($198)>>2)];
   var $200=$29;
   var $201=$30;
   var $202=FUNCTION_TABLE[$199]($195, $200, $201);
   var $203=$__np;
   var $204=(($202)|(0))!=(($203)|(0));
   if ($204) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $206=(($__s)|0);
   HEAP32[(($206)>>2)]=0;
   var $207=$agg_result;
   var $208=$__s;
   assert(4 % 1 === 0);HEAP32[(($207)>>2)]=HEAP32[(($208)>>2)];
   label = 27; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $211=$37;
   $31=$211;
   $32=0;
   var $212=$31;
   var $213=(($212+12)|0);
   var $214=HEAP32[(($213)>>2)];
   $__r_i=$214;
   var $215=$32;
   var $216=(($212+12)|0);
   HEAP32[(($216)>>2)]=$215;
   var $217=$__r_i;
   var $218=$agg_result;
   var $219=$__s;
   assert(4 % 1 === 0);HEAP32[(($218)>>2)]=HEAP32[(($219)>>2)];
   label = 27; break;
  case 27: 
   STACKTOP = __stackBase__;
   return;
  case 28: 
   var $222=$39;
   var $223=$40;
   var $224$0=$222;
   var $224$1=0;
   var $225$0=$224$0;
   var $225$1=$223;
   ___resumeException($225$0)
  case 29: 
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 416)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i5;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i3;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $__tmp_i2;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33=__stackBase__;
   var $34=(__stackBase__)+(8);
   var $35;
   var $36;
   var $37=(__stackBase__)+(16);
   var $38=(__stackBase__)+(24);
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $__tmp_i;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $__tmp_i_i_i1;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73=(__stackBase__)+(32);
   var $74=(__stackBase__)+(40);
   var $75;
   var $76;
   var $77=(__stackBase__)+(48);
   var $78=(__stackBase__)+(56);
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $__tmp_i_i_i;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $__fmt=(__stackBase__)+(64);
   var $__len;
   var $__specify_precision;
   var $__nbuf;
   var $__nar=(__stackBase__)+(72);
   var $__nb=(__stackBase__)+(104);
   var $__nc;
   var $__nbh=(__stackBase__)+(112);
   var $105=(__stackBase__)+(120);
   var $106;
   var $107;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(128);
   var $__ob;
   var $__obh=(__stackBase__)+(360);
   var $108=(__stackBase__)+(368);
   var $__op=(__stackBase__)+(376);
   var $__oe=(__stackBase__)+(384);
   var $109=(__stackBase__)+(392);
   var $110=(__stackBase__)+(400);
   var $111=(__stackBase__)+(408);
   var $112;
   $101=$this;
   $102=$__iob;
   $103=$__fl;
   $104=$__v;
   var $113=$101;
   var $114=$__fmt;
   assert(8 % 1 === 0);(_memcpy($114, ((10560)|0), 8)|0);
   $__len=((2336)|0);
   var $115=(($__fmt)|0);
   var $116=(($115+1)|0);
   var $117=$__len;
   var $118=$102;
   $100=$118;
   var $119=$100;
   var $120=(($119+4)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=__ZNSt3__114__num_put_base14__format_floatEPcPKcj($116, $117, $121);
   var $123=(($122)&(1));
   $__specify_precision=$123;
   $__nbuf=30;
   var $124=(($__nar)|0);
   HEAP32[(($__nb)>>2)]=$124;
   var $125=$__specify_precision;
   var $126=(($125) & 1);
   if ($126) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $128=HEAP32[(($__nb)>>2)];
   var $129=__ZNSt3__16__clocEv();
   var $130=(($__fmt)|0);
   var $131=$102;
   $89=$131;
   var $132=$89;
   var $133=(($132+8)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=$104;
   var $136=__ZNSt3__112__snprintf_lEPcjPvPKcz($128, 30, $129, $130, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$134,HEAPF64[(((tempInt)+(8))>>3)]=$135,tempInt));
   $__nc=$136;
   label = 4; break;
  case 3: 
   var $138=HEAP32[(($__nb)>>2)];
   var $139=__ZNSt3__16__clocEv();
   var $140=(($__fmt)|0);
   var $141=$104;
   var $142=__ZNSt3__112__snprintf_lEPcjPvPKcz($138, 30, $139, $140, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$141,tempInt));
   $__nc=$142;
   label = 4; break;
  case 4: 
   HEAP32[(($105)>>2)]=272;
   $86=$__nbh;
   $87=0;
   $88=$105;
   var $144=$86;
   var $145=$87;
   var $146=$88;
   $83=$144;
   $84=$145;
   $85=$146;
   var $147=$83;
   var $148=(($147)|0);
   var $149=$84;
   var $150=$85;
   $82=$150;
   var $151=$82;
   var $152=HEAP32[(($151)>>2)];
   $79=$148;
   $80=$149;
   $81=$152;
   var $153=$79;
   var $154=$80;
   var $155=$81;
   $76=$153;
   HEAP32[(($77)>>2)]=$154;
   HEAP32[(($78)>>2)]=$155;
   var $156=$76;
   var $157=$156;
   $75=$77;
   var $158=$75;
   var $159=HEAP32[(($158)>>2)];
   $69=$78;
   var $160=$69;
   var $161=HEAP32[(($160)>>2)];
   $72=$157;
   HEAP32[(($73)>>2)]=$159;
   HEAP32[(($74)>>2)]=$161;
   var $162=$72;
   var $163=(($162)|0);
   $71=$73;
   var $164=$71;
   var $165=HEAP32[(($164)>>2)];
   HEAP32[(($163)>>2)]=$165;
   var $166=(($162+4)|0);
   $70=$74;
   var $167=$70;
   var $168=HEAP32[(($167)>>2)];
   HEAP32[(($166)>>2)]=$168;
   var $169=$__nc;
   var $170=(($169)|(0)) > 29;
   if ($170) { label = 5; break; } else { label = 23; break; }
  case 5: 
   var $172=$__specify_precision;
   var $173=(($172) & 1);
   if ($173) { label = 6; break; } else { label = 11; break; }
  case 6: 
   var $175 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $177=(($__fmt)|0);
   var $178=$102;
   $58=$178;
   var $179=$58;
   var $180=(($179+8)|0);
   var $181=HEAP32[(($180)>>2)];
   label = 8; break;
  case 8: 
   var $183=$104;
   var $184 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, $175, $177, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$181,HEAPF64[(((tempInt)+(8))>>3)]=$183,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $__nc=$184;
   label = 15; break;
  case 10: 
   var $187$0 = ___cxa_find_matching_catch(-1, -1); $187$1 = tempRet0;
   var $188=$187$0;
   $106=$188;
   var $189=$187$1;
   $107=$189;
   label = 52; break;
  case 11: 
   var $191 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 10; break; }
  case 12: 
   var $193=(($__fmt)|0);
   var $194=$102;
   $57=$194;
   var $195=$57;
   var $196=(($195+8)|0);
   var $197=HEAP32[(($196)>>2)];
   label = 13; break;
  case 13: 
   var $199=$104;
   var $200 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, $191, $193, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$197,HEAPF64[(((tempInt)+(8))>>3)]=$199,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 10; break; }
  case 14: 
   $__nc=$200;
   label = 15; break;
  case 15: 
   var $203=HEAP32[(($__nb)>>2)];
   var $204=(($203)|(0))==0;
   if ($204) { label = 16; break; } else { label = 18; break; }
  case 16: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 10; break; }
  case 17: 
   label = 18; break;
  case 18: 
   var $208=HEAP32[(($__nb)>>2)];
   $55=$__nbh;
   $56=$208;
   var $209=$55;
   var $210=(($209)|0);
   $54=$210;
   var $211=$54;
   var $212=$211;
   $53=$212;
   var $213=$53;
   var $214=(($213)|0);
   var $215=HEAP32[(($214)>>2)];
   $__tmp_i=$215;
   var $216=$56;
   var $217=(($209)|0);
   $52=$217;
   var $218=$52;
   var $219=$218;
   $51=$219;
   var $220=$51;
   var $221=(($220)|0);
   HEAP32[(($221)>>2)]=$216;
   var $222=$__tmp_i;
   var $223=(($222)|(0))!=0;
   if ($223) { label = 19; break; } else { label = 22; break; }
  case 19: 
   var $225=(($209)|0);
   $50=$225;
   var $226=$50;
   var $227=$226;
   $49=$227;
   var $228=$49;
   var $229=(($228+4)|0);
   var $230=HEAP32[(($229)>>2)];
   var $231=$__tmp_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$230]($231) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 21; break; }
  case 20: 
   label = 22; break;
  case 21: 
   var $234$0 = ___cxa_find_matching_catch(-1, -1,0); $234$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 22: 
   label = 23; break;
  case 23: 
   var $236=HEAP32[(($__nb)>>2)];
   var $237=$__nc;
   var $238=(($236+$237)|0);
   $__ne=$238;
   var $239=HEAP32[(($__nb)>>2)];
   var $240=$__ne;
   var $241=$102;
   var $242 = (function() { try { __THREW__ = 0; return __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($239, $240, $241) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 10; break; }
  case 24: 
   $__np=$242;
   var $244=(($__o)|0);
   $__ob=$244;
   HEAP32[(($108)>>2)]=272;
   $46=$__obh;
   $47=0;
   $48=$108;
   var $245=$46;
   var $246=$47;
   var $247=$48;
   $43=$245;
   $44=$246;
   $45=$247;
   var $248=$43;
   var $249=(($248)|0);
   var $250=$44;
   var $251=$45;
   $42=$251;
   var $252=$42;
   var $253=HEAP32[(($252)>>2)];
   $39=$249;
   $40=$250;
   $41=$253;
   var $254=$39;
   var $255=$40;
   var $256=$41;
   $36=$254;
   HEAP32[(($37)>>2)]=$255;
   HEAP32[(($38)>>2)]=$256;
   var $257=$36;
   var $258=$257;
   $35=$37;
   var $259=$35;
   var $260=HEAP32[(($259)>>2)];
   $29=$38;
   var $261=$29;
   var $262=HEAP32[(($261)>>2)];
   $32=$258;
   HEAP32[(($33)>>2)]=$260;
   HEAP32[(($34)>>2)]=$262;
   var $263=$32;
   var $264=(($263)|0);
   $31=$33;
   var $265=$31;
   var $266=HEAP32[(($265)>>2)];
   HEAP32[(($264)>>2)]=$266;
   var $267=(($263+4)|0);
   $30=$34;
   var $268=$30;
   var $269=HEAP32[(($268)>>2)];
   HEAP32[(($267)>>2)]=$269;
   var $270=HEAP32[(($__nb)>>2)];
   var $271=(($__nar)|0);
   var $272=(($270)|(0))!=(($271)|(0));
   if ($272) { label = 25; break; } else { label = 34; break; }
  case 25: 
   var $274=$__nc;
   var $275=($274<<1);
   var $276=($275<<2);
   var $277=_malloc($276);
   var $278=$277;
   $__ob=$278;
   var $279=$__ob;
   var $280=(($279)|(0))==0;
   if ($280) { label = 26; break; } else { label = 29; break; }
  case 26: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 28; break; }
  case 27: 
   label = 29; break;
  case 28: 
   var $284$0 = ___cxa_find_matching_catch(-1, -1); $284$1 = tempRet0;
   var $285=$284$0;
   $106=$285;
   var $286=$284$1;
   $107=$286;
   label = 47; break;
  case 29: 
   var $288=$__ob;
   $27=$__obh;
   $28=$288;
   var $289=$27;
   var $290=(($289)|0);
   $26=$290;
   var $291=$26;
   var $292=$291;
   $25=$292;
   var $293=$25;
   var $294=(($293)|0);
   var $295=HEAP32[(($294)>>2)];
   $__tmp_i2=$295;
   var $296=$28;
   var $297=(($289)|0);
   $24=$297;
   var $298=$24;
   var $299=$298;
   $23=$299;
   var $300=$23;
   var $301=(($300)|0);
   HEAP32[(($301)>>2)]=$296;
   var $302=$__tmp_i2;
   var $303=(($302)|(0))!=0;
   if ($303) { label = 30; break; } else { label = 33; break; }
  case 30: 
   var $305=(($289)|0);
   $22=$305;
   var $306=$22;
   var $307=$306;
   $21=$307;
   var $308=$21;
   var $309=(($308+4)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=$__tmp_i2;
   var $312=$311;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$310]($312) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 32; break; }
  case 31: 
   label = 33; break;
  case 32: 
   var $315$0 = ___cxa_find_matching_catch(-1, -1,0); $315$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 33: 
   label = 34; break;
  case 34: 
   var $317=HEAP32[(($__nb)>>2)];
   var $318=$__np;
   var $319=$__ne;
   var $320=$__ob;
   var $321=$102;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($109, $321) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 28; break; }
  case 35: 
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($317, $318, $319, $320, $__op, $__oe, $109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 46; break; }
  case 36: 
   __ZNSt3__16localeD2Ev($109);
   var $324=$111;
   var $325=$__s;
   assert(4 % 1 === 0);HEAP32[(($324)>>2)]=HEAP32[(($325)>>2)];
   var $326=$__ob;
   var $327=HEAP32[(($__op)>>2)];
   var $328=HEAP32[(($__oe)>>2)];
   var $329=$102;
   var $330=$103;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($110, $111, $326, $327, $328, $329, $330) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 28; break; }
  case 37: 
   var $332=$__s;
   var $333=$110;
   assert(4 % 1 === 0);HEAP32[(($332)>>2)]=HEAP32[(($333)>>2)];
   var $334=$agg_result;
   var $335=$__s;
   assert(4 % 1 === 0);HEAP32[(($334)>>2)]=HEAP32[(($335)>>2)];
   $112=1;
   $20=$__obh;
   var $336=$20;
   $19=$336;
   var $337=$19;
   $17=$337;
   $18=0;
   var $338=$17;
   var $339=(($338)|0);
   $16=$339;
   var $340=$16;
   var $341=$340;
   $15=$341;
   var $342=$15;
   var $343=(($342)|0);
   var $344=HEAP32[(($343)>>2)];
   $__tmp_i_i_i3=$344;
   var $345=$18;
   var $346=(($338)|0);
   $14=$346;
   var $347=$14;
   var $348=$347;
   $13=$348;
   var $349=$13;
   var $350=(($349)|0);
   HEAP32[(($350)>>2)]=$345;
   var $351=$__tmp_i_i_i3;
   var $352=(($351)|(0))!=0;
   if ($352) { label = 38; break; } else { label = 41; break; }
  case 38: 
   var $354=(($338)|0);
   $12=$354;
   var $355=$12;
   var $356=$355;
   $11=$356;
   var $357=$11;
   var $358=(($357+4)|0);
   var $359=HEAP32[(($358)>>2)];
   var $360=$__tmp_i_i_i3;
   var $361=$360;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$359]($361) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 40; break; }
  case 39: 
   label = 41; break;
  case 40: 
   var $364$0 = ___cxa_find_matching_catch(-1, -1,0); $364$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 41: 
   $10=$__nbh;
   var $365=$10;
   $9=$365;
   var $366=$9;
   $7=$366;
   $8=0;
   var $367=$7;
   var $368=(($367)|0);
   $6=$368;
   var $369=$6;
   var $370=$369;
   $5=$370;
   var $371=$5;
   var $372=(($371)|0);
   var $373=HEAP32[(($372)>>2)];
   $__tmp_i_i_i5=$373;
   var $374=$8;
   var $375=(($367)|0);
   $4=$375;
   var $376=$4;
   var $377=$376;
   $3=$377;
   var $378=$3;
   var $379=(($378)|0);
   HEAP32[(($379)>>2)]=$374;
   var $380=$__tmp_i_i_i5;
   var $381=(($380)|(0))!=0;
   if ($381) { label = 42; break; } else { label = 45; break; }
  case 42: 
   var $383=(($367)|0);
   $2=$383;
   var $384=$2;
   var $385=$384;
   $1=$385;
   var $386=$1;
   var $387=(($386+4)|0);
   var $388=HEAP32[(($387)>>2)];
   var $389=$__tmp_i_i_i5;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$388]($389) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 44; break; }
  case 43: 
   label = 45; break;
  case 44: 
   var $392$0 = ___cxa_find_matching_catch(-1, -1,0); $392$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 45: 
   STACKTOP = __stackBase__;
   return;
  case 46: 
   var $394$0 = ___cxa_find_matching_catch(-1, -1); $394$1 = tempRet0;
   var $395=$394$0;
   $106=$395;
   var $396=$394$1;
   $107=$396;
   __ZNSt3__16localeD2Ev($109);
   label = 47; break;
  case 47: 
   $68=$__obh;
   var $398=$68;
   $67=$398;
   var $399=$67;
   $65=$399;
   $66=0;
   var $400=$65;
   var $401=(($400)|0);
   $64=$401;
   var $402=$64;
   var $403=$402;
   $63=$403;
   var $404=$63;
   var $405=(($404)|0);
   var $406=HEAP32[(($405)>>2)];
   $__tmp_i_i_i1=$406;
   var $407=$66;
   var $408=(($400)|0);
   $62=$408;
   var $409=$62;
   var $410=$409;
   $61=$410;
   var $411=$61;
   var $412=(($411)|0);
   HEAP32[(($412)>>2)]=$407;
   var $413=$__tmp_i_i_i1;
   var $414=(($413)|(0))!=0;
   if ($414) { label = 48; break; } else { label = 51; break; }
  case 48: 
   var $416=(($400)|0);
   $60=$416;
   var $417=$60;
   var $418=$417;
   $59=$418;
   var $419=$59;
   var $420=(($419+4)|0);
   var $421=HEAP32[(($420)>>2)];
   var $422=$__tmp_i_i_i1;
   var $423=$422;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$421]($423) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 50; break; }
  case 49: 
   label = 51; break;
  case 50: 
   var $426$0 = ___cxa_find_matching_catch(-1, -1,0); $426$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 51: 
   label = 52; break;
  case 52: 
   $99=$__nbh;
   var $428=$99;
   $98=$428;
   var $429=$98;
   $96=$429;
   $97=0;
   var $430=$96;
   var $431=(($430)|0);
   $95=$431;
   var $432=$95;
   var $433=$432;
   $94=$433;
   var $434=$94;
   var $435=(($434)|0);
   var $436=HEAP32[(($435)>>2)];
   $__tmp_i_i_i=$436;
   var $437=$97;
   var $438=(($430)|0);
   $93=$438;
   var $439=$93;
   var $440=$439;
   $92=$440;
   var $441=$92;
   var $442=(($441)|0);
   HEAP32[(($442)>>2)]=$437;
   var $443=$__tmp_i_i_i;
   var $444=(($443)|(0))!=0;
   if ($444) { label = 53; break; } else { label = 56; break; }
  case 53: 
   var $446=(($430)|0);
   $91=$446;
   var $447=$91;
   var $448=$447;
   $90=$448;
   var $449=$90;
   var $450=(($449+4)|0);
   var $451=HEAP32[(($450)>>2)];
   var $452=$__tmp_i_i_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$451]($452) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 54; break; } else { label = 55; break; }
  case 54: 
   label = 56; break;
  case 55: 
   var $455$0 = ___cxa_find_matching_catch(-1, -1,0); $455$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 56: 
   label = 57; break;
  case 57: 
   var $457=$106;
   var $458=$107;
   var $459$0=$457;
   var $459$1=0;
   var $460$0=$459$0;
   var $460$1=$458;
   ___resumeException($460$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $__t_i_i_i6=__stackBase__;
   var $18;
   var $19;
   var $20=(__stackBase__)+(8);
   var $21;
   var $22;
   var $23=(__stackBase__)+(16);
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $__t_i_i_i=(__stackBase__)+(24);
   var $57;
   var $58;
   var $59=(__stackBase__)+(32);
   var $60;
   var $61;
   var $62=(__stackBase__)+(40);
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $__ct;
   var $__npt;
   var $__grouping=(__stackBase__)+(48);
   var $__nf;
   var $98;
   var $99;
   var $__ns;
   var $__thousands_sep;
   var $__dc;
   var $__dg;
   var $__p;
   $91=$__nb;
   $92=$__np;
   $93=$__ne;
   $94=$__ob;
   $95=$__op;
   $96=$__oe;
   $97=$__loc;
   var $100=$97;
   $90=$100;
   var $101=$90;
   var $102=__ZNKSt3__16locale9use_facetERNS0_2idE($101, 19808);
   var $103=$102;
   $__ct=$103;
   var $104=$97;
   $89=$104;
   var $105=$89;
   var $106=__ZNKSt3__16locale9use_facetERNS0_2idE($105, 19424);
   var $107=$106;
   $__npt=$107;
   var $108=$__npt;
   $88=$108;
   var $109=$88;
   var $110=$109;
   var $111=HEAP32[(($110)>>2)];
   var $112=(($111+20)|0);
   var $113=HEAP32[(($112)>>2)];
   FUNCTION_TABLE[$113]($__grouping, $109);
   var $114=$94;
   var $115=$96;
   HEAP32[(($115)>>2)]=$114;
   var $116=$91;
   $__nf=$116;
   var $117=$__nf;
   var $118=HEAP8[($117)];
   var $119=(($118 << 24) >> 24);
   var $120=(($119)|(0))==45;
   if ($120) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $122=$__nf;
   var $123=HEAP8[($122)];
   var $124=(($123 << 24) >> 24);
   var $125=(($124)|(0))==43;
   if ($125) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $127=$__ct;
   var $128=$__nf;
   var $129=(($128+1)|0);
   $__nf=$129;
   var $130=HEAP8[($128)];
   $86=$127;
   $87=$130;
   var $131=$86;
   var $132=$131;
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133+44)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=$87;
   var $137 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$135]($131, $136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $139=$96;
   var $140=HEAP32[(($139)>>2)];
   var $141=(($140+4)|0);
   HEAP32[(($139)>>2)]=$141;
   HEAP32[(($140)>>2)]=$137;
   label = 7; break;
  case 6: 
   var $143$0 = ___cxa_find_matching_catch(-1, -1); $143$1 = tempRet0;
   var $144=$143$0;
   $98=$144;
   var $145=$143$1;
   $99=$145;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   label = 94; break;
  case 7: 
   var $147=$93;
   var $148=$__nf;
   var $149=$147;
   var $150=$148;
   var $151=((($149)-($150))|0);
   var $152=(($151)|(0)) >= 2;
   if ($152) { label = 8; break; } else { label = 24; break; }
  case 8: 
   var $154=$__nf;
   var $155=(($154)|0);
   var $156=HEAP8[($155)];
   var $157=(($156 << 24) >> 24);
   var $158=(($157)|(0))==48;
   if ($158) { label = 9; break; } else { label = 24; break; }
  case 9: 
   var $160=$__nf;
   var $161=(($160+1)|0);
   var $162=HEAP8[($161)];
   var $163=(($162 << 24) >> 24);
   var $164=(($163)|(0))==120;
   if ($164) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $166=$__nf;
   var $167=(($166+1)|0);
   var $168=HEAP8[($167)];
   var $169=(($168 << 24) >> 24);
   var $170=(($169)|(0))==88;
   if ($170) { label = 11; break; } else { label = 24; break; }
  case 11: 
   var $172=$__ct;
   var $173=$__nf;
   var $174=(($173+1)|0);
   $__nf=$174;
   var $175=HEAP8[($173)];
   $84=$172;
   $85=$175;
   var $176=$84;
   var $177=$176;
   var $178=HEAP32[(($177)>>2)];
   var $179=(($178+44)|0);
   var $180=HEAP32[(($179)>>2)];
   var $181=$85;
   var $182 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$180]($176, $181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 6; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $184=$96;
   var $185=HEAP32[(($184)>>2)];
   var $186=(($185+4)|0);
   HEAP32[(($184)>>2)]=$186;
   HEAP32[(($185)>>2)]=$182;
   var $187=$__ct;
   var $188=$__nf;
   var $189=(($188+1)|0);
   $__nf=$189;
   var $190=HEAP8[($188)];
   $82=$187;
   $83=$190;
   var $191=$82;
   var $192=$191;
   var $193=HEAP32[(($192)>>2)];
   var $194=(($193+44)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=$83;
   var $197 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$195]($191, $196) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 6; break; }
  case 14: 
   label = 15; break;
  case 15: 
   var $199=$96;
   var $200=HEAP32[(($199)>>2)];
   var $201=(($200+4)|0);
   HEAP32[(($199)>>2)]=$201;
   HEAP32[(($200)>>2)]=$197;
   var $202=$__nf;
   $__ns=$202;
   label = 16; break;
  case 16: 
   var $204=$__ns;
   var $205=$93;
   var $206=(($204)>>>(0)) < (($205)>>>(0));
   if ($206) { label = 17; break; } else { label = 23; break; }
  case 17: 
   var $208=$__ns;
   var $209=HEAP8[($208)];
   var $210=(($209 << 24) >> 24);
   var $211 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 6; break; }
  case 18: 
   var $213 = (function() { try { __THREW__ = 0; return _isxdigit($210, $211) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 6; break; }
  case 19: 
   var $215=(($213)|(0))!=0;
   if ($215) { label = 21; break; } else { label = 20; break; }
  case 20: 
   label = 23; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $219=$__ns;
   var $220=(($219+1)|0);
   $__ns=$220;
   label = 16; break;
  case 23: 
   label = 33; break;
  case 24: 
   var $223=$__nf;
   $__ns=$223;
   label = 25; break;
  case 25: 
   var $225=$__ns;
   var $226=$93;
   var $227=(($225)>>>(0)) < (($226)>>>(0));
   if ($227) { label = 26; break; } else { label = 32; break; }
  case 26: 
   var $229=$__ns;
   var $230=HEAP8[($229)];
   var $231=(($230 << 24) >> 24);
   var $232 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 6; break; }
  case 27: 
   var $234 = (function() { try { __THREW__ = 0; return _isdigit($231, $232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 6; break; }
  case 28: 
   var $236=(($234)|(0))!=0;
   if ($236) { label = 30; break; } else { label = 29; break; }
  case 29: 
   label = 32; break;
  case 30: 
   label = 31; break;
  case 31: 
   var $240=$__ns;
   var $241=(($240+1)|0);
   $__ns=$241;
   label = 25; break;
  case 32: 
   label = 33; break;
  case 33: 
   $81=$__grouping;
   var $244=$81;
   $80=$244;
   var $245=$80;
   $79=$245;
   var $246=$79;
   var $247=(($246)|0);
   $78=$247;
   var $248=$78;
   var $249=$248;
   $77=$249;
   var $250=$77;
   var $251=(($250)|0);
   var $252=(($251)|0);
   var $253=$252;
   var $254=(($253)|0);
   var $255=$254;
   var $256=HEAP8[($255)];
   var $257=(($256)&(255));
   var $258=$257 & 1;
   var $259=(($258)|(0))!=0;
   if ($259) { label = 34; break; } else { label = 35; break; }
  case 34: 
   $73=$245;
   var $261=$73;
   var $262=(($261)|0);
   $72=$262;
   var $263=$72;
   var $264=$263;
   $71=$264;
   var $265=$71;
   var $266=(($265)|0);
   var $267=(($266)|0);
   var $268=$267;
   var $269=(($268+4)|0);
   var $270=HEAP32[(($269)>>2)];
   var $285 = $270;label = 36; break;
  case 35: 
   $76=$245;
   var $272=$76;
   var $273=(($272)|0);
   $75=$273;
   var $274=$75;
   var $275=$274;
   $74=$275;
   var $276=$74;
   var $277=(($276)|0);
   var $278=(($277)|0);
   var $279=$278;
   var $280=(($279)|0);
   var $281=$280;
   var $282=HEAP8[($281)];
   var $283=(($282)&(255));
   var $284=$283 >> 1;
   var $285 = $284;label = 36; break;
  case 36: 
   var $285;
   var $286=(($285)|(0))==0;
   if ($286) { label = 37; break; } else { label = 40; break; }
  case 37: 
   var $288=$__ct;
   var $289=$__nf;
   var $290=$__ns;
   var $291=$96;
   var $292=HEAP32[(($291)>>2)];
   $63=$288;
   $64=$289;
   $65=$290;
   $66=$292;
   var $293=$63;
   var $294=$293;
   var $295=HEAP32[(($294)>>2)];
   var $296=(($295+48)|0);
   var $297=HEAP32[(($296)>>2)];
   var $298=$64;
   var $299=$65;
   var $300=$66;
   var $301 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$297]($293, $298, $299, $300) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 6; break; }
  case 38: 
   label = 39; break;
  case 39: 
   var $303=$__ns;
   var $304=$__nf;
   var $305=$303;
   var $306=$304;
   var $307=((($305)-($306))|0);
   var $308=$96;
   var $309=HEAP32[(($308)>>2)];
   var $310=(($309+($307<<2))|0);
   HEAP32[(($308)>>2)]=$310;
   label = 77; break;
  case 40: 
   var $312=$__nf;
   var $313=$__ns;
   $60=$312;
   $61=$313;
   var $314=$60;
   var $315=$61;
   var $tmp_i=$59;
   var $tmp1_i=$62;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $57=$314;
   $58=$315;
   var $316=$57;
   var $317=$58;
   var $318=(($316)|(0))!=(($317)|(0));
   if ($318) { label = 41; break; } else { label = 45; break; }
  case 41: 
   label = 42; break;
  case 42: 
   var $321=$57;
   var $322=$58;
   var $323=((($322)-(1))|0);
   $58=$323;
   var $324=(($321)>>>(0)) < (($323)>>>(0));
   if ($324) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $326=$57;
   var $327=$58;
   $55=$326;
   $56=$327;
   var $328=$55;
   $54=$328;
   var $329=$54;
   var $330=HEAP8[($329)];
   HEAP8[($__t_i_i_i)]=$330;
   var $331=$56;
   $52=$331;
   var $332=$52;
   var $333=HEAP8[($332)];
   var $334=$55;
   HEAP8[($334)]=$333;
   $53=$__t_i_i_i;
   var $335=$53;
   var $336=HEAP8[($335)];
   var $337=$56;
   HEAP8[($337)]=$336;
   var $338=$57;
   var $339=(($338+1)|0);
   $57=$339;
   label = 42; break;
  case 44: 
   label = 45; break;
  case 45: 
   label = 46; break;
  case 46: 
   var $342=$__npt;
   $49=$342;
   var $343=$49;
   var $344=$343;
   var $345=HEAP32[(($344)>>2)];
   var $346=(($345+16)|0);
   var $347=HEAP32[(($346)>>2)];
   var $348 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$347]($343) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 47; break; } else { label = 6; break; }
  case 47: 
   label = 48; break;
  case 48: 
   $__thousands_sep=$348;
   $__dc=0;
   $__dg=0;
   var $350=$__nf;
   $__p=$350;
   label = 49; break;
  case 49: 
   var $352=$__p;
   var $353=$__ns;
   var $354=(($352)>>>(0)) < (($353)>>>(0));
   if ($354) { label = 50; break; } else { label = 70; break; }
  case 50: 
   var $356=$__dg;
   $47=$__grouping;
   $48=$356;
   var $357=$47;
   $46=$357;
   var $358=$46;
   $45=$358;
   var $359=$45;
   var $360=(($359)|0);
   $44=$360;
   var $361=$44;
   var $362=$361;
   $43=$362;
   var $363=$43;
   var $364=(($363)|0);
   var $365=(($364)|0);
   var $366=$365;
   var $367=(($366)|0);
   var $368=$367;
   var $369=HEAP8[($368)];
   var $370=(($369)&(255));
   var $371=$370 & 1;
   var $372=(($371)|(0))!=0;
   if ($372) { label = 51; break; } else { label = 52; break; }
  case 51: 
   $39=$358;
   var $374=$39;
   var $375=(($374)|0);
   $38=$375;
   var $376=$38;
   var $377=$376;
   $37=$377;
   var $378=$37;
   var $379=(($378)|0);
   var $380=(($379)|0);
   var $381=$380;
   var $382=(($381+8)|0);
   var $383=HEAP32[(($382)>>2)];
   var $395 = $383;label = 53; break;
  case 52: 
   $42=$358;
   var $385=$42;
   var $386=(($385)|0);
   $41=$386;
   var $387=$41;
   var $388=$387;
   $40=$388;
   var $389=$40;
   var $390=(($389)|0);
   var $391=(($390)|0);
   var $392=$391;
   var $393=(($392+1)|0);
   var $394=(($393)|0);
   var $395 = $394;label = 53; break;
  case 53: 
   var $395;
   var $396=$48;
   var $397=(($395+$396)|0);
   label = 54; break;
  case 54: 
   var $399=HEAP8[($397)];
   var $400=(($399 << 24) >> 24);
   var $401=(($400)|(0)) > 0;
   if ($401) { label = 55; break; } else { label = 66; break; }
  case 55: 
   var $403=$__dc;
   var $404=$__dg;
   $34=$__grouping;
   $35=$404;
   var $405=$34;
   $33=$405;
   var $406=$33;
   $32=$406;
   var $407=$32;
   var $408=(($407)|0);
   $31=$408;
   var $409=$31;
   var $410=$409;
   $30=$410;
   var $411=$30;
   var $412=(($411)|0);
   var $413=(($412)|0);
   var $414=$413;
   var $415=(($414)|0);
   var $416=$415;
   var $417=HEAP8[($416)];
   var $418=(($417)&(255));
   var $419=$418 & 1;
   var $420=(($419)|(0))!=0;
   if ($420) { label = 56; break; } else { label = 57; break; }
  case 56: 
   $26=$406;
   var $422=$26;
   var $423=(($422)|0);
   $25=$423;
   var $424=$25;
   var $425=$424;
   $24=$425;
   var $426=$24;
   var $427=(($426)|0);
   var $428=(($427)|0);
   var $429=$428;
   var $430=(($429+8)|0);
   var $431=HEAP32[(($430)>>2)];
   var $443 = $431;label = 58; break;
  case 57: 
   $29=$406;
   var $433=$29;
   var $434=(($433)|0);
   $28=$434;
   var $435=$28;
   var $436=$435;
   $27=$436;
   var $437=$27;
   var $438=(($437)|0);
   var $439=(($438)|0);
   var $440=$439;
   var $441=(($440+1)|0);
   var $442=(($441)|0);
   var $443 = $442;label = 58; break;
  case 58: 
   var $443;
   var $444=$35;
   var $445=(($443+$444)|0);
   label = 59; break;
  case 59: 
   var $447=HEAP8[($445)];
   var $448=(($447 << 24) >> 24);
   var $449=(($403)|(0))==(($448)|(0));
   if ($449) { label = 60; break; } else { label = 66; break; }
  case 60: 
   var $451=$__thousands_sep;
   var $452=$96;
   var $453=HEAP32[(($452)>>2)];
   var $454=(($453+4)|0);
   HEAP32[(($452)>>2)]=$454;
   HEAP32[(($453)>>2)]=$451;
   $__dc=0;
   var $455=$__dg;
   $10=$__grouping;
   var $456=$10;
   $9=$456;
   var $457=$9;
   var $458=(($457)|0);
   $8=$458;
   var $459=$8;
   var $460=$459;
   $7=$460;
   var $461=$7;
   var $462=(($461)|0);
   var $463=(($462)|0);
   var $464=$463;
   var $465=(($464)|0);
   var $466=$465;
   var $467=HEAP8[($466)];
   var $468=(($467)&(255));
   var $469=$468 & 1;
   var $470=(($469)|(0))!=0;
   if ($470) { label = 61; break; } else { label = 62; break; }
  case 61: 
   $3=$456;
   var $472=$3;
   var $473=(($472)|0);
   $2=$473;
   var $474=$2;
   var $475=$474;
   $1=$475;
   var $476=$1;
   var $477=(($476)|0);
   var $478=(($477)|0);
   var $479=$478;
   var $480=(($479+4)|0);
   var $481=HEAP32[(($480)>>2)];
   var $496 = $481;label = 63; break;
  case 62: 
   $6=$456;
   var $483=$6;
   var $484=(($483)|0);
   $5=$484;
   var $485=$5;
   var $486=$485;
   $4=$486;
   var $487=$4;
   var $488=(($487)|0);
   var $489=(($488)|0);
   var $490=$489;
   var $491=(($490)|0);
   var $492=$491;
   var $493=HEAP8[($492)];
   var $494=(($493)&(255));
   var $495=$494 >> 1;
   var $496 = $495;label = 63; break;
  case 63: 
   var $496;
   var $497=((($496)-(1))|0);
   var $498=(($455)>>>(0)) < (($497)>>>(0));
   if ($498) { label = 64; break; } else { label = 65; break; }
  case 64: 
   var $500=$__dg;
   var $501=((($500)+(1))|0);
   $__dg=$501;
   label = 65; break;
  case 65: 
   label = 66; break;
  case 66: 
   var $504=$__ct;
   var $505=$__p;
   var $506=HEAP8[($505)];
   $11=$504;
   $12=$506;
   var $507=$11;
   var $508=$507;
   var $509=HEAP32[(($508)>>2)];
   var $510=(($509+44)|0);
   var $511=HEAP32[(($510)>>2)];
   var $512=$12;
   var $513 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$511]($507, $512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 67; break; } else { label = 6; break; }
  case 67: 
   label = 68; break;
  case 68: 
   var $515=$96;
   var $516=HEAP32[(($515)>>2)];
   var $517=(($516+4)|0);
   HEAP32[(($515)>>2)]=$517;
   HEAP32[(($516)>>2)]=$513;
   var $518=$__dc;
   var $519=((($518)+(1))|0);
   $__dc=$519;
   label = 69; break;
  case 69: 
   var $521=$__p;
   var $522=(($521+1)|0);
   $__p=$522;
   label = 49; break;
  case 70: 
   var $524=$94;
   var $525=$__nf;
   var $526=$91;
   var $527=$525;
   var $528=$526;
   var $529=((($527)-($528))|0);
   var $530=(($524+($529<<2))|0);
   var $531=$96;
   var $532=HEAP32[(($531)>>2)];
   $21=$530;
   $22=$532;
   var $533=$21;
   var $534=$22;
   var $tmp_i7=$20;
   var $tmp1_i8=$23;
   assert(1 % 1 === 0);HEAP8[($tmp_i7)]=HEAP8[($tmp1_i8)];
   $18=$533;
   $19=$534;
   var $535=$18;
   var $536=$19;
   var $537=(($535)|(0))!=(($536)|(0));
   if ($537) { label = 71; break; } else { label = 75; break; }
  case 71: 
   label = 72; break;
  case 72: 
   var $540=$18;
   var $541=$19;
   var $542=((($541)-(4))|0);
   $19=$542;
   var $543=(($540)>>>(0)) < (($542)>>>(0));
   if ($543) { label = 73; break; } else { label = 74; break; }
  case 73: 
   var $545=$18;
   var $546=$19;
   $16=$545;
   $17=$546;
   var $547=$16;
   $15=$547;
   var $548=$15;
   var $549=HEAP32[(($548)>>2)];
   HEAP32[(($__t_i_i_i6)>>2)]=$549;
   var $550=$17;
   $13=$550;
   var $551=$13;
   var $552=HEAP32[(($551)>>2)];
   var $553=$16;
   HEAP32[(($553)>>2)]=$552;
   $14=$__t_i_i_i6;
   var $554=$14;
   var $555=HEAP32[(($554)>>2)];
   var $556=$17;
   HEAP32[(($556)>>2)]=$555;
   var $557=$18;
   var $558=(($557+4)|0);
   $18=$558;
   label = 72; break;
  case 74: 
   label = 75; break;
  case 75: 
   label = 76; break;
  case 76: 
   label = 77; break;
  case 77: 
   var $562=$__ns;
   $__nf=$562;
   label = 78; break;
  case 78: 
   var $564=$__nf;
   var $565=$93;
   var $566=(($564)>>>(0)) < (($565)>>>(0));
   if ($566) { label = 79; break; } else { label = 88; break; }
  case 79: 
   var $568=$__nf;
   var $569=HEAP8[($568)];
   var $570=(($569 << 24) >> 24);
   var $571=(($570)|(0))==46;
   if ($571) { label = 80; break; } else { label = 83; break; }
  case 80: 
   var $573=$__npt;
   $36=$573;
   var $574=$36;
   var $575=$574;
   var $576=HEAP32[(($575)>>2)];
   var $577=(($576+12)|0);
   var $578=HEAP32[(($577)>>2)];
   var $579 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$578]($574) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 81; break; } else { label = 6; break; }
  case 81: 
   label = 82; break;
  case 82: 
   var $581=$96;
   var $582=HEAP32[(($581)>>2)];
   var $583=(($582+4)|0);
   HEAP32[(($581)>>2)]=$583;
   HEAP32[(($582)>>2)]=$579;
   var $584=$__nf;
   var $585=(($584+1)|0);
   $__nf=$585;
   label = 88; break;
  case 83: 
   var $587=$__ct;
   var $588=$__nf;
   var $589=HEAP8[($588)];
   $50=$587;
   $51=$589;
   var $590=$50;
   var $591=$590;
   var $592=HEAP32[(($591)>>2)];
   var $593=(($592+44)|0);
   var $594=HEAP32[(($593)>>2)];
   var $595=$51;
   var $596 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$594]($590, $595) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 84; break; } else { label = 6; break; }
  case 84: 
   label = 85; break;
  case 85: 
   var $598=$96;
   var $599=HEAP32[(($598)>>2)];
   var $600=(($599+4)|0);
   HEAP32[(($598)>>2)]=$600;
   HEAP32[(($599)>>2)]=$596;
   label = 86; break;
  case 86: 
   label = 87; break;
  case 87: 
   var $603=$__nf;
   var $604=(($603+1)|0);
   $__nf=$604;
   label = 78; break;
  case 88: 
   var $606=$__ct;
   var $607=$__nf;
   var $608=$93;
   var $609=$96;
   var $610=HEAP32[(($609)>>2)];
   $67=$606;
   $68=$607;
   $69=$608;
   $70=$610;
   var $611=$67;
   var $612=$611;
   var $613=HEAP32[(($612)>>2)];
   var $614=(($613+48)|0);
   var $615=HEAP32[(($614)>>2)];
   var $616=$68;
   var $617=$69;
   var $618=$70;
   var $619 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$615]($611, $616, $617, $618) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 89; break; } else { label = 6; break; }
  case 89: 
   label = 90; break;
  case 90: 
   var $621=$93;
   var $622=$__nf;
   var $623=$621;
   var $624=$622;
   var $625=((($623)-($624))|0);
   var $626=$96;
   var $627=HEAP32[(($626)>>2)];
   var $628=(($627+($625<<2))|0);
   HEAP32[(($626)>>2)]=$628;
   var $629=$92;
   var $630=$93;
   var $631=(($629)|(0))==(($630)|(0));
   if ($631) { label = 91; break; } else { label = 92; break; }
  case 91: 
   var $633=$96;
   var $634=HEAP32[(($633)>>2)];
   var $635=$95;
   HEAP32[(($635)>>2)]=$634;
   label = 93; break;
  case 92: 
   var $637=$94;
   var $638=$92;
   var $639=$91;
   var $640=$638;
   var $641=$639;
   var $642=((($640)-($641))|0);
   var $643=(($637+($642<<2))|0);
   var $644=$95;
   HEAP32[(($644)>>2)]=$643;
   label = 93; break;
  case 93: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = __stackBase__;
   return;
  case 94: 
   var $647=$98;
   var $648=$99;
   var $649$0=$647;
   var $649$1=0;
   var $650$0=$649$0;
   var $650$1=$648;
   ___resumeException($650$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__120__time_get_c_storageIcEC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((12600)|0);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $__fmt=__stackBase__;
   var $__nbuf;
   var $__nar=(__stackBase__)+(8);
   var $__nc;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(32);
   var $__op;
   var $__oe;
   var $__ct;
   var $10=(__stackBase__)+(184);
   var $11;
   var $12;
   var $13=(__stackBase__)+(192);
   $6=$this;
   $7=$__iob;
   $8=$__fl;
   $9=$__v;
   var $14=$6;
   var $15=$__fmt;
   assert(6 % 1 === 0);HEAP8[($15)]=HEAP8[((((10568)|0))|0)];HEAP8[((($15)+(1))|0)]=HEAP8[(((((10568)|0))+(1))|0)];HEAP8[((($15)+(2))|0)]=HEAP8[(((((10568)|0))+(2))|0)];HEAP8[((($15)+(3))|0)]=HEAP8[(((((10568)|0))+(3))|0)];HEAP8[((($15)+(4))|0)]=HEAP8[(((((10568)|0))+(4))|0)];HEAP8[((($15)+(5))|0)]=HEAP8[(((((10568)|0))+(5))|0)];
   $__nbuf=20;
   var $16=(($__nar)|0);
   var $17=__ZNSt3__16__clocEv();
   var $18=(($__fmt)|0);
   var $19=$9;
   var $20=__ZNSt3__111__sprintf_lEPcPvPKcz($16, $17, $18, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$19,tempInt));
   $__nc=$20;
   var $21=(($__nar)|0);
   var $22=$__nc;
   var $23=(($21+$22)|0);
   $__ne=$23;
   var $24=(($__nar)|0);
   var $25=$__ne;
   var $26=$7;
   var $27=__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24, $25, $26);
   $__np=$27;
   var $28=$7;
   __ZNKSt3__18ios_base6getlocEv($10, $28);
   $5=$10;
   var $29=$5;
   var $30 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($29, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $31=$30;
   label = 3; break;
  case 3: 
   __ZNSt3__16localeD2Ev($10);
   $__ct=$31;
   var $33=$__ct;
   var $34=(($__nar)|0);
   var $35=$__ne;
   var $36=(($__o)|0);
   $1=$33;
   $2=$34;
   $3=$35;
   $4=$36;
   var $37=$1;
   var $38=$37;
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+48)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$2;
   var $43=$3;
   var $44=$4;
   var $45=FUNCTION_TABLE[$41]($37, $42, $43, $44);
   var $46=(($__o)|0);
   var $47=$__ne;
   var $48=(($__nar)|0);
   var $49=$47;
   var $50=$48;
   var $51=((($49)-($50))|0);
   var $52=(($46+($51<<2))|0);
   $__oe=$52;
   var $53=$__np;
   var $54=$__ne;
   var $55=(($53)|(0))==(($54)|(0));
   if ($55) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $57=$__oe;
   $__op=$57;
   label = 7; break;
  case 5: 
   var $59$0 = ___cxa_find_matching_catch(-1, -1); $59$1 = tempRet0;
   var $60=$59$0;
   $11=$60;
   var $61=$59$1;
   $12=$61;
   __ZNSt3__16localeD2Ev($10);
   label = 8; break;
  case 6: 
   var $63=(($__o)|0);
   var $64=$__np;
   var $65=(($__nar)|0);
   var $66=$64;
   var $67=$65;
   var $68=((($66)-($67))|0);
   var $69=(($63+($68<<2))|0);
   $__op=$69;
   label = 7; break;
  case 7: 
   var $71=$13;
   var $72=$__s;
   assert(4 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];
   var $73=(($__o)|0);
   var $74=$__op;
   var $75=$__oe;
   var $76=$7;
   var $77=$8;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $13, $73, $74, $75, $76, $77);
   STACKTOP = __stackBase__;
   return;
  case 8: 
   var $79=$11;
   var $80=$12;
   var $81$0=$79;
   var $81$1=0;
   var $82$0=$81$0;
   var $82$1=$80;
   ___resumeException($82$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg_result, $this, $__s, $__iob, $__fl, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 416)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i5;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i3;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $__tmp_i2;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33=__stackBase__;
   var $34=(__stackBase__)+(8);
   var $35;
   var $36;
   var $37=(__stackBase__)+(16);
   var $38=(__stackBase__)+(24);
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $__tmp_i;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $__tmp_i_i_i1;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72=(__stackBase__)+(32);
   var $73=(__stackBase__)+(40);
   var $74;
   var $75;
   var $76=(__stackBase__)+(48);
   var $77=(__stackBase__)+(56);
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $__tmp_i_i_i;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $__fmt=(__stackBase__)+(64);
   var $__len;
   var $__specify_precision;
   var $__nbuf;
   var $__nar=(__stackBase__)+(72);
   var $__nb=(__stackBase__)+(104);
   var $__nc;
   var $__nbh=(__stackBase__)+(112);
   var $104=(__stackBase__)+(120);
   var $105;
   var $106;
   var $__ne;
   var $__np;
   var $__o=(__stackBase__)+(128);
   var $__ob;
   var $__obh=(__stackBase__)+(360);
   var $107=(__stackBase__)+(368);
   var $__op=(__stackBase__)+(376);
   var $__oe=(__stackBase__)+(384);
   var $108=(__stackBase__)+(392);
   var $109=(__stackBase__)+(400);
   var $110=(__stackBase__)+(408);
   var $111;
   $100=$this;
   $101=$__iob;
   $102=$__fl;
   $103=$__v;
   var $112=$100;
   var $113=$__fmt;
   assert(8 % 1 === 0);(_memcpy($113, ((10552)|0), 8)|0);
   $__len=((1872)|0);
   var $114=(($__fmt)|0);
   var $115=(($114+1)|0);
   var $116=$__len;
   var $117=$101;
   $99=$117;
   var $118=$99;
   var $119=(($118+4)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=__ZNSt3__114__num_put_base14__format_floatEPcPKcj($115, $116, $120);
   var $122=(($121)&(1));
   $__specify_precision=$122;
   $__nbuf=30;
   var $123=(($__nar)|0);
   HEAP32[(($__nb)>>2)]=$123;
   var $124=$__specify_precision;
   var $125=(($124) & 1);
   if ($125) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $127=HEAP32[(($__nb)>>2)];
   var $128=__ZNSt3__16__clocEv();
   var $129=(($__fmt)|0);
   var $130=$101;
   $88=$130;
   var $131=$88;
   var $132=(($131+8)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=$103;
   var $135=__ZNSt3__112__snprintf_lEPcjPvPKcz($127, 30, $128, $129, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$133,HEAPF64[(((tempInt)+(8))>>3)]=$134,tempInt));
   $__nc=$135;
   label = 4; break;
  case 3: 
   var $137=HEAP32[(($__nb)>>2)];
   var $138=__ZNSt3__16__clocEv();
   var $139=(($__fmt)|0);
   var $140=$103;
   var $141=__ZNSt3__112__snprintf_lEPcjPvPKcz($137, 30, $138, $139, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$140,tempInt));
   $__nc=$141;
   label = 4; break;
  case 4: 
   HEAP32[(($104)>>2)]=272;
   $85=$__nbh;
   $86=0;
   $87=$104;
   var $143=$85;
   var $144=$86;
   var $145=$87;
   $82=$143;
   $83=$144;
   $84=$145;
   var $146=$82;
   var $147=(($146)|0);
   var $148=$83;
   var $149=$84;
   $81=$149;
   var $150=$81;
   var $151=HEAP32[(($150)>>2)];
   $78=$147;
   $79=$148;
   $80=$151;
   var $152=$78;
   var $153=$79;
   var $154=$80;
   $75=$152;
   HEAP32[(($76)>>2)]=$153;
   HEAP32[(($77)>>2)]=$154;
   var $155=$75;
   var $156=$155;
   $74=$76;
   var $157=$74;
   var $158=HEAP32[(($157)>>2)];
   $68=$77;
   var $159=$68;
   var $160=HEAP32[(($159)>>2)];
   $71=$156;
   HEAP32[(($72)>>2)]=$158;
   HEAP32[(($73)>>2)]=$160;
   var $161=$71;
   var $162=(($161)|0);
   $70=$72;
   var $163=$70;
   var $164=HEAP32[(($163)>>2)];
   HEAP32[(($162)>>2)]=$164;
   var $165=(($161+4)|0);
   $69=$73;
   var $166=$69;
   var $167=HEAP32[(($166)>>2)];
   HEAP32[(($165)>>2)]=$167;
   var $168=$__nc;
   var $169=(($168)|(0)) > 29;
   if ($169) { label = 5; break; } else { label = 22; break; }
  case 5: 
   var $171=$__specify_precision;
   var $172=(($171) & 1);
   if ($172) { label = 6; break; } else { label = 11; break; }
  case 6: 
   var $174 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $176=(($__fmt)|0);
   var $177=$101;
   $57=$177;
   var $178=$57;
   var $179=(($178+8)|0);
   var $180=HEAP32[(($179)>>2)];
   label = 8; break;
  case 8: 
   var $182=$103;
   var $183 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, $174, $176, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$180,HEAPF64[(((tempInt)+(8))>>3)]=$182,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $__nc=$183;
   label = 14; break;
  case 10: 
   var $186$0 = ___cxa_find_matching_catch(-1, -1); $186$1 = tempRet0;
   var $187=$186$0;
   $105=$187;
   var $188=$186$1;
   $106=$188;
   label = 51; break;
  case 11: 
   var $190 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 10; break; }
  case 12: 
   var $192=(($__fmt)|0);
   var $193=$103;
   var $194 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcPvPKcz($__nb, $190, $192, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$193,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 10; break; }
  case 13: 
   $__nc=$194;
   label = 14; break;
  case 14: 
   var $197=HEAP32[(($__nb)>>2)];
   var $198=(($197)|(0))==0;
   if ($198) { label = 15; break; } else { label = 17; break; }
  case 15: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 10; break; }
  case 16: 
   label = 17; break;
  case 17: 
   var $202=HEAP32[(($__nb)>>2)];
   $55=$__nbh;
   $56=$202;
   var $203=$55;
   var $204=(($203)|0);
   $54=$204;
   var $205=$54;
   var $206=$205;
   $53=$206;
   var $207=$53;
   var $208=(($207)|0);
   var $209=HEAP32[(($208)>>2)];
   $__tmp_i=$209;
   var $210=$56;
   var $211=(($203)|0);
   $52=$211;
   var $212=$52;
   var $213=$212;
   $51=$213;
   var $214=$51;
   var $215=(($214)|0);
   HEAP32[(($215)>>2)]=$210;
   var $216=$__tmp_i;
   var $217=(($216)|(0))!=0;
   if ($217) { label = 18; break; } else { label = 21; break; }
  case 18: 
   var $219=(($203)|0);
   $50=$219;
   var $220=$50;
   var $221=$220;
   $49=$221;
   var $222=$49;
   var $223=(($222+4)|0);
   var $224=HEAP32[(($223)>>2)];
   var $225=$__tmp_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$224]($225) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 20; break; }
  case 19: 
   label = 21; break;
  case 20: 
   var $228$0 = ___cxa_find_matching_catch(-1, -1,0); $228$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 21: 
   label = 22; break;
  case 22: 
   var $230=HEAP32[(($__nb)>>2)];
   var $231=$__nc;
   var $232=(($230+$231)|0);
   $__ne=$232;
   var $233=HEAP32[(($__nb)>>2)];
   var $234=$__ne;
   var $235=$101;
   var $236 = (function() { try { __THREW__ = 0; return __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($233, $234, $235) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 10; break; }
  case 23: 
   $__np=$236;
   var $238=(($__o)|0);
   $__ob=$238;
   HEAP32[(($107)>>2)]=272;
   $46=$__obh;
   $47=0;
   $48=$107;
   var $239=$46;
   var $240=$47;
   var $241=$48;
   $43=$239;
   $44=$240;
   $45=$241;
   var $242=$43;
   var $243=(($242)|0);
   var $244=$44;
   var $245=$45;
   $42=$245;
   var $246=$42;
   var $247=HEAP32[(($246)>>2)];
   $39=$243;
   $40=$244;
   $41=$247;
   var $248=$39;
   var $249=$40;
   var $250=$41;
   $36=$248;
   HEAP32[(($37)>>2)]=$249;
   HEAP32[(($38)>>2)]=$250;
   var $251=$36;
   var $252=$251;
   $35=$37;
   var $253=$35;
   var $254=HEAP32[(($253)>>2)];
   $29=$38;
   var $255=$29;
   var $256=HEAP32[(($255)>>2)];
   $32=$252;
   HEAP32[(($33)>>2)]=$254;
   HEAP32[(($34)>>2)]=$256;
   var $257=$32;
   var $258=(($257)|0);
   $31=$33;
   var $259=$31;
   var $260=HEAP32[(($259)>>2)];
   HEAP32[(($258)>>2)]=$260;
   var $261=(($257+4)|0);
   $30=$34;
   var $262=$30;
   var $263=HEAP32[(($262)>>2)];
   HEAP32[(($261)>>2)]=$263;
   var $264=HEAP32[(($__nb)>>2)];
   var $265=(($__nar)|0);
   var $266=(($264)|(0))!=(($265)|(0));
   if ($266) { label = 24; break; } else { label = 33; break; }
  case 24: 
   var $268=$__nc;
   var $269=($268<<1);
   var $270=($269<<2);
   var $271=_malloc($270);
   var $272=$271;
   $__ob=$272;
   var $273=$__ob;
   var $274=(($273)|(0))==0;
   if ($274) { label = 25; break; } else { label = 28; break; }
  case 25: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 27; break; }
  case 26: 
   label = 28; break;
  case 27: 
   var $278$0 = ___cxa_find_matching_catch(-1, -1); $278$1 = tempRet0;
   var $279=$278$0;
   $105=$279;
   var $280=$278$1;
   $106=$280;
   label = 46; break;
  case 28: 
   var $282=$__ob;
   $27=$__obh;
   $28=$282;
   var $283=$27;
   var $284=(($283)|0);
   $26=$284;
   var $285=$26;
   var $286=$285;
   $25=$286;
   var $287=$25;
   var $288=(($287)|0);
   var $289=HEAP32[(($288)>>2)];
   $__tmp_i2=$289;
   var $290=$28;
   var $291=(($283)|0);
   $24=$291;
   var $292=$24;
   var $293=$292;
   $23=$293;
   var $294=$23;
   var $295=(($294)|0);
   HEAP32[(($295)>>2)]=$290;
   var $296=$__tmp_i2;
   var $297=(($296)|(0))!=0;
   if ($297) { label = 29; break; } else { label = 32; break; }
  case 29: 
   var $299=(($283)|0);
   $22=$299;
   var $300=$22;
   var $301=$300;
   $21=$301;
   var $302=$21;
   var $303=(($302+4)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=$__tmp_i2;
   var $306=$305;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$304]($306) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 31; break; }
  case 30: 
   label = 32; break;
  case 31: 
   var $309$0 = ___cxa_find_matching_catch(-1, -1,0); $309$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 32: 
   label = 33; break;
  case 33: 
   var $311=HEAP32[(($__nb)>>2)];
   var $312=$__np;
   var $313=$__ne;
   var $314=$__ob;
   var $315=$101;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($108, $315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 27; break; }
  case 34: 
   (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($311, $312, $313, $314, $__op, $__oe, $108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 45; break; }
  case 35: 
   __ZNSt3__16localeD2Ev($108);
   var $318=$110;
   var $319=$__s;
   assert(4 % 1 === 0);HEAP32[(($318)>>2)]=HEAP32[(($319)>>2)];
   var $320=$__ob;
   var $321=HEAP32[(($__op)>>2)];
   var $322=HEAP32[(($__oe)>>2)];
   var $323=$101;
   var $324=$102;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($109, $110, $320, $321, $322, $323, $324) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 27; break; }
  case 36: 
   var $326=$__s;
   var $327=$109;
   assert(4 % 1 === 0);HEAP32[(($326)>>2)]=HEAP32[(($327)>>2)];
   var $328=$agg_result;
   var $329=$__s;
   assert(4 % 1 === 0);HEAP32[(($328)>>2)]=HEAP32[(($329)>>2)];
   $111=1;
   $20=$__obh;
   var $330=$20;
   $19=$330;
   var $331=$19;
   $17=$331;
   $18=0;
   var $332=$17;
   var $333=(($332)|0);
   $16=$333;
   var $334=$16;
   var $335=$334;
   $15=$335;
   var $336=$15;
   var $337=(($336)|0);
   var $338=HEAP32[(($337)>>2)];
   $__tmp_i_i_i3=$338;
   var $339=$18;
   var $340=(($332)|0);
   $14=$340;
   var $341=$14;
   var $342=$341;
   $13=$342;
   var $343=$13;
   var $344=(($343)|0);
   HEAP32[(($344)>>2)]=$339;
   var $345=$__tmp_i_i_i3;
   var $346=(($345)|(0))!=0;
   if ($346) { label = 37; break; } else { label = 40; break; }
  case 37: 
   var $348=(($332)|0);
   $12=$348;
   var $349=$12;
   var $350=$349;
   $11=$350;
   var $351=$11;
   var $352=(($351+4)|0);
   var $353=HEAP32[(($352)>>2)];
   var $354=$__tmp_i_i_i3;
   var $355=$354;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$353]($355) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 39; break; }
  case 38: 
   label = 40; break;
  case 39: 
   var $358$0 = ___cxa_find_matching_catch(-1, -1,0); $358$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 40: 
   $10=$__nbh;
   var $359=$10;
   $9=$359;
   var $360=$9;
   $7=$360;
   $8=0;
   var $361=$7;
   var $362=(($361)|0);
   $6=$362;
   var $363=$6;
   var $364=$363;
   $5=$364;
   var $365=$5;
   var $366=(($365)|0);
   var $367=HEAP32[(($366)>>2)];
   $__tmp_i_i_i5=$367;
   var $368=$8;
   var $369=(($361)|0);
   $4=$369;
   var $370=$4;
   var $371=$370;
   $3=$371;
   var $372=$3;
   var $373=(($372)|0);
   HEAP32[(($373)>>2)]=$368;
   var $374=$__tmp_i_i_i5;
   var $375=(($374)|(0))!=0;
   if ($375) { label = 41; break; } else { label = 44; break; }
  case 41: 
   var $377=(($361)|0);
   $2=$377;
   var $378=$2;
   var $379=$378;
   $1=$379;
   var $380=$1;
   var $381=(($380+4)|0);
   var $382=HEAP32[(($381)>>2)];
   var $383=$__tmp_i_i_i5;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$382]($383) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 43; break; }
  case 42: 
   label = 44; break;
  case 43: 
   var $386$0 = ___cxa_find_matching_catch(-1, -1,0); $386$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 44: 
   STACKTOP = __stackBase__;
   return;
  case 45: 
   var $388$0 = ___cxa_find_matching_catch(-1, -1); $388$1 = tempRet0;
   var $389=$388$0;
   $105=$389;
   var $390=$388$1;
   $106=$390;
   __ZNSt3__16localeD2Ev($108);
   label = 46; break;
  case 46: 
   $67=$__obh;
   var $392=$67;
   $66=$392;
   var $393=$66;
   $64=$393;
   $65=0;
   var $394=$64;
   var $395=(($394)|0);
   $63=$395;
   var $396=$63;
   var $397=$396;
   $62=$397;
   var $398=$62;
   var $399=(($398)|0);
   var $400=HEAP32[(($399)>>2)];
   $__tmp_i_i_i1=$400;
   var $401=$65;
   var $402=(($394)|0);
   $61=$402;
   var $403=$61;
   var $404=$403;
   $60=$404;
   var $405=$60;
   var $406=(($405)|0);
   HEAP32[(($406)>>2)]=$401;
   var $407=$__tmp_i_i_i1;
   var $408=(($407)|(0))!=0;
   if ($408) { label = 47; break; } else { label = 50; break; }
  case 47: 
   var $410=(($394)|0);
   $59=$410;
   var $411=$59;
   var $412=$411;
   $58=$412;
   var $413=$58;
   var $414=(($413+4)|0);
   var $415=HEAP32[(($414)>>2)];
   var $416=$__tmp_i_i_i1;
   var $417=$416;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$415]($417) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 49; break; }
  case 48: 
   label = 50; break;
  case 49: 
   var $420$0 = ___cxa_find_matching_catch(-1, -1,0); $420$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 50: 
   label = 51; break;
  case 51: 
   $98=$__nbh;
   var $422=$98;
   $97=$422;
   var $423=$97;
   $95=$423;
   $96=0;
   var $424=$95;
   var $425=(($424)|0);
   $94=$425;
   var $426=$94;
   var $427=$426;
   $93=$427;
   var $428=$93;
   var $429=(($428)|0);
   var $430=HEAP32[(($429)>>2)];
   $__tmp_i_i_i=$430;
   var $431=$96;
   var $432=(($424)|0);
   $92=$432;
   var $433=$92;
   var $434=$433;
   $91=$434;
   var $435=$91;
   var $436=(($435)|0);
   HEAP32[(($436)>>2)]=$431;
   var $437=$__tmp_i_i_i;
   var $438=(($437)|(0))!=0;
   if ($438) { label = 52; break; } else { label = 55; break; }
  case 52: 
   var $440=(($424)|0);
   $90=$440;
   var $441=$90;
   var $442=$441;
   $89=$442;
   var $443=$89;
   var $444=(($443+4)|0);
   var $445=HEAP32[(($444)>>2)];
   var $446=$__tmp_i_i_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$445]($446) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 54; break; }
  case 53: 
   label = 55; break;
  case 54: 
   var $449$0 = ___cxa_find_matching_catch(-1, -1,0); $449$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 55: 
   label = 56; break;
  case 56: 
   var $451=$105;
   var $452=$106;
   var $453$0=$451;
   var $453$1=0;
   var $454$0=$453$0;
   var $454$1=$452;
   ___resumeException($454$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $__ct;
   var $94=__stackBase__;
   var $95;
   var $96;
   var $__cmd;
   var $__opt;
   var $97=(__stackBase__)+(8);
   var $98=(__stackBase__)+(16);
   var $99=(__stackBase__)+(24);
   $88=$this;
   $89=$__iob;
   $90=$__err;
   $91=$__tm;
   $92=$__fmtb;
   $93=$__fmte;
   var $100=$88;
   var $101=$89;
   __ZNKSt3__18ios_base6getlocEv($94, $101);
   $87=$94;
   var $102=$87;
   var $103 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($102, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 21; break; }
  case 2: 
   var $104=$103;
   label = 3; break;
  case 3: 
   __ZNSt3__16localeD2Ev($94);
   $__ct=$104;
   var $106=$90;
   HEAP32[(($106)>>2)]=0;
   label = 4; break;
  case 4: 
   var $108=$92;
   var $109=$93;
   var $110=(($108)|(0))!=(($109)|(0));
   if ($110) { label = 5; break; } else { var $116 = 0;label = 6; break; }
  case 5: 
   var $112=$90;
   var $113=HEAP32[(($112)>>2)];
   var $114=(($113)|(0))==0;
   var $116 = $114;label = 6; break;
  case 6: 
   var $116;
   if ($116) { label = 7; break; } else { label = 84; break; }
  case 7: 
   $85=$__b;
   $86=$__e;
   var $118=$85;
   var $119=$86;
   $83=$118;
   $84=$119;
   var $120=$83;
   $82=$120;
   var $121=$82;
   var $122=(($121)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=(($123)|(0))!=0;
   if ($124) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $126=(($121)|0);
   var $127=HEAP32[(($126)>>2)];
   $81=$127;
   var $128=$81;
   var $129=(($128+12)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=(($128+16)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(($130)|(0))==(($132)|(0));
   if ($133) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $135=$128;
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136+36)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=FUNCTION_TABLE[$138]($128);
   $80=$139;
   label = 11; break;
  case 10: 
   var $141=(($128+12)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=HEAP8[($142)];
   $79=$143;
   var $144=$79;
   var $145=(($144)&(255));
   $80=$145;
   label = 11; break;
  case 11: 
   var $146=$80;
   $77=$146;
   $78=-1;
   var $147=$77;
   var $148=$78;
   var $149=(($147)|(0))==(($148)|(0));
   if ($149) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $151=(($121)|0);
   HEAP32[(($151)>>2)]=0;
   label = 13; break;
  case 13: 
   var $152=(($121)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=(($153)|(0))==0;
   var $155=(($154)&(1));
   var $156=$84;
   $76=$156;
   var $157=$76;
   var $158=(($157)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($159)|(0))!=0;
   if ($160) { label = 14; break; } else { label = 19; break; }
  case 14: 
   var $162=(($157)|0);
   var $163=HEAP32[(($162)>>2)];
   $75=$163;
   var $164=$75;
   var $165=(($164+12)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=(($164+16)|0);
   var $168=HEAP32[(($167)>>2)];
   var $169=(($166)|(0))==(($168)|(0));
   if ($169) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $171=$164;
   var $172=HEAP32[(($171)>>2)];
   var $173=(($172+36)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=FUNCTION_TABLE[$174]($164);
   $74=$175;
   label = 17; break;
  case 16: 
   var $177=(($164+12)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=HEAP8[($178)];
   $73=$179;
   var $180=$73;
   var $181=(($180)&(255));
   $74=$181;
   label = 17; break;
  case 17: 
   var $182=$74;
   $71=$182;
   $72=-1;
   var $183=$71;
   var $184=$72;
   var $185=(($183)|(0))==(($184)|(0));
   if ($185) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $187=(($157)|0);
   HEAP32[(($187)>>2)]=0;
   label = 19; break;
  case 19: 
   var $188=(($157)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($189)|(0))==0;
   var $191=(($190)&(1));
   var $192=(($155)|(0))==(($191)|(0));
   if ($192) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $194=$90;
   HEAP32[(($194)>>2)]=4;
   label = 84; break;
  case 21: 
   var $196$0 = ___cxa_find_matching_catch(-1, -1); $196$1 = tempRet0;
   var $197=$196$0;
   $95=$197;
   var $198=$196$1;
   $96=$198;
   __ZNSt3__16localeD2Ev($94);
   label = 99; break;
  case 22: 
   var $200=$__ct;
   var $201=$92;
   var $202=HEAP8[($201)];
   $68=$200;
   $69=$202;
   $70=0;
   var $203=$68;
   var $204=$203;
   var $205=HEAP32[(($204)>>2)];
   var $206=(($205+36)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=$69;
   var $209=$70;
   var $210=FUNCTION_TABLE[$207]($203, $208, $209);
   var $211=(($210 << 24) >> 24);
   var $212=(($211)|(0))==37;
   if ($212) { label = 23; break; } else { label = 31; break; }
  case 23: 
   var $214=$92;
   var $215=(($214+1)|0);
   $92=$215;
   var $216=$93;
   var $217=(($215)|(0))==(($216)|(0));
   if ($217) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $219=$90;
   HEAP32[(($219)>>2)]=4;
   label = 84; break;
  case 25: 
   var $221=$__ct;
   var $222=$92;
   var $223=HEAP8[($222)];
   $65=$221;
   $66=$223;
   $67=0;
   var $224=$65;
   var $225=$224;
   var $226=HEAP32[(($225)>>2)];
   var $227=(($226+36)|0);
   var $228=HEAP32[(($227)>>2)];
   var $229=$66;
   var $230=$67;
   var $231=FUNCTION_TABLE[$228]($224, $229, $230);
   $__cmd=$231;
   $__opt=0;
   var $232=$__cmd;
   var $233=(($232 << 24) >> 24);
   var $234=(($233)|(0))==69;
   if ($234) { label = 27; break; } else { label = 26; break; }
  case 26: 
   var $236=$__cmd;
   var $237=(($236 << 24) >> 24);
   var $238=(($237)|(0))==48;
   if ($238) { label = 27; break; } else { label = 30; break; }
  case 27: 
   var $240=$92;
   var $241=(($240+1)|0);
   $92=$241;
   var $242=$93;
   var $243=(($241)|(0))==(($242)|(0));
   if ($243) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $245=$90;
   HEAP32[(($245)>>2)]=4;
   label = 84; break;
  case 29: 
   var $247=$__cmd;
   $__opt=$247;
   var $248=$__ct;
   var $249=$92;
   var $250=HEAP8[($249)];
   $62=$248;
   $63=$250;
   $64=0;
   var $251=$62;
   var $252=$251;
   var $253=HEAP32[(($252)>>2)];
   var $254=(($253+36)|0);
   var $255=HEAP32[(($254)>>2)];
   var $256=$63;
   var $257=$64;
   var $258=FUNCTION_TABLE[$255]($251, $256, $257);
   $__cmd=$258;
   label = 30; break;
  case 30: 
   var $260=$100;
   var $261=HEAP32[(($260)>>2)];
   var $262=(($261+36)|0);
   var $263=HEAP32[(($262)>>2)];
   var $264=$98;
   var $265=$__b;
   assert(4 % 1 === 0);HEAP32[(($264)>>2)]=HEAP32[(($265)>>2)];
   var $266=$99;
   var $267=$__e;
   assert(4 % 1 === 0);HEAP32[(($266)>>2)]=HEAP32[(($267)>>2)];
   var $268=$89;
   var $269=$90;
   var $270=$91;
   var $271=$__cmd;
   var $272=$__opt;
   FUNCTION_TABLE[$263]($97, $100, $98, $99, $268, $269, $270, $271, $272);
   var $273=$__b;
   var $274=$97;
   assert(4 % 1 === 0);HEAP32[(($273)>>2)]=HEAP32[(($274)>>2)];
   var $275=$92;
   var $276=(($275+1)|0);
   $92=$276;
   label = 83; break;
  case 31: 
   var $278=$__ct;
   var $279=$92;
   var $280=HEAP8[($279)];
   $59=$278;
   $60=8192;
   $61=$280;
   var $281=$59;
   var $282=$61;
   var $283=(($282 << 24) >> 24);
   var $284=(($283)>>>(0)) <= 127;
   if ($284) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $286=$61;
   var $287=(($286 << 24) >> 24);
   var $288=(($281+8)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($289+($287<<1))|0);
   var $291=HEAP16[(($290)>>1)];
   var $292=(($291)&(65535));
   var $293=$60;
   var $294=(($293)&(65535));
   var $295=$292 & $294;
   var $297 = $295;label = 34; break;
  case 33: 
   var $297 = 0;label = 34; break;
  case 34: 
   var $297;
   var $298=(($297)|(0))!=0;
   if ($298) { label = 35; break; } else { label = 72; break; }
  case 35: 
   var $300=$92;
   var $301=(($300+1)|0);
   $92=$301;
   label = 36; break;
  case 36: 
   var $303=$92;
   var $304=$93;
   var $305=(($303)|(0))!=(($304)|(0));
   if ($305) { label = 37; break; } else { var $329 = 0;label = 41; break; }
  case 37: 
   var $307=$__ct;
   var $308=$92;
   var $309=HEAP8[($308)];
   $56=$307;
   $57=8192;
   $58=$309;
   var $310=$56;
   var $311=$58;
   var $312=(($311 << 24) >> 24);
   var $313=(($312)>>>(0)) <= 127;
   if ($313) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $315=$58;
   var $316=(($315 << 24) >> 24);
   var $317=(($310+8)|0);
   var $318=HEAP32[(($317)>>2)];
   var $319=(($318+($316<<1))|0);
   var $320=HEAP16[(($319)>>1)];
   var $321=(($320)&(65535));
   var $322=$57;
   var $323=(($322)&(65535));
   var $324=$321 & $323;
   var $326 = $324;label = 40; break;
  case 39: 
   var $326 = 0;label = 40; break;
  case 40: 
   var $326;
   var $327=(($326)|(0))!=0;
   var $329 = $327;label = 41; break;
  case 41: 
   var $329;
   if ($329) { label = 42; break; } else { label = 44; break; }
  case 42: 
   label = 43; break;
  case 43: 
   var $332=$92;
   var $333=(($332+1)|0);
   $92=$333;
   label = 36; break;
  case 44: 
   label = 45; break;
  case 45: 
   $38=$__b;
   $39=$__e;
   var $336=$38;
   var $337=$39;
   $36=$336;
   $37=$337;
   var $338=$36;
   $35=$338;
   var $339=$35;
   var $340=(($339)|0);
   var $341=HEAP32[(($340)>>2)];
   var $342=(($341)|(0))!=0;
   if ($342) { label = 46; break; } else { label = 51; break; }
  case 46: 
   var $344=(($339)|0);
   var $345=HEAP32[(($344)>>2)];
   $34=$345;
   var $346=$34;
   var $347=(($346+12)|0);
   var $348=HEAP32[(($347)>>2)];
   var $349=(($346+16)|0);
   var $350=HEAP32[(($349)>>2)];
   var $351=(($348)|(0))==(($350)|(0));
   if ($351) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $353=$346;
   var $354=HEAP32[(($353)>>2)];
   var $355=(($354+36)|0);
   var $356=HEAP32[(($355)>>2)];
   var $357=FUNCTION_TABLE[$356]($346);
   $33=$357;
   label = 49; break;
  case 48: 
   var $359=(($346+12)|0);
   var $360=HEAP32[(($359)>>2)];
   var $361=HEAP8[($360)];
   $32=$361;
   var $362=$32;
   var $363=(($362)&(255));
   $33=$363;
   label = 49; break;
  case 49: 
   var $364=$33;
   $30=$364;
   $31=-1;
   var $365=$30;
   var $366=$31;
   var $367=(($365)|(0))==(($366)|(0));
   if ($367) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $369=(($339)|0);
   HEAP32[(($369)>>2)]=0;
   label = 51; break;
  case 51: 
   var $370=(($339)|0);
   var $371=HEAP32[(($370)>>2)];
   var $372=(($371)|(0))==0;
   var $373=(($372)&(1));
   var $374=$37;
   $29=$374;
   var $375=$29;
   var $376=(($375)|0);
   var $377=HEAP32[(($376)>>2)];
   var $378=(($377)|(0))!=0;
   if ($378) { label = 52; break; } else { label = 57; break; }
  case 52: 
   var $380=(($375)|0);
   var $381=HEAP32[(($380)>>2)];
   $28=$381;
   var $382=$28;
   var $383=(($382+12)|0);
   var $384=HEAP32[(($383)>>2)];
   var $385=(($382+16)|0);
   var $386=HEAP32[(($385)>>2)];
   var $387=(($384)|(0))==(($386)|(0));
   if ($387) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $389=$382;
   var $390=HEAP32[(($389)>>2)];
   var $391=(($390+36)|0);
   var $392=HEAP32[(($391)>>2)];
   var $393=FUNCTION_TABLE[$392]($382);
   $27=$393;
   label = 55; break;
  case 54: 
   var $395=(($382+12)|0);
   var $396=HEAP32[(($395)>>2)];
   var $397=HEAP8[($396)];
   $26=$397;
   var $398=$26;
   var $399=(($398)&(255));
   $27=$399;
   label = 55; break;
  case 55: 
   var $400=$27;
   $24=$400;
   $25=-1;
   var $401=$24;
   var $402=$25;
   var $403=(($401)|(0))==(($402)|(0));
   if ($403) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $405=(($375)|0);
   HEAP32[(($405)>>2)]=0;
   label = 57; break;
  case 57: 
   var $406=(($375)|0);
   var $407=HEAP32[(($406)>>2)];
   var $408=(($407)|(0))==0;
   var $409=(($408)&(1));
   var $410=(($373)|(0))==(($409)|(0));
   var $411=$410 ^ 1;
   if ($411) { label = 58; break; } else { var $456 = 0;label = 65; break; }
  case 58: 
   var $413=$__ct;
   $23=$__b;
   var $414=$23;
   var $415=(($414)|0);
   var $416=HEAP32[(($415)>>2)];
   $22=$416;
   var $417=$22;
   var $418=(($417+12)|0);
   var $419=HEAP32[(($418)>>2)];
   var $420=(($417+16)|0);
   var $421=HEAP32[(($420)>>2)];
   var $422=(($419)|(0))==(($421)|(0));
   if ($422) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $424=$417;
   var $425=HEAP32[(($424)>>2)];
   var $426=(($425+36)|0);
   var $427=HEAP32[(($426)>>2)];
   var $428=FUNCTION_TABLE[$427]($417);
   $21=$428;
   label = 61; break;
  case 60: 
   var $430=(($417+12)|0);
   var $431=HEAP32[(($430)>>2)];
   var $432=HEAP8[($431)];
   $20=$432;
   var $433=$20;
   var $434=(($433)&(255));
   $21=$434;
   label = 61; break;
  case 61: 
   var $435=$21;
   var $436=(($435) & 255);
   $17=$413;
   $18=8192;
   $19=$436;
   var $437=$17;
   var $438=$19;
   var $439=(($438 << 24) >> 24);
   var $440=(($439)>>>(0)) <= 127;
   if ($440) { label = 62; break; } else { label = 63; break; }
  case 62: 
   var $442=$19;
   var $443=(($442 << 24) >> 24);
   var $444=(($437+8)|0);
   var $445=HEAP32[(($444)>>2)];
   var $446=(($445+($443<<1))|0);
   var $447=HEAP16[(($446)>>1)];
   var $448=(($447)&(65535));
   var $449=$18;
   var $450=(($449)&(65535));
   var $451=$448 & $450;
   var $453 = $451;label = 64; break;
  case 63: 
   var $453 = 0;label = 64; break;
  case 64: 
   var $453;
   var $454=(($453)|(0))!=0;
   var $456 = $454;label = 65; break;
  case 65: 
   var $456;
   if ($456) { label = 66; break; } else { label = 71; break; }
  case 66: 
   label = 67; break;
  case 67: 
   $16=$__b;
   var $459=$16;
   var $460=(($459)|0);
   var $461=HEAP32[(($460)>>2)];
   $15=$461;
   var $462=$15;
   var $463=(($462+12)|0);
   var $464=HEAP32[(($463)>>2)];
   var $465=(($462+16)|0);
   var $466=HEAP32[(($465)>>2)];
   var $467=(($464)|(0))==(($466)|(0));
   if ($467) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $469=$462;
   var $470=HEAP32[(($469)>>2)];
   var $471=(($470+40)|0);
   var $472=HEAP32[(($471)>>2)];
   var $473=FUNCTION_TABLE[$472]($462);
   $14=$473;
   label = 70; break;
  case 69: 
   var $475=(($462+12)|0);
   var $476=HEAP32[(($475)>>2)];
   var $477=(($476+1)|0);
   HEAP32[(($475)>>2)]=$477;
   var $478=HEAP8[($476)];
   $13=$478;
   var $479=$13;
   var $480=(($479)&(255));
   $14=$480;
   label = 70; break;
  case 70: 
   var $481=$14;
   label = 45; break;
  case 71: 
   label = 82; break;
  case 72: 
   var $484=$__ct;
   $12=$__b;
   var $485=$12;
   var $486=(($485)|0);
   var $487=HEAP32[(($486)>>2)];
   $11=$487;
   var $488=$11;
   var $489=(($488+12)|0);
   var $490=HEAP32[(($489)>>2)];
   var $491=(($488+16)|0);
   var $492=HEAP32[(($491)>>2)];
   var $493=(($490)|(0))==(($492)|(0));
   if ($493) { label = 73; break; } else { label = 74; break; }
  case 73: 
   var $495=$488;
   var $496=HEAP32[(($495)>>2)];
   var $497=(($496+36)|0);
   var $498=HEAP32[(($497)>>2)];
   var $499=FUNCTION_TABLE[$498]($488);
   $10=$499;
   label = 75; break;
  case 74: 
   var $501=(($488+12)|0);
   var $502=HEAP32[(($501)>>2)];
   var $503=HEAP8[($502)];
   $9=$503;
   var $504=$9;
   var $505=(($504)&(255));
   $10=$505;
   label = 75; break;
  case 75: 
   var $506=$10;
   var $507=(($506) & 255);
   $7=$484;
   $8=$507;
   var $508=$7;
   var $509=$508;
   var $510=HEAP32[(($509)>>2)];
   var $511=(($510+12)|0);
   var $512=HEAP32[(($511)>>2)];
   var $513=$8;
   var $514=FUNCTION_TABLE[$512]($508, $513);
   var $515=(($514 << 24) >> 24);
   var $516=$__ct;
   var $517=$92;
   var $518=HEAP8[($517)];
   $5=$516;
   $6=$518;
   var $519=$5;
   var $520=$519;
   var $521=HEAP32[(($520)>>2)];
   var $522=(($521+12)|0);
   var $523=HEAP32[(($522)>>2)];
   var $524=$6;
   var $525=FUNCTION_TABLE[$523]($519, $524);
   var $526=(($525 << 24) >> 24);
   var $527=(($515)|(0))==(($526)|(0));
   if ($527) { label = 76; break; } else { label = 80; break; }
  case 76: 
   $4=$__b;
   var $529=$4;
   var $530=(($529)|0);
   var $531=HEAP32[(($530)>>2)];
   $3=$531;
   var $532=$3;
   var $533=(($532+12)|0);
   var $534=HEAP32[(($533)>>2)];
   var $535=(($532+16)|0);
   var $536=HEAP32[(($535)>>2)];
   var $537=(($534)|(0))==(($536)|(0));
   if ($537) { label = 77; break; } else { label = 78; break; }
  case 77: 
   var $539=$532;
   var $540=HEAP32[(($539)>>2)];
   var $541=(($540+40)|0);
   var $542=HEAP32[(($541)>>2)];
   var $543=FUNCTION_TABLE[$542]($532);
   $2=$543;
   label = 79; break;
  case 78: 
   var $545=(($532+12)|0);
   var $546=HEAP32[(($545)>>2)];
   var $547=(($546+1)|0);
   HEAP32[(($545)>>2)]=$547;
   var $548=HEAP8[($546)];
   $1=$548;
   var $549=$1;
   var $550=(($549)&(255));
   $2=$550;
   label = 79; break;
  case 79: 
   var $551=$2;
   var $552=$92;
   var $553=(($552+1)|0);
   $92=$553;
   label = 81; break;
  case 80: 
   var $555=$90;
   HEAP32[(($555)>>2)]=4;
   label = 81; break;
  case 81: 
   label = 82; break;
  case 82: 
   label = 83; break;
  case 83: 
   label = 4; break;
  case 84: 
   $54=$__b;
   $55=$__e;
   var $560=$54;
   var $561=$55;
   $52=$560;
   $53=$561;
   var $562=$52;
   $51=$562;
   var $563=$51;
   var $564=(($563)|0);
   var $565=HEAP32[(($564)>>2)];
   var $566=(($565)|(0))!=0;
   if ($566) { label = 85; break; } else { label = 90; break; }
  case 85: 
   var $568=(($563)|0);
   var $569=HEAP32[(($568)>>2)];
   $50=$569;
   var $570=$50;
   var $571=(($570+12)|0);
   var $572=HEAP32[(($571)>>2)];
   var $573=(($570+16)|0);
   var $574=HEAP32[(($573)>>2)];
   var $575=(($572)|(0))==(($574)|(0));
   if ($575) { label = 86; break; } else { label = 87; break; }
  case 86: 
   var $577=$570;
   var $578=HEAP32[(($577)>>2)];
   var $579=(($578+36)|0);
   var $580=HEAP32[(($579)>>2)];
   var $581=FUNCTION_TABLE[$580]($570);
   $49=$581;
   label = 88; break;
  case 87: 
   var $583=(($570+12)|0);
   var $584=HEAP32[(($583)>>2)];
   var $585=HEAP8[($584)];
   $48=$585;
   var $586=$48;
   var $587=(($586)&(255));
   $49=$587;
   label = 88; break;
  case 88: 
   var $588=$49;
   $46=$588;
   $47=-1;
   var $589=$46;
   var $590=$47;
   var $591=(($589)|(0))==(($590)|(0));
   if ($591) { label = 89; break; } else { label = 90; break; }
  case 89: 
   var $593=(($563)|0);
   HEAP32[(($593)>>2)]=0;
   label = 90; break;
  case 90: 
   var $594=(($563)|0);
   var $595=HEAP32[(($594)>>2)];
   var $596=(($595)|(0))==0;
   var $597=(($596)&(1));
   var $598=$53;
   $45=$598;
   var $599=$45;
   var $600=(($599)|0);
   var $601=HEAP32[(($600)>>2)];
   var $602=(($601)|(0))!=0;
   if ($602) { label = 91; break; } else { label = 96; break; }
  case 91: 
   var $604=(($599)|0);
   var $605=HEAP32[(($604)>>2)];
   $44=$605;
   var $606=$44;
   var $607=(($606+12)|0);
   var $608=HEAP32[(($607)>>2)];
   var $609=(($606+16)|0);
   var $610=HEAP32[(($609)>>2)];
   var $611=(($608)|(0))==(($610)|(0));
   if ($611) { label = 92; break; } else { label = 93; break; }
  case 92: 
   var $613=$606;
   var $614=HEAP32[(($613)>>2)];
   var $615=(($614+36)|0);
   var $616=HEAP32[(($615)>>2)];
   var $617=FUNCTION_TABLE[$616]($606);
   $43=$617;
   label = 94; break;
  case 93: 
   var $619=(($606+12)|0);
   var $620=HEAP32[(($619)>>2)];
   var $621=HEAP8[($620)];
   $42=$621;
   var $622=$42;
   var $623=(($622)&(255));
   $43=$623;
   label = 94; break;
  case 94: 
   var $624=$43;
   $40=$624;
   $41=-1;
   var $625=$40;
   var $626=$41;
   var $627=(($625)|(0))==(($626)|(0));
   if ($627) { label = 95; break; } else { label = 96; break; }
  case 95: 
   var $629=(($599)|0);
   HEAP32[(($629)>>2)]=0;
   label = 96; break;
  case 96: 
   var $630=(($599)|0);
   var $631=HEAP32[(($630)>>2)];
   var $632=(($631)|(0))==0;
   var $633=(($632)&(1));
   var $634=(($597)|(0))==(($633)|(0));
   if ($634) { label = 97; break; } else { label = 98; break; }
  case 97: 
   var $636=$90;
   var $637=HEAP32[(($636)>>2)];
   var $638=$637 | 2;
   HEAP32[(($636)>>2)]=$638;
   label = 98; break;
  case 98: 
   var $640=$agg_result;
   var $641=$__b;
   assert(4 % 1 === 0);HEAP32[(($640)>>2)]=HEAP32[(($641)>>2)];
   STACKTOP = __stackBase__;
   return;
  case 99: 
   var $643=$95;
   var $644=$96;
   var $645$0=$643;
   var $645$1=0;
   var $646$0=$645$0;
   var $646$1=$644;
   ___resumeException($646$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 2;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=__stackBase__;
 var $6=(__stackBase__)+(8);
 $1=$this;
 $2=$__iob;
 $3=$__err;
 $4=$__tm;
 var $7=$1;
 var $8=$5;
 var $9=$__b;
 assert(4 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];
 var $10=$6;
 var $11=$__e;
 assert(4 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];
 var $12=$2;
 var $13=$3;
 var $14=$4;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result, $7, $5, $6, $12, $13, $14, ((10512)|0), ((10520)|0));
 STACKTOP = __stackBase__;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $__fmt;
   var $37=__stackBase__;
   var $38=(__stackBase__)+(8);
   $33=$this;
   $34=$__iob;
   $35=$__err;
   $36=$__tm;
   var $39=$33;
   var $40=$39;
   var $41=(($40+8)|0);
   var $42=$41;
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44+20)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=FUNCTION_TABLE[$46]($42);
   $__fmt=$47;
   var $48=$37;
   var $49=$__b;
   assert(4 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];
   var $50=$38;
   var $51=$__e;
   assert(4 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];
   var $52=$34;
   var $53=$35;
   var $54=$36;
   var $55=$__fmt;
   $32=$55;
   var $56=$32;
   $31=$56;
   var $57=$31;
   $30=$57;
   var $58=$30;
   var $59=(($58)|0);
   $29=$59;
   var $60=$29;
   var $61=$60;
   $28=$61;
   var $62=$28;
   var $63=(($62)|0);
   var $64=(($63)|0);
   var $65=$64;
   var $66=(($65)|0);
   var $67=$66;
   var $68=HEAP8[($67)];
   var $69=(($68)&(255));
   var $70=$69 & 1;
   var $71=(($70)|(0))!=0;
   if ($71) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $24=$57;
   var $73=$24;
   var $74=(($73)|0);
   $23=$74;
   var $75=$23;
   var $76=$75;
   $22=$76;
   var $77=$22;
   var $78=(($77)|0);
   var $79=(($78)|0);
   var $80=$79;
   var $81=(($80+8)|0);
   var $82=HEAP32[(($81)>>2)];
   var $94 = $82;label = 4; break;
  case 3: 
   $27=$57;
   var $84=$27;
   var $85=(($84)|0);
   $26=$85;
   var $86=$26;
   var $87=$86;
   $25=$87;
   var $88=$25;
   var $89=(($88)|0);
   var $90=(($89)|0);
   var $91=$90;
   var $92=(($91+1)|0);
   var $93=(($92)|0);
   var $94 = $93;label = 4; break;
  case 4: 
   var $94;
   var $95=$__fmt;
   $21=$95;
   var $96=$21;
   $20=$96;
   var $97=$20;
   $19=$97;
   var $98=$19;
   var $99=(($98)|0);
   $18=$99;
   var $100=$18;
   var $101=$100;
   $17=$101;
   var $102=$17;
   var $103=(($102)|0);
   var $104=(($103)|0);
   var $105=$104;
   var $106=(($105)|0);
   var $107=$106;
   var $108=HEAP8[($107)];
   var $109=(($108)&(255));
   var $110=$109 & 1;
   var $111=(($110)|(0))!=0;
   if ($111) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $13=$97;
   var $113=$13;
   var $114=(($113)|0);
   $12=$114;
   var $115=$12;
   var $116=$115;
   $11=$116;
   var $117=$11;
   var $118=(($117)|0);
   var $119=(($118)|0);
   var $120=$119;
   var $121=(($120+8)|0);
   var $122=HEAP32[(($121)>>2)];
   var $134 = $122;label = 7; break;
  case 6: 
   $16=$97;
   var $124=$16;
   var $125=(($124)|0);
   $15=$125;
   var $126=$15;
   var $127=$126;
   $14=$127;
   var $128=$14;
   var $129=(($128)|0);
   var $130=(($129)|0);
   var $131=$130;
   var $132=(($131+1)|0);
   var $133=(($132)|0);
   var $134 = $133;label = 7; break;
  case 7: 
   var $134;
   var $135=$__fmt;
   $10=$135;
   var $136=$10;
   $9=$136;
   var $137=$9;
   var $138=(($137)|0);
   $8=$138;
   var $139=$8;
   var $140=$139;
   $7=$140;
   var $141=$7;
   var $142=(($141)|0);
   var $143=(($142)|0);
   var $144=$143;
   var $145=(($144)|0);
   var $146=$145;
   var $147=HEAP8[($146)];
   var $148=(($147)&(255));
   var $149=$148 & 1;
   var $150=(($149)|(0))!=0;
   if ($150) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $3=$136;
   var $152=$3;
   var $153=(($152)|0);
   $2=$153;
   var $154=$2;
   var $155=$154;
   $1=$155;
   var $156=$1;
   var $157=(($156)|0);
   var $158=(($157)|0);
   var $159=$158;
   var $160=(($159+4)|0);
   var $161=HEAP32[(($160)>>2)];
   var $176 = $161;label = 10; break;
  case 9: 
   $6=$136;
   var $163=$6;
   var $164=(($163)|0);
   $5=$164;
   var $165=$5;
   var $166=$165;
   $4=$166;
   var $167=$4;
   var $168=(($167)|0);
   var $169=(($168)|0);
   var $170=$169;
   var $171=(($170)|0);
   var $172=$171;
   var $173=HEAP8[($172)];
   var $174=(($173)&(255));
   var $175=$174 >> 1;
   var $176 = $175;label = 10; break;
  case 10: 
   var $176;
   var $177=(($134+$176)|0);
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result, $39, $37, $38, $52, $53, $54, $94, $177);
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__ct;
   var $6=__stackBase__;
   var $7;
   var $8;
   var $9=(__stackBase__)+(8);
   $2=$this;
   $3=$__iob;
   $4=$__err;
   $5=$__tm;
   var $10=$2;
   var $11=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $11);
   $1=$6;
   var $12=$1;
   var $13 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($12, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $14=$13;
   label = 3; break;
  case 3: 
   __ZNSt3__16localeD2Ev($6);
   $__ct=$14;
   var $16=$5;
   var $17=(($16+24)|0);
   var $18=$9;
   var $19=$__e;
   assert(4 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];
   var $20=$4;
   var $21=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($10, $17, $__b, $9, $20, $21);
   var $22=$agg_result;
   var $23=$__b;
   assert(4 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];
   STACKTOP = __stackBase__;
   return;
  case 4: 
   var $25$0 = ___cxa_find_matching_catch(-1, -1); $25$1 = tempRet0;
   var $26=$25$0;
   $7=$26;
   var $27=$25$1;
   $8=$27;
   __ZNSt3__16localeD2Ev($6);
   label = 5; break;
  case 5: 
   var $29=$7;
   var $30=$8;
   var $31$0=$29;
   var $31$1=0;
   var $32$0=$31$0;
   var $32$1=$30;
   ___resumeException($32$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__wk;
   var $__i;
   var $6=__stackBase__;
   $1=$this;
   $2=$__w;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$7;
   var $9=(($8+8)|0);
   var $10=$9;
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=FUNCTION_TABLE[$14]($10);
   $__wk=$15;
   var $16=$3;
   var $17=$6;
   var $18=$__e;
   assert(4 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];
   var $19=$__wk;
   var $20=$__wk;
   var $21=(($20+168)|0);
   var $22=$5;
   var $23=$4;
   var $24=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($16, $6, $19, $21, $22, $23, 0);
   var $25=$__wk;
   var $26=$24;
   var $27=$25;
   var $28=((($26)-($27))|0);
   var $29=((((($28)|(0)))/(12))&-1);
   $__i=$29;
   var $30=$__i;
   var $31=(($30)|(0)) < 14;
   if ($31) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $33=$__i;
   var $34=((((($33)|(0)))%(7))&-1);
   var $35=$2;
   HEAP32[(($35)>>2)]=$34;
   label = 3; break;
  case 3: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__ct;
   var $6=__stackBase__;
   var $7;
   var $8;
   var $9=(__stackBase__)+(8);
   $2=$this;
   $3=$__iob;
   $4=$__err;
   $5=$__tm;
   var $10=$2;
   var $11=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $11);
   $1=$6;
   var $12=$1;
   var $13 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($12, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $14=$13;
   label = 3; break;
  case 3: 
   __ZNSt3__16localeD2Ev($6);
   $__ct=$14;
   var $16=$5;
   var $17=(($16+16)|0);
   var $18=$9;
   var $19=$__e;
   assert(4 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];
   var $20=$4;
   var $21=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($10, $17, $__b, $9, $20, $21);
   var $22=$agg_result;
   var $23=$__b;
   assert(4 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];
   STACKTOP = __stackBase__;
   return;
  case 4: 
   var $25$0 = ___cxa_find_matching_catch(-1, -1); $25$1 = tempRet0;
   var $26=$25$0;
   $7=$26;
   var $27=$25$1;
   $8=$27;
   __ZNSt3__16localeD2Ev($6);
   label = 5; break;
  case 5: 
   var $29=$7;
   var $30=$8;
   var $31$0=$29;
   var $31$1=0;
   var $32$0=$31$0;
   var $32$1=$30;
   ___resumeException($32$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__month;
   var $__i;
   var $6=__stackBase__;
   $1=$this;
   $2=$__m;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$7;
   var $9=(($8+8)|0);
   var $10=$9;
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=FUNCTION_TABLE[$14]($10);
   $__month=$15;
   var $16=$3;
   var $17=$6;
   var $18=$__e;
   assert(4 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];
   var $19=$__month;
   var $20=$__month;
   var $21=(($20+288)|0);
   var $22=$5;
   var $23=$4;
   var $24=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($16, $6, $19, $21, $22, $23, 0);
   var $25=$__month;
   var $26=$24;
   var $27=$25;
   var $28=((($26)-($27))|0);
   var $29=((((($28)|(0)))/(12))&-1);
   $__i=$29;
   var $30=$__i;
   var $31=(($30)|(0)) < 24;
   if ($31) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $33=$__i;
   var $34=((((($33)|(0)))%(12))&-1);
   var $35=$2;
   HEAP32[(($35)>>2)]=$34;
   label = 3; break;
  case 3: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__ct;
   var $6=__stackBase__;
   var $7;
   var $8;
   var $9=(__stackBase__)+(8);
   $2=$this;
   $3=$__iob;
   $4=$__err;
   $5=$__tm;
   var $10=$2;
   var $11=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $11);
   $1=$6;
   var $12=$1;
   var $13 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($12, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $14=$13;
   label = 3; break;
  case 3: 
   __ZNSt3__16localeD2Ev($6);
   $__ct=$14;
   var $16=$5;
   var $17=(($16+20)|0);
   var $18=$9;
   var $19=$__e;
   assert(4 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];
   var $20=$4;
   var $21=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($10, $17, $__b, $9, $20, $21);
   var $22=$agg_result;
   var $23=$__b;
   assert(4 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];
   STACKTOP = __stackBase__;
   return;
  case 4: 
   var $25$0 = ___cxa_find_matching_catch(-1, -1); $25$1 = tempRet0;
   var $26=$25$0;
   $7=$26;
   var $27=$25$1;
   $8=$27;
   __ZNSt3__16localeD2Ev($6);
   label = 5; break;
  case 5: 
   var $29=$7;
   var $30=$8;
   var $31$0=$29;
   var $31$1=0;
   var $32$0=$31$0;
   var $32$1=$30;
   ___resumeException($32$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__y;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 4);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 9; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=(($19)|(0)) < 69;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__t;
   var $23=((($22)+(2000))|0);
   $__t=$23;
   label = 8; break;
  case 4: 
   var $25=$__t;
   var $26=69 <= (($25)|(0));
   if ($26) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $28=$__t;
   var $29=(($28)|(0)) <= 99;
   if ($29) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $31=$__t;
   var $32=((($31)+(1900))|0);
   $__t=$32;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $35=$__t;
   var $36=((($35)-(1900))|0);
   var $37=$2;
   HEAP32[(($37)>>2)]=$36;
   label = 9; break;
  case 9: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 312)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $__ct;
   var $73=__stackBase__;
   var $74;
   var $75;
   var $76=(__stackBase__)+(8);
   var $77=(__stackBase__)+(16);
   var $__fm;
   var $78=(__stackBase__)+(24);
   var $79=(__stackBase__)+(32);
   var $80=(__stackBase__)+(40);
   var $81=(__stackBase__)+(48);
   var $82=(__stackBase__)+(56);
   var $83=(__stackBase__)+(64);
   var $84=(__stackBase__)+(72);
   var $85=(__stackBase__)+(80);
   var $86=(__stackBase__)+(88);
   var $87=(__stackBase__)+(96);
   var $88=(__stackBase__)+(104);
   var $89=(__stackBase__)+(112);
   var $90=(__stackBase__)+(120);
   var $91=(__stackBase__)+(128);
   var $92=(__stackBase__)+(136);
   var $93=(__stackBase__)+(144);
   var $94=(__stackBase__)+(152);
   var $95=(__stackBase__)+(160);
   var $96=(__stackBase__)+(168);
   var $97=(__stackBase__)+(176);
   var $98=(__stackBase__)+(184);
   var $99=(__stackBase__)+(192);
   var $100=(__stackBase__)+(200);
   var $101=(__stackBase__)+(208);
   var $102=(__stackBase__)+(216);
   var $103=(__stackBase__)+(224);
   var $104=(__stackBase__)+(232);
   var $105=(__stackBase__)+(240);
   var $106=(__stackBase__)+(248);
   var $107=(__stackBase__)+(256);
   var $__fm1;
   var $108=(__stackBase__)+(264);
   var $109=(__stackBase__)+(272);
   var $110=(__stackBase__)+(280);
   var $111=(__stackBase__)+(288);
   var $112=(__stackBase__)+(296);
   var $113=(__stackBase__)+(304);
   $67=$this;
   $68=$__iob;
   $69=$__err;
   $70=$__tm;
   $71=$__fmt;
   $72=$0;
   var $114=$67;
   var $115=$69;
   HEAP32[(($115)>>2)]=0;
   var $116=$68;
   __ZNKSt3__18ios_base6getlocEv($73, $116);
   $66=$73;
   var $117=$66;
   var $118 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($117, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $119=$118;
   label = 3; break;
  case 3: 
   __ZNSt3__16localeD2Ev($73);
   $__ct=$119;
   var $121=$71;
   var $122=(($121 << 24) >> 24);
   if ((($122)|(0))==97 | (($122)|(0))==65) {
    label = 5; break;
   }
   else if ((($122)|(0))==98 | (($122)|(0))==66 | (($122)|(0))==104) {
    label = 6; break;
   }
   else if ((($122)|(0))==99) {
    label = 7; break;
   }
   else if ((($122)|(0))==100 | (($122)|(0))==101) {
    label = 17; break;
   }
   else if ((($122)|(0))==68) {
    label = 18; break;
   }
   else if ((($122)|(0))==70) {
    label = 19; break;
   }
   else if ((($122)|(0))==72) {
    label = 20; break;
   }
   else if ((($122)|(0))==73) {
    label = 21; break;
   }
   else if ((($122)|(0))==106) {
    label = 22; break;
   }
   else if ((($122)|(0))==109) {
    label = 23; break;
   }
   else if ((($122)|(0))==77) {
    label = 24; break;
   }
   else if ((($122)|(0))==110 | (($122)|(0))==116) {
    label = 25; break;
   }
   else if ((($122)|(0))==112) {
    label = 26; break;
   }
   else if ((($122)|(0))==114) {
    label = 27; break;
   }
   else if ((($122)|(0))==82) {
    label = 28; break;
   }
   else if ((($122)|(0))==83) {
    label = 29; break;
   }
   else if ((($122)|(0))==84) {
    label = 30; break;
   }
   else if ((($122)|(0))==119) {
    label = 31; break;
   }
   else if ((($122)|(0))==120) {
    label = 32; break;
   }
   else if ((($122)|(0))==88) {
    label = 33; break;
   }
   else if ((($122)|(0))==121) {
    label = 43; break;
   }
   else if ((($122)|(0))==89) {
    label = 44; break;
   }
   else if ((($122)|(0))==37) {
    label = 45; break;
   }
   else {
   label = 46; break;
   }
  case 4: 
   var $124$0 = ___cxa_find_matching_catch(-1, -1); $124$1 = tempRet0;
   var $125=$124$0;
   $74=$125;
   var $126=$124$1;
   $75=$126;
   __ZNSt3__16localeD2Ev($73);
   label = 49; break;
  case 5: 
   var $128=$70;
   var $129=(($128+24)|0);
   var $130=$76;
   var $131=$__e;
   assert(4 % 1 === 0);HEAP32[(($130)>>2)]=HEAP32[(($131)>>2)];
   var $132=$69;
   var $133=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($114, $129, $__b, $76, $132, $133);
   label = 47; break;
  case 6: 
   var $135=$70;
   var $136=(($135+16)|0);
   var $137=$77;
   var $138=$__e;
   assert(4 % 1 === 0);HEAP32[(($137)>>2)]=HEAP32[(($138)>>2)];
   var $139=$69;
   var $140=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($114, $136, $__b, $77, $139, $140);
   label = 47; break;
  case 7: 
   var $142=$114;
   var $143=(($142+8)|0);
   var $144=$143;
   var $145=$144;
   var $146=HEAP32[(($145)>>2)];
   var $147=(($146+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=FUNCTION_TABLE[$148]($144);
   $__fm=$149;
   var $150=$79;
   var $151=$__b;
   assert(4 % 1 === 0);HEAP32[(($150)>>2)]=HEAP32[(($151)>>2)];
   var $152=$80;
   var $153=$__e;
   assert(4 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];
   var $154=$68;
   var $155=$69;
   var $156=$70;
   var $157=$__fm;
   $65=$157;
   var $158=$65;
   $64=$158;
   var $159=$64;
   $63=$159;
   var $160=$63;
   var $161=(($160)|0);
   $62=$161;
   var $162=$62;
   var $163=$162;
   $61=$163;
   var $164=$61;
   var $165=(($164)|0);
   var $166=(($165)|0);
   var $167=$166;
   var $168=(($167)|0);
   var $169=$168;
   var $170=HEAP8[($169)];
   var $171=(($170)&(255));
   var $172=$171 & 1;
   var $173=(($172)|(0))!=0;
   if ($173) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $57=$159;
   var $175=$57;
   var $176=(($175)|0);
   $56=$176;
   var $177=$56;
   var $178=$177;
   $55=$178;
   var $179=$55;
   var $180=(($179)|0);
   var $181=(($180)|0);
   var $182=$181;
   var $183=(($182+8)|0);
   var $184=HEAP32[(($183)>>2)];
   var $196 = $184;label = 10; break;
  case 9: 
   $60=$159;
   var $186=$60;
   var $187=(($186)|0);
   $59=$187;
   var $188=$59;
   var $189=$188;
   $58=$189;
   var $190=$58;
   var $191=(($190)|0);
   var $192=(($191)|0);
   var $193=$192;
   var $194=(($193+1)|0);
   var $195=(($194)|0);
   var $196 = $195;label = 10; break;
  case 10: 
   var $196;
   var $197=$__fm;
   $54=$197;
   var $198=$54;
   $53=$198;
   var $199=$53;
   $52=$199;
   var $200=$52;
   var $201=(($200)|0);
   $51=$201;
   var $202=$51;
   var $203=$202;
   $50=$203;
   var $204=$50;
   var $205=(($204)|0);
   var $206=(($205)|0);
   var $207=$206;
   var $208=(($207)|0);
   var $209=$208;
   var $210=HEAP8[($209)];
   var $211=(($210)&(255));
   var $212=$211 & 1;
   var $213=(($212)|(0))!=0;
   if ($213) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $46=$199;
   var $215=$46;
   var $216=(($215)|0);
   $45=$216;
   var $217=$45;
   var $218=$217;
   $44=$218;
   var $219=$44;
   var $220=(($219)|0);
   var $221=(($220)|0);
   var $222=$221;
   var $223=(($222+8)|0);
   var $224=HEAP32[(($223)>>2)];
   var $236 = $224;label = 13; break;
  case 12: 
   $49=$199;
   var $226=$49;
   var $227=(($226)|0);
   $48=$227;
   var $228=$48;
   var $229=$228;
   $47=$229;
   var $230=$47;
   var $231=(($230)|0);
   var $232=(($231)|0);
   var $233=$232;
   var $234=(($233+1)|0);
   var $235=(($234)|0);
   var $236 = $235;label = 13; break;
  case 13: 
   var $236;
   var $237=$__fm;
   $43=$237;
   var $238=$43;
   $42=$238;
   var $239=$42;
   var $240=(($239)|0);
   $41=$240;
   var $241=$41;
   var $242=$241;
   $40=$242;
   var $243=$40;
   var $244=(($243)|0);
   var $245=(($244)|0);
   var $246=$245;
   var $247=(($246)|0);
   var $248=$247;
   var $249=HEAP8[($248)];
   var $250=(($249)&(255));
   var $251=$250 & 1;
   var $252=(($251)|(0))!=0;
   if ($252) { label = 14; break; } else { label = 15; break; }
  case 14: 
   $36=$238;
   var $254=$36;
   var $255=(($254)|0);
   $35=$255;
   var $256=$35;
   var $257=$256;
   $34=$257;
   var $258=$34;
   var $259=(($258)|0);
   var $260=(($259)|0);
   var $261=$260;
   var $262=(($261+4)|0);
   var $263=HEAP32[(($262)>>2)];
   var $278 = $263;label = 16; break;
  case 15: 
   $39=$238;
   var $265=$39;
   var $266=(($265)|0);
   $38=$266;
   var $267=$38;
   var $268=$267;
   $37=$268;
   var $269=$37;
   var $270=(($269)|0);
   var $271=(($270)|0);
   var $272=$271;
   var $273=(($272)|0);
   var $274=$273;
   var $275=HEAP8[($274)];
   var $276=(($275)&(255));
   var $277=$276 >> 1;
   var $278 = $277;label = 16; break;
  case 16: 
   var $278;
   var $279=(($236+$278)|0);
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($78, $114, $79, $80, $154, $155, $156, $196, $279);
   var $280=$__b;
   var $281=$78;
   assert(4 % 1 === 0);HEAP32[(($280)>>2)]=HEAP32[(($281)>>2)];
   label = 47; break;
  case 17: 
   var $283=$70;
   var $284=(($283+12)|0);
   var $285=$81;
   var $286=$__e;
   assert(4 % 1 === 0);HEAP32[(($285)>>2)]=HEAP32[(($286)>>2)];
   var $287=$69;
   var $288=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($114, $284, $__b, $81, $287, $288);
   label = 47; break;
  case 18: 
   var $290=$83;
   var $291=$__b;
   assert(4 % 1 === 0);HEAP32[(($290)>>2)]=HEAP32[(($291)>>2)];
   var $292=$84;
   var $293=$__e;
   assert(4 % 1 === 0);HEAP32[(($292)>>2)]=HEAP32[(($293)>>2)];
   var $294=$68;
   var $295=$69;
   var $296=$70;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($82, $114, $83, $84, $294, $295, $296, ((10504)|0), ((10512)|0));
   var $297=$__b;
   var $298=$82;
   assert(4 % 1 === 0);HEAP32[(($297)>>2)]=HEAP32[(($298)>>2)];
   label = 47; break;
  case 19: 
   var $300=$86;
   var $301=$__b;
   assert(4 % 1 === 0);HEAP32[(($300)>>2)]=HEAP32[(($301)>>2)];
   var $302=$87;
   var $303=$__e;
   assert(4 % 1 === 0);HEAP32[(($302)>>2)]=HEAP32[(($303)>>2)];
   var $304=$68;
   var $305=$69;
   var $306=$70;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($85, $114, $86, $87, $304, $305, $306, ((10496)|0), ((10504)|0));
   var $307=$__b;
   var $308=$85;
   assert(4 % 1 === 0);HEAP32[(($307)>>2)]=HEAP32[(($308)>>2)];
   label = 47; break;
  case 20: 
   var $310=$70;
   var $311=(($310+8)|0);
   var $312=$88;
   var $313=$__e;
   assert(4 % 1 === 0);HEAP32[(($312)>>2)]=HEAP32[(($313)>>2)];
   var $314=$69;
   var $315=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($114, $311, $__b, $88, $314, $315);
   label = 47; break;
  case 21: 
   var $317=$70;
   var $318=(($317+8)|0);
   var $319=$89;
   var $320=$__e;
   assert(4 % 1 === 0);HEAP32[(($319)>>2)]=HEAP32[(($320)>>2)];
   var $321=$69;
   var $322=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($114, $318, $__b, $89, $321, $322);
   label = 47; break;
  case 22: 
   var $324=$70;
   var $325=(($324+28)|0);
   var $326=$90;
   var $327=$__e;
   assert(4 % 1 === 0);HEAP32[(($326)>>2)]=HEAP32[(($327)>>2)];
   var $328=$69;
   var $329=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($114, $325, $__b, $90, $328, $329);
   label = 47; break;
  case 23: 
   var $331=$70;
   var $332=(($331+16)|0);
   var $333=$91;
   var $334=$__e;
   assert(4 % 1 === 0);HEAP32[(($333)>>2)]=HEAP32[(($334)>>2)];
   var $335=$69;
   var $336=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($114, $332, $__b, $91, $335, $336);
   label = 47; break;
  case 24: 
   var $338=$70;
   var $339=(($338+4)|0);
   var $340=$92;
   var $341=$__e;
   assert(4 % 1 === 0);HEAP32[(($340)>>2)]=HEAP32[(($341)>>2)];
   var $342=$69;
   var $343=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($114, $339, $__b, $92, $342, $343);
   label = 47; break;
  case 25: 
   var $345=$93;
   var $346=$__e;
   assert(4 % 1 === 0);HEAP32[(($345)>>2)]=HEAP32[(($346)>>2)];
   var $347=$69;
   var $348=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($114, $__b, $93, $347, $348);
   label = 47; break;
  case 26: 
   var $350=$70;
   var $351=(($350+8)|0);
   var $352=$94;
   var $353=$__e;
   assert(4 % 1 === 0);HEAP32[(($352)>>2)]=HEAP32[(($353)>>2)];
   var $354=$69;
   var $355=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($114, $351, $__b, $94, $354, $355);
   label = 47; break;
  case 27: 
   var $357=$96;
   var $358=$__b;
   assert(4 % 1 === 0);HEAP32[(($357)>>2)]=HEAP32[(($358)>>2)];
   var $359=$97;
   var $360=$__e;
   assert(4 % 1 === 0);HEAP32[(($359)>>2)]=HEAP32[(($360)>>2)];
   var $361=$68;
   var $362=$69;
   var $363=$70;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($95, $114, $96, $97, $361, $362, $363, ((10480)|0), ((10491)|0));
   var $364=$__b;
   var $365=$95;
   assert(4 % 1 === 0);HEAP32[(($364)>>2)]=HEAP32[(($365)>>2)];
   label = 47; break;
  case 28: 
   var $367=$99;
   var $368=$__b;
   assert(4 % 1 === 0);HEAP32[(($367)>>2)]=HEAP32[(($368)>>2)];
   var $369=$100;
   var $370=$__e;
   assert(4 % 1 === 0);HEAP32[(($369)>>2)]=HEAP32[(($370)>>2)];
   var $371=$68;
   var $372=$69;
   var $373=$70;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($98, $114, $99, $100, $371, $372, $373, ((10472)|0), ((10477)|0));
   var $374=$__b;
   var $375=$98;
   assert(4 % 1 === 0);HEAP32[(($374)>>2)]=HEAP32[(($375)>>2)];
   label = 47; break;
  case 29: 
   var $377=$70;
   var $378=(($377)|0);
   var $379=$101;
   var $380=$__e;
   assert(4 % 1 === 0);HEAP32[(($379)>>2)]=HEAP32[(($380)>>2)];
   var $381=$69;
   var $382=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($114, $378, $__b, $101, $381, $382);
   label = 47; break;
  case 30: 
   var $384=$103;
   var $385=$__b;
   assert(4 % 1 === 0);HEAP32[(($384)>>2)]=HEAP32[(($385)>>2)];
   var $386=$104;
   var $387=$__e;
   assert(4 % 1 === 0);HEAP32[(($386)>>2)]=HEAP32[(($387)>>2)];
   var $388=$68;
   var $389=$69;
   var $390=$70;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($102, $114, $103, $104, $388, $389, $390, ((10464)|0), ((10472)|0));
   var $391=$__b;
   var $392=$102;
   assert(4 % 1 === 0);HEAP32[(($391)>>2)]=HEAP32[(($392)>>2)];
   label = 47; break;
  case 31: 
   var $394=$70;
   var $395=(($394+24)|0);
   var $396=$105;
   var $397=$__e;
   assert(4 % 1 === 0);HEAP32[(($396)>>2)]=HEAP32[(($397)>>2)];
   var $398=$69;
   var $399=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($114, $395, $__b, $105, $398, $399);
   label = 47; break;
  case 32: 
   var $401=$114;
   var $402=HEAP32[(($401)>>2)];
   var $403=(($402+20)|0);
   var $404=HEAP32[(($403)>>2)];
   var $405=$106;
   var $406=$__b;
   assert(4 % 1 === 0);HEAP32[(($405)>>2)]=HEAP32[(($406)>>2)];
   var $407=$107;
   var $408=$__e;
   assert(4 % 1 === 0);HEAP32[(($407)>>2)]=HEAP32[(($408)>>2)];
   var $409=$68;
   var $410=$69;
   var $411=$70;
   FUNCTION_TABLE[$404]($agg_result, $114, $106, $107, $409, $410, $411);
   label = 48; break;
  case 33: 
   var $413=$114;
   var $414=(($413+8)|0);
   var $415=$414;
   var $416=$415;
   var $417=HEAP32[(($416)>>2)];
   var $418=(($417+24)|0);
   var $419=HEAP32[(($418)>>2)];
   var $420=FUNCTION_TABLE[$419]($415);
   $__fm1=$420;
   var $421=$109;
   var $422=$__b;
   assert(4 % 1 === 0);HEAP32[(($421)>>2)]=HEAP32[(($422)>>2)];
   var $423=$110;
   var $424=$__e;
   assert(4 % 1 === 0);HEAP32[(($423)>>2)]=HEAP32[(($424)>>2)];
   var $425=$68;
   var $426=$69;
   var $427=$70;
   var $428=$__fm1;
   $33=$428;
   var $429=$33;
   $32=$429;
   var $430=$32;
   $31=$430;
   var $431=$31;
   var $432=(($431)|0);
   $30=$432;
   var $433=$30;
   var $434=$433;
   $29=$434;
   var $435=$29;
   var $436=(($435)|0);
   var $437=(($436)|0);
   var $438=$437;
   var $439=(($438)|0);
   var $440=$439;
   var $441=HEAP8[($440)];
   var $442=(($441)&(255));
   var $443=$442 & 1;
   var $444=(($443)|(0))!=0;
   if ($444) { label = 34; break; } else { label = 35; break; }
  case 34: 
   $25=$430;
   var $446=$25;
   var $447=(($446)|0);
   $24=$447;
   var $448=$24;
   var $449=$448;
   $23=$449;
   var $450=$23;
   var $451=(($450)|0);
   var $452=(($451)|0);
   var $453=$452;
   var $454=(($453+8)|0);
   var $455=HEAP32[(($454)>>2)];
   var $467 = $455;label = 36; break;
  case 35: 
   $28=$430;
   var $457=$28;
   var $458=(($457)|0);
   $27=$458;
   var $459=$27;
   var $460=$459;
   $26=$460;
   var $461=$26;
   var $462=(($461)|0);
   var $463=(($462)|0);
   var $464=$463;
   var $465=(($464+1)|0);
   var $466=(($465)|0);
   var $467 = $466;label = 36; break;
  case 36: 
   var $467;
   var $468=$__fm1;
   $22=$468;
   var $469=$22;
   $21=$469;
   var $470=$21;
   $20=$470;
   var $471=$20;
   var $472=(($471)|0);
   $19=$472;
   var $473=$19;
   var $474=$473;
   $18=$474;
   var $475=$18;
   var $476=(($475)|0);
   var $477=(($476)|0);
   var $478=$477;
   var $479=(($478)|0);
   var $480=$479;
   var $481=HEAP8[($480)];
   var $482=(($481)&(255));
   var $483=$482 & 1;
   var $484=(($483)|(0))!=0;
   if ($484) { label = 37; break; } else { label = 38; break; }
  case 37: 
   $14=$470;
   var $486=$14;
   var $487=(($486)|0);
   $13=$487;
   var $488=$13;
   var $489=$488;
   $12=$489;
   var $490=$12;
   var $491=(($490)|0);
   var $492=(($491)|0);
   var $493=$492;
   var $494=(($493+8)|0);
   var $495=HEAP32[(($494)>>2)];
   var $507 = $495;label = 39; break;
  case 38: 
   $17=$470;
   var $497=$17;
   var $498=(($497)|0);
   $16=$498;
   var $499=$16;
   var $500=$499;
   $15=$500;
   var $501=$15;
   var $502=(($501)|0);
   var $503=(($502)|0);
   var $504=$503;
   var $505=(($504+1)|0);
   var $506=(($505)|0);
   var $507 = $506;label = 39; break;
  case 39: 
   var $507;
   var $508=$__fm1;
   $11=$508;
   var $509=$11;
   $10=$509;
   var $510=$10;
   var $511=(($510)|0);
   $9=$511;
   var $512=$9;
   var $513=$512;
   $8=$513;
   var $514=$8;
   var $515=(($514)|0);
   var $516=(($515)|0);
   var $517=$516;
   var $518=(($517)|0);
   var $519=$518;
   var $520=HEAP8[($519)];
   var $521=(($520)&(255));
   var $522=$521 & 1;
   var $523=(($522)|(0))!=0;
   if ($523) { label = 40; break; } else { label = 41; break; }
  case 40: 
   $4=$509;
   var $525=$4;
   var $526=(($525)|0);
   $3=$526;
   var $527=$3;
   var $528=$527;
   $2=$528;
   var $529=$2;
   var $530=(($529)|0);
   var $531=(($530)|0);
   var $532=$531;
   var $533=(($532+4)|0);
   var $534=HEAP32[(($533)>>2)];
   var $549 = $534;label = 42; break;
  case 41: 
   $7=$509;
   var $536=$7;
   var $537=(($536)|0);
   $6=$537;
   var $538=$6;
   var $539=$538;
   $5=$539;
   var $540=$5;
   var $541=(($540)|0);
   var $542=(($541)|0);
   var $543=$542;
   var $544=(($543)|0);
   var $545=$544;
   var $546=HEAP8[($545)];
   var $547=(($546)&(255));
   var $548=$547 >> 1;
   var $549 = $548;label = 42; break;
  case 42: 
   var $549;
   var $550=(($507+$549)|0);
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($108, $114, $109, $110, $425, $426, $427, $467, $550);
   var $551=$__b;
   var $552=$108;
   assert(4 % 1 === 0);HEAP32[(($551)>>2)]=HEAP32[(($552)>>2)];
   label = 47; break;
  case 43: 
   var $554=$70;
   var $555=(($554+20)|0);
   var $556=$111;
   var $557=$__e;
   assert(4 % 1 === 0);HEAP32[(($556)>>2)]=HEAP32[(($557)>>2)];
   var $558=$69;
   var $559=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($114, $555, $__b, $111, $558, $559);
   label = 47; break;
  case 44: 
   var $561=$70;
   var $562=(($561+20)|0);
   var $563=$112;
   var $564=$__e;
   assert(4 % 1 === 0);HEAP32[(($563)>>2)]=HEAP32[(($564)>>2)];
   var $565=$69;
   var $566=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($114, $562, $__b, $112, $565, $566);
   label = 47; break;
  case 45: 
   var $568=$113;
   var $569=$__e;
   assert(4 % 1 === 0);HEAP32[(($568)>>2)]=HEAP32[(($569)>>2)];
   var $570=$69;
   var $571=$__ct;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($114, $__b, $113, $570, $571);
   label = 47; break;
  case 46: 
   var $573=$69;
   var $574=HEAP32[(($573)>>2)];
   var $575=$574 | 4;
   HEAP32[(($573)>>2)]=$575;
   label = 47; break;
  case 47: 
   var $577=$agg_result;
   var $578=$__b;
   assert(4 % 1 === 0);HEAP32[(($577)>>2)]=HEAP32[(($578)>>2)];
   label = 48; break;
  case 48: 
   STACKTOP = __stackBase__;
   return;
  case 49: 
   var $581=$74;
   var $582=$75;
   var $583$0=$581;
   var $583$1=0;
   var $584$0=$583$0;
   var $584$1=$582;
   ___resumeException($584$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__d;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 2);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 5; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=1 <= (($19)|(0));
   if ($20) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $22=$__t;
   var $23=(($22)|(0)) <= 31;
   if ($23) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $25=$__t;
   var $26=$2;
   HEAP32[(($26)>>2)]=$25;
   label = 6; break;
  case 5: 
   var $28=$4;
   var $29=HEAP32[(($28)>>2)];
   var $30=$29 | 4;
   HEAP32[(($28)>>2)]=$30;
   label = 6; break;
  case 6: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__h;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 2);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=(($19)|(0)) <= 23;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__t;
   var $23=$2;
   HEAP32[(($23)>>2)]=$22;
   label = 5; break;
  case 4: 
   var $25=$4;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26 | 4;
   HEAP32[(($25)>>2)]=$27;
   label = 5; break;
  case 5: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__h;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 2);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 5; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=1 <= (($19)|(0));
   if ($20) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $22=$__t;
   var $23=(($22)|(0)) <= 12;
   if ($23) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $25=$__t;
   var $26=$2;
   HEAP32[(($26)>>2)]=$25;
   label = 6; break;
  case 5: 
   var $28=$4;
   var $29=HEAP32[(($28)>>2)];
   var $30=$29 | 4;
   HEAP32[(($28)>>2)]=$30;
   label = 6; break;
  case 6: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__d;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 3);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=(($19)|(0)) <= 365;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__t;
   var $23=$2;
   HEAP32[(($23)>>2)]=$22;
   label = 5; break;
  case 4: 
   var $25=$4;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26 | 4;
   HEAP32[(($25)>>2)]=$27;
   label = 5; break;
  case 5: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__m;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 2);
   var $14=((($13)-(1))|0);
   $__t=$14;
   var $15=$4;
   var $16=HEAP32[(($15)>>2)];
   var $17=$16 & 4;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $20=$__t;
   var $21=(($20)|(0)) <= 11;
   if ($21) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $23=$__t;
   var $24=$2;
   HEAP32[(($24)>>2)]=$23;
   label = 5; break;
  case 4: 
   var $26=$4;
   var $27=HEAP32[(($26)>>2)];
   var $28=$27 | 4;
   HEAP32[(($26)>>2)]=$28;
   label = 5; break;
  case 5: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__m;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 2);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=(($19)|(0)) <= 59;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__t;
   var $23=$2;
   HEAP32[(($23)>>2)]=$22;
   label = 5; break;
  case 4: 
   var $25=$4;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26 | 4;
   HEAP32[(($25)>>2)]=$27;
   label = 5; break;
  case 5: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   $44=$this;
   $45=$__b;
   $46=$__err;
   $47=$__ct;
   var $48=$44;
   label = 2; break;
  case 2: 
   var $50=$45;
   $42=$50;
   $43=$__e;
   var $51=$42;
   var $52=$43;
   $40=$51;
   $41=$52;
   var $53=$40;
   $39=$53;
   var $54=$39;
   var $55=(($54)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56)|(0))!=0;
   if ($57) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $59=(($54)|0);
   var $60=HEAP32[(($59)>>2)];
   $38=$60;
   var $61=$38;
   var $62=(($61+12)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($61+16)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($63)|(0))==(($65)|(0));
   if ($66) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $68=$61;
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69+36)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=FUNCTION_TABLE[$71]($61);
   $37=$72;
   label = 6; break;
  case 5: 
   var $74=(($61+12)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=HEAP8[($75)];
   $36=$76;
   var $77=$36;
   var $78=(($77)&(255));
   $37=$78;
   label = 6; break;
  case 6: 
   var $79=$37;
   $34=$79;
   $35=-1;
   var $80=$34;
   var $81=$35;
   var $82=(($80)|(0))==(($81)|(0));
   if ($82) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $84=(($54)|0);
   HEAP32[(($84)>>2)]=0;
   label = 8; break;
  case 8: 
   var $85=(($54)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86)|(0))==0;
   var $88=(($87)&(1));
   var $89=$41;
   $33=$89;
   var $90=$33;
   var $91=(($90)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92)|(0))!=0;
   if ($93) { label = 9; break; } else { label = 14; break; }
  case 9: 
   var $95=(($90)|0);
   var $96=HEAP32[(($95)>>2)];
   $32=$96;
   var $97=$32;
   var $98=(($97+12)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($97+16)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($99)|(0))==(($101)|(0));
   if ($102) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $104=$97;
   var $105=HEAP32[(($104)>>2)];
   var $106=(($105+36)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=FUNCTION_TABLE[$107]($97);
   $31=$108;
   label = 12; break;
  case 11: 
   var $110=(($97+12)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=HEAP8[($111)];
   $30=$112;
   var $113=$30;
   var $114=(($113)&(255));
   $31=$114;
   label = 12; break;
  case 12: 
   var $115=$31;
   $28=$115;
   $29=-1;
   var $116=$28;
   var $117=$29;
   var $118=(($116)|(0))==(($117)|(0));
   if ($118) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $120=(($90)|0);
   HEAP32[(($120)>>2)]=0;
   label = 14; break;
  case 14: 
   var $121=(($90)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=(($122)|(0))==0;
   var $124=(($123)&(1));
   var $125=(($88)|(0))==(($124)|(0));
   var $126=$125 ^ 1;
   if ($126) { label = 15; break; } else { var $172 = 0;label = 22; break; }
  case 15: 
   var $128=$47;
   var $129=$45;
   $27=$129;
   var $130=$27;
   var $131=(($130)|0);
   var $132=HEAP32[(($131)>>2)];
   $26=$132;
   var $133=$26;
   var $134=(($133+12)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($133+16)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=(($135)|(0))==(($137)|(0));
   if ($138) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $140=$133;
   var $141=HEAP32[(($140)>>2)];
   var $142=(($141+36)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=FUNCTION_TABLE[$143]($133);
   $25=$144;
   label = 18; break;
  case 17: 
   var $146=(($133+12)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=HEAP8[($147)];
   $24=$148;
   var $149=$24;
   var $150=(($149)&(255));
   $25=$150;
   label = 18; break;
  case 18: 
   var $151=$25;
   var $152=(($151) & 255);
   $21=$128;
   $22=8192;
   $23=$152;
   var $153=$21;
   var $154=$23;
   var $155=(($154 << 24) >> 24);
   var $156=(($155)>>>(0)) <= 127;
   if ($156) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $158=$23;
   var $159=(($158 << 24) >> 24);
   var $160=(($153+8)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($161+($159<<1))|0);
   var $163=HEAP16[(($162)>>1)];
   var $164=(($163)&(65535));
   var $165=$22;
   var $166=(($165)&(65535));
   var $167=$164 & $166;
   var $169 = $167;label = 21; break;
  case 20: 
   var $169 = 0;label = 21; break;
  case 21: 
   var $169;
   var $170=(($169)|(0))!=0;
   var $172 = $170;label = 22; break;
  case 22: 
   var $172;
   if ($172) { label = 23; break; } else { label = 28; break; }
  case 23: 
   label = 24; break;
  case 24: 
   var $175=$45;
   $20=$175;
   var $176=$20;
   var $177=(($176)|0);
   var $178=HEAP32[(($177)>>2)];
   $19=$178;
   var $179=$19;
   var $180=(($179+12)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($179+16)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($181)|(0))==(($183)|(0));
   if ($184) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $186=$179;
   var $187=HEAP32[(($186)>>2)];
   var $188=(($187+40)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=FUNCTION_TABLE[$189]($179);
   $18=$190;
   label = 27; break;
  case 26: 
   var $192=(($179+12)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194=(($193+1)|0);
   HEAP32[(($192)>>2)]=$194;
   var $195=HEAP8[($193)];
   $17=$195;
   var $196=$17;
   var $197=(($196)&(255));
   $18=$197;
   label = 27; break;
  case 27: 
   var $198=$18;
   label = 2; break;
  case 28: 
   var $200=$45;
   $15=$200;
   $16=$__e;
   var $201=$15;
   var $202=$16;
   $13=$201;
   $14=$202;
   var $203=$13;
   $12=$203;
   var $204=$12;
   var $205=(($204)|0);
   var $206=HEAP32[(($205)>>2)];
   var $207=(($206)|(0))!=0;
   if ($207) { label = 29; break; } else { label = 34; break; }
  case 29: 
   var $209=(($204)|0);
   var $210=HEAP32[(($209)>>2)];
   $11=$210;
   var $211=$11;
   var $212=(($211+12)|0);
   var $213=HEAP32[(($212)>>2)];
   var $214=(($211+16)|0);
   var $215=HEAP32[(($214)>>2)];
   var $216=(($213)|(0))==(($215)|(0));
   if ($216) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $218=$211;
   var $219=HEAP32[(($218)>>2)];
   var $220=(($219+36)|0);
   var $221=HEAP32[(($220)>>2)];
   var $222=FUNCTION_TABLE[$221]($211);
   $10=$222;
   label = 32; break;
  case 31: 
   var $224=(($211+12)|0);
   var $225=HEAP32[(($224)>>2)];
   var $226=HEAP8[($225)];
   $9=$226;
   var $227=$9;
   var $228=(($227)&(255));
   $10=$228;
   label = 32; break;
  case 32: 
   var $229=$10;
   $7=$229;
   $8=-1;
   var $230=$7;
   var $231=$8;
   var $232=(($230)|(0))==(($231)|(0));
   if ($232) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $234=(($204)|0);
   HEAP32[(($234)>>2)]=0;
   label = 34; break;
  case 34: 
   var $235=(($204)|0);
   var $236=HEAP32[(($235)>>2)];
   var $237=(($236)|(0))==0;
   var $238=(($237)&(1));
   var $239=$14;
   $6=$239;
   var $240=$6;
   var $241=(($240)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=(($242)|(0))!=0;
   if ($243) { label = 35; break; } else { label = 40; break; }
  case 35: 
   var $245=(($240)|0);
   var $246=HEAP32[(($245)>>2)];
   $5=$246;
   var $247=$5;
   var $248=(($247+12)|0);
   var $249=HEAP32[(($248)>>2)];
   var $250=(($247+16)|0);
   var $251=HEAP32[(($250)>>2)];
   var $252=(($249)|(0))==(($251)|(0));
   if ($252) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $254=$247;
   var $255=HEAP32[(($254)>>2)];
   var $256=(($255+36)|0);
   var $257=HEAP32[(($256)>>2)];
   var $258=FUNCTION_TABLE[$257]($247);
   $4=$258;
   label = 38; break;
  case 37: 
   var $260=(($247+12)|0);
   var $261=HEAP32[(($260)>>2)];
   var $262=HEAP8[($261)];
   $3=$262;
   var $263=$3;
   var $264=(($263)&(255));
   $4=$264;
   label = 38; break;
  case 38: 
   var $265=$4;
   $1=$265;
   $2=-1;
   var $266=$1;
   var $267=$2;
   var $268=(($266)|(0))==(($267)|(0));
   if ($268) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $270=(($240)|0);
   HEAP32[(($270)>>2)]=0;
   label = 40; break;
  case 40: 
   var $271=(($240)|0);
   var $272=HEAP32[(($271)>>2)];
   var $273=(($272)|(0))==0;
   var $274=(($273)&(1));
   var $275=(($238)|(0))==(($274)|(0));
   if ($275) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $277=$46;
   var $278=HEAP32[(($277)>>2)];
   var $279=$278 | 2;
   HEAP32[(($277)>>2)]=$279;
   label = 42; break;
  case 42: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $__ap;
   var $__i;
   var $26=__stackBase__;
   $21=$this;
   $22=$__h;
   $23=$__b;
   $24=$__err;
   $25=$__ct;
   var $27=$21;
   var $28=$27;
   var $29=(($28+8)|0);
   var $30=$29;
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32+8)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=FUNCTION_TABLE[$34]($30);
   $__ap=$35;
   var $36=$__ap;
   var $37=(($36)|0);
   $20=$37;
   var $38=$20;
   $19=$38;
   var $39=$19;
   var $40=(($39)|0);
   $18=$40;
   var $41=$18;
   var $42=$41;
   $17=$42;
   var $43=$17;
   var $44=(($43)|0);
   var $45=(($44)|0);
   var $46=$45;
   var $47=(($46)|0);
   var $48=$47;
   var $49=HEAP8[($48)];
   var $50=(($49)&(255));
   var $51=$50 & 1;
   var $52=(($51)|(0))!=0;
   if ($52) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $13=$38;
   var $54=$13;
   var $55=(($54)|0);
   $12=$55;
   var $56=$12;
   var $57=$56;
   $11=$57;
   var $58=$11;
   var $59=(($58)|0);
   var $60=(($59)|0);
   var $61=$60;
   var $62=(($61+4)|0);
   var $63=HEAP32[(($62)>>2)];
   var $78 = $63;label = 4; break;
  case 3: 
   $16=$38;
   var $65=$16;
   var $66=(($65)|0);
   $15=$66;
   var $67=$15;
   var $68=$67;
   $14=$68;
   var $69=$14;
   var $70=(($69)|0);
   var $71=(($70)|0);
   var $72=$71;
   var $73=(($72)|0);
   var $74=$73;
   var $75=HEAP8[($74)];
   var $76=(($75)&(255));
   var $77=$76 >> 1;
   var $78 = $77;label = 4; break;
  case 4: 
   var $78;
   var $79=$__ap;
   var $80=(($79+12)|0);
   $10=$80;
   var $81=$10;
   $9=$81;
   var $82=$9;
   var $83=(($82)|0);
   $8=$83;
   var $84=$8;
   var $85=$84;
   $7=$85;
   var $86=$7;
   var $87=(($86)|0);
   var $88=(($87)|0);
   var $89=$88;
   var $90=(($89)|0);
   var $91=$90;
   var $92=HEAP8[($91)];
   var $93=(($92)&(255));
   var $94=$93 & 1;
   var $95=(($94)|(0))!=0;
   if ($95) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $3=$81;
   var $97=$3;
   var $98=(($97)|0);
   $2=$98;
   var $99=$2;
   var $100=$99;
   $1=$100;
   var $101=$1;
   var $102=(($101)|0);
   var $103=(($102)|0);
   var $104=$103;
   var $105=(($104+4)|0);
   var $106=HEAP32[(($105)>>2)];
   var $121 = $106;label = 7; break;
  case 6: 
   $6=$81;
   var $108=$6;
   var $109=(($108)|0);
   $5=$109;
   var $110=$5;
   var $111=$110;
   $4=$111;
   var $112=$4;
   var $113=(($112)|0);
   var $114=(($113)|0);
   var $115=$114;
   var $116=(($115)|0);
   var $117=$116;
   var $118=HEAP8[($117)];
   var $119=(($118)&(255));
   var $120=$119 >> 1;
   var $121 = $120;label = 7; break;
  case 7: 
   var $121;
   var $122=((($78)+($121))|0);
   var $123=(($122)|(0))==0;
   if ($123) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $125=$24;
   var $126=HEAP32[(($125)>>2)];
   var $127=$126 | 4;
   HEAP32[(($125)>>2)]=$127;
   label = 16; break;
  case 9: 
   var $129=$23;
   var $130=$26;
   var $131=$__e;
   assert(4 % 1 === 0);HEAP32[(($130)>>2)]=HEAP32[(($131)>>2)];
   var $132=$__ap;
   var $133=$__ap;
   var $134=(($133+24)|0);
   var $135=$25;
   var $136=$24;
   var $137=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($129, $26, $132, $134, $135, $136, 0);
   var $138=$__ap;
   var $139=$137;
   var $140=$138;
   var $141=((($139)-($140))|0);
   var $142=((((($141)|(0)))/(12))&-1);
   $__i=$142;
   var $143=$__i;
   var $144=(($143)|(0))==0;
   if ($144) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $146=$22;
   var $147=HEAP32[(($146)>>2)];
   var $148=(($147)|(0))==12;
   if ($148) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $150=$22;
   HEAP32[(($150)>>2)]=0;
   label = 16; break;
  case 12: 
   var $152=$__i;
   var $153=(($152)|(0))==1;
   if ($153) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $155=$22;
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156)|(0)) < 12;
   if ($157) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $159=$22;
   var $160=HEAP32[(($159)>>2)];
   var $161=((($160)+(12))|0);
   HEAP32[(($159)>>2)]=$161;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__s, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__s;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 2);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=(($19)|(0)) <= 60;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__t;
   var $23=$2;
   HEAP32[(($23)>>2)]=$22;
   label = 5; break;
  case 4: 
   var $25=$4;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26 | 4;
   HEAP32[(($25)>>2)]=$27;
   label = 5; break;
  case 5: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__w;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 1);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=(($19)|(0)) <= 6;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__t;
   var $23=$2;
   HEAP32[(($23)>>2)]=$22;
   label = 5; break;
  case 4: 
   var $25=$4;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26 | 4;
   HEAP32[(($25)>>2)]=$27;
   label = 5; break;
  case 5: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__y;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 4);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=((($19)-(1900))|0);
   var $21=$2;
   HEAP32[(($21)>>2)]=$20;
   label = 3; break;
  case 3: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   $44=$this;
   $45=$__b;
   $46=$__err;
   $47=$__ct;
   var $48=$44;
   var $49=$45;
   $42=$49;
   $43=$__e;
   var $50=$42;
   var $51=$43;
   $40=$50;
   $41=$51;
   var $52=$40;
   $39=$52;
   var $53=$39;
   var $54=(($53)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55)|(0))!=0;
   if ($56) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $58=(($53)|0);
   var $59=HEAP32[(($58)>>2)];
   $38=$59;
   var $60=$38;
   var $61=(($60+12)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($60+16)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($62)|(0))==(($64)|(0));
   if ($65) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $67=$60;
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68+36)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=FUNCTION_TABLE[$70]($60);
   $37=$71;
   label = 5; break;
  case 4: 
   var $73=(($60+12)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=HEAP8[($74)];
   $36=$75;
   var $76=$36;
   var $77=(($76)&(255));
   $37=$77;
   label = 5; break;
  case 5: 
   var $78=$37;
   $34=$78;
   $35=-1;
   var $79=$34;
   var $80=$35;
   var $81=(($79)|(0))==(($80)|(0));
   if ($81) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $83=(($53)|0);
   HEAP32[(($83)>>2)]=0;
   label = 7; break;
  case 7: 
   var $84=(($53)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85)|(0))==0;
   var $87=(($86)&(1));
   var $88=$41;
   $33=$88;
   var $89=$33;
   var $90=(($89)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91)|(0))!=0;
   if ($92) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $94=(($89)|0);
   var $95=HEAP32[(($94)>>2)];
   $32=$95;
   var $96=$32;
   var $97=(($96+12)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($96+16)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($98)|(0))==(($100)|(0));
   if ($101) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $103=$96;
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+36)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=FUNCTION_TABLE[$106]($96);
   $31=$107;
   label = 11; break;
  case 10: 
   var $109=(($96+12)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=HEAP8[($110)];
   $30=$111;
   var $112=$30;
   var $113=(($112)&(255));
   $31=$113;
   label = 11; break;
  case 11: 
   var $114=$31;
   $28=$114;
   $29=-1;
   var $115=$28;
   var $116=$29;
   var $117=(($115)|(0))==(($116)|(0));
   if ($117) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $119=(($89)|0);
   HEAP32[(($119)>>2)]=0;
   label = 13; break;
  case 13: 
   var $120=(($89)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121)|(0))==0;
   var $123=(($122)&(1));
   var $124=(($87)|(0))==(($123)|(0));
   if ($124) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $126=$46;
   var $127=HEAP32[(($126)>>2)];
   var $128=$127 | 6;
   HEAP32[(($126)>>2)]=$128;
   label = 38; break;
  case 15: 
   var $130=$47;
   var $131=$45;
   $27=$131;
   var $132=$27;
   var $133=(($132)|0);
   var $134=HEAP32[(($133)>>2)];
   $26=$134;
   var $135=$26;
   var $136=(($135+12)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=(($135+16)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=(($137)|(0))==(($139)|(0));
   if ($140) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $142=$135;
   var $143=HEAP32[(($142)>>2)];
   var $144=(($143+36)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=FUNCTION_TABLE[$145]($135);
   $25=$146;
   label = 18; break;
  case 17: 
   var $148=(($135+12)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=HEAP8[($149)];
   $24=$150;
   var $151=$24;
   var $152=(($151)&(255));
   $25=$152;
   label = 18; break;
  case 18: 
   var $153=$25;
   var $154=(($153) & 255);
   $21=$130;
   $22=$154;
   $23=0;
   var $155=$21;
   var $156=$155;
   var $157=HEAP32[(($156)>>2)];
   var $158=(($157+36)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=$22;
   var $161=$23;
   var $162=FUNCTION_TABLE[$159]($155, $160, $161);
   var $163=(($162 << 24) >> 24);
   var $164=(($163)|(0))!=37;
   if ($164) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $166=$46;
   var $167=HEAP32[(($166)>>2)];
   var $168=$167 | 4;
   HEAP32[(($166)>>2)]=$168;
   label = 38; break;
  case 20: 
   var $170=$45;
   $20=$170;
   var $171=$20;
   var $172=(($171)|0);
   var $173=HEAP32[(($172)>>2)];
   $19=$173;
   var $174=$19;
   var $175=(($174+12)|0);
   var $176=HEAP32[(($175)>>2)];
   var $177=(($174+16)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=(($176)|(0))==(($178)|(0));
   if ($179) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $181=$174;
   var $182=HEAP32[(($181)>>2)];
   var $183=(($182+40)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=FUNCTION_TABLE[$184]($174);
   $18=$185;
   label = 23; break;
  case 22: 
   var $187=(($174+12)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=(($188+1)|0);
   HEAP32[(($187)>>2)]=$189;
   var $190=HEAP8[($188)];
   $17=$190;
   var $191=$17;
   var $192=(($191)&(255));
   $18=$192;
   label = 23; break;
  case 23: 
   var $193=$18;
   $15=$171;
   $16=$__e;
   var $194=$15;
   var $195=$16;
   $13=$194;
   $14=$195;
   var $196=$13;
   $12=$196;
   var $197=$12;
   var $198=(($197)|0);
   var $199=HEAP32[(($198)>>2)];
   var $200=(($199)|(0))!=0;
   if ($200) { label = 24; break; } else { label = 29; break; }
  case 24: 
   var $202=(($197)|0);
   var $203=HEAP32[(($202)>>2)];
   $11=$203;
   var $204=$11;
   var $205=(($204+12)|0);
   var $206=HEAP32[(($205)>>2)];
   var $207=(($204+16)|0);
   var $208=HEAP32[(($207)>>2)];
   var $209=(($206)|(0))==(($208)|(0));
   if ($209) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $211=$204;
   var $212=HEAP32[(($211)>>2)];
   var $213=(($212+36)|0);
   var $214=HEAP32[(($213)>>2)];
   var $215=FUNCTION_TABLE[$214]($204);
   $10=$215;
   label = 27; break;
  case 26: 
   var $217=(($204+12)|0);
   var $218=HEAP32[(($217)>>2)];
   var $219=HEAP8[($218)];
   $9=$219;
   var $220=$9;
   var $221=(($220)&(255));
   $10=$221;
   label = 27; break;
  case 27: 
   var $222=$10;
   $7=$222;
   $8=-1;
   var $223=$7;
   var $224=$8;
   var $225=(($223)|(0))==(($224)|(0));
   if ($225) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $227=(($197)|0);
   HEAP32[(($227)>>2)]=0;
   label = 29; break;
  case 29: 
   var $228=(($197)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230=(($229)|(0))==0;
   var $231=(($230)&(1));
   var $232=$14;
   $6=$232;
   var $233=$6;
   var $234=(($233)|0);
   var $235=HEAP32[(($234)>>2)];
   var $236=(($235)|(0))!=0;
   if ($236) { label = 30; break; } else { label = 35; break; }
  case 30: 
   var $238=(($233)|0);
   var $239=HEAP32[(($238)>>2)];
   $5=$239;
   var $240=$5;
   var $241=(($240+12)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=(($240+16)|0);
   var $244=HEAP32[(($243)>>2)];
   var $245=(($242)|(0))==(($244)|(0));
   if ($245) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $247=$240;
   var $248=HEAP32[(($247)>>2)];
   var $249=(($248+36)|0);
   var $250=HEAP32[(($249)>>2)];
   var $251=FUNCTION_TABLE[$250]($240);
   $4=$251;
   label = 33; break;
  case 32: 
   var $253=(($240+12)|0);
   var $254=HEAP32[(($253)>>2)];
   var $255=HEAP8[($254)];
   $3=$255;
   var $256=$3;
   var $257=(($256)&(255));
   $4=$257;
   label = 33; break;
  case 33: 
   var $258=$4;
   $1=$258;
   $2=-1;
   var $259=$1;
   var $260=$2;
   var $261=(($259)|(0))==(($260)|(0));
   if ($261) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $263=(($233)|0);
   HEAP32[(($263)>>2)]=0;
   label = 35; break;
  case 35: 
   var $264=(($233)|0);
   var $265=HEAP32[(($264)>>2)];
   var $266=(($265)|(0))==0;
   var $267=(($266)&(1));
   var $268=(($231)|(0))==(($267)|(0));
   if ($268) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $270=$46;
   var $271=HEAP32[(($270)>>2)];
   var $272=$271 | 2;
   HEAP32[(($270)>>2)]=$272;
   label = 37; break;
  case 37: 
   label = 38; break;
  case 38: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__120__time_get_c_storageIwEC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((12552)|0);
 return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 var label = 0;
 var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $__c;
   var $__r;
   $78=$__b;
   $79=$__err;
   $80=$__ct;
   $81=$__n;
   var $82=$78;
   $75=$82;
   $76=$__e;
   var $83=$75;
   var $84=$76;
   $73=$83;
   $74=$84;
   var $85=$73;
   $72=$85;
   var $86=$72;
   var $87=(($86)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88)|(0))!=0;
   if ($89) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $91=(($86)|0);
   var $92=HEAP32[(($91)>>2)];
   $71=$92;
   var $93=$71;
   var $94=(($93+12)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($93+16)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=(($95)|(0))==(($97)|(0));
   if ($98) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $100=$93;
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101+36)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=FUNCTION_TABLE[$103]($93);
   $70=$104;
   label = 5; break;
  case 4: 
   var $106=(($93+12)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=HEAP8[($107)];
   $69=$108;
   var $109=$69;
   var $110=(($109)&(255));
   $70=$110;
   label = 5; break;
  case 5: 
   var $111=$70;
   $67=$111;
   $68=-1;
   var $112=$67;
   var $113=$68;
   var $114=(($112)|(0))==(($113)|(0));
   if ($114) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $116=(($86)|0);
   HEAP32[(($116)>>2)]=0;
   label = 7; break;
  case 7: 
   var $117=(($86)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=(($118)|(0))==0;
   var $120=(($119)&(1));
   var $121=$74;
   $66=$121;
   var $122=$66;
   var $123=(($122)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=(($124)|(0))!=0;
   if ($125) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $127=(($122)|0);
   var $128=HEAP32[(($127)>>2)];
   $65=$128;
   var $129=$65;
   var $130=(($129+12)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=(($129+16)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($131)|(0))==(($133)|(0));
   if ($134) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $136=$129;
   var $137=HEAP32[(($136)>>2)];
   var $138=(($137+36)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=FUNCTION_TABLE[$139]($129);
   $64=$140;
   label = 11; break;
  case 10: 
   var $142=(($129+12)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=HEAP8[($143)];
   $63=$144;
   var $145=$63;
   var $146=(($145)&(255));
   $64=$146;
   label = 11; break;
  case 11: 
   var $147=$64;
   $61=$147;
   $62=-1;
   var $148=$61;
   var $149=$62;
   var $150=(($148)|(0))==(($149)|(0));
   if ($150) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $152=(($122)|0);
   HEAP32[(($152)>>2)]=0;
   label = 13; break;
  case 13: 
   var $153=(($122)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154)|(0))==0;
   var $156=(($155)&(1));
   var $157=(($120)|(0))==(($156)|(0));
   if ($157) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $159=$79;
   var $160=HEAP32[(($159)>>2)];
   var $161=$160 | 6;
   HEAP32[(($159)>>2)]=$161;
   $77=0;
   label = 70; break;
  case 15: 
   var $163=$78;
   $60=$163;
   var $164=$60;
   var $165=(($164)|0);
   var $166=HEAP32[(($165)>>2)];
   $59=$166;
   var $167=$59;
   var $168=(($167+12)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170=(($167+16)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=(($169)|(0))==(($171)|(0));
   if ($172) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $174=$167;
   var $175=HEAP32[(($174)>>2)];
   var $176=(($175+36)|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=FUNCTION_TABLE[$177]($167);
   $58=$178;
   label = 18; break;
  case 17: 
   var $180=(($167+12)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=HEAP8[($181)];
   $57=$182;
   var $183=$57;
   var $184=(($183)&(255));
   $58=$184;
   label = 18; break;
  case 18: 
   var $185=$58;
   var $186=(($185) & 255);
   $__c=$186;
   var $187=$80;
   var $188=$__c;
   $54=$187;
   $55=2048;
   $56=$188;
   var $189=$54;
   var $190=$56;
   var $191=(($190 << 24) >> 24);
   var $192=(($191)>>>(0)) <= 127;
   if ($192) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $194=$56;
   var $195=(($194 << 24) >> 24);
   var $196=(($189+8)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=(($197+($195<<1))|0);
   var $199=HEAP16[(($198)>>1)];
   var $200=(($199)&(65535));
   var $201=$55;
   var $202=(($201)&(65535));
   var $203=$200 & $202;
   var $205 = $203;label = 21; break;
  case 20: 
   var $205 = 0;label = 21; break;
  case 21: 
   var $205;
   var $206=(($205)|(0))!=0;
   if ($206) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $208=$79;
   var $209=HEAP32[(($208)>>2)];
   var $210=$209 | 4;
   HEAP32[(($208)>>2)]=$210;
   $77=0;
   label = 70; break;
  case 23: 
   var $212=$80;
   var $213=$__c;
   $51=$212;
   $52=$213;
   $53=0;
   var $214=$51;
   var $215=$214;
   var $216=HEAP32[(($215)>>2)];
   var $217=(($216+36)|0);
   var $218=HEAP32[(($217)>>2)];
   var $219=$52;
   var $220=$53;
   var $221=FUNCTION_TABLE[$218]($214, $219, $220);
   var $222=(($221 << 24) >> 24);
   var $223=((($222)-(48))|0);
   $__r=$223;
   var $224=$78;
   $50=$224;
   var $225=$50;
   var $226=(($225)|0);
   var $227=HEAP32[(($226)>>2)];
   $49=$227;
   var $228=$49;
   var $229=(($228+12)|0);
   var $230=HEAP32[(($229)>>2)];
   var $231=(($228+16)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=(($230)|(0))==(($232)|(0));
   if ($233) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $235=$228;
   var $236=HEAP32[(($235)>>2)];
   var $237=(($236+40)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239=FUNCTION_TABLE[$238]($228);
   $48=$239;
   label = 26; break;
  case 25: 
   var $241=(($228+12)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=(($242+1)|0);
   HEAP32[(($241)>>2)]=$243;
   var $244=HEAP8[($242)];
   $47=$244;
   var $245=$47;
   var $246=(($245)&(255));
   $48=$246;
   label = 26; break;
  case 26: 
   var $247=$48;
   var $248=$81;
   var $249=((($248)-(1))|0);
   $81=$249;
   label = 27; break;
  case 27: 
   var $251=$78;
   $45=$251;
   $46=$__e;
   var $252=$45;
   var $253=$46;
   $43=$252;
   $44=$253;
   var $254=$43;
   $42=$254;
   var $255=$42;
   var $256=(($255)|0);
   var $257=HEAP32[(($256)>>2)];
   var $258=(($257)|(0))!=0;
   if ($258) { label = 28; break; } else { label = 33; break; }
  case 28: 
   var $260=(($255)|0);
   var $261=HEAP32[(($260)>>2)];
   $41=$261;
   var $262=$41;
   var $263=(($262+12)|0);
   var $264=HEAP32[(($263)>>2)];
   var $265=(($262+16)|0);
   var $266=HEAP32[(($265)>>2)];
   var $267=(($264)|(0))==(($266)|(0));
   if ($267) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $269=$262;
   var $270=HEAP32[(($269)>>2)];
   var $271=(($270+36)|0);
   var $272=HEAP32[(($271)>>2)];
   var $273=FUNCTION_TABLE[$272]($262);
   $40=$273;
   label = 31; break;
  case 30: 
   var $275=(($262+12)|0);
   var $276=HEAP32[(($275)>>2)];
   var $277=HEAP8[($276)];
   $39=$277;
   var $278=$39;
   var $279=(($278)&(255));
   $40=$279;
   label = 31; break;
  case 31: 
   var $280=$40;
   $37=$280;
   $38=-1;
   var $281=$37;
   var $282=$38;
   var $283=(($281)|(0))==(($282)|(0));
   if ($283) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $285=(($255)|0);
   HEAP32[(($285)>>2)]=0;
   label = 33; break;
  case 33: 
   var $286=(($255)|0);
   var $287=HEAP32[(($286)>>2)];
   var $288=(($287)|(0))==0;
   var $289=(($288)&(1));
   var $290=$44;
   $36=$290;
   var $291=$36;
   var $292=(($291)|0);
   var $293=HEAP32[(($292)>>2)];
   var $294=(($293)|(0))!=0;
   if ($294) { label = 34; break; } else { label = 39; break; }
  case 34: 
   var $296=(($291)|0);
   var $297=HEAP32[(($296)>>2)];
   $35=$297;
   var $298=$35;
   var $299=(($298+12)|0);
   var $300=HEAP32[(($299)>>2)];
   var $301=(($298+16)|0);
   var $302=HEAP32[(($301)>>2)];
   var $303=(($300)|(0))==(($302)|(0));
   if ($303) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $305=$298;
   var $306=HEAP32[(($305)>>2)];
   var $307=(($306+36)|0);
   var $308=HEAP32[(($307)>>2)];
   var $309=FUNCTION_TABLE[$308]($298);
   $34=$309;
   label = 37; break;
  case 36: 
   var $311=(($298+12)|0);
   var $312=HEAP32[(($311)>>2)];
   var $313=HEAP8[($312)];
   $33=$313;
   var $314=$33;
   var $315=(($314)&(255));
   $34=$315;
   label = 37; break;
  case 37: 
   var $316=$34;
   $31=$316;
   $32=-1;
   var $317=$31;
   var $318=$32;
   var $319=(($317)|(0))==(($318)|(0));
   if ($319) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $321=(($291)|0);
   HEAP32[(($321)>>2)]=0;
   label = 39; break;
  case 39: 
   var $322=(($291)|0);
   var $323=HEAP32[(($322)>>2)];
   var $324=(($323)|(0))==0;
   var $325=(($324)&(1));
   var $326=(($289)|(0))==(($325)|(0));
   var $327=$326 ^ 1;
   if ($327) { label = 40; break; } else { var $332 = 0;label = 41; break; }
  case 40: 
   var $329=$81;
   var $330=(($329)|(0)) > 0;
   var $332 = $330;label = 41; break;
  case 41: 
   var $332;
   if ($332) { label = 42; break; } else { label = 55; break; }
  case 42: 
   var $334=$78;
   $30=$334;
   var $335=$30;
   var $336=(($335)|0);
   var $337=HEAP32[(($336)>>2)];
   $29=$337;
   var $338=$29;
   var $339=(($338+12)|0);
   var $340=HEAP32[(($339)>>2)];
   var $341=(($338+16)|0);
   var $342=HEAP32[(($341)>>2)];
   var $343=(($340)|(0))==(($342)|(0));
   if ($343) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $345=$338;
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346+36)|0);
   var $348=HEAP32[(($347)>>2)];
   var $349=FUNCTION_TABLE[$348]($338);
   $28=$349;
   label = 45; break;
  case 44: 
   var $351=(($338+12)|0);
   var $352=HEAP32[(($351)>>2)];
   var $353=HEAP8[($352)];
   $27=$353;
   var $354=$27;
   var $355=(($354)&(255));
   $28=$355;
   label = 45; break;
  case 45: 
   var $356=$28;
   var $357=(($356) & 255);
   $__c=$357;
   var $358=$80;
   var $359=$__c;
   $24=$358;
   $25=2048;
   $26=$359;
   var $360=$24;
   var $361=$26;
   var $362=(($361 << 24) >> 24);
   var $363=(($362)>>>(0)) <= 127;
   if ($363) { label = 46; break; } else { label = 47; break; }
  case 46: 
   var $365=$26;
   var $366=(($365 << 24) >> 24);
   var $367=(($360+8)|0);
   var $368=HEAP32[(($367)>>2)];
   var $369=(($368+($366<<1))|0);
   var $370=HEAP16[(($369)>>1)];
   var $371=(($370)&(65535));
   var $372=$25;
   var $373=(($372)&(65535));
   var $374=$371 & $373;
   var $376 = $374;label = 48; break;
  case 47: 
   var $376 = 0;label = 48; break;
  case 48: 
   var $376;
   var $377=(($376)|(0))!=0;
   if ($377) { label = 50; break; } else { label = 49; break; }
  case 49: 
   var $379=$__r;
   $77=$379;
   label = 70; break;
  case 50: 
   var $381=$__r;
   var $382=((($381)*(10))&-1);
   var $383=$80;
   var $384=$__c;
   $21=$383;
   $22=$384;
   $23=0;
   var $385=$21;
   var $386=$385;
   var $387=HEAP32[(($386)>>2)];
   var $388=(($387+36)|0);
   var $389=HEAP32[(($388)>>2)];
   var $390=$22;
   var $391=$23;
   var $392=FUNCTION_TABLE[$389]($385, $390, $391);
   var $393=(($392 << 24) >> 24);
   var $394=((($382)+($393))|0);
   var $395=((($394)-(48))|0);
   $__r=$395;
   label = 51; break;
  case 51: 
   var $397=$78;
   $20=$397;
   var $398=$20;
   var $399=(($398)|0);
   var $400=HEAP32[(($399)>>2)];
   $19=$400;
   var $401=$19;
   var $402=(($401+12)|0);
   var $403=HEAP32[(($402)>>2)];
   var $404=(($401+16)|0);
   var $405=HEAP32[(($404)>>2)];
   var $406=(($403)|(0))==(($405)|(0));
   if ($406) { label = 52; break; } else { label = 53; break; }
  case 52: 
   var $408=$401;
   var $409=HEAP32[(($408)>>2)];
   var $410=(($409+40)|0);
   var $411=HEAP32[(($410)>>2)];
   var $412=FUNCTION_TABLE[$411]($401);
   $18=$412;
   label = 54; break;
  case 53: 
   var $414=(($401+12)|0);
   var $415=HEAP32[(($414)>>2)];
   var $416=(($415+1)|0);
   HEAP32[(($414)>>2)]=$416;
   var $417=HEAP8[($415)];
   $17=$417;
   var $418=$17;
   var $419=(($418)&(255));
   $18=$419;
   label = 54; break;
  case 54: 
   var $420=$18;
   var $421=$81;
   var $422=((($421)-(1))|0);
   $81=$422;
   label = 27; break;
  case 55: 
   var $424=$78;
   $15=$424;
   $16=$__e;
   var $425=$15;
   var $426=$16;
   $13=$425;
   $14=$426;
   var $427=$13;
   $12=$427;
   var $428=$12;
   var $429=(($428)|0);
   var $430=HEAP32[(($429)>>2)];
   var $431=(($430)|(0))!=0;
   if ($431) { label = 56; break; } else { label = 61; break; }
  case 56: 
   var $433=(($428)|0);
   var $434=HEAP32[(($433)>>2)];
   $11=$434;
   var $435=$11;
   var $436=(($435+12)|0);
   var $437=HEAP32[(($436)>>2)];
   var $438=(($435+16)|0);
   var $439=HEAP32[(($438)>>2)];
   var $440=(($437)|(0))==(($439)|(0));
   if ($440) { label = 57; break; } else { label = 58; break; }
  case 57: 
   var $442=$435;
   var $443=HEAP32[(($442)>>2)];
   var $444=(($443+36)|0);
   var $445=HEAP32[(($444)>>2)];
   var $446=FUNCTION_TABLE[$445]($435);
   $10=$446;
   label = 59; break;
  case 58: 
   var $448=(($435+12)|0);
   var $449=HEAP32[(($448)>>2)];
   var $450=HEAP8[($449)];
   $9=$450;
   var $451=$9;
   var $452=(($451)&(255));
   $10=$452;
   label = 59; break;
  case 59: 
   var $453=$10;
   $7=$453;
   $8=-1;
   var $454=$7;
   var $455=$8;
   var $456=(($454)|(0))==(($455)|(0));
   if ($456) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $458=(($428)|0);
   HEAP32[(($458)>>2)]=0;
   label = 61; break;
  case 61: 
   var $459=(($428)|0);
   var $460=HEAP32[(($459)>>2)];
   var $461=(($460)|(0))==0;
   var $462=(($461)&(1));
   var $463=$14;
   $6=$463;
   var $464=$6;
   var $465=(($464)|0);
   var $466=HEAP32[(($465)>>2)];
   var $467=(($466)|(0))!=0;
   if ($467) { label = 62; break; } else { label = 67; break; }
  case 62: 
   var $469=(($464)|0);
   var $470=HEAP32[(($469)>>2)];
   $5=$470;
   var $471=$5;
   var $472=(($471+12)|0);
   var $473=HEAP32[(($472)>>2)];
   var $474=(($471+16)|0);
   var $475=HEAP32[(($474)>>2)];
   var $476=(($473)|(0))==(($475)|(0));
   if ($476) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $478=$471;
   var $479=HEAP32[(($478)>>2)];
   var $480=(($479+36)|0);
   var $481=HEAP32[(($480)>>2)];
   var $482=FUNCTION_TABLE[$481]($471);
   $4=$482;
   label = 65; break;
  case 64: 
   var $484=(($471+12)|0);
   var $485=HEAP32[(($484)>>2)];
   var $486=HEAP8[($485)];
   $3=$486;
   var $487=$3;
   var $488=(($487)&(255));
   $4=$488;
   label = 65; break;
  case 65: 
   var $489=$4;
   $1=$489;
   $2=-1;
   var $490=$1;
   var $491=$2;
   var $492=(($490)|(0))==(($491)|(0));
   if ($492) { label = 66; break; } else { label = 67; break; }
  case 66: 
   var $494=(($464)|0);
   HEAP32[(($494)>>2)]=0;
   label = 67; break;
  case 67: 
   var $495=(($464)|0);
   var $496=HEAP32[(($495)>>2)];
   var $497=(($496)|(0))==0;
   var $498=(($497)&(1));
   var $499=(($462)|(0))==(($498)|(0));
   if ($499) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $501=$79;
   var $502=HEAP32[(($501)>>2)];
   var $503=$502 | 2;
   HEAP32[(($501)>>2)]=$503;
   label = 69; break;
  case 69: 
   var $505=$__r;
   $77=$505;
   label = 70; break;
  case 70: 
   var $507=$77;
   STACKTOP = __stackBase__;
   return $507;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $__ct;
   var $94=__stackBase__;
   var $95;
   var $96;
   var $__cmd;
   var $__opt;
   var $97=(__stackBase__)+(8);
   var $98=(__stackBase__)+(16);
   var $99=(__stackBase__)+(24);
   $88=$this;
   $89=$__iob;
   $90=$__err;
   $91=$__tm;
   $92=$__fmtb;
   $93=$__fmte;
   var $100=$88;
   var $101=$89;
   __ZNKSt3__18ios_base6getlocEv($94, $101);
   $87=$94;
   var $102=$87;
   var $103 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($102, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 21; break; }
  case 2: 
   var $104=$103;
   label = 3; break;
  case 3: 
   __ZNSt3__16localeD2Ev($94);
   $__ct=$104;
   var $106=$90;
   HEAP32[(($106)>>2)]=0;
   label = 4; break;
  case 4: 
   var $108=$92;
   var $109=$93;
   var $110=(($108)|(0))!=(($109)|(0));
   if ($110) { label = 5; break; } else { var $116 = 0;label = 6; break; }
  case 5: 
   var $112=$90;
   var $113=HEAP32[(($112)>>2)];
   var $114=(($113)|(0))==0;
   var $116 = $114;label = 6; break;
  case 6: 
   var $116;
   if ($116) { label = 7; break; } else { label = 75; break; }
  case 7: 
   $85=$__b;
   $86=$__e;
   var $118=$85;
   var $119=$86;
   $83=$118;
   $84=$119;
   var $120=$83;
   $82=$120;
   var $121=$82;
   var $122=(($121)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=(($123)|(0))!=0;
   if ($124) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $126=(($121)|0);
   var $127=HEAP32[(($126)>>2)];
   $81=$127;
   var $128=$81;
   var $129=(($128+12)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=(($128+16)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(($130)|(0))==(($132)|(0));
   if ($133) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $135=$128;
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136+36)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=FUNCTION_TABLE[$138]($128);
   $80=$139;
   label = 11; break;
  case 10: 
   var $141=(($128+12)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=HEAP32[(($142)>>2)];
   $79=$143;
   var $144=$79;
   $80=$144;
   label = 11; break;
  case 11: 
   var $145=$80;
   $77=$145;
   $78=-1;
   var $146=$77;
   var $147=$78;
   var $148=(($146)|(0))==(($147)|(0));
   if ($148) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $150=(($121)|0);
   HEAP32[(($150)>>2)]=0;
   label = 13; break;
  case 13: 
   var $151=(($121)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=(($152)|(0))==0;
   var $154=(($153)&(1));
   var $155=$84;
   $76=$155;
   var $156=$76;
   var $157=(($156)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=(($158)|(0))!=0;
   if ($159) { label = 14; break; } else { label = 19; break; }
  case 14: 
   var $161=(($156)|0);
   var $162=HEAP32[(($161)>>2)];
   $75=$162;
   var $163=$75;
   var $164=(($163+12)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166=(($163+16)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=(($165)|(0))==(($167)|(0));
   if ($168) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $170=$163;
   var $171=HEAP32[(($170)>>2)];
   var $172=(($171+36)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=FUNCTION_TABLE[$173]($163);
   $74=$174;
   label = 17; break;
  case 16: 
   var $176=(($163+12)|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=HEAP32[(($177)>>2)];
   $73=$178;
   var $179=$73;
   $74=$179;
   label = 17; break;
  case 17: 
   var $180=$74;
   $71=$180;
   $72=-1;
   var $181=$71;
   var $182=$72;
   var $183=(($181)|(0))==(($182)|(0));
   if ($183) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $185=(($156)|0);
   HEAP32[(($185)>>2)]=0;
   label = 19; break;
  case 19: 
   var $186=(($156)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($187)|(0))==0;
   var $189=(($188)&(1));
   var $190=(($154)|(0))==(($189)|(0));
   if ($190) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $192=$90;
   HEAP32[(($192)>>2)]=4;
   label = 75; break;
  case 21: 
   var $194$0 = ___cxa_find_matching_catch(-1, -1); $194$1 = tempRet0;
   var $195=$194$0;
   $95=$195;
   var $196=$194$1;
   $96=$196;
   __ZNSt3__16localeD2Ev($94);
   label = 90; break;
  case 22: 
   var $198=$__ct;
   var $199=$92;
   var $200=HEAP32[(($199)>>2)];
   $68=$198;
   $69=$200;
   $70=0;
   var $201=$68;
   var $202=$201;
   var $203=HEAP32[(($202)>>2)];
   var $204=(($203+52)|0);
   var $205=HEAP32[(($204)>>2)];
   var $206=$69;
   var $207=$70;
   var $208=FUNCTION_TABLE[$205]($201, $206, $207);
   var $209=(($208 << 24) >> 24);
   var $210=(($209)|(0))==37;
   if ($210) { label = 23; break; } else { label = 31; break; }
  case 23: 
   var $212=$92;
   var $213=(($212+4)|0);
   $92=$213;
   var $214=$93;
   var $215=(($213)|(0))==(($214)|(0));
   if ($215) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $217=$90;
   HEAP32[(($217)>>2)]=4;
   label = 75; break;
  case 25: 
   var $219=$__ct;
   var $220=$92;
   var $221=HEAP32[(($220)>>2)];
   $65=$219;
   $66=$221;
   $67=0;
   var $222=$65;
   var $223=$222;
   var $224=HEAP32[(($223)>>2)];
   var $225=(($224+52)|0);
   var $226=HEAP32[(($225)>>2)];
   var $227=$66;
   var $228=$67;
   var $229=FUNCTION_TABLE[$226]($222, $227, $228);
   $__cmd=$229;
   $__opt=0;
   var $230=$__cmd;
   var $231=(($230 << 24) >> 24);
   var $232=(($231)|(0))==69;
   if ($232) { label = 27; break; } else { label = 26; break; }
  case 26: 
   var $234=$__cmd;
   var $235=(($234 << 24) >> 24);
   var $236=(($235)|(0))==48;
   if ($236) { label = 27; break; } else { label = 30; break; }
  case 27: 
   var $238=$92;
   var $239=(($238+4)|0);
   $92=$239;
   var $240=$93;
   var $241=(($239)|(0))==(($240)|(0));
   if ($241) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $243=$90;
   HEAP32[(($243)>>2)]=4;
   label = 75; break;
  case 29: 
   var $245=$__cmd;
   $__opt=$245;
   var $246=$__ct;
   var $247=$92;
   var $248=HEAP32[(($247)>>2)];
   $62=$246;
   $63=$248;
   $64=0;
   var $249=$62;
   var $250=$249;
   var $251=HEAP32[(($250)>>2)];
   var $252=(($251+52)|0);
   var $253=HEAP32[(($252)>>2)];
   var $254=$63;
   var $255=$64;
   var $256=FUNCTION_TABLE[$253]($249, $254, $255);
   $__cmd=$256;
   label = 30; break;
  case 30: 
   var $258=$100;
   var $259=HEAP32[(($258)>>2)];
   var $260=(($259+36)|0);
   var $261=HEAP32[(($260)>>2)];
   var $262=$98;
   var $263=$__b;
   assert(4 % 1 === 0);HEAP32[(($262)>>2)]=HEAP32[(($263)>>2)];
   var $264=$99;
   var $265=$__e;
   assert(4 % 1 === 0);HEAP32[(($264)>>2)]=HEAP32[(($265)>>2)];
   var $266=$89;
   var $267=$90;
   var $268=$91;
   var $269=$__cmd;
   var $270=$__opt;
   FUNCTION_TABLE[$261]($97, $100, $98, $99, $266, $267, $268, $269, $270);
   var $271=$__b;
   var $272=$97;
   assert(4 % 1 === 0);HEAP32[(($271)>>2)]=HEAP32[(($272)>>2)];
   var $273=$92;
   var $274=(($273+4)|0);
   $92=$274;
   label = 74; break;
  case 31: 
   var $276=$__ct;
   var $277=$92;
   var $278=HEAP32[(($277)>>2)];
   $59=$276;
   $60=8192;
   $61=$278;
   var $279=$59;
   var $280=$279;
   var $281=HEAP32[(($280)>>2)];
   var $282=(($281+12)|0);
   var $283=HEAP32[(($282)>>2)];
   var $284=$60;
   var $285=$61;
   var $286=FUNCTION_TABLE[$283]($279, $284, $285);
   if ($286) { label = 32; break; } else { label = 63; break; }
  case 32: 
   var $288=$92;
   var $289=(($288+4)|0);
   $92=$289;
   label = 33; break;
  case 33: 
   var $291=$92;
   var $292=$93;
   var $293=(($291)|(0))!=(($292)|(0));
   if ($293) { label = 34; break; } else { var $307 = 0;label = 35; break; }
  case 34: 
   var $295=$__ct;
   var $296=$92;
   var $297=HEAP32[(($296)>>2)];
   $56=$295;
   $57=8192;
   $58=$297;
   var $298=$56;
   var $299=$298;
   var $300=HEAP32[(($299)>>2)];
   var $301=(($300+12)|0);
   var $302=HEAP32[(($301)>>2)];
   var $303=$57;
   var $304=$58;
   var $305=FUNCTION_TABLE[$302]($298, $303, $304);
   var $307 = $305;label = 35; break;
  case 35: 
   var $307;
   if ($307) { label = 36; break; } else { label = 38; break; }
  case 36: 
   label = 37; break;
  case 37: 
   var $310=$92;
   var $311=(($310+4)|0);
   $92=$311;
   label = 33; break;
  case 38: 
   label = 39; break;
  case 39: 
   $54=$__b;
   $55=$__e;
   var $314=$54;
   var $315=$55;
   $52=$314;
   $53=$315;
   var $316=$52;
   $51=$316;
   var $317=$51;
   var $318=(($317)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=(($319)|(0))!=0;
   if ($320) { label = 40; break; } else { label = 45; break; }
  case 40: 
   var $322=(($317)|0);
   var $323=HEAP32[(($322)>>2)];
   $50=$323;
   var $324=$50;
   var $325=(($324+12)|0);
   var $326=HEAP32[(($325)>>2)];
   var $327=(($324+16)|0);
   var $328=HEAP32[(($327)>>2)];
   var $329=(($326)|(0))==(($328)|(0));
   if ($329) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $331=$324;
   var $332=HEAP32[(($331)>>2)];
   var $333=(($332+36)|0);
   var $334=HEAP32[(($333)>>2)];
   var $335=FUNCTION_TABLE[$334]($324);
   $49=$335;
   label = 43; break;
  case 42: 
   var $337=(($324+12)|0);
   var $338=HEAP32[(($337)>>2)];
   var $339=HEAP32[(($338)>>2)];
   $48=$339;
   var $340=$48;
   $49=$340;
   label = 43; break;
  case 43: 
   var $341=$49;
   $46=$341;
   $47=-1;
   var $342=$46;
   var $343=$47;
   var $344=(($342)|(0))==(($343)|(0));
   if ($344) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $346=(($317)|0);
   HEAP32[(($346)>>2)]=0;
   label = 45; break;
  case 45: 
   var $347=(($317)|0);
   var $348=HEAP32[(($347)>>2)];
   var $349=(($348)|(0))==0;
   var $350=(($349)&(1));
   var $351=$53;
   $45=$351;
   var $352=$45;
   var $353=(($352)|0);
   var $354=HEAP32[(($353)>>2)];
   var $355=(($354)|(0))!=0;
   if ($355) { label = 46; break; } else { label = 51; break; }
  case 46: 
   var $357=(($352)|0);
   var $358=HEAP32[(($357)>>2)];
   $44=$358;
   var $359=$44;
   var $360=(($359+12)|0);
   var $361=HEAP32[(($360)>>2)];
   var $362=(($359+16)|0);
   var $363=HEAP32[(($362)>>2)];
   var $364=(($361)|(0))==(($363)|(0));
   if ($364) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $366=$359;
   var $367=HEAP32[(($366)>>2)];
   var $368=(($367+36)|0);
   var $369=HEAP32[(($368)>>2)];
   var $370=FUNCTION_TABLE[$369]($359);
   $43=$370;
   label = 49; break;
  case 48: 
   var $372=(($359+12)|0);
   var $373=HEAP32[(($372)>>2)];
   var $374=HEAP32[(($373)>>2)];
   $42=$374;
   var $375=$42;
   $43=$375;
   label = 49; break;
  case 49: 
   var $376=$43;
   $40=$376;
   $41=-1;
   var $377=$40;
   var $378=$41;
   var $379=(($377)|(0))==(($378)|(0));
   if ($379) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $381=(($352)|0);
   HEAP32[(($381)>>2)]=0;
   label = 51; break;
  case 51: 
   var $382=(($352)|0);
   var $383=HEAP32[(($382)>>2)];
   var $384=(($383)|(0))==0;
   var $385=(($384)&(1));
   var $386=(($350)|(0))==(($385)|(0));
   var $387=$386 ^ 1;
   if ($387) { label = 52; break; } else { var $420 = 0;label = 56; break; }
  case 52: 
   var $389=$__ct;
   $39=$__b;
   var $390=$39;
   var $391=(($390)|0);
   var $392=HEAP32[(($391)>>2)];
   $38=$392;
   var $393=$38;
   var $394=(($393+12)|0);
   var $395=HEAP32[(($394)>>2)];
   var $396=(($393+16)|0);
   var $397=HEAP32[(($396)>>2)];
   var $398=(($395)|(0))==(($397)|(0));
   if ($398) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $400=$393;
   var $401=HEAP32[(($400)>>2)];
   var $402=(($401+36)|0);
   var $403=HEAP32[(($402)>>2)];
   var $404=FUNCTION_TABLE[$403]($393);
   $37=$404;
   label = 55; break;
  case 54: 
   var $406=(($393+12)|0);
   var $407=HEAP32[(($406)>>2)];
   var $408=HEAP32[(($407)>>2)];
   $36=$408;
   var $409=$36;
   $37=$409;
   label = 55; break;
  case 55: 
   var $410=$37;
   $33=$389;
   $34=8192;
   $35=$410;
   var $411=$33;
   var $412=$411;
   var $413=HEAP32[(($412)>>2)];
   var $414=(($413+12)|0);
   var $415=HEAP32[(($414)>>2)];
   var $416=$34;
   var $417=$35;
   var $418=FUNCTION_TABLE[$415]($411, $416, $417);
   var $420 = $418;label = 56; break;
  case 56: 
   var $420;
   if ($420) { label = 57; break; } else { label = 62; break; }
  case 57: 
   label = 58; break;
  case 58: 
   $32=$__b;
   var $423=$32;
   var $424=(($423)|0);
   var $425=HEAP32[(($424)>>2)];
   $31=$425;
   var $426=$31;
   var $427=(($426+12)|0);
   var $428=HEAP32[(($427)>>2)];
   var $429=(($426+16)|0);
   var $430=HEAP32[(($429)>>2)];
   var $431=(($428)|(0))==(($430)|(0));
   if ($431) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $433=$426;
   var $434=HEAP32[(($433)>>2)];
   var $435=(($434+40)|0);
   var $436=HEAP32[(($435)>>2)];
   var $437=FUNCTION_TABLE[$436]($426);
   $30=$437;
   label = 61; break;
  case 60: 
   var $439=(($426+12)|0);
   var $440=HEAP32[(($439)>>2)];
   var $441=(($440+4)|0);
   HEAP32[(($439)>>2)]=$441;
   var $442=HEAP32[(($440)>>2)];
   $29=$442;
   var $443=$29;
   $30=$443;
   label = 61; break;
  case 61: 
   var $444=$30;
   label = 39; break;
  case 62: 
   label = 73; break;
  case 63: 
   var $447=$__ct;
   $28=$__b;
   var $448=$28;
   var $449=(($448)|0);
   var $450=HEAP32[(($449)>>2)];
   $27=$450;
   var $451=$27;
   var $452=(($451+12)|0);
   var $453=HEAP32[(($452)>>2)];
   var $454=(($451+16)|0);
   var $455=HEAP32[(($454)>>2)];
   var $456=(($453)|(0))==(($455)|(0));
   if ($456) { label = 64; break; } else { label = 65; break; }
  case 64: 
   var $458=$451;
   var $459=HEAP32[(($458)>>2)];
   var $460=(($459+36)|0);
   var $461=HEAP32[(($460)>>2)];
   var $462=FUNCTION_TABLE[$461]($451);
   $26=$462;
   label = 66; break;
  case 65: 
   var $464=(($451+12)|0);
   var $465=HEAP32[(($464)>>2)];
   var $466=HEAP32[(($465)>>2)];
   $25=$466;
   var $467=$25;
   $26=$467;
   label = 66; break;
  case 66: 
   var $468=$26;
   $23=$447;
   $24=$468;
   var $469=$23;
   var $470=$469;
   var $471=HEAP32[(($470)>>2)];
   var $472=(($471+28)|0);
   var $473=HEAP32[(($472)>>2)];
   var $474=$24;
   var $475=FUNCTION_TABLE[$473]($469, $474);
   var $476=$__ct;
   var $477=$92;
   var $478=HEAP32[(($477)>>2)];
   $21=$476;
   $22=$478;
   var $479=$21;
   var $480=$479;
   var $481=HEAP32[(($480)>>2)];
   var $482=(($481+28)|0);
   var $483=HEAP32[(($482)>>2)];
   var $484=$22;
   var $485=FUNCTION_TABLE[$483]($479, $484);
   var $486=(($475)|(0))==(($485)|(0));
   if ($486) { label = 67; break; } else { label = 71; break; }
  case 67: 
   $20=$__b;
   var $488=$20;
   var $489=(($488)|0);
   var $490=HEAP32[(($489)>>2)];
   $19=$490;
   var $491=$19;
   var $492=(($491+12)|0);
   var $493=HEAP32[(($492)>>2)];
   var $494=(($491+16)|0);
   var $495=HEAP32[(($494)>>2)];
   var $496=(($493)|(0))==(($495)|(0));
   if ($496) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $498=$491;
   var $499=HEAP32[(($498)>>2)];
   var $500=(($499+40)|0);
   var $501=HEAP32[(($500)>>2)];
   var $502=FUNCTION_TABLE[$501]($491);
   $18=$502;
   label = 70; break;
  case 69: 
   var $504=(($491+12)|0);
   var $505=HEAP32[(($504)>>2)];
   var $506=(($505+4)|0);
   HEAP32[(($504)>>2)]=$506;
   var $507=HEAP32[(($505)>>2)];
   $17=$507;
   var $508=$17;
   $18=$508;
   label = 70; break;
  case 70: 
   var $509=$18;
   var $510=$92;
   var $511=(($510+4)|0);
   $92=$511;
   label = 72; break;
  case 71: 
   var $513=$90;
   HEAP32[(($513)>>2)]=4;
   label = 72; break;
  case 72: 
   label = 73; break;
  case 73: 
   label = 74; break;
  case 74: 
   label = 4; break;
  case 75: 
   $15=$__b;
   $16=$__e;
   var $518=$15;
   var $519=$16;
   $13=$518;
   $14=$519;
   var $520=$13;
   $12=$520;
   var $521=$12;
   var $522=(($521)|0);
   var $523=HEAP32[(($522)>>2)];
   var $524=(($523)|(0))!=0;
   if ($524) { label = 76; break; } else { label = 81; break; }
  case 76: 
   var $526=(($521)|0);
   var $527=HEAP32[(($526)>>2)];
   $11=$527;
   var $528=$11;
   var $529=(($528+12)|0);
   var $530=HEAP32[(($529)>>2)];
   var $531=(($528+16)|0);
   var $532=HEAP32[(($531)>>2)];
   var $533=(($530)|(0))==(($532)|(0));
   if ($533) { label = 77; break; } else { label = 78; break; }
  case 77: 
   var $535=$528;
   var $536=HEAP32[(($535)>>2)];
   var $537=(($536+36)|0);
   var $538=HEAP32[(($537)>>2)];
   var $539=FUNCTION_TABLE[$538]($528);
   $10=$539;
   label = 79; break;
  case 78: 
   var $541=(($528+12)|0);
   var $542=HEAP32[(($541)>>2)];
   var $543=HEAP32[(($542)>>2)];
   $9=$543;
   var $544=$9;
   $10=$544;
   label = 79; break;
  case 79: 
   var $545=$10;
   $7=$545;
   $8=-1;
   var $546=$7;
   var $547=$8;
   var $548=(($546)|(0))==(($547)|(0));
   if ($548) { label = 80; break; } else { label = 81; break; }
  case 80: 
   var $550=(($521)|0);
   HEAP32[(($550)>>2)]=0;
   label = 81; break;
  case 81: 
   var $551=(($521)|0);
   var $552=HEAP32[(($551)>>2)];
   var $553=(($552)|(0))==0;
   var $554=(($553)&(1));
   var $555=$14;
   $6=$555;
   var $556=$6;
   var $557=(($556)|0);
   var $558=HEAP32[(($557)>>2)];
   var $559=(($558)|(0))!=0;
   if ($559) { label = 82; break; } else { label = 87; break; }
  case 82: 
   var $561=(($556)|0);
   var $562=HEAP32[(($561)>>2)];
   $5=$562;
   var $563=$5;
   var $564=(($563+12)|0);
   var $565=HEAP32[(($564)>>2)];
   var $566=(($563+16)|0);
   var $567=HEAP32[(($566)>>2)];
   var $568=(($565)|(0))==(($567)|(0));
   if ($568) { label = 83; break; } else { label = 84; break; }
  case 83: 
   var $570=$563;
   var $571=HEAP32[(($570)>>2)];
   var $572=(($571+36)|0);
   var $573=HEAP32[(($572)>>2)];
   var $574=FUNCTION_TABLE[$573]($563);
   $4=$574;
   label = 85; break;
  case 84: 
   var $576=(($563+12)|0);
   var $577=HEAP32[(($576)>>2)];
   var $578=HEAP32[(($577)>>2)];
   $3=$578;
   var $579=$3;
   $4=$579;
   label = 85; break;
  case 85: 
   var $580=$4;
   $1=$580;
   $2=-1;
   var $581=$1;
   var $582=$2;
   var $583=(($581)|(0))==(($582)|(0));
   if ($583) { label = 86; break; } else { label = 87; break; }
  case 86: 
   var $585=(($556)|0);
   HEAP32[(($585)>>2)]=0;
   label = 87; break;
  case 87: 
   var $586=(($556)|0);
   var $587=HEAP32[(($586)>>2)];
   var $588=(($587)|(0))==0;
   var $589=(($588)&(1));
   var $590=(($554)|(0))==(($589)|(0));
   if ($590) { label = 88; break; } else { label = 89; break; }
  case 88: 
   var $592=$90;
   var $593=HEAP32[(($592)>>2)];
   var $594=$593 | 2;
   HEAP32[(($592)>>2)]=$594;
   label = 89; break;
  case 89: 
   var $596=$agg_result;
   var $597=$__b;
   assert(4 % 1 === 0);HEAP32[(($596)>>2)]=HEAP32[(($597)>>2)];
   STACKTOP = __stackBase__;
   return;
  case 90: 
   var $599=$95;
   var $600=$96;
   var $601$0=$599;
   var $601$1=0;
   var $602$0=$601$0;
   var $602$1=$600;
   ___resumeException($602$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=__stackBase__;
 var $6=(__stackBase__)+(8);
 $1=$this;
 $2=$__iob;
 $3=$__err;
 $4=$__tm;
 var $7=$1;
 var $8=$5;
 var $9=$__b;
 assert(4 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];
 var $10=$6;
 var $11=$__e;
 assert(4 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];
 var $12=$2;
 var $13=$3;
 var $14=$4;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result, $7, $5, $6, $12, $13, $14, ((10432)|0), ((10464)|0));
 STACKTOP = __stackBase__;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $__fmt;
   var $37=__stackBase__;
   var $38=(__stackBase__)+(8);
   $33=$this;
   $34=$__iob;
   $35=$__err;
   $36=$__tm;
   var $39=$33;
   var $40=$39;
   var $41=(($40+8)|0);
   var $42=$41;
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44+20)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=FUNCTION_TABLE[$46]($42);
   $__fmt=$47;
   var $48=$37;
   var $49=$__b;
   assert(4 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];
   var $50=$38;
   var $51=$__e;
   assert(4 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];
   var $52=$34;
   var $53=$35;
   var $54=$36;
   var $55=$__fmt;
   $32=$55;
   var $56=$32;
   $31=$56;
   var $57=$31;
   $30=$57;
   var $58=$30;
   var $59=(($58)|0);
   $29=$59;
   var $60=$29;
   var $61=$60;
   $28=$61;
   var $62=$28;
   var $63=(($62)|0);
   var $64=(($63)|0);
   var $65=$64;
   var $66=(($65)|0);
   var $67=$66;
   var $68=HEAP8[($67)];
   var $69=(($68)&(255));
   var $70=$69 & 1;
   var $71=(($70)|(0))!=0;
   if ($71) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $24=$57;
   var $73=$24;
   var $74=(($73)|0);
   $23=$74;
   var $75=$23;
   var $76=$75;
   $22=$76;
   var $77=$22;
   var $78=(($77)|0);
   var $79=(($78)|0);
   var $80=$79;
   var $81=(($80+8)|0);
   var $82=HEAP32[(($81)>>2)];
   var $94 = $82;label = 4; break;
  case 3: 
   $27=$57;
   var $84=$27;
   var $85=(($84)|0);
   $26=$85;
   var $86=$26;
   var $87=$86;
   $25=$87;
   var $88=$25;
   var $89=(($88)|0);
   var $90=(($89)|0);
   var $91=$90;
   var $92=(($91+4)|0);
   var $93=(($92)|0);
   var $94 = $93;label = 4; break;
  case 4: 
   var $94;
   var $95=$__fmt;
   $21=$95;
   var $96=$21;
   $20=$96;
   var $97=$20;
   $19=$97;
   var $98=$19;
   var $99=(($98)|0);
   $18=$99;
   var $100=$18;
   var $101=$100;
   $17=$101;
   var $102=$17;
   var $103=(($102)|0);
   var $104=(($103)|0);
   var $105=$104;
   var $106=(($105)|0);
   var $107=$106;
   var $108=HEAP8[($107)];
   var $109=(($108)&(255));
   var $110=$109 & 1;
   var $111=(($110)|(0))!=0;
   if ($111) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $13=$97;
   var $113=$13;
   var $114=(($113)|0);
   $12=$114;
   var $115=$12;
   var $116=$115;
   $11=$116;
   var $117=$11;
   var $118=(($117)|0);
   var $119=(($118)|0);
   var $120=$119;
   var $121=(($120+8)|0);
   var $122=HEAP32[(($121)>>2)];
   var $134 = $122;label = 7; break;
  case 6: 
   $16=$97;
   var $124=$16;
   var $125=(($124)|0);
   $15=$125;
   var $126=$15;
   var $127=$126;
   $14=$127;
   var $128=$14;
   var $129=(($128)|0);
   var $130=(($129)|0);
   var $131=$130;
   var $132=(($131+4)|0);
   var $133=(($132)|0);
   var $134 = $133;label = 7; break;
  case 7: 
   var $134;
   var $135=$__fmt;
   $10=$135;
   var $136=$10;
   $9=$136;
   var $137=$9;
   var $138=(($137)|0);
   $8=$138;
   var $139=$8;
   var $140=$139;
   $7=$140;
   var $141=$7;
   var $142=(($141)|0);
   var $143=(($142)|0);
   var $144=$143;
   var $145=(($144)|0);
   var $146=$145;
   var $147=HEAP8[($146)];
   var $148=(($147)&(255));
   var $149=$148 & 1;
   var $150=(($149)|(0))!=0;
   if ($150) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $3=$136;
   var $152=$3;
   var $153=(($152)|0);
   $2=$153;
   var $154=$2;
   var $155=$154;
   $1=$155;
   var $156=$1;
   var $157=(($156)|0);
   var $158=(($157)|0);
   var $159=$158;
   var $160=(($159+4)|0);
   var $161=HEAP32[(($160)>>2)];
   var $176 = $161;label = 10; break;
  case 9: 
   $6=$136;
   var $163=$6;
   var $164=(($163)|0);
   $5=$164;
   var $165=$5;
   var $166=$165;
   $4=$166;
   var $167=$4;
   var $168=(($167)|0);
   var $169=(($168)|0);
   var $170=$169;
   var $171=(($170)|0);
   var $172=$171;
   var $173=HEAP8[($172)];
   var $174=(($173)&(255));
   var $175=$174 >> 1;
   var $176 = $175;label = 10; break;
  case 10: 
   var $176;
   var $177=(($134+($176<<2))|0);
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result, $39, $37, $38, $52, $53, $54, $94, $177);
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__ct;
   var $6=__stackBase__;
   var $7;
   var $8;
   var $9=(__stackBase__)+(8);
   $2=$this;
   $3=$__iob;
   $4=$__err;
   $5=$__tm;
   var $10=$2;
   var $11=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $11);
   $1=$6;
   var $12=$1;
   var $13 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($12, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $14=$13;
   label = 3; break;
  case 3: 
   __ZNSt3__16localeD2Ev($6);
   $__ct=$14;
   var $16=$5;
   var $17=(($16+24)|0);
   var $18=$9;
   var $19=$__e;
   assert(4 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];
   var $20=$4;
   var $21=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($10, $17, $__b, $9, $20, $21);
   var $22=$agg_result;
   var $23=$__b;
   assert(4 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];
   STACKTOP = __stackBase__;
   return;
  case 4: 
   var $25$0 = ___cxa_find_matching_catch(-1, -1); $25$1 = tempRet0;
   var $26=$25$0;
   $7=$26;
   var $27=$25$1;
   $8=$27;
   __ZNSt3__16localeD2Ev($6);
   label = 5; break;
  case 5: 
   var $29=$7;
   var $30=$8;
   var $31$0=$29;
   var $31$1=0;
   var $32$0=$31$0;
   var $32$1=$30;
   ___resumeException($32$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__wk;
   var $__i;
   var $6=__stackBase__;
   $1=$this;
   $2=$__w;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$7;
   var $9=(($8+8)|0);
   var $10=$9;
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=FUNCTION_TABLE[$14]($10);
   $__wk=$15;
   var $16=$3;
   var $17=$6;
   var $18=$__e;
   assert(4 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];
   var $19=$__wk;
   var $20=$__wk;
   var $21=(($20+168)|0);
   var $22=$5;
   var $23=$4;
   var $24=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($16, $6, $19, $21, $22, $23, 0);
   var $25=$__wk;
   var $26=$24;
   var $27=$25;
   var $28=((($26)-($27))|0);
   var $29=((((($28)|(0)))/(12))&-1);
   $__i=$29;
   var $30=$__i;
   var $31=(($30)|(0)) < 14;
   if ($31) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $33=$__i;
   var $34=((((($33)|(0)))%(7))&-1);
   var $35=$2;
   HEAP32[(($35)>>2)]=$34;
   label = 3; break;
  case 3: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__ct;
   var $6=__stackBase__;
   var $7;
   var $8;
   var $9=(__stackBase__)+(8);
   $2=$this;
   $3=$__iob;
   $4=$__err;
   $5=$__tm;
   var $10=$2;
   var $11=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $11);
   $1=$6;
   var $12=$1;
   var $13 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($12, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $14=$13;
   label = 3; break;
  case 3: 
   __ZNSt3__16localeD2Ev($6);
   $__ct=$14;
   var $16=$5;
   var $17=(($16+16)|0);
   var $18=$9;
   var $19=$__e;
   assert(4 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];
   var $20=$4;
   var $21=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($10, $17, $__b, $9, $20, $21);
   var $22=$agg_result;
   var $23=$__b;
   assert(4 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];
   STACKTOP = __stackBase__;
   return;
  case 4: 
   var $25$0 = ___cxa_find_matching_catch(-1, -1); $25$1 = tempRet0;
   var $26=$25$0;
   $7=$26;
   var $27=$25$1;
   $8=$27;
   __ZNSt3__16localeD2Ev($6);
   label = 5; break;
  case 5: 
   var $29=$7;
   var $30=$8;
   var $31$0=$29;
   var $31$1=0;
   var $32$0=$31$0;
   var $32$1=$30;
   ___resumeException($32$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__month;
   var $__i;
   var $6=__stackBase__;
   $1=$this;
   $2=$__m;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$7;
   var $9=(($8+8)|0);
   var $10=$9;
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=FUNCTION_TABLE[$14]($10);
   $__month=$15;
   var $16=$3;
   var $17=$6;
   var $18=$__e;
   assert(4 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];
   var $19=$__month;
   var $20=$__month;
   var $21=(($20+288)|0);
   var $22=$5;
   var $23=$4;
   var $24=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($16, $6, $19, $21, $22, $23, 0);
   var $25=$__month;
   var $26=$24;
   var $27=$25;
   var $28=((($26)-($27))|0);
   var $29=((((($28)|(0)))/(12))&-1);
   $__i=$29;
   var $30=$__i;
   var $31=(($30)|(0)) < 24;
   if ($31) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $33=$__i;
   var $34=((((($33)|(0)))%(12))&-1);
   var $35=$2;
   HEAP32[(($35)>>2)]=$34;
   label = 3; break;
  case 3: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__ct;
   var $6=__stackBase__;
   var $7;
   var $8;
   var $9=(__stackBase__)+(8);
   $2=$this;
   $3=$__iob;
   $4=$__err;
   $5=$__tm;
   var $10=$2;
   var $11=$3;
   __ZNKSt3__18ios_base6getlocEv($6, $11);
   $1=$6;
   var $12=$1;
   var $13 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($12, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $14=$13;
   label = 3; break;
  case 3: 
   __ZNSt3__16localeD2Ev($6);
   $__ct=$14;
   var $16=$5;
   var $17=(($16+20)|0);
   var $18=$9;
   var $19=$__e;
   assert(4 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];
   var $20=$4;
   var $21=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($10, $17, $__b, $9, $20, $21);
   var $22=$agg_result;
   var $23=$__b;
   assert(4 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];
   STACKTOP = __stackBase__;
   return;
  case 4: 
   var $25$0 = ___cxa_find_matching_catch(-1, -1); $25$1 = tempRet0;
   var $26=$25$0;
   $7=$26;
   var $27=$25$1;
   $8=$27;
   __ZNSt3__16localeD2Ev($6);
   label = 5; break;
  case 5: 
   var $29=$7;
   var $30=$8;
   var $31$0=$29;
   var $31$1=0;
   var $32$0=$31$0;
   var $32$1=$30;
   ___resumeException($32$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__y;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 4);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 9; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=(($19)|(0)) < 69;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__t;
   var $23=((($22)+(2000))|0);
   $__t=$23;
   label = 8; break;
  case 4: 
   var $25=$__t;
   var $26=69 <= (($25)|(0));
   if ($26) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $28=$__t;
   var $29=(($28)|(0)) <= 99;
   if ($29) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $31=$__t;
   var $32=((($31)+(1900))|0);
   $__t=$32;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $35=$__t;
   var $36=((($35)-(1900))|0);
   var $37=$2;
   HEAP32[(($37)>>2)]=$36;
   label = 9; break;
  case 9: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 312)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $__ct;
   var $73=__stackBase__;
   var $74;
   var $75;
   var $76=(__stackBase__)+(8);
   var $77=(__stackBase__)+(16);
   var $__fm;
   var $78=(__stackBase__)+(24);
   var $79=(__stackBase__)+(32);
   var $80=(__stackBase__)+(40);
   var $81=(__stackBase__)+(48);
   var $82=(__stackBase__)+(56);
   var $83=(__stackBase__)+(64);
   var $84=(__stackBase__)+(72);
   var $85=(__stackBase__)+(80);
   var $86=(__stackBase__)+(88);
   var $87=(__stackBase__)+(96);
   var $88=(__stackBase__)+(104);
   var $89=(__stackBase__)+(112);
   var $90=(__stackBase__)+(120);
   var $91=(__stackBase__)+(128);
   var $92=(__stackBase__)+(136);
   var $93=(__stackBase__)+(144);
   var $94=(__stackBase__)+(152);
   var $95=(__stackBase__)+(160);
   var $96=(__stackBase__)+(168);
   var $97=(__stackBase__)+(176);
   var $98=(__stackBase__)+(184);
   var $99=(__stackBase__)+(192);
   var $100=(__stackBase__)+(200);
   var $101=(__stackBase__)+(208);
   var $102=(__stackBase__)+(216);
   var $103=(__stackBase__)+(224);
   var $104=(__stackBase__)+(232);
   var $105=(__stackBase__)+(240);
   var $106=(__stackBase__)+(248);
   var $107=(__stackBase__)+(256);
   var $__fm1;
   var $108=(__stackBase__)+(264);
   var $109=(__stackBase__)+(272);
   var $110=(__stackBase__)+(280);
   var $111=(__stackBase__)+(288);
   var $112=(__stackBase__)+(296);
   var $113=(__stackBase__)+(304);
   $67=$this;
   $68=$__iob;
   $69=$__err;
   $70=$__tm;
   $71=$__fmt;
   $72=$0;
   var $114=$67;
   var $115=$69;
   HEAP32[(($115)>>2)]=0;
   var $116=$68;
   __ZNKSt3__18ios_base6getlocEv($73, $116);
   $66=$73;
   var $117=$66;
   var $118 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($117, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $119=$118;
   label = 3; break;
  case 3: 
   __ZNSt3__16localeD2Ev($73);
   $__ct=$119;
   var $121=$71;
   var $122=(($121 << 24) >> 24);
   if ((($122)|(0))==97 | (($122)|(0))==65) {
    label = 5; break;
   }
   else if ((($122)|(0))==98 | (($122)|(0))==66 | (($122)|(0))==104) {
    label = 6; break;
   }
   else if ((($122)|(0))==99) {
    label = 7; break;
   }
   else if ((($122)|(0))==100 | (($122)|(0))==101) {
    label = 17; break;
   }
   else if ((($122)|(0))==68) {
    label = 18; break;
   }
   else if ((($122)|(0))==70) {
    label = 19; break;
   }
   else if ((($122)|(0))==72) {
    label = 20; break;
   }
   else if ((($122)|(0))==73) {
    label = 21; break;
   }
   else if ((($122)|(0))==106) {
    label = 22; break;
   }
   else if ((($122)|(0))==109) {
    label = 23; break;
   }
   else if ((($122)|(0))==77) {
    label = 24; break;
   }
   else if ((($122)|(0))==110 | (($122)|(0))==116) {
    label = 25; break;
   }
   else if ((($122)|(0))==112) {
    label = 26; break;
   }
   else if ((($122)|(0))==114) {
    label = 27; break;
   }
   else if ((($122)|(0))==82) {
    label = 28; break;
   }
   else if ((($122)|(0))==83) {
    label = 29; break;
   }
   else if ((($122)|(0))==84) {
    label = 30; break;
   }
   else if ((($122)|(0))==119) {
    label = 31; break;
   }
   else if ((($122)|(0))==120) {
    label = 32; break;
   }
   else if ((($122)|(0))==88) {
    label = 33; break;
   }
   else if ((($122)|(0))==121) {
    label = 43; break;
   }
   else if ((($122)|(0))==89) {
    label = 44; break;
   }
   else if ((($122)|(0))==37) {
    label = 45; break;
   }
   else {
   label = 46; break;
   }
  case 4: 
   var $124$0 = ___cxa_find_matching_catch(-1, -1); $124$1 = tempRet0;
   var $125=$124$0;
   $74=$125;
   var $126=$124$1;
   $75=$126;
   __ZNSt3__16localeD2Ev($73);
   label = 49; break;
  case 5: 
   var $128=$70;
   var $129=(($128+24)|0);
   var $130=$76;
   var $131=$__e;
   assert(4 % 1 === 0);HEAP32[(($130)>>2)]=HEAP32[(($131)>>2)];
   var $132=$69;
   var $133=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($114, $129, $__b, $76, $132, $133);
   label = 47; break;
  case 6: 
   var $135=$70;
   var $136=(($135+16)|0);
   var $137=$77;
   var $138=$__e;
   assert(4 % 1 === 0);HEAP32[(($137)>>2)]=HEAP32[(($138)>>2)];
   var $139=$69;
   var $140=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($114, $136, $__b, $77, $139, $140);
   label = 47; break;
  case 7: 
   var $142=$114;
   var $143=(($142+8)|0);
   var $144=$143;
   var $145=$144;
   var $146=HEAP32[(($145)>>2)];
   var $147=(($146+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=FUNCTION_TABLE[$148]($144);
   $__fm=$149;
   var $150=$79;
   var $151=$__b;
   assert(4 % 1 === 0);HEAP32[(($150)>>2)]=HEAP32[(($151)>>2)];
   var $152=$80;
   var $153=$__e;
   assert(4 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];
   var $154=$68;
   var $155=$69;
   var $156=$70;
   var $157=$__fm;
   $65=$157;
   var $158=$65;
   $64=$158;
   var $159=$64;
   $63=$159;
   var $160=$63;
   var $161=(($160)|0);
   $62=$161;
   var $162=$62;
   var $163=$162;
   $61=$163;
   var $164=$61;
   var $165=(($164)|0);
   var $166=(($165)|0);
   var $167=$166;
   var $168=(($167)|0);
   var $169=$168;
   var $170=HEAP8[($169)];
   var $171=(($170)&(255));
   var $172=$171 & 1;
   var $173=(($172)|(0))!=0;
   if ($173) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $57=$159;
   var $175=$57;
   var $176=(($175)|0);
   $56=$176;
   var $177=$56;
   var $178=$177;
   $55=$178;
   var $179=$55;
   var $180=(($179)|0);
   var $181=(($180)|0);
   var $182=$181;
   var $183=(($182+8)|0);
   var $184=HEAP32[(($183)>>2)];
   var $196 = $184;label = 10; break;
  case 9: 
   $60=$159;
   var $186=$60;
   var $187=(($186)|0);
   $59=$187;
   var $188=$59;
   var $189=$188;
   $58=$189;
   var $190=$58;
   var $191=(($190)|0);
   var $192=(($191)|0);
   var $193=$192;
   var $194=(($193+4)|0);
   var $195=(($194)|0);
   var $196 = $195;label = 10; break;
  case 10: 
   var $196;
   var $197=$__fm;
   $54=$197;
   var $198=$54;
   $53=$198;
   var $199=$53;
   $52=$199;
   var $200=$52;
   var $201=(($200)|0);
   $51=$201;
   var $202=$51;
   var $203=$202;
   $50=$203;
   var $204=$50;
   var $205=(($204)|0);
   var $206=(($205)|0);
   var $207=$206;
   var $208=(($207)|0);
   var $209=$208;
   var $210=HEAP8[($209)];
   var $211=(($210)&(255));
   var $212=$211 & 1;
   var $213=(($212)|(0))!=0;
   if ($213) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $46=$199;
   var $215=$46;
   var $216=(($215)|0);
   $45=$216;
   var $217=$45;
   var $218=$217;
   $44=$218;
   var $219=$44;
   var $220=(($219)|0);
   var $221=(($220)|0);
   var $222=$221;
   var $223=(($222+8)|0);
   var $224=HEAP32[(($223)>>2)];
   var $236 = $224;label = 13; break;
  case 12: 
   $49=$199;
   var $226=$49;
   var $227=(($226)|0);
   $48=$227;
   var $228=$48;
   var $229=$228;
   $47=$229;
   var $230=$47;
   var $231=(($230)|0);
   var $232=(($231)|0);
   var $233=$232;
   var $234=(($233+4)|0);
   var $235=(($234)|0);
   var $236 = $235;label = 13; break;
  case 13: 
   var $236;
   var $237=$__fm;
   $43=$237;
   var $238=$43;
   $42=$238;
   var $239=$42;
   var $240=(($239)|0);
   $41=$240;
   var $241=$41;
   var $242=$241;
   $40=$242;
   var $243=$40;
   var $244=(($243)|0);
   var $245=(($244)|0);
   var $246=$245;
   var $247=(($246)|0);
   var $248=$247;
   var $249=HEAP8[($248)];
   var $250=(($249)&(255));
   var $251=$250 & 1;
   var $252=(($251)|(0))!=0;
   if ($252) { label = 14; break; } else { label = 15; break; }
  case 14: 
   $36=$238;
   var $254=$36;
   var $255=(($254)|0);
   $35=$255;
   var $256=$35;
   var $257=$256;
   $34=$257;
   var $258=$34;
   var $259=(($258)|0);
   var $260=(($259)|0);
   var $261=$260;
   var $262=(($261+4)|0);
   var $263=HEAP32[(($262)>>2)];
   var $278 = $263;label = 16; break;
  case 15: 
   $39=$238;
   var $265=$39;
   var $266=(($265)|0);
   $38=$266;
   var $267=$38;
   var $268=$267;
   $37=$268;
   var $269=$37;
   var $270=(($269)|0);
   var $271=(($270)|0);
   var $272=$271;
   var $273=(($272)|0);
   var $274=$273;
   var $275=HEAP8[($274)];
   var $276=(($275)&(255));
   var $277=$276 >> 1;
   var $278 = $277;label = 16; break;
  case 16: 
   var $278;
   var $279=(($236+($278<<2))|0);
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($78, $114, $79, $80, $154, $155, $156, $196, $279);
   var $280=$__b;
   var $281=$78;
   assert(4 % 1 === 0);HEAP32[(($280)>>2)]=HEAP32[(($281)>>2)];
   label = 47; break;
  case 17: 
   var $283=$70;
   var $284=(($283+12)|0);
   var $285=$81;
   var $286=$__e;
   assert(4 % 1 === 0);HEAP32[(($285)>>2)]=HEAP32[(($286)>>2)];
   var $287=$69;
   var $288=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($114, $284, $__b, $81, $287, $288);
   label = 47; break;
  case 18: 
   var $290=$83;
   var $291=$__b;
   assert(4 % 1 === 0);HEAP32[(($290)>>2)]=HEAP32[(($291)>>2)];
   var $292=$84;
   var $293=$__e;
   assert(4 % 1 === 0);HEAP32[(($292)>>2)]=HEAP32[(($293)>>2)];
   var $294=$68;
   var $295=$69;
   var $296=$70;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($82, $114, $83, $84, $294, $295, $296, ((10400)|0), ((10432)|0));
   var $297=$__b;
   var $298=$82;
   assert(4 % 1 === 0);HEAP32[(($297)>>2)]=HEAP32[(($298)>>2)];
   label = 47; break;
  case 19: 
   var $300=$86;
   var $301=$__b;
   assert(4 % 1 === 0);HEAP32[(($300)>>2)]=HEAP32[(($301)>>2)];
   var $302=$87;
   var $303=$__e;
   assert(4 % 1 === 0);HEAP32[(($302)>>2)]=HEAP32[(($303)>>2)];
   var $304=$68;
   var $305=$69;
   var $306=$70;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($85, $114, $86, $87, $304, $305, $306, ((10264)|0), ((10296)|0));
   var $307=$__b;
   var $308=$85;
   assert(4 % 1 === 0);HEAP32[(($307)>>2)]=HEAP32[(($308)>>2)];
   label = 47; break;
  case 20: 
   var $310=$70;
   var $311=(($310+8)|0);
   var $312=$88;
   var $313=$__e;
   assert(4 % 1 === 0);HEAP32[(($312)>>2)]=HEAP32[(($313)>>2)];
   var $314=$69;
   var $315=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($114, $311, $__b, $88, $314, $315);
   label = 47; break;
  case 21: 
   var $317=$70;
   var $318=(($317+8)|0);
   var $319=$89;
   var $320=$__e;
   assert(4 % 1 === 0);HEAP32[(($319)>>2)]=HEAP32[(($320)>>2)];
   var $321=$69;
   var $322=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($114, $318, $__b, $89, $321, $322);
   label = 47; break;
  case 22: 
   var $324=$70;
   var $325=(($324+28)|0);
   var $326=$90;
   var $327=$__e;
   assert(4 % 1 === 0);HEAP32[(($326)>>2)]=HEAP32[(($327)>>2)];
   var $328=$69;
   var $329=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($114, $325, $__b, $90, $328, $329);
   label = 47; break;
  case 23: 
   var $331=$70;
   var $332=(($331+16)|0);
   var $333=$91;
   var $334=$__e;
   assert(4 % 1 === 0);HEAP32[(($333)>>2)]=HEAP32[(($334)>>2)];
   var $335=$69;
   var $336=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($114, $332, $__b, $91, $335, $336);
   label = 47; break;
  case 24: 
   var $338=$70;
   var $339=(($338+4)|0);
   var $340=$92;
   var $341=$__e;
   assert(4 % 1 === 0);HEAP32[(($340)>>2)]=HEAP32[(($341)>>2)];
   var $342=$69;
   var $343=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($114, $339, $__b, $92, $342, $343);
   label = 47; break;
  case 25: 
   var $345=$93;
   var $346=$__e;
   assert(4 % 1 === 0);HEAP32[(($345)>>2)]=HEAP32[(($346)>>2)];
   var $347=$69;
   var $348=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($114, $__b, $93, $347, $348);
   label = 47; break;
  case 26: 
   var $350=$70;
   var $351=(($350+8)|0);
   var $352=$94;
   var $353=$__e;
   assert(4 % 1 === 0);HEAP32[(($352)>>2)]=HEAP32[(($353)>>2)];
   var $354=$69;
   var $355=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($114, $351, $__b, $94, $354, $355);
   label = 47; break;
  case 27: 
   var $357=$96;
   var $358=$__b;
   assert(4 % 1 === 0);HEAP32[(($357)>>2)]=HEAP32[(($358)>>2)];
   var $359=$97;
   var $360=$__e;
   assert(4 % 1 === 0);HEAP32[(($359)>>2)]=HEAP32[(($360)>>2)];
   var $361=$68;
   var $362=$69;
   var $363=$70;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($95, $114, $96, $97, $361, $362, $363, ((10352)|0), ((10396)|0));
   var $364=$__b;
   var $365=$95;
   assert(4 % 1 === 0);HEAP32[(($364)>>2)]=HEAP32[(($365)>>2)];
   label = 47; break;
  case 28: 
   var $367=$99;
   var $368=$__b;
   assert(4 % 1 === 0);HEAP32[(($367)>>2)]=HEAP32[(($368)>>2)];
   var $369=$100;
   var $370=$__e;
   assert(4 % 1 === 0);HEAP32[(($369)>>2)]=HEAP32[(($370)>>2)];
   var $371=$68;
   var $372=$69;
   var $373=$70;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($98, $114, $99, $100, $371, $372, $373, ((10328)|0), ((10348)|0));
   var $374=$__b;
   var $375=$98;
   assert(4 % 1 === 0);HEAP32[(($374)>>2)]=HEAP32[(($375)>>2)];
   label = 47; break;
  case 29: 
   var $377=$70;
   var $378=(($377)|0);
   var $379=$101;
   var $380=$__e;
   assert(4 % 1 === 0);HEAP32[(($379)>>2)]=HEAP32[(($380)>>2)];
   var $381=$69;
   var $382=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($114, $378, $__b, $101, $381, $382);
   label = 47; break;
  case 30: 
   var $384=$103;
   var $385=$__b;
   assert(4 % 1 === 0);HEAP32[(($384)>>2)]=HEAP32[(($385)>>2)];
   var $386=$104;
   var $387=$__e;
   assert(4 % 1 === 0);HEAP32[(($386)>>2)]=HEAP32[(($387)>>2)];
   var $388=$68;
   var $389=$69;
   var $390=$70;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($102, $114, $103, $104, $388, $389, $390, ((10296)|0), ((10328)|0));
   var $391=$__b;
   var $392=$102;
   assert(4 % 1 === 0);HEAP32[(($391)>>2)]=HEAP32[(($392)>>2)];
   label = 47; break;
  case 31: 
   var $394=$70;
   var $395=(($394+24)|0);
   var $396=$105;
   var $397=$__e;
   assert(4 % 1 === 0);HEAP32[(($396)>>2)]=HEAP32[(($397)>>2)];
   var $398=$69;
   var $399=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($114, $395, $__b, $105, $398, $399);
   label = 47; break;
  case 32: 
   var $401=$114;
   var $402=HEAP32[(($401)>>2)];
   var $403=(($402+20)|0);
   var $404=HEAP32[(($403)>>2)];
   var $405=$106;
   var $406=$__b;
   assert(4 % 1 === 0);HEAP32[(($405)>>2)]=HEAP32[(($406)>>2)];
   var $407=$107;
   var $408=$__e;
   assert(4 % 1 === 0);HEAP32[(($407)>>2)]=HEAP32[(($408)>>2)];
   var $409=$68;
   var $410=$69;
   var $411=$70;
   FUNCTION_TABLE[$404]($agg_result, $114, $106, $107, $409, $410, $411);
   label = 48; break;
  case 33: 
   var $413=$114;
   var $414=(($413+8)|0);
   var $415=$414;
   var $416=$415;
   var $417=HEAP32[(($416)>>2)];
   var $418=(($417+24)|0);
   var $419=HEAP32[(($418)>>2)];
   var $420=FUNCTION_TABLE[$419]($415);
   $__fm1=$420;
   var $421=$109;
   var $422=$__b;
   assert(4 % 1 === 0);HEAP32[(($421)>>2)]=HEAP32[(($422)>>2)];
   var $423=$110;
   var $424=$__e;
   assert(4 % 1 === 0);HEAP32[(($423)>>2)]=HEAP32[(($424)>>2)];
   var $425=$68;
   var $426=$69;
   var $427=$70;
   var $428=$__fm1;
   $33=$428;
   var $429=$33;
   $32=$429;
   var $430=$32;
   $31=$430;
   var $431=$31;
   var $432=(($431)|0);
   $30=$432;
   var $433=$30;
   var $434=$433;
   $29=$434;
   var $435=$29;
   var $436=(($435)|0);
   var $437=(($436)|0);
   var $438=$437;
   var $439=(($438)|0);
   var $440=$439;
   var $441=HEAP8[($440)];
   var $442=(($441)&(255));
   var $443=$442 & 1;
   var $444=(($443)|(0))!=0;
   if ($444) { label = 34; break; } else { label = 35; break; }
  case 34: 
   $25=$430;
   var $446=$25;
   var $447=(($446)|0);
   $24=$447;
   var $448=$24;
   var $449=$448;
   $23=$449;
   var $450=$23;
   var $451=(($450)|0);
   var $452=(($451)|0);
   var $453=$452;
   var $454=(($453+8)|0);
   var $455=HEAP32[(($454)>>2)];
   var $467 = $455;label = 36; break;
  case 35: 
   $28=$430;
   var $457=$28;
   var $458=(($457)|0);
   $27=$458;
   var $459=$27;
   var $460=$459;
   $26=$460;
   var $461=$26;
   var $462=(($461)|0);
   var $463=(($462)|0);
   var $464=$463;
   var $465=(($464+4)|0);
   var $466=(($465)|0);
   var $467 = $466;label = 36; break;
  case 36: 
   var $467;
   var $468=$__fm1;
   $22=$468;
   var $469=$22;
   $21=$469;
   var $470=$21;
   $20=$470;
   var $471=$20;
   var $472=(($471)|0);
   $19=$472;
   var $473=$19;
   var $474=$473;
   $18=$474;
   var $475=$18;
   var $476=(($475)|0);
   var $477=(($476)|0);
   var $478=$477;
   var $479=(($478)|0);
   var $480=$479;
   var $481=HEAP8[($480)];
   var $482=(($481)&(255));
   var $483=$482 & 1;
   var $484=(($483)|(0))!=0;
   if ($484) { label = 37; break; } else { label = 38; break; }
  case 37: 
   $14=$470;
   var $486=$14;
   var $487=(($486)|0);
   $13=$487;
   var $488=$13;
   var $489=$488;
   $12=$489;
   var $490=$12;
   var $491=(($490)|0);
   var $492=(($491)|0);
   var $493=$492;
   var $494=(($493+8)|0);
   var $495=HEAP32[(($494)>>2)];
   var $507 = $495;label = 39; break;
  case 38: 
   $17=$470;
   var $497=$17;
   var $498=(($497)|0);
   $16=$498;
   var $499=$16;
   var $500=$499;
   $15=$500;
   var $501=$15;
   var $502=(($501)|0);
   var $503=(($502)|0);
   var $504=$503;
   var $505=(($504+4)|0);
   var $506=(($505)|0);
   var $507 = $506;label = 39; break;
  case 39: 
   var $507;
   var $508=$__fm1;
   $11=$508;
   var $509=$11;
   $10=$509;
   var $510=$10;
   var $511=(($510)|0);
   $9=$511;
   var $512=$9;
   var $513=$512;
   $8=$513;
   var $514=$8;
   var $515=(($514)|0);
   var $516=(($515)|0);
   var $517=$516;
   var $518=(($517)|0);
   var $519=$518;
   var $520=HEAP8[($519)];
   var $521=(($520)&(255));
   var $522=$521 & 1;
   var $523=(($522)|(0))!=0;
   if ($523) { label = 40; break; } else { label = 41; break; }
  case 40: 
   $4=$509;
   var $525=$4;
   var $526=(($525)|0);
   $3=$526;
   var $527=$3;
   var $528=$527;
   $2=$528;
   var $529=$2;
   var $530=(($529)|0);
   var $531=(($530)|0);
   var $532=$531;
   var $533=(($532+4)|0);
   var $534=HEAP32[(($533)>>2)];
   var $549 = $534;label = 42; break;
  case 41: 
   $7=$509;
   var $536=$7;
   var $537=(($536)|0);
   $6=$537;
   var $538=$6;
   var $539=$538;
   $5=$539;
   var $540=$5;
   var $541=(($540)|0);
   var $542=(($541)|0);
   var $543=$542;
   var $544=(($543)|0);
   var $545=$544;
   var $546=HEAP8[($545)];
   var $547=(($546)&(255));
   var $548=$547 >> 1;
   var $549 = $548;label = 42; break;
  case 42: 
   var $549;
   var $550=(($507+($549<<2))|0);
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($108, $114, $109, $110, $425, $426, $427, $467, $550);
   var $551=$__b;
   var $552=$108;
   assert(4 % 1 === 0);HEAP32[(($551)>>2)]=HEAP32[(($552)>>2)];
   label = 47; break;
  case 43: 
   var $554=$70;
   var $555=(($554+20)|0);
   var $556=$111;
   var $557=$__e;
   assert(4 % 1 === 0);HEAP32[(($556)>>2)]=HEAP32[(($557)>>2)];
   var $558=$69;
   var $559=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($114, $555, $__b, $111, $558, $559);
   label = 47; break;
  case 44: 
   var $561=$70;
   var $562=(($561+20)|0);
   var $563=$112;
   var $564=$__e;
   assert(4 % 1 === 0);HEAP32[(($563)>>2)]=HEAP32[(($564)>>2)];
   var $565=$69;
   var $566=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($114, $562, $__b, $112, $565, $566);
   label = 47; break;
  case 45: 
   var $568=$113;
   var $569=$__e;
   assert(4 % 1 === 0);HEAP32[(($568)>>2)]=HEAP32[(($569)>>2)];
   var $570=$69;
   var $571=$__ct;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($114, $__b, $113, $570, $571);
   label = 47; break;
  case 46: 
   var $573=$69;
   var $574=HEAP32[(($573)>>2)];
   var $575=$574 | 4;
   HEAP32[(($573)>>2)]=$575;
   label = 47; break;
  case 47: 
   var $577=$agg_result;
   var $578=$__b;
   assert(4 % 1 === 0);HEAP32[(($577)>>2)]=HEAP32[(($578)>>2)];
   label = 48; break;
  case 48: 
   STACKTOP = __stackBase__;
   return;
  case 49: 
   var $581=$74;
   var $582=$75;
   var $583$0=$581;
   var $583$1=0;
   var $584$0=$583$0;
   var $584$1=$582;
   ___resumeException($584$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__d;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 2);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 5; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=1 <= (($19)|(0));
   if ($20) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $22=$__t;
   var $23=(($22)|(0)) <= 31;
   if ($23) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $25=$__t;
   var $26=$2;
   HEAP32[(($26)>>2)]=$25;
   label = 6; break;
  case 5: 
   var $28=$4;
   var $29=HEAP32[(($28)>>2)];
   var $30=$29 | 4;
   HEAP32[(($28)>>2)]=$30;
   label = 6; break;
  case 6: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__h;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 2);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=(($19)|(0)) <= 23;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__t;
   var $23=$2;
   HEAP32[(($23)>>2)]=$22;
   label = 5; break;
  case 4: 
   var $25=$4;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26 | 4;
   HEAP32[(($25)>>2)]=$27;
   label = 5; break;
  case 5: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__h;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 2);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 5; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=1 <= (($19)|(0));
   if ($20) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $22=$__t;
   var $23=(($22)|(0)) <= 12;
   if ($23) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $25=$__t;
   var $26=$2;
   HEAP32[(($26)>>2)]=$25;
   label = 6; break;
  case 5: 
   var $28=$4;
   var $29=HEAP32[(($28)>>2)];
   var $30=$29 | 4;
   HEAP32[(($28)>>2)]=$30;
   label = 6; break;
  case 6: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__d;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 3);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=(($19)|(0)) <= 365;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__t;
   var $23=$2;
   HEAP32[(($23)>>2)]=$22;
   label = 5; break;
  case 4: 
   var $25=$4;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26 | 4;
   HEAP32[(($25)>>2)]=$27;
   label = 5; break;
  case 5: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__m;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 2);
   var $14=((($13)-(1))|0);
   $__t=$14;
   var $15=$4;
   var $16=HEAP32[(($15)>>2)];
   var $17=$16 & 4;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $20=$__t;
   var $21=(($20)|(0)) <= 11;
   if ($21) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $23=$__t;
   var $24=$2;
   HEAP32[(($24)>>2)]=$23;
   label = 5; break;
  case 4: 
   var $26=$4;
   var $27=HEAP32[(($26)>>2)];
   var $28=$27 | 4;
   HEAP32[(($26)>>2)]=$28;
   label = 5; break;
  case 5: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__m;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 2);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=(($19)|(0)) <= 59;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__t;
   var $23=$2;
   HEAP32[(($23)>>2)]=$22;
   label = 5; break;
  case 4: 
   var $25=$4;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26 | 4;
   HEAP32[(($25)>>2)]=$27;
   label = 5; break;
  case 5: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   $44=$this;
   $45=$__b;
   $46=$__err;
   $47=$__ct;
   var $48=$44;
   label = 2; break;
  case 2: 
   var $50=$45;
   $42=$50;
   $43=$__e;
   var $51=$42;
   var $52=$43;
   $40=$51;
   $41=$52;
   var $53=$40;
   $39=$53;
   var $54=$39;
   var $55=(($54)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56)|(0))!=0;
   if ($57) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $59=(($54)|0);
   var $60=HEAP32[(($59)>>2)];
   $38=$60;
   var $61=$38;
   var $62=(($61+12)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($61+16)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($63)|(0))==(($65)|(0));
   if ($66) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $68=$61;
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69+36)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=FUNCTION_TABLE[$71]($61);
   $37=$72;
   label = 6; break;
  case 5: 
   var $74=(($61+12)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=HEAP32[(($75)>>2)];
   $36=$76;
   var $77=$36;
   $37=$77;
   label = 6; break;
  case 6: 
   var $78=$37;
   $34=$78;
   $35=-1;
   var $79=$34;
   var $80=$35;
   var $81=(($79)|(0))==(($80)|(0));
   if ($81) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $83=(($54)|0);
   HEAP32[(($83)>>2)]=0;
   label = 8; break;
  case 8: 
   var $84=(($54)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85)|(0))==0;
   var $87=(($86)&(1));
   var $88=$41;
   $33=$88;
   var $89=$33;
   var $90=(($89)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91)|(0))!=0;
   if ($92) { label = 9; break; } else { label = 14; break; }
  case 9: 
   var $94=(($89)|0);
   var $95=HEAP32[(($94)>>2)];
   $32=$95;
   var $96=$32;
   var $97=(($96+12)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($96+16)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($98)|(0))==(($100)|(0));
   if ($101) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $103=$96;
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+36)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=FUNCTION_TABLE[$106]($96);
   $31=$107;
   label = 12; break;
  case 11: 
   var $109=(($96+12)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=HEAP32[(($110)>>2)];
   $30=$111;
   var $112=$30;
   $31=$112;
   label = 12; break;
  case 12: 
   var $113=$31;
   $28=$113;
   $29=-1;
   var $114=$28;
   var $115=$29;
   var $116=(($114)|(0))==(($115)|(0));
   if ($116) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $118=(($89)|0);
   HEAP32[(($118)>>2)]=0;
   label = 14; break;
  case 14: 
   var $119=(($89)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120)|(0))==0;
   var $122=(($121)&(1));
   var $123=(($87)|(0))==(($122)|(0));
   var $124=$123 ^ 1;
   if ($124) { label = 15; break; } else { var $158 = 0;label = 19; break; }
  case 15: 
   var $126=$47;
   var $127=$45;
   $27=$127;
   var $128=$27;
   var $129=(($128)|0);
   var $130=HEAP32[(($129)>>2)];
   $26=$130;
   var $131=$26;
   var $132=(($131+12)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($131+16)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($133)|(0))==(($135)|(0));
   if ($136) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $138=$131;
   var $139=HEAP32[(($138)>>2)];
   var $140=(($139+36)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=FUNCTION_TABLE[$141]($131);
   $25=$142;
   label = 18; break;
  case 17: 
   var $144=(($131+12)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=HEAP32[(($145)>>2)];
   $24=$146;
   var $147=$24;
   $25=$147;
   label = 18; break;
  case 18: 
   var $148=$25;
   $21=$126;
   $22=8192;
   $23=$148;
   var $149=$21;
   var $150=$149;
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151+12)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=$22;
   var $155=$23;
   var $156=FUNCTION_TABLE[$153]($149, $154, $155);
   var $158 = $156;label = 19; break;
  case 19: 
   var $158;
   if ($158) { label = 20; break; } else { label = 25; break; }
  case 20: 
   label = 21; break;
  case 21: 
   var $161=$45;
   $20=$161;
   var $162=$20;
   var $163=(($162)|0);
   var $164=HEAP32[(($163)>>2)];
   $19=$164;
   var $165=$19;
   var $166=(($165+12)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=(($165+16)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170=(($167)|(0))==(($169)|(0));
   if ($170) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $172=$165;
   var $173=HEAP32[(($172)>>2)];
   var $174=(($173+40)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=FUNCTION_TABLE[$175]($165);
   $18=$176;
   label = 24; break;
  case 23: 
   var $178=(($165+12)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179+4)|0);
   HEAP32[(($178)>>2)]=$180;
   var $181=HEAP32[(($179)>>2)];
   $17=$181;
   var $182=$17;
   $18=$182;
   label = 24; break;
  case 24: 
   var $183=$18;
   label = 2; break;
  case 25: 
   var $185=$45;
   $15=$185;
   $16=$__e;
   var $186=$15;
   var $187=$16;
   $13=$186;
   $14=$187;
   var $188=$13;
   $12=$188;
   var $189=$12;
   var $190=(($189)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=(($191)|(0))!=0;
   if ($192) { label = 26; break; } else { label = 31; break; }
  case 26: 
   var $194=(($189)|0);
   var $195=HEAP32[(($194)>>2)];
   $11=$195;
   var $196=$11;
   var $197=(($196+12)|0);
   var $198=HEAP32[(($197)>>2)];
   var $199=(($196+16)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=(($198)|(0))==(($200)|(0));
   if ($201) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $203=$196;
   var $204=HEAP32[(($203)>>2)];
   var $205=(($204+36)|0);
   var $206=HEAP32[(($205)>>2)];
   var $207=FUNCTION_TABLE[$206]($196);
   $10=$207;
   label = 29; break;
  case 28: 
   var $209=(($196+12)|0);
   var $210=HEAP32[(($209)>>2)];
   var $211=HEAP32[(($210)>>2)];
   $9=$211;
   var $212=$9;
   $10=$212;
   label = 29; break;
  case 29: 
   var $213=$10;
   $7=$213;
   $8=-1;
   var $214=$7;
   var $215=$8;
   var $216=(($214)|(0))==(($215)|(0));
   if ($216) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $218=(($189)|0);
   HEAP32[(($218)>>2)]=0;
   label = 31; break;
  case 31: 
   var $219=(($189)|0);
   var $220=HEAP32[(($219)>>2)];
   var $221=(($220)|(0))==0;
   var $222=(($221)&(1));
   var $223=$14;
   $6=$223;
   var $224=$6;
   var $225=(($224)|0);
   var $226=HEAP32[(($225)>>2)];
   var $227=(($226)|(0))!=0;
   if ($227) { label = 32; break; } else { label = 37; break; }
  case 32: 
   var $229=(($224)|0);
   var $230=HEAP32[(($229)>>2)];
   $5=$230;
   var $231=$5;
   var $232=(($231+12)|0);
   var $233=HEAP32[(($232)>>2)];
   var $234=(($231+16)|0);
   var $235=HEAP32[(($234)>>2)];
   var $236=(($233)|(0))==(($235)|(0));
   if ($236) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $238=$231;
   var $239=HEAP32[(($238)>>2)];
   var $240=(($239+36)|0);
   var $241=HEAP32[(($240)>>2)];
   var $242=FUNCTION_TABLE[$241]($231);
   $4=$242;
   label = 35; break;
  case 34: 
   var $244=(($231+12)|0);
   var $245=HEAP32[(($244)>>2)];
   var $246=HEAP32[(($245)>>2)];
   $3=$246;
   var $247=$3;
   $4=$247;
   label = 35; break;
  case 35: 
   var $248=$4;
   $1=$248;
   $2=-1;
   var $249=$1;
   var $250=$2;
   var $251=(($249)|(0))==(($250)|(0));
   if ($251) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $253=(($224)|0);
   HEAP32[(($253)>>2)]=0;
   label = 37; break;
  case 37: 
   var $254=(($224)|0);
   var $255=HEAP32[(($254)>>2)];
   var $256=(($255)|(0))==0;
   var $257=(($256)&(1));
   var $258=(($222)|(0))==(($257)|(0));
   if ($258) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $260=$46;
   var $261=HEAP32[(($260)>>2)];
   var $262=$261 | 2;
   HEAP32[(($260)>>2)]=$262;
   label = 39; break;
  case 39: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $__ap;
   var $__i;
   var $26=__stackBase__;
   $21=$this;
   $22=$__h;
   $23=$__b;
   $24=$__err;
   $25=$__ct;
   var $27=$21;
   var $28=$27;
   var $29=(($28+8)|0);
   var $30=$29;
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32+8)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=FUNCTION_TABLE[$34]($30);
   $__ap=$35;
   var $36=$__ap;
   var $37=(($36)|0);
   $20=$37;
   var $38=$20;
   $19=$38;
   var $39=$19;
   var $40=(($39)|0);
   $18=$40;
   var $41=$18;
   var $42=$41;
   $17=$42;
   var $43=$17;
   var $44=(($43)|0);
   var $45=(($44)|0);
   var $46=$45;
   var $47=(($46)|0);
   var $48=$47;
   var $49=HEAP8[($48)];
   var $50=(($49)&(255));
   var $51=$50 & 1;
   var $52=(($51)|(0))!=0;
   if ($52) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $13=$38;
   var $54=$13;
   var $55=(($54)|0);
   $12=$55;
   var $56=$12;
   var $57=$56;
   $11=$57;
   var $58=$11;
   var $59=(($58)|0);
   var $60=(($59)|0);
   var $61=$60;
   var $62=(($61+4)|0);
   var $63=HEAP32[(($62)>>2)];
   var $78 = $63;label = 4; break;
  case 3: 
   $16=$38;
   var $65=$16;
   var $66=(($65)|0);
   $15=$66;
   var $67=$15;
   var $68=$67;
   $14=$68;
   var $69=$14;
   var $70=(($69)|0);
   var $71=(($70)|0);
   var $72=$71;
   var $73=(($72)|0);
   var $74=$73;
   var $75=HEAP8[($74)];
   var $76=(($75)&(255));
   var $77=$76 >> 1;
   var $78 = $77;label = 4; break;
  case 4: 
   var $78;
   var $79=$__ap;
   var $80=(($79+12)|0);
   $10=$80;
   var $81=$10;
   $9=$81;
   var $82=$9;
   var $83=(($82)|0);
   $8=$83;
   var $84=$8;
   var $85=$84;
   $7=$85;
   var $86=$7;
   var $87=(($86)|0);
   var $88=(($87)|0);
   var $89=$88;
   var $90=(($89)|0);
   var $91=$90;
   var $92=HEAP8[($91)];
   var $93=(($92)&(255));
   var $94=$93 & 1;
   var $95=(($94)|(0))!=0;
   if ($95) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $3=$81;
   var $97=$3;
   var $98=(($97)|0);
   $2=$98;
   var $99=$2;
   var $100=$99;
   $1=$100;
   var $101=$1;
   var $102=(($101)|0);
   var $103=(($102)|0);
   var $104=$103;
   var $105=(($104+4)|0);
   var $106=HEAP32[(($105)>>2)];
   var $121 = $106;label = 7; break;
  case 6: 
   $6=$81;
   var $108=$6;
   var $109=(($108)|0);
   $5=$109;
   var $110=$5;
   var $111=$110;
   $4=$111;
   var $112=$4;
   var $113=(($112)|0);
   var $114=(($113)|0);
   var $115=$114;
   var $116=(($115)|0);
   var $117=$116;
   var $118=HEAP8[($117)];
   var $119=(($118)&(255));
   var $120=$119 >> 1;
   var $121 = $120;label = 7; break;
  case 7: 
   var $121;
   var $122=((($78)+($121))|0);
   var $123=(($122)|(0))==0;
   if ($123) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $125=$24;
   var $126=HEAP32[(($125)>>2)];
   var $127=$126 | 4;
   HEAP32[(($125)>>2)]=$127;
   label = 16; break;
  case 9: 
   var $129=$23;
   var $130=$26;
   var $131=$__e;
   assert(4 % 1 === 0);HEAP32[(($130)>>2)]=HEAP32[(($131)>>2)];
   var $132=$__ap;
   var $133=$__ap;
   var $134=(($133+24)|0);
   var $135=$25;
   var $136=$24;
   var $137=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($129, $26, $132, $134, $135, $136, 0);
   var $138=$__ap;
   var $139=$137;
   var $140=$138;
   var $141=((($139)-($140))|0);
   var $142=((((($141)|(0)))/(12))&-1);
   $__i=$142;
   var $143=$__i;
   var $144=(($143)|(0))==0;
   if ($144) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $146=$22;
   var $147=HEAP32[(($146)>>2)];
   var $148=(($147)|(0))==12;
   if ($148) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $150=$22;
   HEAP32[(($150)>>2)]=0;
   label = 16; break;
  case 12: 
   var $152=$__i;
   var $153=(($152)|(0))==1;
   if ($153) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $155=$22;
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156)|(0)) < 12;
   if ($157) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $159=$22;
   var $160=HEAP32[(($159)>>2)];
   var $161=((($160)+(12))|0);
   HEAP32[(($159)>>2)]=$161;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__s, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__s;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 2);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=(($19)|(0)) <= 60;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__t;
   var $23=$2;
   HEAP32[(($23)>>2)]=$22;
   label = 5; break;
  case 4: 
   var $25=$4;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26 | 4;
   HEAP32[(($25)>>2)]=$27;
   label = 5; break;
  case 5: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__w;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 1);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=(($19)|(0)) <= 6;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$__t;
   var $23=$2;
   HEAP32[(($23)>>2)]=$22;
   label = 5; break;
  case 4: 
   var $25=$4;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26 | 4;
   HEAP32[(($25)>>2)]=$27;
   label = 5; break;
  case 5: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t;
   var $6=__stackBase__;
   $1=$this;
   $2=$__y;
   $3=$__b;
   $4=$__err;
   $5=$__ct;
   var $7=$1;
   var $8=$3;
   var $9=$6;
   var $10=$__e;
   assert(4 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];
   var $11=$4;
   var $12=$5;
   var $13=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($8, $6, $11, $12, 4);
   $__t=$13;
   var $14=$4;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 4;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $19=$__t;
   var $20=((($19)-(1900))|0);
   var $21=$2;
   HEAP32[(($21)>>2)]=$20;
   label = 3; break;
  case 3: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 var label = 0;
 var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   $44=$this;
   $45=$__b;
   $46=$__err;
   $47=$__ct;
   var $48=$44;
   var $49=$45;
   $42=$49;
   $43=$__e;
   var $50=$42;
   var $51=$43;
   $40=$50;
   $41=$51;
   var $52=$40;
   $39=$52;
   var $53=$39;
   var $54=(($53)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55)|(0))!=0;
   if ($56) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $58=(($53)|0);
   var $59=HEAP32[(($58)>>2)];
   $38=$59;
   var $60=$38;
   var $61=(($60+12)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($60+16)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($62)|(0))==(($64)|(0));
   if ($65) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $67=$60;
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68+36)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=FUNCTION_TABLE[$70]($60);
   $37=$71;
   label = 5; break;
  case 4: 
   var $73=(($60+12)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=HEAP32[(($74)>>2)];
   $36=$75;
   var $76=$36;
   $37=$76;
   label = 5; break;
  case 5: 
   var $77=$37;
   $34=$77;
   $35=-1;
   var $78=$34;
   var $79=$35;
   var $80=(($78)|(0))==(($79)|(0));
   if ($80) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $82=(($53)|0);
   HEAP32[(($82)>>2)]=0;
   label = 7; break;
  case 7: 
   var $83=(($53)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84)|(0))==0;
   var $86=(($85)&(1));
   var $87=$41;
   $33=$87;
   var $88=$33;
   var $89=(($88)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90)|(0))!=0;
   if ($91) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $93=(($88)|0);
   var $94=HEAP32[(($93)>>2)];
   $32=$94;
   var $95=$32;
   var $96=(($95+12)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=(($95+16)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($97)|(0))==(($99)|(0));
   if ($100) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $102=$95;
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103+36)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=FUNCTION_TABLE[$105]($95);
   $31=$106;
   label = 11; break;
  case 10: 
   var $108=(($95+12)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=HEAP32[(($109)>>2)];
   $30=$110;
   var $111=$30;
   $31=$111;
   label = 11; break;
  case 11: 
   var $112=$31;
   $28=$112;
   $29=-1;
   var $113=$28;
   var $114=$29;
   var $115=(($113)|(0))==(($114)|(0));
   if ($115) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $117=(($88)|0);
   HEAP32[(($117)>>2)]=0;
   label = 13; break;
  case 13: 
   var $118=(($88)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119)|(0))==0;
   var $121=(($120)&(1));
   var $122=(($86)|(0))==(($121)|(0));
   if ($122) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $124=$46;
   var $125=HEAP32[(($124)>>2)];
   var $126=$125 | 6;
   HEAP32[(($124)>>2)]=$126;
   label = 38; break;
  case 15: 
   var $128=$47;
   var $129=$45;
   $27=$129;
   var $130=$27;
   var $131=(($130)|0);
   var $132=HEAP32[(($131)>>2)];
   $26=$132;
   var $133=$26;
   var $134=(($133+12)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($133+16)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=(($135)|(0))==(($137)|(0));
   if ($138) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $140=$133;
   var $141=HEAP32[(($140)>>2)];
   var $142=(($141+36)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=FUNCTION_TABLE[$143]($133);
   $25=$144;
   label = 18; break;
  case 17: 
   var $146=(($133+12)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=HEAP32[(($147)>>2)];
   $24=$148;
   var $149=$24;
   $25=$149;
   label = 18; break;
  case 18: 
   var $150=$25;
   $21=$128;
   $22=$150;
   $23=0;
   var $151=$21;
   var $152=$151;
   var $153=HEAP32[(($152)>>2)];
   var $154=(($153+52)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=$22;
   var $157=$23;
   var $158=FUNCTION_TABLE[$155]($151, $156, $157);
   var $159=(($158 << 24) >> 24);
   var $160=(($159)|(0))!=37;
   if ($160) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $162=$46;
   var $163=HEAP32[(($162)>>2)];
   var $164=$163 | 4;
   HEAP32[(($162)>>2)]=$164;
   label = 38; break;
  case 20: 
   var $166=$45;
   $20=$166;
   var $167=$20;
   var $168=(($167)|0);
   var $169=HEAP32[(($168)>>2)];
   $19=$169;
   var $170=$19;
   var $171=(($170+12)|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=(($170+16)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=(($172)|(0))==(($174)|(0));
   if ($175) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $177=$170;
   var $178=HEAP32[(($177)>>2)];
   var $179=(($178+40)|0);
   var $180=HEAP32[(($179)>>2)];
   var $181=FUNCTION_TABLE[$180]($170);
   $18=$181;
   label = 23; break;
  case 22: 
   var $183=(($170+12)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=(($184+4)|0);
   HEAP32[(($183)>>2)]=$185;
   var $186=HEAP32[(($184)>>2)];
   $17=$186;
   var $187=$17;
   $18=$187;
   label = 23; break;
  case 23: 
   var $188=$18;
   $15=$167;
   $16=$__e;
   var $189=$15;
   var $190=$16;
   $13=$189;
   $14=$190;
   var $191=$13;
   $12=$191;
   var $192=$12;
   var $193=(($192)|0);
   var $194=HEAP32[(($193)>>2)];
   var $195=(($194)|(0))!=0;
   if ($195) { label = 24; break; } else { label = 29; break; }
  case 24: 
   var $197=(($192)|0);
   var $198=HEAP32[(($197)>>2)];
   $11=$198;
   var $199=$11;
   var $200=(($199+12)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($199+16)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=(($201)|(0))==(($203)|(0));
   if ($204) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $206=$199;
   var $207=HEAP32[(($206)>>2)];
   var $208=(($207+36)|0);
   var $209=HEAP32[(($208)>>2)];
   var $210=FUNCTION_TABLE[$209]($199);
   $10=$210;
   label = 27; break;
  case 26: 
   var $212=(($199+12)|0);
   var $213=HEAP32[(($212)>>2)];
   var $214=HEAP32[(($213)>>2)];
   $9=$214;
   var $215=$9;
   $10=$215;
   label = 27; break;
  case 27: 
   var $216=$10;
   $7=$216;
   $8=-1;
   var $217=$7;
   var $218=$8;
   var $219=(($217)|(0))==(($218)|(0));
   if ($219) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $221=(($192)|0);
   HEAP32[(($221)>>2)]=0;
   label = 29; break;
  case 29: 
   var $222=(($192)|0);
   var $223=HEAP32[(($222)>>2)];
   var $224=(($223)|(0))==0;
   var $225=(($224)&(1));
   var $226=$14;
   $6=$226;
   var $227=$6;
   var $228=(($227)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230=(($229)|(0))!=0;
   if ($230) { label = 30; break; } else { label = 35; break; }
  case 30: 
   var $232=(($227)|0);
   var $233=HEAP32[(($232)>>2)];
   $5=$233;
   var $234=$5;
   var $235=(($234+12)|0);
   var $236=HEAP32[(($235)>>2)];
   var $237=(($234+16)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239=(($236)|(0))==(($238)|(0));
   if ($239) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $241=$234;
   var $242=HEAP32[(($241)>>2)];
   var $243=(($242+36)|0);
   var $244=HEAP32[(($243)>>2)];
   var $245=FUNCTION_TABLE[$244]($234);
   $4=$245;
   label = 33; break;
  case 32: 
   var $247=(($234+12)|0);
   var $248=HEAP32[(($247)>>2)];
   var $249=HEAP32[(($248)>>2)];
   $3=$249;
   var $250=$3;
   $4=$250;
   label = 33; break;
  case 33: 
   var $251=$4;
   $1=$251;
   $2=-1;
   var $252=$1;
   var $253=$2;
   var $254=(($252)|(0))==(($253)|(0));
   if ($254) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $256=(($227)|0);
   HEAP32[(($256)>>2)]=0;
   label = 35; break;
  case 35: 
   var $257=(($227)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=(($258)|(0))==0;
   var $260=(($259)&(1));
   var $261=(($225)|(0))==(($260)|(0));
   if ($261) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $263=$46;
   var $264=HEAP32[(($263)>>2)];
   var $265=$264 | 2;
   HEAP32[(($263)>>2)]=$265;
   label = 37; break;
  case 37: 
   label = 38; break;
  case 38: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 var label = 0;
 var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $__c;
   var $__r;
   $78=$__b;
   $79=$__err;
   $80=$__ct;
   $81=$__n;
   var $82=$78;
   $75=$82;
   $76=$__e;
   var $83=$75;
   var $84=$76;
   $73=$83;
   $74=$84;
   var $85=$73;
   $72=$85;
   var $86=$72;
   var $87=(($86)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88)|(0))!=0;
   if ($89) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $91=(($86)|0);
   var $92=HEAP32[(($91)>>2)];
   $71=$92;
   var $93=$71;
   var $94=(($93+12)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($93+16)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=(($95)|(0))==(($97)|(0));
   if ($98) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $100=$93;
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101+36)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=FUNCTION_TABLE[$103]($93);
   $70=$104;
   label = 5; break;
  case 4: 
   var $106=(($93+12)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=HEAP32[(($107)>>2)];
   $69=$108;
   var $109=$69;
   $70=$109;
   label = 5; break;
  case 5: 
   var $110=$70;
   $67=$110;
   $68=-1;
   var $111=$67;
   var $112=$68;
   var $113=(($111)|(0))==(($112)|(0));
   if ($113) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $115=(($86)|0);
   HEAP32[(($115)>>2)]=0;
   label = 7; break;
  case 7: 
   var $116=(($86)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($117)|(0))==0;
   var $119=(($118)&(1));
   var $120=$74;
   $66=$120;
   var $121=$66;
   var $122=(($121)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=(($123)|(0))!=0;
   if ($124) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $126=(($121)|0);
   var $127=HEAP32[(($126)>>2)];
   $65=$127;
   var $128=$65;
   var $129=(($128+12)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=(($128+16)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(($130)|(0))==(($132)|(0));
   if ($133) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $135=$128;
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136+36)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=FUNCTION_TABLE[$138]($128);
   $64=$139;
   label = 11; break;
  case 10: 
   var $141=(($128+12)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=HEAP32[(($142)>>2)];
   $63=$143;
   var $144=$63;
   $64=$144;
   label = 11; break;
  case 11: 
   var $145=$64;
   $61=$145;
   $62=-1;
   var $146=$61;
   var $147=$62;
   var $148=(($146)|(0))==(($147)|(0));
   if ($148) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $150=(($121)|0);
   HEAP32[(($150)>>2)]=0;
   label = 13; break;
  case 13: 
   var $151=(($121)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=(($152)|(0))==0;
   var $154=(($153)&(1));
   var $155=(($119)|(0))==(($154)|(0));
   if ($155) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $157=$79;
   var $158=HEAP32[(($157)>>2)];
   var $159=$158 | 6;
   HEAP32[(($157)>>2)]=$159;
   $77=0;
   label = 64; break;
  case 15: 
   var $161=$78;
   $60=$161;
   var $162=$60;
   var $163=(($162)|0);
   var $164=HEAP32[(($163)>>2)];
   $59=$164;
   var $165=$59;
   var $166=(($165+12)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=(($165+16)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170=(($167)|(0))==(($169)|(0));
   if ($170) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $172=$165;
   var $173=HEAP32[(($172)>>2)];
   var $174=(($173+36)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=FUNCTION_TABLE[$175]($165);
   $58=$176;
   label = 18; break;
  case 17: 
   var $178=(($165+12)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=HEAP32[(($179)>>2)];
   $57=$180;
   var $181=$57;
   $58=$181;
   label = 18; break;
  case 18: 
   var $182=$58;
   $__c=$182;
   var $183=$80;
   var $184=$__c;
   $54=$183;
   $55=2048;
   $56=$184;
   var $185=$54;
   var $186=$185;
   var $187=HEAP32[(($186)>>2)];
   var $188=(($187+12)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=$55;
   var $191=$56;
   var $192=FUNCTION_TABLE[$189]($185, $190, $191);
   if ($192) { label = 20; break; } else { label = 19; break; }
  case 19: 
   var $194=$79;
   var $195=HEAP32[(($194)>>2)];
   var $196=$195 | 4;
   HEAP32[(($194)>>2)]=$196;
   $77=0;
   label = 64; break;
  case 20: 
   var $198=$80;
   var $199=$__c;
   $51=$198;
   $52=$199;
   $53=0;
   var $200=$51;
   var $201=$200;
   var $202=HEAP32[(($201)>>2)];
   var $203=(($202+52)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=$52;
   var $206=$53;
   var $207=FUNCTION_TABLE[$204]($200, $205, $206);
   var $208=(($207 << 24) >> 24);
   var $209=((($208)-(48))|0);
   $__r=$209;
   var $210=$78;
   $50=$210;
   var $211=$50;
   var $212=(($211)|0);
   var $213=HEAP32[(($212)>>2)];
   $49=$213;
   var $214=$49;
   var $215=(($214+12)|0);
   var $216=HEAP32[(($215)>>2)];
   var $217=(($214+16)|0);
   var $218=HEAP32[(($217)>>2)];
   var $219=(($216)|(0))==(($218)|(0));
   if ($219) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $221=$214;
   var $222=HEAP32[(($221)>>2)];
   var $223=(($222+40)|0);
   var $224=HEAP32[(($223)>>2)];
   var $225=FUNCTION_TABLE[$224]($214);
   $48=$225;
   label = 23; break;
  case 22: 
   var $227=(($214+12)|0);
   var $228=HEAP32[(($227)>>2)];
   var $229=(($228+4)|0);
   HEAP32[(($227)>>2)]=$229;
   var $230=HEAP32[(($228)>>2)];
   $47=$230;
   var $231=$47;
   $48=$231;
   label = 23; break;
  case 23: 
   var $232=$48;
   var $233=$81;
   var $234=((($233)-(1))|0);
   $81=$234;
   label = 24; break;
  case 24: 
   var $236=$78;
   $45=$236;
   $46=$__e;
   var $237=$45;
   var $238=$46;
   $43=$237;
   $44=$238;
   var $239=$43;
   $42=$239;
   var $240=$42;
   var $241=(($240)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=(($242)|(0))!=0;
   if ($243) { label = 25; break; } else { label = 30; break; }
  case 25: 
   var $245=(($240)|0);
   var $246=HEAP32[(($245)>>2)];
   $41=$246;
   var $247=$41;
   var $248=(($247+12)|0);
   var $249=HEAP32[(($248)>>2)];
   var $250=(($247+16)|0);
   var $251=HEAP32[(($250)>>2)];
   var $252=(($249)|(0))==(($251)|(0));
   if ($252) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $254=$247;
   var $255=HEAP32[(($254)>>2)];
   var $256=(($255+36)|0);
   var $257=HEAP32[(($256)>>2)];
   var $258=FUNCTION_TABLE[$257]($247);
   $40=$258;
   label = 28; break;
  case 27: 
   var $260=(($247+12)|0);
   var $261=HEAP32[(($260)>>2)];
   var $262=HEAP32[(($261)>>2)];
   $39=$262;
   var $263=$39;
   $40=$263;
   label = 28; break;
  case 28: 
   var $264=$40;
   $37=$264;
   $38=-1;
   var $265=$37;
   var $266=$38;
   var $267=(($265)|(0))==(($266)|(0));
   if ($267) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $269=(($240)|0);
   HEAP32[(($269)>>2)]=0;
   label = 30; break;
  case 30: 
   var $270=(($240)|0);
   var $271=HEAP32[(($270)>>2)];
   var $272=(($271)|(0))==0;
   var $273=(($272)&(1));
   var $274=$44;
   $36=$274;
   var $275=$36;
   var $276=(($275)|0);
   var $277=HEAP32[(($276)>>2)];
   var $278=(($277)|(0))!=0;
   if ($278) { label = 31; break; } else { label = 36; break; }
  case 31: 
   var $280=(($275)|0);
   var $281=HEAP32[(($280)>>2)];
   $35=$281;
   var $282=$35;
   var $283=(($282+12)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($282+16)|0);
   var $286=HEAP32[(($285)>>2)];
   var $287=(($284)|(0))==(($286)|(0));
   if ($287) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $289=$282;
   var $290=HEAP32[(($289)>>2)];
   var $291=(($290+36)|0);
   var $292=HEAP32[(($291)>>2)];
   var $293=FUNCTION_TABLE[$292]($282);
   $34=$293;
   label = 34; break;
  case 33: 
   var $295=(($282+12)|0);
   var $296=HEAP32[(($295)>>2)];
   var $297=HEAP32[(($296)>>2)];
   $33=$297;
   var $298=$33;
   $34=$298;
   label = 34; break;
  case 34: 
   var $299=$34;
   $31=$299;
   $32=-1;
   var $300=$31;
   var $301=$32;
   var $302=(($300)|(0))==(($301)|(0));
   if ($302) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $304=(($275)|0);
   HEAP32[(($304)>>2)]=0;
   label = 36; break;
  case 36: 
   var $305=(($275)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=(($306)|(0))==0;
   var $308=(($307)&(1));
   var $309=(($273)|(0))==(($308)|(0));
   var $310=$309 ^ 1;
   if ($310) { label = 37; break; } else { var $315 = 0;label = 38; break; }
  case 37: 
   var $312=$81;
   var $313=(($312)|(0)) > 0;
   var $315 = $313;label = 38; break;
  case 38: 
   var $315;
   if ($315) { label = 39; break; } else { label = 49; break; }
  case 39: 
   var $317=$78;
   $30=$317;
   var $318=$30;
   var $319=(($318)|0);
   var $320=HEAP32[(($319)>>2)];
   $29=$320;
   var $321=$29;
   var $322=(($321+12)|0);
   var $323=HEAP32[(($322)>>2)];
   var $324=(($321+16)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326=(($323)|(0))==(($325)|(0));
   if ($326) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $328=$321;
   var $329=HEAP32[(($328)>>2)];
   var $330=(($329+36)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332=FUNCTION_TABLE[$331]($321);
   $28=$332;
   label = 42; break;
  case 41: 
   var $334=(($321+12)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=HEAP32[(($335)>>2)];
   $27=$336;
   var $337=$27;
   $28=$337;
   label = 42; break;
  case 42: 
   var $338=$28;
   $__c=$338;
   var $339=$80;
   var $340=$__c;
   $24=$339;
   $25=2048;
   $26=$340;
   var $341=$24;
   var $342=$341;
   var $343=HEAP32[(($342)>>2)];
   var $344=(($343+12)|0);
   var $345=HEAP32[(($344)>>2)];
   var $346=$25;
   var $347=$26;
   var $348=FUNCTION_TABLE[$345]($341, $346, $347);
   if ($348) { label = 44; break; } else { label = 43; break; }
  case 43: 
   var $350=$__r;
   $77=$350;
   label = 64; break;
  case 44: 
   var $352=$__r;
   var $353=((($352)*(10))&-1);
   var $354=$80;
   var $355=$__c;
   $21=$354;
   $22=$355;
   $23=0;
   var $356=$21;
   var $357=$356;
   var $358=HEAP32[(($357)>>2)];
   var $359=(($358+52)|0);
   var $360=HEAP32[(($359)>>2)];
   var $361=$22;
   var $362=$23;
   var $363=FUNCTION_TABLE[$360]($356, $361, $362);
   var $364=(($363 << 24) >> 24);
   var $365=((($353)+($364))|0);
   var $366=((($365)-(48))|0);
   $__r=$366;
   label = 45; break;
  case 45: 
   var $368=$78;
   $20=$368;
   var $369=$20;
   var $370=(($369)|0);
   var $371=HEAP32[(($370)>>2)];
   $19=$371;
   var $372=$19;
   var $373=(($372+12)|0);
   var $374=HEAP32[(($373)>>2)];
   var $375=(($372+16)|0);
   var $376=HEAP32[(($375)>>2)];
   var $377=(($374)|(0))==(($376)|(0));
   if ($377) { label = 46; break; } else { label = 47; break; }
  case 46: 
   var $379=$372;
   var $380=HEAP32[(($379)>>2)];
   var $381=(($380+40)|0);
   var $382=HEAP32[(($381)>>2)];
   var $383=FUNCTION_TABLE[$382]($372);
   $18=$383;
   label = 48; break;
  case 47: 
   var $385=(($372+12)|0);
   var $386=HEAP32[(($385)>>2)];
   var $387=(($386+4)|0);
   HEAP32[(($385)>>2)]=$387;
   var $388=HEAP32[(($386)>>2)];
   $17=$388;
   var $389=$17;
   $18=$389;
   label = 48; break;
  case 48: 
   var $390=$18;
   var $391=$81;
   var $392=((($391)-(1))|0);
   $81=$392;
   label = 24; break;
  case 49: 
   var $394=$78;
   $15=$394;
   $16=$__e;
   var $395=$15;
   var $396=$16;
   $13=$395;
   $14=$396;
   var $397=$13;
   $12=$397;
   var $398=$12;
   var $399=(($398)|0);
   var $400=HEAP32[(($399)>>2)];
   var $401=(($400)|(0))!=0;
   if ($401) { label = 50; break; } else { label = 55; break; }
  case 50: 
   var $403=(($398)|0);
   var $404=HEAP32[(($403)>>2)];
   $11=$404;
   var $405=$11;
   var $406=(($405+12)|0);
   var $407=HEAP32[(($406)>>2)];
   var $408=(($405+16)|0);
   var $409=HEAP32[(($408)>>2)];
   var $410=(($407)|(0))==(($409)|(0));
   if ($410) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $412=$405;
   var $413=HEAP32[(($412)>>2)];
   var $414=(($413+36)|0);
   var $415=HEAP32[(($414)>>2)];
   var $416=FUNCTION_TABLE[$415]($405);
   $10=$416;
   label = 53; break;
  case 52: 
   var $418=(($405+12)|0);
   var $419=HEAP32[(($418)>>2)];
   var $420=HEAP32[(($419)>>2)];
   $9=$420;
   var $421=$9;
   $10=$421;
   label = 53; break;
  case 53: 
   var $422=$10;
   $7=$422;
   $8=-1;
   var $423=$7;
   var $424=$8;
   var $425=(($423)|(0))==(($424)|(0));
   if ($425) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $427=(($398)|0);
   HEAP32[(($427)>>2)]=0;
   label = 55; break;
  case 55: 
   var $428=(($398)|0);
   var $429=HEAP32[(($428)>>2)];
   var $430=(($429)|(0))==0;
   var $431=(($430)&(1));
   var $432=$14;
   $6=$432;
   var $433=$6;
   var $434=(($433)|0);
   var $435=HEAP32[(($434)>>2)];
   var $436=(($435)|(0))!=0;
   if ($436) { label = 56; break; } else { label = 61; break; }
  case 56: 
   var $438=(($433)|0);
   var $439=HEAP32[(($438)>>2)];
   $5=$439;
   var $440=$5;
   var $441=(($440+12)|0);
   var $442=HEAP32[(($441)>>2)];
   var $443=(($440+16)|0);
   var $444=HEAP32[(($443)>>2)];
   var $445=(($442)|(0))==(($444)|(0));
   if ($445) { label = 57; break; } else { label = 58; break; }
  case 57: 
   var $447=$440;
   var $448=HEAP32[(($447)>>2)];
   var $449=(($448+36)|0);
   var $450=HEAP32[(($449)>>2)];
   var $451=FUNCTION_TABLE[$450]($440);
   $4=$451;
   label = 59; break;
  case 58: 
   var $453=(($440+12)|0);
   var $454=HEAP32[(($453)>>2)];
   var $455=HEAP32[(($454)>>2)];
   $3=$455;
   var $456=$3;
   $4=$456;
   label = 59; break;
  case 59: 
   var $457=$4;
   $1=$457;
   $2=-1;
   var $458=$1;
   var $459=$2;
   var $460=(($458)|(0))==(($459)|(0));
   if ($460) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $462=(($433)|0);
   HEAP32[(($462)>>2)]=0;
   label = 61; break;
  case 61: 
   var $463=(($433)|0);
   var $464=HEAP32[(($463)>>2)];
   var $465=(($464)|(0))==0;
   var $466=(($465)&(1));
   var $467=(($431)|(0))==(($466)|(0));
   if ($467) { label = 62; break; } else { label = 63; break; }
  case 62: 
   var $469=$79;
   var $470=HEAP32[(($469)>>2)];
   var $471=$470 | 2;
   HEAP32[(($469)>>2)]=$471;
   label = 63; break;
  case 63: 
   var $473=$__r;
   $77=$473;
   label = 64; break;
  case 64: 
   var $475=$77;
   STACKTOP = __stackBase__;
   return $475;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 var $8=(($7+8)|0);
 var $9=$8;
 __ZNSt3__110__time_putD2Ev($9);
 var $10=$6;
 __ZNSt3__16locale5facetD2Ev($10);
 var $11=$4;
 __ZdlPv($11);
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 var $6=(($5+8)|0);
 var $7=$6;
 __ZNSt3__110__time_putD2Ev($7);
 var $8=$4;
 __ZNSt3__16locale5facetD2Ev($8);
 return;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg_result, $this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $3=__stackBase__;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18=(__stackBase__)+(8);
   var $19;
   var $20;
   var $21;
   var $22=(__stackBase__)+(16);
   var $23=(__stackBase__)+(24);
   var $24=(__stackBase__)+(32);
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $__nar=(__stackBase__)+(40);
   var $__nb;
   var $__ne=(__stackBase__)+(144);
   var $31=(__stackBase__)+(152);
   $25=$this;
   $26=$0;
   $27=$1;
   $28=$__tm;
   $29=$__fmt;
   $30=$__mod;
   var $32=$25;
   var $33=(($__nar)|0);
   $__nb=$33;
   var $34=$__nb;
   var $35=(($34+100)|0);
   HEAP32[(($__ne)>>2)]=$35;
   var $36=$32;
   var $37=(($36+8)|0);
   var $38=$37;
   var $39=$__nb;
   var $40=$28;
   var $41=$29;
   var $42=$30;
   __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($38, $39, $__ne, $40, $41, $42);
   var $43=$__nb;
   var $44=HEAP32[(($__ne)>>2)];
   var $45=$31;
   var $46=$__s;
   assert(4 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];
   var $tmp=$24;
   var $tmp1=$31;
   assert(4 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];HEAP8[((($tmp)+(1))|0)]=HEAP8[((($tmp1)+(1))|0)];HEAP8[((($tmp)+(2))|0)]=HEAP8[((($tmp1)+(2))|0)];HEAP8[((($tmp)+(3))|0)]=HEAP8[((($tmp1)+(3))|0)];
   $20=$43;
   $21=$44;
   var $47=$20;
   $19=$47;
   var $48=$19;
   var $49=$21;
   $4=$49;
   var $50=$4;
   var $51=$23;
   var $52=$24;
   assert(4 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];
   var $tmp2_i=$3;
   var $tmp3_i=$23;
   assert(4 % 1 === 0);HEAP8[($tmp2_i)]=HEAP8[($tmp3_i)];HEAP8[((($tmp2_i)+(1))|0)]=HEAP8[((($tmp3_i)+(1))|0)];HEAP8[((($tmp2_i)+(2))|0)]=HEAP8[((($tmp3_i)+(2))|0)];HEAP8[((($tmp2_i)+(3))|0)]=HEAP8[((($tmp3_i)+(3))|0)];
   var $53=$22;
   var $54=$3;
   assert(4 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];
   var $tmp_i=$18;
   var $tmp1_i=$22;
   assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
   $16=$48;
   $17=$50;
   label = 2; break;
  case 2: 
   var $56=$16;
   var $57=$17;
   var $58=(($56)|(0))!=(($57)|(0));
   if ($58) { label = 3; break; } else { label = 10; break; }
  case 3: 
   $15=$18;
   var $60=$15;
   var $61=$16;
   var $62=HEAP8[($61)];
   $12=$60;
   $13=$62;
   var $63=$12;
   var $64=(($63)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65)|(0))!=0;
   if ($66) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $68=(($63)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=$13;
   $10=$69;
   $11=$70;
   var $71=$10;
   var $72=(($71+24)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($71+28)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($73)|(0))==(($75)|(0));
   if ($76) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $78=$71;
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+52)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$11;
   $8=$82;
   var $83=$8;
   var $84=(($83)&(255));
   var $85=FUNCTION_TABLE[$81]($71, $84);
   $9=$85;
   label = 7; break;
  case 6: 
   var $87=$11;
   var $88=(($71+24)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($89+1)|0);
   HEAP32[(($88)>>2)]=$90;
   HEAP8[($89)]=$87;
   var $91=$11;
   $7=$91;
   var $92=$7;
   var $93=(($92)&(255));
   $9=$93;
   label = 7; break;
  case 7: 
   var $94=$9;
   $5=$94;
   $6=-1;
   var $95=$5;
   var $96=$6;
   var $97=(($95)|(0))==(($96)|(0));
   if ($97) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $99=(($63)|0);
   HEAP32[(($99)>>2)]=0;
   label = 9; break;
  case 9: 
   var $100=$16;
   var $101=(($100+1)|0);
   $16=$101;
   $14=$18;
   var $102=$14;
   label = 2; break;
  case 10: 
   var $103=$agg_result;
   var $104=$18;
   assert(4 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__time_putD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $7=(($2)|0);
   var $8=HEAP32[(($7)>>2)];
   (function() { try { __THREW__ = 0; return _freelocale($8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
  case 3: 
   label = 4; break;
  case 4: 
   return;
  case 5: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1,0); $12$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg_result, $this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   $9=$agg_result;
   var $12=$9;
   $8=$12;
   var $13=$8;
   var $14=$13;
   var $15=(($13)|0);
   $7=$15;
   var $16=$7;
   $6=$16;
   var $17=$6;
   var $18=$17;
   $5=$18;
   var $19=$5;
   var $20=$19;
   $4=$20;
   var $21=$4;
   var $22=(($19)|0);
   $3=$13;
   var $23=$3;
   var $24=(($23)|0);
   $2=$24;
   var $25=$2;
   var $26=$25;
   $1=$26;
   var $27=$1;
   var $28=(($27)|0);
   var $29=(($28)|0);
   var $30=$29;
   var $31=(($30)|0);
   $__a_i_i_i=$31;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $33=$__i_i_i_i;
   var $34=(($33)>>>(0)) < 3;
   if ($34) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $36=$__i_i_i_i;
   var $37=$__a_i_i_i;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=0;
   var $39=$__i_i_i_i;
   var $40=((($39)+(1))|0);
   $__i_i_i_i=$40;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg_result, $this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   $9=$agg_result;
   var $12=$9;
   $8=$12;
   var $13=$8;
   var $14=$13;
   var $15=(($13)|0);
   $7=$15;
   var $16=$7;
   $6=$16;
   var $17=$6;
   var $18=$17;
   $5=$18;
   var $19=$5;
   var $20=$19;
   $4=$20;
   var $21=$4;
   var $22=(($19)|0);
   $3=$13;
   var $23=$3;
   var $24=(($23)|0);
   $2=$24;
   var $25=$2;
   var $26=$25;
   $1=$26;
   var $27=$1;
   var $28=(($27)|0);
   var $29=(($28)|0);
   var $30=$29;
   var $31=(($30)|0);
   $__a_i_i_i=$31;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $33=$__i_i_i_i;
   var $34=(($33)>>>(0)) < 3;
   if ($34) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $36=$__i_i_i_i;
   var $37=$__a_i_i_i;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=0;
   var $39=$__i_i_i_i;
   var $40=((($39)+(1))|0);
   $__i_i_i_i=$40;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg_result, $this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   $9=$agg_result;
   var $12=$9;
   $8=$12;
   var $13=$8;
   var $14=$13;
   var $15=(($13)|0);
   $7=$15;
   var $16=$7;
   $6=$16;
   var $17=$6;
   var $18=$17;
   $5=$18;
   var $19=$5;
   var $20=$19;
   $4=$20;
   var $21=$4;
   var $22=(($19)|0);
   $3=$13;
   var $23=$3;
   var $24=(($23)|0);
   $2=$24;
   var $25=$2;
   var $26=$25;
   $1=$26;
   var $27=$1;
   var $28=(($27)|0);
   var $29=(($28)|0);
   var $30=$29;
   var $31=(($30)|0);
   $__a_i_i_i=$31;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $33=$__i_i_i_i;
   var $34=(($33)>>>(0)) < 3;
   if ($34) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $36=$__i_i_i_i;
   var $37=$__a_i_i_i;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=0;
   var $39=$__i_i_i_i;
   var $40=((($39)+(1))|0);
   $__i_i_i_i=$40;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg_result, $this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   $9=$agg_result;
   var $12=$9;
   $8=$12;
   var $13=$8;
   var $14=$13;
   var $15=(($13)|0);
   $7=$15;
   var $16=$7;
   $6=$16;
   var $17=$6;
   var $18=$17;
   $5=$18;
   var $19=$5;
   var $20=$19;
   $4=$20;
   var $21=$4;
   var $22=(($19)|0);
   $3=$13;
   var $23=$3;
   var $24=(($23)|0);
   $2=$24;
   var $25=$2;
   var $26=$25;
   $1=$26;
   var $27=$1;
   var $28=(($27)|0);
   var $29=(($28)|0);
   var $30=$29;
   var $31=(($30)|0);
   $__a_i_i_i=$31;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $33=$__i_i_i_i;
   var $34=(($33)>>>(0)) < 3;
   if ($34) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $36=$__i_i_i_i;
   var $37=$__a_i_i_i;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=0;
   var $39=$__i_i_i_i;
   var $40=((($39)+(1))|0);
   $__i_i_i_i=$40;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this, $__nb, $__ne, $__tm, $__fmt, $__mod) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__t_i=__stackBase__;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $fmt=(__stackBase__)+(8);
   var $n;
   $6=$this;
   $7=$__nb;
   $8=$__ne;
   $9=$__tm;
   $10=$__fmt;
   $11=$__mod;
   var $12=$6;
   var $13=(($fmt)|0);
   HEAP8[($13)]=37;
   var $14=(($13+1)|0);
   var $15=$10;
   HEAP8[($14)]=$15;
   var $16=(($14+1)|0);
   var $17=$11;
   HEAP8[($16)]=$17;
   var $18=(($16+1)|0);
   HEAP8[($18)]=0;
   var $19=$11;
   var $20=(($19 << 24) >> 24);
   var $21=(($20)|(0))!=0;
   if ($21) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $23=(($fmt+1)|0);
   var $24=(($fmt+2)|0);
   $4=$23;
   $5=$24;
   var $25=$4;
   $3=$25;
   var $26=$3;
   var $27=HEAP8[($26)];
   HEAP8[($__t_i)]=$27;
   var $28=$5;
   $1=$28;
   var $29=$1;
   var $30=HEAP8[($29)];
   var $31=$4;
   HEAP8[($31)]=$30;
   $2=$__t_i;
   var $32=$2;
   var $33=HEAP8[($32)];
   var $34=$5;
   HEAP8[($34)]=$33;
   label = 3; break;
  case 3: 
   var $36=$7;
   var $37=$7;
   var $38=$8;
   var $39=HEAP32[(($38)>>2)];
   var $40=__ZNSt3__112_GLOBAL__N_17countofIcEEjPKT_S4_($37, $39);
   var $41=(($fmt)|0);
   var $42=$9;
   var $43=(($12)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=_strftime($36, $40, $41, $42, $44);
   $n=$45;
   var $46=$7;
   var $47=$n;
   var $48=(($46+$47)|0);
   var $49=$8;
   HEAP32[(($49)>>2)]=$48;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 var $8=(($7+8)|0);
 var $9=$8;
 __ZNSt3__110__time_putD2Ev($9);
 var $10=$6;
 __ZNSt3__16locale5facetD2Ev($10);
 var $11=$4;
 __ZdlPv($11);
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 var $6=(($5+8)|0);
 var $7=$6;
 __ZNSt3__110__time_putD2Ev($7);
 var $8=$4;
 __ZNSt3__16locale5facetD2Ev($8);
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg_result, $this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 456)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $3=__stackBase__;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18=(__stackBase__)+(8);
   var $19;
   var $20;
   var $21;
   var $22=(__stackBase__)+(16);
   var $23=(__stackBase__)+(24);
   var $24=(__stackBase__)+(32);
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $__nar=(__stackBase__)+(40);
   var $__nb;
   var $__ne=(__stackBase__)+(440);
   var $31=(__stackBase__)+(448);
   $25=$this;
   $26=$0;
   $27=$1;
   $28=$__tm;
   $29=$__fmt;
   $30=$__mod;
   var $32=$25;
   var $33=(($__nar)|0);
   $__nb=$33;
   var $34=$__nb;
   var $35=(($34+400)|0);
   HEAP32[(($__ne)>>2)]=$35;
   var $36=$32;
   var $37=(($36+8)|0);
   var $38=$37;
   var $39=$__nb;
   var $40=$28;
   var $41=$29;
   var $42=$30;
   __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($38, $39, $__ne, $40, $41, $42);
   var $43=$__nb;
   var $44=HEAP32[(($__ne)>>2)];
   var $45=$31;
   var $46=$__s;
   assert(4 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];
   var $tmp=$24;
   var $tmp1=$31;
   assert(4 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];HEAP8[((($tmp)+(1))|0)]=HEAP8[((($tmp1)+(1))|0)];HEAP8[((($tmp)+(2))|0)]=HEAP8[((($tmp1)+(2))|0)];HEAP8[((($tmp)+(3))|0)]=HEAP8[((($tmp1)+(3))|0)];
   $20=$43;
   $21=$44;
   var $47=$20;
   $19=$47;
   var $48=$19;
   var $49=$21;
   $4=$49;
   var $50=$4;
   var $51=$23;
   var $52=$24;
   assert(4 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];
   var $tmp2_i=$3;
   var $tmp3_i=$23;
   assert(4 % 1 === 0);HEAP8[($tmp2_i)]=HEAP8[($tmp3_i)];HEAP8[((($tmp2_i)+(1))|0)]=HEAP8[((($tmp3_i)+(1))|0)];HEAP8[((($tmp2_i)+(2))|0)]=HEAP8[((($tmp3_i)+(2))|0)];HEAP8[((($tmp2_i)+(3))|0)]=HEAP8[((($tmp3_i)+(3))|0)];
   var $53=$22;
   var $54=$3;
   assert(4 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];
   var $tmp_i=$18;
   var $tmp1_i=$22;
   assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
   $16=$48;
   $17=$50;
   label = 2; break;
  case 2: 
   var $56=$16;
   var $57=$17;
   var $58=(($56)|(0))!=(($57)|(0));
   if ($58) { label = 3; break; } else { label = 10; break; }
  case 3: 
   $15=$18;
   var $60=$15;
   var $61=$16;
   var $62=HEAP32[(($61)>>2)];
   $12=$60;
   $13=$62;
   var $63=$12;
   var $64=(($63)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65)|(0))!=0;
   if ($66) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $68=(($63)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=$13;
   $10=$69;
   $11=$70;
   var $71=$10;
   var $72=(($71+24)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($71+28)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($73)|(0))==(($75)|(0));
   if ($76) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $78=$71;
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+52)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$11;
   $8=$82;
   var $83=$8;
   var $84=FUNCTION_TABLE[$81]($71, $83);
   $9=$84;
   label = 7; break;
  case 6: 
   var $86=$11;
   var $87=(($71+24)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88+4)|0);
   HEAP32[(($87)>>2)]=$89;
   HEAP32[(($88)>>2)]=$86;
   var $90=$11;
   $7=$90;
   var $91=$7;
   $9=$91;
   label = 7; break;
  case 7: 
   var $92=$9;
   $5=$92;
   $6=-1;
   var $93=$5;
   var $94=$6;
   var $95=(($93)|(0))==(($94)|(0));
   if ($95) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $97=(($63)|0);
   HEAP32[(($97)>>2)]=0;
   label = 9; break;
  case 9: 
   var $98=$16;
   var $99=(($98+4)|0);
   $16=$99;
   $14=$18;
   var $100=$14;
   label = 2; break;
  case 10: 
   var $101=$agg_result;
   var $102=$18;
   assert(4 % 1 === 0);HEAP32[(($101)>>2)]=HEAP32[(($102)>>2)];
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg_result, $this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 $11=$this;
 var $12=$11;
 $8=$agg_result;
 $9=1;
 $10=45;
 var $13=$8;
 var $14=$9;
 var $15=$10;
 $5=$13;
 $6=$14;
 $7=$15;
 var $16=$5;
 var $17=$16;
 var $18=(($16)|0);
 $4=$18;
 var $19=$4;
 $3=$19;
 var $20=$3;
 var $21=$20;
 $2=$21;
 var $22=$2;
 var $23=$22;
 $1=$23;
 var $24=$1;
 var $25=(($22)|0);
 var $26=$6;
 var $27=$7;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($16, $26, $27);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg_result, $this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$agg_result;
 assert(4 % 1 === 0);HEAP8[($3)]=HEAP8[((((10856)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((10856)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((10856)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((10856)|0))+(3))|0)];
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg_result, $this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$agg_result;
 assert(4 % 1 === 0);HEAP8[($3)]=HEAP8[((((10864)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((10864)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((10864)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((10864)|0))+(3))|0)];
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this, $__wb, $__we, $__tm, $__fmt, $__mod) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i1_i;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i_i;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25=__stackBase__;
   var $26=(__stackBase__)+(8);
   var $27;
   var $28;
   var $29=(__stackBase__)+(16);
   var $30=(__stackBase__)+(24);
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $__current_i=(__stackBase__)+(32);
   var $46=(__stackBase__)+(40);
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $__nar=(__stackBase__)+(48);
   var $__ne=(__stackBase__)+(152);
   var $mb=(__stackBase__)+(160);
   var $__nb=(__stackBase__)+(168);
   var $j;
   $50=$this;
   $51=$__wb;
   $52=$__we;
   $53=$__tm;
   $54=$__fmt;
   $55=$__mod;
   var $56=$50;
   var $57=(($__nar)|0);
   var $58=(($57+100)|0);
   HEAP32[(($__ne)>>2)]=$58;
   var $59=(($__nar)|0);
   var $60=$53;
   var $61=$54;
   var $62=$55;
   __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($56, $59, $__ne, $60, $61, $62);
   var $63=$mb;
   HEAP32[(($63)>>2)]=0; HEAP32[((($63)+(4))>>2)]=0;
   var $64=(($__nar)|0);
   HEAP32[(($__nb)>>2)]=$64;
   var $65=$51;
   var $66=$51;
   var $67=$52;
   var $68=HEAP32[(($67)>>2)];
   var $69=__ZNSt3__112_GLOBAL__N_17countofIwEEjPKT_S4_($66, $68);
   var $70=(($56)|0);
   var $71=HEAP32[(($70)>>2)];
   $41=$65;
   $42=$__nb;
   $43=$69;
   $44=$mb;
   $45=$71;
   var $72=$45;
   var $73=_uselocale($72);
   HEAP32[(($46)>>2)]=284;
   $38=$__current_i;
   $39=$73;
   $40=$46;
   var $74=$38;
   var $75=$39;
   var $76=$40;
   $35=$74;
   $36=$75;
   $37=$76;
   var $77=$35;
   var $78=(($77)|0);
   var $79=$36;
   var $80=$37;
   $34=$80;
   var $81=$34;
   var $82=HEAP32[(($81)>>2)];
   $31=$78;
   $32=$79;
   $33=$82;
   var $83=$31;
   var $84=$32;
   var $85=$33;
   $28=$83;
   HEAP32[(($29)>>2)]=$84;
   HEAP32[(($30)>>2)]=$85;
   var $86=$28;
   var $87=$86;
   $27=$29;
   var $88=$27;
   var $89=HEAP32[(($88)>>2)];
   $21=$30;
   var $90=$21;
   var $91=HEAP32[(($90)>>2)];
   $24=$87;
   HEAP32[(($25)>>2)]=$89;
   HEAP32[(($26)>>2)]=$91;
   var $92=$24;
   var $93=(($92)|0);
   $23=$25;
   var $94=$23;
   var $95=HEAP32[(($94)>>2)];
   HEAP32[(($93)>>2)]=$95;
   var $96=(($92+4)|0);
   $22=$26;
   var $97=$22;
   var $98=HEAP32[(($97)>>2)];
   HEAP32[(($96)>>2)]=$98;
   var $99=$41;
   var $100=$42;
   var $101=$43;
   var $102=$44;
   var $103 = (function() { try { __THREW__ = 0; return _mbsrtowcs($99, $100, $101, $102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
  case 2: 
   $49=1;
   $10=$__current_i;
   var $105=$10;
   $9=$105;
   var $106=$9;
   $7=$106;
   $8=0;
   var $107=$7;
   var $108=(($107)|0);
   $6=$108;
   var $109=$6;
   var $110=$109;
   $5=$110;
   var $111=$5;
   var $112=(($111)|0);
   var $113=HEAP32[(($112)>>2)];
   $__tmp_i_i_i1_i=$113;
   var $114=$8;
   var $115=(($107)|0);
   $4=$115;
   var $116=$4;
   var $117=$116;
   $3=$117;
   var $118=$3;
   var $119=(($118)|0);
   HEAP32[(($119)>>2)]=$114;
   var $120=$__tmp_i_i_i1_i;
   var $121=(($120)|(0))!=0;
   if ($121) { label = 3; break; } else { label = 11; break; }
  case 3: 
   var $123=(($107)|0);
   $2=$123;
   var $124=$2;
   var $125=$124;
   $1=$125;
   var $126=$1;
   var $127=(($126+4)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=$__tmp_i_i_i1_i;
   var $130 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$128]($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 11; break;
  case 5: 
   var $133$0 = ___cxa_find_matching_catch(-1, -1,0); $133$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 6: 
   var $135$0 = ___cxa_find_matching_catch(-1, -1); $135$1 = tempRet0;
   var $136=$135$0;
   $47=$136;
   var $137=$135$1;
   $48=$137;
   $20=$__current_i;
   var $138=$20;
   $19=$138;
   var $139=$19;
   $17=$139;
   $18=0;
   var $140=$17;
   var $141=(($140)|0);
   $16=$141;
   var $142=$16;
   var $143=$142;
   $15=$143;
   var $144=$15;
   var $145=(($144)|0);
   var $146=HEAP32[(($145)>>2)];
   $__tmp_i_i_i_i=$146;
   var $147=$18;
   var $148=(($140)|0);
   $14=$148;
   var $149=$14;
   var $150=$149;
   $13=$150;
   var $151=$13;
   var $152=(($151)|0);
   HEAP32[(($152)>>2)]=$147;
   var $153=$__tmp_i_i_i_i;
   var $154=(($153)|(0))!=0;
   if ($154) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $156=(($140)|0);
   $12=$156;
   var $157=$12;
   var $158=$157;
   $11=$158;
   var $159=$11;
   var $160=(($159+4)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=$__tmp_i_i_i_i;
   var $163 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$161]($162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 9; break; }
  case 8: 
   label = 10; break;
  case 9: 
   var $166$0 = ___cxa_find_matching_catch(-1, -1,0); $166$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 10: 
   var $167=$47;
   var $168=$48;
   var $169$0=$167;
   var $169$1=0;
   var $170$0=$169$0;
   var $170$1=$168;
   ___resumeException($170$0)
  case 11: 
   $j=$103;
   var $171=$j;
   var $172=(($171)|(0))==-1;
   if ($172) { label = 12; break; } else { label = 13; break; }
  case 12: 
   __ZNSt3__121__throw_runtime_errorEPKc(((1976)|0));
   label = 13; break;
  case 13: 
   var $175=$51;
   var $176=$j;
   var $177=(($175+($176<<2))|0);
   var $178=$52;
   HEAP32[(($178)>>2)]=$177;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg_result, $this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   $9=$agg_result;
   var $12=$9;
   $8=$12;
   var $13=$8;
   var $14=$13;
   var $15=(($13)|0);
   $7=$15;
   var $16=$7;
   $6=$16;
   var $17=$6;
   var $18=$17;
   $5=$18;
   var $19=$5;
   var $20=$19;
   $4=$20;
   var $21=$4;
   var $22=(($19)|0);
   $3=$13;
   var $23=$3;
   var $24=(($23)|0);
   $2=$24;
   var $25=$2;
   var $26=$25;
   $1=$26;
   var $27=$1;
   var $28=(($27)|0);
   var $29=(($28)|0);
   var $30=$29;
   var $31=(($30)|0);
   $__a_i_i_i=$31;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $33=$__i_i_i_i;
   var $34=(($33)>>>(0)) < 3;
   if ($34) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $36=$__i_i_i_i;
   var $37=$__a_i_i_i;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=0;
   var $39=$__i_i_i_i;
   var $40=((($39)+(1))|0);
   $__i_i_i_i=$40;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg_result, $this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   $9=$agg_result;
   var $12=$9;
   $8=$12;
   var $13=$8;
   var $14=$13;
   var $15=(($13)|0);
   $7=$15;
   var $16=$7;
   $6=$16;
   var $17=$6;
   var $18=$17;
   $5=$18;
   var $19=$5;
   var $20=$19;
   $4=$20;
   var $21=$4;
   var $22=(($19)|0);
   $3=$13;
   var $23=$3;
   var $24=(($23)|0);
   $2=$24;
   var $25=$2;
   var $26=$25;
   $1=$26;
   var $27=$1;
   var $28=(($27)|0);
   var $29=(($28)|0);
   var $30=$29;
   var $31=(($30)|0);
   $__a_i_i_i=$31;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $33=$__i_i_i_i;
   var $34=(($33)>>>(0)) < 3;
   if ($34) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $36=$__i_i_i_i;
   var $37=$__a_i_i_i;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=0;
   var $39=$__i_i_i_i;
   var $40=((($39)+(1))|0);
   $__i_i_i_i=$40;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg_result, $this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   $9=$agg_result;
   var $12=$9;
   $8=$12;
   var $13=$8;
   var $14=$13;
   var $15=(($13)|0);
   $7=$15;
   var $16=$7;
   $6=$16;
   var $17=$6;
   var $18=$17;
   $5=$18;
   var $19=$5;
   var $20=$19;
   $4=$20;
   var $21=$4;
   var $22=(($19)|0);
   $3=$13;
   var $23=$3;
   var $24=(($23)|0);
   $2=$24;
   var $25=$2;
   var $26=$25;
   $1=$26;
   var $27=$1;
   var $28=(($27)|0);
   var $29=(($28)|0);
   var $30=$29;
   var $31=(($30)|0);
   $__a_i_i_i=$31;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $33=$__i_i_i_i;
   var $34=(($33)>>>(0)) < 3;
   if ($34) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $36=$__i_i_i_i;
   var $37=$__a_i_i_i;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=0;
   var $39=$__i_i_i_i;
   var $40=((($39)+(1))|0);
   $__i_i_i_i=$40;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg_result, $this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   $9=$agg_result;
   var $12=$9;
   $8=$12;
   var $13=$8;
   var $14=$13;
   var $15=(($13)|0);
   $7=$15;
   var $16=$7;
   $6=$16;
   var $17=$6;
   var $18=$17;
   $5=$18;
   var $19=$5;
   var $20=$19;
   $4=$20;
   var $21=$4;
   var $22=(($19)|0);
   $3=$13;
   var $23=$3;
   var $24=(($23)|0);
   $2=$24;
   var $25=$2;
   var $26=$25;
   $1=$26;
   var $27=$1;
   var $28=(($27)|0);
   var $29=(($28)|0);
   var $30=$29;
   var $31=(($30)|0);
   $__a_i_i_i=$31;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $33=$__i_i_i_i;
   var $34=(($33)>>>(0)) < 3;
   if ($34) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $36=$__i_i_i_i;
   var $37=$__a_i_i_i;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=0;
   var $39=$__i_i_i_i;
   var $40=((($39)+(1))|0);
   $__i_i_i_i=$40;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg_result, $this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   $9=$agg_result;
   var $12=$9;
   $8=$12;
   var $13=$8;
   var $14=$13;
   var $15=(($13)|0);
   $7=$15;
   var $16=$7;
   $6=$16;
   var $17=$6;
   var $18=$17;
   $5=$18;
   var $19=$5;
   var $20=$19;
   $4=$20;
   var $21=$4;
   var $22=(($19)|0);
   $3=$13;
   var $23=$3;
   var $24=(($23)|0);
   $2=$24;
   var $25=$2;
   var $26=$25;
   $1=$26;
   var $27=$1;
   var $28=(($27)|0);
   var $29=(($28)|0);
   var $30=$29;
   var $31=(($30)|0);
   $__a_i_i_i=$31;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $33=$__i_i_i_i;
   var $34=(($33)>>>(0)) < 3;
   if ($34) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $36=$__i_i_i_i;
   var $37=$__a_i_i_i;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=0;
   var $39=$__i_i_i_i;
   var $40=((($39)+(1))|0);
   $__i_i_i_i=$40;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg_result, $this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   $9=$agg_result;
   var $12=$9;
   $8=$12;
   var $13=$8;
   var $14=$13;
   var $15=(($13)|0);
   $7=$15;
   var $16=$7;
   $6=$16;
   var $17=$6;
   var $18=$17;
   $5=$18;
   var $19=$5;
   var $20=$19;
   $4=$20;
   var $21=$4;
   var $22=(($19)|0);
   $3=$13;
   var $23=$3;
   var $24=(($23)|0);
   $2=$24;
   var $25=$2;
   var $26=$25;
   $1=$26;
   var $27=$1;
   var $28=(($27)|0);
   var $29=(($28)|0);
   var $30=$29;
   var $31=(($30)|0);
   $__a_i_i_i=$31;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $33=$__i_i_i_i;
   var $34=(($33)>>>(0)) < 3;
   if ($34) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $36=$__i_i_i_i;
   var $37=$__a_i_i_i;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=0;
   var $39=$__i_i_i_i;
   var $40=((($39)+(1))|0);
   $__i_i_i_i=$40;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg_result, $this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   $9=$agg_result;
   var $12=$9;
   $8=$12;
   var $13=$8;
   var $14=$13;
   var $15=(($13)|0);
   $7=$15;
   var $16=$7;
   $6=$16;
   var $17=$6;
   var $18=$17;
   $5=$18;
   var $19=$5;
   var $20=$19;
   $4=$20;
   var $21=$4;
   var $22=(($19)|0);
   $3=$13;
   var $23=$3;
   var $24=(($23)|0);
   $2=$24;
   var $25=$2;
   var $26=$25;
   $1=$26;
   var $27=$1;
   var $28=(($27)|0);
   var $29=(($28)|0);
   var $30=$29;
   var $31=(($30)|0);
   $__a_i_i_i=$31;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $33=$__i_i_i_i;
   var $34=(($33)>>>(0)) < 3;
   if ($34) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $36=$__i_i_i_i;
   var $37=$__a_i_i_i;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=0;
   var $39=$__i_i_i_i;
   var $40=((($39)+(1))|0);
   $__i_i_i_i=$40;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg_result, $this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   $9=$agg_result;
   var $12=$9;
   $8=$12;
   var $13=$8;
   var $14=$13;
   var $15=(($13)|0);
   $7=$15;
   var $16=$7;
   $6=$16;
   var $17=$6;
   var $18=$17;
   $5=$18;
   var $19=$5;
   var $20=$19;
   $4=$20;
   var $21=$4;
   var $22=(($19)|0);
   $3=$13;
   var $23=$3;
   var $24=(($23)|0);
   $2=$24;
   var $25=$2;
   var $26=$25;
   $1=$26;
   var $27=$1;
   var $28=(($27)|0);
   var $29=(($28)|0);
   var $30=$29;
   var $31=(($30)|0);
   $__a_i_i_i=$31;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $33=$__i_i_i_i;
   var $34=(($33)>>>(0)) < 3;
   if ($34) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $36=$__i_i_i_i;
   var $37=$__a_i_i_i;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=0;
   var $39=$__i_i_i_i;
   var $40=((($39)+(1))|0);
   $__i_i_i_i=$40;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg_result, $this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 $11=$this;
 var $12=$11;
 $8=$agg_result;
 $9=1;
 $10=45;
 var $13=$8;
 var $14=$9;
 var $15=$10;
 $5=$13;
 $6=$14;
 $7=$15;
 var $16=$5;
 var $17=$16;
 var $18=(($16)|0);
 $4=$18;
 var $19=$4;
 $3=$19;
 var $20=$3;
 var $21=$20;
 $2=$21;
 var $22=$2;
 var $23=$22;
 $1=$23;
 var $24=$1;
 var $25=(($22)|0);
 var $26=$6;
 var $27=$7;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($16, $26, $27);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg_result, $this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$agg_result;
 assert(4 % 1 === 0);HEAP8[($3)]=HEAP8[((((10840)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((10840)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((10840)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((10840)|0))+(3))|0)];
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg_result, $this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$agg_result;
 assert(4 % 1 === 0);HEAP8[($3)]=HEAP8[((((10848)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((10848)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((10848)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((10848)|0))+(3))|0)];
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg_result, $this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 $11=$this;
 var $12=$11;
 $8=$agg_result;
 $9=1;
 $10=45;
 var $13=$8;
 var $14=$9;
 var $15=$10;
 $5=$13;
 $6=$14;
 $7=$15;
 var $16=$5;
 var $17=$16;
 var $18=(($16)|0);
 $4=$18;
 var $19=$4;
 $3=$19;
 var $20=$3;
 var $21=$20;
 $2=$21;
 var $22=$2;
 var $23=$22;
 $1=$23;
 var $24=$1;
 var $25=(($22)|0);
 var $26=$6;
 var $27=$7;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($16, $26, $27);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg_result, $this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$agg_result;
 assert(4 % 1 === 0);HEAP8[($3)]=HEAP8[((((10824)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((10824)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((10824)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((10824)|0))+(3))|0)];
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg_result, $this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$agg_result;
 assert(4 % 1 === 0);HEAP8[($3)]=HEAP8[((((10832)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((10832)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((10832)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((10832)|0))+(3))|0)];
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg_result, $this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 $11=$this;
 var $12=$11;
 $8=$agg_result;
 $9=1;
 $10=45;
 var $13=$8;
 var $14=$9;
 var $15=$10;
 $5=$13;
 $6=$14;
 $7=$15;
 var $16=$5;
 var $17=$16;
 var $18=(($16)|0);
 $4=$18;
 var $19=$4;
 $3=$19;
 var $20=$3;
 var $21=$20;
 $2=$21;
 var $22=$2;
 var $23=$22;
 $1=$23;
 var $24=$1;
 var $25=(($22)|0);
 var $26=$6;
 var $27=$7;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($16, $26, $27);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg_result, $this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$agg_result;
 assert(4 % 1 === 0);HEAP8[($3)]=HEAP8[((((10808)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((10808)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((10808)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((10808)|0))+(3))|0)];
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg_result, $this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$agg_result;
 assert(4 % 1 === 0);HEAP8[($3)]=HEAP8[((((10816)|0))|0)];HEAP8[((($3)+(1))|0)]=HEAP8[(((((10816)|0))+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[(((((10816)|0))+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[(((((10816)|0))+(3))|0)];
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNSt3__112__do_nothingEPv($0) {
 var label = 0;
 var $2;
 $2=$0;
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 352)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i6;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $__tmp_i_i_i3;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $__tmp_i;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $__tmp_i_i_i1;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78=__stackBase__;
   var $79=(__stackBase__)+(8);
   var $80;
   var $81;
   var $82=(__stackBase__)+(16);
   var $83=(__stackBase__)+(24);
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105;
   var $106;
   var $107;
   var $__tmp_i_i_i;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114=(__stackBase__)+(32);
   var $115=(__stackBase__)+(40);
   var $116;
   var $117;
   var $118=(__stackBase__)+(48);
   var $119=(__stackBase__)+(56);
   var $120;
   var $121;
   var $122;
   var $123;
   var $124;
   var $125;
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $__bz;
   var $__wbuf=(__stackBase__)+(64);
   var $__wb=(__stackBase__)+(168);
   var $135=(__stackBase__)+(176);
   var $__wn=(__stackBase__)+(184);
   var $__we;
   var $__loc=(__stackBase__)+(192);
   var $136;
   var $137;
   var $__ct;
   var $__neg=(__stackBase__)+(200);
   var $138=(__stackBase__)+(208);
   var $__atoms=(__stackBase__)+(216);
   var $__nbuf=(__stackBase__)+(232);
   var $__nc;
   var $__h=(__stackBase__)+(336);
   var $139=(__stackBase__)+(344);
   var $__w;
   var $140;
   $130=$this;
   var $141=(($__intl)&(1));
   $131=$141;
   $132=$__iob;
   $133=$__err;
   $134=$__v;
   var $142=$130;
   $__bz=100;
   var $143=(($__wbuf)|0);
   HEAP32[(($135)>>2)]=542;
   $127=$__wb;
   $128=$143;
   $129=$135;
   var $144=$127;
   var $145=$128;
   var $146=$129;
   $124=$144;
   $125=$145;
   $126=$146;
   var $147=$124;
   var $148=(($147)|0);
   var $149=$125;
   var $150=$126;
   $123=$150;
   var $151=$123;
   var $152=HEAP32[(($151)>>2)];
   $120=$148;
   $121=$149;
   $122=$152;
   var $153=$120;
   var $154=$121;
   var $155=$122;
   $117=$153;
   HEAP32[(($118)>>2)]=$154;
   HEAP32[(($119)>>2)]=$155;
   var $156=$117;
   var $157=$156;
   $116=$118;
   var $158=$116;
   var $159=HEAP32[(($158)>>2)];
   $110=$119;
   var $160=$110;
   var $161=HEAP32[(($160)>>2)];
   $113=$157;
   HEAP32[(($114)>>2)]=$159;
   HEAP32[(($115)>>2)]=$161;
   var $162=$113;
   var $163=(($162)|0);
   $112=$114;
   var $164=$112;
   var $165=HEAP32[(($164)>>2)];
   HEAP32[(($163)>>2)]=$165;
   var $166=(($162+4)|0);
   $111=$115;
   var $167=$111;
   var $168=HEAP32[(($167)>>2)];
   HEAP32[(($166)>>2)]=$168;
   var $169=(($__wbuf)|0);
   var $170=(($169+100)|0);
   $__we=$170;
   var $171=$132;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc, $171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 17; break; }
  case 2: 
   $99=$__loc;
   var $173=$99;
   var $174 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($173, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 18; break; }
  case 3: 
   var $175=$174;
   label = 4; break;
  case 4: 
   $__ct=$175;
   HEAP8[($__neg)]=0;
   var $177=$138;
   var $178=$__e;
   assert(4 % 1 === 0);HEAP32[(($177)>>2)]=HEAP32[(($178)>>2)];
   var $179=$131;
   var $180=(($179) & 1);
   var $181=$132;
   $98=$181;
   var $182=$98;
   var $183=(($182+4)|0);
   var $184=HEAP32[(($183)>>2)];
   label = 5; break;
  case 5: 
   var $186=$133;
   var $187=$__ct;
   var $188=$__we;
   var $189 = (function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $138, $180, $__loc, $184, $186, $__neg, $187, $__wb, $__wn, $188) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 18; break; }
  case 6: 
   if ($189) { label = 7; break; } else { label = 47; break; }
  case 7: 
   var $192=$__ct;
   var $193=(($__atoms)|0);
   $94=$192;
   $95=((10248)|0);
   $96=((10258)|0);
   $97=$193;
   var $194=$94;
   var $195=$194;
   var $196=HEAP32[(($195)>>2)];
   var $197=(($196+32)|0);
   var $198=HEAP32[(($197)>>2)];
   var $199=$95;
   var $200=$96;
   var $201=$97;
   var $202 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$198]($194, $199, $200, $201) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 18; break; }
  case 8: 
   label = 9; break;
  case 9: 
   var $204=(($__nbuf)|0);
   $__nc=$204;
   HEAP32[(($139)>>2)]=272;
   $91=$__h;
   $92=0;
   $93=$139;
   var $205=$91;
   var $206=$92;
   var $207=$93;
   $88=$205;
   $89=$206;
   $90=$207;
   var $208=$88;
   var $209=(($208)|0);
   var $210=$89;
   var $211=$90;
   $87=$211;
   var $212=$87;
   var $213=HEAP32[(($212)>>2)];
   $84=$209;
   $85=$210;
   $86=$213;
   var $214=$84;
   var $215=$85;
   var $216=$86;
   $81=$214;
   HEAP32[(($82)>>2)]=$215;
   HEAP32[(($83)>>2)]=$216;
   var $217=$81;
   var $218=$217;
   $80=$82;
   var $219=$80;
   var $220=HEAP32[(($219)>>2)];
   $74=$83;
   var $221=$74;
   var $222=HEAP32[(($221)>>2)];
   $77=$218;
   HEAP32[(($78)>>2)]=$220;
   HEAP32[(($79)>>2)]=$222;
   var $223=$77;
   var $224=(($223)|0);
   $76=$78;
   var $225=$76;
   var $226=HEAP32[(($225)>>2)];
   HEAP32[(($224)>>2)]=$226;
   var $227=(($223+4)|0);
   $75=$79;
   var $228=$75;
   var $229=HEAP32[(($228)>>2)];
   HEAP32[(($227)>>2)]=$229;
   var $230=HEAP32[(($__wn)>>2)];
   $73=$__wb;
   var $231=$73;
   var $232=(($231)|0);
   $72=$232;
   var $233=$72;
   var $234=$233;
   $71=$234;
   var $235=$71;
   var $236=(($235)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=$230;
   var $239=$237;
   var $240=((($238)-($239))|0);
   var $241=(($240)|(0)) > 98;
   if ($241) { label = 10; break; } else { label = 25; break; }
  case 10: 
   var $243=HEAP32[(($__wn)>>2)];
   $60=$__wb;
   var $244=$60;
   var $245=(($244)|0);
   $59=$245;
   var $246=$59;
   var $247=$246;
   $58=$247;
   var $248=$58;
   var $249=(($248)|0);
   var $250=HEAP32[(($249)>>2)];
   var $251=$243;
   var $252=$250;
   var $253=((($251)-($252))|0);
   var $254=((($253)+(2))|0);
   var $255=_malloc($254);
   $56=$__h;
   $57=$255;
   var $256=$56;
   var $257=(($256)|0);
   $55=$257;
   var $258=$55;
   var $259=$258;
   $54=$259;
   var $260=$54;
   var $261=(($260)|0);
   var $262=HEAP32[(($261)>>2)];
   $__tmp_i=$262;
   var $263=$57;
   var $264=(($256)|0);
   $53=$264;
   var $265=$53;
   var $266=$265;
   $52=$266;
   var $267=$52;
   var $268=(($267)|0);
   HEAP32[(($268)>>2)]=$263;
   var $269=$__tmp_i;
   var $270=(($269)|(0))!=0;
   if ($270) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $272=(($256)|0);
   $51=$272;
   var $273=$51;
   var $274=$273;
   $50=$274;
   var $275=$50;
   var $276=(($275+4)|0);
   var $277=HEAP32[(($276)>>2)];
   var $278=$__tmp_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$277]($278) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 13; break; }
  case 12: 
   label = 14; break;
  case 13: 
   var $281$0 = ___cxa_find_matching_catch(-1, -1,0); $281$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 14: 
   $49=$__h;
   var $282=$49;
   var $283=(($282)|0);
   $48=$283;
   var $284=$48;
   var $285=$284;
   $47=$285;
   var $286=$47;
   var $287=(($286)|0);
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288)|(0))==0;
   if ($289) { label = 15; break; } else { label = 24; break; }
  case 15: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 19; break; }
  case 16: 
   label = 24; break;
  case 17: 
   var $293$0 = ___cxa_find_matching_catch(-1, -1); $293$1 = tempRet0;
   var $294=$293$0;
   $136=$294;
   var $295=$293$1;
   $137=$295;
   label = 70; break;
  case 18: 
   var $297$0 = ___cxa_find_matching_catch(-1, -1); $297$1 = tempRet0;
   var $298=$297$0;
   $136=$298;
   var $299=$297$1;
   $137=$299;
   label = 69; break;
  case 19: 
   var $301$0 = ___cxa_find_matching_catch(-1, -1); $301$1 = tempRet0;
   var $302=$301$0;
   $136=$302;
   var $303=$301$1;
   $137=$303;
   $46=$__h;
   var $304=$46;
   $45=$304;
   var $305=$45;
   $43=$305;
   $44=0;
   var $306=$43;
   var $307=(($306)|0);
   $42=$307;
   var $308=$42;
   var $309=$308;
   $41=$309;
   var $310=$41;
   var $311=(($310)|0);
   var $312=HEAP32[(($311)>>2)];
   $__tmp_i_i_i3=$312;
   var $313=$44;
   var $314=(($306)|0);
   $40=$314;
   var $315=$40;
   var $316=$315;
   $39=$316;
   var $317=$39;
   var $318=(($317)|0);
   HEAP32[(($318)>>2)]=$313;
   var $319=$__tmp_i_i_i3;
   var $320=(($319)|(0))!=0;
   if ($320) { label = 20; break; } else { label = 23; break; }
  case 20: 
   var $322=(($306)|0);
   $38=$322;
   var $323=$38;
   var $324=$323;
   $37=$324;
   var $325=$37;
   var $326=(($325+4)|0);
   var $327=HEAP32[(($326)>>2)];
   var $328=$__tmp_i_i_i3;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$327]($328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 22; break; }
  case 21: 
   label = 23; break;
  case 22: 
   var $331$0 = ___cxa_find_matching_catch(-1, -1,0); $331$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 23: 
   label = 69; break;
  case 24: 
   $36=$__h;
   var $333=$36;
   var $334=(($333)|0);
   $35=$334;
   var $335=$35;
   var $336=$335;
   $34=$336;
   var $337=$34;
   var $338=(($337)|0);
   var $339=HEAP32[(($338)>>2)];
   $__nc=$339;
   label = 25; break;
  case 25: 
   var $341=HEAP8[($__neg)];
   var $342=(($341) & 1);
   if ($342) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $344=$__nc;
   var $345=(($344+1)|0);
   $__nc=$345;
   HEAP8[($344)]=45;
   label = 27; break;
  case 27: 
   $33=$__wb;
   var $347=$33;
   var $348=(($347)|0);
   $32=$348;
   var $349=$32;
   var $350=$349;
   $31=$350;
   var $351=$31;
   var $352=(($351)|0);
   var $353=HEAP32[(($352)>>2)];
   $__w=$353;
   label = 28; break;
  case 28: 
   var $355=$__w;
   var $356=HEAP32[(($__wn)>>2)];
   var $357=(($355)>>>(0)) < (($356)>>>(0));
   if ($357) { label = 29; break; } else { label = 38; break; }
  case 29: 
   var $359=(($__atoms)|0);
   $30=$__atoms;
   var $360=$30;
   var $361=(($360)|0);
   var $362=(($361+10)|0);
   label = 30; break;
  case 30: 
   var $364=$__w;
   $11=$359;
   $12=$362;
   $13=$364;
   label = 31; break;
  case 31: 
   var $366=$11;
   var $367=$12;
   var $368=(($366)|(0))!=(($367)|(0));
   if ($368) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $370=$11;
   var $371=HEAP8[($370)];
   var $372=(($371 << 24) >> 24);
   var $373=$13;
   var $374=HEAP8[($373)];
   var $375=(($374 << 24) >> 24);
   var $376=(($372)|(0))==(($375)|(0));
   if ($376) { label = 33; break; } else { label = 34; break; }
  case 33: 
   label = 35; break;
  case 34: 
   var $379=$11;
   var $380=(($379+1)|0);
   $11=$380;
   label = 31; break;
  case 35: 
   var $381=$11;
   label = 36; break;
  case 36: 
   var $383=(($__atoms)|0);
   var $384=$381;
   var $385=$383;
   var $386=((($384)-($385))|0);
   var $387=((10248+$386)|0);
   var $388=HEAP8[($387)];
   var $389=$__nc;
   HEAP8[($389)]=$388;
   label = 37; break;
  case 37: 
   var $391=$__w;
   var $392=(($391+1)|0);
   $__w=$392;
   var $393=$__nc;
   var $394=(($393+1)|0);
   $__nc=$394;
   label = 28; break;
  case 38: 
   var $396=$__nc;
   HEAP8[($396)]=0;
   var $397=(($__nbuf)|0);
   var $398=$134;
   var $399 = (function() { try { __THREW__ = 0; return _sscanf($397, ((3576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$398,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 19; break; }
  case 39: 
   var $401=(($399)|(0))!=1;
   if ($401) { label = 40; break; } else { label = 42; break; }
  case 40: 
   (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(((3360)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 19; break; }
  case 41: 
   label = 42; break;
  case 42: 
   $10=$__h;
   var $405=$10;
   $9=$405;
   var $406=$9;
   $7=$406;
   $8=0;
   var $407=$7;
   var $408=(($407)|0);
   $6=$408;
   var $409=$6;
   var $410=$409;
   $5=$410;
   var $411=$5;
   var $412=(($411)|0);
   var $413=HEAP32[(($412)>>2)];
   $__tmp_i_i_i6=$413;
   var $414=$8;
   var $415=(($407)|0);
   $4=$415;
   var $416=$4;
   var $417=$416;
   $3=$417;
   var $418=$3;
   var $419=(($418)|0);
   HEAP32[(($419)>>2)]=$414;
   var $420=$__tmp_i_i_i6;
   var $421=(($420)|(0))!=0;
   if ($421) { label = 43; break; } else { label = 46; break; }
  case 43: 
   var $423=(($407)|0);
   $2=$423;
   var $424=$2;
   var $425=$424;
   $1=$425;
   var $426=$1;
   var $427=(($426+4)|0);
   var $428=HEAP32[(($427)>>2)];
   var $429=$__tmp_i_i_i6;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$428]($429) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 45; break; }
  case 44: 
   label = 46; break;
  case 45: 
   var $432$0 = ___cxa_find_matching_catch(-1, -1,0); $432$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 46: 
   label = 47; break;
  case 47: 
   $28=$__b;
   $29=$__e;
   var $434=$28;
   var $435=$29;
   $26=$434;
   $27=$435;
   var $436=$26;
   $25=$436;
   var $437=$25;
   var $438=(($437)|0);
   var $439=HEAP32[(($438)>>2)];
   var $440=(($439)|(0))!=0;
   if ($440) { label = 48; break; } else { label = 54; break; }
  case 48: 
   var $442=(($437)|0);
   var $443=HEAP32[(($442)>>2)];
   $24=$443;
   var $444=$24;
   var $445=(($444+12)|0);
   var $446=HEAP32[(($445)>>2)];
   var $447=(($444+16)|0);
   var $448=HEAP32[(($447)>>2)];
   var $449=(($446)|(0))==(($448)|(0));
   if ($449) { label = 49; break; } else { label = 51; break; }
  case 49: 
   var $451=$444;
   var $452=HEAP32[(($451)>>2)];
   var $453=(($452+36)|0);
   var $454=HEAP32[(($453)>>2)];
   var $455 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$454]($444) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 50; break; } else { label = 18; break; }
  case 50: 
   $23=$455;
   label = 52; break;
  case 51: 
   var $457=(($444+12)|0);
   var $458=HEAP32[(($457)>>2)];
   var $459=HEAP8[($458)];
   $22=$459;
   var $460=$22;
   var $461=(($460)&(255));
   $23=$461;
   label = 52; break;
  case 52: 
   var $462=$23;
   $20=$462;
   $21=-1;
   var $463=$20;
   var $464=$21;
   var $465=(($463)|(0))==(($464)|(0));
   if ($465) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $467=(($437)|0);
   HEAP32[(($467)>>2)]=0;
   label = 54; break;
  case 54: 
   var $468=(($437)|0);
   var $469=HEAP32[(($468)>>2)];
   var $470=(($469)|(0))==0;
   var $471=(($470)&(1));
   var $472=$27;
   $19=$472;
   var $473=$19;
   var $474=(($473)|0);
   var $475=HEAP32[(($474)>>2)];
   var $476=(($475)|(0))!=0;
   if ($476) { label = 55; break; } else { label = 61; break; }
  case 55: 
   var $478=(($473)|0);
   var $479=HEAP32[(($478)>>2)];
   $18=$479;
   var $480=$18;
   var $481=(($480+12)|0);
   var $482=HEAP32[(($481)>>2)];
   var $483=(($480+16)|0);
   var $484=HEAP32[(($483)>>2)];
   var $485=(($482)|(0))==(($484)|(0));
   if ($485) { label = 56; break; } else { label = 58; break; }
  case 56: 
   var $487=$480;
   var $488=HEAP32[(($487)>>2)];
   var $489=(($488+36)|0);
   var $490=HEAP32[(($489)>>2)];
   var $491 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$490]($480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { label = 18; break; }
  case 57: 
   $17=$491;
   label = 59; break;
  case 58: 
   var $493=(($480+12)|0);
   var $494=HEAP32[(($493)>>2)];
   var $495=HEAP8[($494)];
   $16=$495;
   var $496=$16;
   var $497=(($496)&(255));
   $17=$497;
   label = 59; break;
  case 59: 
   var $498=$17;
   $14=$498;
   $15=-1;
   var $499=$14;
   var $500=$15;
   var $501=(($499)|(0))==(($500)|(0));
   if ($501) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $503=(($473)|0);
   HEAP32[(($503)>>2)]=0;
   label = 61; break;
  case 61: 
   var $504=(($473)|0);
   var $505=HEAP32[(($504)>>2)];
   var $506=(($505)|(0))==0;
   var $507=(($506)&(1));
   var $508=(($471)|(0))==(($507)|(0));
   label = 62; break;
  case 62: 
   if ($508) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $511=$133;
   var $512=HEAP32[(($511)>>2)];
   var $513=$512 | 2;
   HEAP32[(($511)>>2)]=$513;
   label = 64; break;
  case 64: 
   var $515=$agg_result;
   var $516=$__b;
   assert(4 % 1 === 0);HEAP32[(($515)>>2)]=HEAP32[(($516)>>2)];
   $140=1;
   __ZNSt3__16localeD2Ev($__loc);
   $70=$__wb;
   var $517=$70;
   $69=$517;
   var $518=$69;
   $67=$518;
   $68=0;
   var $519=$67;
   var $520=(($519)|0);
   $66=$520;
   var $521=$66;
   var $522=$521;
   $65=$522;
   var $523=$65;
   var $524=(($523)|0);
   var $525=HEAP32[(($524)>>2)];
   $__tmp_i_i_i1=$525;
   var $526=$68;
   var $527=(($519)|0);
   $64=$527;
   var $528=$64;
   var $529=$528;
   $63=$529;
   var $530=$63;
   var $531=(($530)|0);
   HEAP32[(($531)>>2)]=$526;
   var $532=$__tmp_i_i_i1;
   var $533=(($532)|(0))!=0;
   if ($533) { label = 65; break; } else { label = 68; break; }
  case 65: 
   var $535=(($519)|0);
   $62=$535;
   var $536=$62;
   var $537=$536;
   $61=$537;
   var $538=$61;
   var $539=(($538+4)|0);
   var $540=HEAP32[(($539)>>2)];
   var $541=$__tmp_i_i_i1;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$540]($541) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 66; break; } else { label = 67; break; }
  case 66: 
   label = 68; break;
  case 67: 
   var $544$0 = ___cxa_find_matching_catch(-1, -1,0); $544$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 68: 
   STACKTOP = __stackBase__;
   return;
  case 69: 
   __ZNSt3__16localeD2Ev($__loc);
   label = 70; break;
  case 70: 
   $109=$__wb;
   var $547=$109;
   $108=$547;
   var $548=$108;
   $106=$548;
   $107=0;
   var $549=$106;
   var $550=(($549)|0);
   $105=$550;
   var $551=$105;
   var $552=$551;
   $104=$552;
   var $553=$104;
   var $554=(($553)|0);
   var $555=HEAP32[(($554)>>2)];
   $__tmp_i_i_i=$555;
   var $556=$107;
   var $557=(($549)|0);
   $103=$557;
   var $558=$103;
   var $559=$558;
   $102=$559;
   var $560=$102;
   var $561=(($560)|0);
   HEAP32[(($561)>>2)]=$556;
   var $562=$__tmp_i_i_i;
   var $563=(($562)|(0))!=0;
   if ($563) { label = 71; break; } else { label = 74; break; }
  case 71: 
   var $565=(($549)|0);
   $101=$565;
   var $566=$101;
   var $567=$566;
   $100=$567;
   var $568=$100;
   var $569=(($568+4)|0);
   var $570=HEAP32[(($569)>>2)];
   var $571=$__tmp_i_i_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$570]($571) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 72; break; } else { label = 73; break; }
  case 72: 
   label = 74; break;
  case 73: 
   var $574$0 = ___cxa_find_matching_catch(-1, -1,0); $574$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 74: 
   label = 75; break;
  case 75: 
   var $576=$136;
   var $577=$137;
   var $578$0=$576;
   var $578$1=0;
   var $579$0=$578$0;
   var $579$1=$577;
   ___resumeException($579$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 800)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115=__stackBase__;
   var $116=(__stackBase__)+(8);
   var $117=(__stackBase__)+(16);
   var $118=(__stackBase__)+(24);
   var $119=(__stackBase__)+(32);
   var $120=(__stackBase__)+(40);
   var $121=(__stackBase__)+(48);
   var $122=(__stackBase__)+(56);
   var $123=(__stackBase__)+(64);
   var $124=(__stackBase__)+(72);
   var $125=(__stackBase__)+(80);
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154;
   var $155;
   var $156;
   var $157;
   var $158;
   var $159;
   var $160;
   var $161;
   var $162;
   var $163;
   var $164;
   var $165;
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177;
   var $178;
   var $179;
   var $180;
   var $181;
   var $182;
   var $183;
   var $184;
   var $185;
   var $186;
   var $187;
   var $188;
   var $189;
   var $190;
   var $191;
   var $192;
   var $193;
   var $194;
   var $195;
   var $196;
   var $197;
   var $198;
   var $199;
   var $200;
   var $201;
   var $202;
   var $203;
   var $204;
   var $205;
   var $206;
   var $207;
   var $208;
   var $209;
   var $210;
   var $211;
   var $212;
   var $213;
   var $214;
   var $215;
   var $216;
   var $217;
   var $218;
   var $219;
   var $220;
   var $221;
   var $222;
   var $223;
   var $224;
   var $225;
   var $226;
   var $227;
   var $228;
   var $229;
   var $230;
   var $231;
   var $232;
   var $233;
   var $234;
   var $235;
   var $236;
   var $237;
   var $238;
   var $239;
   var $240;
   var $241;
   var $242;
   var $243;
   var $244;
   var $245;
   var $246;
   var $247;
   var $248;
   var $249;
   var $250;
   var $251;
   var $252;
   var $253;
   var $254;
   var $255;
   var $256;
   var $257;
   var $258;
   var $259;
   var $260;
   var $261;
   var $262;
   var $263;
   var $264;
   var $265;
   var $266;
   var $267;
   var $268;
   var $269;
   var $270;
   var $271;
   var $272;
   var $273;
   var $274;
   var $275;
   var $276;
   var $277;
   var $278;
   var $279;
   var $280;
   var $281;
   var $282;
   var $283;
   var $284;
   var $285;
   var $286;
   var $287;
   var $288;
   var $289;
   var $290;
   var $291;
   var $292;
   var $293;
   var $294;
   var $295;
   var $296;
   var $297;
   var $298;
   var $299;
   var $300;
   var $301;
   var $302;
   var $303;
   var $304;
   var $305;
   var $306;
   var $307;
   var $308;
   var $309;
   var $310;
   var $311;
   var $312;
   var $313;
   var $314;
   var $315;
   var $316;
   var $317;
   var $318;
   var $319;
   var $320;
   var $321;
   var $322;
   var $323;
   var $324;
   var $325;
   var $326;
   var $327;
   var $328;
   var $329;
   var $330;
   var $331;
   var $332;
   var $333;
   var $334;
   var $335;
   var $336;
   var $337;
   var $338;
   var $339;
   var $340;
   var $341;
   var $342;
   var $343;
   var $344;
   var $345;
   var $346;
   var $347;
   var $348;
   var $349;
   var $350;
   var $351;
   var $352;
   var $353;
   var $354;
   var $355;
   var $356;
   var $357;
   var $358;
   var $359;
   var $360;
   var $361;
   var $362;
   var $363;
   var $364;
   var $365;
   var $366;
   var $367;
   var $368;
   var $369;
   var $370;
   var $371;
   var $372;
   var $373;
   var $374;
   var $375;
   var $376;
   var $377;
   var $378;
   var $379;
   var $380;
   var $381;
   var $382;
   var $383;
   var $384;
   var $385;
   var $386;
   var $387;
   var $388;
   var $389;
   var $390;
   var $391;
   var $392;
   var $393;
   var $394;
   var $395;
   var $396;
   var $397;
   var $398;
   var $399;
   var $400;
   var $401;
   var $402;
   var $403;
   var $404;
   var $405;
   var $406;
   var $407;
   var $408;
   var $409;
   var $410;
   var $411;
   var $412;
   var $413;
   var $414;
   var $415;
   var $416;
   var $417;
   var $418;
   var $419;
   var $420;
   var $421;
   var $422;
   var $423;
   var $424;
   var $425;
   var $426;
   var $427;
   var $428;
   var $429;
   var $430;
   var $431;
   var $432;
   var $433;
   var $434;
   var $435;
   var $436;
   var $437;
   var $438;
   var $439;
   var $440;
   var $441;
   var $442;
   var $443;
   var $444;
   var $445;
   var $446;
   var $447;
   var $448;
   var $449;
   var $450;
   var $451;
   var $452;
   var $453;
   var $454;
   var $455;
   var $456;
   var $457;
   var $458;
   var $459;
   var $460;
   var $461;
   var $462;
   var $463;
   var $464;
   var $465;
   var $466;
   var $467;
   var $468;
   var $469;
   var $470;
   var $471;
   var $472;
   var $473;
   var $474;
   var $475;
   var $476;
   var $477;
   var $478;
   var $479;
   var $480;
   var $481;
   var $482;
   var $483;
   var $484;
   var $485;
   var $486;
   var $487;
   var $488;
   var $489;
   var $490;
   var $491;
   var $492;
   var $493;
   var $494;
   var $495;
   var $496;
   var $497;
   var $498;
   var $499;
   var $500;
   var $501;
   var $502;
   var $503;
   var $504;
   var $505;
   var $506;
   var $507;
   var $508;
   var $509;
   var $510;
   var $511;
   var $512;
   var $513;
   var $514;
   var $515;
   var $516;
   var $517;
   var $518;
   var $519;
   var $520;
   var $521;
   var $522;
   var $523;
   var $524;
   var $525;
   var $526;
   var $527;
   var $528;
   var $529;
   var $530;
   var $531;
   var $532;
   var $533;
   var $534;
   var $535;
   var $536;
   var $537;
   var $538;
   var $539;
   var $540;
   var $541;
   var $542;
   var $543;
   var $544;
   var $545;
   var $546;
   var $547;
   var $548;
   var $549;
   var $550;
   var $551;
   var $552;
   var $553;
   var $554;
   var $555;
   var $556;
   var $557;
   var $558;
   var $559;
   var $560;
   var $561;
   var $562;
   var $563;
   var $564;
   var $565;
   var $566;
   var $567;
   var $568;
   var $569;
   var $570;
   var $571;
   var $572;
   var $573;
   var $574;
   var $575;
   var $576;
   var $577;
   var $578;
   var $579;
   var $580;
   var $581;
   var $582;
   var $583;
   var $584;
   var $585;
   var $586;
   var $587;
   var $588;
   var $589;
   var $590;
   var $591;
   var $592;
   var $593;
   var $594;
   var $595;
   var $596;
   var $597;
   var $598;
   var $599;
   var $600;
   var $601;
   var $602;
   var $603;
   var $604;
   var $605;
   var $606;
   var $607;
   var $608;
   var $609;
   var $610;
   var $611;
   var $612;
   var $613;
   var $614;
   var $615;
   var $616;
   var $__tmp_i_i_i23;
   var $617;
   var $618;
   var $619;
   var $620;
   var $621;
   var $622;
   var $623;
   var $624;
   var $625;
   var $626;
   var $627;
   var $628;
   var $629;
   var $630;
   var $631;
   var $632;
   var $633;
   var $634;
   var $635;
   var $636;
   var $637;
   var $638;
   var $639;
   var $640;
   var $641;
   var $642;
   var $643;
   var $644;
   var $645;
   var $646;
   var $647;
   var $648;
   var $649;
   var $650;
   var $651;
   var $652;
   var $653;
   var $654;
   var $655;
   var $656;
   var $657;
   var $__a_i_i_i13;
   var $__i_i_i_i14;
   var $658;
   var $659;
   var $660;
   var $661;
   var $662;
   var $663;
   var $664;
   var $665;
   var $666;
   var $667;
   var $668;
   var $669;
   var $670;
   var $671;
   var $672;
   var $673;
   var $674;
   var $675;
   var $676;
   var $677;
   var $678;
   var $679;
   var $680;
   var $681;
   var $682;
   var $__a_i_i_i8;
   var $__i_i_i_i9;
   var $683;
   var $684;
   var $685;
   var $686;
   var $687;
   var $688;
   var $689;
   var $690;
   var $691;
   var $692;
   var $693;
   var $694;
   var $695;
   var $696;
   var $697;
   var $698;
   var $699;
   var $700;
   var $701;
   var $702;
   var $703;
   var $704;
   var $705;
   var $706;
   var $707;
   var $708;
   var $__a_i_i_i4;
   var $__i_i_i_i5;
   var $709;
   var $710;
   var $711;
   var $712;
   var $713;
   var $714;
   var $715;
   var $716;
   var $717;
   var $718;
   var $719;
   var $720;
   var $721;
   var $722;
   var $723;
   var $724;
   var $725;
   var $726;
   var $727;
   var $__a_i_i_i1;
   var $__i_i_i_i2;
   var $728;
   var $729;
   var $730;
   var $731;
   var $732;
   var $733;
   var $734;
   var $735;
   var $736;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $737;
   var $738;
   var $739;
   var $740;
   var $741;
   var $742;
   var $743;
   var $744;
   var $745;
   var $746;
   var $747;
   var $748;
   var $749;
   var $750;
   var $751;
   var $752;
   var $753;
   var $__tmp_i_i_i;
   var $754;
   var $755;
   var $756;
   var $757;
   var $758;
   var $759;
   var $760=(__stackBase__)+(88);
   var $761=(__stackBase__)+(96);
   var $762;
   var $763;
   var $764=(__stackBase__)+(104);
   var $765=(__stackBase__)+(112);
   var $766;
   var $767;
   var $768;
   var $769;
   var $770;
   var $771;
   var $772;
   var $773;
   var $774;
   var $775;
   var $776;
   var $777;
   var $778;
   var $779;
   var $780;
   var $781;
   var $782;
   var $783;
   var $784;
   var $785;
   var $786=(__stackBase__)+(120);
   var $__bz;
   var $__gbuf=(__stackBase__)+(128);
   var $__gb=(__stackBase__)+(528);
   var $787=(__stackBase__)+(536);
   var $__gn=(__stackBase__)+(544);
   var $__ge=(__stackBase__)+(552);
   var $__pat=(__stackBase__)+(560);
   var $__dp=(__stackBase__)+(568);
   var $__ts=(__stackBase__)+(576);
   var $__grp=(__stackBase__)+(584);
   var $__sym=(__stackBase__)+(600);
   var $__psn=(__stackBase__)+(616);
   var $__nsn=(__stackBase__)+(632);
   var $__spaces=(__stackBase__)+(648);
   var $__fd=(__stackBase__)+(664);
   var $788;
   var $789;
   var $__trailing_sign;
   var $__p;
   var $790=(__stackBase__)+(672);
   var $791;
   var $792=(__stackBase__)+(680);
   var $__more_needed;
   var $__sb;
   var $__sym_space_end=(__stackBase__)+(688);
   var $793=(__stackBase__)+(696);
   var $794=(__stackBase__)+(704);
   var $__num_spaces;
   var $795=(__stackBase__)+(712);
   var $796=(__stackBase__)+(720);
   var $797=(__stackBase__)+(728);
   var $798=(__stackBase__)+(736);
   var $799=(__stackBase__)+(744);
   var $800=(__stackBase__)+(752);
   var $801=(__stackBase__)+(760);
   var $__sym_curr_char=(__stackBase__)+(768);
   var $802=(__stackBase__)+(776);
   var $803=(__stackBase__)+(784);
   var $__ng;
   var $__c;
   var $__i;
   var $__et=(__stackBase__)+(792);
   $777=$__b;
   var $804=(($__intl)&(1));
   $778=$804;
   $779=$__loc;
   $780=$__flags;
   $781=$__err;
   $782=$__neg;
   $783=$__ct;
   $784=$__wb;
   $785=$__wn;
   HEAP32[(($786)>>2)]=$__we;
   $__bz=100;
   var $805=(($__gbuf)|0);
   HEAP32[(($787)>>2)]=542;
   $773=$__gb;
   $774=$805;
   $775=$787;
   var $806=$773;
   var $807=$774;
   var $808=$775;
   $770=$806;
   $771=$807;
   $772=$808;
   var $809=$770;
   var $810=(($809)|0);
   var $811=$771;
   var $812=$772;
   $769=$812;
   var $813=$769;
   var $814=HEAP32[(($813)>>2)];
   $766=$810;
   $767=$811;
   $768=$814;
   var $815=$766;
   var $816=$767;
   var $817=$768;
   $763=$815;
   HEAP32[(($764)>>2)]=$816;
   HEAP32[(($765)>>2)]=$817;
   var $818=$763;
   var $819=$818;
   $762=$764;
   var $820=$762;
   var $821=HEAP32[(($820)>>2)];
   $756=$765;
   var $822=$756;
   var $823=HEAP32[(($822)>>2)];
   $759=$819;
   HEAP32[(($760)>>2)]=$821;
   HEAP32[(($761)>>2)]=$823;
   var $824=$759;
   var $825=(($824)|0);
   $758=$760;
   var $826=$758;
   var $827=HEAP32[(($826)>>2)];
   HEAP32[(($825)>>2)]=$827;
   var $828=(($824+4)|0);
   $757=$761;
   var $829=$757;
   var $830=HEAP32[(($829)>>2)];
   HEAP32[(($828)>>2)]=$830;
   $745=$__gb;
   var $831=$745;
   var $832=(($831)|0);
   $744=$832;
   var $833=$744;
   var $834=$833;
   $743=$834;
   var $835=$743;
   var $836=(($835)|0);
   var $837=HEAP32[(($836)>>2)];
   HEAP32[(($__gn)>>2)]=$837;
   var $838=HEAP32[(($__gn)>>2)];
   var $839=(($838+400)|0);
   HEAP32[(($__ge)>>2)]=$839;
   $742=$__grp;
   var $840=$742;
   $741=$840;
   var $841=$741;
   var $842=$841;
   var $843=(($841)|0);
   $740=$843;
   var $844=$740;
   $739=$844;
   var $845=$739;
   var $846=$845;
   $738=$846;
   var $847=$738;
   var $848=$847;
   $737=$848;
   var $849=$737;
   var $850=(($847)|0);
   $736=$841;
   var $851=$736;
   var $852=(($851)|0);
   $735=$852;
   var $853=$735;
   var $854=$853;
   $734=$854;
   var $855=$734;
   var $856=(($855)|0);
   var $857=(($856)|0);
   var $858=$857;
   var $859=(($858)|0);
   $__a_i_i_i=$859;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $861=$__i_i_i_i;
   var $862=(($861)>>>(0)) < 3;
   if ($862) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $864=$__i_i_i_i;
   var $865=$__a_i_i_i;
   var $866=(($865+($864<<2))|0);
   HEAP32[(($866)>>2)]=0;
   var $867=$__i_i_i_i;
   var $868=((($867)+(1))|0);
   $__i_i_i_i=$868;
   label = 2; break;
  case 4: 
   $733=$__sym;
   var $869=$733;
   $732=$869;
   var $870=$732;
   var $871=$870;
   var $872=(($870)|0);
   $731=$872;
   var $873=$731;
   $730=$873;
   var $874=$730;
   var $875=$874;
   $729=$875;
   var $876=$729;
   var $877=$876;
   $728=$877;
   var $878=$728;
   var $879=(($876)|0);
   $727=$870;
   var $880=$727;
   var $881=(($880)|0);
   $726=$881;
   var $882=$726;
   var $883=$882;
   $725=$883;
   var $884=$725;
   var $885=(($884)|0);
   var $886=(($885)|0);
   var $887=$886;
   var $888=(($887)|0);
   $__a_i_i_i1=$888;
   $__i_i_i_i2=0;
   label = 5; break;
  case 5: 
   var $890=$__i_i_i_i2;
   var $891=(($890)>>>(0)) < 3;
   if ($891) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $893=$__i_i_i_i2;
   var $894=$__a_i_i_i1;
   var $895=(($894+($893<<2))|0);
   HEAP32[(($895)>>2)]=0;
   var $896=$__i_i_i_i2;
   var $897=((($896)+(1))|0);
   $__i_i_i_i2=$897;
   label = 5; break;
  case 7: 
   $714=$__psn;
   var $898=$714;
   $713=$898;
   var $899=$713;
   var $900=$899;
   var $901=(($899)|0);
   $712=$901;
   var $902=$712;
   $711=$902;
   var $903=$711;
   var $904=$903;
   $710=$904;
   var $905=$710;
   var $906=$905;
   $709=$906;
   var $907=$709;
   var $908=(($905)|0);
   $708=$899;
   var $909=$708;
   var $910=(($909)|0);
   $707=$910;
   var $911=$707;
   var $912=$911;
   $706=$912;
   var $913=$706;
   var $914=(($913)|0);
   var $915=(($914)|0);
   var $916=$915;
   var $917=(($916)|0);
   $__a_i_i_i4=$917;
   $__i_i_i_i5=0;
   label = 8; break;
  case 8: 
   var $919=$__i_i_i_i5;
   var $920=(($919)>>>(0)) < 3;
   if ($920) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $922=$__i_i_i_i5;
   var $923=$__a_i_i_i4;
   var $924=(($923+($922<<2))|0);
   HEAP32[(($924)>>2)]=0;
   var $925=$__i_i_i_i5;
   var $926=((($925)+(1))|0);
   $__i_i_i_i5=$926;
   label = 8; break;
  case 10: 
   $688=$__nsn;
   var $927=$688;
   $687=$927;
   var $928=$687;
   var $929=$928;
   var $930=(($928)|0);
   $686=$930;
   var $931=$686;
   $685=$931;
   var $932=$685;
   var $933=$932;
   $684=$933;
   var $934=$684;
   var $935=$934;
   $683=$935;
   var $936=$683;
   var $937=(($934)|0);
   $682=$928;
   var $938=$682;
   var $939=(($938)|0);
   $681=$939;
   var $940=$681;
   var $941=$940;
   $680=$941;
   var $942=$680;
   var $943=(($942)|0);
   var $944=(($943)|0);
   var $945=$944;
   var $946=(($945)|0);
   $__a_i_i_i8=$946;
   $__i_i_i_i9=0;
   label = 11; break;
  case 11: 
   var $948=$__i_i_i_i9;
   var $949=(($948)>>>(0)) < 3;
   if ($949) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $951=$__i_i_i_i9;
   var $952=$__a_i_i_i8;
   var $953=(($952+($951<<2))|0);
   HEAP32[(($953)>>2)]=0;
   var $954=$__i_i_i_i9;
   var $955=((($954)+(1))|0);
   $__i_i_i_i9=$955;
   label = 11; break;
  case 13: 
   $663=$__spaces;
   var $956=$663;
   $662=$956;
   var $957=$662;
   var $958=$957;
   var $959=(($957)|0);
   $661=$959;
   var $960=$661;
   $660=$960;
   var $961=$660;
   var $962=$961;
   $659=$962;
   var $963=$659;
   var $964=$963;
   $658=$964;
   var $965=$658;
   var $966=(($963)|0);
   $657=$957;
   var $967=$657;
   var $968=(($967)|0);
   $656=$968;
   var $969=$656;
   var $970=$969;
   $655=$970;
   var $971=$655;
   var $972=(($971)|0);
   var $973=(($972)|0);
   var $974=$973;
   var $975=(($974)|0);
   $__a_i_i_i13=$975;
   $__i_i_i_i14=0;
   label = 14; break;
  case 14: 
   var $977=$__i_i_i_i14;
   var $978=(($977)>>>(0)) < 3;
   if ($978) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $980=$__i_i_i_i14;
   var $981=$__a_i_i_i13;
   var $982=(($981+($980<<2))|0);
   HEAP32[(($982)>>2)]=0;
   var $983=$__i_i_i_i14;
   var $984=((($983)+(1))|0);
   $__i_i_i_i14=$984;
   label = 14; break;
  case 16: 
   var $985=$778;
   var $986=(($985) & 1);
   var $987=$779;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($986, $987, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 37; break; }
  case 17: 
   $__trailing_sign=0;
   var $989=$784;
   $654=$989;
   var $990=$654;
   var $991=(($990)|0);
   $653=$991;
   var $992=$653;
   var $993=$992;
   $652=$993;
   var $994=$652;
   var $995=(($994)|0);
   var $996=HEAP32[(($995)>>2)];
   var $997=$785;
   HEAP32[(($997)>>2)]=$996;
   $__p=0;
   label = 18; break;
  case 18: 
   var $999=$__p;
   var $1000=(($999)>>>(0)) < 4;
   if ($1000) { label = 19; break; } else { var $1081 = 0;label = 35; break; }
  case 19: 
   var $1002=$777;
   $633=$1002;
   $634=$__e;
   var $1003=$633;
   var $1004=$634;
   $631=$1003;
   $632=$1004;
   var $1005=$631;
   $630=$1005;
   var $1006=$630;
   var $1007=(($1006)|0);
   var $1008=HEAP32[(($1007)>>2)];
   var $1009=(($1008)|(0))!=0;
   if ($1009) { label = 20; break; } else { label = 26; break; }
  case 20: 
   var $1011=(($1006)|0);
   var $1012=HEAP32[(($1011)>>2)];
   $629=$1012;
   var $1013=$629;
   var $1014=(($1013+12)|0);
   var $1015=HEAP32[(($1014)>>2)];
   var $1016=(($1013+16)|0);
   var $1017=HEAP32[(($1016)>>2)];
   var $1018=(($1015)|(0))==(($1017)|(0));
   if ($1018) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $1020=$1013;
   var $1021=HEAP32[(($1020)>>2)];
   var $1022=(($1021+36)|0);
   var $1023=HEAP32[(($1022)>>2)];
   var $1024 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1023]($1013) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 37; break; }
  case 22: 
   $628=$1024;
   label = 24; break;
  case 23: 
   var $1026=(($1013+12)|0);
   var $1027=HEAP32[(($1026)>>2)];
   var $1028=HEAP8[($1027)];
   $627=$1028;
   var $1029=$627;
   var $1030=(($1029)&(255));
   $628=$1030;
   label = 24; break;
  case 24: 
   var $1031=$628;
   $625=$1031;
   $626=-1;
   var $1032=$625;
   var $1033=$626;
   var $1034=(($1032)|(0))==(($1033)|(0));
   if ($1034) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $1036=(($1006)|0);
   HEAP32[(($1036)>>2)]=0;
   label = 26; break;
  case 26: 
   var $1037=(($1006)|0);
   var $1038=HEAP32[(($1037)>>2)];
   var $1039=(($1038)|(0))==0;
   var $1040=(($1039)&(1));
   var $1041=$632;
   $624=$1041;
   var $1042=$624;
   var $1043=(($1042)|0);
   var $1044=HEAP32[(($1043)>>2)];
   var $1045=(($1044)|(0))!=0;
   if ($1045) { label = 27; break; } else { label = 33; break; }
  case 27: 
   var $1047=(($1042)|0);
   var $1048=HEAP32[(($1047)>>2)];
   $623=$1048;
   var $1049=$623;
   var $1050=(($1049+12)|0);
   var $1051=HEAP32[(($1050)>>2)];
   var $1052=(($1049+16)|0);
   var $1053=HEAP32[(($1052)>>2)];
   var $1054=(($1051)|(0))==(($1053)|(0));
   if ($1054) { label = 28; break; } else { label = 30; break; }
  case 28: 
   var $1056=$1049;
   var $1057=HEAP32[(($1056)>>2)];
   var $1058=(($1057+36)|0);
   var $1059=HEAP32[(($1058)>>2)];
   var $1060 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1059]($1049) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 37; break; }
  case 29: 
   $622=$1060;
   label = 31; break;
  case 30: 
   var $1062=(($1049+12)|0);
   var $1063=HEAP32[(($1062)>>2)];
   var $1064=HEAP8[($1063)];
   $621=$1064;
   var $1065=$621;
   var $1066=(($1065)&(255));
   $622=$1066;
   label = 31; break;
  case 31: 
   var $1067=$622;
   $619=$1067;
   $620=-1;
   var $1068=$619;
   var $1069=$620;
   var $1070=(($1068)|(0))==(($1069)|(0));
   if ($1070) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $1072=(($1042)|0);
   HEAP32[(($1072)>>2)]=0;
   label = 33; break;
  case 33: 
   var $1073=(($1042)|0);
   var $1074=HEAP32[(($1073)>>2)];
   var $1075=(($1074)|(0))==0;
   var $1076=(($1075)&(1));
   var $1077=(($1040)|(0))==(($1076)|(0));
   var $1078=$1077 ^ 1;
   label = 34; break;
  case 34: 
   var $1081 = $1078;label = 35; break;
  case 35: 
   var $1081;
   if ($1081) { label = 36; break; } else { label = 461; break; }
  case 36: 
   var $1083=$__p;
   var $1084=(($__pat)|0);
   var $1085=(($1084+$1083)|0);
   var $1086=HEAP8[($1085)];
   var $1087=(($1086 << 24) >> 24);
   if ((($1087)|(0))==1) {
    label = 42; break;
   }
   else if ((($1087)|(0))==0) {
    label = 64; break;
   }
   else if ((($1087)|(0))==3) {
    label = 103; break;
   }
   else if ((($1087)|(0))==2) {
    label = 215; break;
   }
   else if ((($1087)|(0))==4) {
    label = 326; break;
   }
   else {
   label = 459; break;
   }
  case 37: 
   var $1089$0 = ___cxa_find_matching_catch(-1, -1); $1089$1 = tempRet0;
   var $1090=$1089$0;
   $788=$1090;
   var $1091=$1089$1;
   $789=$1091;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $618=$__gb;
   var $1092=$618;
   $617=$1092;
   var $1093=$617;
   $615=$1093;
   $616=0;
   var $1094=$615;
   var $1095=(($1094)|0);
   $614=$1095;
   var $1096=$614;
   var $1097=$1096;
   $613=$1097;
   var $1098=$613;
   var $1099=(($1098)|0);
   var $1100=HEAP32[(($1099)>>2)];
   $__tmp_i_i_i23=$1100;
   var $1101=$616;
   var $1102=(($1094)|0);
   $612=$1102;
   var $1103=$612;
   var $1104=$1103;
   $611=$1104;
   var $1105=$611;
   var $1106=(($1105)|0);
   HEAP32[(($1106)>>2)]=$1101;
   var $1107=$__tmp_i_i_i23;
   var $1108=(($1107)|(0))!=0;
   if ($1108) { label = 38; break; } else { label = 41; break; }
  case 38: 
   var $1110=(($1094)|0);
   $610=$1110;
   var $1111=$610;
   var $1112=$1111;
   $609=$1112;
   var $1113=$609;
   var $1114=(($1113+4)|0);
   var $1115=HEAP32[(($1114)>>2)];
   var $1116=$__tmp_i_i_i23;
   var $1117=$1116;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1115]($1117) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 40; break; }
  case 39: 
   label = 41; break;
  case 40: 
   var $1120$0 = ___cxa_find_matching_catch(-1, -1,0); $1120$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 41: 
   label = 513; break;
  case 42: 
   var $1122=$__p;
   var $1123=(($1122)|(0))!=3;
   if ($1123) { label = 43; break; } else { label = 63; break; }
  case 43: 
   var $1125=$783;
   var $1126=$777;
   $608=$1126;
   var $1127=$608;
   var $1128=(($1127)|0);
   var $1129=HEAP32[(($1128)>>2)];
   $607=$1129;
   var $1130=$607;
   var $1131=(($1130+12)|0);
   var $1132=HEAP32[(($1131)>>2)];
   var $1133=(($1130+16)|0);
   var $1134=HEAP32[(($1133)>>2)];
   var $1135=(($1132)|(0))==(($1134)|(0));
   if ($1135) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $1137=$1130;
   var $1138=HEAP32[(($1137)>>2)];
   var $1139=(($1138+36)|0);
   var $1140=HEAP32[(($1139)>>2)];
   var $1141 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1140]($1130) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 37; break; }
  case 45: 
   $606=$1141;
   label = 47; break;
  case 46: 
   var $1143=(($1130+12)|0);
   var $1144=HEAP32[(($1143)>>2)];
   var $1145=HEAP8[($1144)];
   $605=$1145;
   var $1146=$605;
   var $1147=(($1146)&(255));
   $606=$1147;
   label = 47; break;
  case 47: 
   var $1148=$606;
   var $1149=(($1148) & 255);
   label = 48; break;
  case 48: 
   $602=$1125;
   $603=8192;
   $604=$1149;
   var $1151=$602;
   var $1152=$604;
   var $1153=(($1152 << 24) >> 24);
   var $1154=(($1153)>>>(0)) <= 127;
   if ($1154) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $1156=$604;
   var $1157=(($1156 << 24) >> 24);
   var $1158=(($1151+8)|0);
   var $1159=HEAP32[(($1158)>>2)];
   var $1160=(($1159+($1157<<1))|0);
   var $1161=HEAP16[(($1160)>>1)];
   var $1162=(($1161)&(65535));
   var $1163=$603;
   var $1164=(($1163)&(65535));
   var $1165=$1162 & $1164;
   var $1167 = $1165;label = 51; break;
  case 50: 
   var $1167 = 0;label = 51; break;
  case 51: 
   var $1167;
   var $1168=(($1167)|(0))!=0;
   label = 52; break;
  case 52: 
   if ($1168) { label = 53; break; } else { label = 61; break; }
  case 53: 
   var $1171=$777;
   $600=$1171;
   $601=0;
   var $1172=$600;
   var $1173=(($1172)|0);
   var $1174=HEAP32[(($1173)>>2)];
   $599=$1174;
   var $1175=$599;
   var $1176=(($1175+12)|0);
   var $1177=HEAP32[(($1176)>>2)];
   var $1178=(($1175+16)|0);
   var $1179=HEAP32[(($1178)>>2)];
   var $1180=(($1177)|(0))==(($1179)|(0));
   if ($1180) { label = 54; break; } else { label = 56; break; }
  case 54: 
   var $1182=$1175;
   var $1183=HEAP32[(($1182)>>2)];
   var $1184=(($1183+40)|0);
   var $1185=HEAP32[(($1184)>>2)];
   var $1186 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1185]($1175) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 37; break; }
  case 55: 
   $598=$1186;
   label = 57; break;
  case 56: 
   var $1188=(($1175+12)|0);
   var $1189=HEAP32[(($1188)>>2)];
   var $1190=(($1189+1)|0);
   HEAP32[(($1188)>>2)]=$1190;
   var $1191=HEAP8[($1189)];
   $597=$1191;
   var $1192=$597;
   var $1193=(($1192)&(255));
   $598=$1193;
   label = 57; break;
  case 57: 
   var $1194=$598;
   var $1195=(($1194) & 255);
   var $1196=(($1172)|0);
   var $1197=HEAP32[(($1196)>>2)];
   $594=$790;
   $595=$1195;
   $596=$1197;
   var $1198=$594;
   var $1199=$595;
   var $1200=$596;
   $591=$1198;
   $592=$1199;
   $593=$1200;
   var $1201=$591;
   var $1202=(($1201)|0);
   var $1203=$592;
   HEAP8[($1202)]=$1203;
   var $1204=(($1201+4)|0);
   var $1205=$593;
   HEAP32[(($1204)>>2)]=$1205;
   label = 58; break;
  case 58: 
   $590=$790;
   var $1207=$590;
   var $1208=(($1207)|0);
   var $1209=HEAP8[($1208)];
   label = 59; break;
  case 59: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $1209) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { label = 37; break; }
  case 60: 
   label = 62; break;
  case 61: 
   var $1213=$781;
   var $1214=HEAP32[(($1213)>>2)];
   var $1215=$1214 | 4;
   HEAP32[(($1213)>>2)]=$1215;
   $776=0;
   $791=1;
   label = 508; break;
  case 62: 
   label = 63; break;
  case 63: 
   label = 64; break;
  case 64: 
   var $1219=$__p;
   var $1220=(($1219)|(0))!=3;
   if ($1220) { label = 65; break; } else { label = 102; break; }
  case 65: 
   label = 66; break;
  case 66: 
   var $1223=$777;
   $588=$1223;
   $589=$__e;
   var $1224=$588;
   var $1225=$589;
   $586=$1224;
   $587=$1225;
   var $1226=$586;
   $585=$1226;
   var $1227=$585;
   var $1228=(($1227)|0);
   var $1229=HEAP32[(($1228)>>2)];
   var $1230=(($1229)|(0))!=0;
   if ($1230) { label = 67; break; } else { label = 73; break; }
  case 67: 
   var $1232=(($1227)|0);
   var $1233=HEAP32[(($1232)>>2)];
   $584=$1233;
   var $1234=$584;
   var $1235=(($1234+12)|0);
   var $1236=HEAP32[(($1235)>>2)];
   var $1237=(($1234+16)|0);
   var $1238=HEAP32[(($1237)>>2)];
   var $1239=(($1236)|(0))==(($1238)|(0));
   if ($1239) { label = 68; break; } else { label = 70; break; }
  case 68: 
   var $1241=$1234;
   var $1242=HEAP32[(($1241)>>2)];
   var $1243=(($1242+36)|0);
   var $1244=HEAP32[(($1243)>>2)];
   var $1245 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1244]($1234) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 69; break; } else { label = 37; break; }
  case 69: 
   $583=$1245;
   label = 71; break;
  case 70: 
   var $1247=(($1234+12)|0);
   var $1248=HEAP32[(($1247)>>2)];
   var $1249=HEAP8[($1248)];
   $582=$1249;
   var $1250=$582;
   var $1251=(($1250)&(255));
   $583=$1251;
   label = 71; break;
  case 71: 
   var $1252=$583;
   $580=$1252;
   $581=-1;
   var $1253=$580;
   var $1254=$581;
   var $1255=(($1253)|(0))==(($1254)|(0));
   if ($1255) { label = 72; break; } else { label = 73; break; }
  case 72: 
   var $1257=(($1227)|0);
   HEAP32[(($1257)>>2)]=0;
   label = 73; break;
  case 73: 
   var $1258=(($1227)|0);
   var $1259=HEAP32[(($1258)>>2)];
   var $1260=(($1259)|(0))==0;
   var $1261=(($1260)&(1));
   var $1262=$587;
   $579=$1262;
   var $1263=$579;
   var $1264=(($1263)|0);
   var $1265=HEAP32[(($1264)>>2)];
   var $1266=(($1265)|(0))!=0;
   if ($1266) { label = 74; break; } else { label = 80; break; }
  case 74: 
   var $1268=(($1263)|0);
   var $1269=HEAP32[(($1268)>>2)];
   $578=$1269;
   var $1270=$578;
   var $1271=(($1270+12)|0);
   var $1272=HEAP32[(($1271)>>2)];
   var $1273=(($1270+16)|0);
   var $1274=HEAP32[(($1273)>>2)];
   var $1275=(($1272)|(0))==(($1274)|(0));
   if ($1275) { label = 75; break; } else { label = 77; break; }
  case 75: 
   var $1277=$1270;
   var $1278=HEAP32[(($1277)>>2)];
   var $1279=(($1278+36)|0);
   var $1280=HEAP32[(($1279)>>2)];
   var $1281 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1280]($1270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 76; break; } else { label = 37; break; }
  case 76: 
   $577=$1281;
   label = 78; break;
  case 77: 
   var $1283=(($1270+12)|0);
   var $1284=HEAP32[(($1283)>>2)];
   var $1285=HEAP8[($1284)];
   $576=$1285;
   var $1286=$576;
   var $1287=(($1286)&(255));
   $577=$1287;
   label = 78; break;
  case 78: 
   var $1288=$577;
   $574=$1288;
   $575=-1;
   var $1289=$574;
   var $1290=$575;
   var $1291=(($1289)|(0))==(($1290)|(0));
   if ($1291) { label = 79; break; } else { label = 80; break; }
  case 79: 
   var $1293=(($1263)|0);
   HEAP32[(($1293)>>2)]=0;
   label = 80; break;
  case 80: 
   var $1294=(($1263)|0);
   var $1295=HEAP32[(($1294)>>2)];
   var $1296=(($1295)|(0))==0;
   var $1297=(($1296)&(1));
   var $1298=(($1261)|(0))==(($1297)|(0));
   var $1299=$1298 ^ 1;
   label = 81; break;
  case 81: 
   if ($1299) { label = 82; break; } else { var $1348 = 0;label = 92; break; }
  case 82: 
   var $1302=$783;
   var $1303=$777;
   $573=$1303;
   var $1304=$573;
   var $1305=(($1304)|0);
   var $1306=HEAP32[(($1305)>>2)];
   $572=$1306;
   var $1307=$572;
   var $1308=(($1307+12)|0);
   var $1309=HEAP32[(($1308)>>2)];
   var $1310=(($1307+16)|0);
   var $1311=HEAP32[(($1310)>>2)];
   var $1312=(($1309)|(0))==(($1311)|(0));
   if ($1312) { label = 83; break; } else { label = 85; break; }
  case 83: 
   var $1314=$1307;
   var $1315=HEAP32[(($1314)>>2)];
   var $1316=(($1315+36)|0);
   var $1317=HEAP32[(($1316)>>2)];
   var $1318 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1317]($1307) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 84; break; } else { label = 37; break; }
  case 84: 
   $571=$1318;
   label = 86; break;
  case 85: 
   var $1320=(($1307+12)|0);
   var $1321=HEAP32[(($1320)>>2)];
   var $1322=HEAP8[($1321)];
   $570=$1322;
   var $1323=$570;
   var $1324=(($1323)&(255));
   $571=$1324;
   label = 86; break;
  case 86: 
   var $1325=$571;
   var $1326=(($1325) & 255);
   label = 87; break;
  case 87: 
   $567=$1302;
   $568=8192;
   $569=$1326;
   var $1328=$567;
   var $1329=$569;
   var $1330=(($1329 << 24) >> 24);
   var $1331=(($1330)>>>(0)) <= 127;
   if ($1331) { label = 88; break; } else { label = 89; break; }
  case 88: 
   var $1333=$569;
   var $1334=(($1333 << 24) >> 24);
   var $1335=(($1328+8)|0);
   var $1336=HEAP32[(($1335)>>2)];
   var $1337=(($1336+($1334<<1))|0);
   var $1338=HEAP16[(($1337)>>1)];
   var $1339=(($1338)&(65535));
   var $1340=$568;
   var $1341=(($1340)&(65535));
   var $1342=$1339 & $1341;
   var $1344 = $1342;label = 90; break;
  case 89: 
   var $1344 = 0;label = 90; break;
  case 90: 
   var $1344;
   var $1345=(($1344)|(0))!=0;
   label = 91; break;
  case 91: 
   var $1348 = $1345;label = 92; break;
  case 92: 
   var $1348;
   if ($1348) { label = 93; break; } else { label = 101; break; }
  case 93: 
   var $1350=$777;
   $565=$1350;
   $566=0;
   var $1351=$565;
   var $1352=(($1351)|0);
   var $1353=HEAP32[(($1352)>>2)];
   $564=$1353;
   var $1354=$564;
   var $1355=(($1354+12)|0);
   var $1356=HEAP32[(($1355)>>2)];
   var $1357=(($1354+16)|0);
   var $1358=HEAP32[(($1357)>>2)];
   var $1359=(($1356)|(0))==(($1358)|(0));
   if ($1359) { label = 94; break; } else { label = 96; break; }
  case 94: 
   var $1361=$1354;
   var $1362=HEAP32[(($1361)>>2)];
   var $1363=(($1362+40)|0);
   var $1364=HEAP32[(($1363)>>2)];
   var $1365 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1364]($1354) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 95; break; } else { label = 37; break; }
  case 95: 
   $563=$1365;
   label = 97; break;
  case 96: 
   var $1367=(($1354+12)|0);
   var $1368=HEAP32[(($1367)>>2)];
   var $1369=(($1368+1)|0);
   HEAP32[(($1367)>>2)]=$1369;
   var $1370=HEAP8[($1368)];
   $562=$1370;
   var $1371=$562;
   var $1372=(($1371)&(255));
   $563=$1372;
   label = 97; break;
  case 97: 
   var $1373=$563;
   var $1374=(($1373) & 255);
   var $1375=(($1351)|0);
   var $1376=HEAP32[(($1375)>>2)];
   $559=$792;
   $560=$1374;
   $561=$1376;
   var $1377=$559;
   var $1378=$560;
   var $1379=$561;
   $556=$1377;
   $557=$1378;
   $558=$1379;
   var $1380=$556;
   var $1381=(($1380)|0);
   var $1382=$557;
   HEAP8[($1381)]=$1382;
   var $1383=(($1380+4)|0);
   var $1384=$558;
   HEAP32[(($1383)>>2)]=$1384;
   label = 98; break;
  case 98: 
   $555=$792;
   var $1386=$555;
   var $1387=(($1386)|0);
   var $1388=HEAP8[($1387)];
   label = 99; break;
  case 99: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $1388) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 100; break; } else { label = 37; break; }
  case 100: 
   label = 66; break;
  case 101: 
   label = 102; break;
  case 102: 
   label = 459; break;
  case 103: 
   $550=$__psn;
   var $1394=$550;
   $549=$1394;
   var $1395=$549;
   var $1396=(($1395)|0);
   $548=$1396;
   var $1397=$548;
   var $1398=$1397;
   $547=$1398;
   var $1399=$547;
   var $1400=(($1399)|0);
   var $1401=(($1400)|0);
   var $1402=$1401;
   var $1403=(($1402)|0);
   var $1404=$1403;
   var $1405=HEAP8[($1404)];
   var $1406=(($1405)&(255));
   var $1407=$1406 & 1;
   var $1408=(($1407)|(0))!=0;
   if ($1408) { label = 104; break; } else { label = 105; break; }
  case 104: 
   $543=$1394;
   var $1410=$543;
   var $1411=(($1410)|0);
   $542=$1411;
   var $1412=$542;
   var $1413=$1412;
   $541=$1413;
   var $1414=$541;
   var $1415=(($1414)|0);
   var $1416=(($1415)|0);
   var $1417=$1416;
   var $1418=(($1417+4)|0);
   var $1419=HEAP32[(($1418)>>2)];
   var $1434 = $1419;label = 106; break;
  case 105: 
   $546=$1394;
   var $1421=$546;
   var $1422=(($1421)|0);
   $545=$1422;
   var $1423=$545;
   var $1424=$1423;
   $544=$1424;
   var $1425=$544;
   var $1426=(($1425)|0);
   var $1427=(($1426)|0);
   var $1428=$1427;
   var $1429=(($1428)|0);
   var $1430=$1429;
   var $1431=HEAP8[($1430)];
   var $1432=(($1431)&(255));
   var $1433=$1432 >> 1;
   var $1434 = $1433;label = 106; break;
  case 106: 
   var $1434;
   $540=$__nsn;
   var $1435=$540;
   $539=$1435;
   var $1436=$539;
   var $1437=(($1436)|0);
   $538=$1437;
   var $1438=$538;
   var $1439=$1438;
   $537=$1439;
   var $1440=$537;
   var $1441=(($1440)|0);
   var $1442=(($1441)|0);
   var $1443=$1442;
   var $1444=(($1443)|0);
   var $1445=$1444;
   var $1446=HEAP8[($1445)];
   var $1447=(($1446)&(255));
   var $1448=$1447 & 1;
   var $1449=(($1448)|(0))!=0;
   if ($1449) { label = 107; break; } else { label = 108; break; }
  case 107: 
   $533=$1435;
   var $1451=$533;
   var $1452=(($1451)|0);
   $532=$1452;
   var $1453=$532;
   var $1454=$1453;
   $531=$1454;
   var $1455=$531;
   var $1456=(($1455)|0);
   var $1457=(($1456)|0);
   var $1458=$1457;
   var $1459=(($1458+4)|0);
   var $1460=HEAP32[(($1459)>>2)];
   var $1475 = $1460;label = 109; break;
  case 108: 
   $536=$1435;
   var $1462=$536;
   var $1463=(($1462)|0);
   $535=$1463;
   var $1464=$535;
   var $1465=$1464;
   $534=$1465;
   var $1466=$534;
   var $1467=(($1466)|0);
   var $1468=(($1467)|0);
   var $1469=$1468;
   var $1470=(($1469)|0);
   var $1471=$1470;
   var $1472=HEAP8[($1471)];
   var $1473=(($1472)&(255));
   var $1474=$1473 >> 1;
   var $1475 = $1474;label = 109; break;
  case 109: 
   var $1475;
   var $1476=((($1434)+($1475))|0);
   var $1477=(($1476)>>>(0)) > 0;
   if ($1477) { label = 110; break; } else { label = 214; break; }
  case 110: 
   $523=$__psn;
   var $1479=$523;
   $522=$1479;
   var $1480=$522;
   var $1481=(($1480)|0);
   $521=$1481;
   var $1482=$521;
   var $1483=$1482;
   $520=$1483;
   var $1484=$520;
   var $1485=(($1484)|0);
   var $1486=(($1485)|0);
   var $1487=$1486;
   var $1488=(($1487)|0);
   var $1489=$1488;
   var $1490=HEAP8[($1489)];
   var $1491=(($1490)&(255));
   var $1492=$1491 & 1;
   var $1493=(($1492)|(0))!=0;
   if ($1493) { label = 111; break; } else { label = 112; break; }
  case 111: 
   $516=$1479;
   var $1495=$516;
   var $1496=(($1495)|0);
   $515=$1496;
   var $1497=$515;
   var $1498=$1497;
   $514=$1498;
   var $1499=$514;
   var $1500=(($1499)|0);
   var $1501=(($1500)|0);
   var $1502=$1501;
   var $1503=(($1502+4)|0);
   var $1504=HEAP32[(($1503)>>2)];
   var $1519 = $1504;label = 113; break;
  case 112: 
   $519=$1479;
   var $1506=$519;
   var $1507=(($1506)|0);
   $518=$1507;
   var $1508=$518;
   var $1509=$1508;
   $517=$1509;
   var $1510=$517;
   var $1511=(($1510)|0);
   var $1512=(($1511)|0);
   var $1513=$1512;
   var $1514=(($1513)|0);
   var $1515=$1514;
   var $1516=HEAP8[($1515)];
   var $1517=(($1516)&(255));
   var $1518=$1517 >> 1;
   var $1519 = $1518;label = 113; break;
  case 113: 
   var $1519;
   var $1520=(($1519)|(0))==0;
   if ($1520) { label = 118; break; } else { label = 114; break; }
  case 114: 
   $497=$__nsn;
   var $1522=$497;
   $496=$1522;
   var $1523=$496;
   var $1524=(($1523)|0);
   $495=$1524;
   var $1525=$495;
   var $1526=$1525;
   $494=$1526;
   var $1527=$494;
   var $1528=(($1527)|0);
   var $1529=(($1528)|0);
   var $1530=$1529;
   var $1531=(($1530)|0);
   var $1532=$1531;
   var $1533=HEAP8[($1532)];
   var $1534=(($1533)&(255));
   var $1535=$1534 & 1;
   var $1536=(($1535)|(0))!=0;
   if ($1536) { label = 115; break; } else { label = 116; break; }
  case 115: 
   $490=$1522;
   var $1538=$490;
   var $1539=(($1538)|0);
   $489=$1539;
   var $1540=$489;
   var $1541=$1540;
   $488=$1541;
   var $1542=$488;
   var $1543=(($1542)|0);
   var $1544=(($1543)|0);
   var $1545=$1544;
   var $1546=(($1545+4)|0);
   var $1547=HEAP32[(($1546)>>2)];
   var $1562 = $1547;label = 117; break;
  case 116: 
   $493=$1522;
   var $1549=$493;
   var $1550=(($1549)|0);
   $492=$1550;
   var $1551=$492;
   var $1552=$1551;
   $491=$1552;
   var $1553=$491;
   var $1554=(($1553)|0);
   var $1555=(($1554)|0);
   var $1556=$1555;
   var $1557=(($1556)|0);
   var $1558=$1557;
   var $1559=HEAP8[($1558)];
   var $1560=(($1559)&(255));
   var $1561=$1560 >> 1;
   var $1562 = $1561;label = 117; break;
  case 117: 
   var $1562;
   var $1563=(($1562)|(0))==0;
   if ($1563) { label = 118; break; } else { label = 168; break; }
  case 118: 
   $487=$__psn;
   var $1565=$487;
   $486=$1565;
   var $1566=$486;
   var $1567=(($1566)|0);
   $485=$1567;
   var $1568=$485;
   var $1569=$1568;
   $484=$1569;
   var $1570=$484;
   var $1571=(($1570)|0);
   var $1572=(($1571)|0);
   var $1573=$1572;
   var $1574=(($1573)|0);
   var $1575=$1574;
   var $1576=HEAP8[($1575)];
   var $1577=(($1576)&(255));
   var $1578=$1577 & 1;
   var $1579=(($1578)|(0))!=0;
   if ($1579) { label = 119; break; } else { label = 120; break; }
  case 119: 
   $480=$1565;
   var $1581=$480;
   var $1582=(($1581)|0);
   $479=$1582;
   var $1583=$479;
   var $1584=$1583;
   $478=$1584;
   var $1585=$478;
   var $1586=(($1585)|0);
   var $1587=(($1586)|0);
   var $1588=$1587;
   var $1589=(($1588+4)|0);
   var $1590=HEAP32[(($1589)>>2)];
   var $1605 = $1590;label = 121; break;
  case 120: 
   $483=$1565;
   var $1592=$483;
   var $1593=(($1592)|0);
   $482=$1593;
   var $1594=$482;
   var $1595=$1594;
   $481=$1595;
   var $1596=$481;
   var $1597=(($1596)|0);
   var $1598=(($1597)|0);
   var $1599=$1598;
   var $1600=(($1599)|0);
   var $1601=$1600;
   var $1602=HEAP8[($1601)];
   var $1603=(($1602)&(255));
   var $1604=$1603 >> 1;
   var $1605 = $1604;label = 121; break;
  case 121: 
   var $1605;
   var $1606=(($1605)>>>(0)) > 0;
   if ($1606) { label = 122; break; } else { label = 145; break; }
  case 122: 
   var $1608=$777;
   $473=$1608;
   var $1609=$473;
   var $1610=(($1609)|0);
   var $1611=HEAP32[(($1610)>>2)];
   $472=$1611;
   var $1612=$472;
   var $1613=(($1612+12)|0);
   var $1614=HEAP32[(($1613)>>2)];
   var $1615=(($1612+16)|0);
   var $1616=HEAP32[(($1615)>>2)];
   var $1617=(($1614)|(0))==(($1616)|(0));
   if ($1617) { label = 123; break; } else { label = 125; break; }
  case 123: 
   var $1619=$1612;
   var $1620=HEAP32[(($1619)>>2)];
   var $1621=(($1620+36)|0);
   var $1622=HEAP32[(($1621)>>2)];
   var $1623 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1622]($1612) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 124; break; } else { label = 37; break; }
  case 124: 
   $471=$1623;
   label = 126; break;
  case 125: 
   var $1625=(($1612+12)|0);
   var $1626=HEAP32[(($1625)>>2)];
   var $1627=HEAP8[($1626)];
   $470=$1627;
   var $1628=$470;
   var $1629=(($1628)&(255));
   $471=$1629;
   label = 126; break;
  case 126: 
   var $1630=$471;
   var $1631=(($1630) & 255);
   label = 127; break;
  case 127: 
   var $1633=(($1631 << 24) >> 24);
   $468=$__psn;
   $469=0;
   var $1634=$468;
   $467=$1634;
   var $1635=$467;
   $466=$1635;
   var $1636=$466;
   var $1637=(($1636)|0);
   $465=$1637;
   var $1638=$465;
   var $1639=$1638;
   $464=$1639;
   var $1640=$464;
   var $1641=(($1640)|0);
   var $1642=(($1641)|0);
   var $1643=$1642;
   var $1644=(($1643)|0);
   var $1645=$1644;
   var $1646=HEAP8[($1645)];
   var $1647=(($1646)&(255));
   var $1648=$1647 & 1;
   var $1649=(($1648)|(0))!=0;
   if ($1649) { label = 128; break; } else { label = 129; break; }
  case 128: 
   $460=$1635;
   var $1651=$460;
   var $1652=(($1651)|0);
   $459=$1652;
   var $1653=$459;
   var $1654=$1653;
   $458=$1654;
   var $1655=$458;
   var $1656=(($1655)|0);
   var $1657=(($1656)|0);
   var $1658=$1657;
   var $1659=(($1658+8)|0);
   var $1660=HEAP32[(($1659)>>2)];
   var $1672 = $1660;label = 130; break;
  case 129: 
   $463=$1635;
   var $1662=$463;
   var $1663=(($1662)|0);
   $462=$1663;
   var $1664=$462;
   var $1665=$1664;
   $461=$1665;
   var $1666=$461;
   var $1667=(($1666)|0);
   var $1668=(($1667)|0);
   var $1669=$1668;
   var $1670=(($1669+1)|0);
   var $1671=(($1670)|0);
   var $1672 = $1671;label = 130; break;
  case 130: 
   var $1672;
   var $1673=$469;
   var $1674=(($1672+$1673)|0);
   label = 131; break;
  case 131: 
   var $1676=HEAP8[($1674)];
   var $1677=(($1676 << 24) >> 24);
   var $1678=(($1633)|(0))==(($1677)|(0));
   if ($1678) { label = 132; break; } else { label = 143; break; }
  case 132: 
   var $1680=$777;
   $453=$1680;
   var $1681=$453;
   var $1682=(($1681)|0);
   var $1683=HEAP32[(($1682)>>2)];
   $452=$1683;
   var $1684=$452;
   var $1685=(($1684+12)|0);
   var $1686=HEAP32[(($1685)>>2)];
   var $1687=(($1684+16)|0);
   var $1688=HEAP32[(($1687)>>2)];
   var $1689=(($1686)|(0))==(($1688)|(0));
   if ($1689) { label = 133; break; } else { label = 135; break; }
  case 133: 
   var $1691=$1684;
   var $1692=HEAP32[(($1691)>>2)];
   var $1693=(($1692+40)|0);
   var $1694=HEAP32[(($1693)>>2)];
   var $1695 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1694]($1684) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 134; break; } else { label = 37; break; }
  case 134: 
   $451=$1695;
   label = 136; break;
  case 135: 
   var $1697=(($1684+12)|0);
   var $1698=HEAP32[(($1697)>>2)];
   var $1699=(($1698+1)|0);
   HEAP32[(($1697)>>2)]=$1699;
   var $1700=HEAP8[($1698)];
   $450=$1700;
   var $1701=$450;
   var $1702=(($1701)&(255));
   $451=$1702;
   label = 136; break;
  case 136: 
   var $1703=$451;
   label = 137; break;
  case 137: 
   $449=$__psn;
   var $1705=$449;
   $448=$1705;
   var $1706=$448;
   var $1707=(($1706)|0);
   $447=$1707;
   var $1708=$447;
   var $1709=$1708;
   $446=$1709;
   var $1710=$446;
   var $1711=(($1710)|0);
   var $1712=(($1711)|0);
   var $1713=$1712;
   var $1714=(($1713)|0);
   var $1715=$1714;
   var $1716=HEAP8[($1715)];
   var $1717=(($1716)&(255));
   var $1718=$1717 & 1;
   var $1719=(($1718)|(0))!=0;
   if ($1719) { label = 138; break; } else { label = 139; break; }
  case 138: 
   $442=$1705;
   var $1721=$442;
   var $1722=(($1721)|0);
   $441=$1722;
   var $1723=$441;
   var $1724=$1723;
   $440=$1724;
   var $1725=$440;
   var $1726=(($1725)|0);
   var $1727=(($1726)|0);
   var $1728=$1727;
   var $1729=(($1728+4)|0);
   var $1730=HEAP32[(($1729)>>2)];
   var $1745 = $1730;label = 140; break;
  case 139: 
   $445=$1705;
   var $1732=$445;
   var $1733=(($1732)|0);
   $444=$1733;
   var $1734=$444;
   var $1735=$1734;
   $443=$1735;
   var $1736=$443;
   var $1737=(($1736)|0);
   var $1738=(($1737)|0);
   var $1739=$1738;
   var $1740=(($1739)|0);
   var $1741=$1740;
   var $1742=HEAP8[($1741)];
   var $1743=(($1742)&(255));
   var $1744=$1743 >> 1;
   var $1745 = $1744;label = 140; break;
  case 140: 
   var $1745;
   var $1746=(($1745)>>>(0)) > 1;
   if ($1746) { label = 141; break; } else { label = 142; break; }
  case 141: 
   $__trailing_sign=$__psn;
   label = 142; break;
  case 142: 
   label = 144; break;
  case 143: 
   var $1750=$782;
   HEAP8[($1750)]=1;
   label = 144; break;
  case 144: 
   label = 167; break;
  case 145: 
   var $1753=$777;
   $423=$1753;
   var $1754=$423;
   var $1755=(($1754)|0);
   var $1756=HEAP32[(($1755)>>2)];
   $422=$1756;
   var $1757=$422;
   var $1758=(($1757+12)|0);
   var $1759=HEAP32[(($1758)>>2)];
   var $1760=(($1757+16)|0);
   var $1761=HEAP32[(($1760)>>2)];
   var $1762=(($1759)|(0))==(($1761)|(0));
   if ($1762) { label = 146; break; } else { label = 148; break; }
  case 146: 
   var $1764=$1757;
   var $1765=HEAP32[(($1764)>>2)];
   var $1766=(($1765+36)|0);
   var $1767=HEAP32[(($1766)>>2)];
   var $1768 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1767]($1757) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 147; break; } else { label = 37; break; }
  case 147: 
   $421=$1768;
   label = 149; break;
  case 148: 
   var $1770=(($1757+12)|0);
   var $1771=HEAP32[(($1770)>>2)];
   var $1772=HEAP8[($1771)];
   $420=$1772;
   var $1773=$420;
   var $1774=(($1773)&(255));
   $421=$1774;
   label = 149; break;
  case 149: 
   var $1775=$421;
   var $1776=(($1775) & 255);
   label = 150; break;
  case 150: 
   var $1778=(($1776 << 24) >> 24);
   $418=$__nsn;
   $419=0;
   var $1779=$418;
   $417=$1779;
   var $1780=$417;
   $416=$1780;
   var $1781=$416;
   var $1782=(($1781)|0);
   $415=$1782;
   var $1783=$415;
   var $1784=$1783;
   $414=$1784;
   var $1785=$414;
   var $1786=(($1785)|0);
   var $1787=(($1786)|0);
   var $1788=$1787;
   var $1789=(($1788)|0);
   var $1790=$1789;
   var $1791=HEAP8[($1790)];
   var $1792=(($1791)&(255));
   var $1793=$1792 & 1;
   var $1794=(($1793)|(0))!=0;
   if ($1794) { label = 151; break; } else { label = 152; break; }
  case 151: 
   $410=$1780;
   var $1796=$410;
   var $1797=(($1796)|0);
   $409=$1797;
   var $1798=$409;
   var $1799=$1798;
   $408=$1799;
   var $1800=$408;
   var $1801=(($1800)|0);
   var $1802=(($1801)|0);
   var $1803=$1802;
   var $1804=(($1803+8)|0);
   var $1805=HEAP32[(($1804)>>2)];
   var $1817 = $1805;label = 153; break;
  case 152: 
   $413=$1780;
   var $1807=$413;
   var $1808=(($1807)|0);
   $412=$1808;
   var $1809=$412;
   var $1810=$1809;
   $411=$1810;
   var $1811=$411;
   var $1812=(($1811)|0);
   var $1813=(($1812)|0);
   var $1814=$1813;
   var $1815=(($1814+1)|0);
   var $1816=(($1815)|0);
   var $1817 = $1816;label = 153; break;
  case 153: 
   var $1817;
   var $1818=$419;
   var $1819=(($1817+$1818)|0);
   label = 154; break;
  case 154: 
   var $1821=HEAP8[($1819)];
   var $1822=(($1821 << 24) >> 24);
   var $1823=(($1778)|(0))==(($1822)|(0));
   if ($1823) { label = 155; break; } else { label = 166; break; }
  case 155: 
   var $1825=$777;
   $407=$1825;
   var $1826=$407;
   var $1827=(($1826)|0);
   var $1828=HEAP32[(($1827)>>2)];
   $406=$1828;
   var $1829=$406;
   var $1830=(($1829+12)|0);
   var $1831=HEAP32[(($1830)>>2)];
   var $1832=(($1829+16)|0);
   var $1833=HEAP32[(($1832)>>2)];
   var $1834=(($1831)|(0))==(($1833)|(0));
   if ($1834) { label = 156; break; } else { label = 158; break; }
  case 156: 
   var $1836=$1829;
   var $1837=HEAP32[(($1836)>>2)];
   var $1838=(($1837+40)|0);
   var $1839=HEAP32[(($1838)>>2)];
   var $1840 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1839]($1829) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 157; break; } else { label = 37; break; }
  case 157: 
   $405=$1840;
   label = 159; break;
  case 158: 
   var $1842=(($1829+12)|0);
   var $1843=HEAP32[(($1842)>>2)];
   var $1844=(($1843+1)|0);
   HEAP32[(($1842)>>2)]=$1844;
   var $1845=HEAP8[($1843)];
   $404=$1845;
   var $1846=$404;
   var $1847=(($1846)&(255));
   $405=$1847;
   label = 159; break;
  case 159: 
   var $1848=$405;
   label = 160; break;
  case 160: 
   var $1850=$782;
   HEAP8[($1850)]=1;
   $403=$__nsn;
   var $1851=$403;
   $402=$1851;
   var $1852=$402;
   var $1853=(($1852)|0);
   $401=$1853;
   var $1854=$401;
   var $1855=$1854;
   $400=$1855;
   var $1856=$400;
   var $1857=(($1856)|0);
   var $1858=(($1857)|0);
   var $1859=$1858;
   var $1860=(($1859)|0);
   var $1861=$1860;
   var $1862=HEAP8[($1861)];
   var $1863=(($1862)&(255));
   var $1864=$1863 & 1;
   var $1865=(($1864)|(0))!=0;
   if ($1865) { label = 161; break; } else { label = 162; break; }
  case 161: 
   $396=$1851;
   var $1867=$396;
   var $1868=(($1867)|0);
   $395=$1868;
   var $1869=$395;
   var $1870=$1869;
   $394=$1870;
   var $1871=$394;
   var $1872=(($1871)|0);
   var $1873=(($1872)|0);
   var $1874=$1873;
   var $1875=(($1874+4)|0);
   var $1876=HEAP32[(($1875)>>2)];
   var $1891 = $1876;label = 163; break;
  case 162: 
   $399=$1851;
   var $1878=$399;
   var $1879=(($1878)|0);
   $398=$1879;
   var $1880=$398;
   var $1881=$1880;
   $397=$1881;
   var $1882=$397;
   var $1883=(($1882)|0);
   var $1884=(($1883)|0);
   var $1885=$1884;
   var $1886=(($1885)|0);
   var $1887=$1886;
   var $1888=HEAP8[($1887)];
   var $1889=(($1888)&(255));
   var $1890=$1889 >> 1;
   var $1891 = $1890;label = 163; break;
  case 163: 
   var $1891;
   var $1892=(($1891)>>>(0)) > 1;
   if ($1892) { label = 164; break; } else { label = 165; break; }
  case 164: 
   $__trailing_sign=$__nsn;
   label = 165; break;
  case 165: 
   label = 166; break;
  case 166: 
   label = 167; break;
  case 167: 
   label = 213; break;
  case 168: 
   var $1898=$777;
   $393=$1898;
   var $1899=$393;
   var $1900=(($1899)|0);
   var $1901=HEAP32[(($1900)>>2)];
   $392=$1901;
   var $1902=$392;
   var $1903=(($1902+12)|0);
   var $1904=HEAP32[(($1903)>>2)];
   var $1905=(($1902+16)|0);
   var $1906=HEAP32[(($1905)>>2)];
   var $1907=(($1904)|(0))==(($1906)|(0));
   if ($1907) { label = 169; break; } else { label = 171; break; }
  case 169: 
   var $1909=$1902;
   var $1910=HEAP32[(($1909)>>2)];
   var $1911=(($1910+36)|0);
   var $1912=HEAP32[(($1911)>>2)];
   var $1913 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1912]($1902) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 170; break; } else { label = 37; break; }
  case 170: 
   $391=$1913;
   label = 172; break;
  case 171: 
   var $1915=(($1902+12)|0);
   var $1916=HEAP32[(($1915)>>2)];
   var $1917=HEAP8[($1916)];
   $390=$1917;
   var $1918=$390;
   var $1919=(($1918)&(255));
   $391=$1919;
   label = 172; break;
  case 172: 
   var $1920=$391;
   var $1921=(($1920) & 255);
   label = 173; break;
  case 173: 
   var $1923=(($1921 << 24) >> 24);
   $388=$__psn;
   $389=0;
   var $1924=$388;
   $387=$1924;
   var $1925=$387;
   $386=$1925;
   var $1926=$386;
   var $1927=(($1926)|0);
   $385=$1927;
   var $1928=$385;
   var $1929=$1928;
   $384=$1929;
   var $1930=$384;
   var $1931=(($1930)|0);
   var $1932=(($1931)|0);
   var $1933=$1932;
   var $1934=(($1933)|0);
   var $1935=$1934;
   var $1936=HEAP8[($1935)];
   var $1937=(($1936)&(255));
   var $1938=$1937 & 1;
   var $1939=(($1938)|(0))!=0;
   if ($1939) { label = 174; break; } else { label = 175; break; }
  case 174: 
   $380=$1925;
   var $1941=$380;
   var $1942=(($1941)|0);
   $379=$1942;
   var $1943=$379;
   var $1944=$1943;
   $378=$1944;
   var $1945=$378;
   var $1946=(($1945)|0);
   var $1947=(($1946)|0);
   var $1948=$1947;
   var $1949=(($1948+8)|0);
   var $1950=HEAP32[(($1949)>>2)];
   var $1962 = $1950;label = 176; break;
  case 175: 
   $383=$1925;
   var $1952=$383;
   var $1953=(($1952)|0);
   $382=$1953;
   var $1954=$382;
   var $1955=$1954;
   $381=$1955;
   var $1956=$381;
   var $1957=(($1956)|0);
   var $1958=(($1957)|0);
   var $1959=$1958;
   var $1960=(($1959+1)|0);
   var $1961=(($1960)|0);
   var $1962 = $1961;label = 176; break;
  case 176: 
   var $1962;
   var $1963=$389;
   var $1964=(($1962+$1963)|0);
   label = 177; break;
  case 177: 
   var $1966=HEAP8[($1964)];
   var $1967=(($1966 << 24) >> 24);
   var $1968=(($1923)|(0))==(($1967)|(0));
   if ($1968) { label = 178; break; } else { label = 189; break; }
  case 178: 
   var $1970=$777;
   $370=$1970;
   var $1971=$370;
   var $1972=(($1971)|0);
   var $1973=HEAP32[(($1972)>>2)];
   $369=$1973;
   var $1974=$369;
   var $1975=(($1974+12)|0);
   var $1976=HEAP32[(($1975)>>2)];
   var $1977=(($1974+16)|0);
   var $1978=HEAP32[(($1977)>>2)];
   var $1979=(($1976)|(0))==(($1978)|(0));
   if ($1979) { label = 179; break; } else { label = 181; break; }
  case 179: 
   var $1981=$1974;
   var $1982=HEAP32[(($1981)>>2)];
   var $1983=(($1982+40)|0);
   var $1984=HEAP32[(($1983)>>2)];
   var $1985 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1984]($1974) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 180; break; } else { label = 37; break; }
  case 180: 
   $368=$1985;
   label = 182; break;
  case 181: 
   var $1987=(($1974+12)|0);
   var $1988=HEAP32[(($1987)>>2)];
   var $1989=(($1988+1)|0);
   HEAP32[(($1987)>>2)]=$1989;
   var $1990=HEAP8[($1988)];
   $367=$1990;
   var $1991=$367;
   var $1992=(($1991)&(255));
   $368=$1992;
   label = 182; break;
  case 182: 
   var $1993=$368;
   label = 183; break;
  case 183: 
   $366=$__psn;
   var $1995=$366;
   $365=$1995;
   var $1996=$365;
   var $1997=(($1996)|0);
   $364=$1997;
   var $1998=$364;
   var $1999=$1998;
   $363=$1999;
   var $2000=$363;
   var $2001=(($2000)|0);
   var $2002=(($2001)|0);
   var $2003=$2002;
   var $2004=(($2003)|0);
   var $2005=$2004;
   var $2006=HEAP8[($2005)];
   var $2007=(($2006)&(255));
   var $2008=$2007 & 1;
   var $2009=(($2008)|(0))!=0;
   if ($2009) { label = 184; break; } else { label = 185; break; }
  case 184: 
   $359=$1995;
   var $2011=$359;
   var $2012=(($2011)|0);
   $358=$2012;
   var $2013=$358;
   var $2014=$2013;
   $357=$2014;
   var $2015=$357;
   var $2016=(($2015)|0);
   var $2017=(($2016)|0);
   var $2018=$2017;
   var $2019=(($2018+4)|0);
   var $2020=HEAP32[(($2019)>>2)];
   var $2035 = $2020;label = 186; break;
  case 185: 
   $362=$1995;
   var $2022=$362;
   var $2023=(($2022)|0);
   $361=$2023;
   var $2024=$361;
   var $2025=$2024;
   $360=$2025;
   var $2026=$360;
   var $2027=(($2026)|0);
   var $2028=(($2027)|0);
   var $2029=$2028;
   var $2030=(($2029)|0);
   var $2031=$2030;
   var $2032=HEAP8[($2031)];
   var $2033=(($2032)&(255));
   var $2034=$2033 >> 1;
   var $2035 = $2034;label = 186; break;
  case 186: 
   var $2035;
   var $2036=(($2035)>>>(0)) > 1;
   if ($2036) { label = 187; break; } else { label = 188; break; }
  case 187: 
   $__trailing_sign=$__psn;
   label = 188; break;
  case 188: 
   label = 212; break;
  case 189: 
   var $2040=$777;
   $356=$2040;
   var $2041=$356;
   var $2042=(($2041)|0);
   var $2043=HEAP32[(($2042)>>2)];
   $355=$2043;
   var $2044=$355;
   var $2045=(($2044+12)|0);
   var $2046=HEAP32[(($2045)>>2)];
   var $2047=(($2044+16)|0);
   var $2048=HEAP32[(($2047)>>2)];
   var $2049=(($2046)|(0))==(($2048)|(0));
   if ($2049) { label = 190; break; } else { label = 192; break; }
  case 190: 
   var $2051=$2044;
   var $2052=HEAP32[(($2051)>>2)];
   var $2053=(($2052+36)|0);
   var $2054=HEAP32[(($2053)>>2)];
   var $2055 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2054]($2044) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 191; break; } else { label = 37; break; }
  case 191: 
   $354=$2055;
   label = 193; break;
  case 192: 
   var $2057=(($2044+12)|0);
   var $2058=HEAP32[(($2057)>>2)];
   var $2059=HEAP8[($2058)];
   $353=$2059;
   var $2060=$353;
   var $2061=(($2060)&(255));
   $354=$2061;
   label = 193; break;
  case 193: 
   var $2062=$354;
   var $2063=(($2062) & 255);
   label = 194; break;
  case 194: 
   var $2065=(($2063 << 24) >> 24);
   $351=$__nsn;
   $352=0;
   var $2066=$351;
   $350=$2066;
   var $2067=$350;
   $349=$2067;
   var $2068=$349;
   var $2069=(($2068)|0);
   $348=$2069;
   var $2070=$348;
   var $2071=$2070;
   $347=$2071;
   var $2072=$347;
   var $2073=(($2072)|0);
   var $2074=(($2073)|0);
   var $2075=$2074;
   var $2076=(($2075)|0);
   var $2077=$2076;
   var $2078=HEAP8[($2077)];
   var $2079=(($2078)&(255));
   var $2080=$2079 & 1;
   var $2081=(($2080)|(0))!=0;
   if ($2081) { label = 195; break; } else { label = 196; break; }
  case 195: 
   $343=$2067;
   var $2083=$343;
   var $2084=(($2083)|0);
   $342=$2084;
   var $2085=$342;
   var $2086=$2085;
   $341=$2086;
   var $2087=$341;
   var $2088=(($2087)|0);
   var $2089=(($2088)|0);
   var $2090=$2089;
   var $2091=(($2090+8)|0);
   var $2092=HEAP32[(($2091)>>2)];
   var $2104 = $2092;label = 197; break;
  case 196: 
   $346=$2067;
   var $2094=$346;
   var $2095=(($2094)|0);
   $345=$2095;
   var $2096=$345;
   var $2097=$2096;
   $344=$2097;
   var $2098=$344;
   var $2099=(($2098)|0);
   var $2100=(($2099)|0);
   var $2101=$2100;
   var $2102=(($2101+1)|0);
   var $2103=(($2102)|0);
   var $2104 = $2103;label = 197; break;
  case 197: 
   var $2104;
   var $2105=$352;
   var $2106=(($2104+$2105)|0);
   label = 198; break;
  case 198: 
   var $2108=HEAP8[($2106)];
   var $2109=(($2108 << 24) >> 24);
   var $2110=(($2065)|(0))==(($2109)|(0));
   if ($2110) { label = 199; break; } else { label = 210; break; }
  case 199: 
   var $2112=$777;
   $330=$2112;
   var $2113=$330;
   var $2114=(($2113)|0);
   var $2115=HEAP32[(($2114)>>2)];
   $329=$2115;
   var $2116=$329;
   var $2117=(($2116+12)|0);
   var $2118=HEAP32[(($2117)>>2)];
   var $2119=(($2116+16)|0);
   var $2120=HEAP32[(($2119)>>2)];
   var $2121=(($2118)|(0))==(($2120)|(0));
   if ($2121) { label = 200; break; } else { label = 202; break; }
  case 200: 
   var $2123=$2116;
   var $2124=HEAP32[(($2123)>>2)];
   var $2125=(($2124+40)|0);
   var $2126=HEAP32[(($2125)>>2)];
   var $2127 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2126]($2116) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 201; break; } else { label = 37; break; }
  case 201: 
   $328=$2127;
   label = 203; break;
  case 202: 
   var $2129=(($2116+12)|0);
   var $2130=HEAP32[(($2129)>>2)];
   var $2131=(($2130+1)|0);
   HEAP32[(($2129)>>2)]=$2131;
   var $2132=HEAP8[($2130)];
   $327=$2132;
   var $2133=$327;
   var $2134=(($2133)&(255));
   $328=$2134;
   label = 203; break;
  case 203: 
   var $2135=$328;
   label = 204; break;
  case 204: 
   var $2137=$782;
   HEAP8[($2137)]=1;
   $326=$__nsn;
   var $2138=$326;
   $325=$2138;
   var $2139=$325;
   var $2140=(($2139)|0);
   $324=$2140;
   var $2141=$324;
   var $2142=$2141;
   $323=$2142;
   var $2143=$323;
   var $2144=(($2143)|0);
   var $2145=(($2144)|0);
   var $2146=$2145;
   var $2147=(($2146)|0);
   var $2148=$2147;
   var $2149=HEAP8[($2148)];
   var $2150=(($2149)&(255));
   var $2151=$2150 & 1;
   var $2152=(($2151)|(0))!=0;
   if ($2152) { label = 205; break; } else { label = 206; break; }
  case 205: 
   $319=$2138;
   var $2154=$319;
   var $2155=(($2154)|0);
   $318=$2155;
   var $2156=$318;
   var $2157=$2156;
   $317=$2157;
   var $2158=$317;
   var $2159=(($2158)|0);
   var $2160=(($2159)|0);
   var $2161=$2160;
   var $2162=(($2161+4)|0);
   var $2163=HEAP32[(($2162)>>2)];
   var $2178 = $2163;label = 207; break;
  case 206: 
   $322=$2138;
   var $2165=$322;
   var $2166=(($2165)|0);
   $321=$2166;
   var $2167=$321;
   var $2168=$2167;
   $320=$2168;
   var $2169=$320;
   var $2170=(($2169)|0);
   var $2171=(($2170)|0);
   var $2172=$2171;
   var $2173=(($2172)|0);
   var $2174=$2173;
   var $2175=HEAP8[($2174)];
   var $2176=(($2175)&(255));
   var $2177=$2176 >> 1;
   var $2178 = $2177;label = 207; break;
  case 207: 
   var $2178;
   var $2179=(($2178)>>>(0)) > 1;
   if ($2179) { label = 208; break; } else { label = 209; break; }
  case 208: 
   $__trailing_sign=$__nsn;
   label = 209; break;
  case 209: 
   label = 211; break;
  case 210: 
   var $2183=$781;
   var $2184=HEAP32[(($2183)>>2)];
   var $2185=$2184 | 4;
   HEAP32[(($2183)>>2)]=$2185;
   $776=0;
   $791=1;
   label = 508; break;
  case 211: 
   label = 212; break;
  case 212: 
   label = 213; break;
  case 213: 
   label = 214; break;
  case 214: 
   label = 459; break;
  case 215: 
   var $2191=$__trailing_sign;
   var $2192=(($2191)|(0))!=0;
   if ($2192) { var $2208 = 1;label = 220; break; } else { label = 216; break; }
  case 216: 
   var $2194=$__p;
   var $2195=(($2194)>>>(0)) < 2;
   if ($2195) { var $2208 = 1;label = 220; break; } else { label = 217; break; }
  case 217: 
   var $2197=$__p;
   var $2198=(($2197)|(0))==2;
   if ($2198) { label = 218; break; } else { var $2206 = 0;label = 219; break; }
  case 218: 
   var $2200=(($__pat)|0);
   var $2201=(($2200+3)|0);
   var $2202=HEAP8[($2201)];
   var $2203=(($2202 << 24) >> 24);
   var $2204=(($2203)|(0))!=0;
   var $2206 = $2204;label = 219; break;
  case 219: 
   var $2206;
   var $2208 = $2206;label = 220; break;
  case 220: 
   var $2208;
   var $2209=(($2208)&(1));
   $__more_needed=$2209;
   var $2210=$780;
   var $2211=$2210 & 512;
   var $2212=(($2211)|(0))!=0;
   var $2213=(($2212)&(1));
   $__sb=$2213;
   var $2214=$__sb;
   var $2215=(($2214) & 1);
   if ($2215) { label = 222; break; } else { label = 221; break; }
  case 221: 
   var $2217=$__more_needed;
   var $2218=(($2217) & 1);
   if ($2218) { label = 222; break; } else { label = 325; break; }
  case 222: 
   $309=$__sym;
   var $2220=$309;
   $308=$2220;
   var $2221=$308;
   $307=$2221;
   var $2222=$307;
   var $2223=(($2222)|0);
   $306=$2223;
   var $2224=$306;
   var $2225=$2224;
   $305=$2225;
   var $2226=$305;
   var $2227=(($2226)|0);
   var $2228=(($2227)|0);
   var $2229=$2228;
   var $2230=(($2229)|0);
   var $2231=$2230;
   var $2232=HEAP8[($2231)];
   var $2233=(($2232)&(255));
   var $2234=$2233 & 1;
   var $2235=(($2234)|(0))!=0;
   if ($2235) { label = 223; break; } else { label = 224; break; }
  case 223: 
   $301=$2221;
   var $2237=$301;
   var $2238=(($2237)|0);
   $300=$2238;
   var $2239=$300;
   var $2240=$2239;
   $299=$2240;
   var $2241=$299;
   var $2242=(($2241)|0);
   var $2243=(($2242)|0);
   var $2244=$2243;
   var $2245=(($2244+8)|0);
   var $2246=HEAP32[(($2245)>>2)];
   var $2258 = $2246;label = 225; break;
  case 224: 
   $304=$2221;
   var $2248=$304;
   var $2249=(($2248)|0);
   $303=$2249;
   var $2250=$303;
   var $2251=$2250;
   $302=$2251;
   var $2252=$302;
   var $2253=(($2252)|0);
   var $2254=(($2253)|0);
   var $2255=$2254;
   var $2256=(($2255+1)|0);
   var $2257=(($2256)|0);
   var $2258 = $2257;label = 225; break;
  case 225: 
   var $2258;
   $297=$793;
   $298=$2258;
   var $2259=$297;
   var $2260=$298;
   $295=$2259;
   $296=$2260;
   var $2261=$295;
   var $2262=(($2261)|0);
   var $2263=$296;
   HEAP32[(($2262)>>2)]=$2263;
   $276=$__sym_space_end;
   $277=$793;
   $278=0;
   var $2264=$276;
   var $2265=$278;
   var $2266=$277;
   $273=$2264;
   $274=$2266;
   $275=$2265;
   var $2267=$273;
   var $2268=(($2267)|0);
   var $2269=$274;
   $272=$2269;
   var $2270=$272;
   var $2271=(($2270)|0);
   var $2272=HEAP32[(($2271)>>2)];
   HEAP32[(($2268)>>2)]=$2272;
   var $2273=$__p;
   var $2274=(($2273)>>>(0)) > 0;
   if ($2274) { label = 226; break; } else { label = 278; break; }
  case 226: 
   var $2276=$__p;
   var $2277=((($2276)-(1))|0);
   var $2278=(($__pat)|0);
   var $2279=(($2278+$2277)|0);
   var $2280=HEAP8[($2279)];
   var $2281=(($2280 << 24) >> 24);
   var $2282=(($2281)|(0))==0;
   if ($2282) { label = 228; break; } else { label = 227; break; }
  case 227: 
   var $2284=$__p;
   var $2285=((($2284)-(1))|0);
   var $2286=(($__pat)|0);
   var $2287=(($2286+$2285)|0);
   var $2288=HEAP8[($2287)];
   var $2289=(($2288 << 24) >> 24);
   var $2290=(($2289)|(0))==1;
   if ($2290) { label = 228; break; } else { label = 278; break; }
  case 228: 
   label = 229; break;
  case 229: 
   $271=$__sym;
   var $2293=$271;
   $270=$2293;
   var $2294=$270;
   $269=$2294;
   var $2295=$269;
   var $2296=(($2295)|0);
   $268=$2296;
   var $2297=$268;
   var $2298=$2297;
   $267=$2298;
   var $2299=$267;
   var $2300=(($2299)|0);
   var $2301=(($2300)|0);
   var $2302=$2301;
   var $2303=(($2302)|0);
   var $2304=$2303;
   var $2305=HEAP8[($2304)];
   var $2306=(($2305)&(255));
   var $2307=$2306 & 1;
   var $2308=(($2307)|(0))!=0;
   if ($2308) { label = 230; break; } else { label = 231; break; }
  case 230: 
   $263=$2294;
   var $2310=$263;
   var $2311=(($2310)|0);
   $262=$2311;
   var $2312=$262;
   var $2313=$2312;
   $261=$2313;
   var $2314=$261;
   var $2315=(($2314)|0);
   var $2316=(($2315)|0);
   var $2317=$2316;
   var $2318=(($2317+8)|0);
   var $2319=HEAP32[(($2318)>>2)];
   var $2331 = $2319;label = 232; break;
  case 231: 
   $266=$2294;
   var $2321=$266;
   var $2322=(($2321)|0);
   $265=$2322;
   var $2323=$265;
   var $2324=$2323;
   $264=$2324;
   var $2325=$264;
   var $2326=(($2325)|0);
   var $2327=(($2326)|0);
   var $2328=$2327;
   var $2329=(($2328+1)|0);
   var $2330=(($2329)|0);
   var $2331 = $2330;label = 232; break;
  case 232: 
   var $2331;
   $256=$2293;
   var $2332=$256;
   $255=$2332;
   var $2333=$255;
   var $2334=(($2333)|0);
   $254=$2334;
   var $2335=$254;
   var $2336=$2335;
   $253=$2336;
   var $2337=$253;
   var $2338=(($2337)|0);
   var $2339=(($2338)|0);
   var $2340=$2339;
   var $2341=(($2340)|0);
   var $2342=$2341;
   var $2343=HEAP8[($2342)];
   var $2344=(($2343)&(255));
   var $2345=$2344 & 1;
   var $2346=(($2345)|(0))!=0;
   if ($2346) { label = 233; break; } else { label = 234; break; }
  case 233: 
   $249=$2332;
   var $2348=$249;
   var $2349=(($2348)|0);
   $248=$2349;
   var $2350=$248;
   var $2351=$2350;
   $247=$2351;
   var $2352=$247;
   var $2353=(($2352)|0);
   var $2354=(($2353)|0);
   var $2355=$2354;
   var $2356=(($2355+4)|0);
   var $2357=HEAP32[(($2356)>>2)];
   var $2372 = $2357;label = 235; break;
  case 234: 
   $252=$2332;
   var $2359=$252;
   var $2360=(($2359)|0);
   $251=$2360;
   var $2361=$251;
   var $2362=$2361;
   $250=$2362;
   var $2363=$250;
   var $2364=(($2363)|0);
   var $2365=(($2364)|0);
   var $2366=$2365;
   var $2367=(($2366)|0);
   var $2368=$2367;
   var $2369=HEAP8[($2368)];
   var $2370=(($2369)&(255));
   var $2371=$2370 >> 1;
   var $2372 = $2371;label = 235; break;
  case 235: 
   var $2372;
   var $2373=(($2331+$2372)|0);
   $259=$794;
   $260=$2373;
   var $2374=$259;
   var $2375=$260;
   $257=$2374;
   $258=$2375;
   var $2376=$257;
   var $2377=(($2376)|0);
   var $2378=$258;
   HEAP32[(($2377)>>2)]=$2378;
   $209=$__sym_space_end;
   $210=$794;
   var $2379=$209;
   var $2380=$210;
   $207=$2379;
   $208=$2380;
   var $2381=$207;
   $206=$2381;
   var $2382=$206;
   var $2383=(($2382)|0);
   var $2384=HEAP32[(($2383)>>2)];
   var $2385=$208;
   $205=$2385;
   var $2386=$205;
   var $2387=(($2386)|0);
   var $2388=HEAP32[(($2387)>>2)];
   var $2389=(($2384)|(0))==(($2388)|(0));
   var $2390=$2389 ^ 1;
   if ($2390) { label = 236; break; } else { var $2417 = 0;label = 241; break; }
  case 236: 
   var $2392=$783;
   $199=$__sym_space_end;
   var $2393=$199;
   var $2394=(($2393)|0);
   var $2395=HEAP32[(($2394)>>2)];
   var $2396=HEAP8[($2395)];
   $180=$2392;
   $181=8192;
   $182=$2396;
   var $2397=$180;
   var $2398=$182;
   var $2399=(($2398 << 24) >> 24);
   var $2400=(($2399)>>>(0)) <= 127;
   if ($2400) { label = 237; break; } else { label = 238; break; }
  case 237: 
   var $2402=$182;
   var $2403=(($2402 << 24) >> 24);
   var $2404=(($2397+8)|0);
   var $2405=HEAP32[(($2404)>>2)];
   var $2406=(($2405+($2403<<1))|0);
   var $2407=HEAP16[(($2406)>>1)];
   var $2408=(($2407)&(65535));
   var $2409=$181;
   var $2410=(($2409)&(65535));
   var $2411=$2408 & $2410;
   var $2413 = $2411;label = 239; break;
  case 238: 
   var $2413 = 0;label = 239; break;
  case 239: 
   var $2413;
   var $2414=(($2413)|(0))!=0;
   label = 240; break;
  case 240: 
   var $2417 = $2414;label = 241; break;
  case 241: 
   var $2417;
   if ($2417) { label = 242; break; } else { label = 243; break; }
  case 242: 
   $179=$__sym_space_end;
   var $2419=$179;
   var $2420=(($2419)|0);
   var $2421=HEAP32[(($2420)>>2)];
   var $2422=(($2421+1)|0);
   HEAP32[(($2420)>>2)]=$2422;
   label = 229; break;
  case 243: 
   $15=$__sym;
   var $2424=$15;
   $14=$2424;
   var $2425=$14;
   $13=$2425;
   var $2426=$13;
   var $2427=(($2426)|0);
   $12=$2427;
   var $2428=$12;
   var $2429=$2428;
   $11=$2429;
   var $2430=$11;
   var $2431=(($2430)|0);
   var $2432=(($2431)|0);
   var $2433=$2432;
   var $2434=(($2433)|0);
   var $2435=$2434;
   var $2436=HEAP8[($2435)];
   var $2437=(($2436)&(255));
   var $2438=$2437 & 1;
   var $2439=(($2438)|(0))!=0;
   if ($2439) { label = 244; break; } else { label = 245; break; }
  case 244: 
   $7=$2425;
   var $2441=$7;
   var $2442=(($2441)|0);
   $6=$2442;
   var $2443=$6;
   var $2444=$2443;
   $5=$2444;
   var $2445=$5;
   var $2446=(($2445)|0);
   var $2447=(($2446)|0);
   var $2448=$2447;
   var $2449=(($2448+8)|0);
   var $2450=HEAP32[(($2449)>>2)];
   var $2462 = $2450;label = 246; break;
  case 245: 
   $10=$2425;
   var $2452=$10;
   var $2453=(($2452)|0);
   $9=$2453;
   var $2454=$9;
   var $2455=$2454;
   $8=$2455;
   var $2456=$8;
   var $2457=(($2456)|0);
   var $2458=(($2457)|0);
   var $2459=$2458;
   var $2460=(($2459+1)|0);
   var $2461=(($2460)|0);
   var $2462 = $2461;label = 246; break;
  case 246: 
   var $2462;
   $3=$795;
   $4=$2462;
   var $2463=$3;
   var $2464=$4;
   $1=$2463;
   $2=$2464;
   var $2465=$1;
   var $2466=(($2465)|0);
   var $2467=$2;
   HEAP32[(($2466)>>2)]=$2467;
   $18=$__sym_space_end;
   $19=$795;
   var $2468=$18;
   $17=$2468;
   var $2469=$17;
   var $2470=(($2469)|0);
   var $2471=HEAP32[(($2470)>>2)];
   var $2472=$19;
   $16=$2472;
   var $2473=$16;
   var $2474=(($2473)|0);
   var $2475=HEAP32[(($2474)>>2)];
   var $2476=$2471;
   var $2477=$2475;
   var $2478=((($2476)-($2477))|0);
   $__num_spaces=$2478;
   var $2479=$__num_spaces;
   $29=$__spaces;
   var $2480=$29;
   $28=$2480;
   var $2481=$28;
   var $2482=(($2481)|0);
   $27=$2482;
   var $2483=$27;
   var $2484=$2483;
   $26=$2484;
   var $2485=$26;
   var $2486=(($2485)|0);
   var $2487=(($2486)|0);
   var $2488=$2487;
   var $2489=(($2488)|0);
   var $2490=$2489;
   var $2491=HEAP8[($2490)];
   var $2492=(($2491)&(255));
   var $2493=$2492 & 1;
   var $2494=(($2493)|(0))!=0;
   if ($2494) { label = 247; break; } else { label = 248; break; }
  case 247: 
   $22=$2480;
   var $2496=$22;
   var $2497=(($2496)|0);
   $21=$2497;
   var $2498=$21;
   var $2499=$2498;
   $20=$2499;
   var $2500=$20;
   var $2501=(($2500)|0);
   var $2502=(($2501)|0);
   var $2503=$2502;
   var $2504=(($2503+4)|0);
   var $2505=HEAP32[(($2504)>>2)];
   var $2520 = $2505;label = 249; break;
  case 248: 
   $25=$2480;
   var $2507=$25;
   var $2508=(($2507)|0);
   $24=$2508;
   var $2509=$24;
   var $2510=$2509;
   $23=$2510;
   var $2511=$23;
   var $2512=(($2511)|0);
   var $2513=(($2512)|0);
   var $2514=$2513;
   var $2515=(($2514)|0);
   var $2516=$2515;
   var $2517=HEAP8[($2516)];
   var $2518=(($2517)&(255));
   var $2519=$2518 >> 1;
   var $2520 = $2519;label = 249; break;
  case 249: 
   var $2520;
   var $2521=(($2479)>>>(0)) > (($2520)>>>(0));
   if ($2521) { label = 273; break; } else { label = 250; break; }
  case 250: 
   $54=$__spaces;
   var $2523=$54;
   $53=$2523;
   var $2524=$53;
   $52=$2524;
   var $2525=$52;
   var $2526=(($2525)|0);
   $51=$2526;
   var $2527=$51;
   var $2528=$2527;
   $50=$2528;
   var $2529=$50;
   var $2530=(($2529)|0);
   var $2531=(($2530)|0);
   var $2532=$2531;
   var $2533=(($2532)|0);
   var $2534=$2533;
   var $2535=HEAP8[($2534)];
   var $2536=(($2535)&(255));
   var $2537=$2536 & 1;
   var $2538=(($2537)|(0))!=0;
   if ($2538) { label = 251; break; } else { label = 252; break; }
  case 251: 
   $46=$2524;
   var $2540=$46;
   var $2541=(($2540)|0);
   $45=$2541;
   var $2542=$45;
   var $2543=$2542;
   $44=$2543;
   var $2544=$44;
   var $2545=(($2544)|0);
   var $2546=(($2545)|0);
   var $2547=$2546;
   var $2548=(($2547+8)|0);
   var $2549=HEAP32[(($2548)>>2)];
   var $2561 = $2549;label = 253; break;
  case 252: 
   $49=$2524;
   var $2551=$49;
   var $2552=(($2551)|0);
   $48=$2552;
   var $2553=$48;
   var $2554=$2553;
   $47=$2554;
   var $2555=$47;
   var $2556=(($2555)|0);
   var $2557=(($2556)|0);
   var $2558=$2557;
   var $2559=(($2558+1)|0);
   var $2560=(($2559)|0);
   var $2561 = $2560;label = 253; break;
  case 253: 
   var $2561;
   $39=$2523;
   var $2562=$39;
   $38=$2562;
   var $2563=$38;
   var $2564=(($2563)|0);
   $37=$2564;
   var $2565=$37;
   var $2566=$2565;
   $36=$2566;
   var $2567=$36;
   var $2568=(($2567)|0);
   var $2569=(($2568)|0);
   var $2570=$2569;
   var $2571=(($2570)|0);
   var $2572=$2571;
   var $2573=HEAP8[($2572)];
   var $2574=(($2573)&(255));
   var $2575=$2574 & 1;
   var $2576=(($2575)|(0))!=0;
   if ($2576) { label = 254; break; } else { label = 255; break; }
  case 254: 
   $32=$2562;
   var $2578=$32;
   var $2579=(($2578)|0);
   $31=$2579;
   var $2580=$31;
   var $2581=$2580;
   $30=$2581;
   var $2582=$30;
   var $2583=(($2582)|0);
   var $2584=(($2583)|0);
   var $2585=$2584;
   var $2586=(($2585+4)|0);
   var $2587=HEAP32[(($2586)>>2)];
   var $2602 = $2587;label = 256; break;
  case 255: 
   $35=$2562;
   var $2589=$35;
   var $2590=(($2589)|0);
   $34=$2590;
   var $2591=$34;
   var $2592=$2591;
   $33=$2592;
   var $2593=$33;
   var $2594=(($2593)|0);
   var $2595=(($2594)|0);
   var $2596=$2595;
   var $2597=(($2596)|0);
   var $2598=$2597;
   var $2599=HEAP8[($2598)];
   var $2600=(($2599)&(255));
   var $2601=$2600 >> 1;
   var $2602 = $2601;label = 256; break;
  case 256: 
   var $2602;
   var $2603=(($2561+$2602)|0);
   $42=$797;
   $43=$2603;
   var $2604=$42;
   var $2605=$43;
   $40=$2604;
   $41=$2605;
   var $2606=$40;
   var $2607=(($2606)|0);
   var $2608=$41;
   HEAP32[(($2607)>>2)]=$2608;
   var $2609=$__num_spaces;
   $59=$797;
   $60=$2609;
   var $2610=$59;
   var $2611=$60;
   var $2612=(((-$2611))|0);
   $57=$2610;
   $58=$2612;
   var $2613=$57;
   var $2614=$796;
   var $2615=$2613;
   assert(4 % 1 === 0);HEAP32[(($2614)>>2)]=HEAP32[(($2615)>>2)];
   var $2616=$58;
   $55=$796;
   $56=$2616;
   var $2617=$55;
   var $2618=$56;
   var $2619=(($2617)|0);
   var $2620=HEAP32[(($2619)>>2)];
   var $2621=(($2620+$2618)|0);
   HEAP32[(($2619)>>2)]=$2621;
   $85=$__spaces;
   var $2622=$85;
   $84=$2622;
   var $2623=$84;
   $83=$2623;
   var $2624=$83;
   var $2625=(($2624)|0);
   $82=$2625;
   var $2626=$82;
   var $2627=$2626;
   $81=$2627;
   var $2628=$81;
   var $2629=(($2628)|0);
   var $2630=(($2629)|0);
   var $2631=$2630;
   var $2632=(($2631)|0);
   var $2633=$2632;
   var $2634=HEAP8[($2633)];
   var $2635=(($2634)&(255));
   var $2636=$2635 & 1;
   var $2637=(($2636)|(0))!=0;
   if ($2637) { label = 257; break; } else { label = 258; break; }
  case 257: 
   $77=$2623;
   var $2639=$77;
   var $2640=(($2639)|0);
   $76=$2640;
   var $2641=$76;
   var $2642=$2641;
   $75=$2642;
   var $2643=$75;
   var $2644=(($2643)|0);
   var $2645=(($2644)|0);
   var $2646=$2645;
   var $2647=(($2646+8)|0);
   var $2648=HEAP32[(($2647)>>2)];
   var $2660 = $2648;label = 259; break;
  case 258: 
   $80=$2623;
   var $2650=$80;
   var $2651=(($2650)|0);
   $79=$2651;
   var $2652=$79;
   var $2653=$2652;
   $78=$2653;
   var $2654=$78;
   var $2655=(($2654)|0);
   var $2656=(($2655)|0);
   var $2657=$2656;
   var $2658=(($2657+1)|0);
   var $2659=(($2658)|0);
   var $2660 = $2659;label = 259; break;
  case 259: 
   var $2660;
   $70=$2622;
   var $2661=$70;
   $69=$2661;
   var $2662=$69;
   var $2663=(($2662)|0);
   $68=$2663;
   var $2664=$68;
   var $2665=$2664;
   $67=$2665;
   var $2666=$67;
   var $2667=(($2666)|0);
   var $2668=(($2667)|0);
   var $2669=$2668;
   var $2670=(($2669)|0);
   var $2671=$2670;
   var $2672=HEAP8[($2671)];
   var $2673=(($2672)&(255));
   var $2674=$2673 & 1;
   var $2675=(($2674)|(0))!=0;
   if ($2675) { label = 260; break; } else { label = 261; break; }
  case 260: 
   $63=$2661;
   var $2677=$63;
   var $2678=(($2677)|0);
   $62=$2678;
   var $2679=$62;
   var $2680=$2679;
   $61=$2680;
   var $2681=$61;
   var $2682=(($2681)|0);
   var $2683=(($2682)|0);
   var $2684=$2683;
   var $2685=(($2684+4)|0);
   var $2686=HEAP32[(($2685)>>2)];
   var $2701 = $2686;label = 262; break;
  case 261: 
   $66=$2661;
   var $2688=$66;
   var $2689=(($2688)|0);
   $65=$2689;
   var $2690=$65;
   var $2691=$2690;
   $64=$2691;
   var $2692=$64;
   var $2693=(($2692)|0);
   var $2694=(($2693)|0);
   var $2695=$2694;
   var $2696=(($2695)|0);
   var $2697=$2696;
   var $2698=HEAP8[($2697)];
   var $2699=(($2698)&(255));
   var $2700=$2699 >> 1;
   var $2701 = $2700;label = 262; break;
  case 262: 
   var $2701;
   var $2702=(($2660+$2701)|0);
   $73=$798;
   $74=$2702;
   var $2703=$73;
   var $2704=$74;
   $71=$2703;
   $72=$2704;
   var $2705=$71;
   var $2706=(($2705)|0);
   var $2707=$72;
   HEAP32[(($2706)>>2)]=$2707;
   $100=$__sym;
   var $2708=$100;
   $99=$2708;
   var $2709=$99;
   $98=$2709;
   var $2710=$98;
   var $2711=(($2710)|0);
   $97=$2711;
   var $2712=$97;
   var $2713=$2712;
   $96=$2713;
   var $2714=$96;
   var $2715=(($2714)|0);
   var $2716=(($2715)|0);
   var $2717=$2716;
   var $2718=(($2717)|0);
   var $2719=$2718;
   var $2720=HEAP8[($2719)];
   var $2721=(($2720)&(255));
   var $2722=$2721 & 1;
   var $2723=(($2722)|(0))!=0;
   if ($2723) { label = 263; break; } else { label = 264; break; }
  case 263: 
   $92=$2709;
   var $2725=$92;
   var $2726=(($2725)|0);
   $91=$2726;
   var $2727=$91;
   var $2728=$2727;
   $90=$2728;
   var $2729=$90;
   var $2730=(($2729)|0);
   var $2731=(($2730)|0);
   var $2732=$2731;
   var $2733=(($2732+8)|0);
   var $2734=HEAP32[(($2733)>>2)];
   var $2746 = $2734;label = 265; break;
  case 264: 
   $95=$2709;
   var $2736=$95;
   var $2737=(($2736)|0);
   $94=$2737;
   var $2738=$94;
   var $2739=$2738;
   $93=$2739;
   var $2740=$93;
   var $2741=(($2740)|0);
   var $2742=(($2741)|0);
   var $2743=$2742;
   var $2744=(($2743+1)|0);
   var $2745=(($2744)|0);
   var $2746 = $2745;label = 265; break;
  case 265: 
   var $2746;
   $88=$799;
   $89=$2746;
   var $2747=$88;
   var $2748=$89;
   $86=$2747;
   $87=$2748;
   var $2749=$86;
   var $2750=(($2749)|0);
   var $2751=$87;
   HEAP32[(($2750)>>2)]=$2751;
   var $tmp=$125;
   var $tmp117=$796;
   assert(4 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp117)];HEAP8[((($tmp)+(1))|0)]=HEAP8[((($tmp117)+(1))|0)];HEAP8[((($tmp)+(2))|0)]=HEAP8[((($tmp117)+(2))|0)];HEAP8[((($tmp)+(3))|0)]=HEAP8[((($tmp117)+(3))|0)];
   var $tmp118=$124;
   var $tmp119=$798;
   assert(4 % 1 === 0);HEAP8[($tmp118)]=HEAP8[($tmp119)];HEAP8[((($tmp118)+(1))|0)]=HEAP8[((($tmp119)+(1))|0)];HEAP8[((($tmp118)+(2))|0)]=HEAP8[((($tmp119)+(2))|0)];HEAP8[((($tmp118)+(3))|0)]=HEAP8[((($tmp119)+(3))|0)];
   var $tmp120=$123;
   var $tmp121=$799;
   assert(4 % 1 === 0);HEAP8[($tmp120)]=HEAP8[($tmp121)];HEAP8[((($tmp120)+(1))|0)]=HEAP8[((($tmp121)+(1))|0)];HEAP8[((($tmp120)+(2))|0)]=HEAP8[((($tmp121)+(2))|0)];HEAP8[((($tmp120)+(3))|0)]=HEAP8[((($tmp121)+(3))|0)];
   var $2752=$119;
   var $2753=$125;
   assert(4 % 1 === 0);HEAP32[(($2752)>>2)]=HEAP32[(($2753)>>2)];
   var $2754=$120;
   var $2755=$124;
   assert(4 % 1 === 0);HEAP32[(($2754)>>2)]=HEAP32[(($2755)>>2)];
   var $2756=$121;
   var $2757=$123;
   assert(4 % 1 === 0);HEAP32[(($2756)>>2)]=HEAP32[(($2757)>>2)];
   var $tmp_i=$118;
   var $tmp1_i=$119;
   assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
   var $tmp2_i=$117;
   var $tmp3_i=$120;
   assert(4 % 1 === 0);HEAP8[($tmp2_i)]=HEAP8[($tmp3_i)];HEAP8[((($tmp2_i)+(1))|0)]=HEAP8[((($tmp3_i)+(1))|0)];HEAP8[((($tmp2_i)+(2))|0)]=HEAP8[((($tmp3_i)+(2))|0)];HEAP8[((($tmp2_i)+(3))|0)]=HEAP8[((($tmp3_i)+(3))|0)];
   var $tmp4_i=$116;
   var $tmp5_i=$121;
   assert(4 % 1 === 0);HEAP8[($tmp4_i)]=HEAP8[($tmp5_i)];HEAP8[((($tmp4_i)+(1))|0)]=HEAP8[((($tmp5_i)+(1))|0)];HEAP8[((($tmp4_i)+(2))|0)]=HEAP8[((($tmp5_i)+(2))|0)];HEAP8[((($tmp4_i)+(3))|0)]=HEAP8[((($tmp5_i)+(3))|0)];
   var $tmp6_i=$115;
   var $tmp7_i=$122;
   assert(1 % 1 === 0);HEAP8[($tmp6_i)]=HEAP8[($tmp7_i)];
   label = 266; break;
  case 266: 
   $112=$118;
   $113=$117;
   var $2759=$112;
   var $2760=$113;
   $110=$2759;
   $111=$2760;
   var $2761=$110;
   $109=$2761;
   var $2762=$109;
   var $2763=(($2762)|0);
   var $2764=HEAP32[(($2763)>>2)];
   var $2765=$111;
   $108=$2765;
   var $2766=$108;
   var $2767=(($2766)|0);
   var $2768=HEAP32[(($2767)>>2)];
   var $2769=(($2764)|(0))==(($2768)|(0));
   var $2770=$2769 ^ 1;
   if ($2770) { label = 267; break; } else { label = 270; break; }
  case 267: 
   $101=$118;
   var $2772=$101;
   var $2773=(($2772)|0);
   var $2774=HEAP32[(($2773)>>2)];
   $102=$116;
   var $2775=$102;
   var $2776=(($2775)|0);
   var $2777=HEAP32[(($2776)>>2)];
   $103=$115;
   $104=$2774;
   $105=$2777;
   var $2778=$103;
   var $2779=$104;
   var $2780=HEAP8[($2779)];
   var $2781=(($2780 << 24) >> 24);
   var $2782=$105;
   var $2783=HEAP8[($2782)];
   var $2784=(($2783 << 24) >> 24);
   var $2785=(($2781)|(0))==(($2784)|(0));
   if ($2785) { label = 269; break; } else { label = 268; break; }
  case 268: 
   $114=0;
   label = 271; break;
  case 269: 
   $106=$118;
   var $2788=$106;
   var $2789=(($2788)|0);
   var $2790=HEAP32[(($2789)>>2)];
   var $2791=(($2790+1)|0);
   HEAP32[(($2789)>>2)]=$2791;
   $107=$116;
   var $2792=$107;
   var $2793=(($2792)|0);
   var $2794=HEAP32[(($2793)>>2)];
   var $2795=(($2794+1)|0);
   HEAP32[(($2793)>>2)]=$2795;
   label = 266; break;
  case 270: 
   $114=1;
   label = 271; break;
  case 271: 
   var $2797=$114;
   label = 272; break;
  case 272: 
   if ($2797) { label = 277; break; } else { label = 273; break; }
  case 273: 
   $140=$__sym;
   var $2800=$140;
   $139=$2800;
   var $2801=$139;
   $138=$2801;
   var $2802=$138;
   var $2803=(($2802)|0);
   $137=$2803;
   var $2804=$137;
   var $2805=$2804;
   $136=$2805;
   var $2806=$136;
   var $2807=(($2806)|0);
   var $2808=(($2807)|0);
   var $2809=$2808;
   var $2810=(($2809)|0);
   var $2811=$2810;
   var $2812=HEAP8[($2811)];
   var $2813=(($2812)&(255));
   var $2814=$2813 & 1;
   var $2815=(($2814)|(0))!=0;
   if ($2815) { label = 274; break; } else { label = 275; break; }
  case 274: 
   $132=$2801;
   var $2817=$132;
   var $2818=(($2817)|0);
   $131=$2818;
   var $2819=$131;
   var $2820=$2819;
   $130=$2820;
   var $2821=$130;
   var $2822=(($2821)|0);
   var $2823=(($2822)|0);
   var $2824=$2823;
   var $2825=(($2824+8)|0);
   var $2826=HEAP32[(($2825)>>2)];
   var $2838 = $2826;label = 276; break;
  case 275: 
   $135=$2801;
   var $2828=$135;
   var $2829=(($2828)|0);
   $134=$2829;
   var $2830=$134;
   var $2831=$2830;
   $133=$2831;
   var $2832=$133;
   var $2833=(($2832)|0);
   var $2834=(($2833)|0);
   var $2835=$2834;
   var $2836=(($2835+1)|0);
   var $2837=(($2836)|0);
   var $2838 = $2837;label = 276; break;
  case 276: 
   var $2838;
   $128=$801;
   $129=$2838;
   var $2839=$128;
   var $2840=$129;
   $126=$2839;
   $127=$2840;
   var $2841=$126;
   var $2842=(($2841)|0);
   var $2843=$127;
   HEAP32[(($2842)>>2)]=$2843;
   $145=$800;
   $146=$801;
   $147=0;
   var $2844=$145;
   var $2845=$147;
   var $2846=$146;
   $142=$2844;
   $143=$2846;
   $144=$2845;
   var $2847=$142;
   var $2848=(($2847)|0);
   var $2849=$143;
   $141=$2849;
   var $2850=$141;
   var $2851=(($2850)|0);
   var $2852=HEAP32[(($2851)>>2)];
   HEAP32[(($2848)>>2)]=$2852;
   var $2853=$__sym_space_end;
   var $2854=$800;
   assert(4 % 1 === 0);HEAP32[(($2853)>>2)]=HEAP32[(($2854)>>2)];
   label = 277; break;
  case 277: 
   label = 278; break;
  case 278: 
   var $2857=$__sym_curr_char;
   var $2858=$__sym_space_end;
   assert(4 % 1 === 0);HEAP32[(($2857)>>2)]=HEAP32[(($2858)>>2)];
   label = 279; break;
  case 279: 
   $172=$__sym;
   var $2860=$172;
   $171=$2860;
   var $2861=$171;
   $170=$2861;
   var $2862=$170;
   var $2863=(($2862)|0);
   $169=$2863;
   var $2864=$169;
   var $2865=$2864;
   $168=$2865;
   var $2866=$168;
   var $2867=(($2866)|0);
   var $2868=(($2867)|0);
   var $2869=$2868;
   var $2870=(($2869)|0);
   var $2871=$2870;
   var $2872=HEAP8[($2871)];
   var $2873=(($2872)&(255));
   var $2874=$2873 & 1;
   var $2875=(($2874)|(0))!=0;
   if ($2875) { label = 280; break; } else { label = 281; break; }
  case 280: 
   $164=$2861;
   var $2877=$164;
   var $2878=(($2877)|0);
   $163=$2878;
   var $2879=$163;
   var $2880=$2879;
   $162=$2880;
   var $2881=$162;
   var $2882=(($2881)|0);
   var $2883=(($2882)|0);
   var $2884=$2883;
   var $2885=(($2884+8)|0);
   var $2886=HEAP32[(($2885)>>2)];
   var $2898 = $2886;label = 282; break;
  case 281: 
   $167=$2861;
   var $2888=$167;
   var $2889=(($2888)|0);
   $166=$2889;
   var $2890=$166;
   var $2891=$2890;
   $165=$2891;
   var $2892=$165;
   var $2893=(($2892)|0);
   var $2894=(($2893)|0);
   var $2895=$2894;
   var $2896=(($2895+1)|0);
   var $2897=(($2896)|0);
   var $2898 = $2897;label = 282; break;
  case 282: 
   var $2898;
   $157=$2860;
   var $2899=$157;
   $156=$2899;
   var $2900=$156;
   var $2901=(($2900)|0);
   $155=$2901;
   var $2902=$155;
   var $2903=$2902;
   $154=$2903;
   var $2904=$154;
   var $2905=(($2904)|0);
   var $2906=(($2905)|0);
   var $2907=$2906;
   var $2908=(($2907)|0);
   var $2909=$2908;
   var $2910=HEAP8[($2909)];
   var $2911=(($2910)&(255));
   var $2912=$2911 & 1;
   var $2913=(($2912)|(0))!=0;
   if ($2913) { label = 283; break; } else { label = 284; break; }
  case 283: 
   $150=$2899;
   var $2915=$150;
   var $2916=(($2915)|0);
   $149=$2916;
   var $2917=$149;
   var $2918=$2917;
   $148=$2918;
   var $2919=$148;
   var $2920=(($2919)|0);
   var $2921=(($2920)|0);
   var $2922=$2921;
   var $2923=(($2922+4)|0);
   var $2924=HEAP32[(($2923)>>2)];
   var $2939 = $2924;label = 285; break;
  case 284: 
   $153=$2899;
   var $2926=$153;
   var $2927=(($2926)|0);
   $152=$2927;
   var $2928=$152;
   var $2929=$2928;
   $151=$2929;
   var $2930=$151;
   var $2931=(($2930)|0);
   var $2932=(($2931)|0);
   var $2933=$2932;
   var $2934=(($2933)|0);
   var $2935=$2934;
   var $2936=HEAP8[($2935)];
   var $2937=(($2936)&(255));
   var $2938=$2937 >> 1;
   var $2939 = $2938;label = 285; break;
  case 285: 
   var $2939;
   var $2940=(($2898+$2939)|0);
   $160=$802;
   $161=$2940;
   var $2941=$160;
   var $2942=$161;
   $158=$2941;
   $159=$2942;
   var $2943=$158;
   var $2944=(($2943)|0);
   var $2945=$159;
   HEAP32[(($2944)>>2)]=$2945;
   $177=$__sym_curr_char;
   $178=$802;
   var $2946=$177;
   var $2947=$178;
   $175=$2946;
   $176=$2947;
   var $2948=$175;
   $174=$2948;
   var $2949=$174;
   var $2950=(($2949)|0);
   var $2951=HEAP32[(($2950)>>2)];
   var $2952=$176;
   $173=$2952;
   var $2953=$173;
   var $2954=(($2953)|0);
   var $2955=HEAP32[(($2954)>>2)];
   var $2956=(($2951)|(0))==(($2955)|(0));
   var $2957=$2956 ^ 1;
   if ($2957) { label = 286; break; } else { var $3071 = 0;label = 308; break; }
  case 286: 
   var $2959=$777;
   $197=$2959;
   $198=$__e;
   var $2960=$197;
   var $2961=$198;
   $195=$2960;
   $196=$2961;
   var $2962=$195;
   $194=$2962;
   var $2963=$194;
   var $2964=(($2963)|0);
   var $2965=HEAP32[(($2964)>>2)];
   var $2966=(($2965)|(0))!=0;
   if ($2966) { label = 287; break; } else { label = 293; break; }
  case 287: 
   var $2968=(($2963)|0);
   var $2969=HEAP32[(($2968)>>2)];
   $193=$2969;
   var $2970=$193;
   var $2971=(($2970+12)|0);
   var $2972=HEAP32[(($2971)>>2)];
   var $2973=(($2970+16)|0);
   var $2974=HEAP32[(($2973)>>2)];
   var $2975=(($2972)|(0))==(($2974)|(0));
   if ($2975) { label = 288; break; } else { label = 290; break; }
  case 288: 
   var $2977=$2970;
   var $2978=HEAP32[(($2977)>>2)];
   var $2979=(($2978+36)|0);
   var $2980=HEAP32[(($2979)>>2)];
   var $2981 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2980]($2970) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 289; break; } else { label = 37; break; }
  case 289: 
   $192=$2981;
   label = 291; break;
  case 290: 
   var $2983=(($2970+12)|0);
   var $2984=HEAP32[(($2983)>>2)];
   var $2985=HEAP8[($2984)];
   $191=$2985;
   var $2986=$191;
   var $2987=(($2986)&(255));
   $192=$2987;
   label = 291; break;
  case 291: 
   var $2988=$192;
   $189=$2988;
   $190=-1;
   var $2989=$189;
   var $2990=$190;
   var $2991=(($2989)|(0))==(($2990)|(0));
   if ($2991) { label = 292; break; } else { label = 293; break; }
  case 292: 
   var $2993=(($2963)|0);
   HEAP32[(($2993)>>2)]=0;
   label = 293; break;
  case 293: 
   var $2994=(($2963)|0);
   var $2995=HEAP32[(($2994)>>2)];
   var $2996=(($2995)|(0))==0;
   var $2997=(($2996)&(1));
   var $2998=$196;
   $188=$2998;
   var $2999=$188;
   var $3000=(($2999)|0);
   var $3001=HEAP32[(($3000)>>2)];
   var $3002=(($3001)|(0))!=0;
   if ($3002) { label = 294; break; } else { label = 300; break; }
  case 294: 
   var $3004=(($2999)|0);
   var $3005=HEAP32[(($3004)>>2)];
   $187=$3005;
   var $3006=$187;
   var $3007=(($3006+12)|0);
   var $3008=HEAP32[(($3007)>>2)];
   var $3009=(($3006+16)|0);
   var $3010=HEAP32[(($3009)>>2)];
   var $3011=(($3008)|(0))==(($3010)|(0));
   if ($3011) { label = 295; break; } else { label = 297; break; }
  case 295: 
   var $3013=$3006;
   var $3014=HEAP32[(($3013)>>2)];
   var $3015=(($3014+36)|0);
   var $3016=HEAP32[(($3015)>>2)];
   var $3017 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3016]($3006) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 296; break; } else { label = 37; break; }
  case 296: 
   $186=$3017;
   label = 298; break;
  case 297: 
   var $3019=(($3006+12)|0);
   var $3020=HEAP32[(($3019)>>2)];
   var $3021=HEAP8[($3020)];
   $185=$3021;
   var $3022=$185;
   var $3023=(($3022)&(255));
   $186=$3023;
   label = 298; break;
  case 298: 
   var $3024=$186;
   $183=$3024;
   $184=-1;
   var $3025=$183;
   var $3026=$184;
   var $3027=(($3025)|(0))==(($3026)|(0));
   if ($3027) { label = 299; break; } else { label = 300; break; }
  case 299: 
   var $3029=(($2999)|0);
   HEAP32[(($3029)>>2)]=0;
   label = 300; break;
  case 300: 
   var $3030=(($2999)|0);
   var $3031=HEAP32[(($3030)>>2)];
   var $3032=(($3031)|(0))==0;
   var $3033=(($3032)&(1));
   var $3034=(($2997)|(0))==(($3033)|(0));
   var $3035=$3034 ^ 1;
   label = 301; break;
  case 301: 
   if ($3035) { label = 302; break; } else { var $3071 = 0;label = 308; break; }
  case 302: 
   var $3038=$777;
   $203=$3038;
   var $3039=$203;
   var $3040=(($3039)|0);
   var $3041=HEAP32[(($3040)>>2)];
   $202=$3041;
   var $3042=$202;
   var $3043=(($3042+12)|0);
   var $3044=HEAP32[(($3043)>>2)];
   var $3045=(($3042+16)|0);
   var $3046=HEAP32[(($3045)>>2)];
   var $3047=(($3044)|(0))==(($3046)|(0));
   if ($3047) { label = 303; break; } else { label = 305; break; }
  case 303: 
   var $3049=$3042;
   var $3050=HEAP32[(($3049)>>2)];
   var $3051=(($3050+36)|0);
   var $3052=HEAP32[(($3051)>>2)];
   var $3053 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3052]($3042) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 304; break; } else { label = 37; break; }
  case 304: 
   $201=$3053;
   label = 306; break;
  case 305: 
   var $3055=(($3042+12)|0);
   var $3056=HEAP32[(($3055)>>2)];
   var $3057=HEAP8[($3056)];
   $200=$3057;
   var $3058=$200;
   var $3059=(($3058)&(255));
   $201=$3059;
   label = 306; break;
  case 306: 
   var $3060=$201;
   var $3061=(($3060) & 255);
   label = 307; break;
  case 307: 
   var $3063=(($3061 << 24) >> 24);
   $204=$__sym_curr_char;
   var $3064=$204;
   var $3065=(($3064)|0);
   var $3066=HEAP32[(($3065)>>2)];
   var $3067=HEAP8[($3066)];
   var $3068=(($3067 << 24) >> 24);
   var $3069=(($3063)|(0))==(($3068)|(0));
   var $3071 = $3069;label = 308; break;
  case 308: 
   var $3071;
   if ($3071) { label = 309; break; } else { label = 315; break; }
  case 309: 
   var $3073=$777;
   $214=$3073;
   var $3074=$214;
   var $3075=(($3074)|0);
   var $3076=HEAP32[(($3075)>>2)];
   $213=$3076;
   var $3077=$213;
   var $3078=(($3077+12)|0);
   var $3079=HEAP32[(($3078)>>2)];
   var $3080=(($3077+16)|0);
   var $3081=HEAP32[(($3080)>>2)];
   var $3082=(($3079)|(0))==(($3081)|(0));
   if ($3082) { label = 310; break; } else { label = 312; break; }
  case 310: 
   var $3084=$3077;
   var $3085=HEAP32[(($3084)>>2)];
   var $3086=(($3085+40)|0);
   var $3087=HEAP32[(($3086)>>2)];
   var $3088 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3087]($3077) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 311; break; } else { label = 37; break; }
  case 311: 
   $212=$3088;
   label = 313; break;
  case 312: 
   var $3090=(($3077+12)|0);
   var $3091=HEAP32[(($3090)>>2)];
   var $3092=(($3091+1)|0);
   HEAP32[(($3090)>>2)]=$3092;
   var $3093=HEAP8[($3091)];
   $211=$3093;
   var $3094=$211;
   var $3095=(($3094)&(255));
   $212=$3095;
   label = 313; break;
  case 313: 
   var $3096=$212;
   label = 314; break;
  case 314: 
   $215=$__sym_curr_char;
   var $3098=$215;
   var $3099=(($3098)|0);
   var $3100=HEAP32[(($3099)>>2)];
   var $3101=(($3100+1)|0);
   HEAP32[(($3099)>>2)]=$3101;
   label = 279; break;
  case 315: 
   var $3103=$__sb;
   var $3104=(($3103) & 1);
   if ($3104) { label = 316; break; } else { label = 324; break; }
  case 316: 
   $240=$__sym;
   var $3106=$240;
   $239=$3106;
   var $3107=$239;
   $238=$3107;
   var $3108=$238;
   var $3109=(($3108)|0);
   $237=$3109;
   var $3110=$237;
   var $3111=$3110;
   $236=$3111;
   var $3112=$236;
   var $3113=(($3112)|0);
   var $3114=(($3113)|0);
   var $3115=$3114;
   var $3116=(($3115)|0);
   var $3117=$3116;
   var $3118=HEAP8[($3117)];
   var $3119=(($3118)&(255));
   var $3120=$3119 & 1;
   var $3121=(($3120)|(0))!=0;
   if ($3121) { label = 317; break; } else { label = 318; break; }
  case 317: 
   $232=$3107;
   var $3123=$232;
   var $3124=(($3123)|0);
   $231=$3124;
   var $3125=$231;
   var $3126=$3125;
   $230=$3126;
   var $3127=$230;
   var $3128=(($3127)|0);
   var $3129=(($3128)|0);
   var $3130=$3129;
   var $3131=(($3130+8)|0);
   var $3132=HEAP32[(($3131)>>2)];
   var $3144 = $3132;label = 319; break;
  case 318: 
   $235=$3107;
   var $3134=$235;
   var $3135=(($3134)|0);
   $234=$3135;
   var $3136=$234;
   var $3137=$3136;
   $233=$3137;
   var $3138=$233;
   var $3139=(($3138)|0);
   var $3140=(($3139)|0);
   var $3141=$3140;
   var $3142=(($3141+1)|0);
   var $3143=(($3142)|0);
   var $3144 = $3143;label = 319; break;
  case 319: 
   var $3144;
   $225=$3106;
   var $3145=$225;
   $224=$3145;
   var $3146=$224;
   var $3147=(($3146)|0);
   $223=$3147;
   var $3148=$223;
   var $3149=$3148;
   $222=$3149;
   var $3150=$222;
   var $3151=(($3150)|0);
   var $3152=(($3151)|0);
   var $3153=$3152;
   var $3154=(($3153)|0);
   var $3155=$3154;
   var $3156=HEAP8[($3155)];
   var $3157=(($3156)&(255));
   var $3158=$3157 & 1;
   var $3159=(($3158)|(0))!=0;
   if ($3159) { label = 320; break; } else { label = 321; break; }
  case 320: 
   $218=$3145;
   var $3161=$218;
   var $3162=(($3161)|0);
   $217=$3162;
   var $3163=$217;
   var $3164=$3163;
   $216=$3164;
   var $3165=$216;
   var $3166=(($3165)|0);
   var $3167=(($3166)|0);
   var $3168=$3167;
   var $3169=(($3168+4)|0);
   var $3170=HEAP32[(($3169)>>2)];
   var $3185 = $3170;label = 322; break;
  case 321: 
   $221=$3145;
   var $3172=$221;
   var $3173=(($3172)|0);
   $220=$3173;
   var $3174=$220;
   var $3175=$3174;
   $219=$3175;
   var $3176=$219;
   var $3177=(($3176)|0);
   var $3178=(($3177)|0);
   var $3179=$3178;
   var $3180=(($3179)|0);
   var $3181=$3180;
   var $3182=HEAP8[($3181)];
   var $3183=(($3182)&(255));
   var $3184=$3183 >> 1;
   var $3185 = $3184;label = 322; break;
  case 322: 
   var $3185;
   var $3186=(($3144+$3185)|0);
   $228=$803;
   $229=$3186;
   var $3187=$228;
   var $3188=$229;
   $226=$3187;
   $227=$3188;
   var $3189=$226;
   var $3190=(($3189)|0);
   var $3191=$227;
   HEAP32[(($3190)>>2)]=$3191;
   $245=$__sym_curr_char;
   $246=$803;
   var $3192=$245;
   var $3193=$246;
   $243=$3192;
   $244=$3193;
   var $3194=$243;
   $242=$3194;
   var $3195=$242;
   var $3196=(($3195)|0);
   var $3197=HEAP32[(($3196)>>2)];
   var $3198=$244;
   $241=$3198;
   var $3199=$241;
   var $3200=(($3199)|0);
   var $3201=HEAP32[(($3200)>>2)];
   var $3202=(($3197)|(0))==(($3201)|(0));
   var $3203=$3202 ^ 1;
   if ($3203) { label = 323; break; } else { label = 324; break; }
  case 323: 
   var $3205=$781;
   var $3206=HEAP32[(($3205)>>2)];
   var $3207=$3206 | 4;
   HEAP32[(($3205)>>2)]=$3207;
   $776=0;
   $791=1;
   label = 508; break;
  case 324: 
   label = 325; break;
  case 325: 
   label = 459; break;
  case 326: 
   $__ng=0;
   label = 327; break;
  case 327: 
   var $3212=$777;
   $293=$3212;
   $294=$__e;
   var $3213=$293;
   var $3214=$294;
   $291=$3213;
   $292=$3214;
   var $3215=$291;
   $290=$3215;
   var $3216=$290;
   var $3217=(($3216)|0);
   var $3218=HEAP32[(($3217)>>2)];
   var $3219=(($3218)|(0))!=0;
   if ($3219) { label = 328; break; } else { label = 334; break; }
  case 328: 
   var $3221=(($3216)|0);
   var $3222=HEAP32[(($3221)>>2)];
   $289=$3222;
   var $3223=$289;
   var $3224=(($3223+12)|0);
   var $3225=HEAP32[(($3224)>>2)];
   var $3226=(($3223+16)|0);
   var $3227=HEAP32[(($3226)>>2)];
   var $3228=(($3225)|(0))==(($3227)|(0));
   if ($3228) { label = 329; break; } else { label = 331; break; }
  case 329: 
   var $3230=$3223;
   var $3231=HEAP32[(($3230)>>2)];
   var $3232=(($3231+36)|0);
   var $3233=HEAP32[(($3232)>>2)];
   var $3234 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3233]($3223) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 330; break; } else { label = 37; break; }
  case 330: 
   $288=$3234;
   label = 332; break;
  case 331: 
   var $3236=(($3223+12)|0);
   var $3237=HEAP32[(($3236)>>2)];
   var $3238=HEAP8[($3237)];
   $287=$3238;
   var $3239=$287;
   var $3240=(($3239)&(255));
   $288=$3240;
   label = 332; break;
  case 332: 
   var $3241=$288;
   $285=$3241;
   $286=-1;
   var $3242=$285;
   var $3243=$286;
   var $3244=(($3242)|(0))==(($3243)|(0));
   if ($3244) { label = 333; break; } else { label = 334; break; }
  case 333: 
   var $3246=(($3216)|0);
   HEAP32[(($3246)>>2)]=0;
   label = 334; break;
  case 334: 
   var $3247=(($3216)|0);
   var $3248=HEAP32[(($3247)>>2)];
   var $3249=(($3248)|(0))==0;
   var $3250=(($3249)&(1));
   var $3251=$292;
   $284=$3251;
   var $3252=$284;
   var $3253=(($3252)|0);
   var $3254=HEAP32[(($3253)>>2)];
   var $3255=(($3254)|(0))!=0;
   if ($3255) { label = 335; break; } else { label = 341; break; }
  case 335: 
   var $3257=(($3252)|0);
   var $3258=HEAP32[(($3257)>>2)];
   $283=$3258;
   var $3259=$283;
   var $3260=(($3259+12)|0);
   var $3261=HEAP32[(($3260)>>2)];
   var $3262=(($3259+16)|0);
   var $3263=HEAP32[(($3262)>>2)];
   var $3264=(($3261)|(0))==(($3263)|(0));
   if ($3264) { label = 336; break; } else { label = 338; break; }
  case 336: 
   var $3266=$3259;
   var $3267=HEAP32[(($3266)>>2)];
   var $3268=(($3267+36)|0);
   var $3269=HEAP32[(($3268)>>2)];
   var $3270 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3269]($3259) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 337; break; } else { label = 37; break; }
  case 337: 
   $282=$3270;
   label = 339; break;
  case 338: 
   var $3272=(($3259+12)|0);
   var $3273=HEAP32[(($3272)>>2)];
   var $3274=HEAP8[($3273)];
   $281=$3274;
   var $3275=$281;
   var $3276=(($3275)&(255));
   $282=$3276;
   label = 339; break;
  case 339: 
   var $3277=$282;
   $279=$3277;
   $280=-1;
   var $3278=$279;
   var $3279=$280;
   var $3280=(($3278)|(0))==(($3279)|(0));
   if ($3280) { label = 340; break; } else { label = 341; break; }
  case 340: 
   var $3282=(($3252)|0);
   HEAP32[(($3282)>>2)]=0;
   label = 341; break;
  case 341: 
   var $3283=(($3252)|0);
   var $3284=HEAP32[(($3283)>>2)];
   var $3285=(($3284)|(0))==0;
   var $3286=(($3285)&(1));
   var $3287=(($3250)|(0))==(($3286)|(0));
   var $3288=$3287 ^ 1;
   label = 342; break;
  case 342: 
   if ($3288) { label = 343; break; } else { label = 376; break; }
  case 343: 
   var $3291=$777;
   $313=$3291;
   var $3292=$313;
   var $3293=(($3292)|0);
   var $3294=HEAP32[(($3293)>>2)];
   $312=$3294;
   var $3295=$312;
   var $3296=(($3295+12)|0);
   var $3297=HEAP32[(($3296)>>2)];
   var $3298=(($3295+16)|0);
   var $3299=HEAP32[(($3298)>>2)];
   var $3300=(($3297)|(0))==(($3299)|(0));
   if ($3300) { label = 344; break; } else { label = 346; break; }
  case 344: 
   var $3302=$3295;
   var $3303=HEAP32[(($3302)>>2)];
   var $3304=(($3303+36)|0);
   var $3305=HEAP32[(($3304)>>2)];
   var $3306 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3305]($3295) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 345; break; } else { label = 37; break; }
  case 345: 
   $311=$3306;
   label = 347; break;
  case 346: 
   var $3308=(($3295+12)|0);
   var $3309=HEAP32[(($3308)>>2)];
   var $3310=HEAP8[($3309)];
   $310=$3310;
   var $3311=$310;
   var $3312=(($3311)&(255));
   $311=$3312;
   label = 347; break;
  case 347: 
   var $3313=$311;
   var $3314=(($3313) & 255);
   label = 348; break;
  case 348: 
   $__c=$3314;
   var $3316=$783;
   var $3317=$__c;
   $314=$3316;
   $315=2048;
   $316=$3317;
   var $3318=$314;
   var $3319=$316;
   var $3320=(($3319 << 24) >> 24);
   var $3321=(($3320)>>>(0)) <= 127;
   if ($3321) { label = 349; break; } else { label = 350; break; }
  case 349: 
   var $3323=$316;
   var $3324=(($3323 << 24) >> 24);
   var $3325=(($3318+8)|0);
   var $3326=HEAP32[(($3325)>>2)];
   var $3327=(($3326+($3324<<1))|0);
   var $3328=HEAP16[(($3327)>>1)];
   var $3329=(($3328)&(65535));
   var $3330=$315;
   var $3331=(($3330)&(65535));
   var $3332=$3329 & $3331;
   var $3334 = $3332;label = 351; break;
  case 350: 
   var $3334 = 0;label = 351; break;
  case 351: 
   var $3334;
   var $3335=(($3334)|(0))!=0;
   label = 352; break;
  case 352: 
   if ($3335) { label = 353; break; } else { label = 357; break; }
  case 353: 
   var $3338=$785;
   var $3339=HEAP32[(($3338)>>2)];
   var $3340=HEAP32[(($786)>>2)];
   var $3341=(($3339)|(0))==(($3340)|(0));
   if ($3341) { label = 354; break; } else { label = 356; break; }
  case 354: 
   var $3343=$784;
   var $3344=$785;
   (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($3343, $3344, $786) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 355; break; } else { label = 37; break; }
  case 355: 
   label = 356; break;
  case 356: 
   var $3347=$__c;
   var $3348=$785;
   var $3349=HEAP32[(($3348)>>2)];
   var $3350=(($3349+1)|0);
   HEAP32[(($3348)>>2)]=$3350;
   HEAP8[($3349)]=$3347;
   var $3351=$__ng;
   var $3352=((($3351)+(1))|0);
   $__ng=$3352;
   label = 369; break;
  case 357: 
   $340=$__grp;
   var $3354=$340;
   $339=$3354;
   var $3355=$339;
   var $3356=(($3355)|0);
   $338=$3356;
   var $3357=$338;
   var $3358=$3357;
   $337=$3358;
   var $3359=$337;
   var $3360=(($3359)|0);
   var $3361=(($3360)|0);
   var $3362=$3361;
   var $3363=(($3362)|0);
   var $3364=$3363;
   var $3365=HEAP8[($3364)];
   var $3366=(($3365)&(255));
   var $3367=$3366 & 1;
   var $3368=(($3367)|(0))!=0;
   if ($3368) { label = 358; break; } else { label = 359; break; }
  case 358: 
   $333=$3354;
   var $3370=$333;
   var $3371=(($3370)|0);
   $332=$3371;
   var $3372=$332;
   var $3373=$3372;
   $331=$3373;
   var $3374=$331;
   var $3375=(($3374)|0);
   var $3376=(($3375)|0);
   var $3377=$3376;
   var $3378=(($3377+4)|0);
   var $3379=HEAP32[(($3378)>>2)];
   var $3394 = $3379;label = 360; break;
  case 359: 
   $336=$3354;
   var $3381=$336;
   var $3382=(($3381)|0);
   $335=$3382;
   var $3383=$335;
   var $3384=$3383;
   $334=$3384;
   var $3385=$334;
   var $3386=(($3385)|0);
   var $3387=(($3386)|0);
   var $3388=$3387;
   var $3389=(($3388)|0);
   var $3390=$3389;
   var $3391=HEAP8[($3390)];
   var $3392=(($3391)&(255));
   var $3393=$3392 >> 1;
   var $3394 = $3393;label = 360; break;
  case 360: 
   var $3394;
   var $3395=(($3394)>>>(0)) > 0;
   if ($3395) { label = 361; break; } else { label = 367; break; }
  case 361: 
   var $3397=$__ng;
   var $3398=(($3397)>>>(0)) > 0;
   if ($3398) { label = 362; break; } else { label = 367; break; }
  case 362: 
   var $3400=$__c;
   var $3401=(($3400 << 24) >> 24);
   var $3402=HEAP8[($__ts)];
   var $3403=(($3402 << 24) >> 24);
   var $3404=(($3401)|(0))==(($3403)|(0));
   if ($3404) { label = 363; break; } else { label = 367; break; }
  case 363: 
   var $3406=HEAP32[(($__gn)>>2)];
   var $3407=HEAP32[(($__ge)>>2)];
   var $3408=(($3406)|(0))==(($3407)|(0));
   if ($3408) { label = 364; break; } else { label = 366; break; }
  case 364: 
   (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 365; break; } else { label = 37; break; }
  case 365: 
   label = 366; break;
  case 366: 
   var $3412=$__ng;
   var $3413=HEAP32[(($__gn)>>2)];
   var $3414=(($3413+4)|0);
   HEAP32[(($__gn)>>2)]=$3414;
   HEAP32[(($3413)>>2)]=$3412;
   $__ng=0;
   label = 368; break;
  case 367: 
   label = 376; break;
  case 368: 
   label = 369; break;
  case 369: 
   label = 370; break;
  case 370: 
   var $3419=$777;
   $374=$3419;
   var $3420=$374;
   var $3421=(($3420)|0);
   var $3422=HEAP32[(($3421)>>2)];
   $373=$3422;
   var $3423=$373;
   var $3424=(($3423+12)|0);
   var $3425=HEAP32[(($3424)>>2)];
   var $3426=(($3423+16)|0);
   var $3427=HEAP32[(($3426)>>2)];
   var $3428=(($3425)|(0))==(($3427)|(0));
   if ($3428) { label = 371; break; } else { label = 373; break; }
  case 371: 
   var $3430=$3423;
   var $3431=HEAP32[(($3430)>>2)];
   var $3432=(($3431+40)|0);
   var $3433=HEAP32[(($3432)>>2)];
   var $3434 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3433]($3423) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 372; break; } else { label = 37; break; }
  case 372: 
   $372=$3434;
   label = 374; break;
  case 373: 
   var $3436=(($3423+12)|0);
   var $3437=HEAP32[(($3436)>>2)];
   var $3438=(($3437+1)|0);
   HEAP32[(($3436)>>2)]=$3438;
   var $3439=HEAP8[($3437)];
   $371=$3439;
   var $3440=$371;
   var $3441=(($3440)&(255));
   $372=$3441;
   label = 374; break;
  case 374: 
   var $3442=$372;
   label = 375; break;
  case 375: 
   label = 327; break;
  case 376: 
   $377=$__gb;
   var $3445=$377;
   var $3446=(($3445)|0);
   $376=$3446;
   var $3447=$376;
   var $3448=$3447;
   $375=$3448;
   var $3449=$375;
   var $3450=(($3449)|0);
   var $3451=HEAP32[(($3450)>>2)];
   var $3452=HEAP32[(($__gn)>>2)];
   var $3453=(($3451)|(0))!=(($3452)|(0));
   if ($3453) { label = 377; break; } else { label = 382; break; }
  case 377: 
   var $3455=$__ng;
   var $3456=(($3455)>>>(0)) > 0;
   if ($3456) { label = 378; break; } else { label = 382; break; }
  case 378: 
   var $3458=HEAP32[(($__gn)>>2)];
   var $3459=HEAP32[(($__ge)>>2)];
   var $3460=(($3458)|(0))==(($3459)|(0));
   if ($3460) { label = 379; break; } else { label = 381; break; }
  case 379: 
   (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 380; break; } else { label = 37; break; }
  case 380: 
   label = 381; break;
  case 381: 
   var $3464=$__ng;
   var $3465=HEAP32[(($__gn)>>2)];
   var $3466=(($3465+4)|0);
   HEAP32[(($__gn)>>2)]=$3466;
   HEAP32[(($3465)>>2)]=$3464;
   label = 382; break;
  case 382: 
   var $3468=HEAP32[(($__fd)>>2)];
   var $3469=(($3468)|(0)) > 0;
   if ($3469) { label = 383; break; } else { label = 456; break; }
  case 383: 
   var $3471=$777;
   $438=$3471;
   $439=$__e;
   var $3472=$438;
   var $3473=$439;
   $436=$3472;
   $437=$3473;
   var $3474=$436;
   $435=$3474;
   var $3475=$435;
   var $3476=(($3475)|0);
   var $3477=HEAP32[(($3476)>>2)];
   var $3478=(($3477)|(0))!=0;
   if ($3478) { label = 384; break; } else { label = 390; break; }
  case 384: 
   var $3480=(($3475)|0);
   var $3481=HEAP32[(($3480)>>2)];
   $434=$3481;
   var $3482=$434;
   var $3483=(($3482+12)|0);
   var $3484=HEAP32[(($3483)>>2)];
   var $3485=(($3482+16)|0);
   var $3486=HEAP32[(($3485)>>2)];
   var $3487=(($3484)|(0))==(($3486)|(0));
   if ($3487) { label = 385; break; } else { label = 387; break; }
  case 385: 
   var $3489=$3482;
   var $3490=HEAP32[(($3489)>>2)];
   var $3491=(($3490+36)|0);
   var $3492=HEAP32[(($3491)>>2)];
   var $3493 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3492]($3482) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 386; break; } else { label = 37; break; }
  case 386: 
   $433=$3493;
   label = 388; break;
  case 387: 
   var $3495=(($3482+12)|0);
   var $3496=HEAP32[(($3495)>>2)];
   var $3497=HEAP8[($3496)];
   $432=$3497;
   var $3498=$432;
   var $3499=(($3498)&(255));
   $433=$3499;
   label = 388; break;
  case 388: 
   var $3500=$433;
   $430=$3500;
   $431=-1;
   var $3501=$430;
   var $3502=$431;
   var $3503=(($3501)|(0))==(($3502)|(0));
   if ($3503) { label = 389; break; } else { label = 390; break; }
  case 389: 
   var $3505=(($3475)|0);
   HEAP32[(($3505)>>2)]=0;
   label = 390; break;
  case 390: 
   var $3506=(($3475)|0);
   var $3507=HEAP32[(($3506)>>2)];
   var $3508=(($3507)|(0))==0;
   var $3509=(($3508)&(1));
   var $3510=$437;
   $429=$3510;
   var $3511=$429;
   var $3512=(($3511)|0);
   var $3513=HEAP32[(($3512)>>2)];
   var $3514=(($3513)|(0))!=0;
   if ($3514) { label = 391; break; } else { label = 397; break; }
  case 391: 
   var $3516=(($3511)|0);
   var $3517=HEAP32[(($3516)>>2)];
   $428=$3517;
   var $3518=$428;
   var $3519=(($3518+12)|0);
   var $3520=HEAP32[(($3519)>>2)];
   var $3521=(($3518+16)|0);
   var $3522=HEAP32[(($3521)>>2)];
   var $3523=(($3520)|(0))==(($3522)|(0));
   if ($3523) { label = 392; break; } else { label = 394; break; }
  case 392: 
   var $3525=$3518;
   var $3526=HEAP32[(($3525)>>2)];
   var $3527=(($3526+36)|0);
   var $3528=HEAP32[(($3527)>>2)];
   var $3529 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3528]($3518) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 393; break; } else { label = 37; break; }
  case 393: 
   $427=$3529;
   label = 395; break;
  case 394: 
   var $3531=(($3518+12)|0);
   var $3532=HEAP32[(($3531)>>2)];
   var $3533=HEAP8[($3532)];
   $426=$3533;
   var $3534=$426;
   var $3535=(($3534)&(255));
   $427=$3535;
   label = 395; break;
  case 395: 
   var $3536=$427;
   $424=$3536;
   $425=-1;
   var $3537=$424;
   var $3538=$425;
   var $3539=(($3537)|(0))==(($3538)|(0));
   if ($3539) { label = 396; break; } else { label = 397; break; }
  case 396: 
   var $3541=(($3511)|0);
   HEAP32[(($3541)>>2)]=0;
   label = 397; break;
  case 397: 
   var $3542=(($3511)|0);
   var $3543=HEAP32[(($3542)>>2)];
   var $3544=(($3543)|(0))==0;
   var $3545=(($3544)&(1));
   var $3546=(($3509)|(0))==(($3545)|(0));
   label = 398; break;
  case 398: 
   if ($3546) { label = 405; break; } else { label = 399; break; }
  case 399: 
   var $3549=$777;
   $457=$3549;
   var $3550=$457;
   var $3551=(($3550)|0);
   var $3552=HEAP32[(($3551)>>2)];
   $456=$3552;
   var $3553=$456;
   var $3554=(($3553+12)|0);
   var $3555=HEAP32[(($3554)>>2)];
   var $3556=(($3553+16)|0);
   var $3557=HEAP32[(($3556)>>2)];
   var $3558=(($3555)|(0))==(($3557)|(0));
   if ($3558) { label = 400; break; } else { label = 402; break; }
  case 400: 
   var $3560=$3553;
   var $3561=HEAP32[(($3560)>>2)];
   var $3562=(($3561+36)|0);
   var $3563=HEAP32[(($3562)>>2)];
   var $3564 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3563]($3553) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 401; break; } else { label = 37; break; }
  case 401: 
   $455=$3564;
   label = 403; break;
  case 402: 
   var $3566=(($3553+12)|0);
   var $3567=HEAP32[(($3566)>>2)];
   var $3568=HEAP8[($3567)];
   $454=$3568;
   var $3569=$454;
   var $3570=(($3569)&(255));
   $455=$3570;
   label = 403; break;
  case 403: 
   var $3571=$455;
   var $3572=(($3571) & 255);
   label = 404; break;
  case 404: 
   var $3574=(($3572 << 24) >> 24);
   var $3575=HEAP8[($__dp)];
   var $3576=(($3575 << 24) >> 24);
   var $3577=(($3574)|(0))!=(($3576)|(0));
   if ($3577) { label = 405; break; } else { label = 406; break; }
  case 405: 
   var $3579=$781;
   var $3580=HEAP32[(($3579)>>2)];
   var $3581=$3580 | 4;
   HEAP32[(($3579)>>2)]=$3581;
   $776=0;
   $791=1;
   label = 508; break;
  case 406: 
   var $3583=$777;
   $477=$3583;
   var $3584=$477;
   var $3585=(($3584)|0);
   var $3586=HEAP32[(($3585)>>2)];
   $476=$3586;
   var $3587=$476;
   var $3588=(($3587+12)|0);
   var $3589=HEAP32[(($3588)>>2)];
   var $3590=(($3587+16)|0);
   var $3591=HEAP32[(($3590)>>2)];
   var $3592=(($3589)|(0))==(($3591)|(0));
   if ($3592) { label = 407; break; } else { label = 409; break; }
  case 407: 
   var $3594=$3587;
   var $3595=HEAP32[(($3594)>>2)];
   var $3596=(($3595+40)|0);
   var $3597=HEAP32[(($3596)>>2)];
   var $3598 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3597]($3587) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 408; break; } else { label = 37; break; }
  case 408: 
   $475=$3598;
   label = 410; break;
  case 409: 
   var $3600=(($3587+12)|0);
   var $3601=HEAP32[(($3600)>>2)];
   var $3602=(($3601+1)|0);
   HEAP32[(($3600)>>2)]=$3602;
   var $3603=HEAP8[($3601)];
   $474=$3603;
   var $3604=$474;
   var $3605=(($3604)&(255));
   $475=$3605;
   label = 410; break;
  case 410: 
   var $3606=$475;
   label = 411; break;
  case 411: 
   label = 412; break;
  case 412: 
   var $3609=HEAP32[(($__fd)>>2)];
   var $3610=(($3609)|(0)) > 0;
   if ($3610) { label = 413; break; } else { label = 455; break; }
  case 413: 
   var $3612=$777;
   $512=$3612;
   $513=$__e;
   var $3613=$512;
   var $3614=$513;
   $510=$3613;
   $511=$3614;
   var $3615=$510;
   $509=$3615;
   var $3616=$509;
   var $3617=(($3616)|0);
   var $3618=HEAP32[(($3617)>>2)];
   var $3619=(($3618)|(0))!=0;
   if ($3619) { label = 414; break; } else { label = 420; break; }
  case 414: 
   var $3621=(($3616)|0);
   var $3622=HEAP32[(($3621)>>2)];
   $508=$3622;
   var $3623=$508;
   var $3624=(($3623+12)|0);
   var $3625=HEAP32[(($3624)>>2)];
   var $3626=(($3623+16)|0);
   var $3627=HEAP32[(($3626)>>2)];
   var $3628=(($3625)|(0))==(($3627)|(0));
   if ($3628) { label = 415; break; } else { label = 417; break; }
  case 415: 
   var $3630=$3623;
   var $3631=HEAP32[(($3630)>>2)];
   var $3632=(($3631+36)|0);
   var $3633=HEAP32[(($3632)>>2)];
   var $3634 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3633]($3623) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 416; break; } else { label = 37; break; }
  case 416: 
   $507=$3634;
   label = 418; break;
  case 417: 
   var $3636=(($3623+12)|0);
   var $3637=HEAP32[(($3636)>>2)];
   var $3638=HEAP8[($3637)];
   $506=$3638;
   var $3639=$506;
   var $3640=(($3639)&(255));
   $507=$3640;
   label = 418; break;
  case 418: 
   var $3641=$507;
   $504=$3641;
   $505=-1;
   var $3642=$504;
   var $3643=$505;
   var $3644=(($3642)|(0))==(($3643)|(0));
   if ($3644) { label = 419; break; } else { label = 420; break; }
  case 419: 
   var $3646=(($3616)|0);
   HEAP32[(($3646)>>2)]=0;
   label = 420; break;
  case 420: 
   var $3647=(($3616)|0);
   var $3648=HEAP32[(($3647)>>2)];
   var $3649=(($3648)|(0))==0;
   var $3650=(($3649)&(1));
   var $3651=$511;
   $503=$3651;
   var $3652=$503;
   var $3653=(($3652)|0);
   var $3654=HEAP32[(($3653)>>2)];
   var $3655=(($3654)|(0))!=0;
   if ($3655) { label = 421; break; } else { label = 427; break; }
  case 421: 
   var $3657=(($3652)|0);
   var $3658=HEAP32[(($3657)>>2)];
   $502=$3658;
   var $3659=$502;
   var $3660=(($3659+12)|0);
   var $3661=HEAP32[(($3660)>>2)];
   var $3662=(($3659+16)|0);
   var $3663=HEAP32[(($3662)>>2)];
   var $3664=(($3661)|(0))==(($3663)|(0));
   if ($3664) { label = 422; break; } else { label = 424; break; }
  case 422: 
   var $3666=$3659;
   var $3667=HEAP32[(($3666)>>2)];
   var $3668=(($3667+36)|0);
   var $3669=HEAP32[(($3668)>>2)];
   var $3670 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3669]($3659) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 423; break; } else { label = 37; break; }
  case 423: 
   $501=$3670;
   label = 425; break;
  case 424: 
   var $3672=(($3659+12)|0);
   var $3673=HEAP32[(($3672)>>2)];
   var $3674=HEAP8[($3673)];
   $500=$3674;
   var $3675=$500;
   var $3676=(($3675)&(255));
   $501=$3676;
   label = 425; break;
  case 425: 
   var $3677=$501;
   $498=$3677;
   $499=-1;
   var $3678=$498;
   var $3679=$499;
   var $3680=(($3678)|(0))==(($3679)|(0));
   if ($3680) { label = 426; break; } else { label = 427; break; }
  case 426: 
   var $3682=(($3652)|0);
   HEAP32[(($3682)>>2)]=0;
   label = 427; break;
  case 427: 
   var $3683=(($3652)|0);
   var $3684=HEAP32[(($3683)>>2)];
   var $3685=(($3684)|(0))==0;
   var $3686=(($3685)&(1));
   var $3687=(($3650)|(0))==(($3686)|(0));
   label = 428; break;
  case 428: 
   if ($3687) { label = 439; break; } else { label = 429; break; }
  case 429: 
   var $3690=$783;
   var $3691=$777;
   $527=$3691;
   var $3692=$527;
   var $3693=(($3692)|0);
   var $3694=HEAP32[(($3693)>>2)];
   $526=$3694;
   var $3695=$526;
   var $3696=(($3695+12)|0);
   var $3697=HEAP32[(($3696)>>2)];
   var $3698=(($3695+16)|0);
   var $3699=HEAP32[(($3698)>>2)];
   var $3700=(($3697)|(0))==(($3699)|(0));
   if ($3700) { label = 430; break; } else { label = 432; break; }
  case 430: 
   var $3702=$3695;
   var $3703=HEAP32[(($3702)>>2)];
   var $3704=(($3703+36)|0);
   var $3705=HEAP32[(($3704)>>2)];
   var $3706 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3705]($3695) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 431; break; } else { label = 37; break; }
  case 431: 
   $525=$3706;
   label = 433; break;
  case 432: 
   var $3708=(($3695+12)|0);
   var $3709=HEAP32[(($3708)>>2)];
   var $3710=HEAP8[($3709)];
   $524=$3710;
   var $3711=$524;
   var $3712=(($3711)&(255));
   $525=$3712;
   label = 433; break;
  case 433: 
   var $3713=$525;
   var $3714=(($3713) & 255);
   label = 434; break;
  case 434: 
   $528=$3690;
   $529=2048;
   $530=$3714;
   var $3716=$528;
   var $3717=$530;
   var $3718=(($3717 << 24) >> 24);
   var $3719=(($3718)>>>(0)) <= 127;
   if ($3719) { label = 435; break; } else { label = 436; break; }
  case 435: 
   var $3721=$530;
   var $3722=(($3721 << 24) >> 24);
   var $3723=(($3716+8)|0);
   var $3724=HEAP32[(($3723)>>2)];
   var $3725=(($3724+($3722<<1))|0);
   var $3726=HEAP16[(($3725)>>1)];
   var $3727=(($3726)&(65535));
   var $3728=$529;
   var $3729=(($3728)&(65535));
   var $3730=$3727 & $3729;
   var $3732 = $3730;label = 437; break;
  case 436: 
   var $3732 = 0;label = 437; break;
  case 437: 
   var $3732;
   var $3733=(($3732)|(0))!=0;
   label = 438; break;
  case 438: 
   if ($3733) { label = 440; break; } else { label = 439; break; }
  case 439: 
   var $3736=$781;
   var $3737=HEAP32[(($3736)>>2)];
   var $3738=$3737 | 4;
   HEAP32[(($3736)>>2)]=$3738;
   $776=0;
   $791=1;
   label = 508; break;
  case 440: 
   var $3740=$785;
   var $3741=HEAP32[(($3740)>>2)];
   var $3742=HEAP32[(($786)>>2)];
   var $3743=(($3741)|(0))==(($3742)|(0));
   if ($3743) { label = 441; break; } else { label = 443; break; }
  case 441: 
   var $3745=$784;
   var $3746=$785;
   (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($3745, $3746, $786) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 442; break; } else { label = 37; break; }
  case 442: 
   label = 443; break;
  case 443: 
   var $3749=$777;
   $554=$3749;
   var $3750=$554;
   var $3751=(($3750)|0);
   var $3752=HEAP32[(($3751)>>2)];
   $553=$3752;
   var $3753=$553;
   var $3754=(($3753+12)|0);
   var $3755=HEAP32[(($3754)>>2)];
   var $3756=(($3753+16)|0);
   var $3757=HEAP32[(($3756)>>2)];
   var $3758=(($3755)|(0))==(($3757)|(0));
   if ($3758) { label = 444; break; } else { label = 446; break; }
  case 444: 
   var $3760=$3753;
   var $3761=HEAP32[(($3760)>>2)];
   var $3762=(($3761+36)|0);
   var $3763=HEAP32[(($3762)>>2)];
   var $3764 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3763]($3753) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 445; break; } else { label = 37; break; }
  case 445: 
   $552=$3764;
   label = 447; break;
  case 446: 
   var $3766=(($3753+12)|0);
   var $3767=HEAP32[(($3766)>>2)];
   var $3768=HEAP8[($3767)];
   $551=$3768;
   var $3769=$551;
   var $3770=(($3769)&(255));
   $552=$3770;
   label = 447; break;
  case 447: 
   var $3771=$552;
   var $3772=(($3771) & 255);
   label = 448; break;
  case 448: 
   var $3774=$785;
   var $3775=HEAP32[(($3774)>>2)];
   var $3776=(($3775+1)|0);
   HEAP32[(($3774)>>2)]=$3776;
   HEAP8[($3775)]=$3772;
   label = 449; break;
  case 449: 
   var $3778=HEAP32[(($__fd)>>2)];
   var $3779=((($3778)-(1))|0);
   HEAP32[(($__fd)>>2)]=$3779;
   var $3780=$777;
   $638=$3780;
   var $3781=$638;
   var $3782=(($3781)|0);
   var $3783=HEAP32[(($3782)>>2)];
   $637=$3783;
   var $3784=$637;
   var $3785=(($3784+12)|0);
   var $3786=HEAP32[(($3785)>>2)];
   var $3787=(($3784+16)|0);
   var $3788=HEAP32[(($3787)>>2)];
   var $3789=(($3786)|(0))==(($3788)|(0));
   if ($3789) { label = 450; break; } else { label = 452; break; }
  case 450: 
   var $3791=$3784;
   var $3792=HEAP32[(($3791)>>2)];
   var $3793=(($3792+40)|0);
   var $3794=HEAP32[(($3793)>>2)];
   var $3795 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3794]($3784) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 451; break; } else { label = 37; break; }
  case 451: 
   $636=$3795;
   label = 453; break;
  case 452: 
   var $3797=(($3784+12)|0);
   var $3798=HEAP32[(($3797)>>2)];
   var $3799=(($3798+1)|0);
   HEAP32[(($3797)>>2)]=$3799;
   var $3800=HEAP8[($3798)];
   $635=$3800;
   var $3801=$635;
   var $3802=(($3801)&(255));
   $636=$3802;
   label = 453; break;
  case 453: 
   var $3803=$636;
   label = 454; break;
  case 454: 
   label = 412; break;
  case 455: 
   label = 456; break;
  case 456: 
   var $3807=$785;
   var $3808=HEAP32[(($3807)>>2)];
   var $3809=$784;
   $641=$3809;
   var $3810=$641;
   var $3811=(($3810)|0);
   $640=$3811;
   var $3812=$640;
   var $3813=$3812;
   $639=$3813;
   var $3814=$639;
   var $3815=(($3814)|0);
   var $3816=HEAP32[(($3815)>>2)];
   var $3817=(($3808)|(0))==(($3816)|(0));
   if ($3817) { label = 457; break; } else { label = 458; break; }
  case 457: 
   var $3819=$781;
   var $3820=HEAP32[(($3819)>>2)];
   var $3821=$3820 | 4;
   HEAP32[(($3819)>>2)]=$3821;
   $776=0;
   $791=1;
   label = 508; break;
  case 458: 
   label = 459; break;
  case 459: 
   label = 460; break;
  case 460: 
   var $3825=$__p;
   var $3826=((($3825)+(1))|0);
   $__p=$3826;
   label = 18; break;
  case 461: 
   var $3828=$__trailing_sign;
   var $3829=(($3828)|(0))!=0;
   if ($3829) { label = 462; break; } else { label = 502; break; }
  case 462: 
   $__i=1;
   label = 463; break;
  case 463: 
   var $3832=$__i;
   var $3833=$__trailing_sign;
   $651=$3833;
   var $3834=$651;
   $650=$3834;
   var $3835=$650;
   var $3836=(($3835)|0);
   $649=$3836;
   var $3837=$649;
   var $3838=$3837;
   $648=$3838;
   var $3839=$648;
   var $3840=(($3839)|0);
   var $3841=(($3840)|0);
   var $3842=$3841;
   var $3843=(($3842)|0);
   var $3844=$3843;
   var $3845=HEAP8[($3844)];
   var $3846=(($3845)&(255));
   var $3847=$3846 & 1;
   var $3848=(($3847)|(0))!=0;
   if ($3848) { label = 464; break; } else { label = 465; break; }
  case 464: 
   $644=$3834;
   var $3850=$644;
   var $3851=(($3850)|0);
   $643=$3851;
   var $3852=$643;
   var $3853=$3852;
   $642=$3853;
   var $3854=$642;
   var $3855=(($3854)|0);
   var $3856=(($3855)|0);
   var $3857=$3856;
   var $3858=(($3857+4)|0);
   var $3859=HEAP32[(($3858)>>2)];
   var $3874 = $3859;label = 466; break;
  case 465: 
   $647=$3834;
   var $3861=$647;
   var $3862=(($3861)|0);
   $646=$3862;
   var $3863=$646;
   var $3864=$3863;
   $645=$3864;
   var $3865=$645;
   var $3866=(($3865)|0);
   var $3867=(($3866)|0);
   var $3868=$3867;
   var $3869=(($3868)|0);
   var $3870=$3869;
   var $3871=HEAP8[($3870)];
   var $3872=(($3871)&(255));
   var $3873=$3872 >> 1;
   var $3874 = $3873;label = 466; break;
  case 466: 
   var $3874;
   var $3875=(($3832)>>>(0)) < (($3874)>>>(0));
   if ($3875) { label = 467; break; } else { label = 501; break; }
  case 467: 
   var $3877=$777;
   $678=$3877;
   $679=$__e;
   var $3878=$678;
   var $3879=$679;
   $676=$3878;
   $677=$3879;
   var $3880=$676;
   $675=$3880;
   var $3881=$675;
   var $3882=(($3881)|0);
   var $3883=HEAP32[(($3882)>>2)];
   var $3884=(($3883)|(0))!=0;
   if ($3884) { label = 468; break; } else { label = 474; break; }
  case 468: 
   var $3886=(($3881)|0);
   var $3887=HEAP32[(($3886)>>2)];
   $674=$3887;
   var $3888=$674;
   var $3889=(($3888+12)|0);
   var $3890=HEAP32[(($3889)>>2)];
   var $3891=(($3888+16)|0);
   var $3892=HEAP32[(($3891)>>2)];
   var $3893=(($3890)|(0))==(($3892)|(0));
   if ($3893) { label = 469; break; } else { label = 471; break; }
  case 469: 
   var $3895=$3888;
   var $3896=HEAP32[(($3895)>>2)];
   var $3897=(($3896+36)|0);
   var $3898=HEAP32[(($3897)>>2)];
   var $3899 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3898]($3888) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 470; break; } else { label = 37; break; }
  case 470: 
   $673=$3899;
   label = 472; break;
  case 471: 
   var $3901=(($3888+12)|0);
   var $3902=HEAP32[(($3901)>>2)];
   var $3903=HEAP8[($3902)];
   $672=$3903;
   var $3904=$672;
   var $3905=(($3904)&(255));
   $673=$3905;
   label = 472; break;
  case 472: 
   var $3906=$673;
   $670=$3906;
   $671=-1;
   var $3907=$670;
   var $3908=$671;
   var $3909=(($3907)|(0))==(($3908)|(0));
   if ($3909) { label = 473; break; } else { label = 474; break; }
  case 473: 
   var $3911=(($3881)|0);
   HEAP32[(($3911)>>2)]=0;
   label = 474; break;
  case 474: 
   var $3912=(($3881)|0);
   var $3913=HEAP32[(($3912)>>2)];
   var $3914=(($3913)|(0))==0;
   var $3915=(($3914)&(1));
   var $3916=$677;
   $669=$3916;
   var $3917=$669;
   var $3918=(($3917)|0);
   var $3919=HEAP32[(($3918)>>2)];
   var $3920=(($3919)|(0))!=0;
   if ($3920) { label = 475; break; } else { label = 481; break; }
  case 475: 
   var $3922=(($3917)|0);
   var $3923=HEAP32[(($3922)>>2)];
   $668=$3923;
   var $3924=$668;
   var $3925=(($3924+12)|0);
   var $3926=HEAP32[(($3925)>>2)];
   var $3927=(($3924+16)|0);
   var $3928=HEAP32[(($3927)>>2)];
   var $3929=(($3926)|(0))==(($3928)|(0));
   if ($3929) { label = 476; break; } else { label = 478; break; }
  case 476: 
   var $3931=$3924;
   var $3932=HEAP32[(($3931)>>2)];
   var $3933=(($3932+36)|0);
   var $3934=HEAP32[(($3933)>>2)];
   var $3935 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3934]($3924) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 477; break; } else { label = 37; break; }
  case 477: 
   $667=$3935;
   label = 479; break;
  case 478: 
   var $3937=(($3924+12)|0);
   var $3938=HEAP32[(($3937)>>2)];
   var $3939=HEAP8[($3938)];
   $666=$3939;
   var $3940=$666;
   var $3941=(($3940)&(255));
   $667=$3941;
   label = 479; break;
  case 479: 
   var $3942=$667;
   $664=$3942;
   $665=-1;
   var $3943=$664;
   var $3944=$665;
   var $3945=(($3943)|(0))==(($3944)|(0));
   if ($3945) { label = 480; break; } else { label = 481; break; }
  case 480: 
   var $3947=(($3917)|0);
   HEAP32[(($3947)>>2)]=0;
   label = 481; break;
  case 481: 
   var $3948=(($3917)|0);
   var $3949=HEAP32[(($3948)>>2)];
   var $3950=(($3949)|(0))==0;
   var $3951=(($3950)&(1));
   var $3952=(($3915)|(0))==(($3951)|(0));
   label = 482; break;
  case 482: 
   if ($3952) { label = 493; break; } else { label = 483; break; }
  case 483: 
   var $3955=$777;
   $692=$3955;
   var $3956=$692;
   var $3957=(($3956)|0);
   var $3958=HEAP32[(($3957)>>2)];
   $691=$3958;
   var $3959=$691;
   var $3960=(($3959+12)|0);
   var $3961=HEAP32[(($3960)>>2)];
   var $3962=(($3959+16)|0);
   var $3963=HEAP32[(($3962)>>2)];
   var $3964=(($3961)|(0))==(($3963)|(0));
   if ($3964) { label = 484; break; } else { label = 486; break; }
  case 484: 
   var $3966=$3959;
   var $3967=HEAP32[(($3966)>>2)];
   var $3968=(($3967+36)|0);
   var $3969=HEAP32[(($3968)>>2)];
   var $3970 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3969]($3959) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 485; break; } else { label = 37; break; }
  case 485: 
   $690=$3970;
   label = 487; break;
  case 486: 
   var $3972=(($3959+12)|0);
   var $3973=HEAP32[(($3972)>>2)];
   var $3974=HEAP8[($3973)];
   $689=$3974;
   var $3975=$689;
   var $3976=(($3975)&(255));
   $690=$3976;
   label = 487; break;
  case 487: 
   var $3977=$690;
   var $3978=(($3977) & 255);
   label = 488; break;
  case 488: 
   var $3980=(($3978 << 24) >> 24);
   var $3981=$__trailing_sign;
   var $3982=$__i;
   $704=$3981;
   $705=$3982;
   var $3983=$704;
   $703=$3983;
   var $3984=$703;
   $702=$3984;
   var $3985=$702;
   $701=$3985;
   var $3986=$701;
   var $3987=(($3986)|0);
   $700=$3987;
   var $3988=$700;
   var $3989=$3988;
   $699=$3989;
   var $3990=$699;
   var $3991=(($3990)|0);
   var $3992=(($3991)|0);
   var $3993=$3992;
   var $3994=(($3993)|0);
   var $3995=$3994;
   var $3996=HEAP8[($3995)];
   var $3997=(($3996)&(255));
   var $3998=$3997 & 1;
   var $3999=(($3998)|(0))!=0;
   if ($3999) { label = 489; break; } else { label = 490; break; }
  case 489: 
   $695=$3985;
   var $4001=$695;
   var $4002=(($4001)|0);
   $694=$4002;
   var $4003=$694;
   var $4004=$4003;
   $693=$4004;
   var $4005=$693;
   var $4006=(($4005)|0);
   var $4007=(($4006)|0);
   var $4008=$4007;
   var $4009=(($4008+8)|0);
   var $4010=HEAP32[(($4009)>>2)];
   var $4022 = $4010;label = 491; break;
  case 490: 
   $698=$3985;
   var $4012=$698;
   var $4013=(($4012)|0);
   $697=$4013;
   var $4014=$697;
   var $4015=$4014;
   $696=$4015;
   var $4016=$696;
   var $4017=(($4016)|0);
   var $4018=(($4017)|0);
   var $4019=$4018;
   var $4020=(($4019+1)|0);
   var $4021=(($4020)|0);
   var $4022 = $4021;label = 491; break;
  case 491: 
   var $4022;
   var $4023=$705;
   var $4024=(($4022+$4023)|0);
   label = 492; break;
  case 492: 
   var $4026=HEAP8[($4024)];
   var $4027=(($4026 << 24) >> 24);
   var $4028=(($3980)|(0))!=(($4027)|(0));
   if ($4028) { label = 493; break; } else { label = 494; break; }
  case 493: 
   var $4030=$781;
   var $4031=HEAP32[(($4030)>>2)];
   var $4032=$4031 | 4;
   HEAP32[(($4030)>>2)]=$4032;
   $776=0;
   $791=1;
   label = 508; break;
  case 494: 
   label = 495; break;
  case 495: 
   var $4035=$__i;
   var $4036=((($4035)+(1))|0);
   $__i=$4036;
   var $4037=$777;
   $718=$4037;
   var $4038=$718;
   var $4039=(($4038)|0);
   var $4040=HEAP32[(($4039)>>2)];
   $717=$4040;
   var $4041=$717;
   var $4042=(($4041+12)|0);
   var $4043=HEAP32[(($4042)>>2)];
   var $4044=(($4041+16)|0);
   var $4045=HEAP32[(($4044)>>2)];
   var $4046=(($4043)|(0))==(($4045)|(0));
   if ($4046) { label = 496; break; } else { label = 498; break; }
  case 496: 
   var $4048=$4041;
   var $4049=HEAP32[(($4048)>>2)];
   var $4050=(($4049+40)|0);
   var $4051=HEAP32[(($4050)>>2)];
   var $4052 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4051]($4041) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 497; break; } else { label = 37; break; }
  case 497: 
   $716=$4052;
   label = 499; break;
  case 498: 
   var $4054=(($4041+12)|0);
   var $4055=HEAP32[(($4054)>>2)];
   var $4056=(($4055+1)|0);
   HEAP32[(($4054)>>2)]=$4056;
   var $4057=HEAP8[($4055)];
   $715=$4057;
   var $4058=$715;
   var $4059=(($4058)&(255));
   $716=$4059;
   label = 499; break;
  case 499: 
   var $4060=$716;
   label = 500; break;
  case 500: 
   label = 463; break;
  case 501: 
   label = 502; break;
  case 502: 
   $721=$__gb;
   var $4064=$721;
   var $4065=(($4064)|0);
   $720=$4065;
   var $4066=$720;
   var $4067=$4066;
   $719=$4067;
   var $4068=$719;
   var $4069=(($4068)|0);
   var $4070=HEAP32[(($4069)>>2)];
   var $4071=HEAP32[(($__gn)>>2)];
   var $4072=(($4070)|(0))!=(($4071)|(0));
   if ($4072) { label = 503; break; } else { label = 507; break; }
  case 503: 
   HEAP32[(($__et)>>2)]=0;
   $724=$__gb;
   var $4074=$724;
   var $4075=(($4074)|0);
   $723=$4075;
   var $4076=$723;
   var $4077=$4076;
   $722=$4077;
   var $4078=$722;
   var $4079=(($4078)|0);
   var $4080=HEAP32[(($4079)>>2)];
   var $4081=HEAP32[(($__gn)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $4080, $4081, $__et) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 504; break; } else { label = 37; break; }
  case 504: 
   var $4083=HEAP32[(($__et)>>2)];
   var $4084=(($4083)|(0))!=0;
   if ($4084) { label = 505; break; } else { label = 506; break; }
  case 505: 
   var $4086=$781;
   var $4087=HEAP32[(($4086)>>2)];
   var $4088=$4087 | 4;
   HEAP32[(($4086)>>2)]=$4088;
   $776=0;
   $791=1;
   label = 508; break;
  case 506: 
   label = 507; break;
  case 507: 
   $776=1;
   $791=1;
   label = 508; break;
  case 508: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $755=$__gb;
   var $4092=$755;
   $754=$4092;
   var $4093=$754;
   $752=$4093;
   $753=0;
   var $4094=$752;
   var $4095=(($4094)|0);
   $751=$4095;
   var $4096=$751;
   var $4097=$4096;
   $750=$4097;
   var $4098=$750;
   var $4099=(($4098)|0);
   var $4100=HEAP32[(($4099)>>2)];
   $__tmp_i_i_i=$4100;
   var $4101=$753;
   var $4102=(($4094)|0);
   $749=$4102;
   var $4103=$749;
   var $4104=$4103;
   $748=$4104;
   var $4105=$748;
   var $4106=(($4105)|0);
   HEAP32[(($4106)>>2)]=$4101;
   var $4107=$__tmp_i_i_i;
   var $4108=(($4107)|(0))!=0;
   if ($4108) { label = 509; break; } else { label = 512; break; }
  case 509: 
   var $4110=(($4094)|0);
   $747=$4110;
   var $4111=$747;
   var $4112=$4111;
   $746=$4112;
   var $4113=$746;
   var $4114=(($4113+4)|0);
   var $4115=HEAP32[(($4114)>>2)];
   var $4116=$__tmp_i_i_i;
   var $4117=$4116;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4115]($4117) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 510; break; } else { label = 511; break; }
  case 510: 
   label = 512; break;
  case 511: 
   var $4120$0 = ___cxa_find_matching_catch(-1, -1,0); $4120$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 512: 
   var $4121=$776;
   STACKTOP = __stackBase__;
   return $4121;
  case 513: 
   var $4123=$788;
   var $4124=$789;
   var $4125$0=$4123;
   var $4125$1=0;
   var $4126$0=$4125$0;
   var $4126$1=$4124;
   ___resumeException($4126$0)
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 10873
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$msg;
   var $4=___cxa_allocate_exception(8);
   var $5=$4;
   var $6=$1;
   (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($5, $6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   ___cxa_throw($4, 17376, (54));
   throw "Reached an unreachable!";
  case 3: 
   var $9$0 = ___cxa_find_matching_catch(-1, -1); $9$1 = tempRet0;
   var $10=$9$0;
   $2=$10;
   var $11=$9$1;
   $3=$11;
   ___cxa_free_exception($4);
   label = 4; break;
  case 4: 
   var $14=$2;
   var $15=$3;
   var $16$0=$14;
   var $16$1=0;
   var $17$0=$16$0;
   var $17$1=$15;
   ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $__tmp_i_i_i1;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57=__stackBase__;
   var $58=(__stackBase__)+(8);
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $__tmp_i_i_i;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75=(__stackBase__)+(16);
   var $76=(__stackBase__)+(24);
   var $77;
   var $78;
   var $79=(__stackBase__)+(32);
   var $80=(__stackBase__)+(40);
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $__bz;
   var $__wbuf=(__stackBase__)+(48);
   var $__wb=(__stackBase__)+(152);
   var $96=(__stackBase__)+(160);
   var $__wn=(__stackBase__)+(168);
   var $__we;
   var $__loc=(__stackBase__)+(176);
   var $97;
   var $98;
   var $__ct;
   var $__neg=(__stackBase__)+(184);
   var $99=(__stackBase__)+(192);
   var $__z;
   var $__w;
   var $100;
   $91=$this;
   var $101=(($__intl)&(1));
   $92=$101;
   $93=$__iob;
   $94=$__err;
   $95=$__v;
   var $102=$91;
   $__bz=100;
   var $103=(($__wbuf)|0);
   HEAP32[(($96)>>2)]=542;
   $88=$__wb;
   $89=$103;
   $90=$96;
   var $104=$88;
   var $105=$89;
   var $106=$90;
   $85=$104;
   $86=$105;
   $87=$106;
   var $107=$85;
   var $108=(($107)|0);
   var $109=$86;
   var $110=$87;
   $84=$110;
   var $111=$84;
   var $112=HEAP32[(($111)>>2)];
   $81=$108;
   $82=$109;
   $83=$112;
   var $113=$81;
   var $114=$82;
   var $115=$83;
   $78=$113;
   HEAP32[(($79)>>2)]=$114;
   HEAP32[(($80)>>2)]=$115;
   var $116=$78;
   var $117=$116;
   $77=$79;
   var $118=$77;
   var $119=HEAP32[(($118)>>2)];
   $71=$80;
   var $120=$71;
   var $121=HEAP32[(($120)>>2)];
   $74=$117;
   HEAP32[(($75)>>2)]=$119;
   HEAP32[(($76)>>2)]=$121;
   var $122=$74;
   var $123=(($122)|0);
   $73=$75;
   var $124=$73;
   var $125=HEAP32[(($124)>>2)];
   HEAP32[(($123)>>2)]=$125;
   var $126=(($122+4)|0);
   $72=$76;
   var $127=$72;
   var $128=HEAP32[(($127)>>2)];
   HEAP32[(($126)>>2)]=$128;
   var $129=(($__wbuf)|0);
   var $130=(($129+100)|0);
   $__we=$130;
   var $131=$93;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc, $131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 15; break; }
  case 2: 
   $60=$__loc;
   var $133=$60;
   var $134 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($133, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 16; break; }
  case 3: 
   var $135=$134;
   label = 4; break;
  case 4: 
   $__ct=$135;
   HEAP8[($__neg)]=0;
   var $137=$99;
   var $138=$__e;
   assert(4 % 1 === 0);HEAP32[(($137)>>2)]=HEAP32[(($138)>>2)];
   var $139=$92;
   var $140=(($139) & 1);
   var $141=$93;
   $59=$141;
   var $142=$59;
   var $143=(($142+4)|0);
   var $144=HEAP32[(($143)>>2)];
   label = 5; break;
  case 5: 
   var $146=$94;
   var $147=$__ct;
   var $148=$__we;
   var $149 = (function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $99, $140, $__loc, $144, $146, $__neg, $147, $__wb, $__wn, $148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 16; break; }
  case 6: 
   if ($149) { label = 7; break; } else { label = 27; break; }
  case 7: 
   var $152=$95;
   $56=$152;
   var $153=$56;
   $55=$153;
   var $154=$55;
   $36=$153;
   var $155=$36;
   var $156=(($155)|0);
   $35=$156;
   var $157=$35;
   var $158=$157;
   $34=$158;
   var $159=$34;
   var $160=(($159)|0);
   var $161=(($160)|0);
   var $162=$161;
   var $163=(($162)|0);
   var $164=$163;
   var $165=HEAP8[($164)];
   var $166=(($165)&(255));
   var $167=$166 & 1;
   var $168=(($167)|(0))!=0;
   if ($168) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $39=$153;
   var $170=$39;
   var $171=(($170)|0);
   $38=$171;
   var $172=$38;
   var $173=$172;
   $37=$173;
   var $174=$37;
   var $175=(($174)|0);
   var $176=(($175)|0);
   var $177=$176;
   var $178=(($177+8)|0);
   var $179=HEAP32[(($178)>>2)];
   HEAP8[($57)]=0;
   $40=$179;
   $41=$57;
   var $180=$41;
   var $181=HEAP8[($180)];
   var $182=$40;
   HEAP8[($182)]=$181;
   $44=$153;
   $45=0;
   var $183=$44;
   var $184=$45;
   var $185=(($183)|0);
   $43=$185;
   var $186=$43;
   var $187=$186;
   $42=$187;
   var $188=$42;
   var $189=(($188)|0);
   var $190=(($189)|0);
   var $191=$190;
   var $192=(($191+4)|0);
   HEAP32[(($192)>>2)]=$184;
   label = 10; break;
  case 9: 
   $48=$153;
   var $194=$48;
   var $195=(($194)|0);
   $47=$195;
   var $196=$47;
   var $197=$196;
   $46=$197;
   var $198=$46;
   var $199=(($198)|0);
   var $200=(($199)|0);
   var $201=$200;
   var $202=(($201+1)|0);
   var $203=(($202)|0);
   HEAP8[($58)]=0;
   $49=$203;
   $50=$58;
   var $204=$50;
   var $205=HEAP8[($204)];
   var $206=$49;
   HEAP8[($206)]=$205;
   $53=$153;
   $54=0;
   var $207=$53;
   var $208=$54;
   var $209=$208 << 1;
   var $210=(($209) & 255);
   var $211=(($207)|0);
   $52=$211;
   var $212=$52;
   var $213=$212;
   $51=$213;
   var $214=$51;
   var $215=(($214)|0);
   var $216=(($215)|0);
   var $217=$216;
   var $218=(($217)|0);
   var $219=$218;
   HEAP8[($219)]=$210;
   label = 10; break;
  case 10: 
   var $220=HEAP8[($__neg)];
   var $221=(($220) & 1);
   if ($221) { label = 11; break; } else { label = 17; break; }
  case 11: 
   var $223=$95;
   var $224=$__ct;
   $22=$224;
   $23=45;
   var $225=$22;
   var $226=$225;
   var $227=HEAP32[(($226)>>2)];
   var $228=(($227+28)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230=$23;
   var $231 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$229]($225, $230) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 16; break; }
  case 12: 
   label = 13; break;
  case 13: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($223, $231) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 16; break; }
  case 14: 
   label = 17; break;
  case 15: 
   var $235$0 = ___cxa_find_matching_catch(-1, -1); $235$1 = tempRet0;
   var $236=$235$0;
   $97=$236;
   var $237=$235$1;
   $98=$237;
   label = 49; break;
  case 16: 
   var $239$0 = ___cxa_find_matching_catch(-1, -1); $239$1 = tempRet0;
   var $240=$239$0;
   $97=$240;
   var $241=$239$1;
   $98=$241;
   __ZNSt3__16localeD2Ev($__loc);
   label = 49; break;
  case 17: 
   var $243=$__ct;
   $20=$243;
   $21=48;
   var $244=$20;
   var $245=$244;
   var $246=HEAP32[(($245)>>2)];
   var $247=(($246+28)|0);
   var $248=HEAP32[(($247)>>2)];
   var $249=$21;
   var $250 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$248]($244, $249) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 16; break; }
  case 18: 
   label = 19; break;
  case 19: 
   $__z=$250;
   $19=$__wb;
   var $252=$19;
   var $253=(($252)|0);
   $18=$253;
   var $254=$18;
   var $255=$254;
   $17=$255;
   var $256=$17;
   var $257=(($256)|0);
   var $258=HEAP32[(($257)>>2)];
   $__w=$258;
   label = 20; break;
  case 20: 
   var $260=$__w;
   var $261=HEAP32[(($__wn)>>2)];
   var $262=((($261)-(1))|0);
   var $263=(($260)>>>(0)) < (($262)>>>(0));
   if ($263) { label = 21; break; } else { label = 25; break; }
  case 21: 
   var $265=$__w;
   var $266=HEAP8[($265)];
   var $267=(($266 << 24) >> 24);
   var $268=$__z;
   var $269=(($268 << 24) >> 24);
   var $270=(($267)|(0))!=(($269)|(0));
   if ($270) { label = 22; break; } else { label = 23; break; }
  case 22: 
   label = 25; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $274=$__w;
   var $275=(($274+1)|0);
   $__w=$275;
   label = 20; break;
  case 25: 
   var $277=$95;
   var $278=$__w;
   var $279=HEAP32[(($__wn)>>2)];
   var $280 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($277, $278, $279) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 16; break; }
  case 26: 
   label = 27; break;
  case 27: 
   $15=$__b;
   $16=$__e;
   var $283=$15;
   var $284=$16;
   $13=$283;
   $14=$284;
   var $285=$13;
   $12=$285;
   var $286=$12;
   var $287=(($286)|0);
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288)|(0))!=0;
   if ($289) { label = 28; break; } else { label = 34; break; }
  case 28: 
   var $291=(($286)|0);
   var $292=HEAP32[(($291)>>2)];
   $11=$292;
   var $293=$11;
   var $294=(($293+12)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296=(($293+16)|0);
   var $297=HEAP32[(($296)>>2)];
   var $298=(($295)|(0))==(($297)|(0));
   if ($298) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $300=$293;
   var $301=HEAP32[(($300)>>2)];
   var $302=(($301+36)|0);
   var $303=HEAP32[(($302)>>2)];
   var $304 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$303]($293) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 16; break; }
  case 30: 
   $10=$304;
   label = 32; break;
  case 31: 
   var $306=(($293+12)|0);
   var $307=HEAP32[(($306)>>2)];
   var $308=HEAP8[($307)];
   $9=$308;
   var $309=$9;
   var $310=(($309)&(255));
   $10=$310;
   label = 32; break;
  case 32: 
   var $311=$10;
   $7=$311;
   $8=-1;
   var $312=$7;
   var $313=$8;
   var $314=(($312)|(0))==(($313)|(0));
   if ($314) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $316=(($286)|0);
   HEAP32[(($316)>>2)]=0;
   label = 34; break;
  case 34: 
   var $317=(($286)|0);
   var $318=HEAP32[(($317)>>2)];
   var $319=(($318)|(0))==0;
   var $320=(($319)&(1));
   var $321=$14;
   $6=$321;
   var $322=$6;
   var $323=(($322)|0);
   var $324=HEAP32[(($323)>>2)];
   var $325=(($324)|(0))!=0;
   if ($325) { label = 35; break; } else { label = 41; break; }
  case 35: 
   var $327=(($322)|0);
   var $328=HEAP32[(($327)>>2)];
   $5=$328;
   var $329=$5;
   var $330=(($329+12)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332=(($329+16)|0);
   var $333=HEAP32[(($332)>>2)];
   var $334=(($331)|(0))==(($333)|(0));
   if ($334) { label = 36; break; } else { label = 38; break; }
  case 36: 
   var $336=$329;
   var $337=HEAP32[(($336)>>2)];
   var $338=(($337+36)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$339]($329) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 16; break; }
  case 37: 
   $4=$340;
   label = 39; break;
  case 38: 
   var $342=(($329+12)|0);
   var $343=HEAP32[(($342)>>2)];
   var $344=HEAP8[($343)];
   $3=$344;
   var $345=$3;
   var $346=(($345)&(255));
   $4=$346;
   label = 39; break;
  case 39: 
   var $347=$4;
   $1=$347;
   $2=-1;
   var $348=$1;
   var $349=$2;
   var $350=(($348)|(0))==(($349)|(0));
   if ($350) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $352=(($322)|0);
   HEAP32[(($352)>>2)]=0;
   label = 41; break;
  case 41: 
   var $353=(($322)|0);
   var $354=HEAP32[(($353)>>2)];
   var $355=(($354)|(0))==0;
   var $356=(($355)&(1));
   var $357=(($320)|(0))==(($356)|(0));
   label = 42; break;
  case 42: 
   if ($357) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $360=$94;
   var $361=HEAP32[(($360)>>2)];
   var $362=$361 | 2;
   HEAP32[(($360)>>2)]=$362;
   label = 44; break;
  case 44: 
   var $364=$agg_result;
   var $365=$__b;
   assert(4 % 1 === 0);HEAP32[(($364)>>2)]=HEAP32[(($365)>>2)];
   $100=1;
   __ZNSt3__16localeD2Ev($__loc);
   $33=$__wb;
   var $366=$33;
   $32=$366;
   var $367=$32;
   $30=$367;
   $31=0;
   var $368=$30;
   var $369=(($368)|0);
   $29=$369;
   var $370=$29;
   var $371=$370;
   $28=$371;
   var $372=$28;
   var $373=(($372)|0);
   var $374=HEAP32[(($373)>>2)];
   $__tmp_i_i_i1=$374;
   var $375=$31;
   var $376=(($368)|0);
   $27=$376;
   var $377=$27;
   var $378=$377;
   $26=$378;
   var $379=$26;
   var $380=(($379)|0);
   HEAP32[(($380)>>2)]=$375;
   var $381=$__tmp_i_i_i1;
   var $382=(($381)|(0))!=0;
   if ($382) { label = 45; break; } else { label = 48; break; }
  case 45: 
   var $384=(($368)|0);
   $25=$384;
   var $385=$25;
   var $386=$385;
   $24=$386;
   var $387=$24;
   var $388=(($387+4)|0);
   var $389=HEAP32[(($388)>>2)];
   var $390=$__tmp_i_i_i1;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$389]($390) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 47; break; }
  case 46: 
   label = 48; break;
  case 47: 
   var $393$0 = ___cxa_find_matching_catch(-1, -1,0); $393$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 48: 
   STACKTOP = __stackBase__;
   return;
  case 49: 
   $70=$__wb;
   var $395=$70;
   $69=$395;
   var $396=$69;
   $67=$396;
   $68=0;
   var $397=$67;
   var $398=(($397)|0);
   $66=$398;
   var $399=$66;
   var $400=$399;
   $65=$400;
   var $401=$65;
   var $402=(($401)|0);
   var $403=HEAP32[(($402)>>2)];
   $__tmp_i_i_i=$403;
   var $404=$68;
   var $405=(($397)|0);
   $64=$405;
   var $406=$64;
   var $407=$406;
   $63=$407;
   var $408=$63;
   var $409=(($408)|0);
   HEAP32[(($409)>>2)]=$404;
   var $410=$__tmp_i_i_i;
   var $411=(($410)|(0))!=0;
   if ($411) { label = 50; break; } else { label = 53; break; }
  case 50: 
   var $413=(($397)|0);
   $62=$413;
   var $414=$62;
   var $415=$414;
   $61=$415;
   var $416=$61;
   var $417=(($416+4)|0);
   var $418=HEAP32[(($417)>>2)];
   var $419=$__tmp_i_i_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$418]($419) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 51; break; } else { label = 52; break; }
  case 51: 
   label = 53; break;
  case 52: 
   var $422$0 = ___cxa_find_matching_catch(-1, -1,0); $422$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 53: 
   label = 54; break;
  case 54: 
   var $424=$97;
   var $425=$98;
   var $426$0=$424;
   var $426$1=0;
   var $427$0=$426$0;
   var $427$1=$425;
   ___resumeException($427$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10=__stackBase__;
   var $11;
   var $12;
   var $13=(__stackBase__)+(8);
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $__sz;
   var $__cap;
   var $__n;
   var $__p;
   var $54=(__stackBase__)+(16);
   $51=$this;
   $52=$__first;
   $53=$__last;
   var $55=$51;
   $50=$55;
   var $56=$50;
   $49=$56;
   var $57=$49;
   var $58=(($57)|0);
   $48=$58;
   var $59=$48;
   var $60=$59;
   $47=$60;
   var $61=$47;
   var $62=(($61)|0);
   var $63=(($62)|0);
   var $64=$63;
   var $65=(($64)|0);
   var $66=$65;
   var $67=HEAP8[($66)];
   var $68=(($67)&(255));
   var $69=$68 & 1;
   var $70=(($69)|(0))!=0;
   if ($70) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $43=$56;
   var $72=$43;
   var $73=(($72)|0);
   $42=$73;
   var $74=$42;
   var $75=$74;
   $41=$75;
   var $76=$41;
   var $77=(($76)|0);
   var $78=(($77)|0);
   var $79=$78;
   var $80=(($79+4)|0);
   var $81=HEAP32[(($80)>>2)];
   var $96 = $81;label = 4; break;
  case 3: 
   $46=$56;
   var $83=$46;
   var $84=(($83)|0);
   $45=$84;
   var $85=$45;
   var $86=$85;
   $44=$86;
   var $87=$44;
   var $88=(($87)|0);
   var $89=(($88)|0);
   var $90=$89;
   var $91=(($90)|0);
   var $92=$91;
   var $93=HEAP8[($92)];
   var $94=(($93)&(255));
   var $95=$94 >> 1;
   var $96 = $95;label = 4; break;
  case 4: 
   var $96;
   $__sz=$96;
   $7=$55;
   var $97=$7;
   $6=$97;
   var $98=$6;
   var $99=(($98)|0);
   $5=$99;
   var $100=$5;
   var $101=$100;
   $4=$101;
   var $102=$4;
   var $103=(($102)|0);
   var $104=(($103)|0);
   var $105=$104;
   var $106=(($105)|0);
   var $107=$106;
   var $108=HEAP8[($107)];
   var $109=(($108)&(255));
   var $110=$109 & 1;
   var $111=(($110)|(0))!=0;
   if ($111) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $3=$97;
   var $113=$3;
   var $114=(($113)|0);
   $2=$114;
   var $115=$2;
   var $116=$115;
   $1=$116;
   var $117=$1;
   var $118=(($117)|0);
   var $119=(($118)|0);
   var $120=$119;
   var $121=(($120)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=$122 & -2;
   var $125 = $123;label = 7; break;
  case 6: 
   var $125 = 11;label = 7; break;
  case 7: 
   var $125;
   var $126=((($125)-(1))|0);
   $__cap=$126;
   var $127=$52;
   var $128=$53;
   $11=$127;
   $12=$128;
   var $129=$11;
   var $130=$12;
   var $tmp_i=$10;
   var $tmp1_i=$13;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $8=$129;
   $9=$130;
   var $131=$9;
   var $132=$8;
   var $133=$131;
   var $134=$132;
   var $135=((($133)-($134))|0);
   $__n=$135;
   var $136=$__n;
   var $137=(($136)|(0))!=0;
   if ($137) { label = 8; break; } else { label = 21; break; }
  case 8: 
   var $139=$__cap;
   var $140=$__sz;
   var $141=((($139)-($140))|0);
   var $142=$__n;
   var $143=(($141)>>>(0)) < (($142)>>>(0));
   if ($143) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $145=$__cap;
   var $146=$__sz;
   var $147=$__n;
   var $148=((($146)+($147))|0);
   var $149=$__cap;
   var $150=((($148)-($149))|0);
   var $151=$__sz;
   var $152=$__sz;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($55, $145, $150, $151, $152, 0, 0);
   label = 10; break;
  case 10: 
   $23=$55;
   var $154=$23;
   $22=$154;
   var $155=$22;
   var $156=(($155)|0);
   $21=$156;
   var $157=$21;
   var $158=$157;
   $20=$158;
   var $159=$20;
   var $160=(($159)|0);
   var $161=(($160)|0);
   var $162=$161;
   var $163=(($162)|0);
   var $164=$163;
   var $165=HEAP8[($164)];
   var $166=(($165)&(255));
   var $167=$166 & 1;
   var $168=(($167)|(0))!=0;
   if ($168) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $16=$154;
   var $170=$16;
   var $171=(($170)|0);
   $15=$171;
   var $172=$15;
   var $173=$172;
   $14=$173;
   var $174=$14;
   var $175=(($174)|0);
   var $176=(($175)|0);
   var $177=$176;
   var $178=(($177+8)|0);
   var $179=HEAP32[(($178)>>2)];
   var $191 = $179;label = 13; break;
  case 12: 
   $19=$154;
   var $181=$19;
   var $182=(($181)|0);
   $18=$182;
   var $183=$18;
   var $184=$183;
   $17=$184;
   var $185=$17;
   var $186=(($185)|0);
   var $187=(($186)|0);
   var $188=$187;
   var $189=(($188+1)|0);
   var $190=(($189)|0);
   var $191 = $190;label = 13; break;
  case 13: 
   var $191;
   var $192=$__sz;
   var $193=(($191+$192)|0);
   $__p=$193;
   label = 14; break;
  case 14: 
   var $195=$52;
   var $196=$53;
   var $197=(($195)|(0))!=(($196)|(0));
   if ($197) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $199=$__p;
   var $200=$52;
   $24=$199;
   $25=$200;
   var $201=$25;
   var $202=HEAP8[($201)];
   var $203=$24;
   HEAP8[($203)]=$202;
   label = 16; break;
  case 16: 
   var $205=$__p;
   var $206=(($205+1)|0);
   $__p=$206;
   var $207=$52;
   var $208=(($207+1)|0);
   $52=$208;
   label = 14; break;
  case 17: 
   var $210=$__p;
   HEAP8[($54)]=0;
   $26=$210;
   $27=$54;
   var $211=$27;
   var $212=HEAP8[($211)];
   var $213=$26;
   HEAP8[($213)]=$212;
   var $214=$__sz;
   var $215=$__n;
   var $216=((($214)+($215))|0);
   $39=$55;
   $40=$216;
   var $217=$39;
   $38=$217;
   var $218=$38;
   var $219=(($218)|0);
   $37=$219;
   var $220=$37;
   var $221=$220;
   $36=$221;
   var $222=$36;
   var $223=(($222)|0);
   var $224=(($223)|0);
   var $225=$224;
   var $226=(($225)|0);
   var $227=$226;
   var $228=HEAP8[($227)];
   var $229=(($228)&(255));
   var $230=$229 & 1;
   var $231=(($230)|(0))!=0;
   if ($231) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $233=$40;
   $30=$217;
   $31=$233;
   var $234=$30;
   var $235=$31;
   var $236=(($234)|0);
   $29=$236;
   var $237=$29;
   var $238=$237;
   $28=$238;
   var $239=$28;
   var $240=(($239)|0);
   var $241=(($240)|0);
   var $242=$241;
   var $243=(($242+4)|0);
   HEAP32[(($243)>>2)]=$235;
   label = 20; break;
  case 19: 
   var $245=$40;
   $34=$217;
   $35=$245;
   var $246=$34;
   var $247=$35;
   var $248=$247 << 1;
   var $249=(($248) & 255);
   var $250=(($246)|0);
   $33=$250;
   var $251=$33;
   var $252=$251;
   $32=$252;
   var $253=$32;
   var $254=(($253)|0);
   var $255=(($254)|0);
   var $256=$255;
   var $257=(($256)|0);
   var $258=$257;
   HEAP8[($258)]=$249;
   label = 20; break;
  case 20: 
   label = 21; break;
  case 21: 
   STACKTOP = __stackBase__;
   return $55;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 528)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16=__stackBase__;
   var $17;
   var $18;
   var $19=(__stackBase__)+(8);
   var $20;
   var $21;
   var $22;
   var $__a_i_i_i56;
   var $__i_i_i_i57;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46=(__stackBase__)+(16);
   var $47=(__stackBase__)+(24);
   var $48;
   var $49;
   var $50=(__stackBase__)+(32);
   var $51;
   var $52;
   var $53=(__stackBase__)+(40);
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69=(__stackBase__)+(48);
   var $70;
   var $71;
   var $72=(__stackBase__)+(56);
   var $73;
   var $74;
   var $75;
   var $__a_i_i_i47;
   var $__i_i_i_i48;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99=(__stackBase__)+(64);
   var $100=(__stackBase__)+(72);
   var $101;
   var $102;
   var $103=(__stackBase__)+(80);
   var $104;
   var $105;
   var $106=(__stackBase__)+(88);
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $122;
   var $123;
   var $124=(__stackBase__)+(96);
   var $125;
   var $126;
   var $127=(__stackBase__)+(104);
   var $128;
   var $129;
   var $130;
   var $__a_i_i_i38;
   var $__i_i_i_i39;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154=(__stackBase__)+(112);
   var $155=(__stackBase__)+(120);
   var $156;
   var $157;
   var $158=(__stackBase__)+(128);
   var $159;
   var $160;
   var $161=(__stackBase__)+(136);
   var $162;
   var $163;
   var $164;
   var $165;
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177=(__stackBase__)+(144);
   var $178;
   var $179;
   var $180=(__stackBase__)+(152);
   var $181;
   var $182;
   var $183;
   var $__a_i_i_i29;
   var $__i_i_i_i30;
   var $184;
   var $185;
   var $186;
   var $187;
   var $188;
   var $189;
   var $190;
   var $191;
   var $192;
   var $193;
   var $194;
   var $195;
   var $196;
   var $197;
   var $198;
   var $199;
   var $200;
   var $201;
   var $202;
   var $203;
   var $204;
   var $205;
   var $206;
   var $207=(__stackBase__)+(160);
   var $208=(__stackBase__)+(168);
   var $209;
   var $210;
   var $211=(__stackBase__)+(176);
   var $212;
   var $213;
   var $214=(__stackBase__)+(184);
   var $215;
   var $216;
   var $217;
   var $218;
   var $219;
   var $220;
   var $221;
   var $222;
   var $223;
   var $224;
   var $225;
   var $226;
   var $227;
   var $228;
   var $229;
   var $230;
   var $231;
   var $232;
   var $233=(__stackBase__)+(192);
   var $234;
   var $235;
   var $236=(__stackBase__)+(200);
   var $237;
   var $238;
   var $239;
   var $__a_i_i_i20;
   var $__i_i_i_i21;
   var $240;
   var $241;
   var $242;
   var $243;
   var $244;
   var $245;
   var $246;
   var $247;
   var $248;
   var $249;
   var $250;
   var $251;
   var $252;
   var $253;
   var $254;
   var $255;
   var $256;
   var $257;
   var $258;
   var $259;
   var $260;
   var $261;
   var $262;
   var $263=(__stackBase__)+(208);
   var $264=(__stackBase__)+(216);
   var $265;
   var $266;
   var $267=(__stackBase__)+(224);
   var $268;
   var $269;
   var $270=(__stackBase__)+(232);
   var $271;
   var $272;
   var $273;
   var $274;
   var $275;
   var $276;
   var $277;
   var $278;
   var $279;
   var $280;
   var $281;
   var $282;
   var $283;
   var $284;
   var $285;
   var $286=(__stackBase__)+(240);
   var $287;
   var $288;
   var $289=(__stackBase__)+(248);
   var $290;
   var $291;
   var $292;
   var $__a_i_i_i11;
   var $__i_i_i_i12;
   var $293;
   var $294;
   var $295;
   var $296;
   var $297;
   var $298;
   var $299;
   var $300;
   var $301;
   var $302;
   var $303;
   var $304;
   var $305;
   var $306;
   var $307;
   var $308;
   var $309;
   var $310;
   var $311;
   var $312;
   var $313;
   var $314;
   var $315;
   var $316=(__stackBase__)+(256);
   var $317=(__stackBase__)+(264);
   var $318;
   var $319;
   var $320=(__stackBase__)+(272);
   var $321;
   var $322;
   var $323=(__stackBase__)+(280);
   var $324;
   var $325;
   var $326;
   var $327;
   var $328;
   var $329;
   var $330;
   var $331;
   var $332;
   var $333;
   var $334;
   var $335;
   var $336;
   var $337;
   var $338;
   var $339;
   var $340;
   var $341=(__stackBase__)+(288);
   var $342;
   var $343;
   var $344=(__stackBase__)+(296);
   var $345;
   var $346;
   var $347;
   var $__a_i_i_i2;
   var $__i_i_i_i3;
   var $348;
   var $349;
   var $350;
   var $351;
   var $352;
   var $353;
   var $354;
   var $355;
   var $356;
   var $357;
   var $358;
   var $359;
   var $360;
   var $361;
   var $362;
   var $363;
   var $364;
   var $365;
   var $366;
   var $367;
   var $368;
   var $369;
   var $370;
   var $371=(__stackBase__)+(304);
   var $372=(__stackBase__)+(312);
   var $373;
   var $374;
   var $375=(__stackBase__)+(320);
   var $376;
   var $377;
   var $378=(__stackBase__)+(328);
   var $379;
   var $380;
   var $381;
   var $382;
   var $383;
   var $384;
   var $385;
   var $386;
   var $387;
   var $388;
   var $389;
   var $390;
   var $391;
   var $392;
   var $393;
   var $394=(__stackBase__)+(336);
   var $395;
   var $396;
   var $397=(__stackBase__)+(344);
   var $398;
   var $399;
   var $400;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $401;
   var $402;
   var $403;
   var $404;
   var $405;
   var $406;
   var $407;
   var $408;
   var $409;
   var $410;
   var $411;
   var $412;
   var $413;
   var $414;
   var $415;
   var $416;
   var $417;
   var $418;
   var $419;
   var $420;
   var $421;
   var $422;
   var $423;
   var $424=(__stackBase__)+(352);
   var $425=(__stackBase__)+(360);
   var $426;
   var $427;
   var $428=(__stackBase__)+(368);
   var $429;
   var $430;
   var $431=(__stackBase__)+(376);
   var $432;
   var $433;
   var $434;
   var $435;
   var $436;
   var $437;
   var $438;
   var $439;
   var $440;
   var $441;
   var $442;
   var $443;
   var $444;
   var $__mp;
   var $445=(__stackBase__)+(384);
   var $446=(__stackBase__)+(392);
   var $447=(__stackBase__)+(408);
   var $448=(__stackBase__)+(424);
   var $449=(__stackBase__)+(440);
   var $__mp1;
   var $450=(__stackBase__)+(456);
   var $451=(__stackBase__)+(464);
   var $452=(__stackBase__)+(480);
   var $453=(__stackBase__)+(496);
   var $454=(__stackBase__)+(512);
   var $455=(($__intl)&(1));
   $435=$455;
   $436=$__loc;
   $437=$__pat;
   $438=$__dp;
   $439=$__ts;
   $440=$__grp;
   $441=$__sym;
   $442=$__psn;
   $443=$__nsn;
   $444=$__fd;
   var $456=$435;
   var $457=(($456) & 1);
   if ($457) { label = 2; break; } else { label = 35; break; }
  case 2: 
   var $459=$436;
   $434=$459;
   var $460=$434;
   var $461=__ZNKSt3__16locale9use_facetERNS0_2idE($460, 20328);
   var $462=$461;
   $__mp=$462;
   var $463=$437;
   var $464=$__mp;
   $433=$464;
   var $465=$433;
   var $466=$465;
   var $467=HEAP32[(($466)>>2)];
   var $468=(($467+44)|0);
   var $469=HEAP32[(($468)>>2)];
   FUNCTION_TABLE[$469]($445, $465);
   var $470=$463;
   var $471=$445;
   assert(4 % 1 === 0);HEAP8[($470)]=HEAP8[($471)];HEAP8[((($470)+(1))|0)]=HEAP8[((($471)+(1))|0)];HEAP8[((($470)+(2))|0)]=HEAP8[((($471)+(2))|0)];HEAP8[((($470)+(3))|0)]=HEAP8[((($471)+(3))|0)];
   var $472=$443;
   var $473=$__mp;
   $432=$473;
   var $474=$432;
   var $475=$474;
   var $476=HEAP32[(($475)>>2)];
   var $477=(($476+32)|0);
   var $478=HEAP32[(($477)>>2)];
   FUNCTION_TABLE[$478]($446, $474);
   $429=$472;
   $430=$446;
   var $479=$429;
   var $480=$430;
   var $tmp_i=$428;
   var $tmp1_i=$431;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $426=$479;
   $427=$480;
   var $481=$426;
   $423=$481;
   var $482=$423;
   $422=$482;
   var $483=$422;
   $403=$482;
   var $484=$403;
   var $485=(($484)|0);
   $402=$485;
   var $486=$402;
   var $487=$486;
   $401=$487;
   var $488=$401;
   var $489=(($488)|0);
   var $490=(($489)|0);
   var $491=$490;
   var $492=(($491)|0);
   var $493=$492;
   var $494=HEAP8[($493)];
   var $495=(($494)&(255));
   var $496=$495 & 1;
   var $497=(($496)|(0))!=0;
   if ($497) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $406=$482;
   var $499=$406;
   var $500=(($499)|0);
   $405=$500;
   var $501=$405;
   var $502=$501;
   $404=$502;
   var $503=$404;
   var $504=(($503)|0);
   var $505=(($504)|0);
   var $506=$505;
   var $507=(($506+8)|0);
   var $508=HEAP32[(($507)>>2)];
   HEAP8[($424)]=0;
   $407=$508;
   $408=$424;
   var $509=$408;
   var $510=HEAP8[($509)];
   var $511=$407;
   HEAP8[($511)]=$510;
   $411=$482;
   $412=0;
   var $512=$411;
   var $513=$412;
   var $514=(($512)|0);
   $410=$514;
   var $515=$410;
   var $516=$515;
   $409=$516;
   var $517=$409;
   var $518=(($517)|0);
   var $519=(($518)|0);
   var $520=$519;
   var $521=(($520+4)|0);
   HEAP32[(($521)>>2)]=$513;
   label = 5; break;
  case 4: 
   $415=$482;
   var $523=$415;
   var $524=(($523)|0);
   $414=$524;
   var $525=$414;
   var $526=$525;
   $413=$526;
   var $527=$413;
   var $528=(($527)|0);
   var $529=(($528)|0);
   var $530=$529;
   var $531=(($530+1)|0);
   var $532=(($531)|0);
   HEAP8[($425)]=0;
   $416=$532;
   $417=$425;
   var $533=$417;
   var $534=HEAP8[($533)];
   var $535=$416;
   HEAP8[($535)]=$534;
   $420=$482;
   $421=0;
   var $536=$420;
   var $537=$421;
   var $538=$537 << 1;
   var $539=(($538) & 255);
   var $540=(($536)|0);
   $419=$540;
   var $541=$419;
   var $542=$541;
   $418=$542;
   var $543=$418;
   var $544=(($543)|0);
   var $545=(($544)|0);
   var $546=$545;
   var $547=(($546)|0);
   var $548=$547;
   HEAP8[($548)]=$539;
   label = 5; break;
  case 5: 
   $380=$481;
   var $549=$380;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($549, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $551$0 = ___cxa_find_matching_catch(-1, -1,0); $551$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 7: 
   var $552=(($481)|0);
   $382=$552;
   var $553=$382;
   var $554=$553;
   $381=$554;
   var $555=$381;
   var $556=(($555)|0);
   var $557=$427;
   var $558=(($557)|0);
   $384=$558;
   var $559=$384;
   var $560=$559;
   $383=$560;
   var $561=$383;
   var $562=(($561)|0);
   var $563=$556;
   var $564=$562;
   assert(12 % 1 === 0);HEAP32[(($563)>>2)]=HEAP32[(($564)>>2)];HEAP32[((($563)+(4))>>2)]=HEAP32[((($564)+(4))>>2)];HEAP32[((($563)+(8))>>2)]=HEAP32[((($564)+(8))>>2)];
   var $565=$427;
   $395=$481;
   $396=$565;
   var $566=$395;
   var $567=$396;
   var $tmp_i_i_i=$394;
   var $tmp1_i_i_i=$397;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
   $392=$566;
   $393=$567;
   var $568=$392;
   $391=$568;
   var $569=$391;
   var $570=(($569)|0);
   $390=$570;
   var $571=$390;
   var $572=$571;
   $389=$572;
   var $573=$389;
   var $574=$573;
   var $575=$393;
   $387=$575;
   var $576=$387;
   var $577=(($576)|0);
   $386=$577;
   var $578=$386;
   var $579=$578;
   $385=$579;
   var $580=$385;
   var $581=$580;
   $388=$581;
   var $582=$388;
   var $583=$427;
   $400=$583;
   var $584=$400;
   var $585=(($584)|0);
   $399=$585;
   var $586=$399;
   var $587=$586;
   $398=$587;
   var $588=$398;
   var $589=(($588)|0);
   var $590=(($589)|0);
   var $591=$590;
   var $592=(($591)|0);
   $__a_i_i_i=$592;
   $__i_i_i_i=0;
   label = 8; break;
  case 8: 
   var $594=$__i_i_i_i;
   var $595=(($594)>>>(0)) < 3;
   if ($595) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $597=$__i_i_i_i;
   var $598=$__a_i_i_i;
   var $599=(($598+($597<<2))|0);
   HEAP32[(($599)>>2)]=0;
   var $600=$__i_i_i_i;
   var $601=((($600)+(1))|0);
   $__i_i_i_i=$601;
   label = 8; break;
  case 10: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($446);
   var $602=$442;
   var $603=$__mp;
   $379=$603;
   var $604=$379;
   var $605=$604;
   var $606=HEAP32[(($605)>>2)];
   var $607=(($606+28)|0);
   var $608=HEAP32[(($607)>>2)];
   FUNCTION_TABLE[$608]($447, $604);
   $376=$602;
   $377=$447;
   var $609=$376;
   var $610=$377;
   var $tmp_i4=$375;
   var $tmp1_i5=$378;
   assert(1 % 1 === 0);HEAP8[($tmp_i4)]=HEAP8[($tmp1_i5)];
   $373=$609;
   $374=$610;
   var $611=$373;
   $370=$611;
   var $612=$370;
   $369=$612;
   var $613=$369;
   $350=$612;
   var $614=$350;
   var $615=(($614)|0);
   $349=$615;
   var $616=$349;
   var $617=$616;
   $348=$617;
   var $618=$348;
   var $619=(($618)|0);
   var $620=(($619)|0);
   var $621=$620;
   var $622=(($621)|0);
   var $623=$622;
   var $624=HEAP8[($623)];
   var $625=(($624)&(255));
   var $626=$625 & 1;
   var $627=(($626)|(0))!=0;
   if ($627) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $353=$612;
   var $629=$353;
   var $630=(($629)|0);
   $352=$630;
   var $631=$352;
   var $632=$631;
   $351=$632;
   var $633=$351;
   var $634=(($633)|0);
   var $635=(($634)|0);
   var $636=$635;
   var $637=(($636+8)|0);
   var $638=HEAP32[(($637)>>2)];
   HEAP8[($371)]=0;
   $354=$638;
   $355=$371;
   var $639=$355;
   var $640=HEAP8[($639)];
   var $641=$354;
   HEAP8[($641)]=$640;
   $358=$612;
   $359=0;
   var $642=$358;
   var $643=$359;
   var $644=(($642)|0);
   $357=$644;
   var $645=$357;
   var $646=$645;
   $356=$646;
   var $647=$356;
   var $648=(($647)|0);
   var $649=(($648)|0);
   var $650=$649;
   var $651=(($650+4)|0);
   HEAP32[(($651)>>2)]=$643;
   label = 13; break;
  case 12: 
   $362=$612;
   var $653=$362;
   var $654=(($653)|0);
   $361=$654;
   var $655=$361;
   var $656=$655;
   $360=$656;
   var $657=$360;
   var $658=(($657)|0);
   var $659=(($658)|0);
   var $660=$659;
   var $661=(($660+1)|0);
   var $662=(($661)|0);
   HEAP8[($372)]=0;
   $363=$662;
   $364=$372;
   var $663=$364;
   var $664=HEAP8[($663)];
   var $665=$363;
   HEAP8[($665)]=$664;
   $367=$612;
   $368=0;
   var $666=$367;
   var $667=$368;
   var $668=$667 << 1;
   var $669=(($668) & 255);
   var $670=(($666)|0);
   $366=$670;
   var $671=$366;
   var $672=$671;
   $365=$672;
   var $673=$365;
   var $674=(($673)|0);
   var $675=(($674)|0);
   var $676=$675;
   var $677=(($676)|0);
   var $678=$677;
   HEAP8[($678)]=$669;
   label = 13; break;
  case 13: 
   $327=$611;
   var $679=$327;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($679, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $681$0 = ___cxa_find_matching_catch(-1, -1,0); $681$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 15: 
   var $682=(($611)|0);
   $329=$682;
   var $683=$329;
   var $684=$683;
   $328=$684;
   var $685=$328;
   var $686=(($685)|0);
   var $687=$374;
   var $688=(($687)|0);
   $331=$688;
   var $689=$331;
   var $690=$689;
   $330=$690;
   var $691=$330;
   var $692=(($691)|0);
   var $693=$686;
   var $694=$692;
   assert(12 % 1 === 0);HEAP32[(($693)>>2)]=HEAP32[(($694)>>2)];HEAP32[((($693)+(4))>>2)]=HEAP32[((($694)+(4))>>2)];HEAP32[((($693)+(8))>>2)]=HEAP32[((($694)+(8))>>2)];
   var $695=$374;
   $342=$611;
   $343=$695;
   var $696=$342;
   var $697=$343;
   var $tmp_i_i_i7=$341;
   var $tmp1_i_i_i8=$344;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i7)]=HEAP8[($tmp1_i_i_i8)];
   $339=$696;
   $340=$697;
   var $698=$339;
   $338=$698;
   var $699=$338;
   var $700=(($699)|0);
   $337=$700;
   var $701=$337;
   var $702=$701;
   $336=$702;
   var $703=$336;
   var $704=$703;
   var $705=$340;
   $334=$705;
   var $706=$334;
   var $707=(($706)|0);
   $333=$707;
   var $708=$333;
   var $709=$708;
   $332=$709;
   var $710=$332;
   var $711=$710;
   $335=$711;
   var $712=$335;
   var $713=$374;
   $347=$713;
   var $714=$347;
   var $715=(($714)|0);
   $346=$715;
   var $716=$346;
   var $717=$716;
   $345=$717;
   var $718=$345;
   var $719=(($718)|0);
   var $720=(($719)|0);
   var $721=$720;
   var $722=(($721)|0);
   $__a_i_i_i2=$722;
   $__i_i_i_i3=0;
   label = 16; break;
  case 16: 
   var $724=$__i_i_i_i3;
   var $725=(($724)>>>(0)) < 3;
   if ($725) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $727=$__i_i_i_i3;
   var $728=$__a_i_i_i2;
   var $729=(($728+($727<<2))|0);
   HEAP32[(($729)>>2)]=0;
   var $730=$__i_i_i_i3;
   var $731=((($730)+(1))|0);
   $__i_i_i_i3=$731;
   label = 16; break;
  case 18: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($447);
   var $732=$__mp;
   $326=$732;
   var $733=$326;
   var $734=$733;
   var $735=HEAP32[(($734)>>2)];
   var $736=(($735+12)|0);
   var $737=HEAP32[(($736)>>2)];
   var $738=FUNCTION_TABLE[$737]($733);
   var $739=$438;
   HEAP8[($739)]=$738;
   var $740=$__mp;
   $325=$740;
   var $741=$325;
   var $742=$741;
   var $743=HEAP32[(($742)>>2)];
   var $744=(($743+16)|0);
   var $745=HEAP32[(($744)>>2)];
   var $746=FUNCTION_TABLE[$745]($741);
   var $747=$439;
   HEAP8[($747)]=$746;
   var $748=$440;
   var $749=$__mp;
   $324=$749;
   var $750=$324;
   var $751=$750;
   var $752=HEAP32[(($751)>>2)];
   var $753=(($752+20)|0);
   var $754=HEAP32[(($753)>>2)];
   FUNCTION_TABLE[$754]($448, $750);
   $321=$748;
   $322=$448;
   var $755=$321;
   var $756=$322;
   var $tmp_i13=$320;
   var $tmp1_i14=$323;
   assert(1 % 1 === 0);HEAP8[($tmp_i13)]=HEAP8[($tmp1_i14)];
   $318=$755;
   $319=$756;
   var $757=$318;
   $315=$757;
   var $758=$315;
   $314=$758;
   var $759=$314;
   $295=$758;
   var $760=$295;
   var $761=(($760)|0);
   $294=$761;
   var $762=$294;
   var $763=$762;
   $293=$763;
   var $764=$293;
   var $765=(($764)|0);
   var $766=(($765)|0);
   var $767=$766;
   var $768=(($767)|0);
   var $769=$768;
   var $770=HEAP8[($769)];
   var $771=(($770)&(255));
   var $772=$771 & 1;
   var $773=(($772)|(0))!=0;
   if ($773) { label = 19; break; } else { label = 20; break; }
  case 19: 
   $298=$758;
   var $775=$298;
   var $776=(($775)|0);
   $297=$776;
   var $777=$297;
   var $778=$777;
   $296=$778;
   var $779=$296;
   var $780=(($779)|0);
   var $781=(($780)|0);
   var $782=$781;
   var $783=(($782+8)|0);
   var $784=HEAP32[(($783)>>2)];
   HEAP8[($316)]=0;
   $299=$784;
   $300=$316;
   var $785=$300;
   var $786=HEAP8[($785)];
   var $787=$299;
   HEAP8[($787)]=$786;
   $303=$758;
   $304=0;
   var $788=$303;
   var $789=$304;
   var $790=(($788)|0);
   $302=$790;
   var $791=$302;
   var $792=$791;
   $301=$792;
   var $793=$301;
   var $794=(($793)|0);
   var $795=(($794)|0);
   var $796=$795;
   var $797=(($796+4)|0);
   HEAP32[(($797)>>2)]=$789;
   label = 21; break;
  case 20: 
   $307=$758;
   var $799=$307;
   var $800=(($799)|0);
   $306=$800;
   var $801=$306;
   var $802=$801;
   $305=$802;
   var $803=$305;
   var $804=(($803)|0);
   var $805=(($804)|0);
   var $806=$805;
   var $807=(($806+1)|0);
   var $808=(($807)|0);
   HEAP8[($317)]=0;
   $308=$808;
   $309=$317;
   var $809=$309;
   var $810=HEAP8[($809)];
   var $811=$308;
   HEAP8[($811)]=$810;
   $312=$758;
   $313=0;
   var $812=$312;
   var $813=$313;
   var $814=$813 << 1;
   var $815=(($814) & 255);
   var $816=(($812)|0);
   $311=$816;
   var $817=$311;
   var $818=$817;
   $310=$818;
   var $819=$310;
   var $820=(($819)|0);
   var $821=(($820)|0);
   var $822=$821;
   var $823=(($822)|0);
   var $824=$823;
   HEAP8[($824)]=$815;
   label = 21; break;
  case 21: 
   $272=$757;
   var $825=$272;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($825, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $827$0 = ___cxa_find_matching_catch(-1, -1,0); $827$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 23: 
   var $828=(($757)|0);
   $274=$828;
   var $829=$274;
   var $830=$829;
   $273=$830;
   var $831=$273;
   var $832=(($831)|0);
   var $833=$319;
   var $834=(($833)|0);
   $276=$834;
   var $835=$276;
   var $836=$835;
   $275=$836;
   var $837=$275;
   var $838=(($837)|0);
   var $839=$832;
   var $840=$838;
   assert(12 % 1 === 0);HEAP32[(($839)>>2)]=HEAP32[(($840)>>2)];HEAP32[((($839)+(4))>>2)]=HEAP32[((($840)+(4))>>2)];HEAP32[((($839)+(8))>>2)]=HEAP32[((($840)+(8))>>2)];
   var $841=$319;
   $287=$757;
   $288=$841;
   var $842=$287;
   var $843=$288;
   var $tmp_i_i_i16=$286;
   var $tmp1_i_i_i17=$289;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i16)]=HEAP8[($tmp1_i_i_i17)];
   $284=$842;
   $285=$843;
   var $844=$284;
   $283=$844;
   var $845=$283;
   var $846=(($845)|0);
   $282=$846;
   var $847=$282;
   var $848=$847;
   $281=$848;
   var $849=$281;
   var $850=$849;
   var $851=$285;
   $279=$851;
   var $852=$279;
   var $853=(($852)|0);
   $278=$853;
   var $854=$278;
   var $855=$854;
   $277=$855;
   var $856=$277;
   var $857=$856;
   $280=$857;
   var $858=$280;
   var $859=$319;
   $292=$859;
   var $860=$292;
   var $861=(($860)|0);
   $291=$861;
   var $862=$291;
   var $863=$862;
   $290=$863;
   var $864=$290;
   var $865=(($864)|0);
   var $866=(($865)|0);
   var $867=$866;
   var $868=(($867)|0);
   $__a_i_i_i11=$868;
   $__i_i_i_i12=0;
   label = 24; break;
  case 24: 
   var $870=$__i_i_i_i12;
   var $871=(($870)>>>(0)) < 3;
   if ($871) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $873=$__i_i_i_i12;
   var $874=$__a_i_i_i11;
   var $875=(($874+($873<<2))|0);
   HEAP32[(($875)>>2)]=0;
   var $876=$__i_i_i_i12;
   var $877=((($876)+(1))|0);
   $__i_i_i_i12=$877;
   label = 24; break;
  case 26: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($448);
   var $878=$441;
   var $879=$__mp;
   $271=$879;
   var $880=$271;
   var $881=$880;
   var $882=HEAP32[(($881)>>2)];
   var $883=(($882+24)|0);
   var $884=HEAP32[(($883)>>2)];
   FUNCTION_TABLE[$884]($449, $880);
   $268=$878;
   $269=$449;
   var $885=$268;
   var $886=$269;
   var $tmp_i22=$267;
   var $tmp1_i23=$270;
   assert(1 % 1 === 0);HEAP8[($tmp_i22)]=HEAP8[($tmp1_i23)];
   $265=$885;
   $266=$886;
   var $887=$265;
   $262=$887;
   var $888=$262;
   $261=$888;
   var $889=$261;
   $242=$888;
   var $890=$242;
   var $891=(($890)|0);
   $241=$891;
   var $892=$241;
   var $893=$892;
   $240=$893;
   var $894=$240;
   var $895=(($894)|0);
   var $896=(($895)|0);
   var $897=$896;
   var $898=(($897)|0);
   var $899=$898;
   var $900=HEAP8[($899)];
   var $901=(($900)&(255));
   var $902=$901 & 1;
   var $903=(($902)|(0))!=0;
   if ($903) { label = 27; break; } else { label = 28; break; }
  case 27: 
   $245=$888;
   var $905=$245;
   var $906=(($905)|0);
   $244=$906;
   var $907=$244;
   var $908=$907;
   $243=$908;
   var $909=$243;
   var $910=(($909)|0);
   var $911=(($910)|0);
   var $912=$911;
   var $913=(($912+8)|0);
   var $914=HEAP32[(($913)>>2)];
   HEAP8[($263)]=0;
   $246=$914;
   $247=$263;
   var $915=$247;
   var $916=HEAP8[($915)];
   var $917=$246;
   HEAP8[($917)]=$916;
   $250=$888;
   $251=0;
   var $918=$250;
   var $919=$251;
   var $920=(($918)|0);
   $249=$920;
   var $921=$249;
   var $922=$921;
   $248=$922;
   var $923=$248;
   var $924=(($923)|0);
   var $925=(($924)|0);
   var $926=$925;
   var $927=(($926+4)|0);
   HEAP32[(($927)>>2)]=$919;
   label = 29; break;
  case 28: 
   $254=$888;
   var $929=$254;
   var $930=(($929)|0);
   $253=$930;
   var $931=$253;
   var $932=$931;
   $252=$932;
   var $933=$252;
   var $934=(($933)|0);
   var $935=(($934)|0);
   var $936=$935;
   var $937=(($936+1)|0);
   var $938=(($937)|0);
   HEAP8[($264)]=0;
   $255=$938;
   $256=$264;
   var $939=$256;
   var $940=HEAP8[($939)];
   var $941=$255;
   HEAP8[($941)]=$940;
   $259=$888;
   $260=0;
   var $942=$259;
   var $943=$260;
   var $944=$943 << 1;
   var $945=(($944) & 255);
   var $946=(($942)|0);
   $258=$946;
   var $947=$258;
   var $948=$947;
   $257=$948;
   var $949=$257;
   var $950=(($949)|0);
   var $951=(($950)|0);
   var $952=$951;
   var $953=(($952)|0);
   var $954=$953;
   HEAP8[($954)]=$945;
   label = 29; break;
  case 29: 
   $219=$887;
   var $955=$219;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($955, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 30; break; }
  case 30: 
   var $957$0 = ___cxa_find_matching_catch(-1, -1,0); $957$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 31: 
   var $958=(($887)|0);
   $221=$958;
   var $959=$221;
   var $960=$959;
   $220=$960;
   var $961=$220;
   var $962=(($961)|0);
   var $963=$266;
   var $964=(($963)|0);
   $223=$964;
   var $965=$223;
   var $966=$965;
   $222=$966;
   var $967=$222;
   var $968=(($967)|0);
   var $969=$962;
   var $970=$968;
   assert(12 % 1 === 0);HEAP32[(($969)>>2)]=HEAP32[(($970)>>2)];HEAP32[((($969)+(4))>>2)]=HEAP32[((($970)+(4))>>2)];HEAP32[((($969)+(8))>>2)]=HEAP32[((($970)+(8))>>2)];
   var $971=$266;
   $234=$887;
   $235=$971;
   var $972=$234;
   var $973=$235;
   var $tmp_i_i_i25=$233;
   var $tmp1_i_i_i26=$236;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i25)]=HEAP8[($tmp1_i_i_i26)];
   $231=$972;
   $232=$973;
   var $974=$231;
   $230=$974;
   var $975=$230;
   var $976=(($975)|0);
   $229=$976;
   var $977=$229;
   var $978=$977;
   $228=$978;
   var $979=$228;
   var $980=$979;
   var $981=$232;
   $226=$981;
   var $982=$226;
   var $983=(($982)|0);
   $225=$983;
   var $984=$225;
   var $985=$984;
   $224=$985;
   var $986=$224;
   var $987=$986;
   $227=$987;
   var $988=$227;
   var $989=$266;
   $239=$989;
   var $990=$239;
   var $991=(($990)|0);
   $238=$991;
   var $992=$238;
   var $993=$992;
   $237=$993;
   var $994=$237;
   var $995=(($994)|0);
   var $996=(($995)|0);
   var $997=$996;
   var $998=(($997)|0);
   $__a_i_i_i20=$998;
   $__i_i_i_i21=0;
   label = 32; break;
  case 32: 
   var $1000=$__i_i_i_i21;
   var $1001=(($1000)>>>(0)) < 3;
   if ($1001) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $1003=$__i_i_i_i21;
   var $1004=$__a_i_i_i20;
   var $1005=(($1004+($1003<<2))|0);
   HEAP32[(($1005)>>2)]=0;
   var $1006=$__i_i_i_i21;
   var $1007=((($1006)+(1))|0);
   $__i_i_i_i21=$1007;
   label = 32; break;
  case 34: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($449);
   var $1008=$__mp;
   $218=$1008;
   var $1009=$218;
   var $1010=$1009;
   var $1011=HEAP32[(($1010)>>2)];
   var $1012=(($1011+36)|0);
   var $1013=HEAP32[(($1012)>>2)];
   var $1014=FUNCTION_TABLE[$1013]($1009);
   var $1015=$444;
   HEAP32[(($1015)>>2)]=$1014;
   label = 68; break;
  case 35: 
   var $1017=$436;
   $217=$1017;
   var $1018=$217;
   var $1019=__ZNKSt3__16locale9use_facetERNS0_2idE($1018, 20336);
   var $1020=$1019;
   $__mp1=$1020;
   var $1021=$437;
   var $1022=$__mp1;
   $216=$1022;
   var $1023=$216;
   var $1024=$1023;
   var $1025=HEAP32[(($1024)>>2)];
   var $1026=(($1025+44)|0);
   var $1027=HEAP32[(($1026)>>2)];
   FUNCTION_TABLE[$1027]($450, $1023);
   var $1028=$1021;
   var $1029=$450;
   assert(4 % 1 === 0);HEAP8[($1028)]=HEAP8[($1029)];HEAP8[((($1028)+(1))|0)]=HEAP8[((($1029)+(1))|0)];HEAP8[((($1028)+(2))|0)]=HEAP8[((($1029)+(2))|0)];HEAP8[((($1028)+(3))|0)]=HEAP8[((($1029)+(3))|0)];
   var $1030=$443;
   var $1031=$__mp1;
   $215=$1031;
   var $1032=$215;
   var $1033=$1032;
   var $1034=HEAP32[(($1033)>>2)];
   var $1035=(($1034+32)|0);
   var $1036=HEAP32[(($1035)>>2)];
   FUNCTION_TABLE[$1036]($451, $1032);
   $212=$1030;
   $213=$451;
   var $1037=$212;
   var $1038=$213;
   var $tmp_i31=$211;
   var $tmp1_i32=$214;
   assert(1 % 1 === 0);HEAP8[($tmp_i31)]=HEAP8[($tmp1_i32)];
   $209=$1037;
   $210=$1038;
   var $1039=$209;
   $206=$1039;
   var $1040=$206;
   $205=$1040;
   var $1041=$205;
   $186=$1040;
   var $1042=$186;
   var $1043=(($1042)|0);
   $185=$1043;
   var $1044=$185;
   var $1045=$1044;
   $184=$1045;
   var $1046=$184;
   var $1047=(($1046)|0);
   var $1048=(($1047)|0);
   var $1049=$1048;
   var $1050=(($1049)|0);
   var $1051=$1050;
   var $1052=HEAP8[($1051)];
   var $1053=(($1052)&(255));
   var $1054=$1053 & 1;
   var $1055=(($1054)|(0))!=0;
   if ($1055) { label = 36; break; } else { label = 37; break; }
  case 36: 
   $189=$1040;
   var $1057=$189;
   var $1058=(($1057)|0);
   $188=$1058;
   var $1059=$188;
   var $1060=$1059;
   $187=$1060;
   var $1061=$187;
   var $1062=(($1061)|0);
   var $1063=(($1062)|0);
   var $1064=$1063;
   var $1065=(($1064+8)|0);
   var $1066=HEAP32[(($1065)>>2)];
   HEAP8[($207)]=0;
   $190=$1066;
   $191=$207;
   var $1067=$191;
   var $1068=HEAP8[($1067)];
   var $1069=$190;
   HEAP8[($1069)]=$1068;
   $194=$1040;
   $195=0;
   var $1070=$194;
   var $1071=$195;
   var $1072=(($1070)|0);
   $193=$1072;
   var $1073=$193;
   var $1074=$1073;
   $192=$1074;
   var $1075=$192;
   var $1076=(($1075)|0);
   var $1077=(($1076)|0);
   var $1078=$1077;
   var $1079=(($1078+4)|0);
   HEAP32[(($1079)>>2)]=$1071;
   label = 38; break;
  case 37: 
   $198=$1040;
   var $1081=$198;
   var $1082=(($1081)|0);
   $197=$1082;
   var $1083=$197;
   var $1084=$1083;
   $196=$1084;
   var $1085=$196;
   var $1086=(($1085)|0);
   var $1087=(($1086)|0);
   var $1088=$1087;
   var $1089=(($1088+1)|0);
   var $1090=(($1089)|0);
   HEAP8[($208)]=0;
   $199=$1090;
   $200=$208;
   var $1091=$200;
   var $1092=HEAP8[($1091)];
   var $1093=$199;
   HEAP8[($1093)]=$1092;
   $203=$1040;
   $204=0;
   var $1094=$203;
   var $1095=$204;
   var $1096=$1095 << 1;
   var $1097=(($1096) & 255);
   var $1098=(($1094)|0);
   $202=$1098;
   var $1099=$202;
   var $1100=$1099;
   $201=$1100;
   var $1101=$201;
   var $1102=(($1101)|0);
   var $1103=(($1102)|0);
   var $1104=$1103;
   var $1105=(($1104)|0);
   var $1106=$1105;
   HEAP8[($1106)]=$1097;
   label = 38; break;
  case 38: 
   $163=$1039;
   var $1107=$163;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1107, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 40; break; } else { label = 39; break; }
  case 39: 
   var $1109$0 = ___cxa_find_matching_catch(-1, -1,0); $1109$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 40: 
   var $1110=(($1039)|0);
   $165=$1110;
   var $1111=$165;
   var $1112=$1111;
   $164=$1112;
   var $1113=$164;
   var $1114=(($1113)|0);
   var $1115=$210;
   var $1116=(($1115)|0);
   $167=$1116;
   var $1117=$167;
   var $1118=$1117;
   $166=$1118;
   var $1119=$166;
   var $1120=(($1119)|0);
   var $1121=$1114;
   var $1122=$1120;
   assert(12 % 1 === 0);HEAP32[(($1121)>>2)]=HEAP32[(($1122)>>2)];HEAP32[((($1121)+(4))>>2)]=HEAP32[((($1122)+(4))>>2)];HEAP32[((($1121)+(8))>>2)]=HEAP32[((($1122)+(8))>>2)];
   var $1123=$210;
   $178=$1039;
   $179=$1123;
   var $1124=$178;
   var $1125=$179;
   var $tmp_i_i_i34=$177;
   var $tmp1_i_i_i35=$180;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i34)]=HEAP8[($tmp1_i_i_i35)];
   $175=$1124;
   $176=$1125;
   var $1126=$175;
   $174=$1126;
   var $1127=$174;
   var $1128=(($1127)|0);
   $173=$1128;
   var $1129=$173;
   var $1130=$1129;
   $172=$1130;
   var $1131=$172;
   var $1132=$1131;
   var $1133=$176;
   $170=$1133;
   var $1134=$170;
   var $1135=(($1134)|0);
   $169=$1135;
   var $1136=$169;
   var $1137=$1136;
   $168=$1137;
   var $1138=$168;
   var $1139=$1138;
   $171=$1139;
   var $1140=$171;
   var $1141=$210;
   $183=$1141;
   var $1142=$183;
   var $1143=(($1142)|0);
   $182=$1143;
   var $1144=$182;
   var $1145=$1144;
   $181=$1145;
   var $1146=$181;
   var $1147=(($1146)|0);
   var $1148=(($1147)|0);
   var $1149=$1148;
   var $1150=(($1149)|0);
   $__a_i_i_i29=$1150;
   $__i_i_i_i30=0;
   label = 41; break;
  case 41: 
   var $1152=$__i_i_i_i30;
   var $1153=(($1152)>>>(0)) < 3;
   if ($1153) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $1155=$__i_i_i_i30;
   var $1156=$__a_i_i_i29;
   var $1157=(($1156+($1155<<2))|0);
   HEAP32[(($1157)>>2)]=0;
   var $1158=$__i_i_i_i30;
   var $1159=((($1158)+(1))|0);
   $__i_i_i_i30=$1159;
   label = 41; break;
  case 43: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($451);
   var $1160=$442;
   var $1161=$__mp1;
   $162=$1161;
   var $1162=$162;
   var $1163=$1162;
   var $1164=HEAP32[(($1163)>>2)];
   var $1165=(($1164+28)|0);
   var $1166=HEAP32[(($1165)>>2)];
   FUNCTION_TABLE[$1166]($452, $1162);
   $159=$1160;
   $160=$452;
   var $1167=$159;
   var $1168=$160;
   var $tmp_i40=$158;
   var $tmp1_i41=$161;
   assert(1 % 1 === 0);HEAP8[($tmp_i40)]=HEAP8[($tmp1_i41)];
   $156=$1167;
   $157=$1168;
   var $1169=$156;
   $153=$1169;
   var $1170=$153;
   $152=$1170;
   var $1171=$152;
   $133=$1170;
   var $1172=$133;
   var $1173=(($1172)|0);
   $132=$1173;
   var $1174=$132;
   var $1175=$1174;
   $131=$1175;
   var $1176=$131;
   var $1177=(($1176)|0);
   var $1178=(($1177)|0);
   var $1179=$1178;
   var $1180=(($1179)|0);
   var $1181=$1180;
   var $1182=HEAP8[($1181)];
   var $1183=(($1182)&(255));
   var $1184=$1183 & 1;
   var $1185=(($1184)|(0))!=0;
   if ($1185) { label = 44; break; } else { label = 45; break; }
  case 44: 
   $136=$1170;
   var $1187=$136;
   var $1188=(($1187)|0);
   $135=$1188;
   var $1189=$135;
   var $1190=$1189;
   $134=$1190;
   var $1191=$134;
   var $1192=(($1191)|0);
   var $1193=(($1192)|0);
   var $1194=$1193;
   var $1195=(($1194+8)|0);
   var $1196=HEAP32[(($1195)>>2)];
   HEAP8[($154)]=0;
   $137=$1196;
   $138=$154;
   var $1197=$138;
   var $1198=HEAP8[($1197)];
   var $1199=$137;
   HEAP8[($1199)]=$1198;
   $141=$1170;
   $142=0;
   var $1200=$141;
   var $1201=$142;
   var $1202=(($1200)|0);
   $140=$1202;
   var $1203=$140;
   var $1204=$1203;
   $139=$1204;
   var $1205=$139;
   var $1206=(($1205)|0);
   var $1207=(($1206)|0);
   var $1208=$1207;
   var $1209=(($1208+4)|0);
   HEAP32[(($1209)>>2)]=$1201;
   label = 46; break;
  case 45: 
   $145=$1170;
   var $1211=$145;
   var $1212=(($1211)|0);
   $144=$1212;
   var $1213=$144;
   var $1214=$1213;
   $143=$1214;
   var $1215=$143;
   var $1216=(($1215)|0);
   var $1217=(($1216)|0);
   var $1218=$1217;
   var $1219=(($1218+1)|0);
   var $1220=(($1219)|0);
   HEAP8[($155)]=0;
   $146=$1220;
   $147=$155;
   var $1221=$147;
   var $1222=HEAP8[($1221)];
   var $1223=$146;
   HEAP8[($1223)]=$1222;
   $150=$1170;
   $151=0;
   var $1224=$150;
   var $1225=$151;
   var $1226=$1225 << 1;
   var $1227=(($1226) & 255);
   var $1228=(($1224)|0);
   $149=$1228;
   var $1229=$149;
   var $1230=$1229;
   $148=$1230;
   var $1231=$148;
   var $1232=(($1231)|0);
   var $1233=(($1232)|0);
   var $1234=$1233;
   var $1235=(($1234)|0);
   var $1236=$1235;
   HEAP8[($1236)]=$1227;
   label = 46; break;
  case 46: 
   $110=$1169;
   var $1237=$110;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1237, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $1239$0 = ___cxa_find_matching_catch(-1, -1,0); $1239$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 48: 
   var $1240=(($1169)|0);
   $112=$1240;
   var $1241=$112;
   var $1242=$1241;
   $111=$1242;
   var $1243=$111;
   var $1244=(($1243)|0);
   var $1245=$157;
   var $1246=(($1245)|0);
   $114=$1246;
   var $1247=$114;
   var $1248=$1247;
   $113=$1248;
   var $1249=$113;
   var $1250=(($1249)|0);
   var $1251=$1244;
   var $1252=$1250;
   assert(12 % 1 === 0);HEAP32[(($1251)>>2)]=HEAP32[(($1252)>>2)];HEAP32[((($1251)+(4))>>2)]=HEAP32[((($1252)+(4))>>2)];HEAP32[((($1251)+(8))>>2)]=HEAP32[((($1252)+(8))>>2)];
   var $1253=$157;
   $125=$1169;
   $126=$1253;
   var $1254=$125;
   var $1255=$126;
   var $tmp_i_i_i43=$124;
   var $tmp1_i_i_i44=$127;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i43)]=HEAP8[($tmp1_i_i_i44)];
   $122=$1254;
   $123=$1255;
   var $1256=$122;
   $121=$1256;
   var $1257=$121;
   var $1258=(($1257)|0);
   $120=$1258;
   var $1259=$120;
   var $1260=$1259;
   $119=$1260;
   var $1261=$119;
   var $1262=$1261;
   var $1263=$123;
   $117=$1263;
   var $1264=$117;
   var $1265=(($1264)|0);
   $116=$1265;
   var $1266=$116;
   var $1267=$1266;
   $115=$1267;
   var $1268=$115;
   var $1269=$1268;
   $118=$1269;
   var $1270=$118;
   var $1271=$157;
   $130=$1271;
   var $1272=$130;
   var $1273=(($1272)|0);
   $129=$1273;
   var $1274=$129;
   var $1275=$1274;
   $128=$1275;
   var $1276=$128;
   var $1277=(($1276)|0);
   var $1278=(($1277)|0);
   var $1279=$1278;
   var $1280=(($1279)|0);
   $__a_i_i_i38=$1280;
   $__i_i_i_i39=0;
   label = 49; break;
  case 49: 
   var $1282=$__i_i_i_i39;
   var $1283=(($1282)>>>(0)) < 3;
   if ($1283) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $1285=$__i_i_i_i39;
   var $1286=$__a_i_i_i38;
   var $1287=(($1286+($1285<<2))|0);
   HEAP32[(($1287)>>2)]=0;
   var $1288=$__i_i_i_i39;
   var $1289=((($1288)+(1))|0);
   $__i_i_i_i39=$1289;
   label = 49; break;
  case 51: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($452);
   var $1290=$__mp1;
   $109=$1290;
   var $1291=$109;
   var $1292=$1291;
   var $1293=HEAP32[(($1292)>>2)];
   var $1294=(($1293+12)|0);
   var $1295=HEAP32[(($1294)>>2)];
   var $1296=FUNCTION_TABLE[$1295]($1291);
   var $1297=$438;
   HEAP8[($1297)]=$1296;
   var $1298=$__mp1;
   $108=$1298;
   var $1299=$108;
   var $1300=$1299;
   var $1301=HEAP32[(($1300)>>2)];
   var $1302=(($1301+16)|0);
   var $1303=HEAP32[(($1302)>>2)];
   var $1304=FUNCTION_TABLE[$1303]($1299);
   var $1305=$439;
   HEAP8[($1305)]=$1304;
   var $1306=$440;
   var $1307=$__mp1;
   $107=$1307;
   var $1308=$107;
   var $1309=$1308;
   var $1310=HEAP32[(($1309)>>2)];
   var $1311=(($1310+20)|0);
   var $1312=HEAP32[(($1311)>>2)];
   FUNCTION_TABLE[$1312]($453, $1308);
   $104=$1306;
   $105=$453;
   var $1313=$104;
   var $1314=$105;
   var $tmp_i49=$103;
   var $tmp1_i50=$106;
   assert(1 % 1 === 0);HEAP8[($tmp_i49)]=HEAP8[($tmp1_i50)];
   $101=$1313;
   $102=$1314;
   var $1315=$101;
   $98=$1315;
   var $1316=$98;
   $97=$1316;
   var $1317=$97;
   $78=$1316;
   var $1318=$78;
   var $1319=(($1318)|0);
   $77=$1319;
   var $1320=$77;
   var $1321=$1320;
   $76=$1321;
   var $1322=$76;
   var $1323=(($1322)|0);
   var $1324=(($1323)|0);
   var $1325=$1324;
   var $1326=(($1325)|0);
   var $1327=$1326;
   var $1328=HEAP8[($1327)];
   var $1329=(($1328)&(255));
   var $1330=$1329 & 1;
   var $1331=(($1330)|(0))!=0;
   if ($1331) { label = 52; break; } else { label = 53; break; }
  case 52: 
   $81=$1316;
   var $1333=$81;
   var $1334=(($1333)|0);
   $80=$1334;
   var $1335=$80;
   var $1336=$1335;
   $79=$1336;
   var $1337=$79;
   var $1338=(($1337)|0);
   var $1339=(($1338)|0);
   var $1340=$1339;
   var $1341=(($1340+8)|0);
   var $1342=HEAP32[(($1341)>>2)];
   HEAP8[($99)]=0;
   $82=$1342;
   $83=$99;
   var $1343=$83;
   var $1344=HEAP8[($1343)];
   var $1345=$82;
   HEAP8[($1345)]=$1344;
   $86=$1316;
   $87=0;
   var $1346=$86;
   var $1347=$87;
   var $1348=(($1346)|0);
   $85=$1348;
   var $1349=$85;
   var $1350=$1349;
   $84=$1350;
   var $1351=$84;
   var $1352=(($1351)|0);
   var $1353=(($1352)|0);
   var $1354=$1353;
   var $1355=(($1354+4)|0);
   HEAP32[(($1355)>>2)]=$1347;
   label = 54; break;
  case 53: 
   $90=$1316;
   var $1357=$90;
   var $1358=(($1357)|0);
   $89=$1358;
   var $1359=$89;
   var $1360=$1359;
   $88=$1360;
   var $1361=$88;
   var $1362=(($1361)|0);
   var $1363=(($1362)|0);
   var $1364=$1363;
   var $1365=(($1364+1)|0);
   var $1366=(($1365)|0);
   HEAP8[($100)]=0;
   $91=$1366;
   $92=$100;
   var $1367=$92;
   var $1368=HEAP8[($1367)];
   var $1369=$91;
   HEAP8[($1369)]=$1368;
   $95=$1316;
   $96=0;
   var $1370=$95;
   var $1371=$96;
   var $1372=$1371 << 1;
   var $1373=(($1372) & 255);
   var $1374=(($1370)|0);
   $94=$1374;
   var $1375=$94;
   var $1376=$1375;
   $93=$1376;
   var $1377=$93;
   var $1378=(($1377)|0);
   var $1379=(($1378)|0);
   var $1380=$1379;
   var $1381=(($1380)|0);
   var $1382=$1381;
   HEAP8[($1382)]=$1373;
   label = 54; break;
  case 54: 
   $55=$1315;
   var $1383=$55;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1383, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 56; break; } else { label = 55; break; }
  case 55: 
   var $1385$0 = ___cxa_find_matching_catch(-1, -1,0); $1385$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 56: 
   var $1386=(($1315)|0);
   $57=$1386;
   var $1387=$57;
   var $1388=$1387;
   $56=$1388;
   var $1389=$56;
   var $1390=(($1389)|0);
   var $1391=$102;
   var $1392=(($1391)|0);
   $59=$1392;
   var $1393=$59;
   var $1394=$1393;
   $58=$1394;
   var $1395=$58;
   var $1396=(($1395)|0);
   var $1397=$1390;
   var $1398=$1396;
   assert(12 % 1 === 0);HEAP32[(($1397)>>2)]=HEAP32[(($1398)>>2)];HEAP32[((($1397)+(4))>>2)]=HEAP32[((($1398)+(4))>>2)];HEAP32[((($1397)+(8))>>2)]=HEAP32[((($1398)+(8))>>2)];
   var $1399=$102;
   $70=$1315;
   $71=$1399;
   var $1400=$70;
   var $1401=$71;
   var $tmp_i_i_i52=$69;
   var $tmp1_i_i_i53=$72;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i52)]=HEAP8[($tmp1_i_i_i53)];
   $67=$1400;
   $68=$1401;
   var $1402=$67;
   $66=$1402;
   var $1403=$66;
   var $1404=(($1403)|0);
   $65=$1404;
   var $1405=$65;
   var $1406=$1405;
   $64=$1406;
   var $1407=$64;
   var $1408=$1407;
   var $1409=$68;
   $62=$1409;
   var $1410=$62;
   var $1411=(($1410)|0);
   $61=$1411;
   var $1412=$61;
   var $1413=$1412;
   $60=$1413;
   var $1414=$60;
   var $1415=$1414;
   $63=$1415;
   var $1416=$63;
   var $1417=$102;
   $75=$1417;
   var $1418=$75;
   var $1419=(($1418)|0);
   $74=$1419;
   var $1420=$74;
   var $1421=$1420;
   $73=$1421;
   var $1422=$73;
   var $1423=(($1422)|0);
   var $1424=(($1423)|0);
   var $1425=$1424;
   var $1426=(($1425)|0);
   $__a_i_i_i47=$1426;
   $__i_i_i_i48=0;
   label = 57; break;
  case 57: 
   var $1428=$__i_i_i_i48;
   var $1429=(($1428)>>>(0)) < 3;
   if ($1429) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $1431=$__i_i_i_i48;
   var $1432=$__a_i_i_i47;
   var $1433=(($1432+($1431<<2))|0);
   HEAP32[(($1433)>>2)]=0;
   var $1434=$__i_i_i_i48;
   var $1435=((($1434)+(1))|0);
   $__i_i_i_i48=$1435;
   label = 57; break;
  case 59: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($453);
   var $1436=$441;
   var $1437=$__mp1;
   $54=$1437;
   var $1438=$54;
   var $1439=$1438;
   var $1440=HEAP32[(($1439)>>2)];
   var $1441=(($1440+24)|0);
   var $1442=HEAP32[(($1441)>>2)];
   FUNCTION_TABLE[$1442]($454, $1438);
   $51=$1436;
   $52=$454;
   var $1443=$51;
   var $1444=$52;
   var $tmp_i58=$50;
   var $tmp1_i59=$53;
   assert(1 % 1 === 0);HEAP8[($tmp_i58)]=HEAP8[($tmp1_i59)];
   $48=$1443;
   $49=$1444;
   var $1445=$48;
   $45=$1445;
   var $1446=$45;
   $44=$1446;
   var $1447=$44;
   $25=$1446;
   var $1448=$25;
   var $1449=(($1448)|0);
   $24=$1449;
   var $1450=$24;
   var $1451=$1450;
   $23=$1451;
   var $1452=$23;
   var $1453=(($1452)|0);
   var $1454=(($1453)|0);
   var $1455=$1454;
   var $1456=(($1455)|0);
   var $1457=$1456;
   var $1458=HEAP8[($1457)];
   var $1459=(($1458)&(255));
   var $1460=$1459 & 1;
   var $1461=(($1460)|(0))!=0;
   if ($1461) { label = 60; break; } else { label = 61; break; }
  case 60: 
   $28=$1446;
   var $1463=$28;
   var $1464=(($1463)|0);
   $27=$1464;
   var $1465=$27;
   var $1466=$1465;
   $26=$1466;
   var $1467=$26;
   var $1468=(($1467)|0);
   var $1469=(($1468)|0);
   var $1470=$1469;
   var $1471=(($1470+8)|0);
   var $1472=HEAP32[(($1471)>>2)];
   HEAP8[($46)]=0;
   $29=$1472;
   $30=$46;
   var $1473=$30;
   var $1474=HEAP8[($1473)];
   var $1475=$29;
   HEAP8[($1475)]=$1474;
   $33=$1446;
   $34=0;
   var $1476=$33;
   var $1477=$34;
   var $1478=(($1476)|0);
   $32=$1478;
   var $1479=$32;
   var $1480=$1479;
   $31=$1480;
   var $1481=$31;
   var $1482=(($1481)|0);
   var $1483=(($1482)|0);
   var $1484=$1483;
   var $1485=(($1484+4)|0);
   HEAP32[(($1485)>>2)]=$1477;
   label = 62; break;
  case 61: 
   $37=$1446;
   var $1487=$37;
   var $1488=(($1487)|0);
   $36=$1488;
   var $1489=$36;
   var $1490=$1489;
   $35=$1490;
   var $1491=$35;
   var $1492=(($1491)|0);
   var $1493=(($1492)|0);
   var $1494=$1493;
   var $1495=(($1494+1)|0);
   var $1496=(($1495)|0);
   HEAP8[($47)]=0;
   $38=$1496;
   $39=$47;
   var $1497=$39;
   var $1498=HEAP8[($1497)];
   var $1499=$38;
   HEAP8[($1499)]=$1498;
   $42=$1446;
   $43=0;
   var $1500=$42;
   var $1501=$43;
   var $1502=$1501 << 1;
   var $1503=(($1502) & 255);
   var $1504=(($1500)|0);
   $41=$1504;
   var $1505=$41;
   var $1506=$1505;
   $40=$1506;
   var $1507=$40;
   var $1508=(($1507)|0);
   var $1509=(($1508)|0);
   var $1510=$1509;
   var $1511=(($1510)|0);
   var $1512=$1511;
   HEAP8[($1512)]=$1503;
   label = 62; break;
  case 62: 
   $2=$1445;
   var $1513=$2;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1513, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 64; break; } else { label = 63; break; }
  case 63: 
   var $1515$0 = ___cxa_find_matching_catch(-1, -1,0); $1515$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 64: 
   var $1516=(($1445)|0);
   $4=$1516;
   var $1517=$4;
   var $1518=$1517;
   $3=$1518;
   var $1519=$3;
   var $1520=(($1519)|0);
   var $1521=$49;
   var $1522=(($1521)|0);
   $6=$1522;
   var $1523=$6;
   var $1524=$1523;
   $5=$1524;
   var $1525=$5;
   var $1526=(($1525)|0);
   var $1527=$1520;
   var $1528=$1526;
   assert(12 % 1 === 0);HEAP32[(($1527)>>2)]=HEAP32[(($1528)>>2)];HEAP32[((($1527)+(4))>>2)]=HEAP32[((($1528)+(4))>>2)];HEAP32[((($1527)+(8))>>2)]=HEAP32[((($1528)+(8))>>2)];
   var $1529=$49;
   $17=$1445;
   $18=$1529;
   var $1530=$17;
   var $1531=$18;
   var $tmp_i_i_i61=$16;
   var $tmp1_i_i_i62=$19;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i61)]=HEAP8[($tmp1_i_i_i62)];
   $14=$1530;
   $15=$1531;
   var $1532=$14;
   $13=$1532;
   var $1533=$13;
   var $1534=(($1533)|0);
   $12=$1534;
   var $1535=$12;
   var $1536=$1535;
   $11=$1536;
   var $1537=$11;
   var $1538=$1537;
   var $1539=$15;
   $9=$1539;
   var $1540=$9;
   var $1541=(($1540)|0);
   $8=$1541;
   var $1542=$8;
   var $1543=$1542;
   $7=$1543;
   var $1544=$7;
   var $1545=$1544;
   $10=$1545;
   var $1546=$10;
   var $1547=$49;
   $22=$1547;
   var $1548=$22;
   var $1549=(($1548)|0);
   $21=$1549;
   var $1550=$21;
   var $1551=$1550;
   $20=$1551;
   var $1552=$20;
   var $1553=(($1552)|0);
   var $1554=(($1553)|0);
   var $1555=$1554;
   var $1556=(($1555)|0);
   $__a_i_i_i56=$1556;
   $__i_i_i_i57=0;
   label = 65; break;
  case 65: 
   var $1558=$__i_i_i_i57;
   var $1559=(($1558)>>>(0)) < 3;
   if ($1559) { label = 66; break; } else { label = 67; break; }
  case 66: 
   var $1561=$__i_i_i_i57;
   var $1562=$__a_i_i_i56;
   var $1563=(($1562+($1561<<2))|0);
   HEAP32[(($1563)>>2)]=0;
   var $1564=$__i_i_i_i57;
   var $1565=((($1564)+(1))|0);
   $__i_i_i_i57=$1565;
   label = 65; break;
  case 67: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($454);
   var $1566=$__mp1;
   $1=$1566;
   var $1567=$1;
   var $1568=$1567;
   var $1569=HEAP32[(($1568)>>2)];
   var $1570=(($1569+36)|0);
   var $1571=HEAP32[(($1570)>>2)];
   var $1572=FUNCTION_TABLE[$1571]($1567);
   var $1573=$444;
   HEAP32[(($1573)>>2)]=$1572;
   label = 68; break;
  case 68: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__t_i;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13=__stackBase__;
   var $14=(__stackBase__)+(8);
   var $15;
   var $16;
   var $17=(__stackBase__)+(16);
   var $18=(__stackBase__)+(24);
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $__tmp_i_i;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $__t_i_i;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $__tmp_i_i_i;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $__owns;
   var $__cur_cap;
   var $__new_cap;
   var $__n_off;
   var $__t;
   var $78=(__stackBase__)+(32);
   var $79=(__stackBase__)+(40);
   $75=$__b;
   $76=$__n;
   $77=$__e;
   var $80=$75;
   $74=$80;
   var $81=$74;
   var $82=(($81)|0);
   $73=$82;
   var $83=$73;
   var $84=$83;
   $72=$84;
   var $85=$72;
   var $86=(($85+4)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87)|(0))!=(((542))|(0));
   var $89=(($88)&(1));
   $__owns=$89;
   var $90=$77;
   var $91=HEAP32[(($90)>>2)];
   var $92=$75;
   $55=$92;
   var $93=$55;
   var $94=(($93)|0);
   $54=$94;
   var $95=$54;
   var $96=$95;
   $53=$96;
   var $97=$53;
   var $98=(($97)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=$91;
   var $101=$99;
   var $102=((($100)-($101))|0);
   var $103=$102;
   $__cur_cap=$103;
   var $104=$__cur_cap;
   var $105=Math.floor(2147483647);
   var $106=(($104)>>>(0)) < (($105)>>>(0));
   if ($106) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $108=$__cur_cap;
   var $109=($108<<1);
   var $112 = $109;label = 4; break;
  case 3: 
   var $112 = -1;label = 4; break;
  case 4: 
   var $112;
   $__new_cap=$112;
   var $113=$76;
   var $114=HEAP32[(($113)>>2)];
   var $115=$75;
   $31=$115;
   var $116=$31;
   var $117=(($116)|0);
   $30=$117;
   var $118=$30;
   var $119=$118;
   $29=$119;
   var $120=$29;
   var $121=(($120)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=$114;
   var $124=$122;
   var $125=((($123)-($124))|0);
   $__n_off=$125;
   var $126=$__owns;
   var $127=(($126) & 1);
   if ($127) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $129=$75;
   $3=$129;
   var $130=$3;
   var $131=(($130)|0);
   $2=$131;
   var $132=$2;
   var $133=$132;
   $1=$133;
   var $134=$1;
   var $135=(($134)|0);
   var $136=HEAP32[(($135)>>2)];
   var $139 = $136;label = 7; break;
  case 6: 
   var $139 = 0;label = 7; break;
  case 7: 
   var $139;
   var $140=$__new_cap;
   var $141=_realloc($139, $140);
   $__t=$141;
   var $142=$__t;
   var $143=(($142)|(0))==0;
   if ($143) { label = 8; break; } else { label = 9; break; }
  case 8: 
   __ZSt17__throw_bad_allocv();
   label = 9; break;
  case 9: 
   var $146=$__owns;
   var $147=(($146) & 1);
   if ($147) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $149=$75;
   $8=$149;
   var $150=$8;
   var $151=(($150)|0);
   $7=$151;
   var $152=$7;
   var $153=$152;
   $6=$153;
   var $154=$6;
   var $155=(($154)|0);
   var $156=HEAP32[(($155)>>2)];
   $__t_i=$156;
   var $157=(($150)|0);
   $5=$157;
   var $158=$5;
   var $159=$158;
   $4=$159;
   var $160=$4;
   var $161=(($160)|0);
   HEAP32[(($161)>>2)]=0;
   var $162=$__t_i;
   label = 11; break;
  case 11: 
   var $164=$75;
   var $165=$__t;
   HEAP32[(($79)>>2)]=272;
   $26=$78;
   $27=$165;
   $28=$79;
   var $166=$26;
   var $167=$27;
   var $168=$28;
   $23=$166;
   $24=$167;
   $25=$168;
   var $169=$23;
   var $170=(($169)|0);
   var $171=$24;
   var $172=$25;
   $22=$172;
   var $173=$22;
   var $174=HEAP32[(($173)>>2)];
   $19=$170;
   $20=$171;
   $21=$174;
   var $175=$19;
   var $176=$20;
   var $177=$21;
   $16=$175;
   HEAP32[(($17)>>2)]=$176;
   HEAP32[(($18)>>2)]=$177;
   var $178=$16;
   var $179=$178;
   $15=$17;
   var $180=$15;
   var $181=HEAP32[(($180)>>2)];
   $9=$18;
   var $182=$9;
   var $183=HEAP32[(($182)>>2)];
   $12=$179;
   HEAP32[(($13)>>2)]=$181;
   HEAP32[(($14)>>2)]=$183;
   var $184=$12;
   var $185=(($184)|0);
   $11=$13;
   var $186=$11;
   var $187=HEAP32[(($186)>>2)];
   HEAP32[(($185)>>2)]=$187;
   var $188=(($184+4)|0);
   $10=$14;
   var $189=$10;
   var $190=HEAP32[(($189)>>2)];
   HEAP32[(($188)>>2)]=$190;
   $51=$164;
   $52=$78;
   var $191=$51;
   var $192=$52;
   $50=$192;
   var $193=$50;
   var $194=(($193)|0);
   $49=$194;
   var $195=$49;
   var $196=$195;
   $48=$196;
   var $197=$48;
   var $198=(($197)|0);
   var $199=HEAP32[(($198)>>2)];
   $__t_i_i=$199;
   var $200=(($193)|0);
   $47=$200;
   var $201=$47;
   var $202=$201;
   $46=$202;
   var $203=$46;
   var $204=(($203)|0);
   HEAP32[(($204)>>2)]=0;
   var $205=$__t_i_i;
   $38=$191;
   $39=$205;
   var $206=$38;
   var $207=(($206)|0);
   $37=$207;
   var $208=$37;
   var $209=$208;
   $36=$209;
   var $210=$36;
   var $211=(($210)|0);
   var $212=HEAP32[(($211)>>2)];
   $__tmp_i_i=$212;
   var $213=$39;
   var $214=(($206)|0);
   $35=$214;
   var $215=$35;
   var $216=$215;
   $34=$216;
   var $217=$34;
   var $218=(($217)|0);
   HEAP32[(($218)>>2)]=$213;
   var $219=$__tmp_i_i;
   var $220=(($219)|(0))!=0;
   if ($220) { label = 12; break; } else { label = 15; break; }
  case 12: 
   var $222=(($206)|0);
   $33=$222;
   var $223=$33;
   var $224=$223;
   $32=$224;
   var $225=$32;
   var $226=(($225+4)|0);
   var $227=HEAP32[(($226)>>2)];
   var $228=$__tmp_i_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$227]($228) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 14; break; }
  case 13: 
   label = 15; break;
  case 14: 
   var $231$0 = ___cxa_find_matching_catch(-1, -1,0); $231$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 15: 
   var $232=$52;
   $42=$232;
   var $233=$42;
   var $234=(($233)|0);
   $41=$234;
   var $235=$41;
   var $236=$235;
   $40=$236;
   var $237=$40;
   var $238=(($237+4)|0);
   $43=$238;
   var $239=$43;
   var $240=HEAP32[(($239)>>2)];
   var $241=(($191)|0);
   $45=$241;
   var $242=$45;
   var $243=$242;
   $44=$243;
   var $244=$44;
   var $245=(($244+4)|0);
   HEAP32[(($245)>>2)]=$240;
   $65=$78;
   var $246=$65;
   $64=$246;
   var $247=$64;
   $62=$247;
   $63=0;
   var $248=$62;
   var $249=(($248)|0);
   $61=$249;
   var $250=$61;
   var $251=$250;
   $60=$251;
   var $252=$60;
   var $253=(($252)|0);
   var $254=HEAP32[(($253)>>2)];
   $__tmp_i_i_i=$254;
   var $255=$63;
   var $256=(($248)|0);
   $59=$256;
   var $257=$59;
   var $258=$257;
   $58=$258;
   var $259=$58;
   var $260=(($259)|0);
   HEAP32[(($260)>>2)]=$255;
   var $261=$__tmp_i_i_i;
   var $262=(($261)|(0))!=0;
   if ($262) { label = 16; break; } else { label = 19; break; }
  case 16: 
   var $264=(($248)|0);
   $57=$264;
   var $265=$57;
   var $266=$265;
   $56=$266;
   var $267=$56;
   var $268=(($267+4)|0);
   var $269=HEAP32[(($268)>>2)];
   var $270=$__tmp_i_i_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$269]($270) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 18; break; }
  case 17: 
   label = 19; break;
  case 18: 
   var $273$0 = ___cxa_find_matching_catch(-1, -1,0); $273$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 19: 
   var $274=$__new_cap;
   var $275=Math.floor((($274)>>>(0)));
   $__new_cap=$275;
   var $276=$75;
   $68=$276;
   var $277=$68;
   var $278=(($277)|0);
   $67=$278;
   var $279=$67;
   var $280=$279;
   $66=$280;
   var $281=$66;
   var $282=(($281)|0);
   var $283=HEAP32[(($282)>>2)];
   var $284=$__n_off;
   var $285=(($283+$284)|0);
   var $286=$76;
   HEAP32[(($286)>>2)]=$285;
   var $287=$75;
   $71=$287;
   var $288=$71;
   var $289=(($288)|0);
   $70=$289;
   var $290=$70;
   var $291=$290;
   $69=$291;
   var $292=$69;
   var $293=(($292)|0);
   var $294=HEAP32[(($293)>>2)];
   var $295=$__new_cap;
   var $296=(($294+$295)|0);
   var $297=$77;
   HEAP32[(($297)>>2)]=$296;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__t_i;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13=__stackBase__;
   var $14=(__stackBase__)+(8);
   var $15;
   var $16;
   var $17=(__stackBase__)+(16);
   var $18=(__stackBase__)+(24);
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $__tmp_i_i;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $__t_i_i;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $__tmp_i_i_i;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $__owns;
   var $__cur_cap;
   var $__new_cap;
   var $__n_off;
   var $__t;
   var $78=(__stackBase__)+(32);
   var $79=(__stackBase__)+(40);
   $75=$__b;
   $76=$__n;
   $77=$__e;
   var $80=$75;
   $74=$80;
   var $81=$74;
   var $82=(($81)|0);
   $73=$82;
   var $83=$73;
   var $84=$83;
   $72=$84;
   var $85=$72;
   var $86=(($85+4)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87)|(0))!=(((542))|(0));
   var $89=(($88)&(1));
   $__owns=$89;
   var $90=$77;
   var $91=HEAP32[(($90)>>2)];
   var $92=$75;
   $55=$92;
   var $93=$55;
   var $94=(($93)|0);
   $54=$94;
   var $95=$54;
   var $96=$95;
   $53=$96;
   var $97=$53;
   var $98=(($97)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=$91;
   var $101=$99;
   var $102=((($100)-($101))|0);
   var $103=((((($102)|(0)))/(4))&-1);
   var $104=($103<<2);
   $__cur_cap=$104;
   var $105=$__cur_cap;
   var $106=Math.floor(2147483647);
   var $107=(($105)>>>(0)) < (($106)>>>(0));
   if ($107) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $109=$__cur_cap;
   var $110=($109<<1);
   var $113 = $110;label = 4; break;
  case 3: 
   var $113 = -1;label = 4; break;
  case 4: 
   var $113;
   $__new_cap=$113;
   var $114=$76;
   var $115=HEAP32[(($114)>>2)];
   var $116=$75;
   $31=$116;
   var $117=$31;
   var $118=(($117)|0);
   $30=$118;
   var $119=$30;
   var $120=$119;
   $29=$120;
   var $121=$29;
   var $122=(($121)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=$115;
   var $125=$123;
   var $126=((($124)-($125))|0);
   var $127=((((($126)|(0)))/(4))&-1);
   $__n_off=$127;
   var $128=$__owns;
   var $129=(($128) & 1);
   if ($129) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $131=$75;
   $3=$131;
   var $132=$3;
   var $133=(($132)|0);
   $2=$133;
   var $134=$2;
   var $135=$134;
   $1=$135;
   var $136=$1;
   var $137=(($136)|0);
   var $138=HEAP32[(($137)>>2)];
   var $141 = $138;label = 7; break;
  case 6: 
   var $141 = 0;label = 7; break;
  case 7: 
   var $141;
   var $142=$141;
   var $143=$__new_cap;
   var $144=_realloc($142, $143);
   var $145=$144;
   $__t=$145;
   var $146=$__t;
   var $147=(($146)|(0))==0;
   if ($147) { label = 8; break; } else { label = 9; break; }
  case 8: 
   __ZSt17__throw_bad_allocv();
   label = 9; break;
  case 9: 
   var $150=$__owns;
   var $151=(($150) & 1);
   if ($151) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $153=$75;
   $8=$153;
   var $154=$8;
   var $155=(($154)|0);
   $7=$155;
   var $156=$7;
   var $157=$156;
   $6=$157;
   var $158=$6;
   var $159=(($158)|0);
   var $160=HEAP32[(($159)>>2)];
   $__t_i=$160;
   var $161=(($154)|0);
   $5=$161;
   var $162=$5;
   var $163=$162;
   $4=$163;
   var $164=$4;
   var $165=(($164)|0);
   HEAP32[(($165)>>2)]=0;
   var $166=$__t_i;
   label = 11; break;
  case 11: 
   var $168=$75;
   var $169=$__t;
   HEAP32[(($79)>>2)]=272;
   $26=$78;
   $27=$169;
   $28=$79;
   var $170=$26;
   var $171=$27;
   var $172=$28;
   $23=$170;
   $24=$171;
   $25=$172;
   var $173=$23;
   var $174=(($173)|0);
   var $175=$24;
   var $176=$25;
   $22=$176;
   var $177=$22;
   var $178=HEAP32[(($177)>>2)];
   $19=$174;
   $20=$175;
   $21=$178;
   var $179=$19;
   var $180=$20;
   var $181=$21;
   $16=$179;
   HEAP32[(($17)>>2)]=$180;
   HEAP32[(($18)>>2)]=$181;
   var $182=$16;
   var $183=$182;
   $15=$17;
   var $184=$15;
   var $185=HEAP32[(($184)>>2)];
   $9=$18;
   var $186=$9;
   var $187=HEAP32[(($186)>>2)];
   $12=$183;
   HEAP32[(($13)>>2)]=$185;
   HEAP32[(($14)>>2)]=$187;
   var $188=$12;
   var $189=(($188)|0);
   $11=$13;
   var $190=$11;
   var $191=HEAP32[(($190)>>2)];
   HEAP32[(($189)>>2)]=$191;
   var $192=(($188+4)|0);
   $10=$14;
   var $193=$10;
   var $194=HEAP32[(($193)>>2)];
   HEAP32[(($192)>>2)]=$194;
   $51=$168;
   $52=$78;
   var $195=$51;
   var $196=$52;
   $50=$196;
   var $197=$50;
   var $198=(($197)|0);
   $49=$198;
   var $199=$49;
   var $200=$199;
   $48=$200;
   var $201=$48;
   var $202=(($201)|0);
   var $203=HEAP32[(($202)>>2)];
   $__t_i_i=$203;
   var $204=(($197)|0);
   $47=$204;
   var $205=$47;
   var $206=$205;
   $46=$206;
   var $207=$46;
   var $208=(($207)|0);
   HEAP32[(($208)>>2)]=0;
   var $209=$__t_i_i;
   $38=$195;
   $39=$209;
   var $210=$38;
   var $211=(($210)|0);
   $37=$211;
   var $212=$37;
   var $213=$212;
   $36=$213;
   var $214=$36;
   var $215=(($214)|0);
   var $216=HEAP32[(($215)>>2)];
   $__tmp_i_i=$216;
   var $217=$39;
   var $218=(($210)|0);
   $35=$218;
   var $219=$35;
   var $220=$219;
   $34=$220;
   var $221=$34;
   var $222=(($221)|0);
   HEAP32[(($222)>>2)]=$217;
   var $223=$__tmp_i_i;
   var $224=(($223)|(0))!=0;
   if ($224) { label = 12; break; } else { label = 15; break; }
  case 12: 
   var $226=(($210)|0);
   $33=$226;
   var $227=$33;
   var $228=$227;
   $32=$228;
   var $229=$32;
   var $230=(($229+4)|0);
   var $231=HEAP32[(($230)>>2)];
   var $232=$__tmp_i_i;
   var $233=$232;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$231]($233) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 14; break; }
  case 13: 
   label = 15; break;
  case 14: 
   var $236$0 = ___cxa_find_matching_catch(-1, -1,0); $236$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 15: 
   var $237=$52;
   $42=$237;
   var $238=$42;
   var $239=(($238)|0);
   $41=$239;
   var $240=$41;
   var $241=$240;
   $40=$241;
   var $242=$40;
   var $243=(($242+4)|0);
   $43=$243;
   var $244=$43;
   var $245=HEAP32[(($244)>>2)];
   var $246=(($195)|0);
   $45=$246;
   var $247=$45;
   var $248=$247;
   $44=$248;
   var $249=$44;
   var $250=(($249+4)|0);
   HEAP32[(($250)>>2)]=$245;
   $65=$78;
   var $251=$65;
   $64=$251;
   var $252=$64;
   $62=$252;
   $63=0;
   var $253=$62;
   var $254=(($253)|0);
   $61=$254;
   var $255=$61;
   var $256=$255;
   $60=$256;
   var $257=$60;
   var $258=(($257)|0);
   var $259=HEAP32[(($258)>>2)];
   $__tmp_i_i_i=$259;
   var $260=$63;
   var $261=(($253)|0);
   $59=$261;
   var $262=$59;
   var $263=$262;
   $58=$263;
   var $264=$58;
   var $265=(($264)|0);
   HEAP32[(($265)>>2)]=$260;
   var $266=$__tmp_i_i_i;
   var $267=(($266)|(0))!=0;
   if ($267) { label = 16; break; } else { label = 19; break; }
  case 16: 
   var $269=(($253)|0);
   $57=$269;
   var $270=$57;
   var $271=$270;
   $56=$271;
   var $272=$56;
   var $273=(($272+4)|0);
   var $274=HEAP32[(($273)>>2)];
   var $275=$__tmp_i_i_i;
   var $276=$275;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$274]($276) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 18; break; }
  case 17: 
   label = 19; break;
  case 18: 
   var $279$0 = ___cxa_find_matching_catch(-1, -1,0); $279$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 19: 
   var $280=$__new_cap;
   var $281=Math.floor(((($280)>>>(0)))/(4));
   $__new_cap=$281;
   var $282=$75;
   $68=$282;
   var $283=$68;
   var $284=(($283)|0);
   $67=$284;
   var $285=$67;
   var $286=$285;
   $66=$286;
   var $287=$66;
   var $288=(($287)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=$__n_off;
   var $291=(($289+($290<<2))|0);
   var $292=$76;
   HEAP32[(($292)>>2)]=$291;
   var $293=$75;
   $71=$293;
   var $294=$71;
   var $295=(($294)|0);
   $70=$295;
   var $296=$70;
   var $297=$296;
   $69=$297;
   var $298=$69;
   var $299=(($298)|0);
   var $300=HEAP32[(($299)>>2)];
   var $301=$__new_cap;
   var $302=(($300+($301<<2))|0);
   var $303=$77;
   HEAP32[(($303)>>2)]=$302;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 672)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i5;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $__tmp_i_i_i3;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $__tmp_i;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $__tmp_i_i_i1;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78=__stackBase__;
   var $79=(__stackBase__)+(8);
   var $80;
   var $81;
   var $82=(__stackBase__)+(16);
   var $83=(__stackBase__)+(24);
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105;
   var $106;
   var $107;
   var $__tmp_i_i_i;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114=(__stackBase__)+(32);
   var $115=(__stackBase__)+(40);
   var $116;
   var $117;
   var $118=(__stackBase__)+(48);
   var $119=(__stackBase__)+(56);
   var $120;
   var $121;
   var $122;
   var $123;
   var $124;
   var $125;
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $__bz;
   var $__wbuf=(__stackBase__)+(64);
   var $__wb=(__stackBase__)+(464);
   var $135=(__stackBase__)+(472);
   var $__wn=(__stackBase__)+(480);
   var $__we;
   var $__loc=(__stackBase__)+(488);
   var $136;
   var $137;
   var $__ct;
   var $__neg=(__stackBase__)+(496);
   var $138=(__stackBase__)+(504);
   var $__atoms=(__stackBase__)+(512);
   var $__nbuf=(__stackBase__)+(552);
   var $__nc;
   var $__h=(__stackBase__)+(656);
   var $139=(__stackBase__)+(664);
   var $__w;
   var $140;
   $130=$this;
   var $141=(($__intl)&(1));
   $131=$141;
   $132=$__iob;
   $133=$__err;
   $134=$__v;
   var $142=$130;
   $__bz=100;
   var $143=(($__wbuf)|0);
   HEAP32[(($135)>>2)]=542;
   $127=$__wb;
   $128=$143;
   $129=$135;
   var $144=$127;
   var $145=$128;
   var $146=$129;
   $124=$144;
   $125=$145;
   $126=$146;
   var $147=$124;
   var $148=(($147)|0);
   var $149=$125;
   var $150=$126;
   $123=$150;
   var $151=$123;
   var $152=HEAP32[(($151)>>2)];
   $120=$148;
   $121=$149;
   $122=$152;
   var $153=$120;
   var $154=$121;
   var $155=$122;
   $117=$153;
   HEAP32[(($118)>>2)]=$154;
   HEAP32[(($119)>>2)]=$155;
   var $156=$117;
   var $157=$156;
   $116=$118;
   var $158=$116;
   var $159=HEAP32[(($158)>>2)];
   $110=$119;
   var $160=$110;
   var $161=HEAP32[(($160)>>2)];
   $113=$157;
   HEAP32[(($114)>>2)]=$159;
   HEAP32[(($115)>>2)]=$161;
   var $162=$113;
   var $163=(($162)|0);
   $112=$114;
   var $164=$112;
   var $165=HEAP32[(($164)>>2)];
   HEAP32[(($163)>>2)]=$165;
   var $166=(($162+4)|0);
   $111=$115;
   var $167=$111;
   var $168=HEAP32[(($167)>>2)];
   HEAP32[(($166)>>2)]=$168;
   var $169=(($__wbuf)|0);
   var $170=(($169+400)|0);
   $__we=$170;
   var $171=$132;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc, $171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 17; break; }
  case 2: 
   $99=$__loc;
   var $173=$99;
   var $174 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($173, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 18; break; }
  case 3: 
   var $175=$174;
   label = 4; break;
  case 4: 
   $__ct=$175;
   HEAP8[($__neg)]=0;
   var $177=$138;
   var $178=$__e;
   assert(4 % 1 === 0);HEAP32[(($177)>>2)]=HEAP32[(($178)>>2)];
   var $179=$131;
   var $180=(($179) & 1);
   var $181=$132;
   $98=$181;
   var $182=$98;
   var $183=(($182+4)|0);
   var $184=HEAP32[(($183)>>2)];
   label = 5; break;
  case 5: 
   var $186=$133;
   var $187=$__ct;
   var $188=$__we;
   var $189 = (function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $138, $180, $__loc, $184, $186, $__neg, $187, $__wb, $__wn, $188) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 18; break; }
  case 6: 
   if ($189) { label = 7; break; } else { label = 47; break; }
  case 7: 
   var $192=$__ct;
   var $193=(($__atoms)|0);
   $94=$192;
   $95=((10232)|0);
   $96=((10242)|0);
   $97=$193;
   var $194=$94;
   var $195=$194;
   var $196=HEAP32[(($195)>>2)];
   var $197=(($196+48)|0);
   var $198=HEAP32[(($197)>>2)];
   var $199=$95;
   var $200=$96;
   var $201=$97;
   var $202 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$198]($194, $199, $200, $201) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 18; break; }
  case 8: 
   label = 9; break;
  case 9: 
   var $204=(($__nbuf)|0);
   $__nc=$204;
   HEAP32[(($139)>>2)]=272;
   $91=$__h;
   $92=0;
   $93=$139;
   var $205=$91;
   var $206=$92;
   var $207=$93;
   $88=$205;
   $89=$206;
   $90=$207;
   var $208=$88;
   var $209=(($208)|0);
   var $210=$89;
   var $211=$90;
   $87=$211;
   var $212=$87;
   var $213=HEAP32[(($212)>>2)];
   $84=$209;
   $85=$210;
   $86=$213;
   var $214=$84;
   var $215=$85;
   var $216=$86;
   $81=$214;
   HEAP32[(($82)>>2)]=$215;
   HEAP32[(($83)>>2)]=$216;
   var $217=$81;
   var $218=$217;
   $80=$82;
   var $219=$80;
   var $220=HEAP32[(($219)>>2)];
   $74=$83;
   var $221=$74;
   var $222=HEAP32[(($221)>>2)];
   $77=$218;
   HEAP32[(($78)>>2)]=$220;
   HEAP32[(($79)>>2)]=$222;
   var $223=$77;
   var $224=(($223)|0);
   $76=$78;
   var $225=$76;
   var $226=HEAP32[(($225)>>2)];
   HEAP32[(($224)>>2)]=$226;
   var $227=(($223+4)|0);
   $75=$79;
   var $228=$75;
   var $229=HEAP32[(($228)>>2)];
   HEAP32[(($227)>>2)]=$229;
   var $230=HEAP32[(($__wn)>>2)];
   $73=$__wb;
   var $231=$73;
   var $232=(($231)|0);
   $72=$232;
   var $233=$72;
   var $234=$233;
   $71=$234;
   var $235=$71;
   var $236=(($235)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=$230;
   var $239=$237;
   var $240=((($238)-($239))|0);
   var $241=((((($240)|(0)))/(4))&-1);
   var $242=(($241)|(0)) > 98;
   if ($242) { label = 10; break; } else { label = 25; break; }
  case 10: 
   var $244=HEAP32[(($__wn)>>2)];
   $60=$__wb;
   var $245=$60;
   var $246=(($245)|0);
   $59=$246;
   var $247=$59;
   var $248=$247;
   $58=$248;
   var $249=$58;
   var $250=(($249)|0);
   var $251=HEAP32[(($250)>>2)];
   var $252=$244;
   var $253=$251;
   var $254=((($252)-($253))|0);
   var $255=((((($254)|(0)))/(4))&-1);
   var $256=((($255)+(2))|0);
   var $257=_malloc($256);
   $56=$__h;
   $57=$257;
   var $258=$56;
   var $259=(($258)|0);
   $55=$259;
   var $260=$55;
   var $261=$260;
   $54=$261;
   var $262=$54;
   var $263=(($262)|0);
   var $264=HEAP32[(($263)>>2)];
   $__tmp_i=$264;
   var $265=$57;
   var $266=(($258)|0);
   $53=$266;
   var $267=$53;
   var $268=$267;
   $52=$268;
   var $269=$52;
   var $270=(($269)|0);
   HEAP32[(($270)>>2)]=$265;
   var $271=$__tmp_i;
   var $272=(($271)|(0))!=0;
   if ($272) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $274=(($258)|0);
   $51=$274;
   var $275=$51;
   var $276=$275;
   $50=$276;
   var $277=$50;
   var $278=(($277+4)|0);
   var $279=HEAP32[(($278)>>2)];
   var $280=$__tmp_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$279]($280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 13; break; }
  case 12: 
   label = 14; break;
  case 13: 
   var $283$0 = ___cxa_find_matching_catch(-1, -1,0); $283$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 14: 
   $49=$__h;
   var $284=$49;
   var $285=(($284)|0);
   $48=$285;
   var $286=$48;
   var $287=$286;
   $47=$287;
   var $288=$47;
   var $289=(($288)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291=(($290)|(0))==0;
   if ($291) { label = 15; break; } else { label = 24; break; }
  case 15: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 19; break; }
  case 16: 
   label = 24; break;
  case 17: 
   var $295$0 = ___cxa_find_matching_catch(-1, -1); $295$1 = tempRet0;
   var $296=$295$0;
   $136=$296;
   var $297=$295$1;
   $137=$297;
   label = 70; break;
  case 18: 
   var $299$0 = ___cxa_find_matching_catch(-1, -1); $299$1 = tempRet0;
   var $300=$299$0;
   $136=$300;
   var $301=$299$1;
   $137=$301;
   label = 69; break;
  case 19: 
   var $303$0 = ___cxa_find_matching_catch(-1, -1); $303$1 = tempRet0;
   var $304=$303$0;
   $136=$304;
   var $305=$303$1;
   $137=$305;
   $46=$__h;
   var $306=$46;
   $45=$306;
   var $307=$45;
   $43=$307;
   $44=0;
   var $308=$43;
   var $309=(($308)|0);
   $42=$309;
   var $310=$42;
   var $311=$310;
   $41=$311;
   var $312=$41;
   var $313=(($312)|0);
   var $314=HEAP32[(($313)>>2)];
   $__tmp_i_i_i3=$314;
   var $315=$44;
   var $316=(($308)|0);
   $40=$316;
   var $317=$40;
   var $318=$317;
   $39=$318;
   var $319=$39;
   var $320=(($319)|0);
   HEAP32[(($320)>>2)]=$315;
   var $321=$__tmp_i_i_i3;
   var $322=(($321)|(0))!=0;
   if ($322) { label = 20; break; } else { label = 23; break; }
  case 20: 
   var $324=(($308)|0);
   $38=$324;
   var $325=$38;
   var $326=$325;
   $37=$326;
   var $327=$37;
   var $328=(($327+4)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=$__tmp_i_i_i3;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$329]($330) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 22; break; }
  case 21: 
   label = 23; break;
  case 22: 
   var $333$0 = ___cxa_find_matching_catch(-1, -1,0); $333$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 23: 
   label = 69; break;
  case 24: 
   $36=$__h;
   var $335=$36;
   var $336=(($335)|0);
   $35=$336;
   var $337=$35;
   var $338=$337;
   $34=$338;
   var $339=$34;
   var $340=(($339)|0);
   var $341=HEAP32[(($340)>>2)];
   $__nc=$341;
   label = 25; break;
  case 25: 
   var $343=HEAP8[($__neg)];
   var $344=(($343) & 1);
   if ($344) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $346=$__nc;
   var $347=(($346+1)|0);
   $__nc=$347;
   HEAP8[($346)]=45;
   label = 27; break;
  case 27: 
   $33=$__wb;
   var $349=$33;
   var $350=(($349)|0);
   $32=$350;
   var $351=$32;
   var $352=$351;
   $31=$352;
   var $353=$31;
   var $354=(($353)|0);
   var $355=HEAP32[(($354)>>2)];
   $__w=$355;
   label = 28; break;
  case 28: 
   var $357=$__w;
   var $358=HEAP32[(($__wn)>>2)];
   var $359=(($357)>>>(0)) < (($358)>>>(0));
   if ($359) { label = 29; break; } else { label = 38; break; }
  case 29: 
   var $361=(($__atoms)|0);
   $30=$__atoms;
   var $362=$30;
   var $363=(($362)|0);
   var $364=(($363+40)|0);
   label = 30; break;
  case 30: 
   var $366=$__w;
   $11=$361;
   $12=$364;
   $13=$366;
   label = 31; break;
  case 31: 
   var $368=$11;
   var $369=$12;
   var $370=(($368)|(0))!=(($369)|(0));
   if ($370) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $372=$11;
   var $373=HEAP32[(($372)>>2)];
   var $374=$13;
   var $375=HEAP32[(($374)>>2)];
   var $376=(($373)|(0))==(($375)|(0));
   if ($376) { label = 33; break; } else { label = 34; break; }
  case 33: 
   label = 35; break;
  case 34: 
   var $379=$11;
   var $380=(($379+4)|0);
   $11=$380;
   label = 31; break;
  case 35: 
   var $381=$11;
   label = 36; break;
  case 36: 
   var $383=(($__atoms)|0);
   var $384=$381;
   var $385=$383;
   var $386=((($384)-($385))|0);
   var $387=((((($386)|(0)))/(4))&-1);
   var $388=((10232+$387)|0);
   var $389=HEAP8[($388)];
   var $390=$__nc;
   HEAP8[($390)]=$389;
   label = 37; break;
  case 37: 
   var $392=$__w;
   var $393=(($392+4)|0);
   $__w=$393;
   var $394=$__nc;
   var $395=(($394+1)|0);
   $__nc=$395;
   label = 28; break;
  case 38: 
   var $397=$__nc;
   HEAP8[($397)]=0;
   var $398=(($__nbuf)|0);
   var $399=$134;
   var $400 = (function() { try { __THREW__ = 0; return _sscanf($398, ((3576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$399,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 19; break; }
  case 39: 
   var $402=(($400)|(0))!=1;
   if ($402) { label = 40; break; } else { label = 42; break; }
  case 40: 
   (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(((3360)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 19; break; }
  case 41: 
   label = 42; break;
  case 42: 
   $10=$__h;
   var $406=$10;
   $9=$406;
   var $407=$9;
   $7=$407;
   $8=0;
   var $408=$7;
   var $409=(($408)|0);
   $6=$409;
   var $410=$6;
   var $411=$410;
   $5=$411;
   var $412=$5;
   var $413=(($412)|0);
   var $414=HEAP32[(($413)>>2)];
   $__tmp_i_i_i5=$414;
   var $415=$8;
   var $416=(($408)|0);
   $4=$416;
   var $417=$4;
   var $418=$417;
   $3=$418;
   var $419=$3;
   var $420=(($419)|0);
   HEAP32[(($420)>>2)]=$415;
   var $421=$__tmp_i_i_i5;
   var $422=(($421)|(0))!=0;
   if ($422) { label = 43; break; } else { label = 46; break; }
  case 43: 
   var $424=(($408)|0);
   $2=$424;
   var $425=$2;
   var $426=$425;
   $1=$426;
   var $427=$1;
   var $428=(($427+4)|0);
   var $429=HEAP32[(($428)>>2)];
   var $430=$__tmp_i_i_i5;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$429]($430) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 45; break; }
  case 44: 
   label = 46; break;
  case 45: 
   var $433$0 = ___cxa_find_matching_catch(-1, -1,0); $433$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 46: 
   label = 47; break;
  case 47: 
   $28=$__b;
   $29=$__e;
   var $435=$28;
   var $436=$29;
   $26=$435;
   $27=$436;
   var $437=$26;
   $25=$437;
   var $438=$25;
   var $439=(($438)|0);
   var $440=HEAP32[(($439)>>2)];
   var $441=(($440)|(0))!=0;
   if ($441) { label = 48; break; } else { label = 54; break; }
  case 48: 
   var $443=(($438)|0);
   var $444=HEAP32[(($443)>>2)];
   $24=$444;
   var $445=$24;
   var $446=(($445+12)|0);
   var $447=HEAP32[(($446)>>2)];
   var $448=(($445+16)|0);
   var $449=HEAP32[(($448)>>2)];
   var $450=(($447)|(0))==(($449)|(0));
   if ($450) { label = 49; break; } else { label = 51; break; }
  case 49: 
   var $452=$445;
   var $453=HEAP32[(($452)>>2)];
   var $454=(($453+36)|0);
   var $455=HEAP32[(($454)>>2)];
   var $456 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$455]($445) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 50; break; } else { label = 18; break; }
  case 50: 
   $23=$456;
   label = 52; break;
  case 51: 
   var $458=(($445+12)|0);
   var $459=HEAP32[(($458)>>2)];
   var $460=HEAP32[(($459)>>2)];
   $22=$460;
   var $461=$22;
   $23=$461;
   label = 52; break;
  case 52: 
   var $462=$23;
   $20=$462;
   $21=-1;
   var $463=$20;
   var $464=$21;
   var $465=(($463)|(0))==(($464)|(0));
   if ($465) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $467=(($438)|0);
   HEAP32[(($467)>>2)]=0;
   label = 54; break;
  case 54: 
   var $468=(($438)|0);
   var $469=HEAP32[(($468)>>2)];
   var $470=(($469)|(0))==0;
   var $471=(($470)&(1));
   var $472=$27;
   $19=$472;
   var $473=$19;
   var $474=(($473)|0);
   var $475=HEAP32[(($474)>>2)];
   var $476=(($475)|(0))!=0;
   if ($476) { label = 55; break; } else { label = 61; break; }
  case 55: 
   var $478=(($473)|0);
   var $479=HEAP32[(($478)>>2)];
   $18=$479;
   var $480=$18;
   var $481=(($480+12)|0);
   var $482=HEAP32[(($481)>>2)];
   var $483=(($480+16)|0);
   var $484=HEAP32[(($483)>>2)];
   var $485=(($482)|(0))==(($484)|(0));
   if ($485) { label = 56; break; } else { label = 58; break; }
  case 56: 
   var $487=$480;
   var $488=HEAP32[(($487)>>2)];
   var $489=(($488+36)|0);
   var $490=HEAP32[(($489)>>2)];
   var $491 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$490]($480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { label = 18; break; }
  case 57: 
   $17=$491;
   label = 59; break;
  case 58: 
   var $493=(($480+12)|0);
   var $494=HEAP32[(($493)>>2)];
   var $495=HEAP32[(($494)>>2)];
   $16=$495;
   var $496=$16;
   $17=$496;
   label = 59; break;
  case 59: 
   var $497=$17;
   $14=$497;
   $15=-1;
   var $498=$14;
   var $499=$15;
   var $500=(($498)|(0))==(($499)|(0));
   if ($500) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $502=(($473)|0);
   HEAP32[(($502)>>2)]=0;
   label = 61; break;
  case 61: 
   var $503=(($473)|0);
   var $504=HEAP32[(($503)>>2)];
   var $505=(($504)|(0))==0;
   var $506=(($505)&(1));
   var $507=(($471)|(0))==(($506)|(0));
   label = 62; break;
  case 62: 
   if ($507) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $510=$133;
   var $511=HEAP32[(($510)>>2)];
   var $512=$511 | 2;
   HEAP32[(($510)>>2)]=$512;
   label = 64; break;
  case 64: 
   var $514=$agg_result;
   var $515=$__b;
   assert(4 % 1 === 0);HEAP32[(($514)>>2)]=HEAP32[(($515)>>2)];
   $140=1;
   __ZNSt3__16localeD2Ev($__loc);
   $70=$__wb;
   var $516=$70;
   $69=$516;
   var $517=$69;
   $67=$517;
   $68=0;
   var $518=$67;
   var $519=(($518)|0);
   $66=$519;
   var $520=$66;
   var $521=$520;
   $65=$521;
   var $522=$65;
   var $523=(($522)|0);
   var $524=HEAP32[(($523)>>2)];
   $__tmp_i_i_i1=$524;
   var $525=$68;
   var $526=(($518)|0);
   $64=$526;
   var $527=$64;
   var $528=$527;
   $63=$528;
   var $529=$63;
   var $530=(($529)|0);
   HEAP32[(($530)>>2)]=$525;
   var $531=$__tmp_i_i_i1;
   var $532=(($531)|(0))!=0;
   if ($532) { label = 65; break; } else { label = 68; break; }
  case 65: 
   var $534=(($518)|0);
   $62=$534;
   var $535=$62;
   var $536=$535;
   $61=$536;
   var $537=$61;
   var $538=(($537+4)|0);
   var $539=HEAP32[(($538)>>2)];
   var $540=$__tmp_i_i_i1;
   var $541=$540;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$539]($541) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 66; break; } else { label = 67; break; }
  case 66: 
   label = 68; break;
  case 67: 
   var $544$0 = ___cxa_find_matching_catch(-1, -1,0); $544$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 68: 
   STACKTOP = __stackBase__;
   return;
  case 69: 
   __ZNSt3__16localeD2Ev($__loc);
   label = 70; break;
  case 70: 
   $109=$__wb;
   var $547=$109;
   $108=$547;
   var $548=$108;
   $106=$548;
   $107=0;
   var $549=$106;
   var $550=(($549)|0);
   $105=$550;
   var $551=$105;
   var $552=$551;
   $104=$552;
   var $553=$104;
   var $554=(($553)|0);
   var $555=HEAP32[(($554)>>2)];
   $__tmp_i_i_i=$555;
   var $556=$107;
   var $557=(($549)|0);
   $103=$557;
   var $558=$103;
   var $559=$558;
   $102=$559;
   var $560=$102;
   var $561=(($560)|0);
   HEAP32[(($561)>>2)]=$556;
   var $562=$__tmp_i_i_i;
   var $563=(($562)|(0))!=0;
   if ($563) { label = 71; break; } else { label = 74; break; }
  case 71: 
   var $565=(($549)|0);
   $101=$565;
   var $566=$101;
   var $567=$566;
   $100=$567;
   var $568=$100;
   var $569=(($568+4)|0);
   var $570=HEAP32[(($569)>>2)];
   var $571=$__tmp_i_i_i;
   var $572=$571;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$570]($572) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 72; break; } else { label = 73; break; }
  case 72: 
   label = 74; break;
  case 73: 
   var $575$0 = ___cxa_find_matching_catch(-1, -1,0); $575$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 74: 
   label = 75; break;
  case 75: 
   var $577=$136;
   var $578=$137;
   var $579$0=$577;
   var $579$1=0;
   var $580$0=$579$0;
   var $580$1=$578;
   ___resumeException($580$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 800)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55=__stackBase__;
   var $56=(__stackBase__)+(8);
   var $57=(__stackBase__)+(16);
   var $58=(__stackBase__)+(24);
   var $59=(__stackBase__)+(32);
   var $60=(__stackBase__)+(40);
   var $61=(__stackBase__)+(48);
   var $62=(__stackBase__)+(56);
   var $63=(__stackBase__)+(64);
   var $64=(__stackBase__)+(72);
   var $65=(__stackBase__)+(80);
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $122;
   var $123;
   var $124;
   var $125;
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154;
   var $155;
   var $156;
   var $157;
   var $158;
   var $159;
   var $160;
   var $161;
   var $162;
   var $163;
   var $164;
   var $165;
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177;
   var $178;
   var $179;
   var $180;
   var $181;
   var $182;
   var $183;
   var $184;
   var $185;
   var $186;
   var $187;
   var $188;
   var $189;
   var $190;
   var $191;
   var $192;
   var $193;
   var $194;
   var $195;
   var $196;
   var $197;
   var $198;
   var $199;
   var $200;
   var $201;
   var $202;
   var $203;
   var $204;
   var $205;
   var $206;
   var $207;
   var $208;
   var $209;
   var $210;
   var $211;
   var $212;
   var $213;
   var $214;
   var $215;
   var $216;
   var $217;
   var $218;
   var $219;
   var $220;
   var $221;
   var $222;
   var $223;
   var $224;
   var $225;
   var $226;
   var $227;
   var $228;
   var $229;
   var $230;
   var $231;
   var $232;
   var $233;
   var $234;
   var $235;
   var $236;
   var $237;
   var $238;
   var $239;
   var $240;
   var $241;
   var $242;
   var $243;
   var $244;
   var $245;
   var $246;
   var $247;
   var $248;
   var $249;
   var $250;
   var $251;
   var $252;
   var $253;
   var $254;
   var $255;
   var $256;
   var $257;
   var $258;
   var $259;
   var $260;
   var $261;
   var $262;
   var $263;
   var $264;
   var $265;
   var $266;
   var $267;
   var $268;
   var $269;
   var $270;
   var $271;
   var $272;
   var $273;
   var $274;
   var $275;
   var $276;
   var $277;
   var $278;
   var $279;
   var $280;
   var $281;
   var $282;
   var $283;
   var $284;
   var $285;
   var $286;
   var $287;
   var $288;
   var $289;
   var $290;
   var $291;
   var $292;
   var $293;
   var $294;
   var $295;
   var $296;
   var $297;
   var $298;
   var $299;
   var $300;
   var $301;
   var $302;
   var $303;
   var $304;
   var $305;
   var $306;
   var $307;
   var $308;
   var $309;
   var $310;
   var $311;
   var $312;
   var $313;
   var $314;
   var $315;
   var $316;
   var $317;
   var $318;
   var $319;
   var $320;
   var $321;
   var $322;
   var $323;
   var $324;
   var $325;
   var $326;
   var $327;
   var $328;
   var $329;
   var $330;
   var $331;
   var $332;
   var $333;
   var $334;
   var $335;
   var $336;
   var $337;
   var $338;
   var $339;
   var $340;
   var $341;
   var $342;
   var $343;
   var $344;
   var $345;
   var $346;
   var $347;
   var $348;
   var $349;
   var $350;
   var $351;
   var $352;
   var $353;
   var $354;
   var $355;
   var $356;
   var $357;
   var $358;
   var $359;
   var $360;
   var $361;
   var $362;
   var $363;
   var $364;
   var $365;
   var $366;
   var $367;
   var $368;
   var $369;
   var $370;
   var $371;
   var $372;
   var $373;
   var $374;
   var $375;
   var $376;
   var $377;
   var $378;
   var $379;
   var $380;
   var $381;
   var $382;
   var $383;
   var $384;
   var $385;
   var $386;
   var $387;
   var $388;
   var $389;
   var $390;
   var $391;
   var $392;
   var $393;
   var $394;
   var $395;
   var $396;
   var $397;
   var $398;
   var $399;
   var $400;
   var $401;
   var $402;
   var $403;
   var $404;
   var $405;
   var $406;
   var $407;
   var $408;
   var $409;
   var $410;
   var $411;
   var $412;
   var $413;
   var $414;
   var $415;
   var $416;
   var $417;
   var $418;
   var $419;
   var $420;
   var $421;
   var $422;
   var $423;
   var $424;
   var $425;
   var $426;
   var $427;
   var $428;
   var $429;
   var $430;
   var $431;
   var $432;
   var $433;
   var $434;
   var $435;
   var $436;
   var $437;
   var $438;
   var $439;
   var $440;
   var $441;
   var $442;
   var $443;
   var $444;
   var $445;
   var $446;
   var $447;
   var $448;
   var $449;
   var $450;
   var $451;
   var $452;
   var $453;
   var $454;
   var $455;
   var $456;
   var $457;
   var $458;
   var $459;
   var $460;
   var $461;
   var $462;
   var $463;
   var $464;
   var $465;
   var $466;
   var $467;
   var $468;
   var $469;
   var $470;
   var $471;
   var $472;
   var $473;
   var $474;
   var $475;
   var $476;
   var $477;
   var $478;
   var $479;
   var $480;
   var $481;
   var $482;
   var $483;
   var $484;
   var $485;
   var $486;
   var $487;
   var $488;
   var $489;
   var $490;
   var $491;
   var $492;
   var $493;
   var $494;
   var $495;
   var $496;
   var $497;
   var $498;
   var $499;
   var $500;
   var $501;
   var $502;
   var $503;
   var $504;
   var $505;
   var $506;
   var $507;
   var $508;
   var $509;
   var $510;
   var $511;
   var $512;
   var $513;
   var $514;
   var $515;
   var $516;
   var $517;
   var $518;
   var $519;
   var $520;
   var $521;
   var $522;
   var $523;
   var $524;
   var $525;
   var $526;
   var $527;
   var $528;
   var $529;
   var $530;
   var $531;
   var $532;
   var $533;
   var $534;
   var $535;
   var $536;
   var $537;
   var $538;
   var $539;
   var $540;
   var $541;
   var $542;
   var $543;
   var $544;
   var $545;
   var $546;
   var $547;
   var $548;
   var $549;
   var $550;
   var $551;
   var $552;
   var $553;
   var $554;
   var $555;
   var $556;
   var $557;
   var $558;
   var $559;
   var $560;
   var $561;
   var $562;
   var $563;
   var $564;
   var $565;
   var $566;
   var $567;
   var $568;
   var $569;
   var $570;
   var $571;
   var $572;
   var $573;
   var $574;
   var $575;
   var $576;
   var $577;
   var $578;
   var $579;
   var $580;
   var $581;
   var $582;
   var $583;
   var $584;
   var $585;
   var $586;
   var $587;
   var $588;
   var $589;
   var $590;
   var $591;
   var $592;
   var $593;
   var $594;
   var $595;
   var $596;
   var $597;
   var $598;
   var $599;
   var $600;
   var $601;
   var $602;
   var $603;
   var $604;
   var $605;
   var $606;
   var $607;
   var $608;
   var $609;
   var $610;
   var $611;
   var $612;
   var $613;
   var $614;
   var $615;
   var $616;
   var $__tmp_i_i_i22;
   var $617;
   var $618;
   var $619;
   var $620;
   var $621;
   var $622;
   var $623;
   var $624;
   var $625;
   var $626;
   var $627;
   var $628;
   var $629;
   var $630;
   var $631;
   var $632;
   var $633;
   var $634;
   var $635;
   var $636;
   var $637;
   var $638;
   var $639;
   var $640;
   var $641;
   var $642;
   var $643;
   var $644;
   var $645;
   var $646;
   var $647;
   var $648;
   var $649;
   var $650;
   var $651;
   var $652;
   var $653;
   var $654;
   var $655;
   var $656;
   var $657;
   var $__a_i_i_i12;
   var $__i_i_i_i13;
   var $658;
   var $659;
   var $660;
   var $661;
   var $662;
   var $663;
   var $664;
   var $665;
   var $666;
   var $667;
   var $668;
   var $669;
   var $670;
   var $671;
   var $672;
   var $673;
   var $674;
   var $675;
   var $676;
   var $677;
   var $678;
   var $679;
   var $680;
   var $681;
   var $682;
   var $__a_i_i_i7;
   var $__i_i_i_i8;
   var $683;
   var $684;
   var $685;
   var $686;
   var $687;
   var $688;
   var $689;
   var $690;
   var $691;
   var $692;
   var $693;
   var $694;
   var $695;
   var $696;
   var $697;
   var $698;
   var $699;
   var $700;
   var $701;
   var $702;
   var $703;
   var $704;
   var $705;
   var $706;
   var $707;
   var $708;
   var $__a_i_i_i3;
   var $__i_i_i_i4;
   var $709;
   var $710;
   var $711;
   var $712;
   var $713;
   var $714;
   var $715;
   var $716;
   var $717;
   var $718;
   var $719;
   var $720;
   var $721;
   var $722;
   var $723;
   var $724;
   var $725;
   var $726;
   var $727;
   var $__a_i_i_i1;
   var $__i_i_i_i2;
   var $728;
   var $729;
   var $730;
   var $731;
   var $732;
   var $733;
   var $734;
   var $735;
   var $736;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $737;
   var $738;
   var $739;
   var $740;
   var $741;
   var $742;
   var $743;
   var $744;
   var $745;
   var $746;
   var $747;
   var $748;
   var $749;
   var $750;
   var $751;
   var $752;
   var $753;
   var $__tmp_i_i_i;
   var $754;
   var $755;
   var $756;
   var $757;
   var $758;
   var $759;
   var $760=(__stackBase__)+(88);
   var $761=(__stackBase__)+(96);
   var $762;
   var $763;
   var $764=(__stackBase__)+(104);
   var $765=(__stackBase__)+(112);
   var $766;
   var $767;
   var $768;
   var $769;
   var $770;
   var $771;
   var $772;
   var $773;
   var $774;
   var $775;
   var $776;
   var $777;
   var $778;
   var $779;
   var $780;
   var $781;
   var $782;
   var $783;
   var $784;
   var $785;
   var $786=(__stackBase__)+(120);
   var $__bz;
   var $__gbuf=(__stackBase__)+(128);
   var $__gb=(__stackBase__)+(528);
   var $787=(__stackBase__)+(536);
   var $__gn=(__stackBase__)+(544);
   var $__ge=(__stackBase__)+(552);
   var $__pat=(__stackBase__)+(560);
   var $__dp=(__stackBase__)+(568);
   var $__ts=(__stackBase__)+(576);
   var $__grp=(__stackBase__)+(584);
   var $__sym=(__stackBase__)+(600);
   var $__psn=(__stackBase__)+(616);
   var $__nsn=(__stackBase__)+(632);
   var $__spaces=(__stackBase__)+(648);
   var $__fd=(__stackBase__)+(664);
   var $788;
   var $789;
   var $__trailing_sign;
   var $__p;
   var $790=(__stackBase__)+(672);
   var $791;
   var $792=(__stackBase__)+(680);
   var $__more_needed;
   var $__sb;
   var $__sym_space_end=(__stackBase__)+(688);
   var $793=(__stackBase__)+(696);
   var $794=(__stackBase__)+(704);
   var $__num_spaces;
   var $795=(__stackBase__)+(712);
   var $796=(__stackBase__)+(720);
   var $797=(__stackBase__)+(728);
   var $798=(__stackBase__)+(736);
   var $799=(__stackBase__)+(744);
   var $800=(__stackBase__)+(752);
   var $801=(__stackBase__)+(760);
   var $__sym_curr_char=(__stackBase__)+(768);
   var $802=(__stackBase__)+(776);
   var $803=(__stackBase__)+(784);
   var $__ng;
   var $__c;
   var $__i;
   var $__et=(__stackBase__)+(792);
   $777=$__b;
   var $804=(($__intl)&(1));
   $778=$804;
   $779=$__loc;
   $780=$__flags;
   $781=$__err;
   $782=$__neg;
   $783=$__ct;
   $784=$__wb;
   $785=$__wn;
   HEAP32[(($786)>>2)]=$__we;
   $__bz=100;
   var $805=(($__gbuf)|0);
   HEAP32[(($787)>>2)]=542;
   $773=$__gb;
   $774=$805;
   $775=$787;
   var $806=$773;
   var $807=$774;
   var $808=$775;
   $770=$806;
   $771=$807;
   $772=$808;
   var $809=$770;
   var $810=(($809)|0);
   var $811=$771;
   var $812=$772;
   $769=$812;
   var $813=$769;
   var $814=HEAP32[(($813)>>2)];
   $766=$810;
   $767=$811;
   $768=$814;
   var $815=$766;
   var $816=$767;
   var $817=$768;
   $763=$815;
   HEAP32[(($764)>>2)]=$816;
   HEAP32[(($765)>>2)]=$817;
   var $818=$763;
   var $819=$818;
   $762=$764;
   var $820=$762;
   var $821=HEAP32[(($820)>>2)];
   $756=$765;
   var $822=$756;
   var $823=HEAP32[(($822)>>2)];
   $759=$819;
   HEAP32[(($760)>>2)]=$821;
   HEAP32[(($761)>>2)]=$823;
   var $824=$759;
   var $825=(($824)|0);
   $758=$760;
   var $826=$758;
   var $827=HEAP32[(($826)>>2)];
   HEAP32[(($825)>>2)]=$827;
   var $828=(($824+4)|0);
   $757=$761;
   var $829=$757;
   var $830=HEAP32[(($829)>>2)];
   HEAP32[(($828)>>2)]=$830;
   $745=$__gb;
   var $831=$745;
   var $832=(($831)|0);
   $744=$832;
   var $833=$744;
   var $834=$833;
   $743=$834;
   var $835=$743;
   var $836=(($835)|0);
   var $837=HEAP32[(($836)>>2)];
   HEAP32[(($__gn)>>2)]=$837;
   var $838=HEAP32[(($__gn)>>2)];
   var $839=(($838+400)|0);
   HEAP32[(($__ge)>>2)]=$839;
   $742=$__grp;
   var $840=$742;
   $741=$840;
   var $841=$741;
   var $842=$841;
   var $843=(($841)|0);
   $740=$843;
   var $844=$740;
   $739=$844;
   var $845=$739;
   var $846=$845;
   $738=$846;
   var $847=$738;
   var $848=$847;
   $737=$848;
   var $849=$737;
   var $850=(($847)|0);
   $736=$841;
   var $851=$736;
   var $852=(($851)|0);
   $735=$852;
   var $853=$735;
   var $854=$853;
   $734=$854;
   var $855=$734;
   var $856=(($855)|0);
   var $857=(($856)|0);
   var $858=$857;
   var $859=(($858)|0);
   $__a_i_i_i=$859;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $861=$__i_i_i_i;
   var $862=(($861)>>>(0)) < 3;
   if ($862) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $864=$__i_i_i_i;
   var $865=$__a_i_i_i;
   var $866=(($865+($864<<2))|0);
   HEAP32[(($866)>>2)]=0;
   var $867=$__i_i_i_i;
   var $868=((($867)+(1))|0);
   $__i_i_i_i=$868;
   label = 2; break;
  case 4: 
   $733=$__sym;
   var $869=$733;
   $732=$869;
   var $870=$732;
   var $871=$870;
   var $872=(($870)|0);
   $731=$872;
   var $873=$731;
   $730=$873;
   var $874=$730;
   var $875=$874;
   $729=$875;
   var $876=$729;
   var $877=$876;
   $728=$877;
   var $878=$728;
   var $879=(($876)|0);
   $727=$870;
   var $880=$727;
   var $881=(($880)|0);
   $726=$881;
   var $882=$726;
   var $883=$882;
   $725=$883;
   var $884=$725;
   var $885=(($884)|0);
   var $886=(($885)|0);
   var $887=$886;
   var $888=(($887)|0);
   $__a_i_i_i1=$888;
   $__i_i_i_i2=0;
   label = 5; break;
  case 5: 
   var $890=$__i_i_i_i2;
   var $891=(($890)>>>(0)) < 3;
   if ($891) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $893=$__i_i_i_i2;
   var $894=$__a_i_i_i1;
   var $895=(($894+($893<<2))|0);
   HEAP32[(($895)>>2)]=0;
   var $896=$__i_i_i_i2;
   var $897=((($896)+(1))|0);
   $__i_i_i_i2=$897;
   label = 5; break;
  case 7: 
   $714=$__psn;
   var $898=$714;
   $713=$898;
   var $899=$713;
   var $900=$899;
   var $901=(($899)|0);
   $712=$901;
   var $902=$712;
   $711=$902;
   var $903=$711;
   var $904=$903;
   $710=$904;
   var $905=$710;
   var $906=$905;
   $709=$906;
   var $907=$709;
   var $908=(($905)|0);
   $708=$899;
   var $909=$708;
   var $910=(($909)|0);
   $707=$910;
   var $911=$707;
   var $912=$911;
   $706=$912;
   var $913=$706;
   var $914=(($913)|0);
   var $915=(($914)|0);
   var $916=$915;
   var $917=(($916)|0);
   $__a_i_i_i3=$917;
   $__i_i_i_i4=0;
   label = 8; break;
  case 8: 
   var $919=$__i_i_i_i4;
   var $920=(($919)>>>(0)) < 3;
   if ($920) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $922=$__i_i_i_i4;
   var $923=$__a_i_i_i3;
   var $924=(($923+($922<<2))|0);
   HEAP32[(($924)>>2)]=0;
   var $925=$__i_i_i_i4;
   var $926=((($925)+(1))|0);
   $__i_i_i_i4=$926;
   label = 8; break;
  case 10: 
   $688=$__nsn;
   var $927=$688;
   $687=$927;
   var $928=$687;
   var $929=$928;
   var $930=(($928)|0);
   $686=$930;
   var $931=$686;
   $685=$931;
   var $932=$685;
   var $933=$932;
   $684=$933;
   var $934=$684;
   var $935=$934;
   $683=$935;
   var $936=$683;
   var $937=(($934)|0);
   $682=$928;
   var $938=$682;
   var $939=(($938)|0);
   $681=$939;
   var $940=$681;
   var $941=$940;
   $680=$941;
   var $942=$680;
   var $943=(($942)|0);
   var $944=(($943)|0);
   var $945=$944;
   var $946=(($945)|0);
   $__a_i_i_i7=$946;
   $__i_i_i_i8=0;
   label = 11; break;
  case 11: 
   var $948=$__i_i_i_i8;
   var $949=(($948)>>>(0)) < 3;
   if ($949) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $951=$__i_i_i_i8;
   var $952=$__a_i_i_i7;
   var $953=(($952+($951<<2))|0);
   HEAP32[(($953)>>2)]=0;
   var $954=$__i_i_i_i8;
   var $955=((($954)+(1))|0);
   $__i_i_i_i8=$955;
   label = 11; break;
  case 13: 
   $663=$__spaces;
   var $956=$663;
   $662=$956;
   var $957=$662;
   var $958=$957;
   var $959=(($957)|0);
   $661=$959;
   var $960=$661;
   $660=$960;
   var $961=$660;
   var $962=$961;
   $659=$962;
   var $963=$659;
   var $964=$963;
   $658=$964;
   var $965=$658;
   var $966=(($963)|0);
   $657=$957;
   var $967=$657;
   var $968=(($967)|0);
   $656=$968;
   var $969=$656;
   var $970=$969;
   $655=$970;
   var $971=$655;
   var $972=(($971)|0);
   var $973=(($972)|0);
   var $974=$973;
   var $975=(($974)|0);
   $__a_i_i_i12=$975;
   $__i_i_i_i13=0;
   label = 14; break;
  case 14: 
   var $977=$__i_i_i_i13;
   var $978=(($977)>>>(0)) < 3;
   if ($978) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $980=$__i_i_i_i13;
   var $981=$__a_i_i_i12;
   var $982=(($981+($980<<2))|0);
   HEAP32[(($982)>>2)]=0;
   var $983=$__i_i_i_i13;
   var $984=((($983)+(1))|0);
   $__i_i_i_i13=$984;
   label = 14; break;
  case 16: 
   var $985=$778;
   var $986=(($985) & 1);
   var $987=$779;
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($986, $987, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 37; break; }
  case 17: 
   $__trailing_sign=0;
   var $989=$784;
   $654=$989;
   var $990=$654;
   var $991=(($990)|0);
   $653=$991;
   var $992=$653;
   var $993=$992;
   $652=$993;
   var $994=$652;
   var $995=(($994)|0);
   var $996=HEAP32[(($995)>>2)];
   var $997=$785;
   HEAP32[(($997)>>2)]=$996;
   $__p=0;
   label = 18; break;
  case 18: 
   var $999=$__p;
   var $1000=(($999)>>>(0)) < 4;
   if ($1000) { label = 19; break; } else { var $1079 = 0;label = 35; break; }
  case 19: 
   var $1002=$777;
   $633=$1002;
   $634=$__e;
   var $1003=$633;
   var $1004=$634;
   $631=$1003;
   $632=$1004;
   var $1005=$631;
   $630=$1005;
   var $1006=$630;
   var $1007=(($1006)|0);
   var $1008=HEAP32[(($1007)>>2)];
   var $1009=(($1008)|(0))!=0;
   if ($1009) { label = 20; break; } else { label = 26; break; }
  case 20: 
   var $1011=(($1006)|0);
   var $1012=HEAP32[(($1011)>>2)];
   $629=$1012;
   var $1013=$629;
   var $1014=(($1013+12)|0);
   var $1015=HEAP32[(($1014)>>2)];
   var $1016=(($1013+16)|0);
   var $1017=HEAP32[(($1016)>>2)];
   var $1018=(($1015)|(0))==(($1017)|(0));
   if ($1018) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $1020=$1013;
   var $1021=HEAP32[(($1020)>>2)];
   var $1022=(($1021+36)|0);
   var $1023=HEAP32[(($1022)>>2)];
   var $1024 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1023]($1013) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 37; break; }
  case 22: 
   $628=$1024;
   label = 24; break;
  case 23: 
   var $1026=(($1013+12)|0);
   var $1027=HEAP32[(($1026)>>2)];
   var $1028=HEAP32[(($1027)>>2)];
   $627=$1028;
   var $1029=$627;
   $628=$1029;
   label = 24; break;
  case 24: 
   var $1030=$628;
   $625=$1030;
   $626=-1;
   var $1031=$625;
   var $1032=$626;
   var $1033=(($1031)|(0))==(($1032)|(0));
   if ($1033) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $1035=(($1006)|0);
   HEAP32[(($1035)>>2)]=0;
   label = 26; break;
  case 26: 
   var $1036=(($1006)|0);
   var $1037=HEAP32[(($1036)>>2)];
   var $1038=(($1037)|(0))==0;
   var $1039=(($1038)&(1));
   var $1040=$632;
   $624=$1040;
   var $1041=$624;
   var $1042=(($1041)|0);
   var $1043=HEAP32[(($1042)>>2)];
   var $1044=(($1043)|(0))!=0;
   if ($1044) { label = 27; break; } else { label = 33; break; }
  case 27: 
   var $1046=(($1041)|0);
   var $1047=HEAP32[(($1046)>>2)];
   $623=$1047;
   var $1048=$623;
   var $1049=(($1048+12)|0);
   var $1050=HEAP32[(($1049)>>2)];
   var $1051=(($1048+16)|0);
   var $1052=HEAP32[(($1051)>>2)];
   var $1053=(($1050)|(0))==(($1052)|(0));
   if ($1053) { label = 28; break; } else { label = 30; break; }
  case 28: 
   var $1055=$1048;
   var $1056=HEAP32[(($1055)>>2)];
   var $1057=(($1056+36)|0);
   var $1058=HEAP32[(($1057)>>2)];
   var $1059 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1058]($1048) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 37; break; }
  case 29: 
   $622=$1059;
   label = 31; break;
  case 30: 
   var $1061=(($1048+12)|0);
   var $1062=HEAP32[(($1061)>>2)];
   var $1063=HEAP32[(($1062)>>2)];
   $621=$1063;
   var $1064=$621;
   $622=$1064;
   label = 31; break;
  case 31: 
   var $1065=$622;
   $619=$1065;
   $620=-1;
   var $1066=$619;
   var $1067=$620;
   var $1068=(($1066)|(0))==(($1067)|(0));
   if ($1068) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $1070=(($1041)|0);
   HEAP32[(($1070)>>2)]=0;
   label = 33; break;
  case 33: 
   var $1071=(($1041)|0);
   var $1072=HEAP32[(($1071)>>2)];
   var $1073=(($1072)|(0))==0;
   var $1074=(($1073)&(1));
   var $1075=(($1039)|(0))==(($1074)|(0));
   var $1076=$1075 ^ 1;
   label = 34; break;
  case 34: 
   var $1079 = $1076;label = 35; break;
  case 35: 
   var $1079;
   if ($1079) { label = 36; break; } else { label = 451; break; }
  case 36: 
   var $1081=$__p;
   var $1082=(($__pat)|0);
   var $1083=(($1082+$1081)|0);
   var $1084=HEAP8[($1083)];
   var $1085=(($1084 << 24) >> 24);
   if ((($1085)|(0))==1) {
    label = 42; break;
   }
   else if ((($1085)|(0))==0) {
    label = 62; break;
   }
   else if ((($1085)|(0))==3) {
    label = 99; break;
   }
   else if ((($1085)|(0))==2) {
    label = 211; break;
   }
   else if ((($1085)|(0))==4) {
    label = 320; break;
   }
   else {
   label = 449; break;
   }
  case 37: 
   var $1087$0 = ___cxa_find_matching_catch(-1, -1); $1087$1 = tempRet0;
   var $1088=$1087$0;
   $788=$1088;
   var $1089=$1087$1;
   $789=$1089;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $618=$__gb;
   var $1090=$618;
   $617=$1090;
   var $1091=$617;
   $615=$1091;
   $616=0;
   var $1092=$615;
   var $1093=(($1092)|0);
   $614=$1093;
   var $1094=$614;
   var $1095=$1094;
   $613=$1095;
   var $1096=$613;
   var $1097=(($1096)|0);
   var $1098=HEAP32[(($1097)>>2)];
   $__tmp_i_i_i22=$1098;
   var $1099=$616;
   var $1100=(($1092)|0);
   $612=$1100;
   var $1101=$612;
   var $1102=$1101;
   $611=$1102;
   var $1103=$611;
   var $1104=(($1103)|0);
   HEAP32[(($1104)>>2)]=$1099;
   var $1105=$__tmp_i_i_i22;
   var $1106=(($1105)|(0))!=0;
   if ($1106) { label = 38; break; } else { label = 41; break; }
  case 38: 
   var $1108=(($1092)|0);
   $610=$1108;
   var $1109=$610;
   var $1110=$1109;
   $609=$1110;
   var $1111=$609;
   var $1112=(($1111+4)|0);
   var $1113=HEAP32[(($1112)>>2)];
   var $1114=$__tmp_i_i_i22;
   var $1115=$1114;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1113]($1115) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 40; break; }
  case 39: 
   label = 41; break;
  case 40: 
   var $1118$0 = ___cxa_find_matching_catch(-1, -1,0); $1118$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 41: 
   label = 503; break;
  case 42: 
   var $1120=$__p;
   var $1121=(($1120)|(0))!=3;
   if ($1121) { label = 43; break; } else { label = 61; break; }
  case 43: 
   var $1123=$783;
   var $1124=$777;
   $608=$1124;
   var $1125=$608;
   var $1126=(($1125)|0);
   var $1127=HEAP32[(($1126)>>2)];
   $607=$1127;
   var $1128=$607;
   var $1129=(($1128+12)|0);
   var $1130=HEAP32[(($1129)>>2)];
   var $1131=(($1128+16)|0);
   var $1132=HEAP32[(($1131)>>2)];
   var $1133=(($1130)|(0))==(($1132)|(0));
   if ($1133) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $1135=$1128;
   var $1136=HEAP32[(($1135)>>2)];
   var $1137=(($1136+36)|0);
   var $1138=HEAP32[(($1137)>>2)];
   var $1139 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1138]($1128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 37; break; }
  case 45: 
   $606=$1139;
   label = 47; break;
  case 46: 
   var $1141=(($1128+12)|0);
   var $1142=HEAP32[(($1141)>>2)];
   var $1143=HEAP32[(($1142)>>2)];
   $605=$1143;
   var $1144=$605;
   $606=$1144;
   label = 47; break;
  case 47: 
   var $1145=$606;
   label = 48; break;
  case 48: 
   $602=$1123;
   $603=8192;
   $604=$1145;
   var $1147=$602;
   var $1148=$1147;
   var $1149=HEAP32[(($1148)>>2)];
   var $1150=(($1149+12)|0);
   var $1151=HEAP32[(($1150)>>2)];
   var $1152=$603;
   var $1153=$604;
   var $1154 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1151]($1147, $1152, $1153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 37; break; }
  case 49: 
   label = 50; break;
  case 50: 
   if ($1154) { label = 51; break; } else { label = 59; break; }
  case 51: 
   var $1157=$777;
   $600=$1157;
   $601=0;
   var $1158=$600;
   var $1159=(($1158)|0);
   var $1160=HEAP32[(($1159)>>2)];
   $599=$1160;
   var $1161=$599;
   var $1162=(($1161+12)|0);
   var $1163=HEAP32[(($1162)>>2)];
   var $1164=(($1161+16)|0);
   var $1165=HEAP32[(($1164)>>2)];
   var $1166=(($1163)|(0))==(($1165)|(0));
   if ($1166) { label = 52; break; } else { label = 54; break; }
  case 52: 
   var $1168=$1161;
   var $1169=HEAP32[(($1168)>>2)];
   var $1170=(($1169+40)|0);
   var $1171=HEAP32[(($1170)>>2)];
   var $1172 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1171]($1161) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 37; break; }
  case 53: 
   $598=$1172;
   label = 55; break;
  case 54: 
   var $1174=(($1161+12)|0);
   var $1175=HEAP32[(($1174)>>2)];
   var $1176=(($1175+4)|0);
   HEAP32[(($1174)>>2)]=$1176;
   var $1177=HEAP32[(($1175)>>2)];
   $597=$1177;
   var $1178=$597;
   $598=$1178;
   label = 55; break;
  case 55: 
   var $1179=$598;
   var $1180=(($1158)|0);
   var $1181=HEAP32[(($1180)>>2)];
   $594=$790;
   $595=$1179;
   $596=$1181;
   var $1182=$594;
   var $1183=$595;
   var $1184=$596;
   $591=$1182;
   $592=$1183;
   $593=$1184;
   var $1185=$591;
   var $1186=(($1185)|0);
   var $1187=$592;
   HEAP32[(($1186)>>2)]=$1187;
   var $1188=(($1185+4)|0);
   var $1189=$593;
   HEAP32[(($1188)>>2)]=$1189;
   label = 56; break;
  case 56: 
   $590=$790;
   var $1191=$590;
   var $1192=(($1191)|0);
   var $1193=HEAP32[(($1192)>>2)];
   label = 57; break;
  case 57: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $1193) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 58; break; } else { label = 37; break; }
  case 58: 
   label = 60; break;
  case 59: 
   var $1197=$781;
   var $1198=HEAP32[(($1197)>>2)];
   var $1199=$1198 | 4;
   HEAP32[(($1197)>>2)]=$1199;
   $776=0;
   $791=1;
   label = 498; break;
  case 60: 
   label = 61; break;
  case 61: 
   label = 62; break;
  case 62: 
   var $1203=$__p;
   var $1204=(($1203)|(0))!=3;
   if ($1204) { label = 63; break; } else { label = 98; break; }
  case 63: 
   label = 64; break;
  case 64: 
   var $1207=$777;
   $588=$1207;
   $589=$__e;
   var $1208=$588;
   var $1209=$589;
   $586=$1208;
   $587=$1209;
   var $1210=$586;
   $585=$1210;
   var $1211=$585;
   var $1212=(($1211)|0);
   var $1213=HEAP32[(($1212)>>2)];
   var $1214=(($1213)|(0))!=0;
   if ($1214) { label = 65; break; } else { label = 71; break; }
  case 65: 
   var $1216=(($1211)|0);
   var $1217=HEAP32[(($1216)>>2)];
   $584=$1217;
   var $1218=$584;
   var $1219=(($1218+12)|0);
   var $1220=HEAP32[(($1219)>>2)];
   var $1221=(($1218+16)|0);
   var $1222=HEAP32[(($1221)>>2)];
   var $1223=(($1220)|(0))==(($1222)|(0));
   if ($1223) { label = 66; break; } else { label = 68; break; }
  case 66: 
   var $1225=$1218;
   var $1226=HEAP32[(($1225)>>2)];
   var $1227=(($1226+36)|0);
   var $1228=HEAP32[(($1227)>>2)];
   var $1229 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1228]($1218) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 67; break; } else { label = 37; break; }
  case 67: 
   $583=$1229;
   label = 69; break;
  case 68: 
   var $1231=(($1218+12)|0);
   var $1232=HEAP32[(($1231)>>2)];
   var $1233=HEAP32[(($1232)>>2)];
   $582=$1233;
   var $1234=$582;
   $583=$1234;
   label = 69; break;
  case 69: 
   var $1235=$583;
   $580=$1235;
   $581=-1;
   var $1236=$580;
   var $1237=$581;
   var $1238=(($1236)|(0))==(($1237)|(0));
   if ($1238) { label = 70; break; } else { label = 71; break; }
  case 70: 
   var $1240=(($1211)|0);
   HEAP32[(($1240)>>2)]=0;
   label = 71; break;
  case 71: 
   var $1241=(($1211)|0);
   var $1242=HEAP32[(($1241)>>2)];
   var $1243=(($1242)|(0))==0;
   var $1244=(($1243)&(1));
   var $1245=$587;
   $579=$1245;
   var $1246=$579;
   var $1247=(($1246)|0);
   var $1248=HEAP32[(($1247)>>2)];
   var $1249=(($1248)|(0))!=0;
   if ($1249) { label = 72; break; } else { label = 78; break; }
  case 72: 
   var $1251=(($1246)|0);
   var $1252=HEAP32[(($1251)>>2)];
   $578=$1252;
   var $1253=$578;
   var $1254=(($1253+12)|0);
   var $1255=HEAP32[(($1254)>>2)];
   var $1256=(($1253+16)|0);
   var $1257=HEAP32[(($1256)>>2)];
   var $1258=(($1255)|(0))==(($1257)|(0));
   if ($1258) { label = 73; break; } else { label = 75; break; }
  case 73: 
   var $1260=$1253;
   var $1261=HEAP32[(($1260)>>2)];
   var $1262=(($1261+36)|0);
   var $1263=HEAP32[(($1262)>>2)];
   var $1264 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1263]($1253) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 74; break; } else { label = 37; break; }
  case 74: 
   $577=$1264;
   label = 76; break;
  case 75: 
   var $1266=(($1253+12)|0);
   var $1267=HEAP32[(($1266)>>2)];
   var $1268=HEAP32[(($1267)>>2)];
   $576=$1268;
   var $1269=$576;
   $577=$1269;
   label = 76; break;
  case 76: 
   var $1270=$577;
   $574=$1270;
   $575=-1;
   var $1271=$574;
   var $1272=$575;
   var $1273=(($1271)|(0))==(($1272)|(0));
   if ($1273) { label = 77; break; } else { label = 78; break; }
  case 77: 
   var $1275=(($1246)|0);
   HEAP32[(($1275)>>2)]=0;
   label = 78; break;
  case 78: 
   var $1276=(($1246)|0);
   var $1277=HEAP32[(($1276)>>2)];
   var $1278=(($1277)|(0))==0;
   var $1279=(($1278)&(1));
   var $1280=(($1244)|(0))==(($1279)|(0));
   var $1281=$1280 ^ 1;
   label = 79; break;
  case 79: 
   if ($1281) { label = 80; break; } else { var $1318 = 0;label = 88; break; }
  case 80: 
   var $1284=$783;
   var $1285=$777;
   $573=$1285;
   var $1286=$573;
   var $1287=(($1286)|0);
   var $1288=HEAP32[(($1287)>>2)];
   $572=$1288;
   var $1289=$572;
   var $1290=(($1289+12)|0);
   var $1291=HEAP32[(($1290)>>2)];
   var $1292=(($1289+16)|0);
   var $1293=HEAP32[(($1292)>>2)];
   var $1294=(($1291)|(0))==(($1293)|(0));
   if ($1294) { label = 81; break; } else { label = 83; break; }
  case 81: 
   var $1296=$1289;
   var $1297=HEAP32[(($1296)>>2)];
   var $1298=(($1297+36)|0);
   var $1299=HEAP32[(($1298)>>2)];
   var $1300 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1299]($1289) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 82; break; } else { label = 37; break; }
  case 82: 
   $571=$1300;
   label = 84; break;
  case 83: 
   var $1302=(($1289+12)|0);
   var $1303=HEAP32[(($1302)>>2)];
   var $1304=HEAP32[(($1303)>>2)];
   $570=$1304;
   var $1305=$570;
   $571=$1305;
   label = 84; break;
  case 84: 
   var $1306=$571;
   label = 85; break;
  case 85: 
   $567=$1284;
   $568=8192;
   $569=$1306;
   var $1308=$567;
   var $1309=$1308;
   var $1310=HEAP32[(($1309)>>2)];
   var $1311=(($1310+12)|0);
   var $1312=HEAP32[(($1311)>>2)];
   var $1313=$568;
   var $1314=$569;
   var $1315 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1312]($1308, $1313, $1314) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 86; break; } else { label = 37; break; }
  case 86: 
   label = 87; break;
  case 87: 
   var $1318 = $1315;label = 88; break;
  case 88: 
   var $1318;
   if ($1318) { label = 89; break; } else { label = 97; break; }
  case 89: 
   var $1320=$777;
   $565=$1320;
   $566=0;
   var $1321=$565;
   var $1322=(($1321)|0);
   var $1323=HEAP32[(($1322)>>2)];
   $564=$1323;
   var $1324=$564;
   var $1325=(($1324+12)|0);
   var $1326=HEAP32[(($1325)>>2)];
   var $1327=(($1324+16)|0);
   var $1328=HEAP32[(($1327)>>2)];
   var $1329=(($1326)|(0))==(($1328)|(0));
   if ($1329) { label = 90; break; } else { label = 92; break; }
  case 90: 
   var $1331=$1324;
   var $1332=HEAP32[(($1331)>>2)];
   var $1333=(($1332+40)|0);
   var $1334=HEAP32[(($1333)>>2)];
   var $1335 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1334]($1324) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 91; break; } else { label = 37; break; }
  case 91: 
   $563=$1335;
   label = 93; break;
  case 92: 
   var $1337=(($1324+12)|0);
   var $1338=HEAP32[(($1337)>>2)];
   var $1339=(($1338+4)|0);
   HEAP32[(($1337)>>2)]=$1339;
   var $1340=HEAP32[(($1338)>>2)];
   $562=$1340;
   var $1341=$562;
   $563=$1341;
   label = 93; break;
  case 93: 
   var $1342=$563;
   var $1343=(($1321)|0);
   var $1344=HEAP32[(($1343)>>2)];
   $559=$792;
   $560=$1342;
   $561=$1344;
   var $1345=$559;
   var $1346=$560;
   var $1347=$561;
   $556=$1345;
   $557=$1346;
   $558=$1347;
   var $1348=$556;
   var $1349=(($1348)|0);
   var $1350=$557;
   HEAP32[(($1349)>>2)]=$1350;
   var $1351=(($1348+4)|0);
   var $1352=$558;
   HEAP32[(($1351)>>2)]=$1352;
   label = 94; break;
  case 94: 
   $555=$792;
   var $1354=$555;
   var $1355=(($1354)|0);
   var $1356=HEAP32[(($1355)>>2)];
   label = 95; break;
  case 95: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $1356) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 96; break; } else { label = 37; break; }
  case 96: 
   label = 64; break;
  case 97: 
   label = 98; break;
  case 98: 
   label = 449; break;
  case 99: 
   $554=$__psn;
   var $1362=$554;
   $553=$1362;
   var $1363=$553;
   var $1364=(($1363)|0);
   $552=$1364;
   var $1365=$552;
   var $1366=$1365;
   $551=$1366;
   var $1367=$551;
   var $1368=(($1367)|0);
   var $1369=(($1368)|0);
   var $1370=$1369;
   var $1371=(($1370)|0);
   var $1372=$1371;
   var $1373=HEAP8[($1372)];
   var $1374=(($1373)&(255));
   var $1375=$1374 & 1;
   var $1376=(($1375)|(0))!=0;
   if ($1376) { label = 100; break; } else { label = 101; break; }
  case 100: 
   $547=$1362;
   var $1378=$547;
   var $1379=(($1378)|0);
   $546=$1379;
   var $1380=$546;
   var $1381=$1380;
   $545=$1381;
   var $1382=$545;
   var $1383=(($1382)|0);
   var $1384=(($1383)|0);
   var $1385=$1384;
   var $1386=(($1385+4)|0);
   var $1387=HEAP32[(($1386)>>2)];
   var $1402 = $1387;label = 102; break;
  case 101: 
   $550=$1362;
   var $1389=$550;
   var $1390=(($1389)|0);
   $549=$1390;
   var $1391=$549;
   var $1392=$1391;
   $548=$1392;
   var $1393=$548;
   var $1394=(($1393)|0);
   var $1395=(($1394)|0);
   var $1396=$1395;
   var $1397=(($1396)|0);
   var $1398=$1397;
   var $1399=HEAP8[($1398)];
   var $1400=(($1399)&(255));
   var $1401=$1400 >> 1;
   var $1402 = $1401;label = 102; break;
  case 102: 
   var $1402;
   $544=$__nsn;
   var $1403=$544;
   $543=$1403;
   var $1404=$543;
   var $1405=(($1404)|0);
   $542=$1405;
   var $1406=$542;
   var $1407=$1406;
   $541=$1407;
   var $1408=$541;
   var $1409=(($1408)|0);
   var $1410=(($1409)|0);
   var $1411=$1410;
   var $1412=(($1411)|0);
   var $1413=$1412;
   var $1414=HEAP8[($1413)];
   var $1415=(($1414)&(255));
   var $1416=$1415 & 1;
   var $1417=(($1416)|(0))!=0;
   if ($1417) { label = 103; break; } else { label = 104; break; }
  case 103: 
   $537=$1403;
   var $1419=$537;
   var $1420=(($1419)|0);
   $536=$1420;
   var $1421=$536;
   var $1422=$1421;
   $535=$1422;
   var $1423=$535;
   var $1424=(($1423)|0);
   var $1425=(($1424)|0);
   var $1426=$1425;
   var $1427=(($1426+4)|0);
   var $1428=HEAP32[(($1427)>>2)];
   var $1443 = $1428;label = 105; break;
  case 104: 
   $540=$1403;
   var $1430=$540;
   var $1431=(($1430)|0);
   $539=$1431;
   var $1432=$539;
   var $1433=$1432;
   $538=$1433;
   var $1434=$538;
   var $1435=(($1434)|0);
   var $1436=(($1435)|0);
   var $1437=$1436;
   var $1438=(($1437)|0);
   var $1439=$1438;
   var $1440=HEAP8[($1439)];
   var $1441=(($1440)&(255));
   var $1442=$1441 >> 1;
   var $1443 = $1442;label = 105; break;
  case 105: 
   var $1443;
   var $1444=((($1402)+($1443))|0);
   var $1445=(($1444)>>>(0)) > 0;
   if ($1445) { label = 106; break; } else { label = 210; break; }
  case 106: 
   $530=$__psn;
   var $1447=$530;
   $529=$1447;
   var $1448=$529;
   var $1449=(($1448)|0);
   $528=$1449;
   var $1450=$528;
   var $1451=$1450;
   $527=$1451;
   var $1452=$527;
   var $1453=(($1452)|0);
   var $1454=(($1453)|0);
   var $1455=$1454;
   var $1456=(($1455)|0);
   var $1457=$1456;
   var $1458=HEAP8[($1457)];
   var $1459=(($1458)&(255));
   var $1460=$1459 & 1;
   var $1461=(($1460)|(0))!=0;
   if ($1461) { label = 107; break; } else { label = 108; break; }
  case 107: 
   $523=$1447;
   var $1463=$523;
   var $1464=(($1463)|0);
   $522=$1464;
   var $1465=$522;
   var $1466=$1465;
   $521=$1466;
   var $1467=$521;
   var $1468=(($1467)|0);
   var $1469=(($1468)|0);
   var $1470=$1469;
   var $1471=(($1470+4)|0);
   var $1472=HEAP32[(($1471)>>2)];
   var $1487 = $1472;label = 109; break;
  case 108: 
   $526=$1447;
   var $1474=$526;
   var $1475=(($1474)|0);
   $525=$1475;
   var $1476=$525;
   var $1477=$1476;
   $524=$1477;
   var $1478=$524;
   var $1479=(($1478)|0);
   var $1480=(($1479)|0);
   var $1481=$1480;
   var $1482=(($1481)|0);
   var $1483=$1482;
   var $1484=HEAP8[($1483)];
   var $1485=(($1484)&(255));
   var $1486=$1485 >> 1;
   var $1487 = $1486;label = 109; break;
  case 109: 
   var $1487;
   var $1488=(($1487)|(0))==0;
   if ($1488) { label = 114; break; } else { label = 110; break; }
  case 110: 
   $520=$__nsn;
   var $1490=$520;
   $519=$1490;
   var $1491=$519;
   var $1492=(($1491)|0);
   $518=$1492;
   var $1493=$518;
   var $1494=$1493;
   $517=$1494;
   var $1495=$517;
   var $1496=(($1495)|0);
   var $1497=(($1496)|0);
   var $1498=$1497;
   var $1499=(($1498)|0);
   var $1500=$1499;
   var $1501=HEAP8[($1500)];
   var $1502=(($1501)&(255));
   var $1503=$1502 & 1;
   var $1504=(($1503)|(0))!=0;
   if ($1504) { label = 111; break; } else { label = 112; break; }
  case 111: 
   $513=$1490;
   var $1506=$513;
   var $1507=(($1506)|0);
   $512=$1507;
   var $1508=$512;
   var $1509=$1508;
   $511=$1509;
   var $1510=$511;
   var $1511=(($1510)|0);
   var $1512=(($1511)|0);
   var $1513=$1512;
   var $1514=(($1513+4)|0);
   var $1515=HEAP32[(($1514)>>2)];
   var $1530 = $1515;label = 113; break;
  case 112: 
   $516=$1490;
   var $1517=$516;
   var $1518=(($1517)|0);
   $515=$1518;
   var $1519=$515;
   var $1520=$1519;
   $514=$1520;
   var $1521=$514;
   var $1522=(($1521)|0);
   var $1523=(($1522)|0);
   var $1524=$1523;
   var $1525=(($1524)|0);
   var $1526=$1525;
   var $1527=HEAP8[($1526)];
   var $1528=(($1527)&(255));
   var $1529=$1528 >> 1;
   var $1530 = $1529;label = 113; break;
  case 113: 
   var $1530;
   var $1531=(($1530)|(0))==0;
   if ($1531) { label = 114; break; } else { label = 164; break; }
  case 114: 
   $507=$__psn;
   var $1533=$507;
   $506=$1533;
   var $1534=$506;
   var $1535=(($1534)|0);
   $505=$1535;
   var $1536=$505;
   var $1537=$1536;
   $504=$1537;
   var $1538=$504;
   var $1539=(($1538)|0);
   var $1540=(($1539)|0);
   var $1541=$1540;
   var $1542=(($1541)|0);
   var $1543=$1542;
   var $1544=HEAP8[($1543)];
   var $1545=(($1544)&(255));
   var $1546=$1545 & 1;
   var $1547=(($1546)|(0))!=0;
   if ($1547) { label = 115; break; } else { label = 116; break; }
  case 115: 
   $500=$1533;
   var $1549=$500;
   var $1550=(($1549)|0);
   $499=$1550;
   var $1551=$499;
   var $1552=$1551;
   $498=$1552;
   var $1553=$498;
   var $1554=(($1553)|0);
   var $1555=(($1554)|0);
   var $1556=$1555;
   var $1557=(($1556+4)|0);
   var $1558=HEAP32[(($1557)>>2)];
   var $1573 = $1558;label = 117; break;
  case 116: 
   $503=$1533;
   var $1560=$503;
   var $1561=(($1560)|0);
   $502=$1561;
   var $1562=$502;
   var $1563=$1562;
   $501=$1563;
   var $1564=$501;
   var $1565=(($1564)|0);
   var $1566=(($1565)|0);
   var $1567=$1566;
   var $1568=(($1567)|0);
   var $1569=$1568;
   var $1570=HEAP8[($1569)];
   var $1571=(($1570)&(255));
   var $1572=$1571 >> 1;
   var $1573 = $1572;label = 117; break;
  case 117: 
   var $1573;
   var $1574=(($1573)>>>(0)) > 0;
   if ($1574) { label = 118; break; } else { label = 141; break; }
  case 118: 
   var $1576=$777;
   $493=$1576;
   var $1577=$493;
   var $1578=(($1577)|0);
   var $1579=HEAP32[(($1578)>>2)];
   $492=$1579;
   var $1580=$492;
   var $1581=(($1580+12)|0);
   var $1582=HEAP32[(($1581)>>2)];
   var $1583=(($1580+16)|0);
   var $1584=HEAP32[(($1583)>>2)];
   var $1585=(($1582)|(0))==(($1584)|(0));
   if ($1585) { label = 119; break; } else { label = 121; break; }
  case 119: 
   var $1587=$1580;
   var $1588=HEAP32[(($1587)>>2)];
   var $1589=(($1588+36)|0);
   var $1590=HEAP32[(($1589)>>2)];
   var $1591 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1590]($1580) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 120; break; } else { label = 37; break; }
  case 120: 
   $491=$1591;
   label = 122; break;
  case 121: 
   var $1593=(($1580+12)|0);
   var $1594=HEAP32[(($1593)>>2)];
   var $1595=HEAP32[(($1594)>>2)];
   $490=$1595;
   var $1596=$490;
   $491=$1596;
   label = 122; break;
  case 122: 
   var $1597=$491;
   label = 123; break;
  case 123: 
   $488=$__psn;
   $489=0;
   var $1599=$488;
   $487=$1599;
   var $1600=$487;
   $486=$1600;
   var $1601=$486;
   var $1602=(($1601)|0);
   $485=$1602;
   var $1603=$485;
   var $1604=$1603;
   $484=$1604;
   var $1605=$484;
   var $1606=(($1605)|0);
   var $1607=(($1606)|0);
   var $1608=$1607;
   var $1609=(($1608)|0);
   var $1610=$1609;
   var $1611=HEAP8[($1610)];
   var $1612=(($1611)&(255));
   var $1613=$1612 & 1;
   var $1614=(($1613)|(0))!=0;
   if ($1614) { label = 124; break; } else { label = 125; break; }
  case 124: 
   $480=$1600;
   var $1616=$480;
   var $1617=(($1616)|0);
   $479=$1617;
   var $1618=$479;
   var $1619=$1618;
   $478=$1619;
   var $1620=$478;
   var $1621=(($1620)|0);
   var $1622=(($1621)|0);
   var $1623=$1622;
   var $1624=(($1623+8)|0);
   var $1625=HEAP32[(($1624)>>2)];
   var $1637 = $1625;label = 126; break;
  case 125: 
   $483=$1600;
   var $1627=$483;
   var $1628=(($1627)|0);
   $482=$1628;
   var $1629=$482;
   var $1630=$1629;
   $481=$1630;
   var $1631=$481;
   var $1632=(($1631)|0);
   var $1633=(($1632)|0);
   var $1634=$1633;
   var $1635=(($1634+4)|0);
   var $1636=(($1635)|0);
   var $1637 = $1636;label = 126; break;
  case 126: 
   var $1637;
   var $1638=$489;
   var $1639=(($1637+($1638<<2))|0);
   label = 127; break;
  case 127: 
   var $1641=HEAP32[(($1639)>>2)];
   var $1642=(($1597)|(0))==(($1641)|(0));
   if ($1642) { label = 128; break; } else { label = 139; break; }
  case 128: 
   var $1644=$777;
   $461=$1644;
   var $1645=$461;
   var $1646=(($1645)|0);
   var $1647=HEAP32[(($1646)>>2)];
   $460=$1647;
   var $1648=$460;
   var $1649=(($1648+12)|0);
   var $1650=HEAP32[(($1649)>>2)];
   var $1651=(($1648+16)|0);
   var $1652=HEAP32[(($1651)>>2)];
   var $1653=(($1650)|(0))==(($1652)|(0));
   if ($1653) { label = 129; break; } else { label = 131; break; }
  case 129: 
   var $1655=$1648;
   var $1656=HEAP32[(($1655)>>2)];
   var $1657=(($1656+40)|0);
   var $1658=HEAP32[(($1657)>>2)];
   var $1659 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1658]($1648) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 130; break; } else { label = 37; break; }
  case 130: 
   $459=$1659;
   label = 132; break;
  case 131: 
   var $1661=(($1648+12)|0);
   var $1662=HEAP32[(($1661)>>2)];
   var $1663=(($1662+4)|0);
   HEAP32[(($1661)>>2)]=$1663;
   var $1664=HEAP32[(($1662)>>2)];
   $458=$1664;
   var $1665=$458;
   $459=$1665;
   label = 132; break;
  case 132: 
   var $1666=$459;
   label = 133; break;
  case 133: 
   $457=$__psn;
   var $1668=$457;
   $456=$1668;
   var $1669=$456;
   var $1670=(($1669)|0);
   $455=$1670;
   var $1671=$455;
   var $1672=$1671;
   $454=$1672;
   var $1673=$454;
   var $1674=(($1673)|0);
   var $1675=(($1674)|0);
   var $1676=$1675;
   var $1677=(($1676)|0);
   var $1678=$1677;
   var $1679=HEAP8[($1678)];
   var $1680=(($1679)&(255));
   var $1681=$1680 & 1;
   var $1682=(($1681)|(0))!=0;
   if ($1682) { label = 134; break; } else { label = 135; break; }
  case 134: 
   $450=$1668;
   var $1684=$450;
   var $1685=(($1684)|0);
   $449=$1685;
   var $1686=$449;
   var $1687=$1686;
   $448=$1687;
   var $1688=$448;
   var $1689=(($1688)|0);
   var $1690=(($1689)|0);
   var $1691=$1690;
   var $1692=(($1691+4)|0);
   var $1693=HEAP32[(($1692)>>2)];
   var $1708 = $1693;label = 136; break;
  case 135: 
   $453=$1668;
   var $1695=$453;
   var $1696=(($1695)|0);
   $452=$1696;
   var $1697=$452;
   var $1698=$1697;
   $451=$1698;
   var $1699=$451;
   var $1700=(($1699)|0);
   var $1701=(($1700)|0);
   var $1702=$1701;
   var $1703=(($1702)|0);
   var $1704=$1703;
   var $1705=HEAP8[($1704)];
   var $1706=(($1705)&(255));
   var $1707=$1706 >> 1;
   var $1708 = $1707;label = 136; break;
  case 136: 
   var $1708;
   var $1709=(($1708)>>>(0)) > 1;
   if ($1709) { label = 137; break; } else { label = 138; break; }
  case 137: 
   $__trailing_sign=$__psn;
   label = 138; break;
  case 138: 
   label = 140; break;
  case 139: 
   var $1713=$782;
   HEAP8[($1713)]=1;
   label = 140; break;
  case 140: 
   label = 163; break;
  case 141: 
   var $1716=$777;
   $447=$1716;
   var $1717=$447;
   var $1718=(($1717)|0);
   var $1719=HEAP32[(($1718)>>2)];
   $446=$1719;
   var $1720=$446;
   var $1721=(($1720+12)|0);
   var $1722=HEAP32[(($1721)>>2)];
   var $1723=(($1720+16)|0);
   var $1724=HEAP32[(($1723)>>2)];
   var $1725=(($1722)|(0))==(($1724)|(0));
   if ($1725) { label = 142; break; } else { label = 144; break; }
  case 142: 
   var $1727=$1720;
   var $1728=HEAP32[(($1727)>>2)];
   var $1729=(($1728+36)|0);
   var $1730=HEAP32[(($1729)>>2)];
   var $1731 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1730]($1720) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 143; break; } else { label = 37; break; }
  case 143: 
   $445=$1731;
   label = 145; break;
  case 144: 
   var $1733=(($1720+12)|0);
   var $1734=HEAP32[(($1733)>>2)];
   var $1735=HEAP32[(($1734)>>2)];
   $444=$1735;
   var $1736=$444;
   $445=$1736;
   label = 145; break;
  case 145: 
   var $1737=$445;
   label = 146; break;
  case 146: 
   $442=$__nsn;
   $443=0;
   var $1739=$442;
   $441=$1739;
   var $1740=$441;
   $440=$1740;
   var $1741=$440;
   var $1742=(($1741)|0);
   $439=$1742;
   var $1743=$439;
   var $1744=$1743;
   $438=$1744;
   var $1745=$438;
   var $1746=(($1745)|0);
   var $1747=(($1746)|0);
   var $1748=$1747;
   var $1749=(($1748)|0);
   var $1750=$1749;
   var $1751=HEAP8[($1750)];
   var $1752=(($1751)&(255));
   var $1753=$1752 & 1;
   var $1754=(($1753)|(0))!=0;
   if ($1754) { label = 147; break; } else { label = 148; break; }
  case 147: 
   $434=$1740;
   var $1756=$434;
   var $1757=(($1756)|0);
   $433=$1757;
   var $1758=$433;
   var $1759=$1758;
   $432=$1759;
   var $1760=$432;
   var $1761=(($1760)|0);
   var $1762=(($1761)|0);
   var $1763=$1762;
   var $1764=(($1763+8)|0);
   var $1765=HEAP32[(($1764)>>2)];
   var $1777 = $1765;label = 149; break;
  case 148: 
   $437=$1740;
   var $1767=$437;
   var $1768=(($1767)|0);
   $436=$1768;
   var $1769=$436;
   var $1770=$1769;
   $435=$1770;
   var $1771=$435;
   var $1772=(($1771)|0);
   var $1773=(($1772)|0);
   var $1774=$1773;
   var $1775=(($1774+4)|0);
   var $1776=(($1775)|0);
   var $1777 = $1776;label = 149; break;
  case 149: 
   var $1777;
   var $1778=$443;
   var $1779=(($1777+($1778<<2))|0);
   label = 150; break;
  case 150: 
   var $1781=HEAP32[(($1779)>>2)];
   var $1782=(($1737)|(0))==(($1781)|(0));
   if ($1782) { label = 151; break; } else { label = 162; break; }
  case 151: 
   var $1784=$777;
   $427=$1784;
   var $1785=$427;
   var $1786=(($1785)|0);
   var $1787=HEAP32[(($1786)>>2)];
   $426=$1787;
   var $1788=$426;
   var $1789=(($1788+12)|0);
   var $1790=HEAP32[(($1789)>>2)];
   var $1791=(($1788+16)|0);
   var $1792=HEAP32[(($1791)>>2)];
   var $1793=(($1790)|(0))==(($1792)|(0));
   if ($1793) { label = 152; break; } else { label = 154; break; }
  case 152: 
   var $1795=$1788;
   var $1796=HEAP32[(($1795)>>2)];
   var $1797=(($1796+40)|0);
   var $1798=HEAP32[(($1797)>>2)];
   var $1799 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1798]($1788) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 153; break; } else { label = 37; break; }
  case 153: 
   $425=$1799;
   label = 155; break;
  case 154: 
   var $1801=(($1788+12)|0);
   var $1802=HEAP32[(($1801)>>2)];
   var $1803=(($1802+4)|0);
   HEAP32[(($1801)>>2)]=$1803;
   var $1804=HEAP32[(($1802)>>2)];
   $424=$1804;
   var $1805=$424;
   $425=$1805;
   label = 155; break;
  case 155: 
   var $1806=$425;
   label = 156; break;
  case 156: 
   var $1808=$782;
   HEAP8[($1808)]=1;
   $423=$__nsn;
   var $1809=$423;
   $422=$1809;
   var $1810=$422;
   var $1811=(($1810)|0);
   $421=$1811;
   var $1812=$421;
   var $1813=$1812;
   $420=$1813;
   var $1814=$420;
   var $1815=(($1814)|0);
   var $1816=(($1815)|0);
   var $1817=$1816;
   var $1818=(($1817)|0);
   var $1819=$1818;
   var $1820=HEAP8[($1819)];
   var $1821=(($1820)&(255));
   var $1822=$1821 & 1;
   var $1823=(($1822)|(0))!=0;
   if ($1823) { label = 157; break; } else { label = 158; break; }
  case 157: 
   $416=$1809;
   var $1825=$416;
   var $1826=(($1825)|0);
   $415=$1826;
   var $1827=$415;
   var $1828=$1827;
   $414=$1828;
   var $1829=$414;
   var $1830=(($1829)|0);
   var $1831=(($1830)|0);
   var $1832=$1831;
   var $1833=(($1832+4)|0);
   var $1834=HEAP32[(($1833)>>2)];
   var $1849 = $1834;label = 159; break;
  case 158: 
   $419=$1809;
   var $1836=$419;
   var $1837=(($1836)|0);
   $418=$1837;
   var $1838=$418;
   var $1839=$1838;
   $417=$1839;
   var $1840=$417;
   var $1841=(($1840)|0);
   var $1842=(($1841)|0);
   var $1843=$1842;
   var $1844=(($1843)|0);
   var $1845=$1844;
   var $1846=HEAP8[($1845)];
   var $1847=(($1846)&(255));
   var $1848=$1847 >> 1;
   var $1849 = $1848;label = 159; break;
  case 159: 
   var $1849;
   var $1850=(($1849)>>>(0)) > 1;
   if ($1850) { label = 160; break; } else { label = 161; break; }
  case 160: 
   $__trailing_sign=$__nsn;
   label = 161; break;
  case 161: 
   label = 162; break;
  case 162: 
   label = 163; break;
  case 163: 
   label = 209; break;
  case 164: 
   var $1856=$777;
   $409=$1856;
   var $1857=$409;
   var $1858=(($1857)|0);
   var $1859=HEAP32[(($1858)>>2)];
   $408=$1859;
   var $1860=$408;
   var $1861=(($1860+12)|0);
   var $1862=HEAP32[(($1861)>>2)];
   var $1863=(($1860+16)|0);
   var $1864=HEAP32[(($1863)>>2)];
   var $1865=(($1862)|(0))==(($1864)|(0));
   if ($1865) { label = 165; break; } else { label = 167; break; }
  case 165: 
   var $1867=$1860;
   var $1868=HEAP32[(($1867)>>2)];
   var $1869=(($1868+36)|0);
   var $1870=HEAP32[(($1869)>>2)];
   var $1871 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1870]($1860) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 166; break; } else { label = 37; break; }
  case 166: 
   $407=$1871;
   label = 168; break;
  case 167: 
   var $1873=(($1860+12)|0);
   var $1874=HEAP32[(($1873)>>2)];
   var $1875=HEAP32[(($1874)>>2)];
   $406=$1875;
   var $1876=$406;
   $407=$1876;
   label = 168; break;
  case 168: 
   var $1877=$407;
   label = 169; break;
  case 169: 
   $404=$__psn;
   $405=0;
   var $1879=$404;
   $403=$1879;
   var $1880=$403;
   $402=$1880;
   var $1881=$402;
   var $1882=(($1881)|0);
   $401=$1882;
   var $1883=$401;
   var $1884=$1883;
   $400=$1884;
   var $1885=$400;
   var $1886=(($1885)|0);
   var $1887=(($1886)|0);
   var $1888=$1887;
   var $1889=(($1888)|0);
   var $1890=$1889;
   var $1891=HEAP8[($1890)];
   var $1892=(($1891)&(255));
   var $1893=$1892 & 1;
   var $1894=(($1893)|(0))!=0;
   if ($1894) { label = 170; break; } else { label = 171; break; }
  case 170: 
   $396=$1880;
   var $1896=$396;
   var $1897=(($1896)|0);
   $395=$1897;
   var $1898=$395;
   var $1899=$1898;
   $394=$1899;
   var $1900=$394;
   var $1901=(($1900)|0);
   var $1902=(($1901)|0);
   var $1903=$1902;
   var $1904=(($1903+8)|0);
   var $1905=HEAP32[(($1904)>>2)];
   var $1917 = $1905;label = 172; break;
  case 171: 
   $399=$1880;
   var $1907=$399;
   var $1908=(($1907)|0);
   $398=$1908;
   var $1909=$398;
   var $1910=$1909;
   $397=$1910;
   var $1911=$397;
   var $1912=(($1911)|0);
   var $1913=(($1912)|0);
   var $1914=$1913;
   var $1915=(($1914+4)|0);
   var $1916=(($1915)|0);
   var $1917 = $1916;label = 172; break;
  case 172: 
   var $1917;
   var $1918=$405;
   var $1919=(($1917+($1918<<2))|0);
   label = 173; break;
  case 173: 
   var $1921=HEAP32[(($1919)>>2)];
   var $1922=(($1877)|(0))==(($1921)|(0));
   if ($1922) { label = 174; break; } else { label = 185; break; }
  case 174: 
   var $1924=$777;
   $377=$1924;
   var $1925=$377;
   var $1926=(($1925)|0);
   var $1927=HEAP32[(($1926)>>2)];
   $376=$1927;
   var $1928=$376;
   var $1929=(($1928+12)|0);
   var $1930=HEAP32[(($1929)>>2)];
   var $1931=(($1928+16)|0);
   var $1932=HEAP32[(($1931)>>2)];
   var $1933=(($1930)|(0))==(($1932)|(0));
   if ($1933) { label = 175; break; } else { label = 177; break; }
  case 175: 
   var $1935=$1928;
   var $1936=HEAP32[(($1935)>>2)];
   var $1937=(($1936+40)|0);
   var $1938=HEAP32[(($1937)>>2)];
   var $1939 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1938]($1928) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 176; break; } else { label = 37; break; }
  case 176: 
   $375=$1939;
   label = 178; break;
  case 177: 
   var $1941=(($1928+12)|0);
   var $1942=HEAP32[(($1941)>>2)];
   var $1943=(($1942+4)|0);
   HEAP32[(($1941)>>2)]=$1943;
   var $1944=HEAP32[(($1942)>>2)];
   $374=$1944;
   var $1945=$374;
   $375=$1945;
   label = 178; break;
  case 178: 
   var $1946=$375;
   label = 179; break;
  case 179: 
   $373=$__psn;
   var $1948=$373;
   $372=$1948;
   var $1949=$372;
   var $1950=(($1949)|0);
   $371=$1950;
   var $1951=$371;
   var $1952=$1951;
   $370=$1952;
   var $1953=$370;
   var $1954=(($1953)|0);
   var $1955=(($1954)|0);
   var $1956=$1955;
   var $1957=(($1956)|0);
   var $1958=$1957;
   var $1959=HEAP8[($1958)];
   var $1960=(($1959)&(255));
   var $1961=$1960 & 1;
   var $1962=(($1961)|(0))!=0;
   if ($1962) { label = 180; break; } else { label = 181; break; }
  case 180: 
   $366=$1948;
   var $1964=$366;
   var $1965=(($1964)|0);
   $365=$1965;
   var $1966=$365;
   var $1967=$1966;
   $364=$1967;
   var $1968=$364;
   var $1969=(($1968)|0);
   var $1970=(($1969)|0);
   var $1971=$1970;
   var $1972=(($1971+4)|0);
   var $1973=HEAP32[(($1972)>>2)];
   var $1988 = $1973;label = 182; break;
  case 181: 
   $369=$1948;
   var $1975=$369;
   var $1976=(($1975)|0);
   $368=$1976;
   var $1977=$368;
   var $1978=$1977;
   $367=$1978;
   var $1979=$367;
   var $1980=(($1979)|0);
   var $1981=(($1980)|0);
   var $1982=$1981;
   var $1983=(($1982)|0);
   var $1984=$1983;
   var $1985=HEAP8[($1984)];
   var $1986=(($1985)&(255));
   var $1987=$1986 >> 1;
   var $1988 = $1987;label = 182; break;
  case 182: 
   var $1988;
   var $1989=(($1988)>>>(0)) > 1;
   if ($1989) { label = 183; break; } else { label = 184; break; }
  case 183: 
   $__trailing_sign=$__psn;
   label = 184; break;
  case 184: 
   label = 208; break;
  case 185: 
   var $1993=$777;
   $363=$1993;
   var $1994=$363;
   var $1995=(($1994)|0);
   var $1996=HEAP32[(($1995)>>2)];
   $362=$1996;
   var $1997=$362;
   var $1998=(($1997+12)|0);
   var $1999=HEAP32[(($1998)>>2)];
   var $2000=(($1997+16)|0);
   var $2001=HEAP32[(($2000)>>2)];
   var $2002=(($1999)|(0))==(($2001)|(0));
   if ($2002) { label = 186; break; } else { label = 188; break; }
  case 186: 
   var $2004=$1997;
   var $2005=HEAP32[(($2004)>>2)];
   var $2006=(($2005+36)|0);
   var $2007=HEAP32[(($2006)>>2)];
   var $2008 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2007]($1997) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 187; break; } else { label = 37; break; }
  case 187: 
   $361=$2008;
   label = 189; break;
  case 188: 
   var $2010=(($1997+12)|0);
   var $2011=HEAP32[(($2010)>>2)];
   var $2012=HEAP32[(($2011)>>2)];
   $360=$2012;
   var $2013=$360;
   $361=$2013;
   label = 189; break;
  case 189: 
   var $2014=$361;
   label = 190; break;
  case 190: 
   $358=$__nsn;
   $359=0;
   var $2016=$358;
   $357=$2016;
   var $2017=$357;
   $356=$2017;
   var $2018=$356;
   var $2019=(($2018)|0);
   $355=$2019;
   var $2020=$355;
   var $2021=$2020;
   $354=$2021;
   var $2022=$354;
   var $2023=(($2022)|0);
   var $2024=(($2023)|0);
   var $2025=$2024;
   var $2026=(($2025)|0);
   var $2027=$2026;
   var $2028=HEAP8[($2027)];
   var $2029=(($2028)&(255));
   var $2030=$2029 & 1;
   var $2031=(($2030)|(0))!=0;
   if ($2031) { label = 191; break; } else { label = 192; break; }
  case 191: 
   $350=$2017;
   var $2033=$350;
   var $2034=(($2033)|0);
   $349=$2034;
   var $2035=$349;
   var $2036=$2035;
   $348=$2036;
   var $2037=$348;
   var $2038=(($2037)|0);
   var $2039=(($2038)|0);
   var $2040=$2039;
   var $2041=(($2040+8)|0);
   var $2042=HEAP32[(($2041)>>2)];
   var $2054 = $2042;label = 193; break;
  case 192: 
   $353=$2017;
   var $2044=$353;
   var $2045=(($2044)|0);
   $352=$2045;
   var $2046=$352;
   var $2047=$2046;
   $351=$2047;
   var $2048=$351;
   var $2049=(($2048)|0);
   var $2050=(($2049)|0);
   var $2051=$2050;
   var $2052=(($2051+4)|0);
   var $2053=(($2052)|0);
   var $2054 = $2053;label = 193; break;
  case 193: 
   var $2054;
   var $2055=$359;
   var $2056=(($2054+($2055<<2))|0);
   label = 194; break;
  case 194: 
   var $2058=HEAP32[(($2056)>>2)];
   var $2059=(($2014)|(0))==(($2058)|(0));
   if ($2059) { label = 195; break; } else { label = 206; break; }
  case 195: 
   var $2061=$777;
   $347=$2061;
   var $2062=$347;
   var $2063=(($2062)|0);
   var $2064=HEAP32[(($2063)>>2)];
   $346=$2064;
   var $2065=$346;
   var $2066=(($2065+12)|0);
   var $2067=HEAP32[(($2066)>>2)];
   var $2068=(($2065+16)|0);
   var $2069=HEAP32[(($2068)>>2)];
   var $2070=(($2067)|(0))==(($2069)|(0));
   if ($2070) { label = 196; break; } else { label = 198; break; }
  case 196: 
   var $2072=$2065;
   var $2073=HEAP32[(($2072)>>2)];
   var $2074=(($2073+40)|0);
   var $2075=HEAP32[(($2074)>>2)];
   var $2076 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2075]($2065) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 197; break; } else { label = 37; break; }
  case 197: 
   $345=$2076;
   label = 199; break;
  case 198: 
   var $2078=(($2065+12)|0);
   var $2079=HEAP32[(($2078)>>2)];
   var $2080=(($2079+4)|0);
   HEAP32[(($2078)>>2)]=$2080;
   var $2081=HEAP32[(($2079)>>2)];
   $344=$2081;
   var $2082=$344;
   $345=$2082;
   label = 199; break;
  case 199: 
   var $2083=$345;
   label = 200; break;
  case 200: 
   var $2085=$782;
   HEAP8[($2085)]=1;
   $343=$__nsn;
   var $2086=$343;
   $342=$2086;
   var $2087=$342;
   var $2088=(($2087)|0);
   $341=$2088;
   var $2089=$341;
   var $2090=$2089;
   $340=$2090;
   var $2091=$340;
   var $2092=(($2091)|0);
   var $2093=(($2092)|0);
   var $2094=$2093;
   var $2095=(($2094)|0);
   var $2096=$2095;
   var $2097=HEAP8[($2096)];
   var $2098=(($2097)&(255));
   var $2099=$2098 & 1;
   var $2100=(($2099)|(0))!=0;
   if ($2100) { label = 201; break; } else { label = 202; break; }
  case 201: 
   $336=$2086;
   var $2102=$336;
   var $2103=(($2102)|0);
   $335=$2103;
   var $2104=$335;
   var $2105=$2104;
   $334=$2105;
   var $2106=$334;
   var $2107=(($2106)|0);
   var $2108=(($2107)|0);
   var $2109=$2108;
   var $2110=(($2109+4)|0);
   var $2111=HEAP32[(($2110)>>2)];
   var $2126 = $2111;label = 203; break;
  case 202: 
   $339=$2086;
   var $2113=$339;
   var $2114=(($2113)|0);
   $338=$2114;
   var $2115=$338;
   var $2116=$2115;
   $337=$2116;
   var $2117=$337;
   var $2118=(($2117)|0);
   var $2119=(($2118)|0);
   var $2120=$2119;
   var $2121=(($2120)|0);
   var $2122=$2121;
   var $2123=HEAP8[($2122)];
   var $2124=(($2123)&(255));
   var $2125=$2124 >> 1;
   var $2126 = $2125;label = 203; break;
  case 203: 
   var $2126;
   var $2127=(($2126)>>>(0)) > 1;
   if ($2127) { label = 204; break; } else { label = 205; break; }
  case 204: 
   $__trailing_sign=$__nsn;
   label = 205; break;
  case 205: 
   label = 207; break;
  case 206: 
   var $2131=$781;
   var $2132=HEAP32[(($2131)>>2)];
   var $2133=$2132 | 4;
   HEAP32[(($2131)>>2)]=$2133;
   $776=0;
   $791=1;
   label = 498; break;
  case 207: 
   label = 208; break;
  case 208: 
   label = 209; break;
  case 209: 
   label = 210; break;
  case 210: 
   label = 449; break;
  case 211: 
   var $2139=$__trailing_sign;
   var $2140=(($2139)|(0))!=0;
   if ($2140) { var $2156 = 1;label = 216; break; } else { label = 212; break; }
  case 212: 
   var $2142=$__p;
   var $2143=(($2142)>>>(0)) < 2;
   if ($2143) { var $2156 = 1;label = 216; break; } else { label = 213; break; }
  case 213: 
   var $2145=$__p;
   var $2146=(($2145)|(0))==2;
   if ($2146) { label = 214; break; } else { var $2154 = 0;label = 215; break; }
  case 214: 
   var $2148=(($__pat)|0);
   var $2149=(($2148+3)|0);
   var $2150=HEAP8[($2149)];
   var $2151=(($2150 << 24) >> 24);
   var $2152=(($2151)|(0))!=0;
   var $2154 = $2152;label = 215; break;
  case 215: 
   var $2154;
   var $2156 = $2154;label = 216; break;
  case 216: 
   var $2156;
   var $2157=(($2156)&(1));
   $__more_needed=$2157;
   var $2158=$780;
   var $2159=$2158 & 512;
   var $2160=(($2159)|(0))!=0;
   var $2161=(($2160)&(1));
   $__sb=$2161;
   var $2162=$__sb;
   var $2163=(($2162) & 1);
   if ($2163) { label = 218; break; } else { label = 217; break; }
  case 217: 
   var $2165=$__more_needed;
   var $2166=(($2165) & 1);
   if ($2166) { label = 218; break; } else { label = 319; break; }
  case 218: 
   $326=$__sym;
   var $2168=$326;
   $325=$2168;
   var $2169=$325;
   $324=$2169;
   var $2170=$324;
   var $2171=(($2170)|0);
   $323=$2171;
   var $2172=$323;
   var $2173=$2172;
   $322=$2173;
   var $2174=$322;
   var $2175=(($2174)|0);
   var $2176=(($2175)|0);
   var $2177=$2176;
   var $2178=(($2177)|0);
   var $2179=$2178;
   var $2180=HEAP8[($2179)];
   var $2181=(($2180)&(255));
   var $2182=$2181 & 1;
   var $2183=(($2182)|(0))!=0;
   if ($2183) { label = 219; break; } else { label = 220; break; }
  case 219: 
   $318=$2169;
   var $2185=$318;
   var $2186=(($2185)|0);
   $317=$2186;
   var $2187=$317;
   var $2188=$2187;
   $316=$2188;
   var $2189=$316;
   var $2190=(($2189)|0);
   var $2191=(($2190)|0);
   var $2192=$2191;
   var $2193=(($2192+8)|0);
   var $2194=HEAP32[(($2193)>>2)];
   var $2206 = $2194;label = 221; break;
  case 220: 
   $321=$2169;
   var $2196=$321;
   var $2197=(($2196)|0);
   $320=$2197;
   var $2198=$320;
   var $2199=$2198;
   $319=$2199;
   var $2200=$319;
   var $2201=(($2200)|0);
   var $2202=(($2201)|0);
   var $2203=$2202;
   var $2204=(($2203+4)|0);
   var $2205=(($2204)|0);
   var $2206 = $2205;label = 221; break;
  case 221: 
   var $2206;
   $314=$793;
   $315=$2206;
   var $2207=$314;
   var $2208=$315;
   $312=$2207;
   $313=$2208;
   var $2209=$312;
   var $2210=(($2209)|0);
   var $2211=$313;
   HEAP32[(($2210)>>2)]=$2211;
   $309=$__sym_space_end;
   $310=$793;
   $311=0;
   var $2212=$309;
   var $2213=$311;
   var $2214=$310;
   $306=$2212;
   $307=$2214;
   $308=$2213;
   var $2215=$306;
   var $2216=(($2215)|0);
   var $2217=$307;
   $305=$2217;
   var $2218=$305;
   var $2219=(($2218)|0);
   var $2220=HEAP32[(($2219)>>2)];
   HEAP32[(($2216)>>2)]=$2220;
   var $2221=$__p;
   var $2222=(($2221)>>>(0)) > 0;
   if ($2222) { label = 222; break; } else { label = 272; break; }
  case 222: 
   var $2224=$__p;
   var $2225=((($2224)-(1))|0);
   var $2226=(($__pat)|0);
   var $2227=(($2226+$2225)|0);
   var $2228=HEAP8[($2227)];
   var $2229=(($2228 << 24) >> 24);
   var $2230=(($2229)|(0))==0;
   if ($2230) { label = 224; break; } else { label = 223; break; }
  case 223: 
   var $2232=$__p;
   var $2233=((($2232)-(1))|0);
   var $2234=(($__pat)|0);
   var $2235=(($2234+$2233)|0);
   var $2236=HEAP8[($2235)];
   var $2237=(($2236 << 24) >> 24);
   var $2238=(($2237)|(0))==1;
   if ($2238) { label = 224; break; } else { label = 272; break; }
  case 224: 
   label = 225; break;
  case 225: 
   $294=$__sym;
   var $2241=$294;
   $293=$2241;
   var $2242=$293;
   $292=$2242;
   var $2243=$292;
   var $2244=(($2243)|0);
   $291=$2244;
   var $2245=$291;
   var $2246=$2245;
   $290=$2246;
   var $2247=$290;
   var $2248=(($2247)|0);
   var $2249=(($2248)|0);
   var $2250=$2249;
   var $2251=(($2250)|0);
   var $2252=$2251;
   var $2253=HEAP8[($2252)];
   var $2254=(($2253)&(255));
   var $2255=$2254 & 1;
   var $2256=(($2255)|(0))!=0;
   if ($2256) { label = 226; break; } else { label = 227; break; }
  case 226: 
   $286=$2242;
   var $2258=$286;
   var $2259=(($2258)|0);
   $285=$2259;
   var $2260=$285;
   var $2261=$2260;
   $284=$2261;
   var $2262=$284;
   var $2263=(($2262)|0);
   var $2264=(($2263)|0);
   var $2265=$2264;
   var $2266=(($2265+8)|0);
   var $2267=HEAP32[(($2266)>>2)];
   var $2279 = $2267;label = 228; break;
  case 227: 
   $289=$2242;
   var $2269=$289;
   var $2270=(($2269)|0);
   $288=$2270;
   var $2271=$288;
   var $2272=$2271;
   $287=$2272;
   var $2273=$287;
   var $2274=(($2273)|0);
   var $2275=(($2274)|0);
   var $2276=$2275;
   var $2277=(($2276+4)|0);
   var $2278=(($2277)|0);
   var $2279 = $2278;label = 228; break;
  case 228: 
   var $2279;
   $279=$2241;
   var $2280=$279;
   $278=$2280;
   var $2281=$278;
   var $2282=(($2281)|0);
   $277=$2282;
   var $2283=$277;
   var $2284=$2283;
   $276=$2284;
   var $2285=$276;
   var $2286=(($2285)|0);
   var $2287=(($2286)|0);
   var $2288=$2287;
   var $2289=(($2288)|0);
   var $2290=$2289;
   var $2291=HEAP8[($2290)];
   var $2292=(($2291)&(255));
   var $2293=$2292 & 1;
   var $2294=(($2293)|(0))!=0;
   if ($2294) { label = 229; break; } else { label = 230; break; }
  case 229: 
   $272=$2280;
   var $2296=$272;
   var $2297=(($2296)|0);
   $271=$2297;
   var $2298=$271;
   var $2299=$2298;
   $270=$2299;
   var $2300=$270;
   var $2301=(($2300)|0);
   var $2302=(($2301)|0);
   var $2303=$2302;
   var $2304=(($2303+4)|0);
   var $2305=HEAP32[(($2304)>>2)];
   var $2320 = $2305;label = 231; break;
  case 230: 
   $275=$2280;
   var $2307=$275;
   var $2308=(($2307)|0);
   $274=$2308;
   var $2309=$274;
   var $2310=$2309;
   $273=$2310;
   var $2311=$273;
   var $2312=(($2311)|0);
   var $2313=(($2312)|0);
   var $2314=$2313;
   var $2315=(($2314)|0);
   var $2316=$2315;
   var $2317=HEAP8[($2316)];
   var $2318=(($2317)&(255));
   var $2319=$2318 >> 1;
   var $2320 = $2319;label = 231; break;
  case 231: 
   var $2320;
   var $2321=(($2279+($2320<<2))|0);
   $282=$794;
   $283=$2321;
   var $2322=$282;
   var $2323=$283;
   $280=$2322;
   $281=$2323;
   var $2324=$280;
   var $2325=(($2324)|0);
   var $2326=$281;
   HEAP32[(($2325)>>2)]=$2326;
   $265=$__sym_space_end;
   $266=$794;
   var $2327=$265;
   var $2328=$266;
   $263=$2327;
   $264=$2328;
   var $2329=$263;
   $262=$2329;
   var $2330=$262;
   var $2331=(($2330)|0);
   var $2332=HEAP32[(($2331)>>2)];
   var $2333=$264;
   $261=$2333;
   var $2334=$261;
   var $2335=(($2334)|0);
   var $2336=HEAP32[(($2335)>>2)];
   var $2337=(($2332)|(0))==(($2336)|(0));
   var $2338=$2337 ^ 1;
   if ($2338) { label = 232; break; } else { var $2355 = 0;label = 235; break; }
  case 232: 
   var $2340=$783;
   $256=$__sym_space_end;
   var $2341=$256;
   var $2342=(($2341)|0);
   var $2343=HEAP32[(($2342)>>2)];
   var $2344=HEAP32[(($2343)>>2)];
   $237=$2340;
   $238=8192;
   $239=$2344;
   var $2345=$237;
   var $2346=$2345;
   var $2347=HEAP32[(($2346)>>2)];
   var $2348=(($2347+12)|0);
   var $2349=HEAP32[(($2348)>>2)];
   var $2350=$238;
   var $2351=$239;
   var $2352 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2349]($2345, $2350, $2351) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 233; break; } else { label = 37; break; }
  case 233: 
   label = 234; break;
  case 234: 
   var $2355 = $2352;label = 235; break;
  case 235: 
   var $2355;
   if ($2355) { label = 236; break; } else { label = 237; break; }
  case 236: 
   $236=$__sym_space_end;
   var $2357=$236;
   var $2358=(($2357)|0);
   var $2359=HEAP32[(($2358)>>2)];
   var $2360=(($2359+4)|0);
   HEAP32[(($2358)>>2)]=$2360;
   label = 225; break;
  case 237: 
   $235=$__sym;
   var $2362=$235;
   $234=$2362;
   var $2363=$234;
   $233=$2363;
   var $2364=$233;
   var $2365=(($2364)|0);
   $232=$2365;
   var $2366=$232;
   var $2367=$2366;
   $231=$2367;
   var $2368=$231;
   var $2369=(($2368)|0);
   var $2370=(($2369)|0);
   var $2371=$2370;
   var $2372=(($2371)|0);
   var $2373=$2372;
   var $2374=HEAP8[($2373)];
   var $2375=(($2374)&(255));
   var $2376=$2375 & 1;
   var $2377=(($2376)|(0))!=0;
   if ($2377) { label = 238; break; } else { label = 239; break; }
  case 238: 
   $227=$2363;
   var $2379=$227;
   var $2380=(($2379)|0);
   $226=$2380;
   var $2381=$226;
   var $2382=$2381;
   $225=$2382;
   var $2383=$225;
   var $2384=(($2383)|0);
   var $2385=(($2384)|0);
   var $2386=$2385;
   var $2387=(($2386+8)|0);
   var $2388=HEAP32[(($2387)>>2)];
   var $2400 = $2388;label = 240; break;
  case 239: 
   $230=$2363;
   var $2390=$230;
   var $2391=(($2390)|0);
   $229=$2391;
   var $2392=$229;
   var $2393=$2392;
   $228=$2393;
   var $2394=$228;
   var $2395=(($2394)|0);
   var $2396=(($2395)|0);
   var $2397=$2396;
   var $2398=(($2397+4)|0);
   var $2399=(($2398)|0);
   var $2400 = $2399;label = 240; break;
  case 240: 
   var $2400;
   $223=$795;
   $224=$2400;
   var $2401=$223;
   var $2402=$224;
   $221=$2401;
   $222=$2402;
   var $2403=$221;
   var $2404=(($2403)|0);
   var $2405=$222;
   HEAP32[(($2404)>>2)]=$2405;
   $183=$__sym_space_end;
   $184=$795;
   var $2406=$183;
   $182=$2406;
   var $2407=$182;
   var $2408=(($2407)|0);
   var $2409=HEAP32[(($2408)>>2)];
   var $2410=$184;
   $181=$2410;
   var $2411=$181;
   var $2412=(($2411)|0);
   var $2413=HEAP32[(($2412)>>2)];
   var $2414=$2409;
   var $2415=$2413;
   var $2416=((($2414)-($2415))|0);
   var $2417=((((($2416)|(0)))/(4))&-1);
   $__num_spaces=$2417;
   var $2418=$__num_spaces;
   $175=$__spaces;
   var $2419=$175;
   $174=$2419;
   var $2420=$174;
   var $2421=(($2420)|0);
   $173=$2421;
   var $2422=$173;
   var $2423=$2422;
   $172=$2423;
   var $2424=$172;
   var $2425=(($2424)|0);
   var $2426=(($2425)|0);
   var $2427=$2426;
   var $2428=(($2427)|0);
   var $2429=$2428;
   var $2430=HEAP8[($2429)];
   var $2431=(($2430)&(255));
   var $2432=$2431 & 1;
   var $2433=(($2432)|(0))!=0;
   if ($2433) { label = 241; break; } else { label = 242; break; }
  case 241: 
   $168=$2419;
   var $2435=$168;
   var $2436=(($2435)|0);
   $167=$2436;
   var $2437=$167;
   var $2438=$2437;
   $166=$2438;
   var $2439=$166;
   var $2440=(($2439)|0);
   var $2441=(($2440)|0);
   var $2442=$2441;
   var $2443=(($2442+4)|0);
   var $2444=HEAP32[(($2443)>>2)];
   var $2459 = $2444;label = 243; break;
  case 242: 
   $171=$2419;
   var $2446=$171;
   var $2447=(($2446)|0);
   $170=$2447;
   var $2448=$170;
   var $2449=$2448;
   $169=$2449;
   var $2450=$169;
   var $2451=(($2450)|0);
   var $2452=(($2451)|0);
   var $2453=$2452;
   var $2454=(($2453)|0);
   var $2455=$2454;
   var $2456=HEAP8[($2455)];
   var $2457=(($2456)&(255));
   var $2458=$2457 >> 1;
   var $2459 = $2458;label = 243; break;
  case 243: 
   var $2459;
   var $2460=(($2418)>>>(0)) > (($2459)>>>(0));
   if ($2460) { label = 267; break; } else { label = 244; break; }
  case 244: 
   $149=$__spaces;
   var $2462=$149;
   $148=$2462;
   var $2463=$148;
   $147=$2463;
   var $2464=$147;
   var $2465=(($2464)|0);
   $146=$2465;
   var $2466=$146;
   var $2467=$2466;
   $145=$2467;
   var $2468=$145;
   var $2469=(($2468)|0);
   var $2470=(($2469)|0);
   var $2471=$2470;
   var $2472=(($2471)|0);
   var $2473=$2472;
   var $2474=HEAP8[($2473)];
   var $2475=(($2474)&(255));
   var $2476=$2475 & 1;
   var $2477=(($2476)|(0))!=0;
   if ($2477) { label = 245; break; } else { label = 246; break; }
  case 245: 
   $141=$2463;
   var $2479=$141;
   var $2480=(($2479)|0);
   $140=$2480;
   var $2481=$140;
   var $2482=$2481;
   $139=$2482;
   var $2483=$139;
   var $2484=(($2483)|0);
   var $2485=(($2484)|0);
   var $2486=$2485;
   var $2487=(($2486+8)|0);
   var $2488=HEAP32[(($2487)>>2)];
   var $2500 = $2488;label = 247; break;
  case 246: 
   $144=$2463;
   var $2490=$144;
   var $2491=(($2490)|0);
   $143=$2491;
   var $2492=$143;
   var $2493=$2492;
   $142=$2493;
   var $2494=$142;
   var $2495=(($2494)|0);
   var $2496=(($2495)|0);
   var $2497=$2496;
   var $2498=(($2497+4)|0);
   var $2499=(($2498)|0);
   var $2500 = $2499;label = 247; break;
  case 247: 
   var $2500;
   $134=$2462;
   var $2501=$134;
   $133=$2501;
   var $2502=$133;
   var $2503=(($2502)|0);
   $132=$2503;
   var $2504=$132;
   var $2505=$2504;
   $131=$2505;
   var $2506=$131;
   var $2507=(($2506)|0);
   var $2508=(($2507)|0);
   var $2509=$2508;
   var $2510=(($2509)|0);
   var $2511=$2510;
   var $2512=HEAP8[($2511)];
   var $2513=(($2512)&(255));
   var $2514=$2513 & 1;
   var $2515=(($2514)|(0))!=0;
   if ($2515) { label = 248; break; } else { label = 249; break; }
  case 248: 
   $127=$2501;
   var $2517=$127;
   var $2518=(($2517)|0);
   $126=$2518;
   var $2519=$126;
   var $2520=$2519;
   $125=$2520;
   var $2521=$125;
   var $2522=(($2521)|0);
   var $2523=(($2522)|0);
   var $2524=$2523;
   var $2525=(($2524+4)|0);
   var $2526=HEAP32[(($2525)>>2)];
   var $2541 = $2526;label = 250; break;
  case 249: 
   $130=$2501;
   var $2528=$130;
   var $2529=(($2528)|0);
   $129=$2529;
   var $2530=$129;
   var $2531=$2530;
   $128=$2531;
   var $2532=$128;
   var $2533=(($2532)|0);
   var $2534=(($2533)|0);
   var $2535=$2534;
   var $2536=(($2535)|0);
   var $2537=$2536;
   var $2538=HEAP8[($2537)];
   var $2539=(($2538)&(255));
   var $2540=$2539 >> 1;
   var $2541 = $2540;label = 250; break;
  case 250: 
   var $2541;
   var $2542=(($2500+($2541<<2))|0);
   $137=$797;
   $138=$2542;
   var $2543=$137;
   var $2544=$138;
   $135=$2543;
   $136=$2544;
   var $2545=$135;
   var $2546=(($2545)|0);
   var $2547=$136;
   HEAP32[(($2546)>>2)]=$2547;
   var $2548=$__num_spaces;
   $123=$797;
   $124=$2548;
   var $2549=$123;
   var $2550=$124;
   var $2551=(((-$2550))|0);
   $121=$2549;
   $122=$2551;
   var $2552=$121;
   var $2553=$796;
   var $2554=$2552;
   assert(4 % 1 === 0);HEAP32[(($2553)>>2)]=HEAP32[(($2554)>>2)];
   var $2555=$122;
   $119=$796;
   $120=$2555;
   var $2556=$119;
   var $2557=$120;
   var $2558=(($2556)|0);
   var $2559=HEAP32[(($2558)>>2)];
   var $2560=(($2559+($2557<<2))|0);
   HEAP32[(($2558)>>2)]=$2560;
   $25=$__spaces;
   var $2561=$25;
   $24=$2561;
   var $2562=$24;
   $23=$2562;
   var $2563=$23;
   var $2564=(($2563)|0);
   $22=$2564;
   var $2565=$22;
   var $2566=$2565;
   $21=$2566;
   var $2567=$21;
   var $2568=(($2567)|0);
   var $2569=(($2568)|0);
   var $2570=$2569;
   var $2571=(($2570)|0);
   var $2572=$2571;
   var $2573=HEAP8[($2572)];
   var $2574=(($2573)&(255));
   var $2575=$2574 & 1;
   var $2576=(($2575)|(0))!=0;
   if ($2576) { label = 251; break; } else { label = 252; break; }
  case 251: 
   $17=$2562;
   var $2578=$17;
   var $2579=(($2578)|0);
   $16=$2579;
   var $2580=$16;
   var $2581=$2580;
   $15=$2581;
   var $2582=$15;
   var $2583=(($2582)|0);
   var $2584=(($2583)|0);
   var $2585=$2584;
   var $2586=(($2585+8)|0);
   var $2587=HEAP32[(($2586)>>2)];
   var $2599 = $2587;label = 253; break;
  case 252: 
   $20=$2562;
   var $2589=$20;
   var $2590=(($2589)|0);
   $19=$2590;
   var $2591=$19;
   var $2592=$2591;
   $18=$2592;
   var $2593=$18;
   var $2594=(($2593)|0);
   var $2595=(($2594)|0);
   var $2596=$2595;
   var $2597=(($2596+4)|0);
   var $2598=(($2597)|0);
   var $2599 = $2598;label = 253; break;
  case 253: 
   var $2599;
   $10=$2561;
   var $2600=$10;
   $9=$2600;
   var $2601=$9;
   var $2602=(($2601)|0);
   $8=$2602;
   var $2603=$8;
   var $2604=$2603;
   $7=$2604;
   var $2605=$7;
   var $2606=(($2605)|0);
   var $2607=(($2606)|0);
   var $2608=$2607;
   var $2609=(($2608)|0);
   var $2610=$2609;
   var $2611=HEAP8[($2610)];
   var $2612=(($2611)&(255));
   var $2613=$2612 & 1;
   var $2614=(($2613)|(0))!=0;
   if ($2614) { label = 254; break; } else { label = 255; break; }
  case 254: 
   $3=$2600;
   var $2616=$3;
   var $2617=(($2616)|0);
   $2=$2617;
   var $2618=$2;
   var $2619=$2618;
   $1=$2619;
   var $2620=$1;
   var $2621=(($2620)|0);
   var $2622=(($2621)|0);
   var $2623=$2622;
   var $2624=(($2623+4)|0);
   var $2625=HEAP32[(($2624)>>2)];
   var $2640 = $2625;label = 256; break;
  case 255: 
   $6=$2600;
   var $2627=$6;
   var $2628=(($2627)|0);
   $5=$2628;
   var $2629=$5;
   var $2630=$2629;
   $4=$2630;
   var $2631=$4;
   var $2632=(($2631)|0);
   var $2633=(($2632)|0);
   var $2634=$2633;
   var $2635=(($2634)|0);
   var $2636=$2635;
   var $2637=HEAP8[($2636)];
   var $2638=(($2637)&(255));
   var $2639=$2638 >> 1;
   var $2640 = $2639;label = 256; break;
  case 256: 
   var $2640;
   var $2641=(($2599+($2640<<2))|0);
   $13=$798;
   $14=$2641;
   var $2642=$13;
   var $2643=$14;
   $11=$2642;
   $12=$2643;
   var $2644=$11;
   var $2645=(($2644)|0);
   var $2646=$12;
   HEAP32[(($2645)>>2)]=$2646;
   $40=$__sym;
   var $2647=$40;
   $39=$2647;
   var $2648=$39;
   $38=$2648;
   var $2649=$38;
   var $2650=(($2649)|0);
   $37=$2650;
   var $2651=$37;
   var $2652=$2651;
   $36=$2652;
   var $2653=$36;
   var $2654=(($2653)|0);
   var $2655=(($2654)|0);
   var $2656=$2655;
   var $2657=(($2656)|0);
   var $2658=$2657;
   var $2659=HEAP8[($2658)];
   var $2660=(($2659)&(255));
   var $2661=$2660 & 1;
   var $2662=(($2661)|(0))!=0;
   if ($2662) { label = 257; break; } else { label = 258; break; }
  case 257: 
   $32=$2648;
   var $2664=$32;
   var $2665=(($2664)|0);
   $31=$2665;
   var $2666=$31;
   var $2667=$2666;
   $30=$2667;
   var $2668=$30;
   var $2669=(($2668)|0);
   var $2670=(($2669)|0);
   var $2671=$2670;
   var $2672=(($2671+8)|0);
   var $2673=HEAP32[(($2672)>>2)];
   var $2685 = $2673;label = 259; break;
  case 258: 
   $35=$2648;
   var $2675=$35;
   var $2676=(($2675)|0);
   $34=$2676;
   var $2677=$34;
   var $2678=$2677;
   $33=$2678;
   var $2679=$33;
   var $2680=(($2679)|0);
   var $2681=(($2680)|0);
   var $2682=$2681;
   var $2683=(($2682+4)|0);
   var $2684=(($2683)|0);
   var $2685 = $2684;label = 259; break;
  case 259: 
   var $2685;
   $28=$799;
   $29=$2685;
   var $2686=$28;
   var $2687=$29;
   $26=$2686;
   $27=$2687;
   var $2688=$26;
   var $2689=(($2688)|0);
   var $2690=$27;
   HEAP32[(($2689)>>2)]=$2690;
   var $tmp=$65;
   var $tmp125=$796;
   assert(4 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp125)];HEAP8[((($tmp)+(1))|0)]=HEAP8[((($tmp125)+(1))|0)];HEAP8[((($tmp)+(2))|0)]=HEAP8[((($tmp125)+(2))|0)];HEAP8[((($tmp)+(3))|0)]=HEAP8[((($tmp125)+(3))|0)];
   var $tmp126=$64;
   var $tmp127=$798;
   assert(4 % 1 === 0);HEAP8[($tmp126)]=HEAP8[($tmp127)];HEAP8[((($tmp126)+(1))|0)]=HEAP8[((($tmp127)+(1))|0)];HEAP8[((($tmp126)+(2))|0)]=HEAP8[((($tmp127)+(2))|0)];HEAP8[((($tmp126)+(3))|0)]=HEAP8[((($tmp127)+(3))|0)];
   var $tmp128=$63;
   var $tmp129=$799;
   assert(4 % 1 === 0);HEAP8[($tmp128)]=HEAP8[($tmp129)];HEAP8[((($tmp128)+(1))|0)]=HEAP8[((($tmp129)+(1))|0)];HEAP8[((($tmp128)+(2))|0)]=HEAP8[((($tmp129)+(2))|0)];HEAP8[((($tmp128)+(3))|0)]=HEAP8[((($tmp129)+(3))|0)];
   var $2691=$59;
   var $2692=$65;
   assert(4 % 1 === 0);HEAP32[(($2691)>>2)]=HEAP32[(($2692)>>2)];
   var $2693=$60;
   var $2694=$64;
   assert(4 % 1 === 0);HEAP32[(($2693)>>2)]=HEAP32[(($2694)>>2)];
   var $2695=$61;
   var $2696=$63;
   assert(4 % 1 === 0);HEAP32[(($2695)>>2)]=HEAP32[(($2696)>>2)];
   var $tmp_i=$58;
   var $tmp1_i=$59;
   assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
   var $tmp2_i=$57;
   var $tmp3_i=$60;
   assert(4 % 1 === 0);HEAP8[($tmp2_i)]=HEAP8[($tmp3_i)];HEAP8[((($tmp2_i)+(1))|0)]=HEAP8[((($tmp3_i)+(1))|0)];HEAP8[((($tmp2_i)+(2))|0)]=HEAP8[((($tmp3_i)+(2))|0)];HEAP8[((($tmp2_i)+(3))|0)]=HEAP8[((($tmp3_i)+(3))|0)];
   var $tmp4_i=$56;
   var $tmp5_i=$61;
   assert(4 % 1 === 0);HEAP8[($tmp4_i)]=HEAP8[($tmp5_i)];HEAP8[((($tmp4_i)+(1))|0)]=HEAP8[((($tmp5_i)+(1))|0)];HEAP8[((($tmp4_i)+(2))|0)]=HEAP8[((($tmp5_i)+(2))|0)];HEAP8[((($tmp4_i)+(3))|0)]=HEAP8[((($tmp5_i)+(3))|0)];
   var $tmp6_i=$55;
   var $tmp7_i=$62;
   assert(1 % 1 === 0);HEAP8[($tmp6_i)]=HEAP8[($tmp7_i)];
   label = 260; break;
  case 260: 
   $52=$58;
   $53=$57;
   var $2698=$52;
   var $2699=$53;
   $50=$2698;
   $51=$2699;
   var $2700=$50;
   $49=$2700;
   var $2701=$49;
   var $2702=(($2701)|0);
   var $2703=HEAP32[(($2702)>>2)];
   var $2704=$51;
   $48=$2704;
   var $2705=$48;
   var $2706=(($2705)|0);
   var $2707=HEAP32[(($2706)>>2)];
   var $2708=(($2703)|(0))==(($2707)|(0));
   var $2709=$2708 ^ 1;
   if ($2709) { label = 261; break; } else { label = 264; break; }
  case 261: 
   $41=$58;
   var $2711=$41;
   var $2712=(($2711)|0);
   var $2713=HEAP32[(($2712)>>2)];
   $42=$56;
   var $2714=$42;
   var $2715=(($2714)|0);
   var $2716=HEAP32[(($2715)>>2)];
   $43=$55;
   $44=$2713;
   $45=$2716;
   var $2717=$43;
   var $2718=$44;
   var $2719=HEAP32[(($2718)>>2)];
   var $2720=$45;
   var $2721=HEAP32[(($2720)>>2)];
   var $2722=(($2719)|(0))==(($2721)|(0));
   if ($2722) { label = 263; break; } else { label = 262; break; }
  case 262: 
   $54=0;
   label = 265; break;
  case 263: 
   $46=$58;
   var $2725=$46;
   var $2726=(($2725)|0);
   var $2727=HEAP32[(($2726)>>2)];
   var $2728=(($2727+4)|0);
   HEAP32[(($2726)>>2)]=$2728;
   $47=$56;
   var $2729=$47;
   var $2730=(($2729)|0);
   var $2731=HEAP32[(($2730)>>2)];
   var $2732=(($2731+4)|0);
   HEAP32[(($2730)>>2)]=$2732;
   label = 260; break;
  case 264: 
   $54=1;
   label = 265; break;
  case 265: 
   var $2734=$54;
   label = 266; break;
  case 266: 
   if ($2734) { label = 271; break; } else { label = 267; break; }
  case 267: 
   $80=$__sym;
   var $2737=$80;
   $79=$2737;
   var $2738=$79;
   $78=$2738;
   var $2739=$78;
   var $2740=(($2739)|0);
   $77=$2740;
   var $2741=$77;
   var $2742=$2741;
   $76=$2742;
   var $2743=$76;
   var $2744=(($2743)|0);
   var $2745=(($2744)|0);
   var $2746=$2745;
   var $2747=(($2746)|0);
   var $2748=$2747;
   var $2749=HEAP8[($2748)];
   var $2750=(($2749)&(255));
   var $2751=$2750 & 1;
   var $2752=(($2751)|(0))!=0;
   if ($2752) { label = 268; break; } else { label = 269; break; }
  case 268: 
   $72=$2738;
   var $2754=$72;
   var $2755=(($2754)|0);
   $71=$2755;
   var $2756=$71;
   var $2757=$2756;
   $70=$2757;
   var $2758=$70;
   var $2759=(($2758)|0);
   var $2760=(($2759)|0);
   var $2761=$2760;
   var $2762=(($2761+8)|0);
   var $2763=HEAP32[(($2762)>>2)];
   var $2775 = $2763;label = 270; break;
  case 269: 
   $75=$2738;
   var $2765=$75;
   var $2766=(($2765)|0);
   $74=$2766;
   var $2767=$74;
   var $2768=$2767;
   $73=$2768;
   var $2769=$73;
   var $2770=(($2769)|0);
   var $2771=(($2770)|0);
   var $2772=$2771;
   var $2773=(($2772+4)|0);
   var $2774=(($2773)|0);
   var $2775 = $2774;label = 270; break;
  case 270: 
   var $2775;
   $68=$801;
   $69=$2775;
   var $2776=$68;
   var $2777=$69;
   $66=$2776;
   $67=$2777;
   var $2778=$66;
   var $2779=(($2778)|0);
   var $2780=$67;
   HEAP32[(($2779)>>2)]=$2780;
   $85=$800;
   $86=$801;
   $87=0;
   var $2781=$85;
   var $2782=$87;
   var $2783=$86;
   $82=$2781;
   $83=$2783;
   $84=$2782;
   var $2784=$82;
   var $2785=(($2784)|0);
   var $2786=$83;
   $81=$2786;
   var $2787=$81;
   var $2788=(($2787)|0);
   var $2789=HEAP32[(($2788)>>2)];
   HEAP32[(($2785)>>2)]=$2789;
   var $2790=$__sym_space_end;
   var $2791=$800;
   assert(4 % 1 === 0);HEAP32[(($2790)>>2)]=HEAP32[(($2791)>>2)];
   label = 271; break;
  case 271: 
   label = 272; break;
  case 272: 
   var $2794=$__sym_curr_char;
   var $2795=$__sym_space_end;
   assert(4 % 1 === 0);HEAP32[(($2794)>>2)]=HEAP32[(($2795)>>2)];
   label = 273; break;
  case 273: 
   $112=$__sym;
   var $2797=$112;
   $111=$2797;
   var $2798=$111;
   $110=$2798;
   var $2799=$110;
   var $2800=(($2799)|0);
   $109=$2800;
   var $2801=$109;
   var $2802=$2801;
   $108=$2802;
   var $2803=$108;
   var $2804=(($2803)|0);
   var $2805=(($2804)|0);
   var $2806=$2805;
   var $2807=(($2806)|0);
   var $2808=$2807;
   var $2809=HEAP8[($2808)];
   var $2810=(($2809)&(255));
   var $2811=$2810 & 1;
   var $2812=(($2811)|(0))!=0;
   if ($2812) { label = 274; break; } else { label = 275; break; }
  case 274: 
   $104=$2798;
   var $2814=$104;
   var $2815=(($2814)|0);
   $103=$2815;
   var $2816=$103;
   var $2817=$2816;
   $102=$2817;
   var $2818=$102;
   var $2819=(($2818)|0);
   var $2820=(($2819)|0);
   var $2821=$2820;
   var $2822=(($2821+8)|0);
   var $2823=HEAP32[(($2822)>>2)];
   var $2835 = $2823;label = 276; break;
  case 275: 
   $107=$2798;
   var $2825=$107;
   var $2826=(($2825)|0);
   $106=$2826;
   var $2827=$106;
   var $2828=$2827;
   $105=$2828;
   var $2829=$105;
   var $2830=(($2829)|0);
   var $2831=(($2830)|0);
   var $2832=$2831;
   var $2833=(($2832+4)|0);
   var $2834=(($2833)|0);
   var $2835 = $2834;label = 276; break;
  case 276: 
   var $2835;
   $97=$2797;
   var $2836=$97;
   $96=$2836;
   var $2837=$96;
   var $2838=(($2837)|0);
   $95=$2838;
   var $2839=$95;
   var $2840=$2839;
   $94=$2840;
   var $2841=$94;
   var $2842=(($2841)|0);
   var $2843=(($2842)|0);
   var $2844=$2843;
   var $2845=(($2844)|0);
   var $2846=$2845;
   var $2847=HEAP8[($2846)];
   var $2848=(($2847)&(255));
   var $2849=$2848 & 1;
   var $2850=(($2849)|(0))!=0;
   if ($2850) { label = 277; break; } else { label = 278; break; }
  case 277: 
   $90=$2836;
   var $2852=$90;
   var $2853=(($2852)|0);
   $89=$2853;
   var $2854=$89;
   var $2855=$2854;
   $88=$2855;
   var $2856=$88;
   var $2857=(($2856)|0);
   var $2858=(($2857)|0);
   var $2859=$2858;
   var $2860=(($2859+4)|0);
   var $2861=HEAP32[(($2860)>>2)];
   var $2876 = $2861;label = 279; break;
  case 278: 
   $93=$2836;
   var $2863=$93;
   var $2864=(($2863)|0);
   $92=$2864;
   var $2865=$92;
   var $2866=$2865;
   $91=$2866;
   var $2867=$91;
   var $2868=(($2867)|0);
   var $2869=(($2868)|0);
   var $2870=$2869;
   var $2871=(($2870)|0);
   var $2872=$2871;
   var $2873=HEAP8[($2872)];
   var $2874=(($2873)&(255));
   var $2875=$2874 >> 1;
   var $2876 = $2875;label = 279; break;
  case 279: 
   var $2876;
   var $2877=(($2835+($2876<<2))|0);
   $100=$802;
   $101=$2877;
   var $2878=$100;
   var $2879=$101;
   $98=$2878;
   $99=$2879;
   var $2880=$98;
   var $2881=(($2880)|0);
   var $2882=$99;
   HEAP32[(($2881)>>2)]=$2882;
   $117=$__sym_curr_char;
   $118=$802;
   var $2883=$117;
   var $2884=$118;
   $115=$2883;
   $116=$2884;
   var $2885=$115;
   $114=$2885;
   var $2886=$114;
   var $2887=(($2886)|0);
   var $2888=HEAP32[(($2887)>>2)];
   var $2889=$116;
   $113=$2889;
   var $2890=$113;
   var $2891=(($2890)|0);
   var $2892=HEAP32[(($2891)>>2)];
   var $2893=(($2888)|(0))==(($2892)|(0));
   var $2894=$2893 ^ 1;
   if ($2894) { label = 280; break; } else { var $3002 = 0;label = 302; break; }
  case 280: 
   var $2896=$777;
   $164=$2896;
   $165=$__e;
   var $2897=$164;
   var $2898=$165;
   $162=$2897;
   $163=$2898;
   var $2899=$162;
   $161=$2899;
   var $2900=$161;
   var $2901=(($2900)|0);
   var $2902=HEAP32[(($2901)>>2)];
   var $2903=(($2902)|(0))!=0;
   if ($2903) { label = 281; break; } else { label = 287; break; }
  case 281: 
   var $2905=(($2900)|0);
   var $2906=HEAP32[(($2905)>>2)];
   $160=$2906;
   var $2907=$160;
   var $2908=(($2907+12)|0);
   var $2909=HEAP32[(($2908)>>2)];
   var $2910=(($2907+16)|0);
   var $2911=HEAP32[(($2910)>>2)];
   var $2912=(($2909)|(0))==(($2911)|(0));
   if ($2912) { label = 282; break; } else { label = 284; break; }
  case 282: 
   var $2914=$2907;
   var $2915=HEAP32[(($2914)>>2)];
   var $2916=(($2915+36)|0);
   var $2917=HEAP32[(($2916)>>2)];
   var $2918 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2917]($2907) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 283; break; } else { label = 37; break; }
  case 283: 
   $159=$2918;
   label = 285; break;
  case 284: 
   var $2920=(($2907+12)|0);
   var $2921=HEAP32[(($2920)>>2)];
   var $2922=HEAP32[(($2921)>>2)];
   $158=$2922;
   var $2923=$158;
   $159=$2923;
   label = 285; break;
  case 285: 
   var $2924=$159;
   $156=$2924;
   $157=-1;
   var $2925=$156;
   var $2926=$157;
   var $2927=(($2925)|(0))==(($2926)|(0));
   if ($2927) { label = 286; break; } else { label = 287; break; }
  case 286: 
   var $2929=(($2900)|0);
   HEAP32[(($2929)>>2)]=0;
   label = 287; break;
  case 287: 
   var $2930=(($2900)|0);
   var $2931=HEAP32[(($2930)>>2)];
   var $2932=(($2931)|(0))==0;
   var $2933=(($2932)&(1));
   var $2934=$163;
   $155=$2934;
   var $2935=$155;
   var $2936=(($2935)|0);
   var $2937=HEAP32[(($2936)>>2)];
   var $2938=(($2937)|(0))!=0;
   if ($2938) { label = 288; break; } else { label = 294; break; }
  case 288: 
   var $2940=(($2935)|0);
   var $2941=HEAP32[(($2940)>>2)];
   $154=$2941;
   var $2942=$154;
   var $2943=(($2942+12)|0);
   var $2944=HEAP32[(($2943)>>2)];
   var $2945=(($2942+16)|0);
   var $2946=HEAP32[(($2945)>>2)];
   var $2947=(($2944)|(0))==(($2946)|(0));
   if ($2947) { label = 289; break; } else { label = 291; break; }
  case 289: 
   var $2949=$2942;
   var $2950=HEAP32[(($2949)>>2)];
   var $2951=(($2950+36)|0);
   var $2952=HEAP32[(($2951)>>2)];
   var $2953 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2952]($2942) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 290; break; } else { label = 37; break; }
  case 290: 
   $153=$2953;
   label = 292; break;
  case 291: 
   var $2955=(($2942+12)|0);
   var $2956=HEAP32[(($2955)>>2)];
   var $2957=HEAP32[(($2956)>>2)];
   $152=$2957;
   var $2958=$152;
   $153=$2958;
   label = 292; break;
  case 292: 
   var $2959=$153;
   $150=$2959;
   $151=-1;
   var $2960=$150;
   var $2961=$151;
   var $2962=(($2960)|(0))==(($2961)|(0));
   if ($2962) { label = 293; break; } else { label = 294; break; }
  case 293: 
   var $2964=(($2935)|0);
   HEAP32[(($2964)>>2)]=0;
   label = 294; break;
  case 294: 
   var $2965=(($2935)|0);
   var $2966=HEAP32[(($2965)>>2)];
   var $2967=(($2966)|(0))==0;
   var $2968=(($2967)&(1));
   var $2969=(($2933)|(0))==(($2968)|(0));
   var $2970=$2969 ^ 1;
   label = 295; break;
  case 295: 
   if ($2970) { label = 296; break; } else { var $3002 = 0;label = 302; break; }
  case 296: 
   var $2973=$777;
   $179=$2973;
   var $2974=$179;
   var $2975=(($2974)|0);
   var $2976=HEAP32[(($2975)>>2)];
   $178=$2976;
   var $2977=$178;
   var $2978=(($2977+12)|0);
   var $2979=HEAP32[(($2978)>>2)];
   var $2980=(($2977+16)|0);
   var $2981=HEAP32[(($2980)>>2)];
   var $2982=(($2979)|(0))==(($2981)|(0));
   if ($2982) { label = 297; break; } else { label = 299; break; }
  case 297: 
   var $2984=$2977;
   var $2985=HEAP32[(($2984)>>2)];
   var $2986=(($2985+36)|0);
   var $2987=HEAP32[(($2986)>>2)];
   var $2988 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2987]($2977) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 298; break; } else { label = 37; break; }
  case 298: 
   $177=$2988;
   label = 300; break;
  case 299: 
   var $2990=(($2977+12)|0);
   var $2991=HEAP32[(($2990)>>2)];
   var $2992=HEAP32[(($2991)>>2)];
   $176=$2992;
   var $2993=$176;
   $177=$2993;
   label = 300; break;
  case 300: 
   var $2994=$177;
   label = 301; break;
  case 301: 
   $180=$__sym_curr_char;
   var $2996=$180;
   var $2997=(($2996)|0);
   var $2998=HEAP32[(($2997)>>2)];
   var $2999=HEAP32[(($2998)>>2)];
   var $3000=(($2994)|(0))==(($2999)|(0));
   var $3002 = $3000;label = 302; break;
  case 302: 
   var $3002;
   if ($3002) { label = 303; break; } else { label = 309; break; }
  case 303: 
   var $3004=$777;
   $188=$3004;
   var $3005=$188;
   var $3006=(($3005)|0);
   var $3007=HEAP32[(($3006)>>2)];
   $187=$3007;
   var $3008=$187;
   var $3009=(($3008+12)|0);
   var $3010=HEAP32[(($3009)>>2)];
   var $3011=(($3008+16)|0);
   var $3012=HEAP32[(($3011)>>2)];
   var $3013=(($3010)|(0))==(($3012)|(0));
   if ($3013) { label = 304; break; } else { label = 306; break; }
  case 304: 
   var $3015=$3008;
   var $3016=HEAP32[(($3015)>>2)];
   var $3017=(($3016+40)|0);
   var $3018=HEAP32[(($3017)>>2)];
   var $3019 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3018]($3008) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 305; break; } else { label = 37; break; }
  case 305: 
   $186=$3019;
   label = 307; break;
  case 306: 
   var $3021=(($3008+12)|0);
   var $3022=HEAP32[(($3021)>>2)];
   var $3023=(($3022+4)|0);
   HEAP32[(($3021)>>2)]=$3023;
   var $3024=HEAP32[(($3022)>>2)];
   $185=$3024;
   var $3025=$185;
   $186=$3025;
   label = 307; break;
  case 307: 
   var $3026=$186;
   label = 308; break;
  case 308: 
   $189=$__sym_curr_char;
   var $3028=$189;
   var $3029=(($3028)|0);
   var $3030=HEAP32[(($3029)>>2)];
   var $3031=(($3030+4)|0);
   HEAP32[(($3029)>>2)]=$3031;
   label = 273; break;
  case 309: 
   var $3033=$__sb;
   var $3034=(($3033) & 1);
   if ($3034) { label = 310; break; } else { label = 318; break; }
  case 310: 
   $214=$__sym;
   var $3036=$214;
   $213=$3036;
   var $3037=$213;
   $212=$3037;
   var $3038=$212;
   var $3039=(($3038)|0);
   $211=$3039;
   var $3040=$211;
   var $3041=$3040;
   $210=$3041;
   var $3042=$210;
   var $3043=(($3042)|0);
   var $3044=(($3043)|0);
   var $3045=$3044;
   var $3046=(($3045)|0);
   var $3047=$3046;
   var $3048=HEAP8[($3047)];
   var $3049=(($3048)&(255));
   var $3050=$3049 & 1;
   var $3051=(($3050)|(0))!=0;
   if ($3051) { label = 311; break; } else { label = 312; break; }
  case 311: 
   $206=$3037;
   var $3053=$206;
   var $3054=(($3053)|0);
   $205=$3054;
   var $3055=$205;
   var $3056=$3055;
   $204=$3056;
   var $3057=$204;
   var $3058=(($3057)|0);
   var $3059=(($3058)|0);
   var $3060=$3059;
   var $3061=(($3060+8)|0);
   var $3062=HEAP32[(($3061)>>2)];
   var $3074 = $3062;label = 313; break;
  case 312: 
   $209=$3037;
   var $3064=$209;
   var $3065=(($3064)|0);
   $208=$3065;
   var $3066=$208;
   var $3067=$3066;
   $207=$3067;
   var $3068=$207;
   var $3069=(($3068)|0);
   var $3070=(($3069)|0);
   var $3071=$3070;
   var $3072=(($3071+4)|0);
   var $3073=(($3072)|0);
   var $3074 = $3073;label = 313; break;
  case 313: 
   var $3074;
   $199=$3036;
   var $3075=$199;
   $198=$3075;
   var $3076=$198;
   var $3077=(($3076)|0);
   $197=$3077;
   var $3078=$197;
   var $3079=$3078;
   $196=$3079;
   var $3080=$196;
   var $3081=(($3080)|0);
   var $3082=(($3081)|0);
   var $3083=$3082;
   var $3084=(($3083)|0);
   var $3085=$3084;
   var $3086=HEAP8[($3085)];
   var $3087=(($3086)&(255));
   var $3088=$3087 & 1;
   var $3089=(($3088)|(0))!=0;
   if ($3089) { label = 314; break; } else { label = 315; break; }
  case 314: 
   $192=$3075;
   var $3091=$192;
   var $3092=(($3091)|0);
   $191=$3092;
   var $3093=$191;
   var $3094=$3093;
   $190=$3094;
   var $3095=$190;
   var $3096=(($3095)|0);
   var $3097=(($3096)|0);
   var $3098=$3097;
   var $3099=(($3098+4)|0);
   var $3100=HEAP32[(($3099)>>2)];
   var $3115 = $3100;label = 316; break;
  case 315: 
   $195=$3075;
   var $3102=$195;
   var $3103=(($3102)|0);
   $194=$3103;
   var $3104=$194;
   var $3105=$3104;
   $193=$3105;
   var $3106=$193;
   var $3107=(($3106)|0);
   var $3108=(($3107)|0);
   var $3109=$3108;
   var $3110=(($3109)|0);
   var $3111=$3110;
   var $3112=HEAP8[($3111)];
   var $3113=(($3112)&(255));
   var $3114=$3113 >> 1;
   var $3115 = $3114;label = 316; break;
  case 316: 
   var $3115;
   var $3116=(($3074+($3115<<2))|0);
   $202=$803;
   $203=$3116;
   var $3117=$202;
   var $3118=$203;
   $200=$3117;
   $201=$3118;
   var $3119=$200;
   var $3120=(($3119)|0);
   var $3121=$201;
   HEAP32[(($3120)>>2)]=$3121;
   $219=$__sym_curr_char;
   $220=$803;
   var $3122=$219;
   var $3123=$220;
   $217=$3122;
   $218=$3123;
   var $3124=$217;
   $216=$3124;
   var $3125=$216;
   var $3126=(($3125)|0);
   var $3127=HEAP32[(($3126)>>2)];
   var $3128=$218;
   $215=$3128;
   var $3129=$215;
   var $3130=(($3129)|0);
   var $3131=HEAP32[(($3130)>>2)];
   var $3132=(($3127)|(0))==(($3131)|(0));
   var $3133=$3132 ^ 1;
   if ($3133) { label = 317; break; } else { label = 318; break; }
  case 317: 
   var $3135=$781;
   var $3136=HEAP32[(($3135)>>2)];
   var $3137=$3136 | 4;
   HEAP32[(($3135)>>2)]=$3137;
   $776=0;
   $791=1;
   label = 498; break;
  case 318: 
   label = 319; break;
  case 319: 
   label = 449; break;
  case 320: 
   $__ng=0;
   label = 321; break;
  case 321: 
   var $3142=$777;
   $254=$3142;
   $255=$__e;
   var $3143=$254;
   var $3144=$255;
   $252=$3143;
   $253=$3144;
   var $3145=$252;
   $251=$3145;
   var $3146=$251;
   var $3147=(($3146)|0);
   var $3148=HEAP32[(($3147)>>2)];
   var $3149=(($3148)|(0))!=0;
   if ($3149) { label = 322; break; } else { label = 328; break; }
  case 322: 
   var $3151=(($3146)|0);
   var $3152=HEAP32[(($3151)>>2)];
   $250=$3152;
   var $3153=$250;
   var $3154=(($3153+12)|0);
   var $3155=HEAP32[(($3154)>>2)];
   var $3156=(($3153+16)|0);
   var $3157=HEAP32[(($3156)>>2)];
   var $3158=(($3155)|(0))==(($3157)|(0));
   if ($3158) { label = 323; break; } else { label = 325; break; }
  case 323: 
   var $3160=$3153;
   var $3161=HEAP32[(($3160)>>2)];
   var $3162=(($3161+36)|0);
   var $3163=HEAP32[(($3162)>>2)];
   var $3164 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3163]($3153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 324; break; } else { label = 37; break; }
  case 324: 
   $249=$3164;
   label = 326; break;
  case 325: 
   var $3166=(($3153+12)|0);
   var $3167=HEAP32[(($3166)>>2)];
   var $3168=HEAP32[(($3167)>>2)];
   $248=$3168;
   var $3169=$248;
   $249=$3169;
   label = 326; break;
  case 326: 
   var $3170=$249;
   $246=$3170;
   $247=-1;
   var $3171=$246;
   var $3172=$247;
   var $3173=(($3171)|(0))==(($3172)|(0));
   if ($3173) { label = 327; break; } else { label = 328; break; }
  case 327: 
   var $3175=(($3146)|0);
   HEAP32[(($3175)>>2)]=0;
   label = 328; break;
  case 328: 
   var $3176=(($3146)|0);
   var $3177=HEAP32[(($3176)>>2)];
   var $3178=(($3177)|(0))==0;
   var $3179=(($3178)&(1));
   var $3180=$253;
   $245=$3180;
   var $3181=$245;
   var $3182=(($3181)|0);
   var $3183=HEAP32[(($3182)>>2)];
   var $3184=(($3183)|(0))!=0;
   if ($3184) { label = 329; break; } else { label = 335; break; }
  case 329: 
   var $3186=(($3181)|0);
   var $3187=HEAP32[(($3186)>>2)];
   $244=$3187;
   var $3188=$244;
   var $3189=(($3188+12)|0);
   var $3190=HEAP32[(($3189)>>2)];
   var $3191=(($3188+16)|0);
   var $3192=HEAP32[(($3191)>>2)];
   var $3193=(($3190)|(0))==(($3192)|(0));
   if ($3193) { label = 330; break; } else { label = 332; break; }
  case 330: 
   var $3195=$3188;
   var $3196=HEAP32[(($3195)>>2)];
   var $3197=(($3196+36)|0);
   var $3198=HEAP32[(($3197)>>2)];
   var $3199 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3198]($3188) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 331; break; } else { label = 37; break; }
  case 331: 
   $243=$3199;
   label = 333; break;
  case 332: 
   var $3201=(($3188+12)|0);
   var $3202=HEAP32[(($3201)>>2)];
   var $3203=HEAP32[(($3202)>>2)];
   $242=$3203;
   var $3204=$242;
   $243=$3204;
   label = 333; break;
  case 333: 
   var $3205=$243;
   $240=$3205;
   $241=-1;
   var $3206=$240;
   var $3207=$241;
   var $3208=(($3206)|(0))==(($3207)|(0));
   if ($3208) { label = 334; break; } else { label = 335; break; }
  case 334: 
   var $3210=(($3181)|0);
   HEAP32[(($3210)>>2)]=0;
   label = 335; break;
  case 335: 
   var $3211=(($3181)|0);
   var $3212=HEAP32[(($3211)>>2)];
   var $3213=(($3212)|(0))==0;
   var $3214=(($3213)&(1));
   var $3215=(($3179)|(0))==(($3214)|(0));
   var $3216=$3215 ^ 1;
   label = 336; break;
  case 336: 
   if ($3216) { label = 337; break; } else { label = 368; break; }
  case 337: 
   var $3219=$777;
   $260=$3219;
   var $3220=$260;
   var $3221=(($3220)|0);
   var $3222=HEAP32[(($3221)>>2)];
   $259=$3222;
   var $3223=$259;
   var $3224=(($3223+12)|0);
   var $3225=HEAP32[(($3224)>>2)];
   var $3226=(($3223+16)|0);
   var $3227=HEAP32[(($3226)>>2)];
   var $3228=(($3225)|(0))==(($3227)|(0));
   if ($3228) { label = 338; break; } else { label = 340; break; }
  case 338: 
   var $3230=$3223;
   var $3231=HEAP32[(($3230)>>2)];
   var $3232=(($3231+36)|0);
   var $3233=HEAP32[(($3232)>>2)];
   var $3234 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3233]($3223) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 339; break; } else { label = 37; break; }
  case 339: 
   $258=$3234;
   label = 341; break;
  case 340: 
   var $3236=(($3223+12)|0);
   var $3237=HEAP32[(($3236)>>2)];
   var $3238=HEAP32[(($3237)>>2)];
   $257=$3238;
   var $3239=$257;
   $258=$3239;
   label = 341; break;
  case 341: 
   var $3240=$258;
   label = 342; break;
  case 342: 
   $__c=$3240;
   var $3242=$783;
   var $3243=$__c;
   $267=$3242;
   $268=2048;
   $269=$3243;
   var $3244=$267;
   var $3245=$3244;
   var $3246=HEAP32[(($3245)>>2)];
   var $3247=(($3246+12)|0);
   var $3248=HEAP32[(($3247)>>2)];
   var $3249=$268;
   var $3250=$269;
   var $3251 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3248]($3244, $3249, $3250) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 343; break; } else { label = 37; break; }
  case 343: 
   label = 344; break;
  case 344: 
   if ($3251) { label = 345; break; } else { label = 349; break; }
  case 345: 
   var $3254=$785;
   var $3255=HEAP32[(($3254)>>2)];
   var $3256=HEAP32[(($786)>>2)];
   var $3257=(($3255)|(0))==(($3256)|(0));
   if ($3257) { label = 346; break; } else { label = 348; break; }
  case 346: 
   var $3259=$784;
   var $3260=$785;
   (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($3259, $3260, $786) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 347; break; } else { label = 37; break; }
  case 347: 
   label = 348; break;
  case 348: 
   var $3263=$__c;
   var $3264=$785;
   var $3265=HEAP32[(($3264)>>2)];
   var $3266=(($3265+4)|0);
   HEAP32[(($3264)>>2)]=$3266;
   HEAP32[(($3265)>>2)]=$3263;
   var $3267=$__ng;
   var $3268=((($3267)+(1))|0);
   $__ng=$3268;
   label = 361; break;
  case 349: 
   $304=$__grp;
   var $3270=$304;
   $303=$3270;
   var $3271=$303;
   var $3272=(($3271)|0);
   $302=$3272;
   var $3273=$302;
   var $3274=$3273;
   $301=$3274;
   var $3275=$301;
   var $3276=(($3275)|0);
   var $3277=(($3276)|0);
   var $3278=$3277;
   var $3279=(($3278)|0);
   var $3280=$3279;
   var $3281=HEAP8[($3280)];
   var $3282=(($3281)&(255));
   var $3283=$3282 & 1;
   var $3284=(($3283)|(0))!=0;
   if ($3284) { label = 350; break; } else { label = 351; break; }
  case 350: 
   $297=$3270;
   var $3286=$297;
   var $3287=(($3286)|0);
   $296=$3287;
   var $3288=$296;
   var $3289=$3288;
   $295=$3289;
   var $3290=$295;
   var $3291=(($3290)|0);
   var $3292=(($3291)|0);
   var $3293=$3292;
   var $3294=(($3293+4)|0);
   var $3295=HEAP32[(($3294)>>2)];
   var $3310 = $3295;label = 352; break;
  case 351: 
   $300=$3270;
   var $3297=$300;
   var $3298=(($3297)|0);
   $299=$3298;
   var $3299=$299;
   var $3300=$3299;
   $298=$3300;
   var $3301=$298;
   var $3302=(($3301)|0);
   var $3303=(($3302)|0);
   var $3304=$3303;
   var $3305=(($3304)|0);
   var $3306=$3305;
   var $3307=HEAP8[($3306)];
   var $3308=(($3307)&(255));
   var $3309=$3308 >> 1;
   var $3310 = $3309;label = 352; break;
  case 352: 
   var $3310;
   var $3311=(($3310)>>>(0)) > 0;
   if ($3311) { label = 353; break; } else { label = 359; break; }
  case 353: 
   var $3313=$__ng;
   var $3314=(($3313)>>>(0)) > 0;
   if ($3314) { label = 354; break; } else { label = 359; break; }
  case 354: 
   var $3316=$__c;
   var $3317=HEAP32[(($__ts)>>2)];
   var $3318=(($3316)|(0))==(($3317)|(0));
   if ($3318) { label = 355; break; } else { label = 359; break; }
  case 355: 
   var $3320=HEAP32[(($__gn)>>2)];
   var $3321=HEAP32[(($__ge)>>2)];
   var $3322=(($3320)|(0))==(($3321)|(0));
   if ($3322) { label = 356; break; } else { label = 358; break; }
  case 356: 
   (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 357; break; } else { label = 37; break; }
  case 357: 
   label = 358; break;
  case 358: 
   var $3326=$__ng;
   var $3327=HEAP32[(($__gn)>>2)];
   var $3328=(($3327+4)|0);
   HEAP32[(($__gn)>>2)]=$3328;
   HEAP32[(($3327)>>2)]=$3326;
   $__ng=0;
   label = 360; break;
  case 359: 
   label = 368; break;
  case 360: 
   label = 361; break;
  case 361: 
   label = 362; break;
  case 362: 
   var $3333=$777;
   $330=$3333;
   var $3334=$330;
   var $3335=(($3334)|0);
   var $3336=HEAP32[(($3335)>>2)];
   $329=$3336;
   var $3337=$329;
   var $3338=(($3337+12)|0);
   var $3339=HEAP32[(($3338)>>2)];
   var $3340=(($3337+16)|0);
   var $3341=HEAP32[(($3340)>>2)];
   var $3342=(($3339)|(0))==(($3341)|(0));
   if ($3342) { label = 363; break; } else { label = 365; break; }
  case 363: 
   var $3344=$3337;
   var $3345=HEAP32[(($3344)>>2)];
   var $3346=(($3345+40)|0);
   var $3347=HEAP32[(($3346)>>2)];
   var $3348 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3347]($3337) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 364; break; } else { label = 37; break; }
  case 364: 
   $328=$3348;
   label = 366; break;
  case 365: 
   var $3350=(($3337+12)|0);
   var $3351=HEAP32[(($3350)>>2)];
   var $3352=(($3351+4)|0);
   HEAP32[(($3350)>>2)]=$3352;
   var $3353=HEAP32[(($3351)>>2)];
   $327=$3353;
   var $3354=$327;
   $328=$3354;
   label = 366; break;
  case 366: 
   var $3355=$328;
   label = 367; break;
  case 367: 
   label = 321; break;
  case 368: 
   $333=$__gb;
   var $3358=$333;
   var $3359=(($3358)|0);
   $332=$3359;
   var $3360=$332;
   var $3361=$3360;
   $331=$3361;
   var $3362=$331;
   var $3363=(($3362)|0);
   var $3364=HEAP32[(($3363)>>2)];
   var $3365=HEAP32[(($__gn)>>2)];
   var $3366=(($3364)|(0))!=(($3365)|(0));
   if ($3366) { label = 369; break; } else { label = 374; break; }
  case 369: 
   var $3368=$__ng;
   var $3369=(($3368)>>>(0)) > 0;
   if ($3369) { label = 370; break; } else { label = 374; break; }
  case 370: 
   var $3371=HEAP32[(($__gn)>>2)];
   var $3372=HEAP32[(($__ge)>>2)];
   var $3373=(($3371)|(0))==(($3372)|(0));
   if ($3373) { label = 371; break; } else { label = 373; break; }
  case 371: 
   (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 372; break; } else { label = 37; break; }
  case 372: 
   label = 373; break;
  case 373: 
   var $3377=$__ng;
   var $3378=HEAP32[(($__gn)>>2)];
   var $3379=(($3378+4)|0);
   HEAP32[(($__gn)>>2)]=$3379;
   HEAP32[(($3378)>>2)]=$3377;
   label = 374; break;
  case 374: 
   var $3381=HEAP32[(($__fd)>>2)];
   var $3382=(($3381)|(0)) > 0;
   if ($3382) { label = 375; break; } else { label = 446; break; }
  case 375: 
   var $3384=$777;
   $392=$3384;
   $393=$__e;
   var $3385=$392;
   var $3386=$393;
   $390=$3385;
   $391=$3386;
   var $3387=$390;
   $389=$3387;
   var $3388=$389;
   var $3389=(($3388)|0);
   var $3390=HEAP32[(($3389)>>2)];
   var $3391=(($3390)|(0))!=0;
   if ($3391) { label = 376; break; } else { label = 382; break; }
  case 376: 
   var $3393=(($3388)|0);
   var $3394=HEAP32[(($3393)>>2)];
   $388=$3394;
   var $3395=$388;
   var $3396=(($3395+12)|0);
   var $3397=HEAP32[(($3396)>>2)];
   var $3398=(($3395+16)|0);
   var $3399=HEAP32[(($3398)>>2)];
   var $3400=(($3397)|(0))==(($3399)|(0));
   if ($3400) { label = 377; break; } else { label = 379; break; }
  case 377: 
   var $3402=$3395;
   var $3403=HEAP32[(($3402)>>2)];
   var $3404=(($3403+36)|0);
   var $3405=HEAP32[(($3404)>>2)];
   var $3406 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3405]($3395) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 378; break; } else { label = 37; break; }
  case 378: 
   $387=$3406;
   label = 380; break;
  case 379: 
   var $3408=(($3395+12)|0);
   var $3409=HEAP32[(($3408)>>2)];
   var $3410=HEAP32[(($3409)>>2)];
   $386=$3410;
   var $3411=$386;
   $387=$3411;
   label = 380; break;
  case 380: 
   var $3412=$387;
   $384=$3412;
   $385=-1;
   var $3413=$384;
   var $3414=$385;
   var $3415=(($3413)|(0))==(($3414)|(0));
   if ($3415) { label = 381; break; } else { label = 382; break; }
  case 381: 
   var $3417=(($3388)|0);
   HEAP32[(($3417)>>2)]=0;
   label = 382; break;
  case 382: 
   var $3418=(($3388)|0);
   var $3419=HEAP32[(($3418)>>2)];
   var $3420=(($3419)|(0))==0;
   var $3421=(($3420)&(1));
   var $3422=$391;
   $383=$3422;
   var $3423=$383;
   var $3424=(($3423)|0);
   var $3425=HEAP32[(($3424)>>2)];
   var $3426=(($3425)|(0))!=0;
   if ($3426) { label = 383; break; } else { label = 389; break; }
  case 383: 
   var $3428=(($3423)|0);
   var $3429=HEAP32[(($3428)>>2)];
   $382=$3429;
   var $3430=$382;
   var $3431=(($3430+12)|0);
   var $3432=HEAP32[(($3431)>>2)];
   var $3433=(($3430+16)|0);
   var $3434=HEAP32[(($3433)>>2)];
   var $3435=(($3432)|(0))==(($3434)|(0));
   if ($3435) { label = 384; break; } else { label = 386; break; }
  case 384: 
   var $3437=$3430;
   var $3438=HEAP32[(($3437)>>2)];
   var $3439=(($3438+36)|0);
   var $3440=HEAP32[(($3439)>>2)];
   var $3441 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3440]($3430) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 385; break; } else { label = 37; break; }
  case 385: 
   $381=$3441;
   label = 387; break;
  case 386: 
   var $3443=(($3430+12)|0);
   var $3444=HEAP32[(($3443)>>2)];
   var $3445=HEAP32[(($3444)>>2)];
   $380=$3445;
   var $3446=$380;
   $381=$3446;
   label = 387; break;
  case 387: 
   var $3447=$381;
   $378=$3447;
   $379=-1;
   var $3448=$378;
   var $3449=$379;
   var $3450=(($3448)|(0))==(($3449)|(0));
   if ($3450) { label = 388; break; } else { label = 389; break; }
  case 388: 
   var $3452=(($3423)|0);
   HEAP32[(($3452)>>2)]=0;
   label = 389; break;
  case 389: 
   var $3453=(($3423)|0);
   var $3454=HEAP32[(($3453)>>2)];
   var $3455=(($3454)|(0))==0;
   var $3456=(($3455)&(1));
   var $3457=(($3421)|(0))==(($3456)|(0));
   label = 390; break;
  case 390: 
   if ($3457) { label = 397; break; } else { label = 391; break; }
  case 391: 
   var $3460=$777;
   $413=$3460;
   var $3461=$413;
   var $3462=(($3461)|0);
   var $3463=HEAP32[(($3462)>>2)];
   $412=$3463;
   var $3464=$412;
   var $3465=(($3464+12)|0);
   var $3466=HEAP32[(($3465)>>2)];
   var $3467=(($3464+16)|0);
   var $3468=HEAP32[(($3467)>>2)];
   var $3469=(($3466)|(0))==(($3468)|(0));
   if ($3469) { label = 392; break; } else { label = 394; break; }
  case 392: 
   var $3471=$3464;
   var $3472=HEAP32[(($3471)>>2)];
   var $3473=(($3472+36)|0);
   var $3474=HEAP32[(($3473)>>2)];
   var $3475 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3474]($3464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 393; break; } else { label = 37; break; }
  case 393: 
   $411=$3475;
   label = 395; break;
  case 394: 
   var $3477=(($3464+12)|0);
   var $3478=HEAP32[(($3477)>>2)];
   var $3479=HEAP32[(($3478)>>2)];
   $410=$3479;
   var $3480=$410;
   $411=$3480;
   label = 395; break;
  case 395: 
   var $3481=$411;
   label = 396; break;
  case 396: 
   var $3483=HEAP32[(($__dp)>>2)];
   var $3484=(($3481)|(0))!=(($3483)|(0));
   if ($3484) { label = 397; break; } else { label = 398; break; }
  case 397: 
   var $3486=$781;
   var $3487=HEAP32[(($3486)>>2)];
   var $3488=$3487 | 4;
   HEAP32[(($3486)>>2)]=$3488;
   $776=0;
   $791=1;
   label = 498; break;
  case 398: 
   var $3490=$777;
   $431=$3490;
   var $3491=$431;
   var $3492=(($3491)|0);
   var $3493=HEAP32[(($3492)>>2)];
   $430=$3493;
   var $3494=$430;
   var $3495=(($3494+12)|0);
   var $3496=HEAP32[(($3495)>>2)];
   var $3497=(($3494+16)|0);
   var $3498=HEAP32[(($3497)>>2)];
   var $3499=(($3496)|(0))==(($3498)|(0));
   if ($3499) { label = 399; break; } else { label = 401; break; }
  case 399: 
   var $3501=$3494;
   var $3502=HEAP32[(($3501)>>2)];
   var $3503=(($3502+40)|0);
   var $3504=HEAP32[(($3503)>>2)];
   var $3505 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3504]($3494) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 400; break; } else { label = 37; break; }
  case 400: 
   $429=$3505;
   label = 402; break;
  case 401: 
   var $3507=(($3494+12)|0);
   var $3508=HEAP32[(($3507)>>2)];
   var $3509=(($3508+4)|0);
   HEAP32[(($3507)>>2)]=$3509;
   var $3510=HEAP32[(($3508)>>2)];
   $428=$3510;
   var $3511=$428;
   $429=$3511;
   label = 402; break;
  case 402: 
   var $3512=$429;
   label = 403; break;
  case 403: 
   label = 404; break;
  case 404: 
   var $3515=HEAP32[(($__fd)>>2)];
   var $3516=(($3515)|(0)) > 0;
   if ($3516) { label = 405; break; } else { label = 445; break; }
  case 405: 
   var $3518=$777;
   $476=$3518;
   $477=$__e;
   var $3519=$476;
   var $3520=$477;
   $474=$3519;
   $475=$3520;
   var $3521=$474;
   $473=$3521;
   var $3522=$473;
   var $3523=(($3522)|0);
   var $3524=HEAP32[(($3523)>>2)];
   var $3525=(($3524)|(0))!=0;
   if ($3525) { label = 406; break; } else { label = 412; break; }
  case 406: 
   var $3527=(($3522)|0);
   var $3528=HEAP32[(($3527)>>2)];
   $472=$3528;
   var $3529=$472;
   var $3530=(($3529+12)|0);
   var $3531=HEAP32[(($3530)>>2)];
   var $3532=(($3529+16)|0);
   var $3533=HEAP32[(($3532)>>2)];
   var $3534=(($3531)|(0))==(($3533)|(0));
   if ($3534) { label = 407; break; } else { label = 409; break; }
  case 407: 
   var $3536=$3529;
   var $3537=HEAP32[(($3536)>>2)];
   var $3538=(($3537+36)|0);
   var $3539=HEAP32[(($3538)>>2)];
   var $3540 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3539]($3529) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 408; break; } else { label = 37; break; }
  case 408: 
   $471=$3540;
   label = 410; break;
  case 409: 
   var $3542=(($3529+12)|0);
   var $3543=HEAP32[(($3542)>>2)];
   var $3544=HEAP32[(($3543)>>2)];
   $470=$3544;
   var $3545=$470;
   $471=$3545;
   label = 410; break;
  case 410: 
   var $3546=$471;
   $468=$3546;
   $469=-1;
   var $3547=$468;
   var $3548=$469;
   var $3549=(($3547)|(0))==(($3548)|(0));
   if ($3549) { label = 411; break; } else { label = 412; break; }
  case 411: 
   var $3551=(($3522)|0);
   HEAP32[(($3551)>>2)]=0;
   label = 412; break;
  case 412: 
   var $3552=(($3522)|0);
   var $3553=HEAP32[(($3552)>>2)];
   var $3554=(($3553)|(0))==0;
   var $3555=(($3554)&(1));
   var $3556=$475;
   $467=$3556;
   var $3557=$467;
   var $3558=(($3557)|0);
   var $3559=HEAP32[(($3558)>>2)];
   var $3560=(($3559)|(0))!=0;
   if ($3560) { label = 413; break; } else { label = 419; break; }
  case 413: 
   var $3562=(($3557)|0);
   var $3563=HEAP32[(($3562)>>2)];
   $466=$3563;
   var $3564=$466;
   var $3565=(($3564+12)|0);
   var $3566=HEAP32[(($3565)>>2)];
   var $3567=(($3564+16)|0);
   var $3568=HEAP32[(($3567)>>2)];
   var $3569=(($3566)|(0))==(($3568)|(0));
   if ($3569) { label = 414; break; } else { label = 416; break; }
  case 414: 
   var $3571=$3564;
   var $3572=HEAP32[(($3571)>>2)];
   var $3573=(($3572+36)|0);
   var $3574=HEAP32[(($3573)>>2)];
   var $3575 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3574]($3564) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 415; break; } else { label = 37; break; }
  case 415: 
   $465=$3575;
   label = 417; break;
  case 416: 
   var $3577=(($3564+12)|0);
   var $3578=HEAP32[(($3577)>>2)];
   var $3579=HEAP32[(($3578)>>2)];
   $464=$3579;
   var $3580=$464;
   $465=$3580;
   label = 417; break;
  case 417: 
   var $3581=$465;
   $462=$3581;
   $463=-1;
   var $3582=$462;
   var $3583=$463;
   var $3584=(($3582)|(0))==(($3583)|(0));
   if ($3584) { label = 418; break; } else { label = 419; break; }
  case 418: 
   var $3586=(($3557)|0);
   HEAP32[(($3586)>>2)]=0;
   label = 419; break;
  case 419: 
   var $3587=(($3557)|0);
   var $3588=HEAP32[(($3587)>>2)];
   var $3589=(($3588)|(0))==0;
   var $3590=(($3589)&(1));
   var $3591=(($3555)|(0))==(($3590)|(0));
   label = 420; break;
  case 420: 
   if ($3591) { label = 429; break; } else { label = 421; break; }
  case 421: 
   var $3594=$783;
   var $3595=$777;
   $497=$3595;
   var $3596=$497;
   var $3597=(($3596)|0);
   var $3598=HEAP32[(($3597)>>2)];
   $496=$3598;
   var $3599=$496;
   var $3600=(($3599+12)|0);
   var $3601=HEAP32[(($3600)>>2)];
   var $3602=(($3599+16)|0);
   var $3603=HEAP32[(($3602)>>2)];
   var $3604=(($3601)|(0))==(($3603)|(0));
   if ($3604) { label = 422; break; } else { label = 424; break; }
  case 422: 
   var $3606=$3599;
   var $3607=HEAP32[(($3606)>>2)];
   var $3608=(($3607+36)|0);
   var $3609=HEAP32[(($3608)>>2)];
   var $3610 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3609]($3599) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 423; break; } else { label = 37; break; }
  case 423: 
   $495=$3610;
   label = 425; break;
  case 424: 
   var $3612=(($3599+12)|0);
   var $3613=HEAP32[(($3612)>>2)];
   var $3614=HEAP32[(($3613)>>2)];
   $494=$3614;
   var $3615=$494;
   $495=$3615;
   label = 425; break;
  case 425: 
   var $3616=$495;
   label = 426; break;
  case 426: 
   $508=$3594;
   $509=2048;
   $510=$3616;
   var $3618=$508;
   var $3619=$3618;
   var $3620=HEAP32[(($3619)>>2)];
   var $3621=(($3620+12)|0);
   var $3622=HEAP32[(($3621)>>2)];
   var $3623=$509;
   var $3624=$510;
   var $3625 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3622]($3618, $3623, $3624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 427; break; } else { label = 37; break; }
  case 427: 
   label = 428; break;
  case 428: 
   if ($3625) { label = 430; break; } else { label = 429; break; }
  case 429: 
   var $3628=$781;
   var $3629=HEAP32[(($3628)>>2)];
   var $3630=$3629 | 4;
   HEAP32[(($3628)>>2)]=$3630;
   $776=0;
   $791=1;
   label = 498; break;
  case 430: 
   var $3632=$785;
   var $3633=HEAP32[(($3632)>>2)];
   var $3634=HEAP32[(($786)>>2)];
   var $3635=(($3633)|(0))==(($3634)|(0));
   if ($3635) { label = 431; break; } else { label = 433; break; }
  case 431: 
   var $3637=$784;
   var $3638=$785;
   (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($3637, $3638, $786) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 432; break; } else { label = 37; break; }
  case 432: 
   label = 433; break;
  case 433: 
   var $3641=$777;
   $534=$3641;
   var $3642=$534;
   var $3643=(($3642)|0);
   var $3644=HEAP32[(($3643)>>2)];
   $533=$3644;
   var $3645=$533;
   var $3646=(($3645+12)|0);
   var $3647=HEAP32[(($3646)>>2)];
   var $3648=(($3645+16)|0);
   var $3649=HEAP32[(($3648)>>2)];
   var $3650=(($3647)|(0))==(($3649)|(0));
   if ($3650) { label = 434; break; } else { label = 436; break; }
  case 434: 
   var $3652=$3645;
   var $3653=HEAP32[(($3652)>>2)];
   var $3654=(($3653+36)|0);
   var $3655=HEAP32[(($3654)>>2)];
   var $3656 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3655]($3645) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 435; break; } else { label = 37; break; }
  case 435: 
   $532=$3656;
   label = 437; break;
  case 436: 
   var $3658=(($3645+12)|0);
   var $3659=HEAP32[(($3658)>>2)];
   var $3660=HEAP32[(($3659)>>2)];
   $531=$3660;
   var $3661=$531;
   $532=$3661;
   label = 437; break;
  case 437: 
   var $3662=$532;
   label = 438; break;
  case 438: 
   var $3664=$785;
   var $3665=HEAP32[(($3664)>>2)];
   var $3666=(($3665+4)|0);
   HEAP32[(($3664)>>2)]=$3666;
   HEAP32[(($3665)>>2)]=$3662;
   label = 439; break;
  case 439: 
   var $3668=HEAP32[(($__fd)>>2)];
   var $3669=((($3668)-(1))|0);
   HEAP32[(($__fd)>>2)]=$3669;
   var $3670=$777;
   $638=$3670;
   var $3671=$638;
   var $3672=(($3671)|0);
   var $3673=HEAP32[(($3672)>>2)];
   $637=$3673;
   var $3674=$637;
   var $3675=(($3674+12)|0);
   var $3676=HEAP32[(($3675)>>2)];
   var $3677=(($3674+16)|0);
   var $3678=HEAP32[(($3677)>>2)];
   var $3679=(($3676)|(0))==(($3678)|(0));
   if ($3679) { label = 440; break; } else { label = 442; break; }
  case 440: 
   var $3681=$3674;
   var $3682=HEAP32[(($3681)>>2)];
   var $3683=(($3682+40)|0);
   var $3684=HEAP32[(($3683)>>2)];
   var $3685 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3684]($3674) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 441; break; } else { label = 37; break; }
  case 441: 
   $636=$3685;
   label = 443; break;
  case 442: 
   var $3687=(($3674+12)|0);
   var $3688=HEAP32[(($3687)>>2)];
   var $3689=(($3688+4)|0);
   HEAP32[(($3687)>>2)]=$3689;
   var $3690=HEAP32[(($3688)>>2)];
   $635=$3690;
   var $3691=$635;
   $636=$3691;
   label = 443; break;
  case 443: 
   var $3692=$636;
   label = 444; break;
  case 444: 
   label = 404; break;
  case 445: 
   label = 446; break;
  case 446: 
   var $3696=$785;
   var $3697=HEAP32[(($3696)>>2)];
   var $3698=$784;
   $641=$3698;
   var $3699=$641;
   var $3700=(($3699)|0);
   $640=$3700;
   var $3701=$640;
   var $3702=$3701;
   $639=$3702;
   var $3703=$639;
   var $3704=(($3703)|0);
   var $3705=HEAP32[(($3704)>>2)];
   var $3706=(($3697)|(0))==(($3705)|(0));
   if ($3706) { label = 447; break; } else { label = 448; break; }
  case 447: 
   var $3708=$781;
   var $3709=HEAP32[(($3708)>>2)];
   var $3710=$3709 | 4;
   HEAP32[(($3708)>>2)]=$3710;
   $776=0;
   $791=1;
   label = 498; break;
  case 448: 
   label = 449; break;
  case 449: 
   label = 450; break;
  case 450: 
   var $3714=$__p;
   var $3715=((($3714)+(1))|0);
   $__p=$3715;
   label = 18; break;
  case 451: 
   var $3717=$__trailing_sign;
   var $3718=(($3717)|(0))!=0;
   if ($3718) { label = 452; break; } else { label = 492; break; }
  case 452: 
   $__i=1;
   label = 453; break;
  case 453: 
   var $3721=$__i;
   var $3722=$__trailing_sign;
   $651=$3722;
   var $3723=$651;
   $650=$3723;
   var $3724=$650;
   var $3725=(($3724)|0);
   $649=$3725;
   var $3726=$649;
   var $3727=$3726;
   $648=$3727;
   var $3728=$648;
   var $3729=(($3728)|0);
   var $3730=(($3729)|0);
   var $3731=$3730;
   var $3732=(($3731)|0);
   var $3733=$3732;
   var $3734=HEAP8[($3733)];
   var $3735=(($3734)&(255));
   var $3736=$3735 & 1;
   var $3737=(($3736)|(0))!=0;
   if ($3737) { label = 454; break; } else { label = 455; break; }
  case 454: 
   $644=$3723;
   var $3739=$644;
   var $3740=(($3739)|0);
   $643=$3740;
   var $3741=$643;
   var $3742=$3741;
   $642=$3742;
   var $3743=$642;
   var $3744=(($3743)|0);
   var $3745=(($3744)|0);
   var $3746=$3745;
   var $3747=(($3746+4)|0);
   var $3748=HEAP32[(($3747)>>2)];
   var $3763 = $3748;label = 456; break;
  case 455: 
   $647=$3723;
   var $3750=$647;
   var $3751=(($3750)|0);
   $646=$3751;
   var $3752=$646;
   var $3753=$3752;
   $645=$3753;
   var $3754=$645;
   var $3755=(($3754)|0);
   var $3756=(($3755)|0);
   var $3757=$3756;
   var $3758=(($3757)|0);
   var $3759=$3758;
   var $3760=HEAP8[($3759)];
   var $3761=(($3760)&(255));
   var $3762=$3761 >> 1;
   var $3763 = $3762;label = 456; break;
  case 456: 
   var $3763;
   var $3764=(($3721)>>>(0)) < (($3763)>>>(0));
   if ($3764) { label = 457; break; } else { label = 491; break; }
  case 457: 
   var $3766=$777;
   $678=$3766;
   $679=$__e;
   var $3767=$678;
   var $3768=$679;
   $676=$3767;
   $677=$3768;
   var $3769=$676;
   $675=$3769;
   var $3770=$675;
   var $3771=(($3770)|0);
   var $3772=HEAP32[(($3771)>>2)];
   var $3773=(($3772)|(0))!=0;
   if ($3773) { label = 458; break; } else { label = 464; break; }
  case 458: 
   var $3775=(($3770)|0);
   var $3776=HEAP32[(($3775)>>2)];
   $674=$3776;
   var $3777=$674;
   var $3778=(($3777+12)|0);
   var $3779=HEAP32[(($3778)>>2)];
   var $3780=(($3777+16)|0);
   var $3781=HEAP32[(($3780)>>2)];
   var $3782=(($3779)|(0))==(($3781)|(0));
   if ($3782) { label = 459; break; } else { label = 461; break; }
  case 459: 
   var $3784=$3777;
   var $3785=HEAP32[(($3784)>>2)];
   var $3786=(($3785+36)|0);
   var $3787=HEAP32[(($3786)>>2)];
   var $3788 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3787]($3777) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 460; break; } else { label = 37; break; }
  case 460: 
   $673=$3788;
   label = 462; break;
  case 461: 
   var $3790=(($3777+12)|0);
   var $3791=HEAP32[(($3790)>>2)];
   var $3792=HEAP32[(($3791)>>2)];
   $672=$3792;
   var $3793=$672;
   $673=$3793;
   label = 462; break;
  case 462: 
   var $3794=$673;
   $670=$3794;
   $671=-1;
   var $3795=$670;
   var $3796=$671;
   var $3797=(($3795)|(0))==(($3796)|(0));
   if ($3797) { label = 463; break; } else { label = 464; break; }
  case 463: 
   var $3799=(($3770)|0);
   HEAP32[(($3799)>>2)]=0;
   label = 464; break;
  case 464: 
   var $3800=(($3770)|0);
   var $3801=HEAP32[(($3800)>>2)];
   var $3802=(($3801)|(0))==0;
   var $3803=(($3802)&(1));
   var $3804=$677;
   $669=$3804;
   var $3805=$669;
   var $3806=(($3805)|0);
   var $3807=HEAP32[(($3806)>>2)];
   var $3808=(($3807)|(0))!=0;
   if ($3808) { label = 465; break; } else { label = 471; break; }
  case 465: 
   var $3810=(($3805)|0);
   var $3811=HEAP32[(($3810)>>2)];
   $668=$3811;
   var $3812=$668;
   var $3813=(($3812+12)|0);
   var $3814=HEAP32[(($3813)>>2)];
   var $3815=(($3812+16)|0);
   var $3816=HEAP32[(($3815)>>2)];
   var $3817=(($3814)|(0))==(($3816)|(0));
   if ($3817) { label = 466; break; } else { label = 468; break; }
  case 466: 
   var $3819=$3812;
   var $3820=HEAP32[(($3819)>>2)];
   var $3821=(($3820+36)|0);
   var $3822=HEAP32[(($3821)>>2)];
   var $3823 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3822]($3812) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 467; break; } else { label = 37; break; }
  case 467: 
   $667=$3823;
   label = 469; break;
  case 468: 
   var $3825=(($3812+12)|0);
   var $3826=HEAP32[(($3825)>>2)];
   var $3827=HEAP32[(($3826)>>2)];
   $666=$3827;
   var $3828=$666;
   $667=$3828;
   label = 469; break;
  case 469: 
   var $3829=$667;
   $664=$3829;
   $665=-1;
   var $3830=$664;
   var $3831=$665;
   var $3832=(($3830)|(0))==(($3831)|(0));
   if ($3832) { label = 470; break; } else { label = 471; break; }
  case 470: 
   var $3834=(($3805)|0);
   HEAP32[(($3834)>>2)]=0;
   label = 471; break;
  case 471: 
   var $3835=(($3805)|0);
   var $3836=HEAP32[(($3835)>>2)];
   var $3837=(($3836)|(0))==0;
   var $3838=(($3837)&(1));
   var $3839=(($3803)|(0))==(($3838)|(0));
   label = 472; break;
  case 472: 
   if ($3839) { label = 483; break; } else { label = 473; break; }
  case 473: 
   var $3842=$777;
   $692=$3842;
   var $3843=$692;
   var $3844=(($3843)|0);
   var $3845=HEAP32[(($3844)>>2)];
   $691=$3845;
   var $3846=$691;
   var $3847=(($3846+12)|0);
   var $3848=HEAP32[(($3847)>>2)];
   var $3849=(($3846+16)|0);
   var $3850=HEAP32[(($3849)>>2)];
   var $3851=(($3848)|(0))==(($3850)|(0));
   if ($3851) { label = 474; break; } else { label = 476; break; }
  case 474: 
   var $3853=$3846;
   var $3854=HEAP32[(($3853)>>2)];
   var $3855=(($3854+36)|0);
   var $3856=HEAP32[(($3855)>>2)];
   var $3857 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3856]($3846) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 475; break; } else { label = 37; break; }
  case 475: 
   $690=$3857;
   label = 477; break;
  case 476: 
   var $3859=(($3846+12)|0);
   var $3860=HEAP32[(($3859)>>2)];
   var $3861=HEAP32[(($3860)>>2)];
   $689=$3861;
   var $3862=$689;
   $690=$3862;
   label = 477; break;
  case 477: 
   var $3863=$690;
   label = 478; break;
  case 478: 
   var $3865=$__trailing_sign;
   var $3866=$__i;
   $704=$3865;
   $705=$3866;
   var $3867=$704;
   $703=$3867;
   var $3868=$703;
   $702=$3868;
   var $3869=$702;
   $701=$3869;
   var $3870=$701;
   var $3871=(($3870)|0);
   $700=$3871;
   var $3872=$700;
   var $3873=$3872;
   $699=$3873;
   var $3874=$699;
   var $3875=(($3874)|0);
   var $3876=(($3875)|0);
   var $3877=$3876;
   var $3878=(($3877)|0);
   var $3879=$3878;
   var $3880=HEAP8[($3879)];
   var $3881=(($3880)&(255));
   var $3882=$3881 & 1;
   var $3883=(($3882)|(0))!=0;
   if ($3883) { label = 479; break; } else { label = 480; break; }
  case 479: 
   $695=$3869;
   var $3885=$695;
   var $3886=(($3885)|0);
   $694=$3886;
   var $3887=$694;
   var $3888=$3887;
   $693=$3888;
   var $3889=$693;
   var $3890=(($3889)|0);
   var $3891=(($3890)|0);
   var $3892=$3891;
   var $3893=(($3892+8)|0);
   var $3894=HEAP32[(($3893)>>2)];
   var $3906 = $3894;label = 481; break;
  case 480: 
   $698=$3869;
   var $3896=$698;
   var $3897=(($3896)|0);
   $697=$3897;
   var $3898=$697;
   var $3899=$3898;
   $696=$3899;
   var $3900=$696;
   var $3901=(($3900)|0);
   var $3902=(($3901)|0);
   var $3903=$3902;
   var $3904=(($3903+4)|0);
   var $3905=(($3904)|0);
   var $3906 = $3905;label = 481; break;
  case 481: 
   var $3906;
   var $3907=$705;
   var $3908=(($3906+($3907<<2))|0);
   label = 482; break;
  case 482: 
   var $3910=HEAP32[(($3908)>>2)];
   var $3911=(($3863)|(0))!=(($3910)|(0));
   if ($3911) { label = 483; break; } else { label = 484; break; }
  case 483: 
   var $3913=$781;
   var $3914=HEAP32[(($3913)>>2)];
   var $3915=$3914 | 4;
   HEAP32[(($3913)>>2)]=$3915;
   $776=0;
   $791=1;
   label = 498; break;
  case 484: 
   label = 485; break;
  case 485: 
   var $3918=$__i;
   var $3919=((($3918)+(1))|0);
   $__i=$3919;
   var $3920=$777;
   $718=$3920;
   var $3921=$718;
   var $3922=(($3921)|0);
   var $3923=HEAP32[(($3922)>>2)];
   $717=$3923;
   var $3924=$717;
   var $3925=(($3924+12)|0);
   var $3926=HEAP32[(($3925)>>2)];
   var $3927=(($3924+16)|0);
   var $3928=HEAP32[(($3927)>>2)];
   var $3929=(($3926)|(0))==(($3928)|(0));
   if ($3929) { label = 486; break; } else { label = 488; break; }
  case 486: 
   var $3931=$3924;
   var $3932=HEAP32[(($3931)>>2)];
   var $3933=(($3932+40)|0);
   var $3934=HEAP32[(($3933)>>2)];
   var $3935 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3934]($3924) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 487; break; } else { label = 37; break; }
  case 487: 
   $716=$3935;
   label = 489; break;
  case 488: 
   var $3937=(($3924+12)|0);
   var $3938=HEAP32[(($3937)>>2)];
   var $3939=(($3938+4)|0);
   HEAP32[(($3937)>>2)]=$3939;
   var $3940=HEAP32[(($3938)>>2)];
   $715=$3940;
   var $3941=$715;
   $716=$3941;
   label = 489; break;
  case 489: 
   var $3942=$716;
   label = 490; break;
  case 490: 
   label = 453; break;
  case 491: 
   label = 492; break;
  case 492: 
   $721=$__gb;
   var $3946=$721;
   var $3947=(($3946)|0);
   $720=$3947;
   var $3948=$720;
   var $3949=$3948;
   $719=$3949;
   var $3950=$719;
   var $3951=(($3950)|0);
   var $3952=HEAP32[(($3951)>>2)];
   var $3953=HEAP32[(($__gn)>>2)];
   var $3954=(($3952)|(0))!=(($3953)|(0));
   if ($3954) { label = 493; break; } else { label = 497; break; }
  case 493: 
   HEAP32[(($__et)>>2)]=0;
   $724=$__gb;
   var $3956=$724;
   var $3957=(($3956)|0);
   $723=$3957;
   var $3958=$723;
   var $3959=$3958;
   $722=$3959;
   var $3960=$722;
   var $3961=(($3960)|0);
   var $3962=HEAP32[(($3961)>>2)];
   var $3963=HEAP32[(($__gn)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $3962, $3963, $__et) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 494; break; } else { label = 37; break; }
  case 494: 
   var $3965=HEAP32[(($__et)>>2)];
   var $3966=(($3965)|(0))!=0;
   if ($3966) { label = 495; break; } else { label = 496; break; }
  case 495: 
   var $3968=$781;
   var $3969=HEAP32[(($3968)>>2)];
   var $3970=$3969 | 4;
   HEAP32[(($3968)>>2)]=$3970;
   $776=0;
   $791=1;
   label = 498; break;
  case 496: 
   label = 497; break;
  case 497: 
   $776=1;
   $791=1;
   label = 498; break;
  case 498: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $755=$__gb;
   var $3974=$755;
   $754=$3974;
   var $3975=$754;
   $752=$3975;
   $753=0;
   var $3976=$752;
   var $3977=(($3976)|0);
   $751=$3977;
   var $3978=$751;
   var $3979=$3978;
   $750=$3979;
   var $3980=$750;
   var $3981=(($3980)|0);
   var $3982=HEAP32[(($3981)>>2)];
   $__tmp_i_i_i=$3982;
   var $3983=$753;
   var $3984=(($3976)|0);
   $749=$3984;
   var $3985=$749;
   var $3986=$3985;
   $748=$3986;
   var $3987=$748;
   var $3988=(($3987)|0);
   HEAP32[(($3988)>>2)]=$3983;
   var $3989=$__tmp_i_i_i;
   var $3990=(($3989)|(0))!=0;
   if ($3990) { label = 499; break; } else { label = 502; break; }
  case 499: 
   var $3992=(($3976)|0);
   $747=$3992;
   var $3993=$747;
   var $3994=$3993;
   $746=$3994;
   var $3995=$746;
   var $3996=(($3995+4)|0);
   var $3997=HEAP32[(($3996)>>2)];
   var $3998=$__tmp_i_i_i;
   var $3999=$3998;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3997]($3999) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 500; break; } else { label = 501; break; }
  case 500: 
   label = 502; break;
  case 501: 
   var $4002$0 = ___cxa_find_matching_catch(-1, -1,0); $4002$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 502: 
   var $4003=$776;
   STACKTOP = __stackBase__;
   return $4003;
  case 503: 
   var $4005=$788;
   var $4006=$789;
   var $4007$0=$4005;
   var $4007$1=0;
   var $4008$0=$4007$0;
   var $4008$1=$4006;
   ___resumeException($4008$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 496)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $__tmp_i_i_i1;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57=__stackBase__;
   var $58=(__stackBase__)+(8);
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $__tmp_i_i_i;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75=(__stackBase__)+(16);
   var $76=(__stackBase__)+(24);
   var $77;
   var $78;
   var $79=(__stackBase__)+(32);
   var $80=(__stackBase__)+(40);
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $__bz;
   var $__wbuf=(__stackBase__)+(48);
   var $__wb=(__stackBase__)+(448);
   var $96=(__stackBase__)+(456);
   var $__wn=(__stackBase__)+(464);
   var $__we;
   var $__loc=(__stackBase__)+(472);
   var $97;
   var $98;
   var $__ct;
   var $__neg=(__stackBase__)+(480);
   var $99=(__stackBase__)+(488);
   var $__z;
   var $__w;
   var $100;
   $91=$this;
   var $101=(($__intl)&(1));
   $92=$101;
   $93=$__iob;
   $94=$__err;
   $95=$__v;
   var $102=$91;
   $__bz=100;
   var $103=(($__wbuf)|0);
   HEAP32[(($96)>>2)]=542;
   $88=$__wb;
   $89=$103;
   $90=$96;
   var $104=$88;
   var $105=$89;
   var $106=$90;
   $85=$104;
   $86=$105;
   $87=$106;
   var $107=$85;
   var $108=(($107)|0);
   var $109=$86;
   var $110=$87;
   $84=$110;
   var $111=$84;
   var $112=HEAP32[(($111)>>2)];
   $81=$108;
   $82=$109;
   $83=$112;
   var $113=$81;
   var $114=$82;
   var $115=$83;
   $78=$113;
   HEAP32[(($79)>>2)]=$114;
   HEAP32[(($80)>>2)]=$115;
   var $116=$78;
   var $117=$116;
   $77=$79;
   var $118=$77;
   var $119=HEAP32[(($118)>>2)];
   $71=$80;
   var $120=$71;
   var $121=HEAP32[(($120)>>2)];
   $74=$117;
   HEAP32[(($75)>>2)]=$119;
   HEAP32[(($76)>>2)]=$121;
   var $122=$74;
   var $123=(($122)|0);
   $73=$75;
   var $124=$73;
   var $125=HEAP32[(($124)>>2)];
   HEAP32[(($123)>>2)]=$125;
   var $126=(($122+4)|0);
   $72=$76;
   var $127=$72;
   var $128=HEAP32[(($127)>>2)];
   HEAP32[(($126)>>2)]=$128;
   var $129=(($__wbuf)|0);
   var $130=(($129+400)|0);
   $__we=$130;
   var $131=$93;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc, $131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 15; break; }
  case 2: 
   $60=$__loc;
   var $133=$60;
   var $134 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($133, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 16; break; }
  case 3: 
   var $135=$134;
   label = 4; break;
  case 4: 
   $__ct=$135;
   HEAP8[($__neg)]=0;
   var $137=$99;
   var $138=$__e;
   assert(4 % 1 === 0);HEAP32[(($137)>>2)]=HEAP32[(($138)>>2)];
   var $139=$92;
   var $140=(($139) & 1);
   var $141=$93;
   $59=$141;
   var $142=$59;
   var $143=(($142+4)|0);
   var $144=HEAP32[(($143)>>2)];
   label = 5; break;
  case 5: 
   var $146=$94;
   var $147=$__ct;
   var $148=$__we;
   var $149 = (function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $99, $140, $__loc, $144, $146, $__neg, $147, $__wb, $__wn, $148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 16; break; }
  case 6: 
   if ($149) { label = 7; break; } else { label = 27; break; }
  case 7: 
   var $152=$95;
   $56=$152;
   var $153=$56;
   $55=$153;
   var $154=$55;
   $36=$153;
   var $155=$36;
   var $156=(($155)|0);
   $35=$156;
   var $157=$35;
   var $158=$157;
   $34=$158;
   var $159=$34;
   var $160=(($159)|0);
   var $161=(($160)|0);
   var $162=$161;
   var $163=(($162)|0);
   var $164=$163;
   var $165=HEAP8[($164)];
   var $166=(($165)&(255));
   var $167=$166 & 1;
   var $168=(($167)|(0))!=0;
   if ($168) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $39=$153;
   var $170=$39;
   var $171=(($170)|0);
   $38=$171;
   var $172=$38;
   var $173=$172;
   $37=$173;
   var $174=$37;
   var $175=(($174)|0);
   var $176=(($175)|0);
   var $177=$176;
   var $178=(($177+8)|0);
   var $179=HEAP32[(($178)>>2)];
   HEAP32[(($57)>>2)]=0;
   $40=$179;
   $41=$57;
   var $180=$41;
   var $181=HEAP32[(($180)>>2)];
   var $182=$40;
   HEAP32[(($182)>>2)]=$181;
   $44=$153;
   $45=0;
   var $183=$44;
   var $184=$45;
   var $185=(($183)|0);
   $43=$185;
   var $186=$43;
   var $187=$186;
   $42=$187;
   var $188=$42;
   var $189=(($188)|0);
   var $190=(($189)|0);
   var $191=$190;
   var $192=(($191+4)|0);
   HEAP32[(($192)>>2)]=$184;
   label = 10; break;
  case 9: 
   $48=$153;
   var $194=$48;
   var $195=(($194)|0);
   $47=$195;
   var $196=$47;
   var $197=$196;
   $46=$197;
   var $198=$46;
   var $199=(($198)|0);
   var $200=(($199)|0);
   var $201=$200;
   var $202=(($201+4)|0);
   var $203=(($202)|0);
   HEAP32[(($58)>>2)]=0;
   $49=$203;
   $50=$58;
   var $204=$50;
   var $205=HEAP32[(($204)>>2)];
   var $206=$49;
   HEAP32[(($206)>>2)]=$205;
   $53=$153;
   $54=0;
   var $207=$53;
   var $208=$54;
   var $209=$208 << 1;
   var $210=(($209) & 255);
   var $211=(($207)|0);
   $52=$211;
   var $212=$52;
   var $213=$212;
   $51=$213;
   var $214=$51;
   var $215=(($214)|0);
   var $216=(($215)|0);
   var $217=$216;
   var $218=(($217)|0);
   var $219=$218;
   HEAP8[($219)]=$210;
   label = 10; break;
  case 10: 
   var $220=HEAP8[($__neg)];
   var $221=(($220) & 1);
   if ($221) { label = 11; break; } else { label = 17; break; }
  case 11: 
   var $223=$95;
   var $224=$__ct;
   $22=$224;
   $23=45;
   var $225=$22;
   var $226=$225;
   var $227=HEAP32[(($226)>>2)];
   var $228=(($227+44)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230=$23;
   var $231 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$229]($225, $230) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 16; break; }
  case 12: 
   label = 13; break;
  case 13: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($223, $231) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 16; break; }
  case 14: 
   label = 17; break;
  case 15: 
   var $235$0 = ___cxa_find_matching_catch(-1, -1); $235$1 = tempRet0;
   var $236=$235$0;
   $97=$236;
   var $237=$235$1;
   $98=$237;
   label = 49; break;
  case 16: 
   var $239$0 = ___cxa_find_matching_catch(-1, -1); $239$1 = tempRet0;
   var $240=$239$0;
   $97=$240;
   var $241=$239$1;
   $98=$241;
   __ZNSt3__16localeD2Ev($__loc);
   label = 49; break;
  case 17: 
   var $243=$__ct;
   $20=$243;
   $21=48;
   var $244=$20;
   var $245=$244;
   var $246=HEAP32[(($245)>>2)];
   var $247=(($246+44)|0);
   var $248=HEAP32[(($247)>>2)];
   var $249=$21;
   var $250 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$248]($244, $249) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 16; break; }
  case 18: 
   label = 19; break;
  case 19: 
   $__z=$250;
   $19=$__wb;
   var $252=$19;
   var $253=(($252)|0);
   $18=$253;
   var $254=$18;
   var $255=$254;
   $17=$255;
   var $256=$17;
   var $257=(($256)|0);
   var $258=HEAP32[(($257)>>2)];
   $__w=$258;
   label = 20; break;
  case 20: 
   var $260=$__w;
   var $261=HEAP32[(($__wn)>>2)];
   var $262=((($261)-(4))|0);
   var $263=(($260)>>>(0)) < (($262)>>>(0));
   if ($263) { label = 21; break; } else { label = 25; break; }
  case 21: 
   var $265=$__w;
   var $266=HEAP32[(($265)>>2)];
   var $267=$__z;
   var $268=(($266)|(0))!=(($267)|(0));
   if ($268) { label = 22; break; } else { label = 23; break; }
  case 22: 
   label = 25; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $272=$__w;
   var $273=(($272+4)|0);
   $__w=$273;
   label = 20; break;
  case 25: 
   var $275=$95;
   var $276=$__w;
   var $277=HEAP32[(($__wn)>>2)];
   var $278 = (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($275, $276, $277) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 16; break; }
  case 26: 
   label = 27; break;
  case 27: 
   $15=$__b;
   $16=$__e;
   var $281=$15;
   var $282=$16;
   $13=$281;
   $14=$282;
   var $283=$13;
   $12=$283;
   var $284=$12;
   var $285=(($284)|0);
   var $286=HEAP32[(($285)>>2)];
   var $287=(($286)|(0))!=0;
   if ($287) { label = 28; break; } else { label = 34; break; }
  case 28: 
   var $289=(($284)|0);
   var $290=HEAP32[(($289)>>2)];
   $11=$290;
   var $291=$11;
   var $292=(($291+12)|0);
   var $293=HEAP32[(($292)>>2)];
   var $294=(($291+16)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296=(($293)|(0))==(($295)|(0));
   if ($296) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $298=$291;
   var $299=HEAP32[(($298)>>2)];
   var $300=(($299+36)|0);
   var $301=HEAP32[(($300)>>2)];
   var $302 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$301]($291) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 16; break; }
  case 30: 
   $10=$302;
   label = 32; break;
  case 31: 
   var $304=(($291+12)|0);
   var $305=HEAP32[(($304)>>2)];
   var $306=HEAP32[(($305)>>2)];
   $9=$306;
   var $307=$9;
   $10=$307;
   label = 32; break;
  case 32: 
   var $308=$10;
   $7=$308;
   $8=-1;
   var $309=$7;
   var $310=$8;
   var $311=(($309)|(0))==(($310)|(0));
   if ($311) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $313=(($284)|0);
   HEAP32[(($313)>>2)]=0;
   label = 34; break;
  case 34: 
   var $314=(($284)|0);
   var $315=HEAP32[(($314)>>2)];
   var $316=(($315)|(0))==0;
   var $317=(($316)&(1));
   var $318=$14;
   $6=$318;
   var $319=$6;
   var $320=(($319)|0);
   var $321=HEAP32[(($320)>>2)];
   var $322=(($321)|(0))!=0;
   if ($322) { label = 35; break; } else { label = 41; break; }
  case 35: 
   var $324=(($319)|0);
   var $325=HEAP32[(($324)>>2)];
   $5=$325;
   var $326=$5;
   var $327=(($326+12)|0);
   var $328=HEAP32[(($327)>>2)];
   var $329=(($326+16)|0);
   var $330=HEAP32[(($329)>>2)];
   var $331=(($328)|(0))==(($330)|(0));
   if ($331) { label = 36; break; } else { label = 38; break; }
  case 36: 
   var $333=$326;
   var $334=HEAP32[(($333)>>2)];
   var $335=(($334+36)|0);
   var $336=HEAP32[(($335)>>2)];
   var $337 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$336]($326) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 16; break; }
  case 37: 
   $4=$337;
   label = 39; break;
  case 38: 
   var $339=(($326+12)|0);
   var $340=HEAP32[(($339)>>2)];
   var $341=HEAP32[(($340)>>2)];
   $3=$341;
   var $342=$3;
   $4=$342;
   label = 39; break;
  case 39: 
   var $343=$4;
   $1=$343;
   $2=-1;
   var $344=$1;
   var $345=$2;
   var $346=(($344)|(0))==(($345)|(0));
   if ($346) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $348=(($319)|0);
   HEAP32[(($348)>>2)]=0;
   label = 41; break;
  case 41: 
   var $349=(($319)|0);
   var $350=HEAP32[(($349)>>2)];
   var $351=(($350)|(0))==0;
   var $352=(($351)&(1));
   var $353=(($317)|(0))==(($352)|(0));
   label = 42; break;
  case 42: 
   if ($353) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $356=$94;
   var $357=HEAP32[(($356)>>2)];
   var $358=$357 | 2;
   HEAP32[(($356)>>2)]=$358;
   label = 44; break;
  case 44: 
   var $360=$agg_result;
   var $361=$__b;
   assert(4 % 1 === 0);HEAP32[(($360)>>2)]=HEAP32[(($361)>>2)];
   $100=1;
   __ZNSt3__16localeD2Ev($__loc);
   $33=$__wb;
   var $362=$33;
   $32=$362;
   var $363=$32;
   $30=$363;
   $31=0;
   var $364=$30;
   var $365=(($364)|0);
   $29=$365;
   var $366=$29;
   var $367=$366;
   $28=$367;
   var $368=$28;
   var $369=(($368)|0);
   var $370=HEAP32[(($369)>>2)];
   $__tmp_i_i_i1=$370;
   var $371=$31;
   var $372=(($364)|0);
   $27=$372;
   var $373=$27;
   var $374=$373;
   $26=$374;
   var $375=$26;
   var $376=(($375)|0);
   HEAP32[(($376)>>2)]=$371;
   var $377=$__tmp_i_i_i1;
   var $378=(($377)|(0))!=0;
   if ($378) { label = 45; break; } else { label = 48; break; }
  case 45: 
   var $380=(($364)|0);
   $25=$380;
   var $381=$25;
   var $382=$381;
   $24=$382;
   var $383=$24;
   var $384=(($383+4)|0);
   var $385=HEAP32[(($384)>>2)];
   var $386=$__tmp_i_i_i1;
   var $387=$386;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$385]($387) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 47; break; }
  case 46: 
   label = 48; break;
  case 47: 
   var $390$0 = ___cxa_find_matching_catch(-1, -1,0); $390$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 48: 
   STACKTOP = __stackBase__;
   return;
  case 49: 
   $70=$__wb;
   var $392=$70;
   $69=$392;
   var $393=$69;
   $67=$393;
   $68=0;
   var $394=$67;
   var $395=(($394)|0);
   $66=$395;
   var $396=$66;
   var $397=$396;
   $65=$397;
   var $398=$65;
   var $399=(($398)|0);
   var $400=HEAP32[(($399)>>2)];
   $__tmp_i_i_i=$400;
   var $401=$68;
   var $402=(($394)|0);
   $64=$402;
   var $403=$64;
   var $404=$403;
   $63=$404;
   var $405=$63;
   var $406=(($405)|0);
   HEAP32[(($406)>>2)]=$401;
   var $407=$__tmp_i_i_i;
   var $408=(($407)|(0))!=0;
   if ($408) { label = 50; break; } else { label = 53; break; }
  case 50: 
   var $410=(($394)|0);
   $62=$410;
   var $411=$62;
   var $412=$411;
   $61=$412;
   var $413=$61;
   var $414=(($413+4)|0);
   var $415=HEAP32[(($414)>>2)];
   var $416=$__tmp_i_i_i;
   var $417=$416;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$415]($417) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 51; break; } else { label = 52; break; }
  case 51: 
   label = 53; break;
  case 52: 
   var $420$0 = ___cxa_find_matching_catch(-1, -1,0); $420$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 53: 
   label = 54; break;
  case 54: 
   var $422=$97;
   var $423=$98;
   var $424$0=$422;
   var $424$1=0;
   var $425$0=$424$0;
   var $425$1=$423;
   ___resumeException($425$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10=__stackBase__;
   var $11;
   var $12;
   var $13=(__stackBase__)+(8);
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $__sz;
   var $__cap;
   var $__n;
   var $__p;
   var $54=(__stackBase__)+(16);
   $51=$this;
   $52=$__first;
   $53=$__last;
   var $55=$51;
   $50=$55;
   var $56=$50;
   $49=$56;
   var $57=$49;
   var $58=(($57)|0);
   $48=$58;
   var $59=$48;
   var $60=$59;
   $47=$60;
   var $61=$47;
   var $62=(($61)|0);
   var $63=(($62)|0);
   var $64=$63;
   var $65=(($64)|0);
   var $66=$65;
   var $67=HEAP8[($66)];
   var $68=(($67)&(255));
   var $69=$68 & 1;
   var $70=(($69)|(0))!=0;
   if ($70) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $43=$56;
   var $72=$43;
   var $73=(($72)|0);
   $42=$73;
   var $74=$42;
   var $75=$74;
   $41=$75;
   var $76=$41;
   var $77=(($76)|0);
   var $78=(($77)|0);
   var $79=$78;
   var $80=(($79+4)|0);
   var $81=HEAP32[(($80)>>2)];
   var $96 = $81;label = 4; break;
  case 3: 
   $46=$56;
   var $83=$46;
   var $84=(($83)|0);
   $45=$84;
   var $85=$45;
   var $86=$85;
   $44=$86;
   var $87=$44;
   var $88=(($87)|0);
   var $89=(($88)|0);
   var $90=$89;
   var $91=(($90)|0);
   var $92=$91;
   var $93=HEAP8[($92)];
   var $94=(($93)&(255));
   var $95=$94 >> 1;
   var $96 = $95;label = 4; break;
  case 4: 
   var $96;
   $__sz=$96;
   $7=$55;
   var $97=$7;
   $6=$97;
   var $98=$6;
   var $99=(($98)|0);
   $5=$99;
   var $100=$5;
   var $101=$100;
   $4=$101;
   var $102=$4;
   var $103=(($102)|0);
   var $104=(($103)|0);
   var $105=$104;
   var $106=(($105)|0);
   var $107=$106;
   var $108=HEAP8[($107)];
   var $109=(($108)&(255));
   var $110=$109 & 1;
   var $111=(($110)|(0))!=0;
   if ($111) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $3=$97;
   var $113=$3;
   var $114=(($113)|0);
   $2=$114;
   var $115=$2;
   var $116=$115;
   $1=$116;
   var $117=$1;
   var $118=(($117)|0);
   var $119=(($118)|0);
   var $120=$119;
   var $121=(($120)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=$122 & -2;
   var $125 = $123;label = 7; break;
  case 6: 
   var $125 = 2;label = 7; break;
  case 7: 
   var $125;
   var $126=((($125)-(1))|0);
   $__cap=$126;
   var $127=$52;
   var $128=$53;
   $11=$127;
   $12=$128;
   var $129=$11;
   var $130=$12;
   var $tmp_i=$10;
   var $tmp1_i=$13;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $8=$129;
   $9=$130;
   var $131=$9;
   var $132=$8;
   var $133=$131;
   var $134=$132;
   var $135=((($133)-($134))|0);
   var $136=((((($135)|(0)))/(4))&-1);
   $__n=$136;
   var $137=$__n;
   var $138=(($137)|(0))!=0;
   if ($138) { label = 8; break; } else { label = 21; break; }
  case 8: 
   var $140=$__cap;
   var $141=$__sz;
   var $142=((($140)-($141))|0);
   var $143=$__n;
   var $144=(($142)>>>(0)) < (($143)>>>(0));
   if ($144) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $146=$__cap;
   var $147=$__sz;
   var $148=$__n;
   var $149=((($147)+($148))|0);
   var $150=$__cap;
   var $151=((($149)-($150))|0);
   var $152=$__sz;
   var $153=$__sz;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($55, $146, $151, $152, $153, 0, 0);
   label = 10; break;
  case 10: 
   $23=$55;
   var $155=$23;
   $22=$155;
   var $156=$22;
   var $157=(($156)|0);
   $21=$157;
   var $158=$21;
   var $159=$158;
   $20=$159;
   var $160=$20;
   var $161=(($160)|0);
   var $162=(($161)|0);
   var $163=$162;
   var $164=(($163)|0);
   var $165=$164;
   var $166=HEAP8[($165)];
   var $167=(($166)&(255));
   var $168=$167 & 1;
   var $169=(($168)|(0))!=0;
   if ($169) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $16=$155;
   var $171=$16;
   var $172=(($171)|0);
   $15=$172;
   var $173=$15;
   var $174=$173;
   $14=$174;
   var $175=$14;
   var $176=(($175)|0);
   var $177=(($176)|0);
   var $178=$177;
   var $179=(($178+8)|0);
   var $180=HEAP32[(($179)>>2)];
   var $192 = $180;label = 13; break;
  case 12: 
   $19=$155;
   var $182=$19;
   var $183=(($182)|0);
   $18=$183;
   var $184=$18;
   var $185=$184;
   $17=$185;
   var $186=$17;
   var $187=(($186)|0);
   var $188=(($187)|0);
   var $189=$188;
   var $190=(($189+4)|0);
   var $191=(($190)|0);
   var $192 = $191;label = 13; break;
  case 13: 
   var $192;
   var $193=$__sz;
   var $194=(($192+($193<<2))|0);
   $__p=$194;
   label = 14; break;
  case 14: 
   var $196=$52;
   var $197=$53;
   var $198=(($196)|(0))!=(($197)|(0));
   if ($198) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $200=$__p;
   var $201=$52;
   $24=$200;
   $25=$201;
   var $202=$25;
   var $203=HEAP32[(($202)>>2)];
   var $204=$24;
   HEAP32[(($204)>>2)]=$203;
   label = 16; break;
  case 16: 
   var $206=$__p;
   var $207=(($206+4)|0);
   $__p=$207;
   var $208=$52;
   var $209=(($208+4)|0);
   $52=$209;
   label = 14; break;
  case 17: 
   var $211=$__p;
   HEAP32[(($54)>>2)]=0;
   $26=$211;
   $27=$54;
   var $212=$27;
   var $213=HEAP32[(($212)>>2)];
   var $214=$26;
   HEAP32[(($214)>>2)]=$213;
   var $215=$__sz;
   var $216=$__n;
   var $217=((($215)+($216))|0);
   $39=$55;
   $40=$217;
   var $218=$39;
   $38=$218;
   var $219=$38;
   var $220=(($219)|0);
   $37=$220;
   var $221=$37;
   var $222=$221;
   $36=$222;
   var $223=$36;
   var $224=(($223)|0);
   var $225=(($224)|0);
   var $226=$225;
   var $227=(($226)|0);
   var $228=$227;
   var $229=HEAP8[($228)];
   var $230=(($229)&(255));
   var $231=$230 & 1;
   var $232=(($231)|(0))!=0;
   if ($232) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $234=$40;
   $30=$218;
   $31=$234;
   var $235=$30;
   var $236=$31;
   var $237=(($235)|0);
   $29=$237;
   var $238=$29;
   var $239=$238;
   $28=$239;
   var $240=$28;
   var $241=(($240)|0);
   var $242=(($241)|0);
   var $243=$242;
   var $244=(($243+4)|0);
   HEAP32[(($244)>>2)]=$236;
   label = 20; break;
  case 19: 
   var $246=$40;
   $34=$218;
   $35=$246;
   var $247=$34;
   var $248=$35;
   var $249=$248 << 1;
   var $250=(($249) & 255);
   var $251=(($247)|0);
   $33=$251;
   var $252=$33;
   var $253=$252;
   $32=$253;
   var $254=$32;
   var $255=(($254)|0);
   var $256=(($255)|0);
   var $257=$256;
   var $258=(($257)|0);
   var $259=$258;
   HEAP8[($259)]=$250;
   label = 20; break;
  case 20: 
   label = 21; break;
  case 21: 
   STACKTOP = __stackBase__;
   return $55;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 528)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16=__stackBase__;
   var $17;
   var $18;
   var $19=(__stackBase__)+(8);
   var $20;
   var $21;
   var $22;
   var $__a_i_i_i53;
   var $__i_i_i_i54;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46=(__stackBase__)+(16);
   var $47=(__stackBase__)+(24);
   var $48;
   var $49;
   var $50=(__stackBase__)+(32);
   var $51;
   var $52;
   var $53=(__stackBase__)+(40);
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69=(__stackBase__)+(48);
   var $70;
   var $71;
   var $72=(__stackBase__)+(56);
   var $73;
   var $74;
   var $75;
   var $__a_i_i_i44;
   var $__i_i_i_i45;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99=(__stackBase__)+(64);
   var $100=(__stackBase__)+(72);
   var $101;
   var $102;
   var $103=(__stackBase__)+(80);
   var $104;
   var $105;
   var $106=(__stackBase__)+(88);
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $122;
   var $123;
   var $124=(__stackBase__)+(96);
   var $125;
   var $126;
   var $127=(__stackBase__)+(104);
   var $128;
   var $129;
   var $130;
   var $__a_i_i_i35;
   var $__i_i_i_i36;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154=(__stackBase__)+(112);
   var $155=(__stackBase__)+(120);
   var $156;
   var $157;
   var $158=(__stackBase__)+(128);
   var $159;
   var $160;
   var $161=(__stackBase__)+(136);
   var $162;
   var $163;
   var $164;
   var $165;
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177=(__stackBase__)+(144);
   var $178;
   var $179;
   var $180=(__stackBase__)+(152);
   var $181;
   var $182;
   var $183;
   var $__a_i_i_i26;
   var $__i_i_i_i27;
   var $184;
   var $185;
   var $186;
   var $187;
   var $188;
   var $189;
   var $190;
   var $191;
   var $192;
   var $193;
   var $194;
   var $195;
   var $196;
   var $197;
   var $198;
   var $199;
   var $200;
   var $201;
   var $202;
   var $203;
   var $204;
   var $205;
   var $206;
   var $207=(__stackBase__)+(160);
   var $208=(__stackBase__)+(168);
   var $209;
   var $210;
   var $211=(__stackBase__)+(176);
   var $212;
   var $213;
   var $214=(__stackBase__)+(184);
   var $215;
   var $216;
   var $217;
   var $218;
   var $219;
   var $220;
   var $221;
   var $222;
   var $223;
   var $224;
   var $225;
   var $226;
   var $227;
   var $228;
   var $229;
   var $230;
   var $231;
   var $232;
   var $233=(__stackBase__)+(192);
   var $234;
   var $235;
   var $236=(__stackBase__)+(200);
   var $237;
   var $238;
   var $239;
   var $__a_i_i_i17;
   var $__i_i_i_i18;
   var $240;
   var $241;
   var $242;
   var $243;
   var $244;
   var $245;
   var $246;
   var $247;
   var $248;
   var $249;
   var $250;
   var $251;
   var $252;
   var $253;
   var $254;
   var $255;
   var $256;
   var $257;
   var $258;
   var $259;
   var $260;
   var $261;
   var $262;
   var $263=(__stackBase__)+(208);
   var $264=(__stackBase__)+(216);
   var $265;
   var $266;
   var $267=(__stackBase__)+(224);
   var $268;
   var $269;
   var $270=(__stackBase__)+(232);
   var $271;
   var $272;
   var $273;
   var $274;
   var $275;
   var $276;
   var $277;
   var $278;
   var $279;
   var $280;
   var $281;
   var $282;
   var $283;
   var $284;
   var $285;
   var $286=(__stackBase__)+(240);
   var $287;
   var $288;
   var $289=(__stackBase__)+(248);
   var $290;
   var $291;
   var $292;
   var $__a_i_i_i11;
   var $__i_i_i_i12;
   var $293;
   var $294;
   var $295;
   var $296;
   var $297;
   var $298;
   var $299;
   var $300;
   var $301;
   var $302;
   var $303;
   var $304;
   var $305;
   var $306;
   var $307;
   var $308;
   var $309;
   var $310;
   var $311;
   var $312;
   var $313;
   var $314;
   var $315;
   var $316=(__stackBase__)+(256);
   var $317=(__stackBase__)+(264);
   var $318;
   var $319;
   var $320=(__stackBase__)+(272);
   var $321;
   var $322;
   var $323=(__stackBase__)+(280);
   var $324;
   var $325;
   var $326;
   var $327;
   var $328;
   var $329;
   var $330;
   var $331;
   var $332;
   var $333;
   var $334;
   var $335;
   var $336;
   var $337;
   var $338;
   var $339;
   var $340;
   var $341=(__stackBase__)+(288);
   var $342;
   var $343;
   var $344=(__stackBase__)+(296);
   var $345;
   var $346;
   var $347;
   var $__a_i_i_i2;
   var $__i_i_i_i3;
   var $348;
   var $349;
   var $350;
   var $351;
   var $352;
   var $353;
   var $354;
   var $355;
   var $356;
   var $357;
   var $358;
   var $359;
   var $360;
   var $361;
   var $362;
   var $363;
   var $364;
   var $365;
   var $366;
   var $367;
   var $368;
   var $369;
   var $370;
   var $371=(__stackBase__)+(304);
   var $372=(__stackBase__)+(312);
   var $373;
   var $374;
   var $375=(__stackBase__)+(320);
   var $376;
   var $377;
   var $378=(__stackBase__)+(328);
   var $379;
   var $380;
   var $381;
   var $382;
   var $383;
   var $384;
   var $385;
   var $386;
   var $387;
   var $388;
   var $389;
   var $390;
   var $391;
   var $392;
   var $393;
   var $394=(__stackBase__)+(336);
   var $395;
   var $396;
   var $397=(__stackBase__)+(344);
   var $398;
   var $399;
   var $400;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $401;
   var $402;
   var $403;
   var $404;
   var $405;
   var $406;
   var $407;
   var $408;
   var $409;
   var $410;
   var $411;
   var $412;
   var $413;
   var $414;
   var $415;
   var $416;
   var $417;
   var $418;
   var $419;
   var $420;
   var $421;
   var $422;
   var $423;
   var $424=(__stackBase__)+(352);
   var $425=(__stackBase__)+(360);
   var $426;
   var $427;
   var $428=(__stackBase__)+(368);
   var $429;
   var $430;
   var $431=(__stackBase__)+(376);
   var $432;
   var $433;
   var $434;
   var $435;
   var $436;
   var $437;
   var $438;
   var $439;
   var $440;
   var $441;
   var $442;
   var $443;
   var $444;
   var $__mp;
   var $445=(__stackBase__)+(384);
   var $446=(__stackBase__)+(392);
   var $447=(__stackBase__)+(408);
   var $448=(__stackBase__)+(424);
   var $449=(__stackBase__)+(440);
   var $__mp1;
   var $450=(__stackBase__)+(456);
   var $451=(__stackBase__)+(464);
   var $452=(__stackBase__)+(480);
   var $453=(__stackBase__)+(496);
   var $454=(__stackBase__)+(512);
   var $455=(($__intl)&(1));
   $435=$455;
   $436=$__loc;
   $437=$__pat;
   $438=$__dp;
   $439=$__ts;
   $440=$__grp;
   $441=$__sym;
   $442=$__psn;
   $443=$__nsn;
   $444=$__fd;
   var $456=$435;
   var $457=(($456) & 1);
   if ($457) { label = 2; break; } else { label = 35; break; }
  case 2: 
   var $459=$436;
   $434=$459;
   var $460=$434;
   var $461=__ZNKSt3__16locale9use_facetERNS0_2idE($460, 20312);
   var $462=$461;
   $__mp=$462;
   var $463=$437;
   var $464=$__mp;
   $433=$464;
   var $465=$433;
   var $466=$465;
   var $467=HEAP32[(($466)>>2)];
   var $468=(($467+44)|0);
   var $469=HEAP32[(($468)>>2)];
   FUNCTION_TABLE[$469]($445, $465);
   var $470=$463;
   var $471=$445;
   assert(4 % 1 === 0);HEAP8[($470)]=HEAP8[($471)];HEAP8[((($470)+(1))|0)]=HEAP8[((($471)+(1))|0)];HEAP8[((($470)+(2))|0)]=HEAP8[((($471)+(2))|0)];HEAP8[((($470)+(3))|0)]=HEAP8[((($471)+(3))|0)];
   var $472=$443;
   var $473=$__mp;
   $432=$473;
   var $474=$432;
   var $475=$474;
   var $476=HEAP32[(($475)>>2)];
   var $477=(($476+32)|0);
   var $478=HEAP32[(($477)>>2)];
   FUNCTION_TABLE[$478]($446, $474);
   $429=$472;
   $430=$446;
   var $479=$429;
   var $480=$430;
   var $tmp_i=$428;
   var $tmp1_i=$431;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $426=$479;
   $427=$480;
   var $481=$426;
   $423=$481;
   var $482=$423;
   $422=$482;
   var $483=$422;
   $403=$482;
   var $484=$403;
   var $485=(($484)|0);
   $402=$485;
   var $486=$402;
   var $487=$486;
   $401=$487;
   var $488=$401;
   var $489=(($488)|0);
   var $490=(($489)|0);
   var $491=$490;
   var $492=(($491)|0);
   var $493=$492;
   var $494=HEAP8[($493)];
   var $495=(($494)&(255));
   var $496=$495 & 1;
   var $497=(($496)|(0))!=0;
   if ($497) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $406=$482;
   var $499=$406;
   var $500=(($499)|0);
   $405=$500;
   var $501=$405;
   var $502=$501;
   $404=$502;
   var $503=$404;
   var $504=(($503)|0);
   var $505=(($504)|0);
   var $506=$505;
   var $507=(($506+8)|0);
   var $508=HEAP32[(($507)>>2)];
   HEAP32[(($424)>>2)]=0;
   $407=$508;
   $408=$424;
   var $509=$408;
   var $510=HEAP32[(($509)>>2)];
   var $511=$407;
   HEAP32[(($511)>>2)]=$510;
   $411=$482;
   $412=0;
   var $512=$411;
   var $513=$412;
   var $514=(($512)|0);
   $410=$514;
   var $515=$410;
   var $516=$515;
   $409=$516;
   var $517=$409;
   var $518=(($517)|0);
   var $519=(($518)|0);
   var $520=$519;
   var $521=(($520+4)|0);
   HEAP32[(($521)>>2)]=$513;
   label = 5; break;
  case 4: 
   $415=$482;
   var $523=$415;
   var $524=(($523)|0);
   $414=$524;
   var $525=$414;
   var $526=$525;
   $413=$526;
   var $527=$413;
   var $528=(($527)|0);
   var $529=(($528)|0);
   var $530=$529;
   var $531=(($530+4)|0);
   var $532=(($531)|0);
   HEAP32[(($425)>>2)]=0;
   $416=$532;
   $417=$425;
   var $533=$417;
   var $534=HEAP32[(($533)>>2)];
   var $535=$416;
   HEAP32[(($535)>>2)]=$534;
   $420=$482;
   $421=0;
   var $536=$420;
   var $537=$421;
   var $538=$537 << 1;
   var $539=(($538) & 255);
   var $540=(($536)|0);
   $419=$540;
   var $541=$419;
   var $542=$541;
   $418=$542;
   var $543=$418;
   var $544=(($543)|0);
   var $545=(($544)|0);
   var $546=$545;
   var $547=(($546)|0);
   var $548=$547;
   HEAP8[($548)]=$539;
   label = 5; break;
  case 5: 
   $380=$481;
   var $549=$380;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($549, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $551$0 = ___cxa_find_matching_catch(-1, -1,0); $551$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 7: 
   var $552=(($481)|0);
   $382=$552;
   var $553=$382;
   var $554=$553;
   $381=$554;
   var $555=$381;
   var $556=(($555)|0);
   var $557=$427;
   var $558=(($557)|0);
   $384=$558;
   var $559=$384;
   var $560=$559;
   $383=$560;
   var $561=$383;
   var $562=(($561)|0);
   var $563=$556;
   var $564=$562;
   assert(12 % 1 === 0);HEAP32[(($563)>>2)]=HEAP32[(($564)>>2)];HEAP32[((($563)+(4))>>2)]=HEAP32[((($564)+(4))>>2)];HEAP32[((($563)+(8))>>2)]=HEAP32[((($564)+(8))>>2)];
   var $565=$427;
   $395=$481;
   $396=$565;
   var $566=$395;
   var $567=$396;
   var $tmp_i_i_i=$394;
   var $tmp1_i_i_i=$397;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
   $392=$566;
   $393=$567;
   var $568=$392;
   $391=$568;
   var $569=$391;
   var $570=(($569)|0);
   $390=$570;
   var $571=$390;
   var $572=$571;
   $389=$572;
   var $573=$389;
   var $574=$573;
   var $575=$393;
   $387=$575;
   var $576=$387;
   var $577=(($576)|0);
   $386=$577;
   var $578=$386;
   var $579=$578;
   $385=$579;
   var $580=$385;
   var $581=$580;
   $388=$581;
   var $582=$388;
   var $583=$427;
   $400=$583;
   var $584=$400;
   var $585=(($584)|0);
   $399=$585;
   var $586=$399;
   var $587=$586;
   $398=$587;
   var $588=$398;
   var $589=(($588)|0);
   var $590=(($589)|0);
   var $591=$590;
   var $592=(($591)|0);
   $__a_i_i_i=$592;
   $__i_i_i_i=0;
   label = 8; break;
  case 8: 
   var $594=$__i_i_i_i;
   var $595=(($594)>>>(0)) < 3;
   if ($595) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $597=$__i_i_i_i;
   var $598=$__a_i_i_i;
   var $599=(($598+($597<<2))|0);
   HEAP32[(($599)>>2)]=0;
   var $600=$__i_i_i_i;
   var $601=((($600)+(1))|0);
   $__i_i_i_i=$601;
   label = 8; break;
  case 10: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($446);
   var $602=$442;
   var $603=$__mp;
   $379=$603;
   var $604=$379;
   var $605=$604;
   var $606=HEAP32[(($605)>>2)];
   var $607=(($606+28)|0);
   var $608=HEAP32[(($607)>>2)];
   FUNCTION_TABLE[$608]($447, $604);
   $376=$602;
   $377=$447;
   var $609=$376;
   var $610=$377;
   var $tmp_i4=$375;
   var $tmp1_i5=$378;
   assert(1 % 1 === 0);HEAP8[($tmp_i4)]=HEAP8[($tmp1_i5)];
   $373=$609;
   $374=$610;
   var $611=$373;
   $370=$611;
   var $612=$370;
   $369=$612;
   var $613=$369;
   $350=$612;
   var $614=$350;
   var $615=(($614)|0);
   $349=$615;
   var $616=$349;
   var $617=$616;
   $348=$617;
   var $618=$348;
   var $619=(($618)|0);
   var $620=(($619)|0);
   var $621=$620;
   var $622=(($621)|0);
   var $623=$622;
   var $624=HEAP8[($623)];
   var $625=(($624)&(255));
   var $626=$625 & 1;
   var $627=(($626)|(0))!=0;
   if ($627) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $353=$612;
   var $629=$353;
   var $630=(($629)|0);
   $352=$630;
   var $631=$352;
   var $632=$631;
   $351=$632;
   var $633=$351;
   var $634=(($633)|0);
   var $635=(($634)|0);
   var $636=$635;
   var $637=(($636+8)|0);
   var $638=HEAP32[(($637)>>2)];
   HEAP32[(($371)>>2)]=0;
   $354=$638;
   $355=$371;
   var $639=$355;
   var $640=HEAP32[(($639)>>2)];
   var $641=$354;
   HEAP32[(($641)>>2)]=$640;
   $358=$612;
   $359=0;
   var $642=$358;
   var $643=$359;
   var $644=(($642)|0);
   $357=$644;
   var $645=$357;
   var $646=$645;
   $356=$646;
   var $647=$356;
   var $648=(($647)|0);
   var $649=(($648)|0);
   var $650=$649;
   var $651=(($650+4)|0);
   HEAP32[(($651)>>2)]=$643;
   label = 13; break;
  case 12: 
   $362=$612;
   var $653=$362;
   var $654=(($653)|0);
   $361=$654;
   var $655=$361;
   var $656=$655;
   $360=$656;
   var $657=$360;
   var $658=(($657)|0);
   var $659=(($658)|0);
   var $660=$659;
   var $661=(($660+4)|0);
   var $662=(($661)|0);
   HEAP32[(($372)>>2)]=0;
   $363=$662;
   $364=$372;
   var $663=$364;
   var $664=HEAP32[(($663)>>2)];
   var $665=$363;
   HEAP32[(($665)>>2)]=$664;
   $367=$612;
   $368=0;
   var $666=$367;
   var $667=$368;
   var $668=$667 << 1;
   var $669=(($668) & 255);
   var $670=(($666)|0);
   $366=$670;
   var $671=$366;
   var $672=$671;
   $365=$672;
   var $673=$365;
   var $674=(($673)|0);
   var $675=(($674)|0);
   var $676=$675;
   var $677=(($676)|0);
   var $678=$677;
   HEAP8[($678)]=$669;
   label = 13; break;
  case 13: 
   $327=$611;
   var $679=$327;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($679, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $681$0 = ___cxa_find_matching_catch(-1, -1,0); $681$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 15: 
   var $682=(($611)|0);
   $329=$682;
   var $683=$329;
   var $684=$683;
   $328=$684;
   var $685=$328;
   var $686=(($685)|0);
   var $687=$374;
   var $688=(($687)|0);
   $331=$688;
   var $689=$331;
   var $690=$689;
   $330=$690;
   var $691=$330;
   var $692=(($691)|0);
   var $693=$686;
   var $694=$692;
   assert(12 % 1 === 0);HEAP32[(($693)>>2)]=HEAP32[(($694)>>2)];HEAP32[((($693)+(4))>>2)]=HEAP32[((($694)+(4))>>2)];HEAP32[((($693)+(8))>>2)]=HEAP32[((($694)+(8))>>2)];
   var $695=$374;
   $342=$611;
   $343=$695;
   var $696=$342;
   var $697=$343;
   var $tmp_i_i_i7=$341;
   var $tmp1_i_i_i8=$344;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i7)]=HEAP8[($tmp1_i_i_i8)];
   $339=$696;
   $340=$697;
   var $698=$339;
   $338=$698;
   var $699=$338;
   var $700=(($699)|0);
   $337=$700;
   var $701=$337;
   var $702=$701;
   $336=$702;
   var $703=$336;
   var $704=$703;
   var $705=$340;
   $334=$705;
   var $706=$334;
   var $707=(($706)|0);
   $333=$707;
   var $708=$333;
   var $709=$708;
   $332=$709;
   var $710=$332;
   var $711=$710;
   $335=$711;
   var $712=$335;
   var $713=$374;
   $347=$713;
   var $714=$347;
   var $715=(($714)|0);
   $346=$715;
   var $716=$346;
   var $717=$716;
   $345=$717;
   var $718=$345;
   var $719=(($718)|0);
   var $720=(($719)|0);
   var $721=$720;
   var $722=(($721)|0);
   $__a_i_i_i2=$722;
   $__i_i_i_i3=0;
   label = 16; break;
  case 16: 
   var $724=$__i_i_i_i3;
   var $725=(($724)>>>(0)) < 3;
   if ($725) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $727=$__i_i_i_i3;
   var $728=$__a_i_i_i2;
   var $729=(($728+($727<<2))|0);
   HEAP32[(($729)>>2)]=0;
   var $730=$__i_i_i_i3;
   var $731=((($730)+(1))|0);
   $__i_i_i_i3=$731;
   label = 16; break;
  case 18: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($447);
   var $732=$__mp;
   $326=$732;
   var $733=$326;
   var $734=$733;
   var $735=HEAP32[(($734)>>2)];
   var $736=(($735+12)|0);
   var $737=HEAP32[(($736)>>2)];
   var $738=FUNCTION_TABLE[$737]($733);
   var $739=$438;
   HEAP32[(($739)>>2)]=$738;
   var $740=$__mp;
   $325=$740;
   var $741=$325;
   var $742=$741;
   var $743=HEAP32[(($742)>>2)];
   var $744=(($743+16)|0);
   var $745=HEAP32[(($744)>>2)];
   var $746=FUNCTION_TABLE[$745]($741);
   var $747=$439;
   HEAP32[(($747)>>2)]=$746;
   var $748=$440;
   var $749=$__mp;
   $324=$749;
   var $750=$324;
   var $751=$750;
   var $752=HEAP32[(($751)>>2)];
   var $753=(($752+20)|0);
   var $754=HEAP32[(($753)>>2)];
   FUNCTION_TABLE[$754]($448, $750);
   $321=$748;
   $322=$448;
   var $755=$321;
   var $756=$322;
   var $tmp_i13=$320;
   var $tmp1_i14=$323;
   assert(1 % 1 === 0);HEAP8[($tmp_i13)]=HEAP8[($tmp1_i14)];
   $318=$755;
   $319=$756;
   var $757=$318;
   $315=$757;
   var $758=$315;
   $314=$758;
   var $759=$314;
   $295=$758;
   var $760=$295;
   var $761=(($760)|0);
   $294=$761;
   var $762=$294;
   var $763=$762;
   $293=$763;
   var $764=$293;
   var $765=(($764)|0);
   var $766=(($765)|0);
   var $767=$766;
   var $768=(($767)|0);
   var $769=$768;
   var $770=HEAP8[($769)];
   var $771=(($770)&(255));
   var $772=$771 & 1;
   var $773=(($772)|(0))!=0;
   if ($773) { label = 19; break; } else { label = 20; break; }
  case 19: 
   $298=$758;
   var $775=$298;
   var $776=(($775)|0);
   $297=$776;
   var $777=$297;
   var $778=$777;
   $296=$778;
   var $779=$296;
   var $780=(($779)|0);
   var $781=(($780)|0);
   var $782=$781;
   var $783=(($782+8)|0);
   var $784=HEAP32[(($783)>>2)];
   HEAP8[($316)]=0;
   $299=$784;
   $300=$316;
   var $785=$300;
   var $786=HEAP8[($785)];
   var $787=$299;
   HEAP8[($787)]=$786;
   $303=$758;
   $304=0;
   var $788=$303;
   var $789=$304;
   var $790=(($788)|0);
   $302=$790;
   var $791=$302;
   var $792=$791;
   $301=$792;
   var $793=$301;
   var $794=(($793)|0);
   var $795=(($794)|0);
   var $796=$795;
   var $797=(($796+4)|0);
   HEAP32[(($797)>>2)]=$789;
   label = 21; break;
  case 20: 
   $307=$758;
   var $799=$307;
   var $800=(($799)|0);
   $306=$800;
   var $801=$306;
   var $802=$801;
   $305=$802;
   var $803=$305;
   var $804=(($803)|0);
   var $805=(($804)|0);
   var $806=$805;
   var $807=(($806+1)|0);
   var $808=(($807)|0);
   HEAP8[($317)]=0;
   $308=$808;
   $309=$317;
   var $809=$309;
   var $810=HEAP8[($809)];
   var $811=$308;
   HEAP8[($811)]=$810;
   $312=$758;
   $313=0;
   var $812=$312;
   var $813=$313;
   var $814=$813 << 1;
   var $815=(($814) & 255);
   var $816=(($812)|0);
   $311=$816;
   var $817=$311;
   var $818=$817;
   $310=$818;
   var $819=$310;
   var $820=(($819)|0);
   var $821=(($820)|0);
   var $822=$821;
   var $823=(($822)|0);
   var $824=$823;
   HEAP8[($824)]=$815;
   label = 21; break;
  case 21: 
   $272=$757;
   var $825=$272;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($825, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $827$0 = ___cxa_find_matching_catch(-1, -1,0); $827$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 23: 
   var $828=(($757)|0);
   $274=$828;
   var $829=$274;
   var $830=$829;
   $273=$830;
   var $831=$273;
   var $832=(($831)|0);
   var $833=$319;
   var $834=(($833)|0);
   $276=$834;
   var $835=$276;
   var $836=$835;
   $275=$836;
   var $837=$275;
   var $838=(($837)|0);
   var $839=$832;
   var $840=$838;
   assert(12 % 1 === 0);HEAP32[(($839)>>2)]=HEAP32[(($840)>>2)];HEAP32[((($839)+(4))>>2)]=HEAP32[((($840)+(4))>>2)];HEAP32[((($839)+(8))>>2)]=HEAP32[((($840)+(8))>>2)];
   var $841=$319;
   $287=$757;
   $288=$841;
   var $842=$287;
   var $843=$288;
   var $tmp_i_i_i15=$286;
   var $tmp1_i_i_i16=$289;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i15)]=HEAP8[($tmp1_i_i_i16)];
   $284=$842;
   $285=$843;
   var $844=$284;
   $283=$844;
   var $845=$283;
   var $846=(($845)|0);
   $282=$846;
   var $847=$282;
   var $848=$847;
   $281=$848;
   var $849=$281;
   var $850=$849;
   var $851=$285;
   $279=$851;
   var $852=$279;
   var $853=(($852)|0);
   $278=$853;
   var $854=$278;
   var $855=$854;
   $277=$855;
   var $856=$277;
   var $857=$856;
   $280=$857;
   var $858=$280;
   var $859=$319;
   $292=$859;
   var $860=$292;
   var $861=(($860)|0);
   $291=$861;
   var $862=$291;
   var $863=$862;
   $290=$863;
   var $864=$290;
   var $865=(($864)|0);
   var $866=(($865)|0);
   var $867=$866;
   var $868=(($867)|0);
   $__a_i_i_i11=$868;
   $__i_i_i_i12=0;
   label = 24; break;
  case 24: 
   var $870=$__i_i_i_i12;
   var $871=(($870)>>>(0)) < 3;
   if ($871) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $873=$__i_i_i_i12;
   var $874=$__a_i_i_i11;
   var $875=(($874+($873<<2))|0);
   HEAP32[(($875)>>2)]=0;
   var $876=$__i_i_i_i12;
   var $877=((($876)+(1))|0);
   $__i_i_i_i12=$877;
   label = 24; break;
  case 26: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($448);
   var $878=$441;
   var $879=$__mp;
   $271=$879;
   var $880=$271;
   var $881=$880;
   var $882=HEAP32[(($881)>>2)];
   var $883=(($882+24)|0);
   var $884=HEAP32[(($883)>>2)];
   FUNCTION_TABLE[$884]($449, $880);
   $268=$878;
   $269=$449;
   var $885=$268;
   var $886=$269;
   var $tmp_i19=$267;
   var $tmp1_i20=$270;
   assert(1 % 1 === 0);HEAP8[($tmp_i19)]=HEAP8[($tmp1_i20)];
   $265=$885;
   $266=$886;
   var $887=$265;
   $262=$887;
   var $888=$262;
   $261=$888;
   var $889=$261;
   $242=$888;
   var $890=$242;
   var $891=(($890)|0);
   $241=$891;
   var $892=$241;
   var $893=$892;
   $240=$893;
   var $894=$240;
   var $895=(($894)|0);
   var $896=(($895)|0);
   var $897=$896;
   var $898=(($897)|0);
   var $899=$898;
   var $900=HEAP8[($899)];
   var $901=(($900)&(255));
   var $902=$901 & 1;
   var $903=(($902)|(0))!=0;
   if ($903) { label = 27; break; } else { label = 28; break; }
  case 27: 
   $245=$888;
   var $905=$245;
   var $906=(($905)|0);
   $244=$906;
   var $907=$244;
   var $908=$907;
   $243=$908;
   var $909=$243;
   var $910=(($909)|0);
   var $911=(($910)|0);
   var $912=$911;
   var $913=(($912+8)|0);
   var $914=HEAP32[(($913)>>2)];
   HEAP32[(($263)>>2)]=0;
   $246=$914;
   $247=$263;
   var $915=$247;
   var $916=HEAP32[(($915)>>2)];
   var $917=$246;
   HEAP32[(($917)>>2)]=$916;
   $250=$888;
   $251=0;
   var $918=$250;
   var $919=$251;
   var $920=(($918)|0);
   $249=$920;
   var $921=$249;
   var $922=$921;
   $248=$922;
   var $923=$248;
   var $924=(($923)|0);
   var $925=(($924)|0);
   var $926=$925;
   var $927=(($926+4)|0);
   HEAP32[(($927)>>2)]=$919;
   label = 29; break;
  case 28: 
   $254=$888;
   var $929=$254;
   var $930=(($929)|0);
   $253=$930;
   var $931=$253;
   var $932=$931;
   $252=$932;
   var $933=$252;
   var $934=(($933)|0);
   var $935=(($934)|0);
   var $936=$935;
   var $937=(($936+4)|0);
   var $938=(($937)|0);
   HEAP32[(($264)>>2)]=0;
   $255=$938;
   $256=$264;
   var $939=$256;
   var $940=HEAP32[(($939)>>2)];
   var $941=$255;
   HEAP32[(($941)>>2)]=$940;
   $259=$888;
   $260=0;
   var $942=$259;
   var $943=$260;
   var $944=$943 << 1;
   var $945=(($944) & 255);
   var $946=(($942)|0);
   $258=$946;
   var $947=$258;
   var $948=$947;
   $257=$948;
   var $949=$257;
   var $950=(($949)|0);
   var $951=(($950)|0);
   var $952=$951;
   var $953=(($952)|0);
   var $954=$953;
   HEAP8[($954)]=$945;
   label = 29; break;
  case 29: 
   $219=$887;
   var $955=$219;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($955, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 30; break; }
  case 30: 
   var $957$0 = ___cxa_find_matching_catch(-1, -1,0); $957$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 31: 
   var $958=(($887)|0);
   $221=$958;
   var $959=$221;
   var $960=$959;
   $220=$960;
   var $961=$220;
   var $962=(($961)|0);
   var $963=$266;
   var $964=(($963)|0);
   $223=$964;
   var $965=$223;
   var $966=$965;
   $222=$966;
   var $967=$222;
   var $968=(($967)|0);
   var $969=$962;
   var $970=$968;
   assert(12 % 1 === 0);HEAP32[(($969)>>2)]=HEAP32[(($970)>>2)];HEAP32[((($969)+(4))>>2)]=HEAP32[((($970)+(4))>>2)];HEAP32[((($969)+(8))>>2)]=HEAP32[((($970)+(8))>>2)];
   var $971=$266;
   $234=$887;
   $235=$971;
   var $972=$234;
   var $973=$235;
   var $tmp_i_i_i22=$233;
   var $tmp1_i_i_i23=$236;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i22)]=HEAP8[($tmp1_i_i_i23)];
   $231=$972;
   $232=$973;
   var $974=$231;
   $230=$974;
   var $975=$230;
   var $976=(($975)|0);
   $229=$976;
   var $977=$229;
   var $978=$977;
   $228=$978;
   var $979=$228;
   var $980=$979;
   var $981=$232;
   $226=$981;
   var $982=$226;
   var $983=(($982)|0);
   $225=$983;
   var $984=$225;
   var $985=$984;
   $224=$985;
   var $986=$224;
   var $987=$986;
   $227=$987;
   var $988=$227;
   var $989=$266;
   $239=$989;
   var $990=$239;
   var $991=(($990)|0);
   $238=$991;
   var $992=$238;
   var $993=$992;
   $237=$993;
   var $994=$237;
   var $995=(($994)|0);
   var $996=(($995)|0);
   var $997=$996;
   var $998=(($997)|0);
   $__a_i_i_i17=$998;
   $__i_i_i_i18=0;
   label = 32; break;
  case 32: 
   var $1000=$__i_i_i_i18;
   var $1001=(($1000)>>>(0)) < 3;
   if ($1001) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $1003=$__i_i_i_i18;
   var $1004=$__a_i_i_i17;
   var $1005=(($1004+($1003<<2))|0);
   HEAP32[(($1005)>>2)]=0;
   var $1006=$__i_i_i_i18;
   var $1007=((($1006)+(1))|0);
   $__i_i_i_i18=$1007;
   label = 32; break;
  case 34: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($449);
   var $1008=$__mp;
   $218=$1008;
   var $1009=$218;
   var $1010=$1009;
   var $1011=HEAP32[(($1010)>>2)];
   var $1012=(($1011+36)|0);
   var $1013=HEAP32[(($1012)>>2)];
   var $1014=FUNCTION_TABLE[$1013]($1009);
   var $1015=$444;
   HEAP32[(($1015)>>2)]=$1014;
   label = 68; break;
  case 35: 
   var $1017=$436;
   $217=$1017;
   var $1018=$217;
   var $1019=__ZNKSt3__16locale9use_facetERNS0_2idE($1018, 20320);
   var $1020=$1019;
   $__mp1=$1020;
   var $1021=$437;
   var $1022=$__mp1;
   $216=$1022;
   var $1023=$216;
   var $1024=$1023;
   var $1025=HEAP32[(($1024)>>2)];
   var $1026=(($1025+44)|0);
   var $1027=HEAP32[(($1026)>>2)];
   FUNCTION_TABLE[$1027]($450, $1023);
   var $1028=$1021;
   var $1029=$450;
   assert(4 % 1 === 0);HEAP8[($1028)]=HEAP8[($1029)];HEAP8[((($1028)+(1))|0)]=HEAP8[((($1029)+(1))|0)];HEAP8[((($1028)+(2))|0)]=HEAP8[((($1029)+(2))|0)];HEAP8[((($1028)+(3))|0)]=HEAP8[((($1029)+(3))|0)];
   var $1030=$443;
   var $1031=$__mp1;
   $215=$1031;
   var $1032=$215;
   var $1033=$1032;
   var $1034=HEAP32[(($1033)>>2)];
   var $1035=(($1034+32)|0);
   var $1036=HEAP32[(($1035)>>2)];
   FUNCTION_TABLE[$1036]($451, $1032);
   $212=$1030;
   $213=$451;
   var $1037=$212;
   var $1038=$213;
   var $tmp_i28=$211;
   var $tmp1_i29=$214;
   assert(1 % 1 === 0);HEAP8[($tmp_i28)]=HEAP8[($tmp1_i29)];
   $209=$1037;
   $210=$1038;
   var $1039=$209;
   $206=$1039;
   var $1040=$206;
   $205=$1040;
   var $1041=$205;
   $186=$1040;
   var $1042=$186;
   var $1043=(($1042)|0);
   $185=$1043;
   var $1044=$185;
   var $1045=$1044;
   $184=$1045;
   var $1046=$184;
   var $1047=(($1046)|0);
   var $1048=(($1047)|0);
   var $1049=$1048;
   var $1050=(($1049)|0);
   var $1051=$1050;
   var $1052=HEAP8[($1051)];
   var $1053=(($1052)&(255));
   var $1054=$1053 & 1;
   var $1055=(($1054)|(0))!=0;
   if ($1055) { label = 36; break; } else { label = 37; break; }
  case 36: 
   $189=$1040;
   var $1057=$189;
   var $1058=(($1057)|0);
   $188=$1058;
   var $1059=$188;
   var $1060=$1059;
   $187=$1060;
   var $1061=$187;
   var $1062=(($1061)|0);
   var $1063=(($1062)|0);
   var $1064=$1063;
   var $1065=(($1064+8)|0);
   var $1066=HEAP32[(($1065)>>2)];
   HEAP32[(($207)>>2)]=0;
   $190=$1066;
   $191=$207;
   var $1067=$191;
   var $1068=HEAP32[(($1067)>>2)];
   var $1069=$190;
   HEAP32[(($1069)>>2)]=$1068;
   $194=$1040;
   $195=0;
   var $1070=$194;
   var $1071=$195;
   var $1072=(($1070)|0);
   $193=$1072;
   var $1073=$193;
   var $1074=$1073;
   $192=$1074;
   var $1075=$192;
   var $1076=(($1075)|0);
   var $1077=(($1076)|0);
   var $1078=$1077;
   var $1079=(($1078+4)|0);
   HEAP32[(($1079)>>2)]=$1071;
   label = 38; break;
  case 37: 
   $198=$1040;
   var $1081=$198;
   var $1082=(($1081)|0);
   $197=$1082;
   var $1083=$197;
   var $1084=$1083;
   $196=$1084;
   var $1085=$196;
   var $1086=(($1085)|0);
   var $1087=(($1086)|0);
   var $1088=$1087;
   var $1089=(($1088+4)|0);
   var $1090=(($1089)|0);
   HEAP32[(($208)>>2)]=0;
   $199=$1090;
   $200=$208;
   var $1091=$200;
   var $1092=HEAP32[(($1091)>>2)];
   var $1093=$199;
   HEAP32[(($1093)>>2)]=$1092;
   $203=$1040;
   $204=0;
   var $1094=$203;
   var $1095=$204;
   var $1096=$1095 << 1;
   var $1097=(($1096) & 255);
   var $1098=(($1094)|0);
   $202=$1098;
   var $1099=$202;
   var $1100=$1099;
   $201=$1100;
   var $1101=$201;
   var $1102=(($1101)|0);
   var $1103=(($1102)|0);
   var $1104=$1103;
   var $1105=(($1104)|0);
   var $1106=$1105;
   HEAP8[($1106)]=$1097;
   label = 38; break;
  case 38: 
   $163=$1039;
   var $1107=$163;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($1107, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 40; break; } else { label = 39; break; }
  case 39: 
   var $1109$0 = ___cxa_find_matching_catch(-1, -1,0); $1109$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 40: 
   var $1110=(($1039)|0);
   $165=$1110;
   var $1111=$165;
   var $1112=$1111;
   $164=$1112;
   var $1113=$164;
   var $1114=(($1113)|0);
   var $1115=$210;
   var $1116=(($1115)|0);
   $167=$1116;
   var $1117=$167;
   var $1118=$1117;
   $166=$1118;
   var $1119=$166;
   var $1120=(($1119)|0);
   var $1121=$1114;
   var $1122=$1120;
   assert(12 % 1 === 0);HEAP32[(($1121)>>2)]=HEAP32[(($1122)>>2)];HEAP32[((($1121)+(4))>>2)]=HEAP32[((($1122)+(4))>>2)];HEAP32[((($1121)+(8))>>2)]=HEAP32[((($1122)+(8))>>2)];
   var $1123=$210;
   $178=$1039;
   $179=$1123;
   var $1124=$178;
   var $1125=$179;
   var $tmp_i_i_i31=$177;
   var $tmp1_i_i_i32=$180;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i31)]=HEAP8[($tmp1_i_i_i32)];
   $175=$1124;
   $176=$1125;
   var $1126=$175;
   $174=$1126;
   var $1127=$174;
   var $1128=(($1127)|0);
   $173=$1128;
   var $1129=$173;
   var $1130=$1129;
   $172=$1130;
   var $1131=$172;
   var $1132=$1131;
   var $1133=$176;
   $170=$1133;
   var $1134=$170;
   var $1135=(($1134)|0);
   $169=$1135;
   var $1136=$169;
   var $1137=$1136;
   $168=$1137;
   var $1138=$168;
   var $1139=$1138;
   $171=$1139;
   var $1140=$171;
   var $1141=$210;
   $183=$1141;
   var $1142=$183;
   var $1143=(($1142)|0);
   $182=$1143;
   var $1144=$182;
   var $1145=$1144;
   $181=$1145;
   var $1146=$181;
   var $1147=(($1146)|0);
   var $1148=(($1147)|0);
   var $1149=$1148;
   var $1150=(($1149)|0);
   $__a_i_i_i26=$1150;
   $__i_i_i_i27=0;
   label = 41; break;
  case 41: 
   var $1152=$__i_i_i_i27;
   var $1153=(($1152)>>>(0)) < 3;
   if ($1153) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $1155=$__i_i_i_i27;
   var $1156=$__a_i_i_i26;
   var $1157=(($1156+($1155<<2))|0);
   HEAP32[(($1157)>>2)]=0;
   var $1158=$__i_i_i_i27;
   var $1159=((($1158)+(1))|0);
   $__i_i_i_i27=$1159;
   label = 41; break;
  case 43: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($451);
   var $1160=$442;
   var $1161=$__mp1;
   $162=$1161;
   var $1162=$162;
   var $1163=$1162;
   var $1164=HEAP32[(($1163)>>2)];
   var $1165=(($1164+28)|0);
   var $1166=HEAP32[(($1165)>>2)];
   FUNCTION_TABLE[$1166]($452, $1162);
   $159=$1160;
   $160=$452;
   var $1167=$159;
   var $1168=$160;
   var $tmp_i37=$158;
   var $tmp1_i38=$161;
   assert(1 % 1 === 0);HEAP8[($tmp_i37)]=HEAP8[($tmp1_i38)];
   $156=$1167;
   $157=$1168;
   var $1169=$156;
   $153=$1169;
   var $1170=$153;
   $152=$1170;
   var $1171=$152;
   $133=$1170;
   var $1172=$133;
   var $1173=(($1172)|0);
   $132=$1173;
   var $1174=$132;
   var $1175=$1174;
   $131=$1175;
   var $1176=$131;
   var $1177=(($1176)|0);
   var $1178=(($1177)|0);
   var $1179=$1178;
   var $1180=(($1179)|0);
   var $1181=$1180;
   var $1182=HEAP8[($1181)];
   var $1183=(($1182)&(255));
   var $1184=$1183 & 1;
   var $1185=(($1184)|(0))!=0;
   if ($1185) { label = 44; break; } else { label = 45; break; }
  case 44: 
   $136=$1170;
   var $1187=$136;
   var $1188=(($1187)|0);
   $135=$1188;
   var $1189=$135;
   var $1190=$1189;
   $134=$1190;
   var $1191=$134;
   var $1192=(($1191)|0);
   var $1193=(($1192)|0);
   var $1194=$1193;
   var $1195=(($1194+8)|0);
   var $1196=HEAP32[(($1195)>>2)];
   HEAP32[(($154)>>2)]=0;
   $137=$1196;
   $138=$154;
   var $1197=$138;
   var $1198=HEAP32[(($1197)>>2)];
   var $1199=$137;
   HEAP32[(($1199)>>2)]=$1198;
   $141=$1170;
   $142=0;
   var $1200=$141;
   var $1201=$142;
   var $1202=(($1200)|0);
   $140=$1202;
   var $1203=$140;
   var $1204=$1203;
   $139=$1204;
   var $1205=$139;
   var $1206=(($1205)|0);
   var $1207=(($1206)|0);
   var $1208=$1207;
   var $1209=(($1208+4)|0);
   HEAP32[(($1209)>>2)]=$1201;
   label = 46; break;
  case 45: 
   $145=$1170;
   var $1211=$145;
   var $1212=(($1211)|0);
   $144=$1212;
   var $1213=$144;
   var $1214=$1213;
   $143=$1214;
   var $1215=$143;
   var $1216=(($1215)|0);
   var $1217=(($1216)|0);
   var $1218=$1217;
   var $1219=(($1218+4)|0);
   var $1220=(($1219)|0);
   HEAP32[(($155)>>2)]=0;
   $146=$1220;
   $147=$155;
   var $1221=$147;
   var $1222=HEAP32[(($1221)>>2)];
   var $1223=$146;
   HEAP32[(($1223)>>2)]=$1222;
   $150=$1170;
   $151=0;
   var $1224=$150;
   var $1225=$151;
   var $1226=$1225 << 1;
   var $1227=(($1226) & 255);
   var $1228=(($1224)|0);
   $149=$1228;
   var $1229=$149;
   var $1230=$1229;
   $148=$1230;
   var $1231=$148;
   var $1232=(($1231)|0);
   var $1233=(($1232)|0);
   var $1234=$1233;
   var $1235=(($1234)|0);
   var $1236=$1235;
   HEAP8[($1236)]=$1227;
   label = 46; break;
  case 46: 
   $110=$1169;
   var $1237=$110;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($1237, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $1239$0 = ___cxa_find_matching_catch(-1, -1,0); $1239$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 48: 
   var $1240=(($1169)|0);
   $112=$1240;
   var $1241=$112;
   var $1242=$1241;
   $111=$1242;
   var $1243=$111;
   var $1244=(($1243)|0);
   var $1245=$157;
   var $1246=(($1245)|0);
   $114=$1246;
   var $1247=$114;
   var $1248=$1247;
   $113=$1248;
   var $1249=$113;
   var $1250=(($1249)|0);
   var $1251=$1244;
   var $1252=$1250;
   assert(12 % 1 === 0);HEAP32[(($1251)>>2)]=HEAP32[(($1252)>>2)];HEAP32[((($1251)+(4))>>2)]=HEAP32[((($1252)+(4))>>2)];HEAP32[((($1251)+(8))>>2)]=HEAP32[((($1252)+(8))>>2)];
   var $1253=$157;
   $125=$1169;
   $126=$1253;
   var $1254=$125;
   var $1255=$126;
   var $tmp_i_i_i40=$124;
   var $tmp1_i_i_i41=$127;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i40)]=HEAP8[($tmp1_i_i_i41)];
   $122=$1254;
   $123=$1255;
   var $1256=$122;
   $121=$1256;
   var $1257=$121;
   var $1258=(($1257)|0);
   $120=$1258;
   var $1259=$120;
   var $1260=$1259;
   $119=$1260;
   var $1261=$119;
   var $1262=$1261;
   var $1263=$123;
   $117=$1263;
   var $1264=$117;
   var $1265=(($1264)|0);
   $116=$1265;
   var $1266=$116;
   var $1267=$1266;
   $115=$1267;
   var $1268=$115;
   var $1269=$1268;
   $118=$1269;
   var $1270=$118;
   var $1271=$157;
   $130=$1271;
   var $1272=$130;
   var $1273=(($1272)|0);
   $129=$1273;
   var $1274=$129;
   var $1275=$1274;
   $128=$1275;
   var $1276=$128;
   var $1277=(($1276)|0);
   var $1278=(($1277)|0);
   var $1279=$1278;
   var $1280=(($1279)|0);
   $__a_i_i_i35=$1280;
   $__i_i_i_i36=0;
   label = 49; break;
  case 49: 
   var $1282=$__i_i_i_i36;
   var $1283=(($1282)>>>(0)) < 3;
   if ($1283) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $1285=$__i_i_i_i36;
   var $1286=$__a_i_i_i35;
   var $1287=(($1286+($1285<<2))|0);
   HEAP32[(($1287)>>2)]=0;
   var $1288=$__i_i_i_i36;
   var $1289=((($1288)+(1))|0);
   $__i_i_i_i36=$1289;
   label = 49; break;
  case 51: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($452);
   var $1290=$__mp1;
   $109=$1290;
   var $1291=$109;
   var $1292=$1291;
   var $1293=HEAP32[(($1292)>>2)];
   var $1294=(($1293+12)|0);
   var $1295=HEAP32[(($1294)>>2)];
   var $1296=FUNCTION_TABLE[$1295]($1291);
   var $1297=$438;
   HEAP32[(($1297)>>2)]=$1296;
   var $1298=$__mp1;
   $108=$1298;
   var $1299=$108;
   var $1300=$1299;
   var $1301=HEAP32[(($1300)>>2)];
   var $1302=(($1301+16)|0);
   var $1303=HEAP32[(($1302)>>2)];
   var $1304=FUNCTION_TABLE[$1303]($1299);
   var $1305=$439;
   HEAP32[(($1305)>>2)]=$1304;
   var $1306=$440;
   var $1307=$__mp1;
   $107=$1307;
   var $1308=$107;
   var $1309=$1308;
   var $1310=HEAP32[(($1309)>>2)];
   var $1311=(($1310+20)|0);
   var $1312=HEAP32[(($1311)>>2)];
   FUNCTION_TABLE[$1312]($453, $1308);
   $104=$1306;
   $105=$453;
   var $1313=$104;
   var $1314=$105;
   var $tmp_i46=$103;
   var $tmp1_i47=$106;
   assert(1 % 1 === 0);HEAP8[($tmp_i46)]=HEAP8[($tmp1_i47)];
   $101=$1313;
   $102=$1314;
   var $1315=$101;
   $98=$1315;
   var $1316=$98;
   $97=$1316;
   var $1317=$97;
   $78=$1316;
   var $1318=$78;
   var $1319=(($1318)|0);
   $77=$1319;
   var $1320=$77;
   var $1321=$1320;
   $76=$1321;
   var $1322=$76;
   var $1323=(($1322)|0);
   var $1324=(($1323)|0);
   var $1325=$1324;
   var $1326=(($1325)|0);
   var $1327=$1326;
   var $1328=HEAP8[($1327)];
   var $1329=(($1328)&(255));
   var $1330=$1329 & 1;
   var $1331=(($1330)|(0))!=0;
   if ($1331) { label = 52; break; } else { label = 53; break; }
  case 52: 
   $81=$1316;
   var $1333=$81;
   var $1334=(($1333)|0);
   $80=$1334;
   var $1335=$80;
   var $1336=$1335;
   $79=$1336;
   var $1337=$79;
   var $1338=(($1337)|0);
   var $1339=(($1338)|0);
   var $1340=$1339;
   var $1341=(($1340+8)|0);
   var $1342=HEAP32[(($1341)>>2)];
   HEAP8[($99)]=0;
   $82=$1342;
   $83=$99;
   var $1343=$83;
   var $1344=HEAP8[($1343)];
   var $1345=$82;
   HEAP8[($1345)]=$1344;
   $86=$1316;
   $87=0;
   var $1346=$86;
   var $1347=$87;
   var $1348=(($1346)|0);
   $85=$1348;
   var $1349=$85;
   var $1350=$1349;
   $84=$1350;
   var $1351=$84;
   var $1352=(($1351)|0);
   var $1353=(($1352)|0);
   var $1354=$1353;
   var $1355=(($1354+4)|0);
   HEAP32[(($1355)>>2)]=$1347;
   label = 54; break;
  case 53: 
   $90=$1316;
   var $1357=$90;
   var $1358=(($1357)|0);
   $89=$1358;
   var $1359=$89;
   var $1360=$1359;
   $88=$1360;
   var $1361=$88;
   var $1362=(($1361)|0);
   var $1363=(($1362)|0);
   var $1364=$1363;
   var $1365=(($1364+1)|0);
   var $1366=(($1365)|0);
   HEAP8[($100)]=0;
   $91=$1366;
   $92=$100;
   var $1367=$92;
   var $1368=HEAP8[($1367)];
   var $1369=$91;
   HEAP8[($1369)]=$1368;
   $95=$1316;
   $96=0;
   var $1370=$95;
   var $1371=$96;
   var $1372=$1371 << 1;
   var $1373=(($1372) & 255);
   var $1374=(($1370)|0);
   $94=$1374;
   var $1375=$94;
   var $1376=$1375;
   $93=$1376;
   var $1377=$93;
   var $1378=(($1377)|0);
   var $1379=(($1378)|0);
   var $1380=$1379;
   var $1381=(($1380)|0);
   var $1382=$1381;
   HEAP8[($1382)]=$1373;
   label = 54; break;
  case 54: 
   $55=$1315;
   var $1383=$55;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1383, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 56; break; } else { label = 55; break; }
  case 55: 
   var $1385$0 = ___cxa_find_matching_catch(-1, -1,0); $1385$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 56: 
   var $1386=(($1315)|0);
   $57=$1386;
   var $1387=$57;
   var $1388=$1387;
   $56=$1388;
   var $1389=$56;
   var $1390=(($1389)|0);
   var $1391=$102;
   var $1392=(($1391)|0);
   $59=$1392;
   var $1393=$59;
   var $1394=$1393;
   $58=$1394;
   var $1395=$58;
   var $1396=(($1395)|0);
   var $1397=$1390;
   var $1398=$1396;
   assert(12 % 1 === 0);HEAP32[(($1397)>>2)]=HEAP32[(($1398)>>2)];HEAP32[((($1397)+(4))>>2)]=HEAP32[((($1398)+(4))>>2)];HEAP32[((($1397)+(8))>>2)]=HEAP32[((($1398)+(8))>>2)];
   var $1399=$102;
   $70=$1315;
   $71=$1399;
   var $1400=$70;
   var $1401=$71;
   var $tmp_i_i_i49=$69;
   var $tmp1_i_i_i50=$72;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i49)]=HEAP8[($tmp1_i_i_i50)];
   $67=$1400;
   $68=$1401;
   var $1402=$67;
   $66=$1402;
   var $1403=$66;
   var $1404=(($1403)|0);
   $65=$1404;
   var $1405=$65;
   var $1406=$1405;
   $64=$1406;
   var $1407=$64;
   var $1408=$1407;
   var $1409=$68;
   $62=$1409;
   var $1410=$62;
   var $1411=(($1410)|0);
   $61=$1411;
   var $1412=$61;
   var $1413=$1412;
   $60=$1413;
   var $1414=$60;
   var $1415=$1414;
   $63=$1415;
   var $1416=$63;
   var $1417=$102;
   $75=$1417;
   var $1418=$75;
   var $1419=(($1418)|0);
   $74=$1419;
   var $1420=$74;
   var $1421=$1420;
   $73=$1421;
   var $1422=$73;
   var $1423=(($1422)|0);
   var $1424=(($1423)|0);
   var $1425=$1424;
   var $1426=(($1425)|0);
   $__a_i_i_i44=$1426;
   $__i_i_i_i45=0;
   label = 57; break;
  case 57: 
   var $1428=$__i_i_i_i45;
   var $1429=(($1428)>>>(0)) < 3;
   if ($1429) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $1431=$__i_i_i_i45;
   var $1432=$__a_i_i_i44;
   var $1433=(($1432+($1431<<2))|0);
   HEAP32[(($1433)>>2)]=0;
   var $1434=$__i_i_i_i45;
   var $1435=((($1434)+(1))|0);
   $__i_i_i_i45=$1435;
   label = 57; break;
  case 59: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($453);
   var $1436=$441;
   var $1437=$__mp1;
   $54=$1437;
   var $1438=$54;
   var $1439=$1438;
   var $1440=HEAP32[(($1439)>>2)];
   var $1441=(($1440+24)|0);
   var $1442=HEAP32[(($1441)>>2)];
   FUNCTION_TABLE[$1442]($454, $1438);
   $51=$1436;
   $52=$454;
   var $1443=$51;
   var $1444=$52;
   var $tmp_i55=$50;
   var $tmp1_i56=$53;
   assert(1 % 1 === 0);HEAP8[($tmp_i55)]=HEAP8[($tmp1_i56)];
   $48=$1443;
   $49=$1444;
   var $1445=$48;
   $45=$1445;
   var $1446=$45;
   $44=$1446;
   var $1447=$44;
   $25=$1446;
   var $1448=$25;
   var $1449=(($1448)|0);
   $24=$1449;
   var $1450=$24;
   var $1451=$1450;
   $23=$1451;
   var $1452=$23;
   var $1453=(($1452)|0);
   var $1454=(($1453)|0);
   var $1455=$1454;
   var $1456=(($1455)|0);
   var $1457=$1456;
   var $1458=HEAP8[($1457)];
   var $1459=(($1458)&(255));
   var $1460=$1459 & 1;
   var $1461=(($1460)|(0))!=0;
   if ($1461) { label = 60; break; } else { label = 61; break; }
  case 60: 
   $28=$1446;
   var $1463=$28;
   var $1464=(($1463)|0);
   $27=$1464;
   var $1465=$27;
   var $1466=$1465;
   $26=$1466;
   var $1467=$26;
   var $1468=(($1467)|0);
   var $1469=(($1468)|0);
   var $1470=$1469;
   var $1471=(($1470+8)|0);
   var $1472=HEAP32[(($1471)>>2)];
   HEAP32[(($46)>>2)]=0;
   $29=$1472;
   $30=$46;
   var $1473=$30;
   var $1474=HEAP32[(($1473)>>2)];
   var $1475=$29;
   HEAP32[(($1475)>>2)]=$1474;
   $33=$1446;
   $34=0;
   var $1476=$33;
   var $1477=$34;
   var $1478=(($1476)|0);
   $32=$1478;
   var $1479=$32;
   var $1480=$1479;
   $31=$1480;
   var $1481=$31;
   var $1482=(($1481)|0);
   var $1483=(($1482)|0);
   var $1484=$1483;
   var $1485=(($1484+4)|0);
   HEAP32[(($1485)>>2)]=$1477;
   label = 62; break;
  case 61: 
   $37=$1446;
   var $1487=$37;
   var $1488=(($1487)|0);
   $36=$1488;
   var $1489=$36;
   var $1490=$1489;
   $35=$1490;
   var $1491=$35;
   var $1492=(($1491)|0);
   var $1493=(($1492)|0);
   var $1494=$1493;
   var $1495=(($1494+4)|0);
   var $1496=(($1495)|0);
   HEAP32[(($47)>>2)]=0;
   $38=$1496;
   $39=$47;
   var $1497=$39;
   var $1498=HEAP32[(($1497)>>2)];
   var $1499=$38;
   HEAP32[(($1499)>>2)]=$1498;
   $42=$1446;
   $43=0;
   var $1500=$42;
   var $1501=$43;
   var $1502=$1501 << 1;
   var $1503=(($1502) & 255);
   var $1504=(($1500)|0);
   $41=$1504;
   var $1505=$41;
   var $1506=$1505;
   $40=$1506;
   var $1507=$40;
   var $1508=(($1507)|0);
   var $1509=(($1508)|0);
   var $1510=$1509;
   var $1511=(($1510)|0);
   var $1512=$1511;
   HEAP8[($1512)]=$1503;
   label = 62; break;
  case 62: 
   $2=$1445;
   var $1513=$2;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($1513, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 64; break; } else { label = 63; break; }
  case 63: 
   var $1515$0 = ___cxa_find_matching_catch(-1, -1,0); $1515$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 64: 
   var $1516=(($1445)|0);
   $4=$1516;
   var $1517=$4;
   var $1518=$1517;
   $3=$1518;
   var $1519=$3;
   var $1520=(($1519)|0);
   var $1521=$49;
   var $1522=(($1521)|0);
   $6=$1522;
   var $1523=$6;
   var $1524=$1523;
   $5=$1524;
   var $1525=$5;
   var $1526=(($1525)|0);
   var $1527=$1520;
   var $1528=$1526;
   assert(12 % 1 === 0);HEAP32[(($1527)>>2)]=HEAP32[(($1528)>>2)];HEAP32[((($1527)+(4))>>2)]=HEAP32[((($1528)+(4))>>2)];HEAP32[((($1527)+(8))>>2)]=HEAP32[((($1528)+(8))>>2)];
   var $1529=$49;
   $17=$1445;
   $18=$1529;
   var $1530=$17;
   var $1531=$18;
   var $tmp_i_i_i58=$16;
   var $tmp1_i_i_i59=$19;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i58)]=HEAP8[($tmp1_i_i_i59)];
   $14=$1530;
   $15=$1531;
   var $1532=$14;
   $13=$1532;
   var $1533=$13;
   var $1534=(($1533)|0);
   $12=$1534;
   var $1535=$12;
   var $1536=$1535;
   $11=$1536;
   var $1537=$11;
   var $1538=$1537;
   var $1539=$15;
   $9=$1539;
   var $1540=$9;
   var $1541=(($1540)|0);
   $8=$1541;
   var $1542=$8;
   var $1543=$1542;
   $7=$1543;
   var $1544=$7;
   var $1545=$1544;
   $10=$1545;
   var $1546=$10;
   var $1547=$49;
   $22=$1547;
   var $1548=$22;
   var $1549=(($1548)|0);
   $21=$1549;
   var $1550=$21;
   var $1551=$1550;
   $20=$1551;
   var $1552=$20;
   var $1553=(($1552)|0);
   var $1554=(($1553)|0);
   var $1555=$1554;
   var $1556=(($1555)|0);
   $__a_i_i_i53=$1556;
   $__i_i_i_i54=0;
   label = 65; break;
  case 65: 
   var $1558=$__i_i_i_i54;
   var $1559=(($1558)>>>(0)) < 3;
   if ($1559) { label = 66; break; } else { label = 67; break; }
  case 66: 
   var $1561=$__i_i_i_i54;
   var $1562=$__a_i_i_i53;
   var $1563=(($1562+($1561<<2))|0);
   HEAP32[(($1563)>>2)]=0;
   var $1564=$__i_i_i_i54;
   var $1565=((($1564)+(1))|0);
   $__i_i_i_i54=$1565;
   label = 65; break;
  case 67: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($454);
   var $1566=$__mp1;
   $1=$1566;
   var $1567=$1;
   var $1568=$1567;
   var $1569=HEAP32[(($1568)>>2)];
   var $1570=(($1569+36)|0);
   var $1571=HEAP32[(($1570)>>2)];
   var $1572=FUNCTION_TABLE[$1571]($1567);
   var $1573=$444;
   HEAP32[(($1573)>>2)]=$1572;
   label = 68; break;
  case 68: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__t_i;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13=__stackBase__;
   var $14=(__stackBase__)+(8);
   var $15;
   var $16;
   var $17=(__stackBase__)+(16);
   var $18=(__stackBase__)+(24);
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $__tmp_i_i;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $__t_i_i;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $__tmp_i_i_i;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $__owns;
   var $__cur_cap;
   var $__new_cap;
   var $__n_off;
   var $__t;
   var $78=(__stackBase__)+(32);
   var $79=(__stackBase__)+(40);
   $75=$__b;
   $76=$__n;
   $77=$__e;
   var $80=$75;
   $74=$80;
   var $81=$74;
   var $82=(($81)|0);
   $73=$82;
   var $83=$73;
   var $84=$83;
   $72=$84;
   var $85=$72;
   var $86=(($85+4)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87)|(0))!=(((542))|(0));
   var $89=(($88)&(1));
   $__owns=$89;
   var $90=$77;
   var $91=HEAP32[(($90)>>2)];
   var $92=$75;
   $55=$92;
   var $93=$55;
   var $94=(($93)|0);
   $54=$94;
   var $95=$54;
   var $96=$95;
   $53=$96;
   var $97=$53;
   var $98=(($97)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=$91;
   var $101=$99;
   var $102=((($100)-($101))|0);
   var $103=((((($102)|(0)))/(4))&-1);
   var $104=($103<<2);
   $__cur_cap=$104;
   var $105=$__cur_cap;
   var $106=Math.floor(2147483647);
   var $107=(($105)>>>(0)) < (($106)>>>(0));
   if ($107) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $109=$__cur_cap;
   var $110=($109<<1);
   var $113 = $110;label = 4; break;
  case 3: 
   var $113 = -1;label = 4; break;
  case 4: 
   var $113;
   $__new_cap=$113;
   var $114=$76;
   var $115=HEAP32[(($114)>>2)];
   var $116=$75;
   $31=$116;
   var $117=$31;
   var $118=(($117)|0);
   $30=$118;
   var $119=$30;
   var $120=$119;
   $29=$120;
   var $121=$29;
   var $122=(($121)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=$115;
   var $125=$123;
   var $126=((($124)-($125))|0);
   var $127=((((($126)|(0)))/(4))&-1);
   $__n_off=$127;
   var $128=$__owns;
   var $129=(($128) & 1);
   if ($129) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $131=$75;
   $3=$131;
   var $132=$3;
   var $133=(($132)|0);
   $2=$133;
   var $134=$2;
   var $135=$134;
   $1=$135;
   var $136=$1;
   var $137=(($136)|0);
   var $138=HEAP32[(($137)>>2)];
   var $141 = $138;label = 7; break;
  case 6: 
   var $141 = 0;label = 7; break;
  case 7: 
   var $141;
   var $142=$141;
   var $143=$__new_cap;
   var $144=_realloc($142, $143);
   var $145=$144;
   $__t=$145;
   var $146=$__t;
   var $147=(($146)|(0))==0;
   if ($147) { label = 8; break; } else { label = 9; break; }
  case 8: 
   __ZSt17__throw_bad_allocv();
   label = 9; break;
  case 9: 
   var $150=$__owns;
   var $151=(($150) & 1);
   if ($151) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $153=$75;
   $8=$153;
   var $154=$8;
   var $155=(($154)|0);
   $7=$155;
   var $156=$7;
   var $157=$156;
   $6=$157;
   var $158=$6;
   var $159=(($158)|0);
   var $160=HEAP32[(($159)>>2)];
   $__t_i=$160;
   var $161=(($154)|0);
   $5=$161;
   var $162=$5;
   var $163=$162;
   $4=$163;
   var $164=$4;
   var $165=(($164)|0);
   HEAP32[(($165)>>2)]=0;
   var $166=$__t_i;
   label = 11; break;
  case 11: 
   var $168=$75;
   var $169=$__t;
   HEAP32[(($79)>>2)]=272;
   $26=$78;
   $27=$169;
   $28=$79;
   var $170=$26;
   var $171=$27;
   var $172=$28;
   $23=$170;
   $24=$171;
   $25=$172;
   var $173=$23;
   var $174=(($173)|0);
   var $175=$24;
   var $176=$25;
   $22=$176;
   var $177=$22;
   var $178=HEAP32[(($177)>>2)];
   $19=$174;
   $20=$175;
   $21=$178;
   var $179=$19;
   var $180=$20;
   var $181=$21;
   $16=$179;
   HEAP32[(($17)>>2)]=$180;
   HEAP32[(($18)>>2)]=$181;
   var $182=$16;
   var $183=$182;
   $15=$17;
   var $184=$15;
   var $185=HEAP32[(($184)>>2)];
   $9=$18;
   var $186=$9;
   var $187=HEAP32[(($186)>>2)];
   $12=$183;
   HEAP32[(($13)>>2)]=$185;
   HEAP32[(($14)>>2)]=$187;
   var $188=$12;
   var $189=(($188)|0);
   $11=$13;
   var $190=$11;
   var $191=HEAP32[(($190)>>2)];
   HEAP32[(($189)>>2)]=$191;
   var $192=(($188+4)|0);
   $10=$14;
   var $193=$10;
   var $194=HEAP32[(($193)>>2)];
   HEAP32[(($192)>>2)]=$194;
   $51=$168;
   $52=$78;
   var $195=$51;
   var $196=$52;
   $50=$196;
   var $197=$50;
   var $198=(($197)|0);
   $49=$198;
   var $199=$49;
   var $200=$199;
   $48=$200;
   var $201=$48;
   var $202=(($201)|0);
   var $203=HEAP32[(($202)>>2)];
   $__t_i_i=$203;
   var $204=(($197)|0);
   $47=$204;
   var $205=$47;
   var $206=$205;
   $46=$206;
   var $207=$46;
   var $208=(($207)|0);
   HEAP32[(($208)>>2)]=0;
   var $209=$__t_i_i;
   $38=$195;
   $39=$209;
   var $210=$38;
   var $211=(($210)|0);
   $37=$211;
   var $212=$37;
   var $213=$212;
   $36=$213;
   var $214=$36;
   var $215=(($214)|0);
   var $216=HEAP32[(($215)>>2)];
   $__tmp_i_i=$216;
   var $217=$39;
   var $218=(($210)|0);
   $35=$218;
   var $219=$35;
   var $220=$219;
   $34=$220;
   var $221=$34;
   var $222=(($221)|0);
   HEAP32[(($222)>>2)]=$217;
   var $223=$__tmp_i_i;
   var $224=(($223)|(0))!=0;
   if ($224) { label = 12; break; } else { label = 15; break; }
  case 12: 
   var $226=(($210)|0);
   $33=$226;
   var $227=$33;
   var $228=$227;
   $32=$228;
   var $229=$32;
   var $230=(($229+4)|0);
   var $231=HEAP32[(($230)>>2)];
   var $232=$__tmp_i_i;
   var $233=$232;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$231]($233) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 14; break; }
  case 13: 
   label = 15; break;
  case 14: 
   var $236$0 = ___cxa_find_matching_catch(-1, -1,0); $236$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 15: 
   var $237=$52;
   $42=$237;
   var $238=$42;
   var $239=(($238)|0);
   $41=$239;
   var $240=$41;
   var $241=$240;
   $40=$241;
   var $242=$40;
   var $243=(($242+4)|0);
   $43=$243;
   var $244=$43;
   var $245=HEAP32[(($244)>>2)];
   var $246=(($195)|0);
   $45=$246;
   var $247=$45;
   var $248=$247;
   $44=$248;
   var $249=$44;
   var $250=(($249+4)|0);
   HEAP32[(($250)>>2)]=$245;
   $65=$78;
   var $251=$65;
   $64=$251;
   var $252=$64;
   $62=$252;
   $63=0;
   var $253=$62;
   var $254=(($253)|0);
   $61=$254;
   var $255=$61;
   var $256=$255;
   $60=$256;
   var $257=$60;
   var $258=(($257)|0);
   var $259=HEAP32[(($258)>>2)];
   $__tmp_i_i_i=$259;
   var $260=$63;
   var $261=(($253)|0);
   $59=$261;
   var $262=$59;
   var $263=$262;
   $58=$263;
   var $264=$58;
   var $265=(($264)|0);
   HEAP32[(($265)>>2)]=$260;
   var $266=$__tmp_i_i_i;
   var $267=(($266)|(0))!=0;
   if ($267) { label = 16; break; } else { label = 19; break; }
  case 16: 
   var $269=(($253)|0);
   $57=$269;
   var $270=$57;
   var $271=$270;
   $56=$271;
   var $272=$56;
   var $273=(($272+4)|0);
   var $274=HEAP32[(($273)>>2)];
   var $275=$__tmp_i_i_i;
   var $276=$275;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$274]($276) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 18; break; }
  case 17: 
   label = 19; break;
  case 18: 
   var $279$0 = ___cxa_find_matching_catch(-1, -1,0); $279$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 19: 
   var $280=$__new_cap;
   var $281=Math.floor(((($280)>>>(0)))/(4));
   $__new_cap=$281;
   var $282=$75;
   $68=$282;
   var $283=$68;
   var $284=(($283)|0);
   $67=$284;
   var $285=$67;
   var $286=$285;
   $66=$286;
   var $287=$66;
   var $288=(($287)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=$__n_off;
   var $291=(($289+($290<<2))|0);
   var $292=$76;
   HEAP32[(($292)>>2)]=$291;
   var $293=$75;
   $71=$293;
   var $294=$71;
   var $295=(($294)|0);
   $70=$295;
   var $296=$70;
   var $297=$296;
   $69=$297;
   var $298=$69;
   var $299=(($298)|0);
   var $300=HEAP32[(($299)>>2)];
   var $301=$__new_cap;
   var $302=(($300+($301<<2))|0);
   var $303=$77;
   HEAP32[(($303)>>2)]=$302;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg_result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 576)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i22;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $__tmp_i_i_i20;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $__tmp_i18;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $__tmp_i_i_i14;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $__tmp_i_i_i11;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97=__stackBase__;
   var $98=(__stackBase__)+(8);
   var $99;
   var $100;
   var $101=(__stackBase__)+(16);
   var $102=(__stackBase__)+(24);
   var $103;
   var $104;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $__a_i_i_i8;
   var $__i_i_i_i9;
   var $116;
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $122;
   var $123;
   var $124;
   var $__a_i_i_i5;
   var $__i_i_i_i6;
   var $125;
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $__tmp_i_i_i3;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154;
   var $155;
   var $156;
   var $157;
   var $158;
   var $159;
   var $160;
   var $161;
   var $162;
   var $163;
   var $164;
   var $165;
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $__tmp_i1;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177;
   var $178;
   var $__tmp_i;
   var $179;
   var $180;
   var $181;
   var $182;
   var $183=(__stackBase__)+(32);
   var $184=(__stackBase__)+(40);
   var $185;
   var $186;
   var $187=(__stackBase__)+(48);
   var $188=(__stackBase__)+(56);
   var $189;
   var $190;
   var $191;
   var $192;
   var $193;
   var $194;
   var $195;
   var $196;
   var $197;
   var $198;
   var $199;
   var $200;
   var $201;
   var $202;
   var $203;
   var $204;
   var $205;
   var $206;
   var $__tmp_i_i_i;
   var $207;
   var $208;
   var $209;
   var $210;
   var $211;
   var $212;
   var $213=(__stackBase__)+(64);
   var $214=(__stackBase__)+(72);
   var $215;
   var $216;
   var $217=(__stackBase__)+(80);
   var $218=(__stackBase__)+(88);
   var $219;
   var $220;
   var $221;
   var $222;
   var $223;
   var $224;
   var $225;
   var $226;
   var $227;
   var $228;
   var $229;
   var $230;
   var $231;
   var $232;
   var $233;
   var $__bs;
   var $__buf=(__stackBase__)+(96);
   var $__bb=(__stackBase__)+(200);
   var $__digits=(__stackBase__)+(208);
   var $__db;
   var $__n;
   var $__hn=(__stackBase__)+(312);
   var $234=(__stackBase__)+(320);
   var $__hd=(__stackBase__)+(328);
   var $235=(__stackBase__)+(336);
   var $236;
   var $237;
   var $__loc=(__stackBase__)+(344);
   var $__ct;
   var $__neg;
   var $__pat=(__stackBase__)+(352);
   var $__dp=(__stackBase__)+(360);
   var $__ts=(__stackBase__)+(368);
   var $__grp=(__stackBase__)+(376);
   var $__sym=(__stackBase__)+(392);
   var $__sn=(__stackBase__)+(408);
   var $__fd=(__stackBase__)+(424);
   var $__mbuf=(__stackBase__)+(432);
   var $__mb;
   var $__hw=(__stackBase__)+(536);
   var $238=(__stackBase__)+(544);
   var $__exn;
   var $__mi=(__stackBase__)+(552);
   var $__me=(__stackBase__)+(560);
   var $239=(__stackBase__)+(568);
   var $240;
   $229=$this;
   var $241=(($__intl)&(1));
   $230=$241;
   $231=$__iob;
   $232=$__fl;
   $233=$__units;
   var $242=$229;
   $__bs=100;
   var $243=(($__buf)|0);
   HEAP32[(($__bb)>>2)]=$243;
   var $244=(($__digits)|0);
   $__db=$244;
   var $245=HEAP32[(($__bb)>>2)];
   var $246=$233;
   var $247=_snprintf($245, 100, ((3200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$246,tempInt));
   $__n=$247;
   HEAP32[(($234)>>2)]=272;
   $226=$__hn;
   $227=0;
   $228=$234;
   var $248=$226;
   var $249=$227;
   var $250=$228;
   $223=$248;
   $224=$249;
   $225=$250;
   var $251=$223;
   var $252=(($251)|0);
   var $253=$224;
   var $254=$225;
   $222=$254;
   var $255=$222;
   var $256=HEAP32[(($255)>>2)];
   $219=$252;
   $220=$253;
   $221=$256;
   var $257=$219;
   var $258=$220;
   var $259=$221;
   $216=$257;
   HEAP32[(($217)>>2)]=$258;
   HEAP32[(($218)>>2)]=$259;
   var $260=$216;
   var $261=$260;
   $215=$217;
   var $262=$215;
   var $263=HEAP32[(($262)>>2)];
   $209=$218;
   var $264=$209;
   var $265=HEAP32[(($264)>>2)];
   $212=$261;
   HEAP32[(($213)>>2)]=$263;
   HEAP32[(($214)>>2)]=$265;
   var $266=$212;
   var $267=(($266)|0);
   $211=$213;
   var $268=$211;
   var $269=HEAP32[(($268)>>2)];
   HEAP32[(($267)>>2)]=$269;
   var $270=(($266+4)|0);
   $210=$214;
   var $271=$210;
   var $272=HEAP32[(($271)>>2)];
   HEAP32[(($270)>>2)]=$272;
   HEAP32[(($235)>>2)]=272;
   $196=$__hd;
   $197=0;
   $198=$235;
   var $273=$196;
   var $274=$197;
   var $275=$198;
   $193=$273;
   $194=$274;
   $195=$275;
   var $276=$193;
   var $277=(($276)|0);
   var $278=$194;
   var $279=$195;
   $192=$279;
   var $280=$192;
   var $281=HEAP32[(($280)>>2)];
   $189=$277;
   $190=$278;
   $191=$281;
   var $282=$189;
   var $283=$190;
   var $284=$191;
   $186=$282;
   HEAP32[(($187)>>2)]=$283;
   HEAP32[(($188)>>2)]=$284;
   var $285=$186;
   var $286=$285;
   $185=$187;
   var $287=$185;
   var $288=HEAP32[(($287)>>2)];
   $179=$188;
   var $289=$179;
   var $290=HEAP32[(($289)>>2)];
   $182=$286;
   HEAP32[(($183)>>2)]=$288;
   HEAP32[(($184)>>2)]=$290;
   var $291=$182;
   var $292=(($291)|0);
   $181=$183;
   var $293=$181;
   var $294=HEAP32[(($293)>>2)];
   HEAP32[(($292)>>2)]=$294;
   var $295=(($291+4)|0);
   $180=$184;
   var $296=$180;
   var $297=HEAP32[(($296)>>2)];
   HEAP32[(($295)>>2)]=$297;
   var $298=$__n;
   var $299=(($298)>>>(0)) > 99;
   if ($299) { label = 2; break; } else { label = 20; break; }
  case 2: 
   var $301 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $303=$233;
   var $304 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcPvPKcz($__bb, $301, ((3200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$303,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 7; break; }
  case 4: 
   $__n=$304;
   var $306=HEAP32[(($__bb)>>2)];
   var $307=(($306)|(0))==0;
   if ($307) { label = 5; break; } else { label = 8; break; }
  case 5: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 8; break;
  case 7: 
   var $311$0 = ___cxa_find_matching_catch(-1, -1); $311$1 = tempRet0;
   var $312=$311$0;
   $236=$312;
   var $313=$311$1;
   $237=$313;
   label = 86; break;
  case 8: 
   var $315=HEAP32[(($__bb)>>2)];
   $177=$__hn;
   $178=$315;
   var $316=$177;
   var $317=(($316)|0);
   $176=$317;
   var $318=$176;
   var $319=$318;
   $175=$319;
   var $320=$175;
   var $321=(($320)|0);
   var $322=HEAP32[(($321)>>2)];
   $__tmp_i=$322;
   var $323=$178;
   var $324=(($316)|0);
   $174=$324;
   var $325=$174;
   var $326=$325;
   $173=$326;
   var $327=$173;
   var $328=(($327)|0);
   HEAP32[(($328)>>2)]=$323;
   var $329=$__tmp_i;
   var $330=(($329)|(0))!=0;
   if ($330) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $332=(($316)|0);
   $172=$332;
   var $333=$172;
   var $334=$333;
   $171=$334;
   var $335=$171;
   var $336=(($335+4)|0);
   var $337=HEAP32[(($336)>>2)];
   var $338=$__tmp_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$337]($338) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 11; break; }
  case 10: 
   label = 12; break;
  case 11: 
   var $341$0 = ___cxa_find_matching_catch(-1, -1,0); $341$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 12: 
   var $342=$__n;
   var $343=$342;
   var $344=_malloc($343);
   $169=$__hd;
   $170=$344;
   var $345=$169;
   var $346=(($345)|0);
   $168=$346;
   var $347=$168;
   var $348=$347;
   $167=$348;
   var $349=$167;
   var $350=(($349)|0);
   var $351=HEAP32[(($350)>>2)];
   $__tmp_i1=$351;
   var $352=$170;
   var $353=(($345)|0);
   $166=$353;
   var $354=$166;
   var $355=$354;
   $165=$355;
   var $356=$165;
   var $357=(($356)|0);
   HEAP32[(($357)>>2)]=$352;
   var $358=$__tmp_i1;
   var $359=(($358)|(0))!=0;
   if ($359) { label = 13; break; } else { label = 16; break; }
  case 13: 
   var $361=(($345)|0);
   $164=$361;
   var $362=$164;
   var $363=$362;
   $163=$363;
   var $364=$163;
   var $365=(($364+4)|0);
   var $366=HEAP32[(($365)>>2)];
   var $367=$__tmp_i1;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$366]($367) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   label = 16; break;
  case 15: 
   var $370$0 = ___cxa_find_matching_catch(-1, -1,0); $370$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 16: 
   $161=$__hd;
   $162=0;
   var $371=$161;
   $160=$371;
   var $372=$160;
   var $373=(($372)|0);
   $159=$373;
   var $374=$159;
   var $375=$374;
   $158=$375;
   var $376=$158;
   var $377=(($376)|0);
   var $378=HEAP32[(($377)>>2)];
   var $379=(($378)|(0))!=0;
   var $380=$379 ^ 1;
   if ($380) { label = 17; break; } else { label = 19; break; }
  case 17: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 7; break; }
  case 18: 
   label = 19; break;
  case 19: 
   $157=$__hd;
   var $384=$157;
   var $385=(($384)|0);
   $156=$385;
   var $386=$156;
   var $387=$386;
   $155=$387;
   var $388=$155;
   var $389=(($388)|0);
   var $390=HEAP32[(($389)>>2)];
   $__db=$390;
   label = 20; break;
  case 20: 
   var $392=$231;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc, $392) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 7; break; }
  case 21: 
   $154=$__loc;
   var $394=$154;
   var $395 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($394, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 60; break; }
  case 22: 
   var $396=$395;
   label = 23; break;
  case 23: 
   $__ct=$396;
   var $398=$__ct;
   var $399=HEAP32[(($__bb)>>2)];
   var $400=HEAP32[(($__bb)>>2)];
   var $401=$__n;
   var $402=(($400+$401)|0);
   var $403=$__db;
   $150=$398;
   $151=$399;
   $152=$402;
   $153=$403;
   var $404=$150;
   var $405=$404;
   var $406=HEAP32[(($405)>>2)];
   var $407=(($406+32)|0);
   var $408=HEAP32[(($407)>>2)];
   var $409=$151;
   var $410=$152;
   var $411=$153;
   var $412 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$408]($404, $409, $410, $411) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 60; break; }
  case 24: 
   label = 25; break;
  case 25: 
   var $414=$__n;
   var $415=(($414)>>>(0)) > 0;
   if ($415) { label = 26; break; } else { var $423 = 0;label = 27; break; }
  case 26: 
   var $417=HEAP32[(($__bb)>>2)];
   var $418=(($417)|0);
   var $419=HEAP8[($418)];
   var $420=(($419 << 24) >> 24);
   var $421=(($420)|(0))==45;
   var $423 = $421;label = 27; break;
  case 27: 
   var $423;
   var $424=(($423)&(1));
   $__neg=$424;
   $149=$__grp;
   var $425=$149;
   $148=$425;
   var $426=$148;
   var $427=$426;
   var $428=(($426)|0);
   $147=$428;
   var $429=$147;
   $146=$429;
   var $430=$146;
   var $431=$430;
   $145=$431;
   var $432=$145;
   var $433=$432;
   $144=$433;
   var $434=$144;
   var $435=(($432)|0);
   $143=$426;
   var $436=$143;
   var $437=(($436)|0);
   $142=$437;
   var $438=$142;
   var $439=$438;
   $141=$439;
   var $440=$141;
   var $441=(($440)|0);
   var $442=(($441)|0);
   var $443=$442;
   var $444=(($443)|0);
   $__a_i_i_i=$444;
   $__i_i_i_i=0;
   label = 28; break;
  case 28: 
   var $446=$__i_i_i_i;
   var $447=(($446)>>>(0)) < 3;
   if ($447) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $449=$__i_i_i_i;
   var $450=$__a_i_i_i;
   var $451=(($450+($449<<2))|0);
   HEAP32[(($451)>>2)]=0;
   var $452=$__i_i_i_i;
   var $453=((($452)+(1))|0);
   $__i_i_i_i=$453;
   label = 28; break;
  case 30: 
   $130=$__sym;
   var $454=$130;
   $129=$454;
   var $455=$129;
   var $456=$455;
   var $457=(($455)|0);
   $128=$457;
   var $458=$128;
   $127=$458;
   var $459=$127;
   var $460=$459;
   $126=$460;
   var $461=$126;
   var $462=$461;
   $125=$462;
   var $463=$125;
   var $464=(($461)|0);
   $124=$455;
   var $465=$124;
   var $466=(($465)|0);
   $123=$466;
   var $467=$123;
   var $468=$467;
   $122=$468;
   var $469=$122;
   var $470=(($469)|0);
   var $471=(($470)|0);
   var $472=$471;
   var $473=(($472)|0);
   $__a_i_i_i5=$473;
   $__i_i_i_i6=0;
   label = 31; break;
  case 31: 
   var $475=$__i_i_i_i6;
   var $476=(($475)>>>(0)) < 3;
   if ($476) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $478=$__i_i_i_i6;
   var $479=$__a_i_i_i5;
   var $480=(($479+($478<<2))|0);
   HEAP32[(($480)>>2)]=0;
   var $481=$__i_i_i_i6;
   var $482=((($481)+(1))|0);
   $__i_i_i_i6=$482;
   label = 31; break;
  case 33: 
   $121=$__sn;
   var $483=$121;
   $120=$483;
   var $484=$120;
   var $485=$484;
   var $486=(($484)|0);
   $119=$486;
   var $487=$119;
   $118=$487;
   var $488=$118;
   var $489=$488;
   $117=$489;
   var $490=$117;
   var $491=$490;
   $116=$491;
   var $492=$116;
   var $493=(($490)|0);
   $115=$484;
   var $494=$115;
   var $495=(($494)|0);
   $114=$495;
   var $496=$114;
   var $497=$496;
   $113=$497;
   var $498=$113;
   var $499=(($498)|0);
   var $500=(($499)|0);
   var $501=$500;
   var $502=(($501)|0);
   $__a_i_i_i8=$502;
   $__i_i_i_i9=0;
   label = 34; break;
  case 34: 
   var $504=$__i_i_i_i9;
   var $505=(($504)>>>(0)) < 3;
   if ($505) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $507=$__i_i_i_i9;
   var $508=$__a_i_i_i8;
   var $509=(($508+($507<<2))|0);
   HEAP32[(($509)>>2)]=0;
   var $510=$__i_i_i_i9;
   var $511=((($510)+(1))|0);
   $__i_i_i_i9=$511;
   label = 34; break;
  case 36: 
   var $512=$230;
   var $513=(($512) & 1);
   var $514=$__neg;
   var $515=(($514) & 1);
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($513, $515, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 61; break; }
  case 37: 
   var $517=(($__mbuf)|0);
   $__mb=$517;
   HEAP32[(($238)>>2)]=272;
   $110=$__hw;
   $111=0;
   $112=$238;
   var $518=$110;
   var $519=$111;
   var $520=$112;
   $107=$518;
   $108=$519;
   $109=$520;
   var $521=$107;
   var $522=(($521)|0);
   var $523=$108;
   var $524=$109;
   $106=$524;
   var $525=$106;
   var $526=HEAP32[(($525)>>2)];
   $103=$522;
   $104=$523;
   $105=$526;
   var $527=$103;
   var $528=$104;
   var $529=$105;
   $100=$527;
   HEAP32[(($101)>>2)]=$528;
   HEAP32[(($102)>>2)]=$529;
   var $530=$100;
   var $531=$530;
   $99=$101;
   var $532=$99;
   var $533=HEAP32[(($532)>>2)];
   $93=$102;
   var $534=$93;
   var $535=HEAP32[(($534)>>2)];
   $96=$531;
   HEAP32[(($97)>>2)]=$533;
   HEAP32[(($98)>>2)]=$535;
   var $536=$96;
   var $537=(($536)|0);
   $95=$97;
   var $538=$95;
   var $539=HEAP32[(($538)>>2)];
   HEAP32[(($537)>>2)]=$539;
   var $540=(($536+4)|0);
   $94=$98;
   var $541=$94;
   var $542=HEAP32[(($541)>>2)];
   HEAP32[(($540)>>2)]=$542;
   var $543=$__n;
   var $544=HEAP32[(($__fd)>>2)];
   var $545=(($543)|(0)) > (($544)|(0));
   if ($545) { label = 38; break; } else { label = 45; break; }
  case 38: 
   var $547=$__n;
   var $548=HEAP32[(($__fd)>>2)];
   var $549=((($547)-($548))|0);
   var $550=($549<<1);
   $82=$__sn;
   var $551=$82;
   $81=$551;
   var $552=$81;
   var $553=(($552)|0);
   $80=$553;
   var $554=$80;
   var $555=$554;
   $79=$555;
   var $556=$79;
   var $557=(($556)|0);
   var $558=(($557)|0);
   var $559=$558;
   var $560=(($559)|0);
   var $561=$560;
   var $562=HEAP8[($561)];
   var $563=(($562)&(255));
   var $564=$563 & 1;
   var $565=(($564)|(0))!=0;
   if ($565) { label = 39; break; } else { label = 40; break; }
  case 39: 
   $75=$551;
   var $567=$75;
   var $568=(($567)|0);
   $74=$568;
   var $569=$74;
   var $570=$569;
   $73=$570;
   var $571=$73;
   var $572=(($571)|0);
   var $573=(($572)|0);
   var $574=$573;
   var $575=(($574+4)|0);
   var $576=HEAP32[(($575)>>2)];
   var $591 = $576;label = 41; break;
  case 40: 
   $78=$551;
   var $578=$78;
   var $579=(($578)|0);
   $77=$579;
   var $580=$77;
   var $581=$580;
   $76=$581;
   var $582=$76;
   var $583=(($582)|0);
   var $584=(($583)|0);
   var $585=$584;
   var $586=(($585)|0);
   var $587=$586;
   var $588=HEAP8[($587)];
   var $589=(($588)&(255));
   var $590=$589 >> 1;
   var $591 = $590;label = 41; break;
  case 41: 
   var $591;
   var $592=((($550)+($591))|0);
   $72=$__sym;
   var $593=$72;
   $71=$593;
   var $594=$71;
   var $595=(($594)|0);
   $70=$595;
   var $596=$70;
   var $597=$596;
   $69=$597;
   var $598=$69;
   var $599=(($598)|0);
   var $600=(($599)|0);
   var $601=$600;
   var $602=(($601)|0);
   var $603=$602;
   var $604=HEAP8[($603)];
   var $605=(($604)&(255));
   var $606=$605 & 1;
   var $607=(($606)|(0))!=0;
   if ($607) { label = 42; break; } else { label = 43; break; }
  case 42: 
   $65=$593;
   var $609=$65;
   var $610=(($609)|0);
   $64=$610;
   var $611=$64;
   var $612=$611;
   $63=$612;
   var $613=$63;
   var $614=(($613)|0);
   var $615=(($614)|0);
   var $616=$615;
   var $617=(($616+4)|0);
   var $618=HEAP32[(($617)>>2)];
   var $633 = $618;label = 44; break;
  case 43: 
   $68=$593;
   var $620=$68;
   var $621=(($620)|0);
   $67=$621;
   var $622=$67;
   var $623=$622;
   $66=$623;
   var $624=$66;
   var $625=(($624)|0);
   var $626=(($625)|0);
   var $627=$626;
   var $628=(($627)|0);
   var $629=$628;
   var $630=HEAP8[($629)];
   var $631=(($630)&(255));
   var $632=$631 >> 1;
   var $633 = $632;label = 44; break;
  case 44: 
   var $633;
   var $634=((($592)+($633))|0);
   var $635=HEAP32[(($__fd)>>2)];
   var $636=((($634)+($635))|0);
   var $637=((($636)+(1))|0);
   var $726 = $637;label = 52; break;
  case 45: 
   $52=$__sn;
   var $639=$52;
   $51=$639;
   var $640=$51;
   var $641=(($640)|0);
   $50=$641;
   var $642=$50;
   var $643=$642;
   $49=$643;
   var $644=$49;
   var $645=(($644)|0);
   var $646=(($645)|0);
   var $647=$646;
   var $648=(($647)|0);
   var $649=$648;
   var $650=HEAP8[($649)];
   var $651=(($650)&(255));
   var $652=$651 & 1;
   var $653=(($652)|(0))!=0;
   if ($653) { label = 46; break; } else { label = 47; break; }
  case 46: 
   $45=$639;
   var $655=$45;
   var $656=(($655)|0);
   $44=$656;
   var $657=$44;
   var $658=$657;
   $43=$658;
   var $659=$43;
   var $660=(($659)|0);
   var $661=(($660)|0);
   var $662=$661;
   var $663=(($662+4)|0);
   var $664=HEAP32[(($663)>>2)];
   var $679 = $664;label = 48; break;
  case 47: 
   $48=$639;
   var $666=$48;
   var $667=(($666)|0);
   $47=$667;
   var $668=$47;
   var $669=$668;
   $46=$669;
   var $670=$46;
   var $671=(($670)|0);
   var $672=(($671)|0);
   var $673=$672;
   var $674=(($673)|0);
   var $675=$674;
   var $676=HEAP8[($675)];
   var $677=(($676)&(255));
   var $678=$677 >> 1;
   var $679 = $678;label = 48; break;
  case 48: 
   var $679;
   $42=$__sym;
   var $680=$42;
   $41=$680;
   var $681=$41;
   var $682=(($681)|0);
   $40=$682;
   var $683=$40;
   var $684=$683;
   $39=$684;
   var $685=$39;
   var $686=(($685)|0);
   var $687=(($686)|0);
   var $688=$687;
   var $689=(($688)|0);
   var $690=$689;
   var $691=HEAP8[($690)];
   var $692=(($691)&(255));
   var $693=$692 & 1;
   var $694=(($693)|(0))!=0;
   if ($694) { label = 49; break; } else { label = 50; break; }
  case 49: 
   $35=$680;
   var $696=$35;
   var $697=(($696)|0);
   $34=$697;
   var $698=$34;
   var $699=$698;
   $33=$699;
   var $700=$33;
   var $701=(($700)|0);
   var $702=(($701)|0);
   var $703=$702;
   var $704=(($703+4)|0);
   var $705=HEAP32[(($704)>>2)];
   var $720 = $705;label = 51; break;
  case 50: 
   $38=$680;
   var $707=$38;
   var $708=(($707)|0);
   $37=$708;
   var $709=$37;
   var $710=$709;
   $36=$710;
   var $711=$36;
   var $712=(($711)|0);
   var $713=(($712)|0);
   var $714=$713;
   var $715=(($714)|0);
   var $716=$715;
   var $717=HEAP8[($716)];
   var $718=(($717)&(255));
   var $719=$718 >> 1;
   var $720 = $719;label = 51; break;
  case 51: 
   var $720;
   var $721=((($679)+($720))|0);
   var $722=HEAP32[(($__fd)>>2)];
   var $723=((($721)+($722))|0);
   var $724=((($723)+(2))|0);
   var $726 = $724;label = 52; break;
  case 52: 
   var $726;
   $__exn=$726;
   var $727=$__exn;
   var $728=(($727)>>>(0)) > 100;
   if ($728) { label = 53; break; } else { label = 68; break; }
  case 53: 
   var $730=$__exn;
   var $731=$730;
   var $732=_malloc($731);
   $31=$__hw;
   $32=$732;
   var $733=$31;
   var $734=(($733)|0);
   $30=$734;
   var $735=$30;
   var $736=$735;
   $29=$736;
   var $737=$29;
   var $738=(($737)|0);
   var $739=HEAP32[(($738)>>2)];
   $__tmp_i18=$739;
   var $740=$32;
   var $741=(($733)|0);
   $28=$741;
   var $742=$28;
   var $743=$742;
   $27=$743;
   var $744=$27;
   var $745=(($744)|0);
   HEAP32[(($745)>>2)]=$740;
   var $746=$__tmp_i18;
   var $747=(($746)|(0))!=0;
   if ($747) { label = 54; break; } else { label = 57; break; }
  case 54: 
   var $749=(($733)|0);
   $26=$749;
   var $750=$26;
   var $751=$750;
   $25=$751;
   var $752=$25;
   var $753=(($752+4)|0);
   var $754=HEAP32[(($753)>>2)];
   var $755=$__tmp_i18;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$754]($755) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 56; break; }
  case 55: 
   label = 57; break;
  case 56: 
   var $758$0 = ___cxa_find_matching_catch(-1, -1,0); $758$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 57: 
   $24=$__hw;
   var $759=$24;
   var $760=(($759)|0);
   $23=$760;
   var $761=$23;
   var $762=$761;
   $22=$762;
   var $763=$22;
   var $764=(($763)|0);
   var $765=HEAP32[(($764)>>2)];
   $__mb=$765;
   var $766=$__mb;
   var $767=(($766)|(0))==0;
   if ($767) { label = 58; break; } else { label = 67; break; }
  case 58: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 59; break; } else { label = 62; break; }
  case 59: 
   label = 67; break;
  case 60: 
   var $771$0 = ___cxa_find_matching_catch(-1, -1); $771$1 = tempRet0;
   var $772=$771$0;
   $236=$772;
   var $773=$771$1;
   $237=$773;
   label = 85; break;
  case 61: 
   var $775$0 = ___cxa_find_matching_catch(-1, -1); $775$1 = tempRet0;
   var $776=$775$0;
   $236=$776;
   var $777=$775$1;
   $237=$777;
   label = 84; break;
  case 62: 
   var $779$0 = ___cxa_find_matching_catch(-1, -1); $779$1 = tempRet0;
   var $780=$779$0;
   $236=$780;
   var $781=$779$1;
   $237=$781;
   $21=$__hw;
   var $782=$21;
   $20=$782;
   var $783=$20;
   $18=$783;
   $19=0;
   var $784=$18;
   var $785=(($784)|0);
   $17=$785;
   var $786=$17;
   var $787=$786;
   $16=$787;
   var $788=$16;
   var $789=(($788)|0);
   var $790=HEAP32[(($789)>>2)];
   $__tmp_i_i_i20=$790;
   var $791=$19;
   var $792=(($784)|0);
   $15=$792;
   var $793=$15;
   var $794=$793;
   $14=$794;
   var $795=$14;
   var $796=(($795)|0);
   HEAP32[(($796)>>2)]=$791;
   var $797=$__tmp_i_i_i20;
   var $798=(($797)|(0))!=0;
   if ($798) { label = 63; break; } else { label = 66; break; }
  case 63: 
   var $800=(($784)|0);
   $13=$800;
   var $801=$13;
   var $802=$801;
   $12=$802;
   var $803=$12;
   var $804=(($803+4)|0);
   var $805=HEAP32[(($804)>>2)];
   var $806=$__tmp_i_i_i20;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$805]($806) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 64; break; } else { label = 65; break; }
  case 64: 
   label = 66; break;
  case 65: 
   var $809$0 = ___cxa_find_matching_catch(-1, -1,0); $809$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 66: 
   label = 84; break;
  case 67: 
   label = 68; break;
  case 68: 
   var $812=$__mb;
   var $813=$231;
   $11=$813;
   var $814=$11;
   var $815=(($814+4)|0);
   var $816=HEAP32[(($815)>>2)];
   label = 69; break;
  case 69: 
   var $818=$__db;
   var $819=$__db;
   var $820=$__n;
   var $821=(($819+$820)|0);
   var $822=$__ct;
   var $823=$__neg;
   var $824=(($823) & 1);
   var $825=HEAP8[($__dp)];
   var $826=HEAP8[($__ts)];
   var $827=HEAP32[(($__fd)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($812, $__mi, $__me, $816, $818, $821, $822, $824, $__pat, $825, $826, $__grp, $__sym, $__sn, $827) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 70; break; } else { label = 62; break; }
  case 70: 
   var $829=$239;
   var $830=$__s;
   assert(4 % 1 === 0);HEAP32[(($829)>>2)]=HEAP32[(($830)>>2)];
   var $831=$__mb;
   var $832=HEAP32[(($__mi)>>2)];
   var $833=HEAP32[(($__me)>>2)];
   var $834=$231;
   var $835=$232;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $239, $831, $832, $833, $834, $835) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 71; break; } else { label = 62; break; }
  case 71: 
   $240=1;
   $10=$__hw;
   var $837=$10;
   $9=$837;
   var $838=$9;
   $7=$838;
   $8=0;
   var $839=$7;
   var $840=(($839)|0);
   $6=$840;
   var $841=$6;
   var $842=$841;
   $5=$842;
   var $843=$5;
   var $844=(($843)|0);
   var $845=HEAP32[(($844)>>2)];
   $__tmp_i_i_i22=$845;
   var $846=$8;
   var $847=(($839)|0);
   $4=$847;
   var $848=$4;
   var $849=$848;
   $3=$849;
   var $850=$3;
   var $851=(($850)|0);
   HEAP32[(($851)>>2)]=$846;
   var $852=$__tmp_i_i_i22;
   var $853=(($852)|(0))!=0;
   if ($853) { label = 72; break; } else { label = 75; break; }
  case 72: 
   var $855=(($839)|0);
   $2=$855;
   var $856=$2;
   var $857=$856;
   $1=$857;
   var $858=$1;
   var $859=(($858+4)|0);
   var $860=HEAP32[(($859)>>2)];
   var $861=$__tmp_i_i_i22;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$860]($861) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 73; break; } else { label = 74; break; }
  case 73: 
   label = 75; break;
  case 74: 
   var $864$0 = ___cxa_find_matching_catch(-1, -1,0); $864$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 75: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   __ZNSt3__16localeD2Ev($__loc);
   $62=$__hd;
   var $865=$62;
   $61=$865;
   var $866=$61;
   $59=$866;
   $60=0;
   var $867=$59;
   var $868=(($867)|0);
   $58=$868;
   var $869=$58;
   var $870=$869;
   $57=$870;
   var $871=$57;
   var $872=(($871)|0);
   var $873=HEAP32[(($872)>>2)];
   $__tmp_i_i_i14=$873;
   var $874=$60;
   var $875=(($867)|0);
   $56=$875;
   var $876=$56;
   var $877=$876;
   $55=$877;
   var $878=$55;
   var $879=(($878)|0);
   HEAP32[(($879)>>2)]=$874;
   var $880=$__tmp_i_i_i14;
   var $881=(($880)|(0))!=0;
   if ($881) { label = 76; break; } else { label = 79; break; }
  case 76: 
   var $883=(($867)|0);
   $54=$883;
   var $884=$54;
   var $885=$884;
   $53=$885;
   var $886=$53;
   var $887=(($886+4)|0);
   var $888=HEAP32[(($887)>>2)];
   var $889=$__tmp_i_i_i14;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$888]($889) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 77; break; } else { label = 78; break; }
  case 77: 
   label = 79; break;
  case 78: 
   var $892$0 = ___cxa_find_matching_catch(-1, -1,0); $892$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 79: 
   $92=$__hn;
   var $893=$92;
   $91=$893;
   var $894=$91;
   $89=$894;
   $90=0;
   var $895=$89;
   var $896=(($895)|0);
   $88=$896;
   var $897=$88;
   var $898=$897;
   $87=$898;
   var $899=$87;
   var $900=(($899)|0);
   var $901=HEAP32[(($900)>>2)];
   $__tmp_i_i_i11=$901;
   var $902=$90;
   var $903=(($895)|0);
   $86=$903;
   var $904=$86;
   var $905=$904;
   $85=$905;
   var $906=$85;
   var $907=(($906)|0);
   HEAP32[(($907)>>2)]=$902;
   var $908=$__tmp_i_i_i11;
   var $909=(($908)|(0))!=0;
   if ($909) { label = 80; break; } else { label = 83; break; }
  case 80: 
   var $911=(($895)|0);
   $84=$911;
   var $912=$84;
   var $913=$912;
   $83=$913;
   var $914=$83;
   var $915=(($914+4)|0);
   var $916=HEAP32[(($915)>>2)];
   var $917=$__tmp_i_i_i11;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$916]($917) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 81; break; } else { label = 82; break; }
  case 81: 
   label = 83; break;
  case 82: 
   var $920$0 = ___cxa_find_matching_catch(-1, -1,0); $920$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 83: 
   STACKTOP = __stackBase__;
   return;
  case 84: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   label = 85; break;
  case 85: 
   __ZNSt3__16localeD2Ev($__loc);
   label = 86; break;
  case 86: 
   $140=$__hd;
   var $924=$140;
   $139=$924;
   var $925=$139;
   $137=$925;
   $138=0;
   var $926=$137;
   var $927=(($926)|0);
   $136=$927;
   var $928=$136;
   var $929=$928;
   $135=$929;
   var $930=$135;
   var $931=(($930)|0);
   var $932=HEAP32[(($931)>>2)];
   $__tmp_i_i_i3=$932;
   var $933=$138;
   var $934=(($926)|0);
   $134=$934;
   var $935=$134;
   var $936=$935;
   $133=$936;
   var $937=$133;
   var $938=(($937)|0);
   HEAP32[(($938)>>2)]=$933;
   var $939=$__tmp_i_i_i3;
   var $940=(($939)|(0))!=0;
   if ($940) { label = 87; break; } else { label = 90; break; }
  case 87: 
   var $942=(($926)|0);
   $132=$942;
   var $943=$132;
   var $944=$943;
   $131=$944;
   var $945=$131;
   var $946=(($945+4)|0);
   var $947=HEAP32[(($946)>>2)];
   var $948=$__tmp_i_i_i3;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$947]($948) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 88; break; } else { label = 89; break; }
  case 88: 
   label = 90; break;
  case 89: 
   var $951$0 = ___cxa_find_matching_catch(-1, -1,0); $951$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 90: 
   $208=$__hn;
   var $952=$208;
   $207=$952;
   var $953=$207;
   $205=$953;
   $206=0;
   var $954=$205;
   var $955=(($954)|0);
   $204=$955;
   var $956=$204;
   var $957=$956;
   $203=$957;
   var $958=$203;
   var $959=(($958)|0);
   var $960=HEAP32[(($959)>>2)];
   $__tmp_i_i_i=$960;
   var $961=$206;
   var $962=(($954)|0);
   $202=$962;
   var $963=$202;
   var $964=$963;
   $201=$964;
   var $965=$201;
   var $966=(($965)|0);
   HEAP32[(($966)>>2)]=$961;
   var $967=$__tmp_i_i_i;
   var $968=(($967)|(0))!=0;
   if ($968) { label = 91; break; } else { label = 94; break; }
  case 91: 
   var $970=(($954)|0);
   $200=$970;
   var $971=$200;
   var $972=$971;
   $199=$972;
   var $973=$199;
   var $974=(($973+4)|0);
   var $975=HEAP32[(($974)>>2)];
   var $976=$__tmp_i_i_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$975]($976) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 92; break; } else { label = 93; break; }
  case 92: 
   label = 94; break;
  case 93: 
   var $979$0 = ___cxa_find_matching_catch(-1, -1,0); $979$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 94: 
   label = 95; break;
  case 95: 
   var $981=$236;
   var $982=$237;
   var $983$0=$981;
   var $983$1=0;
   var $984$0=$983$0;
   var $984$1=$982;
   ___resumeException($984$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 544)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16=__stackBase__;
   var $17;
   var $18;
   var $19=(__stackBase__)+(8);
   var $20;
   var $21;
   var $22;
   var $__a_i_i_i56;
   var $__i_i_i_i57;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46=(__stackBase__)+(16);
   var $47=(__stackBase__)+(24);
   var $48;
   var $49;
   var $50=(__stackBase__)+(32);
   var $51;
   var $52;
   var $53=(__stackBase__)+(40);
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69=(__stackBase__)+(48);
   var $70;
   var $71;
   var $72=(__stackBase__)+(56);
   var $73;
   var $74;
   var $75;
   var $__a_i_i_i47;
   var $__i_i_i_i48;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99=(__stackBase__)+(64);
   var $100=(__stackBase__)+(72);
   var $101;
   var $102;
   var $103=(__stackBase__)+(80);
   var $104;
   var $105;
   var $106=(__stackBase__)+(88);
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $122;
   var $123;
   var $124=(__stackBase__)+(96);
   var $125;
   var $126;
   var $127=(__stackBase__)+(104);
   var $128;
   var $129;
   var $130;
   var $__a_i_i_i38;
   var $__i_i_i_i39;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154=(__stackBase__)+(112);
   var $155=(__stackBase__)+(120);
   var $156;
   var $157;
   var $158=(__stackBase__)+(128);
   var $159;
   var $160;
   var $161=(__stackBase__)+(136);
   var $162;
   var $163;
   var $164;
   var $165;
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177;
   var $178=(__stackBase__)+(144);
   var $179;
   var $180;
   var $181=(__stackBase__)+(152);
   var $182;
   var $183;
   var $184;
   var $__a_i_i_i29;
   var $__i_i_i_i30;
   var $185;
   var $186;
   var $187;
   var $188;
   var $189;
   var $190;
   var $191;
   var $192;
   var $193;
   var $194;
   var $195;
   var $196;
   var $197;
   var $198;
   var $199;
   var $200;
   var $201;
   var $202;
   var $203;
   var $204;
   var $205;
   var $206;
   var $207;
   var $208=(__stackBase__)+(160);
   var $209=(__stackBase__)+(168);
   var $210;
   var $211;
   var $212=(__stackBase__)+(176);
   var $213;
   var $214;
   var $215=(__stackBase__)+(184);
   var $216;
   var $217;
   var $218;
   var $219;
   var $220;
   var $221;
   var $222;
   var $223;
   var $224;
   var $225;
   var $226;
   var $227;
   var $228;
   var $229;
   var $230;
   var $231;
   var $232;
   var $233;
   var $234=(__stackBase__)+(192);
   var $235;
   var $236;
   var $237=(__stackBase__)+(200);
   var $238;
   var $239;
   var $240;
   var $__a_i_i_i20;
   var $__i_i_i_i21;
   var $241;
   var $242;
   var $243;
   var $244;
   var $245;
   var $246;
   var $247;
   var $248;
   var $249;
   var $250;
   var $251;
   var $252;
   var $253;
   var $254;
   var $255;
   var $256;
   var $257;
   var $258;
   var $259;
   var $260;
   var $261;
   var $262;
   var $263;
   var $264=(__stackBase__)+(208);
   var $265=(__stackBase__)+(216);
   var $266;
   var $267;
   var $268=(__stackBase__)+(224);
   var $269;
   var $270;
   var $271=(__stackBase__)+(232);
   var $272;
   var $273;
   var $274;
   var $275;
   var $276;
   var $277;
   var $278;
   var $279;
   var $280;
   var $281;
   var $282;
   var $283;
   var $284;
   var $285;
   var $286;
   var $287=(__stackBase__)+(240);
   var $288;
   var $289;
   var $290=(__stackBase__)+(248);
   var $291;
   var $292;
   var $293;
   var $__a_i_i_i11;
   var $__i_i_i_i12;
   var $294;
   var $295;
   var $296;
   var $297;
   var $298;
   var $299;
   var $300;
   var $301;
   var $302;
   var $303;
   var $304;
   var $305;
   var $306;
   var $307;
   var $308;
   var $309;
   var $310;
   var $311;
   var $312;
   var $313;
   var $314;
   var $315;
   var $316;
   var $317=(__stackBase__)+(256);
   var $318=(__stackBase__)+(264);
   var $319;
   var $320;
   var $321=(__stackBase__)+(272);
   var $322;
   var $323;
   var $324=(__stackBase__)+(280);
   var $325;
   var $326;
   var $327;
   var $328;
   var $329;
   var $330;
   var $331;
   var $332;
   var $333;
   var $334;
   var $335;
   var $336;
   var $337;
   var $338;
   var $339;
   var $340;
   var $341;
   var $342=(__stackBase__)+(288);
   var $343;
   var $344;
   var $345=(__stackBase__)+(296);
   var $346;
   var $347;
   var $348;
   var $__a_i_i_i2;
   var $__i_i_i_i3;
   var $349;
   var $350;
   var $351;
   var $352;
   var $353;
   var $354;
   var $355;
   var $356;
   var $357;
   var $358;
   var $359;
   var $360;
   var $361;
   var $362;
   var $363;
   var $364;
   var $365;
   var $366;
   var $367;
   var $368;
   var $369;
   var $370;
   var $371;
   var $372=(__stackBase__)+(304);
   var $373=(__stackBase__)+(312);
   var $374;
   var $375;
   var $376=(__stackBase__)+(320);
   var $377;
   var $378;
   var $379=(__stackBase__)+(328);
   var $380;
   var $381;
   var $382;
   var $383;
   var $384;
   var $385;
   var $386;
   var $387;
   var $388;
   var $389;
   var $390;
   var $391;
   var $392;
   var $393;
   var $394;
   var $395;
   var $396=(__stackBase__)+(336);
   var $397;
   var $398;
   var $399=(__stackBase__)+(344);
   var $400;
   var $401;
   var $402;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $403;
   var $404;
   var $405;
   var $406;
   var $407;
   var $408;
   var $409;
   var $410;
   var $411;
   var $412;
   var $413;
   var $414;
   var $415;
   var $416;
   var $417;
   var $418;
   var $419;
   var $420;
   var $421;
   var $422;
   var $423;
   var $424;
   var $425;
   var $426=(__stackBase__)+(352);
   var $427=(__stackBase__)+(360);
   var $428;
   var $429;
   var $430=(__stackBase__)+(368);
   var $431;
   var $432;
   var $433=(__stackBase__)+(376);
   var $434;
   var $435;
   var $436;
   var $437;
   var $438;
   var $439;
   var $440;
   var $441;
   var $442;
   var $443;
   var $444;
   var $445;
   var $446;
   var $__mp;
   var $447=(__stackBase__)+(384);
   var $448=(__stackBase__)+(392);
   var $449=(__stackBase__)+(408);
   var $450=(__stackBase__)+(416);
   var $451=(__stackBase__)+(432);
   var $452=(__stackBase__)+(448);
   var $__mp1;
   var $453=(__stackBase__)+(464);
   var $454=(__stackBase__)+(472);
   var $455=(__stackBase__)+(488);
   var $456=(__stackBase__)+(496);
   var $457=(__stackBase__)+(512);
   var $458=(__stackBase__)+(528);
   var $459=(($__intl)&(1));
   $437=$459;
   var $460=(($__neg)&(1));
   $438=$460;
   $439=$__loc;
   $440=$__pat;
   $441=$__dp;
   $442=$__ts;
   $443=$__grp;
   $444=$__sym;
   $445=$__sn;
   $446=$__fd;
   var $461=$437;
   var $462=(($461) & 1);
   if ($462) { label = 2; break; } else { label = 38; break; }
  case 2: 
   var $464=$439;
   $436=$464;
   var $465=$436;
   var $466=__ZNKSt3__16locale9use_facetERNS0_2idE($465, 20328);
   var $467=$466;
   $__mp=$467;
   var $468=$438;
   var $469=(($468) & 1);
   if ($469) { label = 3; break; } else { label = 12; break; }
  case 3: 
   var $471=$440;
   var $472=$__mp;
   $435=$472;
   var $473=$435;
   var $474=$473;
   var $475=HEAP32[(($474)>>2)];
   var $476=(($475+44)|0);
   var $477=HEAP32[(($476)>>2)];
   FUNCTION_TABLE[$477]($447, $473);
   var $478=$471;
   var $479=$447;
   assert(4 % 1 === 0);HEAP8[($478)]=HEAP8[($479)];HEAP8[((($478)+(1))|0)]=HEAP8[((($479)+(1))|0)];HEAP8[((($478)+(2))|0)]=HEAP8[((($479)+(2))|0)];HEAP8[((($478)+(3))|0)]=HEAP8[((($479)+(3))|0)];
   var $480=$445;
   var $481=$__mp;
   $434=$481;
   var $482=$434;
   var $483=$482;
   var $484=HEAP32[(($483)>>2)];
   var $485=(($484+32)|0);
   var $486=HEAP32[(($485)>>2)];
   FUNCTION_TABLE[$486]($448, $482);
   $431=$480;
   $432=$448;
   var $487=$431;
   var $488=$432;
   var $tmp_i=$430;
   var $tmp1_i=$433;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $428=$487;
   $429=$488;
   var $489=$428;
   $425=$489;
   var $490=$425;
   $424=$490;
   var $491=$424;
   $405=$490;
   var $492=$405;
   var $493=(($492)|0);
   $404=$493;
   var $494=$404;
   var $495=$494;
   $403=$495;
   var $496=$403;
   var $497=(($496)|0);
   var $498=(($497)|0);
   var $499=$498;
   var $500=(($499)|0);
   var $501=$500;
   var $502=HEAP8[($501)];
   var $503=(($502)&(255));
   var $504=$503 & 1;
   var $505=(($504)|(0))!=0;
   if ($505) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $408=$490;
   var $507=$408;
   var $508=(($507)|0);
   $407=$508;
   var $509=$407;
   var $510=$509;
   $406=$510;
   var $511=$406;
   var $512=(($511)|0);
   var $513=(($512)|0);
   var $514=$513;
   var $515=(($514+8)|0);
   var $516=HEAP32[(($515)>>2)];
   HEAP8[($426)]=0;
   $409=$516;
   $410=$426;
   var $517=$410;
   var $518=HEAP8[($517)];
   var $519=$409;
   HEAP8[($519)]=$518;
   $413=$490;
   $414=0;
   var $520=$413;
   var $521=$414;
   var $522=(($520)|0);
   $412=$522;
   var $523=$412;
   var $524=$523;
   $411=$524;
   var $525=$411;
   var $526=(($525)|0);
   var $527=(($526)|0);
   var $528=$527;
   var $529=(($528+4)|0);
   HEAP32[(($529)>>2)]=$521;
   label = 6; break;
  case 5: 
   $417=$490;
   var $531=$417;
   var $532=(($531)|0);
   $416=$532;
   var $533=$416;
   var $534=$533;
   $415=$534;
   var $535=$415;
   var $536=(($535)|0);
   var $537=(($536)|0);
   var $538=$537;
   var $539=(($538+1)|0);
   var $540=(($539)|0);
   HEAP8[($427)]=0;
   $418=$540;
   $419=$427;
   var $541=$419;
   var $542=HEAP8[($541)];
   var $543=$418;
   HEAP8[($543)]=$542;
   $422=$490;
   $423=0;
   var $544=$422;
   var $545=$423;
   var $546=$545 << 1;
   var $547=(($546) & 255);
   var $548=(($544)|0);
   $421=$548;
   var $549=$421;
   var $550=$549;
   $420=$550;
   var $551=$420;
   var $552=(($551)|0);
   var $553=(($552)|0);
   var $554=$553;
   var $555=(($554)|0);
   var $556=$555;
   HEAP8[($556)]=$547;
   label = 6; break;
  case 6: 
   $382=$489;
   var $557=$382;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($557, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $559$0 = ___cxa_find_matching_catch(-1, -1,0); $559$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 8: 
   var $560=(($489)|0);
   $384=$560;
   var $561=$384;
   var $562=$561;
   $383=$562;
   var $563=$383;
   var $564=(($563)|0);
   var $565=$429;
   var $566=(($565)|0);
   $386=$566;
   var $567=$386;
   var $568=$567;
   $385=$568;
   var $569=$385;
   var $570=(($569)|0);
   var $571=$564;
   var $572=$570;
   assert(12 % 1 === 0);HEAP32[(($571)>>2)]=HEAP32[(($572)>>2)];HEAP32[((($571)+(4))>>2)]=HEAP32[((($572)+(4))>>2)];HEAP32[((($571)+(8))>>2)]=HEAP32[((($572)+(8))>>2)];
   var $573=$429;
   $397=$489;
   $398=$573;
   var $574=$397;
   var $575=$398;
   var $tmp_i_i_i=$396;
   var $tmp1_i_i_i=$399;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
   $394=$574;
   $395=$575;
   var $576=$394;
   $393=$576;
   var $577=$393;
   var $578=(($577)|0);
   $392=$578;
   var $579=$392;
   var $580=$579;
   $391=$580;
   var $581=$391;
   var $582=$581;
   var $583=$395;
   $389=$583;
   var $584=$389;
   var $585=(($584)|0);
   $388=$585;
   var $586=$388;
   var $587=$586;
   $387=$587;
   var $588=$387;
   var $589=$588;
   $390=$589;
   var $590=$390;
   var $591=$429;
   $402=$591;
   var $592=$402;
   var $593=(($592)|0);
   $401=$593;
   var $594=$401;
   var $595=$594;
   $400=$595;
   var $596=$400;
   var $597=(($596)|0);
   var $598=(($597)|0);
   var $599=$598;
   var $600=(($599)|0);
   $__a_i_i_i=$600;
   $__i_i_i_i=0;
   label = 9; break;
  case 9: 
   var $602=$__i_i_i_i;
   var $603=(($602)>>>(0)) < 3;
   if ($603) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $605=$__i_i_i_i;
   var $606=$__a_i_i_i;
   var $607=(($606+($605<<2))|0);
   HEAP32[(($607)>>2)]=0;
   var $608=$__i_i_i_i;
   var $609=((($608)+(1))|0);
   $__i_i_i_i=$609;
   label = 9; break;
  case 11: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($448);
   label = 21; break;
  case 12: 
   var $611=$440;
   var $612=$__mp;
   $381=$612;
   var $613=$381;
   var $614=$613;
   var $615=HEAP32[(($614)>>2)];
   var $616=(($615+40)|0);
   var $617=HEAP32[(($616)>>2)];
   FUNCTION_TABLE[$617]($449, $613);
   var $618=$611;
   var $619=$449;
   assert(4 % 1 === 0);HEAP8[($618)]=HEAP8[($619)];HEAP8[((($618)+(1))|0)]=HEAP8[((($619)+(1))|0)];HEAP8[((($618)+(2))|0)]=HEAP8[((($619)+(2))|0)];HEAP8[((($618)+(3))|0)]=HEAP8[((($619)+(3))|0)];
   var $620=$445;
   var $621=$__mp;
   $380=$621;
   var $622=$380;
   var $623=$622;
   var $624=HEAP32[(($623)>>2)];
   var $625=(($624+28)|0);
   var $626=HEAP32[(($625)>>2)];
   FUNCTION_TABLE[$626]($450, $622);
   $377=$620;
   $378=$450;
   var $627=$377;
   var $628=$378;
   var $tmp_i4=$376;
   var $tmp1_i5=$379;
   assert(1 % 1 === 0);HEAP8[($tmp_i4)]=HEAP8[($tmp1_i5)];
   $374=$627;
   $375=$628;
   var $629=$374;
   $371=$629;
   var $630=$371;
   $370=$630;
   var $631=$370;
   $351=$630;
   var $632=$351;
   var $633=(($632)|0);
   $350=$633;
   var $634=$350;
   var $635=$634;
   $349=$635;
   var $636=$349;
   var $637=(($636)|0);
   var $638=(($637)|0);
   var $639=$638;
   var $640=(($639)|0);
   var $641=$640;
   var $642=HEAP8[($641)];
   var $643=(($642)&(255));
   var $644=$643 & 1;
   var $645=(($644)|(0))!=0;
   if ($645) { label = 13; break; } else { label = 14; break; }
  case 13: 
   $354=$630;
   var $647=$354;
   var $648=(($647)|0);
   $353=$648;
   var $649=$353;
   var $650=$649;
   $352=$650;
   var $651=$352;
   var $652=(($651)|0);
   var $653=(($652)|0);
   var $654=$653;
   var $655=(($654+8)|0);
   var $656=HEAP32[(($655)>>2)];
   HEAP8[($372)]=0;
   $355=$656;
   $356=$372;
   var $657=$356;
   var $658=HEAP8[($657)];
   var $659=$355;
   HEAP8[($659)]=$658;
   $359=$630;
   $360=0;
   var $660=$359;
   var $661=$360;
   var $662=(($660)|0);
   $358=$662;
   var $663=$358;
   var $664=$663;
   $357=$664;
   var $665=$357;
   var $666=(($665)|0);
   var $667=(($666)|0);
   var $668=$667;
   var $669=(($668+4)|0);
   HEAP32[(($669)>>2)]=$661;
   label = 15; break;
  case 14: 
   $363=$630;
   var $671=$363;
   var $672=(($671)|0);
   $362=$672;
   var $673=$362;
   var $674=$673;
   $361=$674;
   var $675=$361;
   var $676=(($675)|0);
   var $677=(($676)|0);
   var $678=$677;
   var $679=(($678+1)|0);
   var $680=(($679)|0);
   HEAP8[($373)]=0;
   $364=$680;
   $365=$373;
   var $681=$365;
   var $682=HEAP8[($681)];
   var $683=$364;
   HEAP8[($683)]=$682;
   $368=$630;
   $369=0;
   var $684=$368;
   var $685=$369;
   var $686=$685 << 1;
   var $687=(($686) & 255);
   var $688=(($684)|0);
   $367=$688;
   var $689=$367;
   var $690=$689;
   $366=$690;
   var $691=$366;
   var $692=(($691)|0);
   var $693=(($692)|0);
   var $694=$693;
   var $695=(($694)|0);
   var $696=$695;
   HEAP8[($696)]=$687;
   label = 15; break;
  case 15: 
   $328=$629;
   var $697=$328;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($697, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $699$0 = ___cxa_find_matching_catch(-1, -1,0); $699$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 17: 
   var $700=(($629)|0);
   $330=$700;
   var $701=$330;
   var $702=$701;
   $329=$702;
   var $703=$329;
   var $704=(($703)|0);
   var $705=$375;
   var $706=(($705)|0);
   $332=$706;
   var $707=$332;
   var $708=$707;
   $331=$708;
   var $709=$331;
   var $710=(($709)|0);
   var $711=$704;
   var $712=$710;
   assert(12 % 1 === 0);HEAP32[(($711)>>2)]=HEAP32[(($712)>>2)];HEAP32[((($711)+(4))>>2)]=HEAP32[((($712)+(4))>>2)];HEAP32[((($711)+(8))>>2)]=HEAP32[((($712)+(8))>>2)];
   var $713=$375;
   $343=$629;
   $344=$713;
   var $714=$343;
   var $715=$344;
   var $tmp_i_i_i7=$342;
   var $tmp1_i_i_i8=$345;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i7)]=HEAP8[($tmp1_i_i_i8)];
   $340=$714;
   $341=$715;
   var $716=$340;
   $339=$716;
   var $717=$339;
   var $718=(($717)|0);
   $338=$718;
   var $719=$338;
   var $720=$719;
   $337=$720;
   var $721=$337;
   var $722=$721;
   var $723=$341;
   $335=$723;
   var $724=$335;
   var $725=(($724)|0);
   $334=$725;
   var $726=$334;
   var $727=$726;
   $333=$727;
   var $728=$333;
   var $729=$728;
   $336=$729;
   var $730=$336;
   var $731=$375;
   $348=$731;
   var $732=$348;
   var $733=(($732)|0);
   $347=$733;
   var $734=$347;
   var $735=$734;
   $346=$735;
   var $736=$346;
   var $737=(($736)|0);
   var $738=(($737)|0);
   var $739=$738;
   var $740=(($739)|0);
   $__a_i_i_i2=$740;
   $__i_i_i_i3=0;
   label = 18; break;
  case 18: 
   var $742=$__i_i_i_i3;
   var $743=(($742)>>>(0)) < 3;
   if ($743) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $745=$__i_i_i_i3;
   var $746=$__a_i_i_i2;
   var $747=(($746+($745<<2))|0);
   HEAP32[(($747)>>2)]=0;
   var $748=$__i_i_i_i3;
   var $749=((($748)+(1))|0);
   $__i_i_i_i3=$749;
   label = 18; break;
  case 20: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($450);
   label = 21; break;
  case 21: 
   var $751=$__mp;
   $327=$751;
   var $752=$327;
   var $753=$752;
   var $754=HEAP32[(($753)>>2)];
   var $755=(($754+12)|0);
   var $756=HEAP32[(($755)>>2)];
   var $757=FUNCTION_TABLE[$756]($752);
   var $758=$441;
   HEAP8[($758)]=$757;
   var $759=$__mp;
   $326=$759;
   var $760=$326;
   var $761=$760;
   var $762=HEAP32[(($761)>>2)];
   var $763=(($762+16)|0);
   var $764=HEAP32[(($763)>>2)];
   var $765=FUNCTION_TABLE[$764]($760);
   var $766=$442;
   HEAP8[($766)]=$765;
   var $767=$443;
   var $768=$__mp;
   $325=$768;
   var $769=$325;
   var $770=$769;
   var $771=HEAP32[(($770)>>2)];
   var $772=(($771+20)|0);
   var $773=HEAP32[(($772)>>2)];
   FUNCTION_TABLE[$773]($451, $769);
   $322=$767;
   $323=$451;
   var $774=$322;
   var $775=$323;
   var $tmp_i13=$321;
   var $tmp1_i14=$324;
   assert(1 % 1 === 0);HEAP8[($tmp_i13)]=HEAP8[($tmp1_i14)];
   $319=$774;
   $320=$775;
   var $776=$319;
   $316=$776;
   var $777=$316;
   $315=$777;
   var $778=$315;
   $296=$777;
   var $779=$296;
   var $780=(($779)|0);
   $295=$780;
   var $781=$295;
   var $782=$781;
   $294=$782;
   var $783=$294;
   var $784=(($783)|0);
   var $785=(($784)|0);
   var $786=$785;
   var $787=(($786)|0);
   var $788=$787;
   var $789=HEAP8[($788)];
   var $790=(($789)&(255));
   var $791=$790 & 1;
   var $792=(($791)|(0))!=0;
   if ($792) { label = 22; break; } else { label = 23; break; }
  case 22: 
   $299=$777;
   var $794=$299;
   var $795=(($794)|0);
   $298=$795;
   var $796=$298;
   var $797=$796;
   $297=$797;
   var $798=$297;
   var $799=(($798)|0);
   var $800=(($799)|0);
   var $801=$800;
   var $802=(($801+8)|0);
   var $803=HEAP32[(($802)>>2)];
   HEAP8[($317)]=0;
   $300=$803;
   $301=$317;
   var $804=$301;
   var $805=HEAP8[($804)];
   var $806=$300;
   HEAP8[($806)]=$805;
   $304=$777;
   $305=0;
   var $807=$304;
   var $808=$305;
   var $809=(($807)|0);
   $303=$809;
   var $810=$303;
   var $811=$810;
   $302=$811;
   var $812=$302;
   var $813=(($812)|0);
   var $814=(($813)|0);
   var $815=$814;
   var $816=(($815+4)|0);
   HEAP32[(($816)>>2)]=$808;
   label = 24; break;
  case 23: 
   $308=$777;
   var $818=$308;
   var $819=(($818)|0);
   $307=$819;
   var $820=$307;
   var $821=$820;
   $306=$821;
   var $822=$306;
   var $823=(($822)|0);
   var $824=(($823)|0);
   var $825=$824;
   var $826=(($825+1)|0);
   var $827=(($826)|0);
   HEAP8[($318)]=0;
   $309=$827;
   $310=$318;
   var $828=$310;
   var $829=HEAP8[($828)];
   var $830=$309;
   HEAP8[($830)]=$829;
   $313=$777;
   $314=0;
   var $831=$313;
   var $832=$314;
   var $833=$832 << 1;
   var $834=(($833) & 255);
   var $835=(($831)|0);
   $312=$835;
   var $836=$312;
   var $837=$836;
   $311=$837;
   var $838=$311;
   var $839=(($838)|0);
   var $840=(($839)|0);
   var $841=$840;
   var $842=(($841)|0);
   var $843=$842;
   HEAP8[($843)]=$834;
   label = 24; break;
  case 24: 
   $273=$776;
   var $844=$273;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($844, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $846$0 = ___cxa_find_matching_catch(-1, -1,0); $846$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 26: 
   var $847=(($776)|0);
   $275=$847;
   var $848=$275;
   var $849=$848;
   $274=$849;
   var $850=$274;
   var $851=(($850)|0);
   var $852=$320;
   var $853=(($852)|0);
   $277=$853;
   var $854=$277;
   var $855=$854;
   $276=$855;
   var $856=$276;
   var $857=(($856)|0);
   var $858=$851;
   var $859=$857;
   assert(12 % 1 === 0);HEAP32[(($858)>>2)]=HEAP32[(($859)>>2)];HEAP32[((($858)+(4))>>2)]=HEAP32[((($859)+(4))>>2)];HEAP32[((($858)+(8))>>2)]=HEAP32[((($859)+(8))>>2)];
   var $860=$320;
   $288=$776;
   $289=$860;
   var $861=$288;
   var $862=$289;
   var $tmp_i_i_i16=$287;
   var $tmp1_i_i_i17=$290;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i16)]=HEAP8[($tmp1_i_i_i17)];
   $285=$861;
   $286=$862;
   var $863=$285;
   $284=$863;
   var $864=$284;
   var $865=(($864)|0);
   $283=$865;
   var $866=$283;
   var $867=$866;
   $282=$867;
   var $868=$282;
   var $869=$868;
   var $870=$286;
   $280=$870;
   var $871=$280;
   var $872=(($871)|0);
   $279=$872;
   var $873=$279;
   var $874=$873;
   $278=$874;
   var $875=$278;
   var $876=$875;
   $281=$876;
   var $877=$281;
   var $878=$320;
   $293=$878;
   var $879=$293;
   var $880=(($879)|0);
   $292=$880;
   var $881=$292;
   var $882=$881;
   $291=$882;
   var $883=$291;
   var $884=(($883)|0);
   var $885=(($884)|0);
   var $886=$885;
   var $887=(($886)|0);
   $__a_i_i_i11=$887;
   $__i_i_i_i12=0;
   label = 27; break;
  case 27: 
   var $889=$__i_i_i_i12;
   var $890=(($889)>>>(0)) < 3;
   if ($890) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $892=$__i_i_i_i12;
   var $893=$__a_i_i_i11;
   var $894=(($893+($892<<2))|0);
   HEAP32[(($894)>>2)]=0;
   var $895=$__i_i_i_i12;
   var $896=((($895)+(1))|0);
   $__i_i_i_i12=$896;
   label = 27; break;
  case 29: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($451);
   var $897=$444;
   var $898=$__mp;
   $272=$898;
   var $899=$272;
   var $900=$899;
   var $901=HEAP32[(($900)>>2)];
   var $902=(($901+24)|0);
   var $903=HEAP32[(($902)>>2)];
   FUNCTION_TABLE[$903]($452, $899);
   $269=$897;
   $270=$452;
   var $904=$269;
   var $905=$270;
   var $tmp_i22=$268;
   var $tmp1_i23=$271;
   assert(1 % 1 === 0);HEAP8[($tmp_i22)]=HEAP8[($tmp1_i23)];
   $266=$904;
   $267=$905;
   var $906=$266;
   $263=$906;
   var $907=$263;
   $262=$907;
   var $908=$262;
   $243=$907;
   var $909=$243;
   var $910=(($909)|0);
   $242=$910;
   var $911=$242;
   var $912=$911;
   $241=$912;
   var $913=$241;
   var $914=(($913)|0);
   var $915=(($914)|0);
   var $916=$915;
   var $917=(($916)|0);
   var $918=$917;
   var $919=HEAP8[($918)];
   var $920=(($919)&(255));
   var $921=$920 & 1;
   var $922=(($921)|(0))!=0;
   if ($922) { label = 30; break; } else { label = 31; break; }
  case 30: 
   $246=$907;
   var $924=$246;
   var $925=(($924)|0);
   $245=$925;
   var $926=$245;
   var $927=$926;
   $244=$927;
   var $928=$244;
   var $929=(($928)|0);
   var $930=(($929)|0);
   var $931=$930;
   var $932=(($931+8)|0);
   var $933=HEAP32[(($932)>>2)];
   HEAP8[($264)]=0;
   $247=$933;
   $248=$264;
   var $934=$248;
   var $935=HEAP8[($934)];
   var $936=$247;
   HEAP8[($936)]=$935;
   $251=$907;
   $252=0;
   var $937=$251;
   var $938=$252;
   var $939=(($937)|0);
   $250=$939;
   var $940=$250;
   var $941=$940;
   $249=$941;
   var $942=$249;
   var $943=(($942)|0);
   var $944=(($943)|0);
   var $945=$944;
   var $946=(($945+4)|0);
   HEAP32[(($946)>>2)]=$938;
   label = 32; break;
  case 31: 
   $255=$907;
   var $948=$255;
   var $949=(($948)|0);
   $254=$949;
   var $950=$254;
   var $951=$950;
   $253=$951;
   var $952=$253;
   var $953=(($952)|0);
   var $954=(($953)|0);
   var $955=$954;
   var $956=(($955+1)|0);
   var $957=(($956)|0);
   HEAP8[($265)]=0;
   $256=$957;
   $257=$265;
   var $958=$257;
   var $959=HEAP8[($958)];
   var $960=$256;
   HEAP8[($960)]=$959;
   $260=$907;
   $261=0;
   var $961=$260;
   var $962=$261;
   var $963=$962 << 1;
   var $964=(($963) & 255);
   var $965=(($961)|0);
   $259=$965;
   var $966=$259;
   var $967=$966;
   $258=$967;
   var $968=$258;
   var $969=(($968)|0);
   var $970=(($969)|0);
   var $971=$970;
   var $972=(($971)|0);
   var $973=$972;
   HEAP8[($973)]=$964;
   label = 32; break;
  case 32: 
   $220=$906;
   var $974=$220;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($974, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 33; break; }
  case 33: 
   var $976$0 = ___cxa_find_matching_catch(-1, -1,0); $976$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 34: 
   var $977=(($906)|0);
   $222=$977;
   var $978=$222;
   var $979=$978;
   $221=$979;
   var $980=$221;
   var $981=(($980)|0);
   var $982=$267;
   var $983=(($982)|0);
   $224=$983;
   var $984=$224;
   var $985=$984;
   $223=$985;
   var $986=$223;
   var $987=(($986)|0);
   var $988=$981;
   var $989=$987;
   assert(12 % 1 === 0);HEAP32[(($988)>>2)]=HEAP32[(($989)>>2)];HEAP32[((($988)+(4))>>2)]=HEAP32[((($989)+(4))>>2)];HEAP32[((($988)+(8))>>2)]=HEAP32[((($989)+(8))>>2)];
   var $990=$267;
   $235=$906;
   $236=$990;
   var $991=$235;
   var $992=$236;
   var $tmp_i_i_i25=$234;
   var $tmp1_i_i_i26=$237;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i25)]=HEAP8[($tmp1_i_i_i26)];
   $232=$991;
   $233=$992;
   var $993=$232;
   $231=$993;
   var $994=$231;
   var $995=(($994)|0);
   $230=$995;
   var $996=$230;
   var $997=$996;
   $229=$997;
   var $998=$229;
   var $999=$998;
   var $1000=$233;
   $227=$1000;
   var $1001=$227;
   var $1002=(($1001)|0);
   $226=$1002;
   var $1003=$226;
   var $1004=$1003;
   $225=$1004;
   var $1005=$225;
   var $1006=$1005;
   $228=$1006;
   var $1007=$228;
   var $1008=$267;
   $240=$1008;
   var $1009=$240;
   var $1010=(($1009)|0);
   $239=$1010;
   var $1011=$239;
   var $1012=$1011;
   $238=$1012;
   var $1013=$238;
   var $1014=(($1013)|0);
   var $1015=(($1014)|0);
   var $1016=$1015;
   var $1017=(($1016)|0);
   $__a_i_i_i20=$1017;
   $__i_i_i_i21=0;
   label = 35; break;
  case 35: 
   var $1019=$__i_i_i_i21;
   var $1020=(($1019)>>>(0)) < 3;
   if ($1020) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $1022=$__i_i_i_i21;
   var $1023=$__a_i_i_i20;
   var $1024=(($1023+($1022<<2))|0);
   HEAP32[(($1024)>>2)]=0;
   var $1025=$__i_i_i_i21;
   var $1026=((($1025)+(1))|0);
   $__i_i_i_i21=$1026;
   label = 35; break;
  case 37: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($452);
   var $1027=$__mp;
   $219=$1027;
   var $1028=$219;
   var $1029=$1028;
   var $1030=HEAP32[(($1029)>>2)];
   var $1031=(($1030+36)|0);
   var $1032=HEAP32[(($1031)>>2)];
   var $1033=FUNCTION_TABLE[$1032]($1028);
   var $1034=$446;
   HEAP32[(($1034)>>2)]=$1033;
   label = 74; break;
  case 38: 
   var $1036=$439;
   $218=$1036;
   var $1037=$218;
   var $1038=__ZNKSt3__16locale9use_facetERNS0_2idE($1037, 20336);
   var $1039=$1038;
   $__mp1=$1039;
   var $1040=$438;
   var $1041=(($1040) & 1);
   if ($1041) { label = 39; break; } else { label = 48; break; }
  case 39: 
   var $1043=$440;
   var $1044=$__mp1;
   $217=$1044;
   var $1045=$217;
   var $1046=$1045;
   var $1047=HEAP32[(($1046)>>2)];
   var $1048=(($1047+44)|0);
   var $1049=HEAP32[(($1048)>>2)];
   FUNCTION_TABLE[$1049]($453, $1045);
   var $1050=$1043;
   var $1051=$453;
   assert(4 % 1 === 0);HEAP8[($1050)]=HEAP8[($1051)];HEAP8[((($1050)+(1))|0)]=HEAP8[((($1051)+(1))|0)];HEAP8[((($1050)+(2))|0)]=HEAP8[((($1051)+(2))|0)];HEAP8[((($1050)+(3))|0)]=HEAP8[((($1051)+(3))|0)];
   var $1052=$445;
   var $1053=$__mp1;
   $216=$1053;
   var $1054=$216;
   var $1055=$1054;
   var $1056=HEAP32[(($1055)>>2)];
   var $1057=(($1056+32)|0);
   var $1058=HEAP32[(($1057)>>2)];
   FUNCTION_TABLE[$1058]($454, $1054);
   $213=$1052;
   $214=$454;
   var $1059=$213;
   var $1060=$214;
   var $tmp_i31=$212;
   var $tmp1_i32=$215;
   assert(1 % 1 === 0);HEAP8[($tmp_i31)]=HEAP8[($tmp1_i32)];
   $210=$1059;
   $211=$1060;
   var $1061=$210;
   $207=$1061;
   var $1062=$207;
   $206=$1062;
   var $1063=$206;
   $187=$1062;
   var $1064=$187;
   var $1065=(($1064)|0);
   $186=$1065;
   var $1066=$186;
   var $1067=$1066;
   $185=$1067;
   var $1068=$185;
   var $1069=(($1068)|0);
   var $1070=(($1069)|0);
   var $1071=$1070;
   var $1072=(($1071)|0);
   var $1073=$1072;
   var $1074=HEAP8[($1073)];
   var $1075=(($1074)&(255));
   var $1076=$1075 & 1;
   var $1077=(($1076)|(0))!=0;
   if ($1077) { label = 40; break; } else { label = 41; break; }
  case 40: 
   $190=$1062;
   var $1079=$190;
   var $1080=(($1079)|0);
   $189=$1080;
   var $1081=$189;
   var $1082=$1081;
   $188=$1082;
   var $1083=$188;
   var $1084=(($1083)|0);
   var $1085=(($1084)|0);
   var $1086=$1085;
   var $1087=(($1086+8)|0);
   var $1088=HEAP32[(($1087)>>2)];
   HEAP8[($208)]=0;
   $191=$1088;
   $192=$208;
   var $1089=$192;
   var $1090=HEAP8[($1089)];
   var $1091=$191;
   HEAP8[($1091)]=$1090;
   $195=$1062;
   $196=0;
   var $1092=$195;
   var $1093=$196;
   var $1094=(($1092)|0);
   $194=$1094;
   var $1095=$194;
   var $1096=$1095;
   $193=$1096;
   var $1097=$193;
   var $1098=(($1097)|0);
   var $1099=(($1098)|0);
   var $1100=$1099;
   var $1101=(($1100+4)|0);
   HEAP32[(($1101)>>2)]=$1093;
   label = 42; break;
  case 41: 
   $199=$1062;
   var $1103=$199;
   var $1104=(($1103)|0);
   $198=$1104;
   var $1105=$198;
   var $1106=$1105;
   $197=$1106;
   var $1107=$197;
   var $1108=(($1107)|0);
   var $1109=(($1108)|0);
   var $1110=$1109;
   var $1111=(($1110+1)|0);
   var $1112=(($1111)|0);
   HEAP8[($209)]=0;
   $200=$1112;
   $201=$209;
   var $1113=$201;
   var $1114=HEAP8[($1113)];
   var $1115=$200;
   HEAP8[($1115)]=$1114;
   $204=$1062;
   $205=0;
   var $1116=$204;
   var $1117=$205;
   var $1118=$1117 << 1;
   var $1119=(($1118) & 255);
   var $1120=(($1116)|0);
   $203=$1120;
   var $1121=$203;
   var $1122=$1121;
   $202=$1122;
   var $1123=$202;
   var $1124=(($1123)|0);
   var $1125=(($1124)|0);
   var $1126=$1125;
   var $1127=(($1126)|0);
   var $1128=$1127;
   HEAP8[($1128)]=$1119;
   label = 42; break;
  case 42: 
   $164=$1061;
   var $1129=$164;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1129, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 43; break; }
  case 43: 
   var $1131$0 = ___cxa_find_matching_catch(-1, -1,0); $1131$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 44: 
   var $1132=(($1061)|0);
   $166=$1132;
   var $1133=$166;
   var $1134=$1133;
   $165=$1134;
   var $1135=$165;
   var $1136=(($1135)|0);
   var $1137=$211;
   var $1138=(($1137)|0);
   $168=$1138;
   var $1139=$168;
   var $1140=$1139;
   $167=$1140;
   var $1141=$167;
   var $1142=(($1141)|0);
   var $1143=$1136;
   var $1144=$1142;
   assert(12 % 1 === 0);HEAP32[(($1143)>>2)]=HEAP32[(($1144)>>2)];HEAP32[((($1143)+(4))>>2)]=HEAP32[((($1144)+(4))>>2)];HEAP32[((($1143)+(8))>>2)]=HEAP32[((($1144)+(8))>>2)];
   var $1145=$211;
   $179=$1061;
   $180=$1145;
   var $1146=$179;
   var $1147=$180;
   var $tmp_i_i_i34=$178;
   var $tmp1_i_i_i35=$181;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i34)]=HEAP8[($tmp1_i_i_i35)];
   $176=$1146;
   $177=$1147;
   var $1148=$176;
   $175=$1148;
   var $1149=$175;
   var $1150=(($1149)|0);
   $174=$1150;
   var $1151=$174;
   var $1152=$1151;
   $173=$1152;
   var $1153=$173;
   var $1154=$1153;
   var $1155=$177;
   $171=$1155;
   var $1156=$171;
   var $1157=(($1156)|0);
   $170=$1157;
   var $1158=$170;
   var $1159=$1158;
   $169=$1159;
   var $1160=$169;
   var $1161=$1160;
   $172=$1161;
   var $1162=$172;
   var $1163=$211;
   $184=$1163;
   var $1164=$184;
   var $1165=(($1164)|0);
   $183=$1165;
   var $1166=$183;
   var $1167=$1166;
   $182=$1167;
   var $1168=$182;
   var $1169=(($1168)|0);
   var $1170=(($1169)|0);
   var $1171=$1170;
   var $1172=(($1171)|0);
   $__a_i_i_i29=$1172;
   $__i_i_i_i30=0;
   label = 45; break;
  case 45: 
   var $1174=$__i_i_i_i30;
   var $1175=(($1174)>>>(0)) < 3;
   if ($1175) { label = 46; break; } else { label = 47; break; }
  case 46: 
   var $1177=$__i_i_i_i30;
   var $1178=$__a_i_i_i29;
   var $1179=(($1178+($1177<<2))|0);
   HEAP32[(($1179)>>2)]=0;
   var $1180=$__i_i_i_i30;
   var $1181=((($1180)+(1))|0);
   $__i_i_i_i30=$1181;
   label = 45; break;
  case 47: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($454);
   label = 57; break;
  case 48: 
   var $1183=$440;
   var $1184=$__mp1;
   $163=$1184;
   var $1185=$163;
   var $1186=$1185;
   var $1187=HEAP32[(($1186)>>2)];
   var $1188=(($1187+40)|0);
   var $1189=HEAP32[(($1188)>>2)];
   FUNCTION_TABLE[$1189]($455, $1185);
   var $1190=$1183;
   var $1191=$455;
   assert(4 % 1 === 0);HEAP8[($1190)]=HEAP8[($1191)];HEAP8[((($1190)+(1))|0)]=HEAP8[((($1191)+(1))|0)];HEAP8[((($1190)+(2))|0)]=HEAP8[((($1191)+(2))|0)];HEAP8[((($1190)+(3))|0)]=HEAP8[((($1191)+(3))|0)];
   var $1192=$445;
   var $1193=$__mp1;
   $162=$1193;
   var $1194=$162;
   var $1195=$1194;
   var $1196=HEAP32[(($1195)>>2)];
   var $1197=(($1196+28)|0);
   var $1198=HEAP32[(($1197)>>2)];
   FUNCTION_TABLE[$1198]($456, $1194);
   $159=$1192;
   $160=$456;
   var $1199=$159;
   var $1200=$160;
   var $tmp_i40=$158;
   var $tmp1_i41=$161;
   assert(1 % 1 === 0);HEAP8[($tmp_i40)]=HEAP8[($tmp1_i41)];
   $156=$1199;
   $157=$1200;
   var $1201=$156;
   $153=$1201;
   var $1202=$153;
   $152=$1202;
   var $1203=$152;
   $133=$1202;
   var $1204=$133;
   var $1205=(($1204)|0);
   $132=$1205;
   var $1206=$132;
   var $1207=$1206;
   $131=$1207;
   var $1208=$131;
   var $1209=(($1208)|0);
   var $1210=(($1209)|0);
   var $1211=$1210;
   var $1212=(($1211)|0);
   var $1213=$1212;
   var $1214=HEAP8[($1213)];
   var $1215=(($1214)&(255));
   var $1216=$1215 & 1;
   var $1217=(($1216)|(0))!=0;
   if ($1217) { label = 49; break; } else { label = 50; break; }
  case 49: 
   $136=$1202;
   var $1219=$136;
   var $1220=(($1219)|0);
   $135=$1220;
   var $1221=$135;
   var $1222=$1221;
   $134=$1222;
   var $1223=$134;
   var $1224=(($1223)|0);
   var $1225=(($1224)|0);
   var $1226=$1225;
   var $1227=(($1226+8)|0);
   var $1228=HEAP32[(($1227)>>2)];
   HEAP8[($154)]=0;
   $137=$1228;
   $138=$154;
   var $1229=$138;
   var $1230=HEAP8[($1229)];
   var $1231=$137;
   HEAP8[($1231)]=$1230;
   $141=$1202;
   $142=0;
   var $1232=$141;
   var $1233=$142;
   var $1234=(($1232)|0);
   $140=$1234;
   var $1235=$140;
   var $1236=$1235;
   $139=$1236;
   var $1237=$139;
   var $1238=(($1237)|0);
   var $1239=(($1238)|0);
   var $1240=$1239;
   var $1241=(($1240+4)|0);
   HEAP32[(($1241)>>2)]=$1233;
   label = 51; break;
  case 50: 
   $145=$1202;
   var $1243=$145;
   var $1244=(($1243)|0);
   $144=$1244;
   var $1245=$144;
   var $1246=$1245;
   $143=$1246;
   var $1247=$143;
   var $1248=(($1247)|0);
   var $1249=(($1248)|0);
   var $1250=$1249;
   var $1251=(($1250+1)|0);
   var $1252=(($1251)|0);
   HEAP8[($155)]=0;
   $146=$1252;
   $147=$155;
   var $1253=$147;
   var $1254=HEAP8[($1253)];
   var $1255=$146;
   HEAP8[($1255)]=$1254;
   $150=$1202;
   $151=0;
   var $1256=$150;
   var $1257=$151;
   var $1258=$1257 << 1;
   var $1259=(($1258) & 255);
   var $1260=(($1256)|0);
   $149=$1260;
   var $1261=$149;
   var $1262=$1261;
   $148=$1262;
   var $1263=$148;
   var $1264=(($1263)|0);
   var $1265=(($1264)|0);
   var $1266=$1265;
   var $1267=(($1266)|0);
   var $1268=$1267;
   HEAP8[($1268)]=$1259;
   label = 51; break;
  case 51: 
   $110=$1201;
   var $1269=$110;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1269, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 52; break; }
  case 52: 
   var $1271$0 = ___cxa_find_matching_catch(-1, -1,0); $1271$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 53: 
   var $1272=(($1201)|0);
   $112=$1272;
   var $1273=$112;
   var $1274=$1273;
   $111=$1274;
   var $1275=$111;
   var $1276=(($1275)|0);
   var $1277=$157;
   var $1278=(($1277)|0);
   $114=$1278;
   var $1279=$114;
   var $1280=$1279;
   $113=$1280;
   var $1281=$113;
   var $1282=(($1281)|0);
   var $1283=$1276;
   var $1284=$1282;
   assert(12 % 1 === 0);HEAP32[(($1283)>>2)]=HEAP32[(($1284)>>2)];HEAP32[((($1283)+(4))>>2)]=HEAP32[((($1284)+(4))>>2)];HEAP32[((($1283)+(8))>>2)]=HEAP32[((($1284)+(8))>>2)];
   var $1285=$157;
   $125=$1201;
   $126=$1285;
   var $1286=$125;
   var $1287=$126;
   var $tmp_i_i_i43=$124;
   var $tmp1_i_i_i44=$127;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i43)]=HEAP8[($tmp1_i_i_i44)];
   $122=$1286;
   $123=$1287;
   var $1288=$122;
   $121=$1288;
   var $1289=$121;
   var $1290=(($1289)|0);
   $120=$1290;
   var $1291=$120;
   var $1292=$1291;
   $119=$1292;
   var $1293=$119;
   var $1294=$1293;
   var $1295=$123;
   $117=$1295;
   var $1296=$117;
   var $1297=(($1296)|0);
   $116=$1297;
   var $1298=$116;
   var $1299=$1298;
   $115=$1299;
   var $1300=$115;
   var $1301=$1300;
   $118=$1301;
   var $1302=$118;
   var $1303=$157;
   $130=$1303;
   var $1304=$130;
   var $1305=(($1304)|0);
   $129=$1305;
   var $1306=$129;
   var $1307=$1306;
   $128=$1307;
   var $1308=$128;
   var $1309=(($1308)|0);
   var $1310=(($1309)|0);
   var $1311=$1310;
   var $1312=(($1311)|0);
   $__a_i_i_i38=$1312;
   $__i_i_i_i39=0;
   label = 54; break;
  case 54: 
   var $1314=$__i_i_i_i39;
   var $1315=(($1314)>>>(0)) < 3;
   if ($1315) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $1317=$__i_i_i_i39;
   var $1318=$__a_i_i_i38;
   var $1319=(($1318+($1317<<2))|0);
   HEAP32[(($1319)>>2)]=0;
   var $1320=$__i_i_i_i39;
   var $1321=((($1320)+(1))|0);
   $__i_i_i_i39=$1321;
   label = 54; break;
  case 56: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($456);
   label = 57; break;
  case 57: 
   var $1323=$__mp1;
   $109=$1323;
   var $1324=$109;
   var $1325=$1324;
   var $1326=HEAP32[(($1325)>>2)];
   var $1327=(($1326+12)|0);
   var $1328=HEAP32[(($1327)>>2)];
   var $1329=FUNCTION_TABLE[$1328]($1324);
   var $1330=$441;
   HEAP8[($1330)]=$1329;
   var $1331=$__mp1;
   $108=$1331;
   var $1332=$108;
   var $1333=$1332;
   var $1334=HEAP32[(($1333)>>2)];
   var $1335=(($1334+16)|0);
   var $1336=HEAP32[(($1335)>>2)];
   var $1337=FUNCTION_TABLE[$1336]($1332);
   var $1338=$442;
   HEAP8[($1338)]=$1337;
   var $1339=$443;
   var $1340=$__mp1;
   $107=$1340;
   var $1341=$107;
   var $1342=$1341;
   var $1343=HEAP32[(($1342)>>2)];
   var $1344=(($1343+20)|0);
   var $1345=HEAP32[(($1344)>>2)];
   FUNCTION_TABLE[$1345]($457, $1341);
   $104=$1339;
   $105=$457;
   var $1346=$104;
   var $1347=$105;
   var $tmp_i49=$103;
   var $tmp1_i50=$106;
   assert(1 % 1 === 0);HEAP8[($tmp_i49)]=HEAP8[($tmp1_i50)];
   $101=$1346;
   $102=$1347;
   var $1348=$101;
   $98=$1348;
   var $1349=$98;
   $97=$1349;
   var $1350=$97;
   $78=$1349;
   var $1351=$78;
   var $1352=(($1351)|0);
   $77=$1352;
   var $1353=$77;
   var $1354=$1353;
   $76=$1354;
   var $1355=$76;
   var $1356=(($1355)|0);
   var $1357=(($1356)|0);
   var $1358=$1357;
   var $1359=(($1358)|0);
   var $1360=$1359;
   var $1361=HEAP8[($1360)];
   var $1362=(($1361)&(255));
   var $1363=$1362 & 1;
   var $1364=(($1363)|(0))!=0;
   if ($1364) { label = 58; break; } else { label = 59; break; }
  case 58: 
   $81=$1349;
   var $1366=$81;
   var $1367=(($1366)|0);
   $80=$1367;
   var $1368=$80;
   var $1369=$1368;
   $79=$1369;
   var $1370=$79;
   var $1371=(($1370)|0);
   var $1372=(($1371)|0);
   var $1373=$1372;
   var $1374=(($1373+8)|0);
   var $1375=HEAP32[(($1374)>>2)];
   HEAP8[($99)]=0;
   $82=$1375;
   $83=$99;
   var $1376=$83;
   var $1377=HEAP8[($1376)];
   var $1378=$82;
   HEAP8[($1378)]=$1377;
   $86=$1349;
   $87=0;
   var $1379=$86;
   var $1380=$87;
   var $1381=(($1379)|0);
   $85=$1381;
   var $1382=$85;
   var $1383=$1382;
   $84=$1383;
   var $1384=$84;
   var $1385=(($1384)|0);
   var $1386=(($1385)|0);
   var $1387=$1386;
   var $1388=(($1387+4)|0);
   HEAP32[(($1388)>>2)]=$1380;
   label = 60; break;
  case 59: 
   $90=$1349;
   var $1390=$90;
   var $1391=(($1390)|0);
   $89=$1391;
   var $1392=$89;
   var $1393=$1392;
   $88=$1393;
   var $1394=$88;
   var $1395=(($1394)|0);
   var $1396=(($1395)|0);
   var $1397=$1396;
   var $1398=(($1397+1)|0);
   var $1399=(($1398)|0);
   HEAP8[($100)]=0;
   $91=$1399;
   $92=$100;
   var $1400=$92;
   var $1401=HEAP8[($1400)];
   var $1402=$91;
   HEAP8[($1402)]=$1401;
   $95=$1349;
   $96=0;
   var $1403=$95;
   var $1404=$96;
   var $1405=$1404 << 1;
   var $1406=(($1405) & 255);
   var $1407=(($1403)|0);
   $94=$1407;
   var $1408=$94;
   var $1409=$1408;
   $93=$1409;
   var $1410=$93;
   var $1411=(($1410)|0);
   var $1412=(($1411)|0);
   var $1413=$1412;
   var $1414=(($1413)|0);
   var $1415=$1414;
   HEAP8[($1415)]=$1406;
   label = 60; break;
  case 60: 
   $55=$1348;
   var $1416=$55;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1416, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 62; break; } else { label = 61; break; }
  case 61: 
   var $1418$0 = ___cxa_find_matching_catch(-1, -1,0); $1418$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 62: 
   var $1419=(($1348)|0);
   $57=$1419;
   var $1420=$57;
   var $1421=$1420;
   $56=$1421;
   var $1422=$56;
   var $1423=(($1422)|0);
   var $1424=$102;
   var $1425=(($1424)|0);
   $59=$1425;
   var $1426=$59;
   var $1427=$1426;
   $58=$1427;
   var $1428=$58;
   var $1429=(($1428)|0);
   var $1430=$1423;
   var $1431=$1429;
   assert(12 % 1 === 0);HEAP32[(($1430)>>2)]=HEAP32[(($1431)>>2)];HEAP32[((($1430)+(4))>>2)]=HEAP32[((($1431)+(4))>>2)];HEAP32[((($1430)+(8))>>2)]=HEAP32[((($1431)+(8))>>2)];
   var $1432=$102;
   $70=$1348;
   $71=$1432;
   var $1433=$70;
   var $1434=$71;
   var $tmp_i_i_i52=$69;
   var $tmp1_i_i_i53=$72;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i52)]=HEAP8[($tmp1_i_i_i53)];
   $67=$1433;
   $68=$1434;
   var $1435=$67;
   $66=$1435;
   var $1436=$66;
   var $1437=(($1436)|0);
   $65=$1437;
   var $1438=$65;
   var $1439=$1438;
   $64=$1439;
   var $1440=$64;
   var $1441=$1440;
   var $1442=$68;
   $62=$1442;
   var $1443=$62;
   var $1444=(($1443)|0);
   $61=$1444;
   var $1445=$61;
   var $1446=$1445;
   $60=$1446;
   var $1447=$60;
   var $1448=$1447;
   $63=$1448;
   var $1449=$63;
   var $1450=$102;
   $75=$1450;
   var $1451=$75;
   var $1452=(($1451)|0);
   $74=$1452;
   var $1453=$74;
   var $1454=$1453;
   $73=$1454;
   var $1455=$73;
   var $1456=(($1455)|0);
   var $1457=(($1456)|0);
   var $1458=$1457;
   var $1459=(($1458)|0);
   $__a_i_i_i47=$1459;
   $__i_i_i_i48=0;
   label = 63; break;
  case 63: 
   var $1461=$__i_i_i_i48;
   var $1462=(($1461)>>>(0)) < 3;
   if ($1462) { label = 64; break; } else { label = 65; break; }
  case 64: 
   var $1464=$__i_i_i_i48;
   var $1465=$__a_i_i_i47;
   var $1466=(($1465+($1464<<2))|0);
   HEAP32[(($1466)>>2)]=0;
   var $1467=$__i_i_i_i48;
   var $1468=((($1467)+(1))|0);
   $__i_i_i_i48=$1468;
   label = 63; break;
  case 65: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($457);
   var $1469=$444;
   var $1470=$__mp1;
   $54=$1470;
   var $1471=$54;
   var $1472=$1471;
   var $1473=HEAP32[(($1472)>>2)];
   var $1474=(($1473+24)|0);
   var $1475=HEAP32[(($1474)>>2)];
   FUNCTION_TABLE[$1475]($458, $1471);
   $51=$1469;
   $52=$458;
   var $1476=$51;
   var $1477=$52;
   var $tmp_i58=$50;
   var $tmp1_i59=$53;
   assert(1 % 1 === 0);HEAP8[($tmp_i58)]=HEAP8[($tmp1_i59)];
   $48=$1476;
   $49=$1477;
   var $1478=$48;
   $45=$1478;
   var $1479=$45;
   $44=$1479;
   var $1480=$44;
   $25=$1479;
   var $1481=$25;
   var $1482=(($1481)|0);
   $24=$1482;
   var $1483=$24;
   var $1484=$1483;
   $23=$1484;
   var $1485=$23;
   var $1486=(($1485)|0);
   var $1487=(($1486)|0);
   var $1488=$1487;
   var $1489=(($1488)|0);
   var $1490=$1489;
   var $1491=HEAP8[($1490)];
   var $1492=(($1491)&(255));
   var $1493=$1492 & 1;
   var $1494=(($1493)|(0))!=0;
   if ($1494) { label = 66; break; } else { label = 67; break; }
  case 66: 
   $28=$1479;
   var $1496=$28;
   var $1497=(($1496)|0);
   $27=$1497;
   var $1498=$27;
   var $1499=$1498;
   $26=$1499;
   var $1500=$26;
   var $1501=(($1500)|0);
   var $1502=(($1501)|0);
   var $1503=$1502;
   var $1504=(($1503+8)|0);
   var $1505=HEAP32[(($1504)>>2)];
   HEAP8[($46)]=0;
   $29=$1505;
   $30=$46;
   var $1506=$30;
   var $1507=HEAP8[($1506)];
   var $1508=$29;
   HEAP8[($1508)]=$1507;
   $33=$1479;
   $34=0;
   var $1509=$33;
   var $1510=$34;
   var $1511=(($1509)|0);
   $32=$1511;
   var $1512=$32;
   var $1513=$1512;
   $31=$1513;
   var $1514=$31;
   var $1515=(($1514)|0);
   var $1516=(($1515)|0);
   var $1517=$1516;
   var $1518=(($1517+4)|0);
   HEAP32[(($1518)>>2)]=$1510;
   label = 68; break;
  case 67: 
   $37=$1479;
   var $1520=$37;
   var $1521=(($1520)|0);
   $36=$1521;
   var $1522=$36;
   var $1523=$1522;
   $35=$1523;
   var $1524=$35;
   var $1525=(($1524)|0);
   var $1526=(($1525)|0);
   var $1527=$1526;
   var $1528=(($1527+1)|0);
   var $1529=(($1528)|0);
   HEAP8[($47)]=0;
   $38=$1529;
   $39=$47;
   var $1530=$39;
   var $1531=HEAP8[($1530)];
   var $1532=$38;
   HEAP8[($1532)]=$1531;
   $42=$1479;
   $43=0;
   var $1533=$42;
   var $1534=$43;
   var $1535=$1534 << 1;
   var $1536=(($1535) & 255);
   var $1537=(($1533)|0);
   $41=$1537;
   var $1538=$41;
   var $1539=$1538;
   $40=$1539;
   var $1540=$40;
   var $1541=(($1540)|0);
   var $1542=(($1541)|0);
   var $1543=$1542;
   var $1544=(($1543)|0);
   var $1545=$1544;
   HEAP8[($1545)]=$1536;
   label = 68; break;
  case 68: 
   $2=$1478;
   var $1546=$2;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1546, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 70; break; } else { label = 69; break; }
  case 69: 
   var $1548$0 = ___cxa_find_matching_catch(-1, -1,0); $1548$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 70: 
   var $1549=(($1478)|0);
   $4=$1549;
   var $1550=$4;
   var $1551=$1550;
   $3=$1551;
   var $1552=$3;
   var $1553=(($1552)|0);
   var $1554=$49;
   var $1555=(($1554)|0);
   $6=$1555;
   var $1556=$6;
   var $1557=$1556;
   $5=$1557;
   var $1558=$5;
   var $1559=(($1558)|0);
   var $1560=$1553;
   var $1561=$1559;
   assert(12 % 1 === 0);HEAP32[(($1560)>>2)]=HEAP32[(($1561)>>2)];HEAP32[((($1560)+(4))>>2)]=HEAP32[((($1561)+(4))>>2)];HEAP32[((($1560)+(8))>>2)]=HEAP32[((($1561)+(8))>>2)];
   var $1562=$49;
   $17=$1478;
   $18=$1562;
   var $1563=$17;
   var $1564=$18;
   var $tmp_i_i_i61=$16;
   var $tmp1_i_i_i62=$19;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i61)]=HEAP8[($tmp1_i_i_i62)];
   $14=$1563;
   $15=$1564;
   var $1565=$14;
   $13=$1565;
   var $1566=$13;
   var $1567=(($1566)|0);
   $12=$1567;
   var $1568=$12;
   var $1569=$1568;
   $11=$1569;
   var $1570=$11;
   var $1571=$1570;
   var $1572=$15;
   $9=$1572;
   var $1573=$9;
   var $1574=(($1573)|0);
   $8=$1574;
   var $1575=$8;
   var $1576=$1575;
   $7=$1576;
   var $1577=$7;
   var $1578=$1577;
   $10=$1578;
   var $1579=$10;
   var $1580=$49;
   $22=$1580;
   var $1581=$22;
   var $1582=(($1581)|0);
   $21=$1582;
   var $1583=$21;
   var $1584=$1583;
   $20=$1584;
   var $1585=$20;
   var $1586=(($1585)|0);
   var $1587=(($1586)|0);
   var $1588=$1587;
   var $1589=(($1588)|0);
   $__a_i_i_i56=$1589;
   $__i_i_i_i57=0;
   label = 71; break;
  case 71: 
   var $1591=$__i_i_i_i57;
   var $1592=(($1591)>>>(0)) < 3;
   if ($1592) { label = 72; break; } else { label = 73; break; }
  case 72: 
   var $1594=$__i_i_i_i57;
   var $1595=$__a_i_i_i56;
   var $1596=(($1595+($1594<<2))|0);
   HEAP32[(($1596)>>2)]=0;
   var $1597=$__i_i_i_i57;
   var $1598=((($1597)+(1))|0);
   $__i_i_i_i57=$1598;
   label = 71; break;
  case 73: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($458);
   var $1599=$__mp1;
   $1=$1599;
   var $1600=$1;
   var $1601=$1600;
   var $1602=HEAP32[(($1601)>>2)];
   var $1603=(($1602+36)|0);
   var $1604=HEAP32[(($1603)>>2)];
   var $1605=FUNCTION_TABLE[$1604]($1600);
   var $1606=$446;
   HEAP32[(($1606)>>2)]=$1605;
   label = 74; break;
  case 74: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43=__stackBase__;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54=(__stackBase__)+(8);
   var $55=(__stackBase__)+(16);
   var $56=(__stackBase__)+(24);
   var $57;
   var $58=(__stackBase__)+(32);
   var $59=(__stackBase__)+(40);
   var $60=(__stackBase__)+(48);
   var $61=(__stackBase__)+(56);
   var $62=(__stackBase__)+(64);
   var $63=(__stackBase__)+(72);
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $122;
   var $123;
   var $124;
   var $125;
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154;
   var $155;
   var $156;
   var $157;
   var $158;
   var $159;
   var $__t_i_i_i=(__stackBase__)+(80);
   var $160;
   var $161;
   var $162=(__stackBase__)+(88);
   var $163;
   var $164;
   var $165=(__stackBase__)+(96);
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177;
   var $178;
   var $179;
   var $180;
   var $181;
   var $182;
   var $183;
   var $184;
   var $185;
   var $186;
   var $187;
   var $188;
   var $189;
   var $190;
   var $191;
   var $192;
   var $193;
   var $194;
   var $195;
   var $196;
   var $197;
   var $198;
   var $199;
   var $200;
   var $201;
   var $202;
   var $203;
   var $204;
   var $205;
   var $206;
   var $207;
   var $208;
   var $209;
   var $210;
   var $211;
   var $212;
   var $213;
   var $214;
   var $215;
   var $216;
   var $217;
   var $218;
   var $219;
   var $220;
   var $221;
   var $222=(__stackBase__)+(104);
   var $223;
   var $224;
   var $225;
   var $226;
   var $227;
   var $228;
   var $229;
   var $230;
   var $231;
   var $232;
   var $233=(__stackBase__)+(112);
   var $234=(__stackBase__)+(120);
   var $235=(__stackBase__)+(128);
   var $236;
   var $237=(__stackBase__)+(136);
   var $238=(__stackBase__)+(144);
   var $239=(__stackBase__)+(152);
   var $240=(__stackBase__)+(160);
   var $241=(__stackBase__)+(168);
   var $242=(__stackBase__)+(176);
   var $243;
   var $244;
   var $245;
   var $246;
   var $247;
   var $248;
   var $249;
   var $250;
   var $251;
   var $252;
   var $253;
   var $254;
   var $255;
   var $256;
   var $257;
   var $258;
   var $259;
   var $260;
   var $261;
   var $262;
   var $263;
   var $264;
   var $265;
   var $266;
   var $267;
   var $268;
   var $269;
   var $270;
   var $__p;
   var $271=(__stackBase__)+(184);
   var $272=(__stackBase__)+(192);
   var $__t;
   var $__d;
   var $__f;
   var $__z;
   var $__ng;
   var $__ig;
   var $__gl;
   var $273=(__stackBase__)+(200);
   var $274=(__stackBase__)+(208);
   var $275=(__stackBase__)+(216);
   $256=$__mb;
   $257=$__mi;
   $258=$__me;
   $259=$__flags;
   $260=$__db;
   $261=$__de;
   $262=$__ct;
   var $276=(($__neg)&(1));
   $263=$276;
   $264=$__pat;
   $265=$__dp;
   $266=$__ts;
   $267=$__grp;
   $268=$__sym;
   $269=$__sn;
   $270=$__fd;
   var $277=$256;
   var $278=$258;
   HEAP32[(($278)>>2)]=$277;
   $__p=0;
   label = 2; break;
  case 2: 
   var $280=$__p;
   var $281=(($280)>>>(0)) < 4;
   if ($281) { label = 3; break; } else { label = 99; break; }
  case 3: 
   var $283=$__p;
   var $284=$264;
   var $285=(($284)|0);
   var $286=(($285+$283)|0);
   var $287=HEAP8[($286)];
   var $288=(($287 << 24) >> 24);
   if ((($288)|(0))==0) {
    label = 4; break;
   }
   else if ((($288)|(0))==1) {
    label = 5; break;
   }
   else if ((($288)|(0))==3) {
    label = 6; break;
   }
   else if ((($288)|(0))==2) {
    label = 15; break;
   }
   else if ((($288)|(0))==4) {
    label = 34; break;
   }
   else {
   label = 97; break;
   }
  case 4: 
   var $290=$258;
   var $291=HEAP32[(($290)>>2)];
   var $292=$257;
   HEAP32[(($292)>>2)]=$291;
   label = 97; break;
  case 5: 
   var $294=$258;
   var $295=HEAP32[(($294)>>2)];
   var $296=$257;
   HEAP32[(($296)>>2)]=$295;
   var $297=$262;
   $254=$297;
   $255=32;
   var $298=$254;
   var $299=$298;
   var $300=HEAP32[(($299)>>2)];
   var $301=(($300+28)|0);
   var $302=HEAP32[(($301)>>2)];
   var $303=$255;
   var $304=FUNCTION_TABLE[$302]($298, $303);
   var $305=$258;
   var $306=HEAP32[(($305)>>2)];
   var $307=(($306+1)|0);
   HEAP32[(($305)>>2)]=$307;
   HEAP8[($306)]=$304;
   label = 97; break;
  case 6: 
   var $309=$269;
   $253=$309;
   var $310=$253;
   $252=$310;
   var $311=$252;
   $251=$311;
   var $312=$251;
   var $313=(($312)|0);
   $250=$313;
   var $314=$250;
   var $315=$314;
   $249=$315;
   var $316=$249;
   var $317=(($316)|0);
   var $318=(($317)|0);
   var $319=$318;
   var $320=(($319)|0);
   var $321=$320;
   var $322=HEAP8[($321)];
   var $323=(($322)&(255));
   var $324=$323 & 1;
   var $325=(($324)|(0))!=0;
   if ($325) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $245=$311;
   var $327=$245;
   var $328=(($327)|0);
   $244=$328;
   var $329=$244;
   var $330=$329;
   $243=$330;
   var $331=$243;
   var $332=(($331)|0);
   var $333=(($332)|0);
   var $334=$333;
   var $335=(($334+4)|0);
   var $336=HEAP32[(($335)>>2)];
   var $351 = $336;label = 9; break;
  case 8: 
   $248=$311;
   var $338=$248;
   var $339=(($338)|0);
   $247=$339;
   var $340=$247;
   var $341=$340;
   $246=$341;
   var $342=$246;
   var $343=(($342)|0);
   var $344=(($343)|0);
   var $345=$344;
   var $346=(($345)|0);
   var $347=$346;
   var $348=HEAP8[($347)];
   var $349=(($348)&(255));
   var $350=$349 >> 1;
   var $351 = $350;label = 9; break;
  case 9: 
   var $351;
   var $352=(($351)|(0))==0;
   if ($352) { label = 14; break; } else { label = 10; break; }
  case 10: 
   var $354=$269;
   $91=$354;
   $92=0;
   var $355=$91;
   $90=$355;
   var $356=$90;
   $89=$356;
   var $357=$89;
   $88=$357;
   var $358=$88;
   var $359=(($358)|0);
   $87=$359;
   var $360=$87;
   var $361=$360;
   $86=$361;
   var $362=$86;
   var $363=(($362)|0);
   var $364=(($363)|0);
   var $365=$364;
   var $366=(($365)|0);
   var $367=$366;
   var $368=HEAP8[($367)];
   var $369=(($368)&(255));
   var $370=$369 & 1;
   var $371=(($370)|(0))!=0;
   if ($371) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $82=$357;
   var $373=$82;
   var $374=(($373)|0);
   $81=$374;
   var $375=$81;
   var $376=$375;
   $80=$376;
   var $377=$80;
   var $378=(($377)|0);
   var $379=(($378)|0);
   var $380=$379;
   var $381=(($380+8)|0);
   var $382=HEAP32[(($381)>>2)];
   var $394 = $382;label = 13; break;
  case 12: 
   $85=$357;
   var $384=$85;
   var $385=(($384)|0);
   $84=$385;
   var $386=$84;
   var $387=$386;
   $83=$387;
   var $388=$83;
   var $389=(($388)|0);
   var $390=(($389)|0);
   var $391=$390;
   var $392=(($391+1)|0);
   var $393=(($392)|0);
   var $394 = $393;label = 13; break;
  case 13: 
   var $394;
   var $395=$92;
   var $396=(($394+$395)|0);
   var $397=HEAP8[($396)];
   var $398=$258;
   var $399=HEAP32[(($398)>>2)];
   var $400=(($399+1)|0);
   HEAP32[(($398)>>2)]=$400;
   HEAP8[($399)]=$397;
   label = 14; break;
  case 14: 
   label = 97; break;
  case 15: 
   var $403=$268;
   $77=$403;
   var $404=$77;
   $76=$404;
   var $405=$76;
   $75=$405;
   var $406=$75;
   var $407=(($406)|0);
   $74=$407;
   var $408=$74;
   var $409=$408;
   $73=$409;
   var $410=$73;
   var $411=(($410)|0);
   var $412=(($411)|0);
   var $413=$412;
   var $414=(($413)|0);
   var $415=$414;
   var $416=HEAP8[($415)];
   var $417=(($416)&(255));
   var $418=$417 & 1;
   var $419=(($418)|(0))!=0;
   if ($419) { label = 16; break; } else { label = 17; break; }
  case 16: 
   $69=$405;
   var $421=$69;
   var $422=(($421)|0);
   $68=$422;
   var $423=$68;
   var $424=$423;
   $67=$424;
   var $425=$67;
   var $426=(($425)|0);
   var $427=(($426)|0);
   var $428=$427;
   var $429=(($428+4)|0);
   var $430=HEAP32[(($429)>>2)];
   var $445 = $430;label = 18; break;
  case 17: 
   $72=$405;
   var $432=$72;
   var $433=(($432)|0);
   $71=$433;
   var $434=$71;
   var $435=$434;
   $70=$435;
   var $436=$70;
   var $437=(($436)|0);
   var $438=(($437)|0);
   var $439=$438;
   var $440=(($439)|0);
   var $441=$440;
   var $442=HEAP8[($441)];
   var $443=(($442)&(255));
   var $444=$443 >> 1;
   var $445 = $444;label = 18; break;
  case 18: 
   var $445;
   var $446=(($445)|(0))==0;
   if ($446) { label = 33; break; } else { label = 19; break; }
  case 19: 
   var $448=$259;
   var $449=$448 & 512;
   var $450=(($449)|(0))!=0;
   if ($450) { label = 20; break; } else { label = 33; break; }
  case 20: 
   var $452=$268;
   $16=$452;
   var $453=$16;
   $15=$453;
   var $454=$15;
   $14=$454;
   var $455=$14;
   $13=$455;
   var $456=$13;
   var $457=(($456)|0);
   $12=$457;
   var $458=$12;
   var $459=$458;
   $11=$459;
   var $460=$11;
   var $461=(($460)|0);
   var $462=(($461)|0);
   var $463=$462;
   var $464=(($463)|0);
   var $465=$464;
   var $466=HEAP8[($465)];
   var $467=(($466)&(255));
   var $468=$467 & 1;
   var $469=(($468)|(0))!=0;
   if ($469) { label = 21; break; } else { label = 22; break; }
  case 21: 
   $7=$455;
   var $471=$7;
   var $472=(($471)|0);
   $6=$472;
   var $473=$6;
   var $474=$473;
   $5=$474;
   var $475=$5;
   var $476=(($475)|0);
   var $477=(($476)|0);
   var $478=$477;
   var $479=(($478+8)|0);
   var $480=HEAP32[(($479)>>2)];
   var $492 = $480;label = 23; break;
  case 22: 
   $10=$455;
   var $482=$10;
   var $483=(($482)|0);
   $9=$483;
   var $484=$9;
   var $485=$484;
   $8=$485;
   var $486=$8;
   var $487=(($486)|0);
   var $488=(($487)|0);
   var $489=$488;
   var $490=(($489+1)|0);
   var $491=(($490)|0);
   var $492 = $491;label = 23; break;
  case 23: 
   var $492;
   $3=$271;
   $4=$492;
   var $493=$3;
   var $494=$4;
   $1=$493;
   $2=$494;
   var $495=$1;
   var $496=(($495)|0);
   var $497=$2;
   HEAP32[(($496)>>2)]=$497;
   var $498=$268;
   $42=$498;
   var $499=$42;
   $41=$499;
   var $500=$41;
   $40=$500;
   var $501=$40;
   $39=$501;
   var $502=$39;
   var $503=(($502)|0);
   $38=$503;
   var $504=$38;
   var $505=$504;
   $37=$505;
   var $506=$37;
   var $507=(($506)|0);
   var $508=(($507)|0);
   var $509=$508;
   var $510=(($509)|0);
   var $511=$510;
   var $512=HEAP8[($511)];
   var $513=(($512)&(255));
   var $514=$513 & 1;
   var $515=(($514)|(0))!=0;
   if ($515) { label = 24; break; } else { label = 25; break; }
  case 24: 
   $33=$501;
   var $517=$33;
   var $518=(($517)|0);
   $32=$518;
   var $519=$32;
   var $520=$519;
   $31=$520;
   var $521=$31;
   var $522=(($521)|0);
   var $523=(($522)|0);
   var $524=$523;
   var $525=(($524+8)|0);
   var $526=HEAP32[(($525)>>2)];
   var $538 = $526;label = 26; break;
  case 25: 
   $36=$501;
   var $528=$36;
   var $529=(($528)|0);
   $35=$529;
   var $530=$35;
   var $531=$530;
   $34=$531;
   var $532=$34;
   var $533=(($532)|0);
   var $534=(($533)|0);
   var $535=$534;
   var $536=(($535+1)|0);
   var $537=(($536)|0);
   var $538 = $537;label = 26; break;
  case 26: 
   var $538;
   $26=$499;
   var $539=$26;
   $25=$539;
   var $540=$25;
   var $541=(($540)|0);
   $24=$541;
   var $542=$24;
   var $543=$542;
   $23=$543;
   var $544=$23;
   var $545=(($544)|0);
   var $546=(($545)|0);
   var $547=$546;
   var $548=(($547)|0);
   var $549=$548;
   var $550=HEAP8[($549)];
   var $551=(($550)&(255));
   var $552=$551 & 1;
   var $553=(($552)|(0))!=0;
   if ($553) { label = 27; break; } else { label = 28; break; }
  case 27: 
   $19=$539;
   var $555=$19;
   var $556=(($555)|0);
   $18=$556;
   var $557=$18;
   var $558=$557;
   $17=$558;
   var $559=$17;
   var $560=(($559)|0);
   var $561=(($560)|0);
   var $562=$561;
   var $563=(($562+4)|0);
   var $564=HEAP32[(($563)>>2)];
   var $579 = $564;label = 29; break;
  case 28: 
   $22=$539;
   var $566=$22;
   var $567=(($566)|0);
   $21=$567;
   var $568=$21;
   var $569=$568;
   $20=$569;
   var $570=$20;
   var $571=(($570)|0);
   var $572=(($571)|0);
   var $573=$572;
   var $574=(($573)|0);
   var $575=$574;
   var $576=HEAP8[($575)];
   var $577=(($576)&(255));
   var $578=$577 >> 1;
   var $579 = $578;label = 29; break;
  case 29: 
   var $579;
   var $580=(($538+$579)|0);
   $29=$272;
   $30=$580;
   var $581=$29;
   var $582=$30;
   $27=$581;
   $28=$582;
   var $583=$27;
   var $584=(($583)|0);
   var $585=$28;
   HEAP32[(($584)>>2)]=$585;
   var $586=$258;
   var $587=HEAP32[(($586)>>2)];
   var $tmp17=$63;
   var $tmp18=$271;
   assert(4 % 1 === 0);HEAP8[($tmp17)]=HEAP8[($tmp18)];HEAP8[((($tmp17)+(1))|0)]=HEAP8[((($tmp18)+(1))|0)];HEAP8[((($tmp17)+(2))|0)]=HEAP8[((($tmp18)+(2))|0)];HEAP8[((($tmp17)+(3))|0)]=HEAP8[((($tmp18)+(3))|0)];
   var $tmp19=$62;
   var $tmp20=$272;
   assert(4 % 1 === 0);HEAP8[($tmp19)]=HEAP8[($tmp20)];HEAP8[((($tmp19)+(1))|0)]=HEAP8[((($tmp20)+(1))|0)];HEAP8[((($tmp19)+(2))|0)]=HEAP8[((($tmp20)+(2))|0)];HEAP8[((($tmp19)+(3))|0)]=HEAP8[((($tmp20)+(3))|0)];
   $57=$587;
   var $588=$59;
   var $589=$63;
   assert(4 % 1 === 0);HEAP32[(($588)>>2)]=HEAP32[(($589)>>2)];
   var $tmp_i21=$56;
   var $tmp1_i22=$59;
   assert(4 % 1 === 0);HEAP8[($tmp_i21)]=HEAP8[($tmp1_i22)];HEAP8[((($tmp_i21)+(1))|0)]=HEAP8[((($tmp1_i22)+(1))|0)];HEAP8[((($tmp_i21)+(2))|0)]=HEAP8[((($tmp1_i22)+(2))|0)];HEAP8[((($tmp_i21)+(3))|0)]=HEAP8[((($tmp1_i22)+(3))|0)];
   var $590=$58;
   var $591=$56;
   assert(4 % 1 === 0);HEAP32[(($590)>>2)]=HEAP32[(($591)>>2)];
   var $592=$61;
   var $593=$62;
   assert(4 % 1 === 0);HEAP32[(($592)>>2)]=HEAP32[(($593)>>2)];
   var $tmp6_i23=$43;
   var $tmp7_i24=$61;
   assert(4 % 1 === 0);HEAP8[($tmp6_i23)]=HEAP8[($tmp7_i24)];HEAP8[((($tmp6_i23)+(1))|0)]=HEAP8[((($tmp7_i24)+(1))|0)];HEAP8[((($tmp6_i23)+(2))|0)]=HEAP8[((($tmp7_i24)+(2))|0)];HEAP8[((($tmp6_i23)+(3))|0)]=HEAP8[((($tmp7_i24)+(3))|0)];
   var $594=$60;
   var $595=$43;
   assert(4 % 1 === 0);HEAP32[(($594)>>2)]=HEAP32[(($595)>>2)];
   var $596=$57;
   $44=$596;
   var $597=$44;
   var $tmp2_i25=$55;
   var $tmp3_i26=$58;
   assert(4 % 1 === 0);HEAP8[($tmp2_i25)]=HEAP8[($tmp3_i26)];HEAP8[((($tmp2_i25)+(1))|0)]=HEAP8[((($tmp3_i26)+(1))|0)];HEAP8[((($tmp2_i25)+(2))|0)]=HEAP8[((($tmp3_i26)+(2))|0)];HEAP8[((($tmp2_i25)+(3))|0)]=HEAP8[((($tmp3_i26)+(3))|0)];
   var $tmp4_i27=$54;
   var $tmp5_i28=$60;
   assert(4 % 1 === 0);HEAP8[($tmp4_i27)]=HEAP8[($tmp5_i28)];HEAP8[((($tmp4_i27)+(1))|0)]=HEAP8[((($tmp5_i28)+(1))|0)];HEAP8[((($tmp4_i27)+(2))|0)]=HEAP8[((($tmp5_i28)+(2))|0)];HEAP8[((($tmp4_i27)+(3))|0)]=HEAP8[((($tmp5_i28)+(3))|0)];
   $53=$597;
   label = 30; break;
  case 30: 
   $51=$55;
   $52=$54;
   var $599=$51;
   var $600=$52;
   $49=$599;
   $50=$600;
   var $601=$49;
   $48=$601;
   var $602=$48;
   var $603=(($602)|0);
   var $604=HEAP32[(($603)>>2)];
   var $605=$50;
   $47=$605;
   var $606=$47;
   var $607=(($606)|0);
   var $608=HEAP32[(($607)>>2)];
   var $609=(($604)|(0))==(($608)|(0));
   var $610=$609 ^ 1;
   if ($610) { label = 31; break; } else { label = 32; break; }
  case 31: 
   $45=$55;
   var $612=$45;
   var $613=(($612)|0);
   var $614=HEAP32[(($613)>>2)];
   var $615=HEAP8[($614)];
   var $616=$53;
   HEAP8[($616)]=$615;
   $46=$55;
   var $617=$46;
   var $618=(($617)|0);
   var $619=HEAP32[(($618)>>2)];
   var $620=(($619+1)|0);
   HEAP32[(($618)>>2)]=$620;
   var $621=$53;
   var $622=(($621+1)|0);
   $53=$622;
   label = 30; break;
  case 32: 
   var $623=$53;
   var $624=$258;
   HEAP32[(($624)>>2)]=$623;
   label = 33; break;
  case 33: 
   label = 97; break;
  case 34: 
   var $627=$258;
   var $628=HEAP32[(($627)>>2)];
   $__t=$628;
   var $629=$263;
   var $630=(($629) & 1);
   if ($630) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $632=$260;
   var $633=(($632+1)|0);
   $260=$633;
   label = 36; break;
  case 36: 
   var $635=$260;
   $__d=$635;
   label = 37; break;
  case 37: 
   var $637=$__d;
   var $638=$261;
   var $639=(($637)>>>(0)) < (($638)>>>(0));
   if ($639) { label = 38; break; } else { label = 45; break; }
  case 38: 
   var $641=$262;
   var $642=$__d;
   var $643=HEAP8[($642)];
   $64=$641;
   $65=2048;
   $66=$643;
   var $644=$64;
   var $645=$66;
   var $646=(($645 << 24) >> 24);
   var $647=(($646)>>>(0)) <= 127;
   if ($647) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $649=$66;
   var $650=(($649 << 24) >> 24);
   var $651=(($644+8)|0);
   var $652=HEAP32[(($651)>>2)];
   var $653=(($652+($650<<1))|0);
   var $654=HEAP16[(($653)>>1)];
   var $655=(($654)&(65535));
   var $656=$65;
   var $657=(($656)&(65535));
   var $658=$655 & $657;
   var $660 = $658;label = 41; break;
  case 40: 
   var $660 = 0;label = 41; break;
  case 41: 
   var $660;
   var $661=(($660)|(0))!=0;
   if ($661) { label = 43; break; } else { label = 42; break; }
  case 42: 
   label = 45; break;
  case 43: 
   label = 44; break;
  case 44: 
   var $665=$__d;
   var $666=(($665+1)|0);
   $__d=$666;
   label = 37; break;
  case 45: 
   var $668=$270;
   var $669=(($668)|(0)) > 0;
   if ($669) { label = 46; break; } else { label = 60; break; }
  case 46: 
   var $671=$270;
   $__f=$671;
   label = 47; break;
  case 47: 
   var $673=$__d;
   var $674=$260;
   var $675=(($673)>>>(0)) > (($674)>>>(0));
   if ($675) { label = 48; break; } else { var $680 = 0;label = 49; break; }
  case 48: 
   var $677=$__f;
   var $678=(($677)|(0)) > 0;
   var $680 = $678;label = 49; break;
  case 49: 
   var $680;
   if ($680) { label = 50; break; } else { label = 52; break; }
  case 50: 
   var $682=$__d;
   var $683=((($682)-(1))|0);
   $__d=$683;
   var $684=HEAP8[($683)];
   var $685=$258;
   var $686=HEAP32[(($685)>>2)];
   var $687=(($686+1)|0);
   HEAP32[(($685)>>2)]=$687;
   HEAP8[($686)]=$684;
   label = 51; break;
  case 51: 
   var $689=$__f;
   var $690=((($689)-(1))|0);
   $__f=$690;
   label = 47; break;
  case 52: 
   var $692=$__f;
   var $693=(($692)|(0)) > 0;
   if ($693) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $695=$262;
   $78=$695;
   $79=48;
   var $696=$78;
   var $697=$696;
   var $698=HEAP32[(($697)>>2)];
   var $699=(($698+28)|0);
   var $700=HEAP32[(($699)>>2)];
   var $701=$79;
   var $702=FUNCTION_TABLE[$700]($696, $701);
   var $705 = $702;label = 55; break;
  case 54: 
   var $705 = 0;label = 55; break;
  case 55: 
   var $705;
   $__z=$705;
   label = 56; break;
  case 56: 
   var $707=$__f;
   var $708=(($707)|(0)) > 0;
   if ($708) { label = 57; break; } else { label = 59; break; }
  case 57: 
   var $710=$__z;
   var $711=$258;
   var $712=HEAP32[(($711)>>2)];
   var $713=(($712+1)|0);
   HEAP32[(($711)>>2)]=$713;
   HEAP8[($712)]=$710;
   label = 58; break;
  case 58: 
   var $715=$__f;
   var $716=((($715)-(1))|0);
   $__f=$716;
   label = 56; break;
  case 59: 
   var $718=$265;
   var $719=$258;
   var $720=HEAP32[(($719)>>2)];
   var $721=(($720+1)|0);
   HEAP32[(($719)>>2)]=$721;
   HEAP8[($720)]=$718;
   label = 60; break;
  case 60: 
   var $723=$__d;
   var $724=$260;
   var $725=(($723)|(0))==(($724)|(0));
   if ($725) { label = 61; break; } else { label = 62; break; }
  case 61: 
   var $727=$262;
   $93=$727;
   $94=48;
   var $728=$93;
   var $729=$728;
   var $730=HEAP32[(($729)>>2)];
   var $731=(($730+28)|0);
   var $732=HEAP32[(($731)>>2)];
   var $733=$94;
   var $734=FUNCTION_TABLE[$732]($728, $733);
   var $735=$258;
   var $736=HEAP32[(($735)>>2)];
   var $737=(($736+1)|0);
   HEAP32[(($735)>>2)]=$737;
   HEAP8[($736)]=$734;
   label = 91; break;
  case 62: 
   $__ng=0;
   $__ig=0;
   var $739=$267;
   $105=$739;
   var $740=$105;
   $104=$740;
   var $741=$104;
   $103=$741;
   var $742=$103;
   var $743=(($742)|0);
   $102=$743;
   var $744=$102;
   var $745=$744;
   $101=$745;
   var $746=$101;
   var $747=(($746)|0);
   var $748=(($747)|0);
   var $749=$748;
   var $750=(($749)|0);
   var $751=$750;
   var $752=HEAP8[($751)];
   var $753=(($752)&(255));
   var $754=$753 & 1;
   var $755=(($754)|(0))!=0;
   if ($755) { label = 63; break; } else { label = 64; break; }
  case 63: 
   $97=$741;
   var $757=$97;
   var $758=(($757)|0);
   $96=$758;
   var $759=$96;
   var $760=$759;
   $95=$760;
   var $761=$95;
   var $762=(($761)|0);
   var $763=(($762)|0);
   var $764=$763;
   var $765=(($764+4)|0);
   var $766=HEAP32[(($765)>>2)];
   var $781 = $766;label = 65; break;
  case 64: 
   $100=$741;
   var $768=$100;
   var $769=(($768)|0);
   $99=$769;
   var $770=$99;
   var $771=$770;
   $98=$771;
   var $772=$98;
   var $773=(($772)|0);
   var $774=(($773)|0);
   var $775=$774;
   var $776=(($775)|0);
   var $777=$776;
   var $778=HEAP8[($777)];
   var $779=(($778)&(255));
   var $780=$779 >> 1;
   var $781 = $780;label = 65; break;
  case 65: 
   var $781;
   var $782=(($781)|(0))==0;
   if ($782) { label = 66; break; } else { label = 67; break; }
  case 66: 
   var $832 = -1;label = 71; break;
  case 67: 
   var $785=$267;
   var $786=$__ig;
   $117=$785;
   $118=$786;
   var $787=$117;
   $116=$787;
   var $788=$116;
   $115=$788;
   var $789=$115;
   $114=$789;
   var $790=$114;
   var $791=(($790)|0);
   $113=$791;
   var $792=$113;
   var $793=$792;
   $112=$793;
   var $794=$112;
   var $795=(($794)|0);
   var $796=(($795)|0);
   var $797=$796;
   var $798=(($797)|0);
   var $799=$798;
   var $800=HEAP8[($799)];
   var $801=(($800)&(255));
   var $802=$801 & 1;
   var $803=(($802)|(0))!=0;
   if ($803) { label = 68; break; } else { label = 69; break; }
  case 68: 
   $108=$789;
   var $805=$108;
   var $806=(($805)|0);
   $107=$806;
   var $807=$107;
   var $808=$807;
   $106=$808;
   var $809=$106;
   var $810=(($809)|0);
   var $811=(($810)|0);
   var $812=$811;
   var $813=(($812+8)|0);
   var $814=HEAP32[(($813)>>2)];
   var $826 = $814;label = 70; break;
  case 69: 
   $111=$789;
   var $816=$111;
   var $817=(($816)|0);
   $110=$817;
   var $818=$110;
   var $819=$818;
   $109=$819;
   var $820=$109;
   var $821=(($820)|0);
   var $822=(($821)|0);
   var $823=$822;
   var $824=(($823+1)|0);
   var $825=(($824)|0);
   var $826 = $825;label = 70; break;
  case 70: 
   var $826;
   var $827=$118;
   var $828=(($826+$827)|0);
   var $829=HEAP8[($828)];
   var $830=(($829 << 24) >> 24);
   var $832 = $830;label = 71; break;
  case 71: 
   var $832;
   $__gl=$832;
   label = 72; break;
  case 72: 
   var $834=$__d;
   var $835=$260;
   var $836=(($834)|(0))!=(($835)|(0));
   if ($836) { label = 73; break; } else { label = 90; break; }
  case 73: 
   var $838=$__ng;
   var $839=$__gl;
   var $840=(($838)|(0))==(($839)|(0));
   if ($840) { label = 74; break; } else { label = 89; break; }
  case 74: 
   var $842=$266;
   var $843=$258;
   var $844=HEAP32[(($843)>>2)];
   var $845=(($844+1)|0);
   HEAP32[(($843)>>2)]=$845;
   HEAP8[($844)]=$842;
   $__ng=0;
   var $846=$__ig;
   var $847=((($846)+(1))|0);
   $__ig=$847;
   var $848=$267;
   $128=$848;
   var $849=$128;
   $127=$849;
   var $850=$127;
   var $851=(($850)|0);
   $126=$851;
   var $852=$126;
   var $853=$852;
   $125=$853;
   var $854=$125;
   var $855=(($854)|0);
   var $856=(($855)|0);
   var $857=$856;
   var $858=(($857)|0);
   var $859=$858;
   var $860=HEAP8[($859)];
   var $861=(($860)&(255));
   var $862=$861 & 1;
   var $863=(($862)|(0))!=0;
   if ($863) { label = 75; break; } else { label = 76; break; }
  case 75: 
   $121=$849;
   var $865=$121;
   var $866=(($865)|0);
   $120=$866;
   var $867=$120;
   var $868=$867;
   $119=$868;
   var $869=$119;
   var $870=(($869)|0);
   var $871=(($870)|0);
   var $872=$871;
   var $873=(($872+4)|0);
   var $874=HEAP32[(($873)>>2)];
   var $889 = $874;label = 77; break;
  case 76: 
   $124=$849;
   var $876=$124;
   var $877=(($876)|0);
   $123=$877;
   var $878=$123;
   var $879=$878;
   $122=$879;
   var $880=$122;
   var $881=(($880)|0);
   var $882=(($881)|0);
   var $883=$882;
   var $884=(($883)|0);
   var $885=$884;
   var $886=HEAP8[($885)];
   var $887=(($886)&(255));
   var $888=$887 >> 1;
   var $889 = $888;label = 77; break;
  case 77: 
   var $889;
   var $890=(($847)>>>(0)) < (($889)>>>(0));
   if ($890) { label = 78; break; } else { label = 88; break; }
  case 78: 
   var $892=$267;
   var $893=$__ig;
   $140=$892;
   $141=$893;
   var $894=$140;
   $139=$894;
   var $895=$139;
   $138=$895;
   var $896=$138;
   $137=$896;
   var $897=$137;
   var $898=(($897)|0);
   $136=$898;
   var $899=$136;
   var $900=$899;
   $135=$900;
   var $901=$135;
   var $902=(($901)|0);
   var $903=(($902)|0);
   var $904=$903;
   var $905=(($904)|0);
   var $906=$905;
   var $907=HEAP8[($906)];
   var $908=(($907)&(255));
   var $909=$908 & 1;
   var $910=(($909)|(0))!=0;
   if ($910) { label = 79; break; } else { label = 80; break; }
  case 79: 
   $131=$896;
   var $912=$131;
   var $913=(($912)|0);
   $130=$913;
   var $914=$130;
   var $915=$914;
   $129=$915;
   var $916=$129;
   var $917=(($916)|0);
   var $918=(($917)|0);
   var $919=$918;
   var $920=(($919+8)|0);
   var $921=HEAP32[(($920)>>2)];
   var $933 = $921;label = 81; break;
  case 80: 
   $134=$896;
   var $923=$134;
   var $924=(($923)|0);
   $133=$924;
   var $925=$133;
   var $926=$925;
   $132=$926;
   var $927=$132;
   var $928=(($927)|0);
   var $929=(($928)|0);
   var $930=$929;
   var $931=(($930+1)|0);
   var $932=(($931)|0);
   var $933 = $932;label = 81; break;
  case 81: 
   var $933;
   var $934=$141;
   var $935=(($933+$934)|0);
   var $936=HEAP8[($935)];
   var $937=(($936 << 24) >> 24);
   var $938=127;
   var $939=(($937)|(0))==(($938)|(0));
   if ($939) { label = 82; break; } else { label = 83; break; }
  case 82: 
   var $989 = -1;label = 87; break;
  case 83: 
   var $942=$267;
   var $943=$__ig;
   $153=$942;
   $154=$943;
   var $944=$153;
   $152=$944;
   var $945=$152;
   $151=$945;
   var $946=$151;
   $150=$946;
   var $947=$150;
   var $948=(($947)|0);
   $149=$948;
   var $949=$149;
   var $950=$949;
   $148=$950;
   var $951=$148;
   var $952=(($951)|0);
   var $953=(($952)|0);
   var $954=$953;
   var $955=(($954)|0);
   var $956=$955;
   var $957=HEAP8[($956)];
   var $958=(($957)&(255));
   var $959=$958 & 1;
   var $960=(($959)|(0))!=0;
   if ($960) { label = 84; break; } else { label = 85; break; }
  case 84: 
   $144=$946;
   var $962=$144;
   var $963=(($962)|0);
   $143=$963;
   var $964=$143;
   var $965=$964;
   $142=$965;
   var $966=$142;
   var $967=(($966)|0);
   var $968=(($967)|0);
   var $969=$968;
   var $970=(($969+8)|0);
   var $971=HEAP32[(($970)>>2)];
   var $983 = $971;label = 86; break;
  case 85: 
   $147=$946;
   var $973=$147;
   var $974=(($973)|0);
   $146=$974;
   var $975=$146;
   var $976=$975;
   $145=$976;
   var $977=$145;
   var $978=(($977)|0);
   var $979=(($978)|0);
   var $980=$979;
   var $981=(($980+1)|0);
   var $982=(($981)|0);
   var $983 = $982;label = 86; break;
  case 86: 
   var $983;
   var $984=$154;
   var $985=(($983+$984)|0);
   var $986=HEAP8[($985)];
   var $987=(($986 << 24) >> 24);
   var $989 = $987;label = 87; break;
  case 87: 
   var $989;
   $__gl=$989;
   label = 88; break;
  case 88: 
   label = 89; break;
  case 89: 
   var $992=$__d;
   var $993=((($992)-(1))|0);
   $__d=$993;
   var $994=HEAP8[($993)];
   var $995=$258;
   var $996=HEAP32[(($995)>>2)];
   var $997=(($996+1)|0);
   HEAP32[(($995)>>2)]=$997;
   HEAP8[($996)]=$994;
   var $998=$__ng;
   var $999=((($998)+(1))|0);
   $__ng=$999;
   label = 72; break;
  case 90: 
   label = 91; break;
  case 91: 
   var $1002=$__t;
   var $1003=$258;
   var $1004=HEAP32[(($1003)>>2)];
   $163=$1002;
   $164=$1004;
   var $1005=$163;
   var $1006=$164;
   var $tmp_i5=$162;
   var $tmp1_i6=$165;
   assert(1 % 1 === 0);HEAP8[($tmp_i5)]=HEAP8[($tmp1_i6)];
   $160=$1005;
   $161=$1006;
   var $1007=$160;
   var $1008=$161;
   var $1009=(($1007)|(0))!=(($1008)|(0));
   if ($1009) { label = 92; break; } else { label = 96; break; }
  case 92: 
   label = 93; break;
  case 93: 
   var $1012=$160;
   var $1013=$161;
   var $1014=((($1013)-(1))|0);
   $161=$1014;
   var $1015=(($1012)>>>(0)) < (($1014)>>>(0));
   if ($1015) { label = 94; break; } else { label = 95; break; }
  case 94: 
   var $1017=$160;
   var $1018=$161;
   $158=$1017;
   $159=$1018;
   var $1019=$158;
   $157=$1019;
   var $1020=$157;
   var $1021=HEAP8[($1020)];
   HEAP8[($__t_i_i_i)]=$1021;
   var $1022=$159;
   $155=$1022;
   var $1023=$155;
   var $1024=HEAP8[($1023)];
   var $1025=$158;
   HEAP8[($1025)]=$1024;
   $156=$__t_i_i_i;
   var $1026=$156;
   var $1027=HEAP8[($1026)];
   var $1028=$159;
   HEAP8[($1028)]=$1027;
   var $1029=$160;
   var $1030=(($1029+1)|0);
   $160=$1030;
   label = 93; break;
  case 95: 
   label = 96; break;
  case 96: 
   label = 97; break;
  case 97: 
   label = 98; break;
  case 98: 
   var $1034=$__p;
   var $1035=((($1034)+(1))|0);
   $__p=$1035;
   label = 2; break;
  case 99: 
   var $1037=$269;
   $175=$1037;
   var $1038=$175;
   $174=$1038;
   var $1039=$174;
   var $1040=(($1039)|0);
   $173=$1040;
   var $1041=$173;
   var $1042=$1041;
   $172=$1042;
   var $1043=$172;
   var $1044=(($1043)|0);
   var $1045=(($1044)|0);
   var $1046=$1045;
   var $1047=(($1046)|0);
   var $1048=$1047;
   var $1049=HEAP8[($1048)];
   var $1050=(($1049)&(255));
   var $1051=$1050 & 1;
   var $1052=(($1051)|(0))!=0;
   if ($1052) { label = 100; break; } else { label = 101; break; }
  case 100: 
   $168=$1038;
   var $1054=$168;
   var $1055=(($1054)|0);
   $167=$1055;
   var $1056=$167;
   var $1057=$1056;
   $166=$1057;
   var $1058=$166;
   var $1059=(($1058)|0);
   var $1060=(($1059)|0);
   var $1061=$1060;
   var $1062=(($1061+4)|0);
   var $1063=HEAP32[(($1062)>>2)];
   var $1078 = $1063;label = 102; break;
  case 101: 
   $171=$1038;
   var $1065=$171;
   var $1066=(($1065)|0);
   $170=$1066;
   var $1067=$170;
   var $1068=$1067;
   $169=$1068;
   var $1069=$169;
   var $1070=(($1069)|0);
   var $1071=(($1070)|0);
   var $1072=$1071;
   var $1073=(($1072)|0);
   var $1074=$1073;
   var $1075=HEAP8[($1074)];
   var $1076=(($1075)&(255));
   var $1077=$1076 >> 1;
   var $1078 = $1077;label = 102; break;
  case 102: 
   var $1078;
   var $1079=(($1078)>>>(0)) > 1;
   if ($1079) { label = 103; break; } else { label = 116; break; }
  case 103: 
   var $1081=$269;
   $191=$1081;
   var $1082=$191;
   $190=$1082;
   var $1083=$190;
   $189=$1083;
   var $1084=$189;
   $188=$1084;
   var $1085=$188;
   var $1086=(($1085)|0);
   $187=$1086;
   var $1087=$187;
   var $1088=$1087;
   $186=$1088;
   var $1089=$186;
   var $1090=(($1089)|0);
   var $1091=(($1090)|0);
   var $1092=$1091;
   var $1093=(($1092)|0);
   var $1094=$1093;
   var $1095=HEAP8[($1094)];
   var $1096=(($1095)&(255));
   var $1097=$1096 & 1;
   var $1098=(($1097)|(0))!=0;
   if ($1098) { label = 104; break; } else { label = 105; break; }
  case 104: 
   $182=$1084;
   var $1100=$182;
   var $1101=(($1100)|0);
   $181=$1101;
   var $1102=$181;
   var $1103=$1102;
   $180=$1103;
   var $1104=$180;
   var $1105=(($1104)|0);
   var $1106=(($1105)|0);
   var $1107=$1106;
   var $1108=(($1107+8)|0);
   var $1109=HEAP32[(($1108)>>2)];
   var $1121 = $1109;label = 106; break;
  case 105: 
   $185=$1084;
   var $1111=$185;
   var $1112=(($1111)|0);
   $184=$1112;
   var $1113=$184;
   var $1114=$1113;
   $183=$1114;
   var $1115=$183;
   var $1116=(($1115)|0);
   var $1117=(($1116)|0);
   var $1118=$1117;
   var $1119=(($1118+1)|0);
   var $1120=(($1119)|0);
   var $1121 = $1120;label = 106; break;
  case 106: 
   var $1121;
   $178=$274;
   $179=$1121;
   var $1122=$178;
   var $1123=$179;
   $176=$1122;
   $177=$1123;
   var $1124=$176;
   var $1125=(($1124)|0);
   var $1126=$177;
   HEAP32[(($1125)>>2)]=$1126;
   $194=$274;
   $195=1;
   var $1127=$194;
   var $1128=$273;
   var $1129=$1127;
   assert(4 % 1 === 0);HEAP32[(($1128)>>2)]=HEAP32[(($1129)>>2)];
   var $1130=$195;
   $192=$273;
   $193=$1130;
   var $1131=$192;
   var $1132=$193;
   var $1133=(($1131)|0);
   var $1134=HEAP32[(($1133)>>2)];
   var $1135=(($1134+$1132)|0);
   HEAP32[(($1133)>>2)]=$1135;
   var $1136=$269;
   $221=$1136;
   var $1137=$221;
   $220=$1137;
   var $1138=$220;
   $219=$1138;
   var $1139=$219;
   $218=$1139;
   var $1140=$218;
   var $1141=(($1140)|0);
   $217=$1141;
   var $1142=$217;
   var $1143=$1142;
   $216=$1143;
   var $1144=$216;
   var $1145=(($1144)|0);
   var $1146=(($1145)|0);
   var $1147=$1146;
   var $1148=(($1147)|0);
   var $1149=$1148;
   var $1150=HEAP8[($1149)];
   var $1151=(($1150)&(255));
   var $1152=$1151 & 1;
   var $1153=(($1152)|(0))!=0;
   if ($1153) { label = 107; break; } else { label = 108; break; }
  case 107: 
   $212=$1139;
   var $1155=$212;
   var $1156=(($1155)|0);
   $211=$1156;
   var $1157=$211;
   var $1158=$1157;
   $210=$1158;
   var $1159=$210;
   var $1160=(($1159)|0);
   var $1161=(($1160)|0);
   var $1162=$1161;
   var $1163=(($1162+8)|0);
   var $1164=HEAP32[(($1163)>>2)];
   var $1176 = $1164;label = 109; break;
  case 108: 
   $215=$1139;
   var $1166=$215;
   var $1167=(($1166)|0);
   $214=$1167;
   var $1168=$214;
   var $1169=$1168;
   $213=$1169;
   var $1170=$213;
   var $1171=(($1170)|0);
   var $1172=(($1171)|0);
   var $1173=$1172;
   var $1174=(($1173+1)|0);
   var $1175=(($1174)|0);
   var $1176 = $1175;label = 109; break;
  case 109: 
   var $1176;
   $205=$1137;
   var $1177=$205;
   $204=$1177;
   var $1178=$204;
   var $1179=(($1178)|0);
   $203=$1179;
   var $1180=$203;
   var $1181=$1180;
   $202=$1181;
   var $1182=$202;
   var $1183=(($1182)|0);
   var $1184=(($1183)|0);
   var $1185=$1184;
   var $1186=(($1185)|0);
   var $1187=$1186;
   var $1188=HEAP8[($1187)];
   var $1189=(($1188)&(255));
   var $1190=$1189 & 1;
   var $1191=(($1190)|(0))!=0;
   if ($1191) { label = 110; break; } else { label = 111; break; }
  case 110: 
   $198=$1177;
   var $1193=$198;
   var $1194=(($1193)|0);
   $197=$1194;
   var $1195=$197;
   var $1196=$1195;
   $196=$1196;
   var $1197=$196;
   var $1198=(($1197)|0);
   var $1199=(($1198)|0);
   var $1200=$1199;
   var $1201=(($1200+4)|0);
   var $1202=HEAP32[(($1201)>>2)];
   var $1217 = $1202;label = 112; break;
  case 111: 
   $201=$1177;
   var $1204=$201;
   var $1205=(($1204)|0);
   $200=$1205;
   var $1206=$200;
   var $1207=$1206;
   $199=$1207;
   var $1208=$199;
   var $1209=(($1208)|0);
   var $1210=(($1209)|0);
   var $1211=$1210;
   var $1212=(($1211)|0);
   var $1213=$1212;
   var $1214=HEAP8[($1213)];
   var $1215=(($1214)&(255));
   var $1216=$1215 >> 1;
   var $1217 = $1216;label = 112; break;
  case 112: 
   var $1217;
   var $1218=(($1176+$1217)|0);
   $208=$275;
   $209=$1218;
   var $1219=$208;
   var $1220=$209;
   $206=$1219;
   $207=$1220;
   var $1221=$206;
   var $1222=(($1221)|0);
   var $1223=$207;
   HEAP32[(($1222)>>2)]=$1223;
   var $1224=$258;
   var $1225=HEAP32[(($1224)>>2)];
   var $tmp=$242;
   var $tmp1=$273;
   assert(4 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];HEAP8[((($tmp)+(1))|0)]=HEAP8[((($tmp1)+(1))|0)];HEAP8[((($tmp)+(2))|0)]=HEAP8[((($tmp1)+(2))|0)];HEAP8[((($tmp)+(3))|0)]=HEAP8[((($tmp1)+(3))|0)];
   var $tmp2=$241;
   var $tmp3=$275;
   assert(4 % 1 === 0);HEAP8[($tmp2)]=HEAP8[($tmp3)];HEAP8[((($tmp2)+(1))|0)]=HEAP8[((($tmp3)+(1))|0)];HEAP8[((($tmp2)+(2))|0)]=HEAP8[((($tmp3)+(2))|0)];HEAP8[((($tmp2)+(3))|0)]=HEAP8[((($tmp3)+(3))|0)];
   $236=$1225;
   var $1226=$238;
   var $1227=$242;
   assert(4 % 1 === 0);HEAP32[(($1226)>>2)]=HEAP32[(($1227)>>2)];
   var $tmp_i=$235;
   var $tmp1_i=$238;
   assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
   var $1228=$237;
   var $1229=$235;
   assert(4 % 1 === 0);HEAP32[(($1228)>>2)]=HEAP32[(($1229)>>2)];
   var $1230=$240;
   var $1231=$241;
   assert(4 % 1 === 0);HEAP32[(($1230)>>2)]=HEAP32[(($1231)>>2)];
   var $tmp6_i=$222;
   var $tmp7_i=$240;
   assert(4 % 1 === 0);HEAP8[($tmp6_i)]=HEAP8[($tmp7_i)];HEAP8[((($tmp6_i)+(1))|0)]=HEAP8[((($tmp7_i)+(1))|0)];HEAP8[((($tmp6_i)+(2))|0)]=HEAP8[((($tmp7_i)+(2))|0)];HEAP8[((($tmp6_i)+(3))|0)]=HEAP8[((($tmp7_i)+(3))|0)];
   var $1232=$239;
   var $1233=$222;
   assert(4 % 1 === 0);HEAP32[(($1232)>>2)]=HEAP32[(($1233)>>2)];
   var $1234=$236;
   $223=$1234;
   var $1235=$223;
   var $tmp2_i=$234;
   var $tmp3_i=$237;
   assert(4 % 1 === 0);HEAP8[($tmp2_i)]=HEAP8[($tmp3_i)];HEAP8[((($tmp2_i)+(1))|0)]=HEAP8[((($tmp3_i)+(1))|0)];HEAP8[((($tmp2_i)+(2))|0)]=HEAP8[((($tmp3_i)+(2))|0)];HEAP8[((($tmp2_i)+(3))|0)]=HEAP8[((($tmp3_i)+(3))|0)];
   var $tmp4_i=$233;
   var $tmp5_i=$239;
   assert(4 % 1 === 0);HEAP8[($tmp4_i)]=HEAP8[($tmp5_i)];HEAP8[((($tmp4_i)+(1))|0)]=HEAP8[((($tmp5_i)+(1))|0)];HEAP8[((($tmp4_i)+(2))|0)]=HEAP8[((($tmp5_i)+(2))|0)];HEAP8[((($tmp4_i)+(3))|0)]=HEAP8[((($tmp5_i)+(3))|0)];
   $232=$1235;
   label = 113; break;
  case 113: 
   $230=$234;
   $231=$233;
   var $1237=$230;
   var $1238=$231;
   $228=$1237;
   $229=$1238;
   var $1239=$228;
   $227=$1239;
   var $1240=$227;
   var $1241=(($1240)|0);
   var $1242=HEAP32[(($1241)>>2)];
   var $1243=$229;
   $226=$1243;
   var $1244=$226;
   var $1245=(($1244)|0);
   var $1246=HEAP32[(($1245)>>2)];
   var $1247=(($1242)|(0))==(($1246)|(0));
   var $1248=$1247 ^ 1;
   if ($1248) { label = 114; break; } else { label = 115; break; }
  case 114: 
   $224=$234;
   var $1250=$224;
   var $1251=(($1250)|0);
   var $1252=HEAP32[(($1251)>>2)];
   var $1253=HEAP8[($1252)];
   var $1254=$232;
   HEAP8[($1254)]=$1253;
   $225=$234;
   var $1255=$225;
   var $1256=(($1255)|0);
   var $1257=HEAP32[(($1256)>>2)];
   var $1258=(($1257+1)|0);
   HEAP32[(($1256)>>2)]=$1258;
   var $1259=$232;
   var $1260=(($1259+1)|0);
   $232=$1260;
   label = 113; break;
  case 115: 
   var $1261=$232;
   var $1262=$258;
   HEAP32[(($1262)>>2)]=$1261;
   label = 116; break;
  case 116: 
   var $1264=$259;
   var $1265=$1264 & 176;
   var $1266=(($1265)|(0))==32;
   if ($1266) { label = 117; break; } else { label = 118; break; }
  case 117: 
   var $1268=$258;
   var $1269=HEAP32[(($1268)>>2)];
   var $1270=$257;
   HEAP32[(($1270)>>2)]=$1269;
   label = 121; break;
  case 118: 
   var $1272=$259;
   var $1273=$1272 & 176;
   var $1274=(($1273)|(0))!=16;
   if ($1274) { label = 119; break; } else { label = 120; break; }
  case 119: 
   var $1276=$256;
   var $1277=$257;
   HEAP32[(($1277)>>2)]=$1276;
   label = 120; break;
  case 120: 
   label = 121; break;
  case 121: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $__tmp_i;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $__tmp_i_i_i10;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119=__stackBase__;
   var $120=(__stackBase__)+(8);
   var $121;
   var $122;
   var $123=(__stackBase__)+(16);
   var $124=(__stackBase__)+(24);
   var $125;
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $__a_i_i_i4;
   var $__i_i_i_i5;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $144;
   var $145;
   var $146;
   var $__a_i_i_i1;
   var $__i_i_i_i2;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154;
   var $155;
   var $156;
   var $157;
   var $158;
   var $159;
   var $160;
   var $__tmp_i_i_i;
   var $161;
   var $162;
   var $163;
   var $164;
   var $165;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177;
   var $178;
   var $179;
   var $180;
   var $181;
   var $182;
   var $183;
   var $184;
   var $185;
   var $186;
   var $187;
   var $188;
   var $189;
   var $190;
   var $191;
   var $192;
   var $193;
   var $194;
   var $195;
   var $196;
   var $197;
   var $198;
   var $199;
   var $200;
   var $201;
   var $202;
   var $__loc=(__stackBase__)+(32);
   var $__ct;
   var $203;
   var $204;
   var $__neg;
   var $__pat=(__stackBase__)+(40);
   var $__dp=(__stackBase__)+(48);
   var $__ts=(__stackBase__)+(56);
   var $__grp=(__stackBase__)+(64);
   var $__sym=(__stackBase__)+(80);
   var $__sn=(__stackBase__)+(96);
   var $__fd=(__stackBase__)+(112);
   var $__mbuf=(__stackBase__)+(120);
   var $__mb;
   var $__h=(__stackBase__)+(224);
   var $205=(__stackBase__)+(232);
   var $__exn;
   var $__mi=(__stackBase__)+(240);
   var $__me=(__stackBase__)+(248);
   var $206=(__stackBase__)+(256);
   var $207;
   $198=$this;
   var $208=(($__intl)&(1));
   $199=$208;
   $200=$__iob;
   $201=$__fl;
   $202=$__digits;
   var $209=$198;
   var $210=$200;
   __ZNKSt3__18ios_base6getlocEv($__loc, $210);
   $197=$__loc;
   var $211=$197;
   var $212 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($211, 19816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 53; break; }
  case 2: 
   var $213=$212;
   label = 3; break;
  case 3: 
   $__ct=$213;
   var $215=$202;
   $196=$215;
   var $216=$196;
   $195=$216;
   var $217=$195;
   var $218=(($217)|0);
   $194=$218;
   var $219=$194;
   var $220=$219;
   $193=$220;
   var $221=$193;
   var $222=(($221)|0);
   var $223=(($222)|0);
   var $224=$223;
   var $225=(($224)|0);
   var $226=$225;
   var $227=HEAP8[($226)];
   var $228=(($227)&(255));
   var $229=$228 & 1;
   var $230=(($229)|(0))!=0;
   if ($230) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $189=$216;
   var $232=$189;
   var $233=(($232)|0);
   $188=$233;
   var $234=$188;
   var $235=$234;
   $187=$235;
   var $236=$187;
   var $237=(($236)|0);
   var $238=(($237)|0);
   var $239=$238;
   var $240=(($239+4)|0);
   var $241=HEAP32[(($240)>>2)];
   var $256 = $241;label = 6; break;
  case 5: 
   $192=$216;
   var $243=$192;
   var $244=(($243)|0);
   $191=$244;
   var $245=$191;
   var $246=$245;
   $190=$246;
   var $247=$190;
   var $248=(($247)|0);
   var $249=(($248)|0);
   var $250=$249;
   var $251=(($250)|0);
   var $252=$251;
   var $253=HEAP8[($252)];
   var $254=(($253)&(255));
   var $255=$254 >> 1;
   var $256 = $255;label = 6; break;
  case 6: 
   var $256;
   var $257=(($256)>>>(0)) > 0;
   if ($257) { label = 7; break; } else { var $317 = 0;label = 14; break; }
  case 7: 
   var $259=$202;
   $185=$259;
   $186=0;
   var $260=$185;
   $184=$260;
   var $261=$184;
   $183=$261;
   var $262=$183;
   $182=$262;
   var $263=$182;
   var $264=(($263)|0);
   $181=$264;
   var $265=$181;
   var $266=$265;
   $180=$266;
   var $267=$180;
   var $268=(($267)|0);
   var $269=(($268)|0);
   var $270=$269;
   var $271=(($270)|0);
   var $272=$271;
   var $273=HEAP8[($272)];
   var $274=(($273)&(255));
   var $275=$274 & 1;
   var $276=(($275)|(0))!=0;
   if ($276) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $176=$262;
   var $278=$176;
   var $279=(($278)|0);
   $175=$279;
   var $280=$175;
   var $281=$280;
   $174=$281;
   var $282=$174;
   var $283=(($282)|0);
   var $284=(($283)|0);
   var $285=$284;
   var $286=(($285+8)|0);
   var $287=HEAP32[(($286)>>2)];
   var $299 = $287;label = 10; break;
  case 9: 
   $179=$262;
   var $289=$179;
   var $290=(($289)|0);
   $178=$290;
   var $291=$178;
   var $292=$291;
   $177=$292;
   var $293=$177;
   var $294=(($293)|0);
   var $295=(($294)|0);
   var $296=$295;
   var $297=(($296+1)|0);
   var $298=(($297)|0);
   var $299 = $298;label = 10; break;
  case 10: 
   var $299;
   var $300=$186;
   var $301=(($299+$300)|0);
   label = 11; break;
  case 11: 
   var $303=HEAP8[($301)];
   var $304=(($303 << 24) >> 24);
   var $305=$__ct;
   $172=$305;
   $173=45;
   var $306=$172;
   var $307=$306;
   var $308=HEAP32[(($307)>>2)];
   var $309=(($308+28)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=$173;
   var $312 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$310]($306, $311) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 53; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $314=(($312 << 24) >> 24);
   var $315=(($304)|(0))==(($314)|(0));
   var $317 = $315;label = 14; break;
  case 14: 
   var $317;
   var $318=(($317)&(1));
   $__neg=$318;
   $171=$__grp;
   var $319=$171;
   $170=$319;
   var $320=$170;
   var $321=$320;
   var $322=(($320)|0);
   $169=$322;
   var $323=$169;
   $168=$323;
   var $324=$168;
   var $325=$324;
   $167=$325;
   var $326=$167;
   var $327=$326;
   $166=$327;
   var $328=$166;
   var $329=(($326)|0);
   $165=$320;
   var $330=$165;
   var $331=(($330)|0);
   $164=$331;
   var $332=$164;
   var $333=$332;
   $163=$333;
   var $334=$163;
   var $335=(($334)|0);
   var $336=(($335)|0);
   var $337=$336;
   var $338=(($337)|0);
   $__a_i_i_i=$338;
   $__i_i_i_i=0;
   label = 15; break;
  case 15: 
   var $340=$__i_i_i_i;
   var $341=(($340)>>>(0)) < 3;
   if ($341) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $343=$__i_i_i_i;
   var $344=$__a_i_i_i;
   var $345=(($344+($343<<2))|0);
   HEAP32[(($345)>>2)]=0;
   var $346=$__i_i_i_i;
   var $347=((($346)+(1))|0);
   $__i_i_i_i=$347;
   label = 15; break;
  case 17: 
   $152=$__sym;
   var $348=$152;
   $151=$348;
   var $349=$151;
   var $350=$349;
   var $351=(($349)|0);
   $150=$351;
   var $352=$150;
   $149=$352;
   var $353=$149;
   var $354=$353;
   $148=$354;
   var $355=$148;
   var $356=$355;
   $147=$356;
   var $357=$147;
   var $358=(($355)|0);
   $146=$349;
   var $359=$146;
   var $360=(($359)|0);
   $145=$360;
   var $361=$145;
   var $362=$361;
   $144=$362;
   var $363=$144;
   var $364=(($363)|0);
   var $365=(($364)|0);
   var $366=$365;
   var $367=(($366)|0);
   $__a_i_i_i1=$367;
   $__i_i_i_i2=0;
   label = 18; break;
  case 18: 
   var $369=$__i_i_i_i2;
   var $370=(($369)>>>(0)) < 3;
   if ($370) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $372=$__i_i_i_i2;
   var $373=$__a_i_i_i1;
   var $374=(($373+($372<<2))|0);
   HEAP32[(($374)>>2)]=0;
   var $375=$__i_i_i_i2;
   var $376=((($375)+(1))|0);
   $__i_i_i_i2=$376;
   label = 18; break;
  case 20: 
   $143=$__sn;
   var $377=$143;
   $142=$377;
   var $378=$142;
   var $379=$378;
   var $380=(($378)|0);
   $141=$380;
   var $381=$141;
   $140=$381;
   var $382=$140;
   var $383=$382;
   $139=$383;
   var $384=$139;
   var $385=$384;
   $138=$385;
   var $386=$138;
   var $387=(($384)|0);
   $137=$378;
   var $388=$137;
   var $389=(($388)|0);
   $136=$389;
   var $390=$136;
   var $391=$390;
   $135=$391;
   var $392=$135;
   var $393=(($392)|0);
   var $394=(($393)|0);
   var $395=$394;
   var $396=(($395)|0);
   $__a_i_i_i4=$396;
   $__i_i_i_i5=0;
   label = 21; break;
  case 21: 
   var $398=$__i_i_i_i5;
   var $399=(($398)>>>(0)) < 3;
   if ($399) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $401=$__i_i_i_i5;
   var $402=$__a_i_i_i4;
   var $403=(($402+($401<<2))|0);
   HEAP32[(($403)>>2)]=0;
   var $404=$__i_i_i_i5;
   var $405=((($404)+(1))|0);
   $__i_i_i_i5=$405;
   label = 21; break;
  case 23: 
   var $406=$199;
   var $407=(($406) & 1);
   var $408=$__neg;
   var $409=(($408) & 1);
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($407, $409, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 54; break; }
  case 24: 
   var $411=(($__mbuf)|0);
   $__mb=$411;
   HEAP32[(($205)>>2)]=272;
   $132=$__h;
   $133=0;
   $134=$205;
   var $412=$132;
   var $413=$133;
   var $414=$134;
   $129=$412;
   $130=$413;
   $131=$414;
   var $415=$129;
   var $416=(($415)|0);
   var $417=$130;
   var $418=$131;
   $128=$418;
   var $419=$128;
   var $420=HEAP32[(($419)>>2)];
   $125=$416;
   $126=$417;
   $127=$420;
   var $421=$125;
   var $422=$126;
   var $423=$127;
   $122=$421;
   HEAP32[(($123)>>2)]=$422;
   HEAP32[(($124)>>2)]=$423;
   var $424=$122;
   var $425=$424;
   $121=$123;
   var $426=$121;
   var $427=HEAP32[(($426)>>2)];
   $115=$124;
   var $428=$115;
   var $429=HEAP32[(($428)>>2)];
   $118=$425;
   HEAP32[(($119)>>2)]=$427;
   HEAP32[(($120)>>2)]=$429;
   var $430=$118;
   var $431=(($430)|0);
   $117=$119;
   var $432=$117;
   var $433=HEAP32[(($432)>>2)];
   HEAP32[(($431)>>2)]=$433;
   var $434=(($430+4)|0);
   $116=$120;
   var $435=$116;
   var $436=HEAP32[(($435)>>2)];
   HEAP32[(($434)>>2)]=$436;
   var $437=$202;
   $114=$437;
   var $438=$114;
   $113=$438;
   var $439=$113;
   var $440=(($439)|0);
   $112=$440;
   var $441=$112;
   var $442=$441;
   $111=$442;
   var $443=$111;
   var $444=(($443)|0);
   var $445=(($444)|0);
   var $446=$445;
   var $447=(($446)|0);
   var $448=$447;
   var $449=HEAP8[($448)];
   var $450=(($449)&(255));
   var $451=$450 & 1;
   var $452=(($451)|(0))!=0;
   if ($452) { label = 25; break; } else { label = 26; break; }
  case 25: 
   $107=$438;
   var $454=$107;
   var $455=(($454)|0);
   $106=$455;
   var $456=$106;
   var $457=$456;
   $105=$457;
   var $458=$105;
   var $459=(($458)|0);
   var $460=(($459)|0);
   var $461=$460;
   var $462=(($461+4)|0);
   var $463=HEAP32[(($462)>>2)];
   var $478 = $463;label = 27; break;
  case 26: 
   $110=$438;
   var $465=$110;
   var $466=(($465)|0);
   $109=$466;
   var $467=$109;
   var $468=$467;
   $108=$468;
   var $469=$108;
   var $470=(($469)|0);
   var $471=(($470)|0);
   var $472=$471;
   var $473=(($472)|0);
   var $474=$473;
   var $475=HEAP8[($474)];
   var $476=(($475)&(255));
   var $477=$476 >> 1;
   var $478 = $477;label = 27; break;
  case 27: 
   var $478;
   var $479=HEAP32[(($__fd)>>2)];
   var $480=(($478)|(0)) > (($479)|(0));
   if ($480) { label = 28; break; } else { label = 38; break; }
  case 28: 
   var $482=$202;
   $61=$482;
   var $483=$61;
   $60=$483;
   var $484=$60;
   var $485=(($484)|0);
   $59=$485;
   var $486=$59;
   var $487=$486;
   $58=$487;
   var $488=$58;
   var $489=(($488)|0);
   var $490=(($489)|0);
   var $491=$490;
   var $492=(($491)|0);
   var $493=$492;
   var $494=HEAP8[($493)];
   var $495=(($494)&(255));
   var $496=$495 & 1;
   var $497=(($496)|(0))!=0;
   if ($497) { label = 29; break; } else { label = 30; break; }
  case 29: 
   $54=$483;
   var $499=$54;
   var $500=(($499)|0);
   $53=$500;
   var $501=$53;
   var $502=$501;
   $52=$502;
   var $503=$52;
   var $504=(($503)|0);
   var $505=(($504)|0);
   var $506=$505;
   var $507=(($506+4)|0);
   var $508=HEAP32[(($507)>>2)];
   var $523 = $508;label = 31; break;
  case 30: 
   $57=$483;
   var $510=$57;
   var $511=(($510)|0);
   $56=$511;
   var $512=$56;
   var $513=$512;
   $55=$513;
   var $514=$55;
   var $515=(($514)|0);
   var $516=(($515)|0);
   var $517=$516;
   var $518=(($517)|0);
   var $519=$518;
   var $520=HEAP8[($519)];
   var $521=(($520)&(255));
   var $522=$521 >> 1;
   var $523 = $522;label = 31; break;
  case 31: 
   var $523;
   var $524=HEAP32[(($__fd)>>2)];
   var $525=((($523)-($524))|0);
   var $526=($525<<1);
   $51=$__sn;
   var $527=$51;
   $50=$527;
   var $528=$50;
   var $529=(($528)|0);
   $49=$529;
   var $530=$49;
   var $531=$530;
   $48=$531;
   var $532=$48;
   var $533=(($532)|0);
   var $534=(($533)|0);
   var $535=$534;
   var $536=(($535)|0);
   var $537=$536;
   var $538=HEAP8[($537)];
   var $539=(($538)&(255));
   var $540=$539 & 1;
   var $541=(($540)|(0))!=0;
   if ($541) { label = 32; break; } else { label = 33; break; }
  case 32: 
   $44=$527;
   var $543=$44;
   var $544=(($543)|0);
   $43=$544;
   var $545=$43;
   var $546=$545;
   $42=$546;
   var $547=$42;
   var $548=(($547)|0);
   var $549=(($548)|0);
   var $550=$549;
   var $551=(($550+4)|0);
   var $552=HEAP32[(($551)>>2)];
   var $567 = $552;label = 34; break;
  case 33: 
   $47=$527;
   var $554=$47;
   var $555=(($554)|0);
   $46=$555;
   var $556=$46;
   var $557=$556;
   $45=$557;
   var $558=$45;
   var $559=(($558)|0);
   var $560=(($559)|0);
   var $561=$560;
   var $562=(($561)|0);
   var $563=$562;
   var $564=HEAP8[($563)];
   var $565=(($564)&(255));
   var $566=$565 >> 1;
   var $567 = $566;label = 34; break;
  case 34: 
   var $567;
   var $568=((($526)+($567))|0);
   $30=$__sym;
   var $569=$30;
   $29=$569;
   var $570=$29;
   var $571=(($570)|0);
   $28=$571;
   var $572=$28;
   var $573=$572;
   $27=$573;
   var $574=$27;
   var $575=(($574)|0);
   var $576=(($575)|0);
   var $577=$576;
   var $578=(($577)|0);
   var $579=$578;
   var $580=HEAP8[($579)];
   var $581=(($580)&(255));
   var $582=$581 & 1;
   var $583=(($582)|(0))!=0;
   if ($583) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $23=$569;
   var $585=$23;
   var $586=(($585)|0);
   $22=$586;
   var $587=$22;
   var $588=$587;
   $21=$588;
   var $589=$21;
   var $590=(($589)|0);
   var $591=(($590)|0);
   var $592=$591;
   var $593=(($592+4)|0);
   var $594=HEAP32[(($593)>>2)];
   var $609 = $594;label = 37; break;
  case 36: 
   $26=$569;
   var $596=$26;
   var $597=(($596)|0);
   $25=$597;
   var $598=$25;
   var $599=$598;
   $24=$599;
   var $600=$24;
   var $601=(($600)|0);
   var $602=(($601)|0);
   var $603=$602;
   var $604=(($603)|0);
   var $605=$604;
   var $606=HEAP8[($605)];
   var $607=(($606)&(255));
   var $608=$607 >> 1;
   var $609 = $608;label = 37; break;
  case 37: 
   var $609;
   var $610=((($568)+($609))|0);
   var $611=HEAP32[(($__fd)>>2)];
   var $612=((($610)+($611))|0);
   var $613=((($612)+(1))|0);
   var $702 = $613;label = 45; break;
  case 38: 
   $20=$__sn;
   var $615=$20;
   $19=$615;
   var $616=$19;
   var $617=(($616)|0);
   $18=$617;
   var $618=$18;
   var $619=$618;
   $17=$619;
   var $620=$17;
   var $621=(($620)|0);
   var $622=(($621)|0);
   var $623=$622;
   var $624=(($623)|0);
   var $625=$624;
   var $626=HEAP8[($625)];
   var $627=(($626)&(255));
   var $628=$627 & 1;
   var $629=(($628)|(0))!=0;
   if ($629) { label = 39; break; } else { label = 40; break; }
  case 39: 
   $13=$615;
   var $631=$13;
   var $632=(($631)|0);
   $12=$632;
   var $633=$12;
   var $634=$633;
   $11=$634;
   var $635=$11;
   var $636=(($635)|0);
   var $637=(($636)|0);
   var $638=$637;
   var $639=(($638+4)|0);
   var $640=HEAP32[(($639)>>2)];
   var $655 = $640;label = 41; break;
  case 40: 
   $16=$615;
   var $642=$16;
   var $643=(($642)|0);
   $15=$643;
   var $644=$15;
   var $645=$644;
   $14=$645;
   var $646=$14;
   var $647=(($646)|0);
   var $648=(($647)|0);
   var $649=$648;
   var $650=(($649)|0);
   var $651=$650;
   var $652=HEAP8[($651)];
   var $653=(($652)&(255));
   var $654=$653 >> 1;
   var $655 = $654;label = 41; break;
  case 41: 
   var $655;
   $10=$__sym;
   var $656=$10;
   $9=$656;
   var $657=$9;
   var $658=(($657)|0);
   $8=$658;
   var $659=$8;
   var $660=$659;
   $7=$660;
   var $661=$7;
   var $662=(($661)|0);
   var $663=(($662)|0);
   var $664=$663;
   var $665=(($664)|0);
   var $666=$665;
   var $667=HEAP8[($666)];
   var $668=(($667)&(255));
   var $669=$668 & 1;
   var $670=(($669)|(0))!=0;
   if ($670) { label = 42; break; } else { label = 43; break; }
  case 42: 
   $3=$656;
   var $672=$3;
   var $673=(($672)|0);
   $2=$673;
   var $674=$2;
   var $675=$674;
   $1=$675;
   var $676=$1;
   var $677=(($676)|0);
   var $678=(($677)|0);
   var $679=$678;
   var $680=(($679+4)|0);
   var $681=HEAP32[(($680)>>2)];
   var $696 = $681;label = 44; break;
  case 43: 
   $6=$656;
   var $683=$6;
   var $684=(($683)|0);
   $5=$684;
   var $685=$5;
   var $686=$685;
   $4=$686;
   var $687=$4;
   var $688=(($687)|0);
   var $689=(($688)|0);
   var $690=$689;
   var $691=(($690)|0);
   var $692=$691;
   var $693=HEAP8[($692)];
   var $694=(($693)&(255));
   var $695=$694 >> 1;
   var $696 = $695;label = 44; break;
  case 44: 
   var $696;
   var $697=((($655)+($696))|0);
   var $698=HEAP32[(($__fd)>>2)];
   var $699=((($697)+($698))|0);
   var $700=((($699)+(2))|0);
   var $702 = $700;label = 45; break;
  case 45: 
   var $702;
   $__exn=$702;
   var $703=$__exn;
   var $704=(($703)>>>(0)) > 100;
   if ($704) { label = 46; break; } else { label = 61; break; }
  case 46: 
   var $706=$__exn;
   var $707=$706;
   var $708=_malloc($707);
   $37=$__h;
   $38=$708;
   var $709=$37;
   var $710=(($709)|0);
   $36=$710;
   var $711=$36;
   var $712=$711;
   $35=$712;
   var $713=$35;
   var $714=(($713)|0);
   var $715=HEAP32[(($714)>>2)];
   $__tmp_i=$715;
   var $716=$38;
   var $717=(($709)|0);
   $34=$717;
   var $718=$34;
   var $719=$718;
   $33=$719;
   var $720=$33;
   var $721=(($720)|0);
   HEAP32[(($721)>>2)]=$716;
   var $722=$__tmp_i;
   var $723=(($722)|(0))!=0;
   if ($723) { label = 47; break; } else { label = 50; break; }
  case 47: 
   var $725=(($709)|0);
   $32=$725;
   var $726=$32;
   var $727=$726;
   $31=$727;
   var $728=$31;
   var $729=(($728+4)|0);
   var $730=HEAP32[(($729)>>2)];
   var $731=$__tmp_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$730]($731) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 49; break; }
  case 48: 
   label = 50; break;
  case 49: 
   var $734$0 = ___cxa_find_matching_catch(-1, -1,0); $734$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 50: 
   $41=$__h;
   var $735=$41;
   var $736=(($735)|0);
   $40=$736;
   var $737=$40;
   var $738=$737;
   $39=$738;
   var $739=$39;
   var $740=(($739)|0);
   var $741=HEAP32[(($740)>>2)];
   $__mb=$741;
   var $742=$__mb;
   var $743=(($742)|(0))==0;
   if ($743) { label = 51; break; } else { label = 60; break; }
  case 51: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 55; break; }
  case 52: 
   label = 60; break;
  case 53: 
   var $747$0 = ___cxa_find_matching_catch(-1, -1); $747$1 = tempRet0;
   var $748=$747$0;
   $203=$748;
   var $749=$747$1;
   $204=$749;
   label = 79; break;
  case 54: 
   var $751$0 = ___cxa_find_matching_catch(-1, -1); $751$1 = tempRet0;
   var $752=$751$0;
   $203=$752;
   var $753=$751$1;
   $204=$753;
   label = 78; break;
  case 55: 
   var $755$0 = ___cxa_find_matching_catch(-1, -1); $755$1 = tempRet0;
   var $756=$755$0;
   $203=$756;
   var $757=$755$1;
   $204=$757;
   $71=$__h;
   var $758=$71;
   $70=$758;
   var $759=$70;
   $68=$759;
   $69=0;
   var $760=$68;
   var $761=(($760)|0);
   $67=$761;
   var $762=$67;
   var $763=$762;
   $66=$763;
   var $764=$66;
   var $765=(($764)|0);
   var $766=HEAP32[(($765)>>2)];
   $__tmp_i_i_i10=$766;
   var $767=$69;
   var $768=(($760)|0);
   $65=$768;
   var $769=$65;
   var $770=$769;
   $64=$770;
   var $771=$64;
   var $772=(($771)|0);
   HEAP32[(($772)>>2)]=$767;
   var $773=$__tmp_i_i_i10;
   var $774=(($773)|(0))!=0;
   if ($774) { label = 56; break; } else { label = 59; break; }
  case 56: 
   var $776=(($760)|0);
   $63=$776;
   var $777=$63;
   var $778=$777;
   $62=$778;
   var $779=$62;
   var $780=(($779+4)|0);
   var $781=HEAP32[(($780)>>2)];
   var $782=$__tmp_i_i_i10;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$781]($782) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { label = 58; break; }
  case 57: 
   label = 59; break;
  case 58: 
   var $785$0 = ___cxa_find_matching_catch(-1, -1,0); $785$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 59: 
   label = 78; break;
  case 60: 
   label = 61; break;
  case 61: 
   var $788=$__mb;
   var $789=$200;
   $72=$789;
   var $790=$72;
   var $791=(($790+4)|0);
   var $792=HEAP32[(($791)>>2)];
   label = 62; break;
  case 62: 
   var $794=$202;
   $83=$794;
   var $795=$83;
   $82=$795;
   var $796=$82;
   $81=$796;
   var $797=$81;
   var $798=(($797)|0);
   $80=$798;
   var $799=$80;
   var $800=$799;
   $79=$800;
   var $801=$79;
   var $802=(($801)|0);
   var $803=(($802)|0);
   var $804=$803;
   var $805=(($804)|0);
   var $806=$805;
   var $807=HEAP8[($806)];
   var $808=(($807)&(255));
   var $809=$808 & 1;
   var $810=(($809)|(0))!=0;
   if ($810) { label = 63; break; } else { label = 64; break; }
  case 63: 
   $75=$796;
   var $812=$75;
   var $813=(($812)|0);
   $74=$813;
   var $814=$74;
   var $815=$814;
   $73=$815;
   var $816=$73;
   var $817=(($816)|0);
   var $818=(($817)|0);
   var $819=$818;
   var $820=(($819+8)|0);
   var $821=HEAP32[(($820)>>2)];
   var $833 = $821;label = 65; break;
  case 64: 
   $78=$796;
   var $823=$78;
   var $824=(($823)|0);
   $77=$824;
   var $825=$77;
   var $826=$825;
   $76=$826;
   var $827=$76;
   var $828=(($827)|0);
   var $829=(($828)|0);
   var $830=$829;
   var $831=(($830+1)|0);
   var $832=(($831)|0);
   var $833 = $832;label = 65; break;
  case 65: 
   var $833;
   var $834=$202;
   $94=$834;
   var $835=$94;
   $93=$835;
   var $836=$93;
   $92=$836;
   var $837=$92;
   var $838=(($837)|0);
   $91=$838;
   var $839=$91;
   var $840=$839;
   $90=$840;
   var $841=$90;
   var $842=(($841)|0);
   var $843=(($842)|0);
   var $844=$843;
   var $845=(($844)|0);
   var $846=$845;
   var $847=HEAP8[($846)];
   var $848=(($847)&(255));
   var $849=$848 & 1;
   var $850=(($849)|(0))!=0;
   if ($850) { label = 66; break; } else { label = 67; break; }
  case 66: 
   $86=$836;
   var $852=$86;
   var $853=(($852)|0);
   $85=$853;
   var $854=$85;
   var $855=$854;
   $84=$855;
   var $856=$84;
   var $857=(($856)|0);
   var $858=(($857)|0);
   var $859=$858;
   var $860=(($859+8)|0);
   var $861=HEAP32[(($860)>>2)];
   var $873 = $861;label = 68; break;
  case 67: 
   $89=$836;
   var $863=$89;
   var $864=(($863)|0);
   $88=$864;
   var $865=$88;
   var $866=$865;
   $87=$866;
   var $867=$87;
   var $868=(($867)|0);
   var $869=(($868)|0);
   var $870=$869;
   var $871=(($870+1)|0);
   var $872=(($871)|0);
   var $873 = $872;label = 68; break;
  case 68: 
   var $873;
   var $874=$202;
   $104=$874;
   var $875=$104;
   $103=$875;
   var $876=$103;
   var $877=(($876)|0);
   $102=$877;
   var $878=$102;
   var $879=$878;
   $101=$879;
   var $880=$101;
   var $881=(($880)|0);
   var $882=(($881)|0);
   var $883=$882;
   var $884=(($883)|0);
   var $885=$884;
   var $886=HEAP8[($885)];
   var $887=(($886)&(255));
   var $888=$887 & 1;
   var $889=(($888)|(0))!=0;
   if ($889) { label = 69; break; } else { label = 70; break; }
  case 69: 
   $97=$875;
   var $891=$97;
   var $892=(($891)|0);
   $96=$892;
   var $893=$96;
   var $894=$893;
   $95=$894;
   var $895=$95;
   var $896=(($895)|0);
   var $897=(($896)|0);
   var $898=$897;
   var $899=(($898+4)|0);
   var $900=HEAP32[(($899)>>2)];
   var $915 = $900;label = 71; break;
  case 70: 
   $100=$875;
   var $902=$100;
   var $903=(($902)|0);
   $99=$903;
   var $904=$99;
   var $905=$904;
   $98=$905;
   var $906=$98;
   var $907=(($906)|0);
   var $908=(($907)|0);
   var $909=$908;
   var $910=(($909)|0);
   var $911=$910;
   var $912=HEAP8[($911)];
   var $913=(($912)&(255));
   var $914=$913 >> 1;
   var $915 = $914;label = 71; break;
  case 71: 
   var $915;
   var $916=(($873+$915)|0);
   var $917=$__ct;
   var $918=$__neg;
   var $919=(($918) & 1);
   var $920=HEAP8[($__dp)];
   var $921=HEAP8[($__ts)];
   var $922=HEAP32[(($__fd)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($788, $__mi, $__me, $792, $833, $916, $917, $919, $__pat, $920, $921, $__grp, $__sym, $__sn, $922) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 72; break; } else { label = 55; break; }
  case 72: 
   var $924=$206;
   var $925=$__s;
   assert(4 % 1 === 0);HEAP32[(($924)>>2)]=HEAP32[(($925)>>2)];
   var $926=$__mb;
   var $927=HEAP32[(($__mi)>>2)];
   var $928=HEAP32[(($__me)>>2)];
   var $929=$200;
   var $930=$201;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $206, $926, $927, $928, $929, $930) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 73; break; } else { label = 55; break; }
  case 73: 
   $207=1;
   $162=$__h;
   var $932=$162;
   $161=$932;
   var $933=$161;
   $159=$933;
   $160=0;
   var $934=$159;
   var $935=(($934)|0);
   $158=$935;
   var $936=$158;
   var $937=$936;
   $157=$937;
   var $938=$157;
   var $939=(($938)|0);
   var $940=HEAP32[(($939)>>2)];
   $__tmp_i_i_i=$940;
   var $941=$160;
   var $942=(($934)|0);
   $156=$942;
   var $943=$156;
   var $944=$943;
   $155=$944;
   var $945=$155;
   var $946=(($945)|0);
   HEAP32[(($946)>>2)]=$941;
   var $947=$__tmp_i_i_i;
   var $948=(($947)|(0))!=0;
   if ($948) { label = 74; break; } else { label = 77; break; }
  case 74: 
   var $950=(($934)|0);
   $154=$950;
   var $951=$154;
   var $952=$951;
   $153=$952;
   var $953=$153;
   var $954=(($953+4)|0);
   var $955=HEAP32[(($954)>>2)];
   var $956=$__tmp_i_i_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$955]($956) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 75; break; } else { label = 76; break; }
  case 75: 
   label = 77; break;
  case 76: 
   var $959$0 = ___cxa_find_matching_catch(-1, -1,0); $959$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 77: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   __ZNSt3__16localeD2Ev($__loc);
   STACKTOP = __stackBase__;
   return;
  case 78: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   label = 79; break;
  case 79: 
   __ZNSt3__16localeD2Ev($__loc);
   label = 80; break;
  case 80: 
   var $963=$203;
   var $964=$204;
   var $965$0=$963;
   var $965$1=0;
   var $966$0=$965$0;
   var $966$1=$964;
   ___resumeException($966$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg_result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1168)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i19;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $__tmp_i_i_i17;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $__tmp_i15;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $__tmp_i_i_i11;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $__tmp_i_i_i8;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97=__stackBase__;
   var $98=(__stackBase__)+(8);
   var $99;
   var $100;
   var $101=(__stackBase__)+(16);
   var $102=(__stackBase__)+(24);
   var $103;
   var $104;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $__a_i_i_i5;
   var $__i_i_i_i6;
   var $116;
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $122;
   var $123;
   var $124;
   var $__a_i_i_i3;
   var $__i_i_i_i4;
   var $125;
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $__tmp_i_i_i2;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154;
   var $155;
   var $156;
   var $157;
   var $158;
   var $159;
   var $160;
   var $161;
   var $162;
   var $163;
   var $164;
   var $165;
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $__tmp_i1;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177;
   var $178;
   var $__tmp_i;
   var $179;
   var $180;
   var $181;
   var $182;
   var $183=(__stackBase__)+(32);
   var $184=(__stackBase__)+(40);
   var $185;
   var $186;
   var $187=(__stackBase__)+(48);
   var $188=(__stackBase__)+(56);
   var $189;
   var $190;
   var $191;
   var $192;
   var $193;
   var $194;
   var $195;
   var $196;
   var $197;
   var $198;
   var $199;
   var $200;
   var $201;
   var $202;
   var $203;
   var $204;
   var $205;
   var $206;
   var $__tmp_i_i_i;
   var $207;
   var $208;
   var $209;
   var $210;
   var $211;
   var $212;
   var $213=(__stackBase__)+(64);
   var $214=(__stackBase__)+(72);
   var $215;
   var $216;
   var $217=(__stackBase__)+(80);
   var $218=(__stackBase__)+(88);
   var $219;
   var $220;
   var $221;
   var $222;
   var $223;
   var $224;
   var $225;
   var $226;
   var $227;
   var $228;
   var $229;
   var $230;
   var $231;
   var $232;
   var $233;
   var $__bs;
   var $__buf=(__stackBase__)+(96);
   var $__bb=(__stackBase__)+(200);
   var $__digits=(__stackBase__)+(208);
   var $__db;
   var $__n;
   var $__hn=(__stackBase__)+(608);
   var $234=(__stackBase__)+(616);
   var $__hd=(__stackBase__)+(624);
   var $235=(__stackBase__)+(632);
   var $236;
   var $237;
   var $__loc=(__stackBase__)+(640);
   var $__ct;
   var $__neg;
   var $__pat=(__stackBase__)+(648);
   var $__dp=(__stackBase__)+(656);
   var $__ts=(__stackBase__)+(664);
   var $__grp=(__stackBase__)+(672);
   var $__sym=(__stackBase__)+(688);
   var $__sn=(__stackBase__)+(704);
   var $__fd=(__stackBase__)+(720);
   var $__mbuf=(__stackBase__)+(728);
   var $__mb;
   var $__hw=(__stackBase__)+(1128);
   var $238=(__stackBase__)+(1136);
   var $__exn;
   var $__mi=(__stackBase__)+(1144);
   var $__me=(__stackBase__)+(1152);
   var $239=(__stackBase__)+(1160);
   var $240;
   $229=$this;
   var $241=(($__intl)&(1));
   $230=$241;
   $231=$__iob;
   $232=$__fl;
   $233=$__units;
   var $242=$229;
   $__bs=100;
   var $243=(($__buf)|0);
   HEAP32[(($__bb)>>2)]=$243;
   var $244=(($__digits)|0);
   $__db=$244;
   var $245=HEAP32[(($__bb)>>2)];
   var $246=$233;
   var $247=_snprintf($245, 100, ((3200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$246,tempInt));
   $__n=$247;
   HEAP32[(($234)>>2)]=272;
   $226=$__hn;
   $227=0;
   $228=$234;
   var $248=$226;
   var $249=$227;
   var $250=$228;
   $223=$248;
   $224=$249;
   $225=$250;
   var $251=$223;
   var $252=(($251)|0);
   var $253=$224;
   var $254=$225;
   $222=$254;
   var $255=$222;
   var $256=HEAP32[(($255)>>2)];
   $219=$252;
   $220=$253;
   $221=$256;
   var $257=$219;
   var $258=$220;
   var $259=$221;
   $216=$257;
   HEAP32[(($217)>>2)]=$258;
   HEAP32[(($218)>>2)]=$259;
   var $260=$216;
   var $261=$260;
   $215=$217;
   var $262=$215;
   var $263=HEAP32[(($262)>>2)];
   $209=$218;
   var $264=$209;
   var $265=HEAP32[(($264)>>2)];
   $212=$261;
   HEAP32[(($213)>>2)]=$263;
   HEAP32[(($214)>>2)]=$265;
   var $266=$212;
   var $267=(($266)|0);
   $211=$213;
   var $268=$211;
   var $269=HEAP32[(($268)>>2)];
   HEAP32[(($267)>>2)]=$269;
   var $270=(($266+4)|0);
   $210=$214;
   var $271=$210;
   var $272=HEAP32[(($271)>>2)];
   HEAP32[(($270)>>2)]=$272;
   HEAP32[(($235)>>2)]=272;
   $196=$__hd;
   $197=0;
   $198=$235;
   var $273=$196;
   var $274=$197;
   var $275=$198;
   $193=$273;
   $194=$274;
   $195=$275;
   var $276=$193;
   var $277=(($276)|0);
   var $278=$194;
   var $279=$195;
   $192=$279;
   var $280=$192;
   var $281=HEAP32[(($280)>>2)];
   $189=$277;
   $190=$278;
   $191=$281;
   var $282=$189;
   var $283=$190;
   var $284=$191;
   $186=$282;
   HEAP32[(($187)>>2)]=$283;
   HEAP32[(($188)>>2)]=$284;
   var $285=$186;
   var $286=$285;
   $185=$187;
   var $287=$185;
   var $288=HEAP32[(($287)>>2)];
   $179=$188;
   var $289=$179;
   var $290=HEAP32[(($289)>>2)];
   $182=$286;
   HEAP32[(($183)>>2)]=$288;
   HEAP32[(($184)>>2)]=$290;
   var $291=$182;
   var $292=(($291)|0);
   $181=$183;
   var $293=$181;
   var $294=HEAP32[(($293)>>2)];
   HEAP32[(($292)>>2)]=$294;
   var $295=(($291+4)|0);
   $180=$184;
   var $296=$180;
   var $297=HEAP32[(($296)>>2)];
   HEAP32[(($295)>>2)]=$297;
   var $298=$__n;
   var $299=(($298)>>>(0)) > 99;
   if ($299) { label = 2; break; } else { label = 20; break; }
  case 2: 
   var $301 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $303=$233;
   var $304 = (function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcPvPKcz($__bb, $301, ((3200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$303,tempInt)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 7; break; }
  case 4: 
   $__n=$304;
   var $306=HEAP32[(($__bb)>>2)];
   var $307=(($306)|(0))==0;
   if ($307) { label = 5; break; } else { label = 8; break; }
  case 5: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 8; break;
  case 7: 
   var $311$0 = ___cxa_find_matching_catch(-1, -1); $311$1 = tempRet0;
   var $312=$311$0;
   $236=$312;
   var $313=$311$1;
   $237=$313;
   label = 86; break;
  case 8: 
   var $315=HEAP32[(($__bb)>>2)];
   $177=$__hn;
   $178=$315;
   var $316=$177;
   var $317=(($316)|0);
   $176=$317;
   var $318=$176;
   var $319=$318;
   $175=$319;
   var $320=$175;
   var $321=(($320)|0);
   var $322=HEAP32[(($321)>>2)];
   $__tmp_i=$322;
   var $323=$178;
   var $324=(($316)|0);
   $174=$324;
   var $325=$174;
   var $326=$325;
   $173=$326;
   var $327=$173;
   var $328=(($327)|0);
   HEAP32[(($328)>>2)]=$323;
   var $329=$__tmp_i;
   var $330=(($329)|(0))!=0;
   if ($330) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $332=(($316)|0);
   $172=$332;
   var $333=$172;
   var $334=$333;
   $171=$334;
   var $335=$171;
   var $336=(($335+4)|0);
   var $337=HEAP32[(($336)>>2)];
   var $338=$__tmp_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$337]($338) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 11; break; }
  case 10: 
   label = 12; break;
  case 11: 
   var $341$0 = ___cxa_find_matching_catch(-1, -1,0); $341$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 12: 
   var $342=$__n;
   var $343=($342<<2);
   var $344=_malloc($343);
   var $345=$344;
   $169=$__hd;
   $170=$345;
   var $346=$169;
   var $347=(($346)|0);
   $168=$347;
   var $348=$168;
   var $349=$348;
   $167=$349;
   var $350=$167;
   var $351=(($350)|0);
   var $352=HEAP32[(($351)>>2)];
   $__tmp_i1=$352;
   var $353=$170;
   var $354=(($346)|0);
   $166=$354;
   var $355=$166;
   var $356=$355;
   $165=$356;
   var $357=$165;
   var $358=(($357)|0);
   HEAP32[(($358)>>2)]=$353;
   var $359=$__tmp_i1;
   var $360=(($359)|(0))!=0;
   if ($360) { label = 13; break; } else { label = 16; break; }
  case 13: 
   var $362=(($346)|0);
   $164=$362;
   var $363=$164;
   var $364=$363;
   $163=$364;
   var $365=$163;
   var $366=(($365+4)|0);
   var $367=HEAP32[(($366)>>2)];
   var $368=$__tmp_i1;
   var $369=$368;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$367]($369) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   label = 16; break;
  case 15: 
   var $372$0 = ___cxa_find_matching_catch(-1, -1,0); $372$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 16: 
   $161=$__hd;
   $162=0;
   var $373=$161;
   $160=$373;
   var $374=$160;
   var $375=(($374)|0);
   $159=$375;
   var $376=$159;
   var $377=$376;
   $158=$377;
   var $378=$158;
   var $379=(($378)|0);
   var $380=HEAP32[(($379)>>2)];
   var $381=(($380)|(0))!=0;
   var $382=$381 ^ 1;
   if ($382) { label = 17; break; } else { label = 19; break; }
  case 17: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 7; break; }
  case 18: 
   label = 19; break;
  case 19: 
   $157=$__hd;
   var $386=$157;
   var $387=(($386)|0);
   $156=$387;
   var $388=$156;
   var $389=$388;
   $155=$389;
   var $390=$155;
   var $391=(($390)|0);
   var $392=HEAP32[(($391)>>2)];
   $__db=$392;
   label = 20; break;
  case 20: 
   var $394=$231;
   (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc, $394) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 7; break; }
  case 21: 
   $154=$__loc;
   var $396=$154;
   var $397 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($396, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 60; break; }
  case 22: 
   var $398=$397;
   label = 23; break;
  case 23: 
   $__ct=$398;
   var $400=$__ct;
   var $401=HEAP32[(($__bb)>>2)];
   var $402=HEAP32[(($__bb)>>2)];
   var $403=$__n;
   var $404=(($402+$403)|0);
   var $405=$__db;
   $150=$400;
   $151=$401;
   $152=$404;
   $153=$405;
   var $406=$150;
   var $407=$406;
   var $408=HEAP32[(($407)>>2)];
   var $409=(($408+48)|0);
   var $410=HEAP32[(($409)>>2)];
   var $411=$151;
   var $412=$152;
   var $413=$153;
   var $414 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$410]($406, $411, $412, $413) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 60; break; }
  case 24: 
   label = 25; break;
  case 25: 
   var $416=$__n;
   var $417=(($416)>>>(0)) > 0;
   if ($417) { label = 26; break; } else { var $425 = 0;label = 27; break; }
  case 26: 
   var $419=HEAP32[(($__bb)>>2)];
   var $420=(($419)|0);
   var $421=HEAP8[($420)];
   var $422=(($421 << 24) >> 24);
   var $423=(($422)|(0))==45;
   var $425 = $423;label = 27; break;
  case 27: 
   var $425;
   var $426=(($425)&(1));
   $__neg=$426;
   $149=$__grp;
   var $427=$149;
   $148=$427;
   var $428=$148;
   var $429=$428;
   var $430=(($428)|0);
   $147=$430;
   var $431=$147;
   $146=$431;
   var $432=$146;
   var $433=$432;
   $145=$433;
   var $434=$145;
   var $435=$434;
   $144=$435;
   var $436=$144;
   var $437=(($434)|0);
   $143=$428;
   var $438=$143;
   var $439=(($438)|0);
   $142=$439;
   var $440=$142;
   var $441=$440;
   $141=$441;
   var $442=$141;
   var $443=(($442)|0);
   var $444=(($443)|0);
   var $445=$444;
   var $446=(($445)|0);
   $__a_i_i_i=$446;
   $__i_i_i_i=0;
   label = 28; break;
  case 28: 
   var $448=$__i_i_i_i;
   var $449=(($448)>>>(0)) < 3;
   if ($449) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $451=$__i_i_i_i;
   var $452=$__a_i_i_i;
   var $453=(($452+($451<<2))|0);
   HEAP32[(($453)>>2)]=0;
   var $454=$__i_i_i_i;
   var $455=((($454)+(1))|0);
   $__i_i_i_i=$455;
   label = 28; break;
  case 30: 
   $130=$__sym;
   var $456=$130;
   $129=$456;
   var $457=$129;
   var $458=$457;
   var $459=(($457)|0);
   $128=$459;
   var $460=$128;
   $127=$460;
   var $461=$127;
   var $462=$461;
   $126=$462;
   var $463=$126;
   var $464=$463;
   $125=$464;
   var $465=$125;
   var $466=(($463)|0);
   $124=$457;
   var $467=$124;
   var $468=(($467)|0);
   $123=$468;
   var $469=$123;
   var $470=$469;
   $122=$470;
   var $471=$122;
   var $472=(($471)|0);
   var $473=(($472)|0);
   var $474=$473;
   var $475=(($474)|0);
   $__a_i_i_i3=$475;
   $__i_i_i_i4=0;
   label = 31; break;
  case 31: 
   var $477=$__i_i_i_i4;
   var $478=(($477)>>>(0)) < 3;
   if ($478) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $480=$__i_i_i_i4;
   var $481=$__a_i_i_i3;
   var $482=(($481+($480<<2))|0);
   HEAP32[(($482)>>2)]=0;
   var $483=$__i_i_i_i4;
   var $484=((($483)+(1))|0);
   $__i_i_i_i4=$484;
   label = 31; break;
  case 33: 
   $121=$__sn;
   var $485=$121;
   $120=$485;
   var $486=$120;
   var $487=$486;
   var $488=(($486)|0);
   $119=$488;
   var $489=$119;
   $118=$489;
   var $490=$118;
   var $491=$490;
   $117=$491;
   var $492=$117;
   var $493=$492;
   $116=$493;
   var $494=$116;
   var $495=(($492)|0);
   $115=$486;
   var $496=$115;
   var $497=(($496)|0);
   $114=$497;
   var $498=$114;
   var $499=$498;
   $113=$499;
   var $500=$113;
   var $501=(($500)|0);
   var $502=(($501)|0);
   var $503=$502;
   var $504=(($503)|0);
   $__a_i_i_i5=$504;
   $__i_i_i_i6=0;
   label = 34; break;
  case 34: 
   var $506=$__i_i_i_i6;
   var $507=(($506)>>>(0)) < 3;
   if ($507) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $509=$__i_i_i_i6;
   var $510=$__a_i_i_i5;
   var $511=(($510+($509<<2))|0);
   HEAP32[(($511)>>2)]=0;
   var $512=$__i_i_i_i6;
   var $513=((($512)+(1))|0);
   $__i_i_i_i6=$513;
   label = 34; break;
  case 36: 
   var $514=$230;
   var $515=(($514) & 1);
   var $516=$__neg;
   var $517=(($516) & 1);
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($515, $517, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 61; break; }
  case 37: 
   var $519=(($__mbuf)|0);
   $__mb=$519;
   HEAP32[(($238)>>2)]=272;
   $110=$__hw;
   $111=0;
   $112=$238;
   var $520=$110;
   var $521=$111;
   var $522=$112;
   $107=$520;
   $108=$521;
   $109=$522;
   var $523=$107;
   var $524=(($523)|0);
   var $525=$108;
   var $526=$109;
   $106=$526;
   var $527=$106;
   var $528=HEAP32[(($527)>>2)];
   $103=$524;
   $104=$525;
   $105=$528;
   var $529=$103;
   var $530=$104;
   var $531=$105;
   $100=$529;
   HEAP32[(($101)>>2)]=$530;
   HEAP32[(($102)>>2)]=$531;
   var $532=$100;
   var $533=$532;
   $99=$101;
   var $534=$99;
   var $535=HEAP32[(($534)>>2)];
   $93=$102;
   var $536=$93;
   var $537=HEAP32[(($536)>>2)];
   $96=$533;
   HEAP32[(($97)>>2)]=$535;
   HEAP32[(($98)>>2)]=$537;
   var $538=$96;
   var $539=(($538)|0);
   $95=$97;
   var $540=$95;
   var $541=HEAP32[(($540)>>2)];
   HEAP32[(($539)>>2)]=$541;
   var $542=(($538+4)|0);
   $94=$98;
   var $543=$94;
   var $544=HEAP32[(($543)>>2)];
   HEAP32[(($542)>>2)]=$544;
   var $545=$__n;
   var $546=HEAP32[(($__fd)>>2)];
   var $547=(($545)|(0)) > (($546)|(0));
   if ($547) { label = 38; break; } else { label = 45; break; }
  case 38: 
   var $549=$__n;
   var $550=HEAP32[(($__fd)>>2)];
   var $551=((($549)-($550))|0);
   var $552=($551<<1);
   $82=$__sn;
   var $553=$82;
   $81=$553;
   var $554=$81;
   var $555=(($554)|0);
   $80=$555;
   var $556=$80;
   var $557=$556;
   $79=$557;
   var $558=$79;
   var $559=(($558)|0);
   var $560=(($559)|0);
   var $561=$560;
   var $562=(($561)|0);
   var $563=$562;
   var $564=HEAP8[($563)];
   var $565=(($564)&(255));
   var $566=$565 & 1;
   var $567=(($566)|(0))!=0;
   if ($567) { label = 39; break; } else { label = 40; break; }
  case 39: 
   $75=$553;
   var $569=$75;
   var $570=(($569)|0);
   $74=$570;
   var $571=$74;
   var $572=$571;
   $73=$572;
   var $573=$73;
   var $574=(($573)|0);
   var $575=(($574)|0);
   var $576=$575;
   var $577=(($576+4)|0);
   var $578=HEAP32[(($577)>>2)];
   var $593 = $578;label = 41; break;
  case 40: 
   $78=$553;
   var $580=$78;
   var $581=(($580)|0);
   $77=$581;
   var $582=$77;
   var $583=$582;
   $76=$583;
   var $584=$76;
   var $585=(($584)|0);
   var $586=(($585)|0);
   var $587=$586;
   var $588=(($587)|0);
   var $589=$588;
   var $590=HEAP8[($589)];
   var $591=(($590)&(255));
   var $592=$591 >> 1;
   var $593 = $592;label = 41; break;
  case 41: 
   var $593;
   var $594=((($552)+($593))|0);
   $72=$__sym;
   var $595=$72;
   $71=$595;
   var $596=$71;
   var $597=(($596)|0);
   $70=$597;
   var $598=$70;
   var $599=$598;
   $69=$599;
   var $600=$69;
   var $601=(($600)|0);
   var $602=(($601)|0);
   var $603=$602;
   var $604=(($603)|0);
   var $605=$604;
   var $606=HEAP8[($605)];
   var $607=(($606)&(255));
   var $608=$607 & 1;
   var $609=(($608)|(0))!=0;
   if ($609) { label = 42; break; } else { label = 43; break; }
  case 42: 
   $65=$595;
   var $611=$65;
   var $612=(($611)|0);
   $64=$612;
   var $613=$64;
   var $614=$613;
   $63=$614;
   var $615=$63;
   var $616=(($615)|0);
   var $617=(($616)|0);
   var $618=$617;
   var $619=(($618+4)|0);
   var $620=HEAP32[(($619)>>2)];
   var $635 = $620;label = 44; break;
  case 43: 
   $68=$595;
   var $622=$68;
   var $623=(($622)|0);
   $67=$623;
   var $624=$67;
   var $625=$624;
   $66=$625;
   var $626=$66;
   var $627=(($626)|0);
   var $628=(($627)|0);
   var $629=$628;
   var $630=(($629)|0);
   var $631=$630;
   var $632=HEAP8[($631)];
   var $633=(($632)&(255));
   var $634=$633 >> 1;
   var $635 = $634;label = 44; break;
  case 44: 
   var $635;
   var $636=((($594)+($635))|0);
   var $637=HEAP32[(($__fd)>>2)];
   var $638=((($636)+($637))|0);
   var $639=((($638)+(1))|0);
   var $728 = $639;label = 52; break;
  case 45: 
   $52=$__sn;
   var $641=$52;
   $51=$641;
   var $642=$51;
   var $643=(($642)|0);
   $50=$643;
   var $644=$50;
   var $645=$644;
   $49=$645;
   var $646=$49;
   var $647=(($646)|0);
   var $648=(($647)|0);
   var $649=$648;
   var $650=(($649)|0);
   var $651=$650;
   var $652=HEAP8[($651)];
   var $653=(($652)&(255));
   var $654=$653 & 1;
   var $655=(($654)|(0))!=0;
   if ($655) { label = 46; break; } else { label = 47; break; }
  case 46: 
   $45=$641;
   var $657=$45;
   var $658=(($657)|0);
   $44=$658;
   var $659=$44;
   var $660=$659;
   $43=$660;
   var $661=$43;
   var $662=(($661)|0);
   var $663=(($662)|0);
   var $664=$663;
   var $665=(($664+4)|0);
   var $666=HEAP32[(($665)>>2)];
   var $681 = $666;label = 48; break;
  case 47: 
   $48=$641;
   var $668=$48;
   var $669=(($668)|0);
   $47=$669;
   var $670=$47;
   var $671=$670;
   $46=$671;
   var $672=$46;
   var $673=(($672)|0);
   var $674=(($673)|0);
   var $675=$674;
   var $676=(($675)|0);
   var $677=$676;
   var $678=HEAP8[($677)];
   var $679=(($678)&(255));
   var $680=$679 >> 1;
   var $681 = $680;label = 48; break;
  case 48: 
   var $681;
   $42=$__sym;
   var $682=$42;
   $41=$682;
   var $683=$41;
   var $684=(($683)|0);
   $40=$684;
   var $685=$40;
   var $686=$685;
   $39=$686;
   var $687=$39;
   var $688=(($687)|0);
   var $689=(($688)|0);
   var $690=$689;
   var $691=(($690)|0);
   var $692=$691;
   var $693=HEAP8[($692)];
   var $694=(($693)&(255));
   var $695=$694 & 1;
   var $696=(($695)|(0))!=0;
   if ($696) { label = 49; break; } else { label = 50; break; }
  case 49: 
   $35=$682;
   var $698=$35;
   var $699=(($698)|0);
   $34=$699;
   var $700=$34;
   var $701=$700;
   $33=$701;
   var $702=$33;
   var $703=(($702)|0);
   var $704=(($703)|0);
   var $705=$704;
   var $706=(($705+4)|0);
   var $707=HEAP32[(($706)>>2)];
   var $722 = $707;label = 51; break;
  case 50: 
   $38=$682;
   var $709=$38;
   var $710=(($709)|0);
   $37=$710;
   var $711=$37;
   var $712=$711;
   $36=$712;
   var $713=$36;
   var $714=(($713)|0);
   var $715=(($714)|0);
   var $716=$715;
   var $717=(($716)|0);
   var $718=$717;
   var $719=HEAP8[($718)];
   var $720=(($719)&(255));
   var $721=$720 >> 1;
   var $722 = $721;label = 51; break;
  case 51: 
   var $722;
   var $723=((($681)+($722))|0);
   var $724=HEAP32[(($__fd)>>2)];
   var $725=((($723)+($724))|0);
   var $726=((($725)+(2))|0);
   var $728 = $726;label = 52; break;
  case 52: 
   var $728;
   $__exn=$728;
   var $729=$__exn;
   var $730=(($729)>>>(0)) > 100;
   if ($730) { label = 53; break; } else { label = 68; break; }
  case 53: 
   var $732=$__exn;
   var $733=($732<<2);
   var $734=_malloc($733);
   var $735=$734;
   $31=$__hw;
   $32=$735;
   var $736=$31;
   var $737=(($736)|0);
   $30=$737;
   var $738=$30;
   var $739=$738;
   $29=$739;
   var $740=$29;
   var $741=(($740)|0);
   var $742=HEAP32[(($741)>>2)];
   $__tmp_i15=$742;
   var $743=$32;
   var $744=(($736)|0);
   $28=$744;
   var $745=$28;
   var $746=$745;
   $27=$746;
   var $747=$27;
   var $748=(($747)|0);
   HEAP32[(($748)>>2)]=$743;
   var $749=$__tmp_i15;
   var $750=(($749)|(0))!=0;
   if ($750) { label = 54; break; } else { label = 57; break; }
  case 54: 
   var $752=(($736)|0);
   $26=$752;
   var $753=$26;
   var $754=$753;
   $25=$754;
   var $755=$25;
   var $756=(($755+4)|0);
   var $757=HEAP32[(($756)>>2)];
   var $758=$__tmp_i15;
   var $759=$758;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$757]($759) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 56; break; }
  case 55: 
   label = 57; break;
  case 56: 
   var $762$0 = ___cxa_find_matching_catch(-1, -1,0); $762$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 57: 
   $24=$__hw;
   var $763=$24;
   var $764=(($763)|0);
   $23=$764;
   var $765=$23;
   var $766=$765;
   $22=$766;
   var $767=$22;
   var $768=(($767)|0);
   var $769=HEAP32[(($768)>>2)];
   $__mb=$769;
   var $770=$__mb;
   var $771=(($770)|(0))==0;
   if ($771) { label = 58; break; } else { label = 67; break; }
  case 58: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 59; break; } else { label = 62; break; }
  case 59: 
   label = 67; break;
  case 60: 
   var $775$0 = ___cxa_find_matching_catch(-1, -1); $775$1 = tempRet0;
   var $776=$775$0;
   $236=$776;
   var $777=$775$1;
   $237=$777;
   label = 85; break;
  case 61: 
   var $779$0 = ___cxa_find_matching_catch(-1, -1); $779$1 = tempRet0;
   var $780=$779$0;
   $236=$780;
   var $781=$779$1;
   $237=$781;
   label = 84; break;
  case 62: 
   var $783$0 = ___cxa_find_matching_catch(-1, -1); $783$1 = tempRet0;
   var $784=$783$0;
   $236=$784;
   var $785=$783$1;
   $237=$785;
   $21=$__hw;
   var $786=$21;
   $20=$786;
   var $787=$20;
   $18=$787;
   $19=0;
   var $788=$18;
   var $789=(($788)|0);
   $17=$789;
   var $790=$17;
   var $791=$790;
   $16=$791;
   var $792=$16;
   var $793=(($792)|0);
   var $794=HEAP32[(($793)>>2)];
   $__tmp_i_i_i17=$794;
   var $795=$19;
   var $796=(($788)|0);
   $15=$796;
   var $797=$15;
   var $798=$797;
   $14=$798;
   var $799=$14;
   var $800=(($799)|0);
   HEAP32[(($800)>>2)]=$795;
   var $801=$__tmp_i_i_i17;
   var $802=(($801)|(0))!=0;
   if ($802) { label = 63; break; } else { label = 66; break; }
  case 63: 
   var $804=(($788)|0);
   $13=$804;
   var $805=$13;
   var $806=$805;
   $12=$806;
   var $807=$12;
   var $808=(($807+4)|0);
   var $809=HEAP32[(($808)>>2)];
   var $810=$__tmp_i_i_i17;
   var $811=$810;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$809]($811) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 64; break; } else { label = 65; break; }
  case 64: 
   label = 66; break;
  case 65: 
   var $814$0 = ___cxa_find_matching_catch(-1, -1,0); $814$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 66: 
   label = 84; break;
  case 67: 
   label = 68; break;
  case 68: 
   var $817=$__mb;
   var $818=$231;
   $11=$818;
   var $819=$11;
   var $820=(($819+4)|0);
   var $821=HEAP32[(($820)>>2)];
   label = 69; break;
  case 69: 
   var $823=$__db;
   var $824=$__db;
   var $825=$__n;
   var $826=(($824+($825<<2))|0);
   var $827=$__ct;
   var $828=$__neg;
   var $829=(($828) & 1);
   var $830=HEAP32[(($__dp)>>2)];
   var $831=HEAP32[(($__ts)>>2)];
   var $832=HEAP32[(($__fd)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($817, $__mi, $__me, $821, $823, $826, $827, $829, $__pat, $830, $831, $__grp, $__sym, $__sn, $832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 70; break; } else { label = 62; break; }
  case 70: 
   var $834=$239;
   var $835=$__s;
   assert(4 % 1 === 0);HEAP32[(($834)>>2)]=HEAP32[(($835)>>2)];
   var $836=$__mb;
   var $837=HEAP32[(($__mi)>>2)];
   var $838=HEAP32[(($__me)>>2)];
   var $839=$231;
   var $840=$232;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $239, $836, $837, $838, $839, $840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 71; break; } else { label = 62; break; }
  case 71: 
   $240=1;
   $10=$__hw;
   var $842=$10;
   $9=$842;
   var $843=$9;
   $7=$843;
   $8=0;
   var $844=$7;
   var $845=(($844)|0);
   $6=$845;
   var $846=$6;
   var $847=$846;
   $5=$847;
   var $848=$5;
   var $849=(($848)|0);
   var $850=HEAP32[(($849)>>2)];
   $__tmp_i_i_i19=$850;
   var $851=$8;
   var $852=(($844)|0);
   $4=$852;
   var $853=$4;
   var $854=$853;
   $3=$854;
   var $855=$3;
   var $856=(($855)|0);
   HEAP32[(($856)>>2)]=$851;
   var $857=$__tmp_i_i_i19;
   var $858=(($857)|(0))!=0;
   if ($858) { label = 72; break; } else { label = 75; break; }
  case 72: 
   var $860=(($844)|0);
   $2=$860;
   var $861=$2;
   var $862=$861;
   $1=$862;
   var $863=$1;
   var $864=(($863+4)|0);
   var $865=HEAP32[(($864)>>2)];
   var $866=$__tmp_i_i_i19;
   var $867=$866;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$865]($867) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 73; break; } else { label = 74; break; }
  case 73: 
   label = 75; break;
  case 74: 
   var $870$0 = ___cxa_find_matching_catch(-1, -1,0); $870$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 75: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   __ZNSt3__16localeD2Ev($__loc);
   $62=$__hd;
   var $871=$62;
   $61=$871;
   var $872=$61;
   $59=$872;
   $60=0;
   var $873=$59;
   var $874=(($873)|0);
   $58=$874;
   var $875=$58;
   var $876=$875;
   $57=$876;
   var $877=$57;
   var $878=(($877)|0);
   var $879=HEAP32[(($878)>>2)];
   $__tmp_i_i_i11=$879;
   var $880=$60;
   var $881=(($873)|0);
   $56=$881;
   var $882=$56;
   var $883=$882;
   $55=$883;
   var $884=$55;
   var $885=(($884)|0);
   HEAP32[(($885)>>2)]=$880;
   var $886=$__tmp_i_i_i11;
   var $887=(($886)|(0))!=0;
   if ($887) { label = 76; break; } else { label = 79; break; }
  case 76: 
   var $889=(($873)|0);
   $54=$889;
   var $890=$54;
   var $891=$890;
   $53=$891;
   var $892=$53;
   var $893=(($892+4)|0);
   var $894=HEAP32[(($893)>>2)];
   var $895=$__tmp_i_i_i11;
   var $896=$895;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$894]($896) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 77; break; } else { label = 78; break; }
  case 77: 
   label = 79; break;
  case 78: 
   var $899$0 = ___cxa_find_matching_catch(-1, -1,0); $899$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 79: 
   $92=$__hn;
   var $900=$92;
   $91=$900;
   var $901=$91;
   $89=$901;
   $90=0;
   var $902=$89;
   var $903=(($902)|0);
   $88=$903;
   var $904=$88;
   var $905=$904;
   $87=$905;
   var $906=$87;
   var $907=(($906)|0);
   var $908=HEAP32[(($907)>>2)];
   $__tmp_i_i_i8=$908;
   var $909=$90;
   var $910=(($902)|0);
   $86=$910;
   var $911=$86;
   var $912=$911;
   $85=$912;
   var $913=$85;
   var $914=(($913)|0);
   HEAP32[(($914)>>2)]=$909;
   var $915=$__tmp_i_i_i8;
   var $916=(($915)|(0))!=0;
   if ($916) { label = 80; break; } else { label = 83; break; }
  case 80: 
   var $918=(($902)|0);
   $84=$918;
   var $919=$84;
   var $920=$919;
   $83=$920;
   var $921=$83;
   var $922=(($921+4)|0);
   var $923=HEAP32[(($922)>>2)];
   var $924=$__tmp_i_i_i8;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$923]($924) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 81; break; } else { label = 82; break; }
  case 81: 
   label = 83; break;
  case 82: 
   var $927$0 = ___cxa_find_matching_catch(-1, -1,0); $927$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 83: 
   STACKTOP = __stackBase__;
   return;
  case 84: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   label = 85; break;
  case 85: 
   __ZNSt3__16localeD2Ev($__loc);
   label = 86; break;
  case 86: 
   $140=$__hd;
   var $931=$140;
   $139=$931;
   var $932=$139;
   $137=$932;
   $138=0;
   var $933=$137;
   var $934=(($933)|0);
   $136=$934;
   var $935=$136;
   var $936=$935;
   $135=$936;
   var $937=$135;
   var $938=(($937)|0);
   var $939=HEAP32[(($938)>>2)];
   $__tmp_i_i_i2=$939;
   var $940=$138;
   var $941=(($933)|0);
   $134=$941;
   var $942=$134;
   var $943=$942;
   $133=$943;
   var $944=$133;
   var $945=(($944)|0);
   HEAP32[(($945)>>2)]=$940;
   var $946=$__tmp_i_i_i2;
   var $947=(($946)|(0))!=0;
   if ($947) { label = 87; break; } else { label = 90; break; }
  case 87: 
   var $949=(($933)|0);
   $132=$949;
   var $950=$132;
   var $951=$950;
   $131=$951;
   var $952=$131;
   var $953=(($952+4)|0);
   var $954=HEAP32[(($953)>>2)];
   var $955=$__tmp_i_i_i2;
   var $956=$955;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$954]($956) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 88; break; } else { label = 89; break; }
  case 88: 
   label = 90; break;
  case 89: 
   var $959$0 = ___cxa_find_matching_catch(-1, -1,0); $959$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 90: 
   $208=$__hn;
   var $960=$208;
   $207=$960;
   var $961=$207;
   $205=$961;
   $206=0;
   var $962=$205;
   var $963=(($962)|0);
   $204=$963;
   var $964=$204;
   var $965=$964;
   $203=$965;
   var $966=$203;
   var $967=(($966)|0);
   var $968=HEAP32[(($967)>>2)];
   $__tmp_i_i_i=$968;
   var $969=$206;
   var $970=(($962)|0);
   $202=$970;
   var $971=$202;
   var $972=$971;
   $201=$972;
   var $973=$201;
   var $974=(($973)|0);
   HEAP32[(($974)>>2)]=$969;
   var $975=$__tmp_i_i_i;
   var $976=(($975)|(0))!=0;
   if ($976) { label = 91; break; } else { label = 94; break; }
  case 91: 
   var $978=(($962)|0);
   $200=$978;
   var $979=$200;
   var $980=$979;
   $199=$980;
   var $981=$199;
   var $982=(($981+4)|0);
   var $983=HEAP32[(($982)>>2)];
   var $984=$__tmp_i_i_i;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$983]($984) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 92; break; } else { label = 93; break; }
  case 92: 
   label = 94; break;
  case 93: 
   var $987$0 = ___cxa_find_matching_catch(-1, -1,0); $987$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 94: 
   label = 95; break;
  case 95: 
   var $989=$236;
   var $990=$237;
   var $991$0=$989;
   var $991$1=0;
   var $992$0=$991$0;
   var $992$1=$990;
   ___resumeException($992$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 544)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16=__stackBase__;
   var $17;
   var $18;
   var $19=(__stackBase__)+(8);
   var $20;
   var $21;
   var $22;
   var $__a_i_i_i53;
   var $__i_i_i_i54;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46=(__stackBase__)+(16);
   var $47=(__stackBase__)+(24);
   var $48;
   var $49;
   var $50=(__stackBase__)+(32);
   var $51;
   var $52;
   var $53=(__stackBase__)+(40);
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69=(__stackBase__)+(48);
   var $70;
   var $71;
   var $72=(__stackBase__)+(56);
   var $73;
   var $74;
   var $75;
   var $__a_i_i_i44;
   var $__i_i_i_i45;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99=(__stackBase__)+(64);
   var $100=(__stackBase__)+(72);
   var $101;
   var $102;
   var $103=(__stackBase__)+(80);
   var $104;
   var $105;
   var $106=(__stackBase__)+(88);
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $122;
   var $123;
   var $124=(__stackBase__)+(96);
   var $125;
   var $126;
   var $127=(__stackBase__)+(104);
   var $128;
   var $129;
   var $130;
   var $__a_i_i_i35;
   var $__i_i_i_i36;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154=(__stackBase__)+(112);
   var $155=(__stackBase__)+(120);
   var $156;
   var $157;
   var $158=(__stackBase__)+(128);
   var $159;
   var $160;
   var $161=(__stackBase__)+(136);
   var $162;
   var $163;
   var $164;
   var $165;
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177;
   var $178=(__stackBase__)+(144);
   var $179;
   var $180;
   var $181=(__stackBase__)+(152);
   var $182;
   var $183;
   var $184;
   var $__a_i_i_i26;
   var $__i_i_i_i27;
   var $185;
   var $186;
   var $187;
   var $188;
   var $189;
   var $190;
   var $191;
   var $192;
   var $193;
   var $194;
   var $195;
   var $196;
   var $197;
   var $198;
   var $199;
   var $200;
   var $201;
   var $202;
   var $203;
   var $204;
   var $205;
   var $206;
   var $207;
   var $208=(__stackBase__)+(160);
   var $209=(__stackBase__)+(168);
   var $210;
   var $211;
   var $212=(__stackBase__)+(176);
   var $213;
   var $214;
   var $215=(__stackBase__)+(184);
   var $216;
   var $217;
   var $218;
   var $219;
   var $220;
   var $221;
   var $222;
   var $223;
   var $224;
   var $225;
   var $226;
   var $227;
   var $228;
   var $229;
   var $230;
   var $231;
   var $232;
   var $233;
   var $234=(__stackBase__)+(192);
   var $235;
   var $236;
   var $237=(__stackBase__)+(200);
   var $238;
   var $239;
   var $240;
   var $__a_i_i_i17;
   var $__i_i_i_i18;
   var $241;
   var $242;
   var $243;
   var $244;
   var $245;
   var $246;
   var $247;
   var $248;
   var $249;
   var $250;
   var $251;
   var $252;
   var $253;
   var $254;
   var $255;
   var $256;
   var $257;
   var $258;
   var $259;
   var $260;
   var $261;
   var $262;
   var $263;
   var $264=(__stackBase__)+(208);
   var $265=(__stackBase__)+(216);
   var $266;
   var $267;
   var $268=(__stackBase__)+(224);
   var $269;
   var $270;
   var $271=(__stackBase__)+(232);
   var $272;
   var $273;
   var $274;
   var $275;
   var $276;
   var $277;
   var $278;
   var $279;
   var $280;
   var $281;
   var $282;
   var $283;
   var $284;
   var $285;
   var $286;
   var $287=(__stackBase__)+(240);
   var $288;
   var $289;
   var $290=(__stackBase__)+(248);
   var $291;
   var $292;
   var $293;
   var $__a_i_i_i11;
   var $__i_i_i_i12;
   var $294;
   var $295;
   var $296;
   var $297;
   var $298;
   var $299;
   var $300;
   var $301;
   var $302;
   var $303;
   var $304;
   var $305;
   var $306;
   var $307;
   var $308;
   var $309;
   var $310;
   var $311;
   var $312;
   var $313;
   var $314;
   var $315;
   var $316;
   var $317=(__stackBase__)+(256);
   var $318=(__stackBase__)+(264);
   var $319;
   var $320;
   var $321=(__stackBase__)+(272);
   var $322;
   var $323;
   var $324=(__stackBase__)+(280);
   var $325;
   var $326;
   var $327;
   var $328;
   var $329;
   var $330;
   var $331;
   var $332;
   var $333;
   var $334;
   var $335;
   var $336;
   var $337;
   var $338;
   var $339;
   var $340;
   var $341;
   var $342=(__stackBase__)+(288);
   var $343;
   var $344;
   var $345=(__stackBase__)+(296);
   var $346;
   var $347;
   var $348;
   var $__a_i_i_i2;
   var $__i_i_i_i3;
   var $349;
   var $350;
   var $351;
   var $352;
   var $353;
   var $354;
   var $355;
   var $356;
   var $357;
   var $358;
   var $359;
   var $360;
   var $361;
   var $362;
   var $363;
   var $364;
   var $365;
   var $366;
   var $367;
   var $368;
   var $369;
   var $370;
   var $371;
   var $372=(__stackBase__)+(304);
   var $373=(__stackBase__)+(312);
   var $374;
   var $375;
   var $376=(__stackBase__)+(320);
   var $377;
   var $378;
   var $379=(__stackBase__)+(328);
   var $380;
   var $381;
   var $382;
   var $383;
   var $384;
   var $385;
   var $386;
   var $387;
   var $388;
   var $389;
   var $390;
   var $391;
   var $392;
   var $393;
   var $394;
   var $395;
   var $396=(__stackBase__)+(336);
   var $397;
   var $398;
   var $399=(__stackBase__)+(344);
   var $400;
   var $401;
   var $402;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $403;
   var $404;
   var $405;
   var $406;
   var $407;
   var $408;
   var $409;
   var $410;
   var $411;
   var $412;
   var $413;
   var $414;
   var $415;
   var $416;
   var $417;
   var $418;
   var $419;
   var $420;
   var $421;
   var $422;
   var $423;
   var $424;
   var $425;
   var $426=(__stackBase__)+(352);
   var $427=(__stackBase__)+(360);
   var $428;
   var $429;
   var $430=(__stackBase__)+(368);
   var $431;
   var $432;
   var $433=(__stackBase__)+(376);
   var $434;
   var $435;
   var $436;
   var $437;
   var $438;
   var $439;
   var $440;
   var $441;
   var $442;
   var $443;
   var $444;
   var $445;
   var $446;
   var $__mp;
   var $447=(__stackBase__)+(384);
   var $448=(__stackBase__)+(392);
   var $449=(__stackBase__)+(408);
   var $450=(__stackBase__)+(416);
   var $451=(__stackBase__)+(432);
   var $452=(__stackBase__)+(448);
   var $__mp1;
   var $453=(__stackBase__)+(464);
   var $454=(__stackBase__)+(472);
   var $455=(__stackBase__)+(488);
   var $456=(__stackBase__)+(496);
   var $457=(__stackBase__)+(512);
   var $458=(__stackBase__)+(528);
   var $459=(($__intl)&(1));
   $437=$459;
   var $460=(($__neg)&(1));
   $438=$460;
   $439=$__loc;
   $440=$__pat;
   $441=$__dp;
   $442=$__ts;
   $443=$__grp;
   $444=$__sym;
   $445=$__sn;
   $446=$__fd;
   var $461=$437;
   var $462=(($461) & 1);
   if ($462) { label = 2; break; } else { label = 38; break; }
  case 2: 
   var $464=$439;
   $436=$464;
   var $465=$436;
   var $466=__ZNKSt3__16locale9use_facetERNS0_2idE($465, 20312);
   var $467=$466;
   $__mp=$467;
   var $468=$438;
   var $469=(($468) & 1);
   if ($469) { label = 3; break; } else { label = 12; break; }
  case 3: 
   var $471=$440;
   var $472=$__mp;
   $435=$472;
   var $473=$435;
   var $474=$473;
   var $475=HEAP32[(($474)>>2)];
   var $476=(($475+44)|0);
   var $477=HEAP32[(($476)>>2)];
   FUNCTION_TABLE[$477]($447, $473);
   var $478=$471;
   var $479=$447;
   assert(4 % 1 === 0);HEAP8[($478)]=HEAP8[($479)];HEAP8[((($478)+(1))|0)]=HEAP8[((($479)+(1))|0)];HEAP8[((($478)+(2))|0)]=HEAP8[((($479)+(2))|0)];HEAP8[((($478)+(3))|0)]=HEAP8[((($479)+(3))|0)];
   var $480=$445;
   var $481=$__mp;
   $434=$481;
   var $482=$434;
   var $483=$482;
   var $484=HEAP32[(($483)>>2)];
   var $485=(($484+32)|0);
   var $486=HEAP32[(($485)>>2)];
   FUNCTION_TABLE[$486]($448, $482);
   $431=$480;
   $432=$448;
   var $487=$431;
   var $488=$432;
   var $tmp_i=$430;
   var $tmp1_i=$433;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $428=$487;
   $429=$488;
   var $489=$428;
   $425=$489;
   var $490=$425;
   $424=$490;
   var $491=$424;
   $405=$490;
   var $492=$405;
   var $493=(($492)|0);
   $404=$493;
   var $494=$404;
   var $495=$494;
   $403=$495;
   var $496=$403;
   var $497=(($496)|0);
   var $498=(($497)|0);
   var $499=$498;
   var $500=(($499)|0);
   var $501=$500;
   var $502=HEAP8[($501)];
   var $503=(($502)&(255));
   var $504=$503 & 1;
   var $505=(($504)|(0))!=0;
   if ($505) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $408=$490;
   var $507=$408;
   var $508=(($507)|0);
   $407=$508;
   var $509=$407;
   var $510=$509;
   $406=$510;
   var $511=$406;
   var $512=(($511)|0);
   var $513=(($512)|0);
   var $514=$513;
   var $515=(($514+8)|0);
   var $516=HEAP32[(($515)>>2)];
   HEAP32[(($426)>>2)]=0;
   $409=$516;
   $410=$426;
   var $517=$410;
   var $518=HEAP32[(($517)>>2)];
   var $519=$409;
   HEAP32[(($519)>>2)]=$518;
   $413=$490;
   $414=0;
   var $520=$413;
   var $521=$414;
   var $522=(($520)|0);
   $412=$522;
   var $523=$412;
   var $524=$523;
   $411=$524;
   var $525=$411;
   var $526=(($525)|0);
   var $527=(($526)|0);
   var $528=$527;
   var $529=(($528+4)|0);
   HEAP32[(($529)>>2)]=$521;
   label = 6; break;
  case 5: 
   $417=$490;
   var $531=$417;
   var $532=(($531)|0);
   $416=$532;
   var $533=$416;
   var $534=$533;
   $415=$534;
   var $535=$415;
   var $536=(($535)|0);
   var $537=(($536)|0);
   var $538=$537;
   var $539=(($538+4)|0);
   var $540=(($539)|0);
   HEAP32[(($427)>>2)]=0;
   $418=$540;
   $419=$427;
   var $541=$419;
   var $542=HEAP32[(($541)>>2)];
   var $543=$418;
   HEAP32[(($543)>>2)]=$542;
   $422=$490;
   $423=0;
   var $544=$422;
   var $545=$423;
   var $546=$545 << 1;
   var $547=(($546) & 255);
   var $548=(($544)|0);
   $421=$548;
   var $549=$421;
   var $550=$549;
   $420=$550;
   var $551=$420;
   var $552=(($551)|0);
   var $553=(($552)|0);
   var $554=$553;
   var $555=(($554)|0);
   var $556=$555;
   HEAP8[($556)]=$547;
   label = 6; break;
  case 6: 
   $382=$489;
   var $557=$382;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($557, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $559$0 = ___cxa_find_matching_catch(-1, -1,0); $559$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 8: 
   var $560=(($489)|0);
   $384=$560;
   var $561=$384;
   var $562=$561;
   $383=$562;
   var $563=$383;
   var $564=(($563)|0);
   var $565=$429;
   var $566=(($565)|0);
   $386=$566;
   var $567=$386;
   var $568=$567;
   $385=$568;
   var $569=$385;
   var $570=(($569)|0);
   var $571=$564;
   var $572=$570;
   assert(12 % 1 === 0);HEAP32[(($571)>>2)]=HEAP32[(($572)>>2)];HEAP32[((($571)+(4))>>2)]=HEAP32[((($572)+(4))>>2)];HEAP32[((($571)+(8))>>2)]=HEAP32[((($572)+(8))>>2)];
   var $573=$429;
   $397=$489;
   $398=$573;
   var $574=$397;
   var $575=$398;
   var $tmp_i_i_i=$396;
   var $tmp1_i_i_i=$399;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
   $394=$574;
   $395=$575;
   var $576=$394;
   $393=$576;
   var $577=$393;
   var $578=(($577)|0);
   $392=$578;
   var $579=$392;
   var $580=$579;
   $391=$580;
   var $581=$391;
   var $582=$581;
   var $583=$395;
   $389=$583;
   var $584=$389;
   var $585=(($584)|0);
   $388=$585;
   var $586=$388;
   var $587=$586;
   $387=$587;
   var $588=$387;
   var $589=$588;
   $390=$589;
   var $590=$390;
   var $591=$429;
   $402=$591;
   var $592=$402;
   var $593=(($592)|0);
   $401=$593;
   var $594=$401;
   var $595=$594;
   $400=$595;
   var $596=$400;
   var $597=(($596)|0);
   var $598=(($597)|0);
   var $599=$598;
   var $600=(($599)|0);
   $__a_i_i_i=$600;
   $__i_i_i_i=0;
   label = 9; break;
  case 9: 
   var $602=$__i_i_i_i;
   var $603=(($602)>>>(0)) < 3;
   if ($603) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $605=$__i_i_i_i;
   var $606=$__a_i_i_i;
   var $607=(($606+($605<<2))|0);
   HEAP32[(($607)>>2)]=0;
   var $608=$__i_i_i_i;
   var $609=((($608)+(1))|0);
   $__i_i_i_i=$609;
   label = 9; break;
  case 11: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($448);
   label = 21; break;
  case 12: 
   var $611=$440;
   var $612=$__mp;
   $381=$612;
   var $613=$381;
   var $614=$613;
   var $615=HEAP32[(($614)>>2)];
   var $616=(($615+40)|0);
   var $617=HEAP32[(($616)>>2)];
   FUNCTION_TABLE[$617]($449, $613);
   var $618=$611;
   var $619=$449;
   assert(4 % 1 === 0);HEAP8[($618)]=HEAP8[($619)];HEAP8[((($618)+(1))|0)]=HEAP8[((($619)+(1))|0)];HEAP8[((($618)+(2))|0)]=HEAP8[((($619)+(2))|0)];HEAP8[((($618)+(3))|0)]=HEAP8[((($619)+(3))|0)];
   var $620=$445;
   var $621=$__mp;
   $380=$621;
   var $622=$380;
   var $623=$622;
   var $624=HEAP32[(($623)>>2)];
   var $625=(($624+28)|0);
   var $626=HEAP32[(($625)>>2)];
   FUNCTION_TABLE[$626]($450, $622);
   $377=$620;
   $378=$450;
   var $627=$377;
   var $628=$378;
   var $tmp_i4=$376;
   var $tmp1_i5=$379;
   assert(1 % 1 === 0);HEAP8[($tmp_i4)]=HEAP8[($tmp1_i5)];
   $374=$627;
   $375=$628;
   var $629=$374;
   $371=$629;
   var $630=$371;
   $370=$630;
   var $631=$370;
   $351=$630;
   var $632=$351;
   var $633=(($632)|0);
   $350=$633;
   var $634=$350;
   var $635=$634;
   $349=$635;
   var $636=$349;
   var $637=(($636)|0);
   var $638=(($637)|0);
   var $639=$638;
   var $640=(($639)|0);
   var $641=$640;
   var $642=HEAP8[($641)];
   var $643=(($642)&(255));
   var $644=$643 & 1;
   var $645=(($644)|(0))!=0;
   if ($645) { label = 13; break; } else { label = 14; break; }
  case 13: 
   $354=$630;
   var $647=$354;
   var $648=(($647)|0);
   $353=$648;
   var $649=$353;
   var $650=$649;
   $352=$650;
   var $651=$352;
   var $652=(($651)|0);
   var $653=(($652)|0);
   var $654=$653;
   var $655=(($654+8)|0);
   var $656=HEAP32[(($655)>>2)];
   HEAP32[(($372)>>2)]=0;
   $355=$656;
   $356=$372;
   var $657=$356;
   var $658=HEAP32[(($657)>>2)];
   var $659=$355;
   HEAP32[(($659)>>2)]=$658;
   $359=$630;
   $360=0;
   var $660=$359;
   var $661=$360;
   var $662=(($660)|0);
   $358=$662;
   var $663=$358;
   var $664=$663;
   $357=$664;
   var $665=$357;
   var $666=(($665)|0);
   var $667=(($666)|0);
   var $668=$667;
   var $669=(($668+4)|0);
   HEAP32[(($669)>>2)]=$661;
   label = 15; break;
  case 14: 
   $363=$630;
   var $671=$363;
   var $672=(($671)|0);
   $362=$672;
   var $673=$362;
   var $674=$673;
   $361=$674;
   var $675=$361;
   var $676=(($675)|0);
   var $677=(($676)|0);
   var $678=$677;
   var $679=(($678+4)|0);
   var $680=(($679)|0);
   HEAP32[(($373)>>2)]=0;
   $364=$680;
   $365=$373;
   var $681=$365;
   var $682=HEAP32[(($681)>>2)];
   var $683=$364;
   HEAP32[(($683)>>2)]=$682;
   $368=$630;
   $369=0;
   var $684=$368;
   var $685=$369;
   var $686=$685 << 1;
   var $687=(($686) & 255);
   var $688=(($684)|0);
   $367=$688;
   var $689=$367;
   var $690=$689;
   $366=$690;
   var $691=$366;
   var $692=(($691)|0);
   var $693=(($692)|0);
   var $694=$693;
   var $695=(($694)|0);
   var $696=$695;
   HEAP8[($696)]=$687;
   label = 15; break;
  case 15: 
   $328=$629;
   var $697=$328;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($697, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $699$0 = ___cxa_find_matching_catch(-1, -1,0); $699$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 17: 
   var $700=(($629)|0);
   $330=$700;
   var $701=$330;
   var $702=$701;
   $329=$702;
   var $703=$329;
   var $704=(($703)|0);
   var $705=$375;
   var $706=(($705)|0);
   $332=$706;
   var $707=$332;
   var $708=$707;
   $331=$708;
   var $709=$331;
   var $710=(($709)|0);
   var $711=$704;
   var $712=$710;
   assert(12 % 1 === 0);HEAP32[(($711)>>2)]=HEAP32[(($712)>>2)];HEAP32[((($711)+(4))>>2)]=HEAP32[((($712)+(4))>>2)];HEAP32[((($711)+(8))>>2)]=HEAP32[((($712)+(8))>>2)];
   var $713=$375;
   $343=$629;
   $344=$713;
   var $714=$343;
   var $715=$344;
   var $tmp_i_i_i7=$342;
   var $tmp1_i_i_i8=$345;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i7)]=HEAP8[($tmp1_i_i_i8)];
   $340=$714;
   $341=$715;
   var $716=$340;
   $339=$716;
   var $717=$339;
   var $718=(($717)|0);
   $338=$718;
   var $719=$338;
   var $720=$719;
   $337=$720;
   var $721=$337;
   var $722=$721;
   var $723=$341;
   $335=$723;
   var $724=$335;
   var $725=(($724)|0);
   $334=$725;
   var $726=$334;
   var $727=$726;
   $333=$727;
   var $728=$333;
   var $729=$728;
   $336=$729;
   var $730=$336;
   var $731=$375;
   $348=$731;
   var $732=$348;
   var $733=(($732)|0);
   $347=$733;
   var $734=$347;
   var $735=$734;
   $346=$735;
   var $736=$346;
   var $737=(($736)|0);
   var $738=(($737)|0);
   var $739=$738;
   var $740=(($739)|0);
   $__a_i_i_i2=$740;
   $__i_i_i_i3=0;
   label = 18; break;
  case 18: 
   var $742=$__i_i_i_i3;
   var $743=(($742)>>>(0)) < 3;
   if ($743) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $745=$__i_i_i_i3;
   var $746=$__a_i_i_i2;
   var $747=(($746+($745<<2))|0);
   HEAP32[(($747)>>2)]=0;
   var $748=$__i_i_i_i3;
   var $749=((($748)+(1))|0);
   $__i_i_i_i3=$749;
   label = 18; break;
  case 20: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($450);
   label = 21; break;
  case 21: 
   var $751=$__mp;
   $327=$751;
   var $752=$327;
   var $753=$752;
   var $754=HEAP32[(($753)>>2)];
   var $755=(($754+12)|0);
   var $756=HEAP32[(($755)>>2)];
   var $757=FUNCTION_TABLE[$756]($752);
   var $758=$441;
   HEAP32[(($758)>>2)]=$757;
   var $759=$__mp;
   $326=$759;
   var $760=$326;
   var $761=$760;
   var $762=HEAP32[(($761)>>2)];
   var $763=(($762+16)|0);
   var $764=HEAP32[(($763)>>2)];
   var $765=FUNCTION_TABLE[$764]($760);
   var $766=$442;
   HEAP32[(($766)>>2)]=$765;
   var $767=$443;
   var $768=$__mp;
   $325=$768;
   var $769=$325;
   var $770=$769;
   var $771=HEAP32[(($770)>>2)];
   var $772=(($771+20)|0);
   var $773=HEAP32[(($772)>>2)];
   FUNCTION_TABLE[$773]($451, $769);
   $322=$767;
   $323=$451;
   var $774=$322;
   var $775=$323;
   var $tmp_i13=$321;
   var $tmp1_i14=$324;
   assert(1 % 1 === 0);HEAP8[($tmp_i13)]=HEAP8[($tmp1_i14)];
   $319=$774;
   $320=$775;
   var $776=$319;
   $316=$776;
   var $777=$316;
   $315=$777;
   var $778=$315;
   $296=$777;
   var $779=$296;
   var $780=(($779)|0);
   $295=$780;
   var $781=$295;
   var $782=$781;
   $294=$782;
   var $783=$294;
   var $784=(($783)|0);
   var $785=(($784)|0);
   var $786=$785;
   var $787=(($786)|0);
   var $788=$787;
   var $789=HEAP8[($788)];
   var $790=(($789)&(255));
   var $791=$790 & 1;
   var $792=(($791)|(0))!=0;
   if ($792) { label = 22; break; } else { label = 23; break; }
  case 22: 
   $299=$777;
   var $794=$299;
   var $795=(($794)|0);
   $298=$795;
   var $796=$298;
   var $797=$796;
   $297=$797;
   var $798=$297;
   var $799=(($798)|0);
   var $800=(($799)|0);
   var $801=$800;
   var $802=(($801+8)|0);
   var $803=HEAP32[(($802)>>2)];
   HEAP8[($317)]=0;
   $300=$803;
   $301=$317;
   var $804=$301;
   var $805=HEAP8[($804)];
   var $806=$300;
   HEAP8[($806)]=$805;
   $304=$777;
   $305=0;
   var $807=$304;
   var $808=$305;
   var $809=(($807)|0);
   $303=$809;
   var $810=$303;
   var $811=$810;
   $302=$811;
   var $812=$302;
   var $813=(($812)|0);
   var $814=(($813)|0);
   var $815=$814;
   var $816=(($815+4)|0);
   HEAP32[(($816)>>2)]=$808;
   label = 24; break;
  case 23: 
   $308=$777;
   var $818=$308;
   var $819=(($818)|0);
   $307=$819;
   var $820=$307;
   var $821=$820;
   $306=$821;
   var $822=$306;
   var $823=(($822)|0);
   var $824=(($823)|0);
   var $825=$824;
   var $826=(($825+1)|0);
   var $827=(($826)|0);
   HEAP8[($318)]=0;
   $309=$827;
   $310=$318;
   var $828=$310;
   var $829=HEAP8[($828)];
   var $830=$309;
   HEAP8[($830)]=$829;
   $313=$777;
   $314=0;
   var $831=$313;
   var $832=$314;
   var $833=$832 << 1;
   var $834=(($833) & 255);
   var $835=(($831)|0);
   $312=$835;
   var $836=$312;
   var $837=$836;
   $311=$837;
   var $838=$311;
   var $839=(($838)|0);
   var $840=(($839)|0);
   var $841=$840;
   var $842=(($841)|0);
   var $843=$842;
   HEAP8[($843)]=$834;
   label = 24; break;
  case 24: 
   $273=$776;
   var $844=$273;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($844, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $846$0 = ___cxa_find_matching_catch(-1, -1,0); $846$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 26: 
   var $847=(($776)|0);
   $275=$847;
   var $848=$275;
   var $849=$848;
   $274=$849;
   var $850=$274;
   var $851=(($850)|0);
   var $852=$320;
   var $853=(($852)|0);
   $277=$853;
   var $854=$277;
   var $855=$854;
   $276=$855;
   var $856=$276;
   var $857=(($856)|0);
   var $858=$851;
   var $859=$857;
   assert(12 % 1 === 0);HEAP32[(($858)>>2)]=HEAP32[(($859)>>2)];HEAP32[((($858)+(4))>>2)]=HEAP32[((($859)+(4))>>2)];HEAP32[((($858)+(8))>>2)]=HEAP32[((($859)+(8))>>2)];
   var $860=$320;
   $288=$776;
   $289=$860;
   var $861=$288;
   var $862=$289;
   var $tmp_i_i_i15=$287;
   var $tmp1_i_i_i16=$290;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i15)]=HEAP8[($tmp1_i_i_i16)];
   $285=$861;
   $286=$862;
   var $863=$285;
   $284=$863;
   var $864=$284;
   var $865=(($864)|0);
   $283=$865;
   var $866=$283;
   var $867=$866;
   $282=$867;
   var $868=$282;
   var $869=$868;
   var $870=$286;
   $280=$870;
   var $871=$280;
   var $872=(($871)|0);
   $279=$872;
   var $873=$279;
   var $874=$873;
   $278=$874;
   var $875=$278;
   var $876=$875;
   $281=$876;
   var $877=$281;
   var $878=$320;
   $293=$878;
   var $879=$293;
   var $880=(($879)|0);
   $292=$880;
   var $881=$292;
   var $882=$881;
   $291=$882;
   var $883=$291;
   var $884=(($883)|0);
   var $885=(($884)|0);
   var $886=$885;
   var $887=(($886)|0);
   $__a_i_i_i11=$887;
   $__i_i_i_i12=0;
   label = 27; break;
  case 27: 
   var $889=$__i_i_i_i12;
   var $890=(($889)>>>(0)) < 3;
   if ($890) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $892=$__i_i_i_i12;
   var $893=$__a_i_i_i11;
   var $894=(($893+($892<<2))|0);
   HEAP32[(($894)>>2)]=0;
   var $895=$__i_i_i_i12;
   var $896=((($895)+(1))|0);
   $__i_i_i_i12=$896;
   label = 27; break;
  case 29: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($451);
   var $897=$444;
   var $898=$__mp;
   $272=$898;
   var $899=$272;
   var $900=$899;
   var $901=HEAP32[(($900)>>2)];
   var $902=(($901+24)|0);
   var $903=HEAP32[(($902)>>2)];
   FUNCTION_TABLE[$903]($452, $899);
   $269=$897;
   $270=$452;
   var $904=$269;
   var $905=$270;
   var $tmp_i19=$268;
   var $tmp1_i20=$271;
   assert(1 % 1 === 0);HEAP8[($tmp_i19)]=HEAP8[($tmp1_i20)];
   $266=$904;
   $267=$905;
   var $906=$266;
   $263=$906;
   var $907=$263;
   $262=$907;
   var $908=$262;
   $243=$907;
   var $909=$243;
   var $910=(($909)|0);
   $242=$910;
   var $911=$242;
   var $912=$911;
   $241=$912;
   var $913=$241;
   var $914=(($913)|0);
   var $915=(($914)|0);
   var $916=$915;
   var $917=(($916)|0);
   var $918=$917;
   var $919=HEAP8[($918)];
   var $920=(($919)&(255));
   var $921=$920 & 1;
   var $922=(($921)|(0))!=0;
   if ($922) { label = 30; break; } else { label = 31; break; }
  case 30: 
   $246=$907;
   var $924=$246;
   var $925=(($924)|0);
   $245=$925;
   var $926=$245;
   var $927=$926;
   $244=$927;
   var $928=$244;
   var $929=(($928)|0);
   var $930=(($929)|0);
   var $931=$930;
   var $932=(($931+8)|0);
   var $933=HEAP32[(($932)>>2)];
   HEAP32[(($264)>>2)]=0;
   $247=$933;
   $248=$264;
   var $934=$248;
   var $935=HEAP32[(($934)>>2)];
   var $936=$247;
   HEAP32[(($936)>>2)]=$935;
   $251=$907;
   $252=0;
   var $937=$251;
   var $938=$252;
   var $939=(($937)|0);
   $250=$939;
   var $940=$250;
   var $941=$940;
   $249=$941;
   var $942=$249;
   var $943=(($942)|0);
   var $944=(($943)|0);
   var $945=$944;
   var $946=(($945+4)|0);
   HEAP32[(($946)>>2)]=$938;
   label = 32; break;
  case 31: 
   $255=$907;
   var $948=$255;
   var $949=(($948)|0);
   $254=$949;
   var $950=$254;
   var $951=$950;
   $253=$951;
   var $952=$253;
   var $953=(($952)|0);
   var $954=(($953)|0);
   var $955=$954;
   var $956=(($955+4)|0);
   var $957=(($956)|0);
   HEAP32[(($265)>>2)]=0;
   $256=$957;
   $257=$265;
   var $958=$257;
   var $959=HEAP32[(($958)>>2)];
   var $960=$256;
   HEAP32[(($960)>>2)]=$959;
   $260=$907;
   $261=0;
   var $961=$260;
   var $962=$261;
   var $963=$962 << 1;
   var $964=(($963) & 255);
   var $965=(($961)|0);
   $259=$965;
   var $966=$259;
   var $967=$966;
   $258=$967;
   var $968=$258;
   var $969=(($968)|0);
   var $970=(($969)|0);
   var $971=$970;
   var $972=(($971)|0);
   var $973=$972;
   HEAP8[($973)]=$964;
   label = 32; break;
  case 32: 
   $220=$906;
   var $974=$220;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($974, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 33; break; }
  case 33: 
   var $976$0 = ___cxa_find_matching_catch(-1, -1,0); $976$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 34: 
   var $977=(($906)|0);
   $222=$977;
   var $978=$222;
   var $979=$978;
   $221=$979;
   var $980=$221;
   var $981=(($980)|0);
   var $982=$267;
   var $983=(($982)|0);
   $224=$983;
   var $984=$224;
   var $985=$984;
   $223=$985;
   var $986=$223;
   var $987=(($986)|0);
   var $988=$981;
   var $989=$987;
   assert(12 % 1 === 0);HEAP32[(($988)>>2)]=HEAP32[(($989)>>2)];HEAP32[((($988)+(4))>>2)]=HEAP32[((($989)+(4))>>2)];HEAP32[((($988)+(8))>>2)]=HEAP32[((($989)+(8))>>2)];
   var $990=$267;
   $235=$906;
   $236=$990;
   var $991=$235;
   var $992=$236;
   var $tmp_i_i_i22=$234;
   var $tmp1_i_i_i23=$237;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i22)]=HEAP8[($tmp1_i_i_i23)];
   $232=$991;
   $233=$992;
   var $993=$232;
   $231=$993;
   var $994=$231;
   var $995=(($994)|0);
   $230=$995;
   var $996=$230;
   var $997=$996;
   $229=$997;
   var $998=$229;
   var $999=$998;
   var $1000=$233;
   $227=$1000;
   var $1001=$227;
   var $1002=(($1001)|0);
   $226=$1002;
   var $1003=$226;
   var $1004=$1003;
   $225=$1004;
   var $1005=$225;
   var $1006=$1005;
   $228=$1006;
   var $1007=$228;
   var $1008=$267;
   $240=$1008;
   var $1009=$240;
   var $1010=(($1009)|0);
   $239=$1010;
   var $1011=$239;
   var $1012=$1011;
   $238=$1012;
   var $1013=$238;
   var $1014=(($1013)|0);
   var $1015=(($1014)|0);
   var $1016=$1015;
   var $1017=(($1016)|0);
   $__a_i_i_i17=$1017;
   $__i_i_i_i18=0;
   label = 35; break;
  case 35: 
   var $1019=$__i_i_i_i18;
   var $1020=(($1019)>>>(0)) < 3;
   if ($1020) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $1022=$__i_i_i_i18;
   var $1023=$__a_i_i_i17;
   var $1024=(($1023+($1022<<2))|0);
   HEAP32[(($1024)>>2)]=0;
   var $1025=$__i_i_i_i18;
   var $1026=((($1025)+(1))|0);
   $__i_i_i_i18=$1026;
   label = 35; break;
  case 37: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($452);
   var $1027=$__mp;
   $219=$1027;
   var $1028=$219;
   var $1029=$1028;
   var $1030=HEAP32[(($1029)>>2)];
   var $1031=(($1030+36)|0);
   var $1032=HEAP32[(($1031)>>2)];
   var $1033=FUNCTION_TABLE[$1032]($1028);
   var $1034=$446;
   HEAP32[(($1034)>>2)]=$1033;
   label = 74; break;
  case 38: 
   var $1036=$439;
   $218=$1036;
   var $1037=$218;
   var $1038=__ZNKSt3__16locale9use_facetERNS0_2idE($1037, 20320);
   var $1039=$1038;
   $__mp1=$1039;
   var $1040=$438;
   var $1041=(($1040) & 1);
   if ($1041) { label = 39; break; } else { label = 48; break; }
  case 39: 
   var $1043=$440;
   var $1044=$__mp1;
   $217=$1044;
   var $1045=$217;
   var $1046=$1045;
   var $1047=HEAP32[(($1046)>>2)];
   var $1048=(($1047+44)|0);
   var $1049=HEAP32[(($1048)>>2)];
   FUNCTION_TABLE[$1049]($453, $1045);
   var $1050=$1043;
   var $1051=$453;
   assert(4 % 1 === 0);HEAP8[($1050)]=HEAP8[($1051)];HEAP8[((($1050)+(1))|0)]=HEAP8[((($1051)+(1))|0)];HEAP8[((($1050)+(2))|0)]=HEAP8[((($1051)+(2))|0)];HEAP8[((($1050)+(3))|0)]=HEAP8[((($1051)+(3))|0)];
   var $1052=$445;
   var $1053=$__mp1;
   $216=$1053;
   var $1054=$216;
   var $1055=$1054;
   var $1056=HEAP32[(($1055)>>2)];
   var $1057=(($1056+32)|0);
   var $1058=HEAP32[(($1057)>>2)];
   FUNCTION_TABLE[$1058]($454, $1054);
   $213=$1052;
   $214=$454;
   var $1059=$213;
   var $1060=$214;
   var $tmp_i28=$212;
   var $tmp1_i29=$215;
   assert(1 % 1 === 0);HEAP8[($tmp_i28)]=HEAP8[($tmp1_i29)];
   $210=$1059;
   $211=$1060;
   var $1061=$210;
   $207=$1061;
   var $1062=$207;
   $206=$1062;
   var $1063=$206;
   $187=$1062;
   var $1064=$187;
   var $1065=(($1064)|0);
   $186=$1065;
   var $1066=$186;
   var $1067=$1066;
   $185=$1067;
   var $1068=$185;
   var $1069=(($1068)|0);
   var $1070=(($1069)|0);
   var $1071=$1070;
   var $1072=(($1071)|0);
   var $1073=$1072;
   var $1074=HEAP8[($1073)];
   var $1075=(($1074)&(255));
   var $1076=$1075 & 1;
   var $1077=(($1076)|(0))!=0;
   if ($1077) { label = 40; break; } else { label = 41; break; }
  case 40: 
   $190=$1062;
   var $1079=$190;
   var $1080=(($1079)|0);
   $189=$1080;
   var $1081=$189;
   var $1082=$1081;
   $188=$1082;
   var $1083=$188;
   var $1084=(($1083)|0);
   var $1085=(($1084)|0);
   var $1086=$1085;
   var $1087=(($1086+8)|0);
   var $1088=HEAP32[(($1087)>>2)];
   HEAP32[(($208)>>2)]=0;
   $191=$1088;
   $192=$208;
   var $1089=$192;
   var $1090=HEAP32[(($1089)>>2)];
   var $1091=$191;
   HEAP32[(($1091)>>2)]=$1090;
   $195=$1062;
   $196=0;
   var $1092=$195;
   var $1093=$196;
   var $1094=(($1092)|0);
   $194=$1094;
   var $1095=$194;
   var $1096=$1095;
   $193=$1096;
   var $1097=$193;
   var $1098=(($1097)|0);
   var $1099=(($1098)|0);
   var $1100=$1099;
   var $1101=(($1100+4)|0);
   HEAP32[(($1101)>>2)]=$1093;
   label = 42; break;
  case 41: 
   $199=$1062;
   var $1103=$199;
   var $1104=(($1103)|0);
   $198=$1104;
   var $1105=$198;
   var $1106=$1105;
   $197=$1106;
   var $1107=$197;
   var $1108=(($1107)|0);
   var $1109=(($1108)|0);
   var $1110=$1109;
   var $1111=(($1110+4)|0);
   var $1112=(($1111)|0);
   HEAP32[(($209)>>2)]=0;
   $200=$1112;
   $201=$209;
   var $1113=$201;
   var $1114=HEAP32[(($1113)>>2)];
   var $1115=$200;
   HEAP32[(($1115)>>2)]=$1114;
   $204=$1062;
   $205=0;
   var $1116=$204;
   var $1117=$205;
   var $1118=$1117 << 1;
   var $1119=(($1118) & 255);
   var $1120=(($1116)|0);
   $203=$1120;
   var $1121=$203;
   var $1122=$1121;
   $202=$1122;
   var $1123=$202;
   var $1124=(($1123)|0);
   var $1125=(($1124)|0);
   var $1126=$1125;
   var $1127=(($1126)|0);
   var $1128=$1127;
   HEAP8[($1128)]=$1119;
   label = 42; break;
  case 42: 
   $164=$1061;
   var $1129=$164;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($1129, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 43; break; }
  case 43: 
   var $1131$0 = ___cxa_find_matching_catch(-1, -1,0); $1131$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 44: 
   var $1132=(($1061)|0);
   $166=$1132;
   var $1133=$166;
   var $1134=$1133;
   $165=$1134;
   var $1135=$165;
   var $1136=(($1135)|0);
   var $1137=$211;
   var $1138=(($1137)|0);
   $168=$1138;
   var $1139=$168;
   var $1140=$1139;
   $167=$1140;
   var $1141=$167;
   var $1142=(($1141)|0);
   var $1143=$1136;
   var $1144=$1142;
   assert(12 % 1 === 0);HEAP32[(($1143)>>2)]=HEAP32[(($1144)>>2)];HEAP32[((($1143)+(4))>>2)]=HEAP32[((($1144)+(4))>>2)];HEAP32[((($1143)+(8))>>2)]=HEAP32[((($1144)+(8))>>2)];
   var $1145=$211;
   $179=$1061;
   $180=$1145;
   var $1146=$179;
   var $1147=$180;
   var $tmp_i_i_i31=$178;
   var $tmp1_i_i_i32=$181;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i31)]=HEAP8[($tmp1_i_i_i32)];
   $176=$1146;
   $177=$1147;
   var $1148=$176;
   $175=$1148;
   var $1149=$175;
   var $1150=(($1149)|0);
   $174=$1150;
   var $1151=$174;
   var $1152=$1151;
   $173=$1152;
   var $1153=$173;
   var $1154=$1153;
   var $1155=$177;
   $171=$1155;
   var $1156=$171;
   var $1157=(($1156)|0);
   $170=$1157;
   var $1158=$170;
   var $1159=$1158;
   $169=$1159;
   var $1160=$169;
   var $1161=$1160;
   $172=$1161;
   var $1162=$172;
   var $1163=$211;
   $184=$1163;
   var $1164=$184;
   var $1165=(($1164)|0);
   $183=$1165;
   var $1166=$183;
   var $1167=$1166;
   $182=$1167;
   var $1168=$182;
   var $1169=(($1168)|0);
   var $1170=(($1169)|0);
   var $1171=$1170;
   var $1172=(($1171)|0);
   $__a_i_i_i26=$1172;
   $__i_i_i_i27=0;
   label = 45; break;
  case 45: 
   var $1174=$__i_i_i_i27;
   var $1175=(($1174)>>>(0)) < 3;
   if ($1175) { label = 46; break; } else { label = 47; break; }
  case 46: 
   var $1177=$__i_i_i_i27;
   var $1178=$__a_i_i_i26;
   var $1179=(($1178+($1177<<2))|0);
   HEAP32[(($1179)>>2)]=0;
   var $1180=$__i_i_i_i27;
   var $1181=((($1180)+(1))|0);
   $__i_i_i_i27=$1181;
   label = 45; break;
  case 47: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($454);
   label = 57; break;
  case 48: 
   var $1183=$440;
   var $1184=$__mp1;
   $163=$1184;
   var $1185=$163;
   var $1186=$1185;
   var $1187=HEAP32[(($1186)>>2)];
   var $1188=(($1187+40)|0);
   var $1189=HEAP32[(($1188)>>2)];
   FUNCTION_TABLE[$1189]($455, $1185);
   var $1190=$1183;
   var $1191=$455;
   assert(4 % 1 === 0);HEAP8[($1190)]=HEAP8[($1191)];HEAP8[((($1190)+(1))|0)]=HEAP8[((($1191)+(1))|0)];HEAP8[((($1190)+(2))|0)]=HEAP8[((($1191)+(2))|0)];HEAP8[((($1190)+(3))|0)]=HEAP8[((($1191)+(3))|0)];
   var $1192=$445;
   var $1193=$__mp1;
   $162=$1193;
   var $1194=$162;
   var $1195=$1194;
   var $1196=HEAP32[(($1195)>>2)];
   var $1197=(($1196+28)|0);
   var $1198=HEAP32[(($1197)>>2)];
   FUNCTION_TABLE[$1198]($456, $1194);
   $159=$1192;
   $160=$456;
   var $1199=$159;
   var $1200=$160;
   var $tmp_i37=$158;
   var $tmp1_i38=$161;
   assert(1 % 1 === 0);HEAP8[($tmp_i37)]=HEAP8[($tmp1_i38)];
   $156=$1199;
   $157=$1200;
   var $1201=$156;
   $153=$1201;
   var $1202=$153;
   $152=$1202;
   var $1203=$152;
   $133=$1202;
   var $1204=$133;
   var $1205=(($1204)|0);
   $132=$1205;
   var $1206=$132;
   var $1207=$1206;
   $131=$1207;
   var $1208=$131;
   var $1209=(($1208)|0);
   var $1210=(($1209)|0);
   var $1211=$1210;
   var $1212=(($1211)|0);
   var $1213=$1212;
   var $1214=HEAP8[($1213)];
   var $1215=(($1214)&(255));
   var $1216=$1215 & 1;
   var $1217=(($1216)|(0))!=0;
   if ($1217) { label = 49; break; } else { label = 50; break; }
  case 49: 
   $136=$1202;
   var $1219=$136;
   var $1220=(($1219)|0);
   $135=$1220;
   var $1221=$135;
   var $1222=$1221;
   $134=$1222;
   var $1223=$134;
   var $1224=(($1223)|0);
   var $1225=(($1224)|0);
   var $1226=$1225;
   var $1227=(($1226+8)|0);
   var $1228=HEAP32[(($1227)>>2)];
   HEAP32[(($154)>>2)]=0;
   $137=$1228;
   $138=$154;
   var $1229=$138;
   var $1230=HEAP32[(($1229)>>2)];
   var $1231=$137;
   HEAP32[(($1231)>>2)]=$1230;
   $141=$1202;
   $142=0;
   var $1232=$141;
   var $1233=$142;
   var $1234=(($1232)|0);
   $140=$1234;
   var $1235=$140;
   var $1236=$1235;
   $139=$1236;
   var $1237=$139;
   var $1238=(($1237)|0);
   var $1239=(($1238)|0);
   var $1240=$1239;
   var $1241=(($1240+4)|0);
   HEAP32[(($1241)>>2)]=$1233;
   label = 51; break;
  case 50: 
   $145=$1202;
   var $1243=$145;
   var $1244=(($1243)|0);
   $144=$1244;
   var $1245=$144;
   var $1246=$1245;
   $143=$1246;
   var $1247=$143;
   var $1248=(($1247)|0);
   var $1249=(($1248)|0);
   var $1250=$1249;
   var $1251=(($1250+4)|0);
   var $1252=(($1251)|0);
   HEAP32[(($155)>>2)]=0;
   $146=$1252;
   $147=$155;
   var $1253=$147;
   var $1254=HEAP32[(($1253)>>2)];
   var $1255=$146;
   HEAP32[(($1255)>>2)]=$1254;
   $150=$1202;
   $151=0;
   var $1256=$150;
   var $1257=$151;
   var $1258=$1257 << 1;
   var $1259=(($1258) & 255);
   var $1260=(($1256)|0);
   $149=$1260;
   var $1261=$149;
   var $1262=$1261;
   $148=$1262;
   var $1263=$148;
   var $1264=(($1263)|0);
   var $1265=(($1264)|0);
   var $1266=$1265;
   var $1267=(($1266)|0);
   var $1268=$1267;
   HEAP8[($1268)]=$1259;
   label = 51; break;
  case 51: 
   $110=$1201;
   var $1269=$110;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($1269, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 52; break; }
  case 52: 
   var $1271$0 = ___cxa_find_matching_catch(-1, -1,0); $1271$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 53: 
   var $1272=(($1201)|0);
   $112=$1272;
   var $1273=$112;
   var $1274=$1273;
   $111=$1274;
   var $1275=$111;
   var $1276=(($1275)|0);
   var $1277=$157;
   var $1278=(($1277)|0);
   $114=$1278;
   var $1279=$114;
   var $1280=$1279;
   $113=$1280;
   var $1281=$113;
   var $1282=(($1281)|0);
   var $1283=$1276;
   var $1284=$1282;
   assert(12 % 1 === 0);HEAP32[(($1283)>>2)]=HEAP32[(($1284)>>2)];HEAP32[((($1283)+(4))>>2)]=HEAP32[((($1284)+(4))>>2)];HEAP32[((($1283)+(8))>>2)]=HEAP32[((($1284)+(8))>>2)];
   var $1285=$157;
   $125=$1201;
   $126=$1285;
   var $1286=$125;
   var $1287=$126;
   var $tmp_i_i_i40=$124;
   var $tmp1_i_i_i41=$127;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i40)]=HEAP8[($tmp1_i_i_i41)];
   $122=$1286;
   $123=$1287;
   var $1288=$122;
   $121=$1288;
   var $1289=$121;
   var $1290=(($1289)|0);
   $120=$1290;
   var $1291=$120;
   var $1292=$1291;
   $119=$1292;
   var $1293=$119;
   var $1294=$1293;
   var $1295=$123;
   $117=$1295;
   var $1296=$117;
   var $1297=(($1296)|0);
   $116=$1297;
   var $1298=$116;
   var $1299=$1298;
   $115=$1299;
   var $1300=$115;
   var $1301=$1300;
   $118=$1301;
   var $1302=$118;
   var $1303=$157;
   $130=$1303;
   var $1304=$130;
   var $1305=(($1304)|0);
   $129=$1305;
   var $1306=$129;
   var $1307=$1306;
   $128=$1307;
   var $1308=$128;
   var $1309=(($1308)|0);
   var $1310=(($1309)|0);
   var $1311=$1310;
   var $1312=(($1311)|0);
   $__a_i_i_i35=$1312;
   $__i_i_i_i36=0;
   label = 54; break;
  case 54: 
   var $1314=$__i_i_i_i36;
   var $1315=(($1314)>>>(0)) < 3;
   if ($1315) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $1317=$__i_i_i_i36;
   var $1318=$__a_i_i_i35;
   var $1319=(($1318+($1317<<2))|0);
   HEAP32[(($1319)>>2)]=0;
   var $1320=$__i_i_i_i36;
   var $1321=((($1320)+(1))|0);
   $__i_i_i_i36=$1321;
   label = 54; break;
  case 56: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($456);
   label = 57; break;
  case 57: 
   var $1323=$__mp1;
   $109=$1323;
   var $1324=$109;
   var $1325=$1324;
   var $1326=HEAP32[(($1325)>>2)];
   var $1327=(($1326+12)|0);
   var $1328=HEAP32[(($1327)>>2)];
   var $1329=FUNCTION_TABLE[$1328]($1324);
   var $1330=$441;
   HEAP32[(($1330)>>2)]=$1329;
   var $1331=$__mp1;
   $108=$1331;
   var $1332=$108;
   var $1333=$1332;
   var $1334=HEAP32[(($1333)>>2)];
   var $1335=(($1334+16)|0);
   var $1336=HEAP32[(($1335)>>2)];
   var $1337=FUNCTION_TABLE[$1336]($1332);
   var $1338=$442;
   HEAP32[(($1338)>>2)]=$1337;
   var $1339=$443;
   var $1340=$__mp1;
   $107=$1340;
   var $1341=$107;
   var $1342=$1341;
   var $1343=HEAP32[(($1342)>>2)];
   var $1344=(($1343+20)|0);
   var $1345=HEAP32[(($1344)>>2)];
   FUNCTION_TABLE[$1345]($457, $1341);
   $104=$1339;
   $105=$457;
   var $1346=$104;
   var $1347=$105;
   var $tmp_i46=$103;
   var $tmp1_i47=$106;
   assert(1 % 1 === 0);HEAP8[($tmp_i46)]=HEAP8[($tmp1_i47)];
   $101=$1346;
   $102=$1347;
   var $1348=$101;
   $98=$1348;
   var $1349=$98;
   $97=$1349;
   var $1350=$97;
   $78=$1349;
   var $1351=$78;
   var $1352=(($1351)|0);
   $77=$1352;
   var $1353=$77;
   var $1354=$1353;
   $76=$1354;
   var $1355=$76;
   var $1356=(($1355)|0);
   var $1357=(($1356)|0);
   var $1358=$1357;
   var $1359=(($1358)|0);
   var $1360=$1359;
   var $1361=HEAP8[($1360)];
   var $1362=(($1361)&(255));
   var $1363=$1362 & 1;
   var $1364=(($1363)|(0))!=0;
   if ($1364) { label = 58; break; } else { label = 59; break; }
  case 58: 
   $81=$1349;
   var $1366=$81;
   var $1367=(($1366)|0);
   $80=$1367;
   var $1368=$80;
   var $1369=$1368;
   $79=$1369;
   var $1370=$79;
   var $1371=(($1370)|0);
   var $1372=(($1371)|0);
   var $1373=$1372;
   var $1374=(($1373+8)|0);
   var $1375=HEAP32[(($1374)>>2)];
   HEAP8[($99)]=0;
   $82=$1375;
   $83=$99;
   var $1376=$83;
   var $1377=HEAP8[($1376)];
   var $1378=$82;
   HEAP8[($1378)]=$1377;
   $86=$1349;
   $87=0;
   var $1379=$86;
   var $1380=$87;
   var $1381=(($1379)|0);
   $85=$1381;
   var $1382=$85;
   var $1383=$1382;
   $84=$1383;
   var $1384=$84;
   var $1385=(($1384)|0);
   var $1386=(($1385)|0);
   var $1387=$1386;
   var $1388=(($1387+4)|0);
   HEAP32[(($1388)>>2)]=$1380;
   label = 60; break;
  case 59: 
   $90=$1349;
   var $1390=$90;
   var $1391=(($1390)|0);
   $89=$1391;
   var $1392=$89;
   var $1393=$1392;
   $88=$1393;
   var $1394=$88;
   var $1395=(($1394)|0);
   var $1396=(($1395)|0);
   var $1397=$1396;
   var $1398=(($1397+1)|0);
   var $1399=(($1398)|0);
   HEAP8[($100)]=0;
   $91=$1399;
   $92=$100;
   var $1400=$92;
   var $1401=HEAP8[($1400)];
   var $1402=$91;
   HEAP8[($1402)]=$1401;
   $95=$1349;
   $96=0;
   var $1403=$95;
   var $1404=$96;
   var $1405=$1404 << 1;
   var $1406=(($1405) & 255);
   var $1407=(($1403)|0);
   $94=$1407;
   var $1408=$94;
   var $1409=$1408;
   $93=$1409;
   var $1410=$93;
   var $1411=(($1410)|0);
   var $1412=(($1411)|0);
   var $1413=$1412;
   var $1414=(($1413)|0);
   var $1415=$1414;
   HEAP8[($1415)]=$1406;
   label = 60; break;
  case 60: 
   $55=$1348;
   var $1416=$55;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($1416, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 62; break; } else { label = 61; break; }
  case 61: 
   var $1418$0 = ___cxa_find_matching_catch(-1, -1,0); $1418$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 62: 
   var $1419=(($1348)|0);
   $57=$1419;
   var $1420=$57;
   var $1421=$1420;
   $56=$1421;
   var $1422=$56;
   var $1423=(($1422)|0);
   var $1424=$102;
   var $1425=(($1424)|0);
   $59=$1425;
   var $1426=$59;
   var $1427=$1426;
   $58=$1427;
   var $1428=$58;
   var $1429=(($1428)|0);
   var $1430=$1423;
   var $1431=$1429;
   assert(12 % 1 === 0);HEAP32[(($1430)>>2)]=HEAP32[(($1431)>>2)];HEAP32[((($1430)+(4))>>2)]=HEAP32[((($1431)+(4))>>2)];HEAP32[((($1430)+(8))>>2)]=HEAP32[((($1431)+(8))>>2)];
   var $1432=$102;
   $70=$1348;
   $71=$1432;
   var $1433=$70;
   var $1434=$71;
   var $tmp_i_i_i49=$69;
   var $tmp1_i_i_i50=$72;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i49)]=HEAP8[($tmp1_i_i_i50)];
   $67=$1433;
   $68=$1434;
   var $1435=$67;
   $66=$1435;
   var $1436=$66;
   var $1437=(($1436)|0);
   $65=$1437;
   var $1438=$65;
   var $1439=$1438;
   $64=$1439;
   var $1440=$64;
   var $1441=$1440;
   var $1442=$68;
   $62=$1442;
   var $1443=$62;
   var $1444=(($1443)|0);
   $61=$1444;
   var $1445=$61;
   var $1446=$1445;
   $60=$1446;
   var $1447=$60;
   var $1448=$1447;
   $63=$1448;
   var $1449=$63;
   var $1450=$102;
   $75=$1450;
   var $1451=$75;
   var $1452=(($1451)|0);
   $74=$1452;
   var $1453=$74;
   var $1454=$1453;
   $73=$1454;
   var $1455=$73;
   var $1456=(($1455)|0);
   var $1457=(($1456)|0);
   var $1458=$1457;
   var $1459=(($1458)|0);
   $__a_i_i_i44=$1459;
   $__i_i_i_i45=0;
   label = 63; break;
  case 63: 
   var $1461=$__i_i_i_i45;
   var $1462=(($1461)>>>(0)) < 3;
   if ($1462) { label = 64; break; } else { label = 65; break; }
  case 64: 
   var $1464=$__i_i_i_i45;
   var $1465=$__a_i_i_i44;
   var $1466=(($1465+($1464<<2))|0);
   HEAP32[(($1466)>>2)]=0;
   var $1467=$__i_i_i_i45;
   var $1468=((($1467)+(1))|0);
   $__i_i_i_i45=$1468;
   label = 63; break;
  case 65: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($457);
   var $1469=$444;
   var $1470=$__mp1;
   $54=$1470;
   var $1471=$54;
   var $1472=$1471;
   var $1473=HEAP32[(($1472)>>2)];
   var $1474=(($1473+24)|0);
   var $1475=HEAP32[(($1474)>>2)];
   FUNCTION_TABLE[$1475]($458, $1471);
   $51=$1469;
   $52=$458;
   var $1476=$51;
   var $1477=$52;
   var $tmp_i55=$50;
   var $tmp1_i56=$53;
   assert(1 % 1 === 0);HEAP8[($tmp_i55)]=HEAP8[($tmp1_i56)];
   $48=$1476;
   $49=$1477;
   var $1478=$48;
   $45=$1478;
   var $1479=$45;
   $44=$1479;
   var $1480=$44;
   $25=$1479;
   var $1481=$25;
   var $1482=(($1481)|0);
   $24=$1482;
   var $1483=$24;
   var $1484=$1483;
   $23=$1484;
   var $1485=$23;
   var $1486=(($1485)|0);
   var $1487=(($1486)|0);
   var $1488=$1487;
   var $1489=(($1488)|0);
   var $1490=$1489;
   var $1491=HEAP8[($1490)];
   var $1492=(($1491)&(255));
   var $1493=$1492 & 1;
   var $1494=(($1493)|(0))!=0;
   if ($1494) { label = 66; break; } else { label = 67; break; }
  case 66: 
   $28=$1479;
   var $1496=$28;
   var $1497=(($1496)|0);
   $27=$1497;
   var $1498=$27;
   var $1499=$1498;
   $26=$1499;
   var $1500=$26;
   var $1501=(($1500)|0);
   var $1502=(($1501)|0);
   var $1503=$1502;
   var $1504=(($1503+8)|0);
   var $1505=HEAP32[(($1504)>>2)];
   HEAP32[(($46)>>2)]=0;
   $29=$1505;
   $30=$46;
   var $1506=$30;
   var $1507=HEAP32[(($1506)>>2)];
   var $1508=$29;
   HEAP32[(($1508)>>2)]=$1507;
   $33=$1479;
   $34=0;
   var $1509=$33;
   var $1510=$34;
   var $1511=(($1509)|0);
   $32=$1511;
   var $1512=$32;
   var $1513=$1512;
   $31=$1513;
   var $1514=$31;
   var $1515=(($1514)|0);
   var $1516=(($1515)|0);
   var $1517=$1516;
   var $1518=(($1517+4)|0);
   HEAP32[(($1518)>>2)]=$1510;
   label = 68; break;
  case 67: 
   $37=$1479;
   var $1520=$37;
   var $1521=(($1520)|0);
   $36=$1521;
   var $1522=$36;
   var $1523=$1522;
   $35=$1523;
   var $1524=$35;
   var $1525=(($1524)|0);
   var $1526=(($1525)|0);
   var $1527=$1526;
   var $1528=(($1527+4)|0);
   var $1529=(($1528)|0);
   HEAP32[(($47)>>2)]=0;
   $38=$1529;
   $39=$47;
   var $1530=$39;
   var $1531=HEAP32[(($1530)>>2)];
   var $1532=$38;
   HEAP32[(($1532)>>2)]=$1531;
   $42=$1479;
   $43=0;
   var $1533=$42;
   var $1534=$43;
   var $1535=$1534 << 1;
   var $1536=(($1535) & 255);
   var $1537=(($1533)|0);
   $41=$1537;
   var $1538=$41;
   var $1539=$1538;
   $40=$1539;
   var $1540=$40;
   var $1541=(($1540)|0);
   var $1542=(($1541)|0);
   var $1543=$1542;
   var $1544=(($1543)|0);
   var $1545=$1544;
   HEAP8[($1545)]=$1536;
   label = 68; break;
  case 68: 
   $2=$1478;
   var $1546=$2;
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($1546, 0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 70; break; } else { label = 69; break; }
  case 69: 
   var $1548$0 = ___cxa_find_matching_catch(-1, -1,0); $1548$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 70: 
   var $1549=(($1478)|0);
   $4=$1549;
   var $1550=$4;
   var $1551=$1550;
   $3=$1551;
   var $1552=$3;
   var $1553=(($1552)|0);
   var $1554=$49;
   var $1555=(($1554)|0);
   $6=$1555;
   var $1556=$6;
   var $1557=$1556;
   $5=$1557;
   var $1558=$5;
   var $1559=(($1558)|0);
   var $1560=$1553;
   var $1561=$1559;
   assert(12 % 1 === 0);HEAP32[(($1560)>>2)]=HEAP32[(($1561)>>2)];HEAP32[((($1560)+(4))>>2)]=HEAP32[((($1561)+(4))>>2)];HEAP32[((($1560)+(8))>>2)]=HEAP32[((($1561)+(8))>>2)];
   var $1562=$49;
   $17=$1478;
   $18=$1562;
   var $1563=$17;
   var $1564=$18;
   var $tmp_i_i_i58=$16;
   var $tmp1_i_i_i59=$19;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i58)]=HEAP8[($tmp1_i_i_i59)];
   $14=$1563;
   $15=$1564;
   var $1565=$14;
   $13=$1565;
   var $1566=$13;
   var $1567=(($1566)|0);
   $12=$1567;
   var $1568=$12;
   var $1569=$1568;
   $11=$1569;
   var $1570=$11;
   var $1571=$1570;
   var $1572=$15;
   $9=$1572;
   var $1573=$9;
   var $1574=(($1573)|0);
   $8=$1574;
   var $1575=$8;
   var $1576=$1575;
   $7=$1576;
   var $1577=$7;
   var $1578=$1577;
   $10=$1578;
   var $1579=$10;
   var $1580=$49;
   $22=$1580;
   var $1581=$22;
   var $1582=(($1581)|0);
   $21=$1582;
   var $1583=$21;
   var $1584=$1583;
   $20=$1584;
   var $1585=$20;
   var $1586=(($1585)|0);
   var $1587=(($1586)|0);
   var $1588=$1587;
   var $1589=(($1588)|0);
   $__a_i_i_i53=$1589;
   $__i_i_i_i54=0;
   label = 71; break;
  case 71: 
   var $1591=$__i_i_i_i54;
   var $1592=(($1591)>>>(0)) < 3;
   if ($1592) { label = 72; break; } else { label = 73; break; }
  case 72: 
   var $1594=$__i_i_i_i54;
   var $1595=$__a_i_i_i53;
   var $1596=(($1595+($1594<<2))|0);
   HEAP32[(($1596)>>2)]=0;
   var $1597=$__i_i_i_i54;
   var $1598=((($1597)+(1))|0);
   $__i_i_i_i54=$1598;
   label = 71; break;
  case 73: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($458);
   var $1599=$__mp1;
   $1=$1599;
   var $1600=$1;
   var $1601=$1600;
   var $1602=HEAP32[(($1601)>>2)];
   var $1603=(($1602+36)|0);
   var $1604=HEAP32[(($1603)>>2)];
   var $1605=FUNCTION_TABLE[$1604]($1600);
   var $1606=$446;
   HEAP32[(($1606)>>2)]=$1605;
   label = 74; break;
  case 74: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27=__stackBase__;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38=(__stackBase__)+(8);
   var $39=(__stackBase__)+(16);
   var $40=(__stackBase__)+(24);
   var $41;
   var $42=(__stackBase__)+(32);
   var $43=(__stackBase__)+(40);
   var $44=(__stackBase__)+(48);
   var $45=(__stackBase__)+(56);
   var $46=(__stackBase__)+(64);
   var $47=(__stackBase__)+(72);
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $122;
   var $123;
   var $124;
   var $125;
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154;
   var $155;
   var $156;
   var $157;
   var $158;
   var $159;
   var $__t_i_i_i=(__stackBase__)+(80);
   var $160;
   var $161;
   var $162=(__stackBase__)+(88);
   var $163;
   var $164;
   var $165=(__stackBase__)+(96);
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177;
   var $178;
   var $179;
   var $180;
   var $181;
   var $182;
   var $183;
   var $184;
   var $185;
   var $186;
   var $187;
   var $188;
   var $189;
   var $190;
   var $191;
   var $192;
   var $193;
   var $194;
   var $195;
   var $196;
   var $197;
   var $198;
   var $199;
   var $200;
   var $201;
   var $202;
   var $203;
   var $204;
   var $205;
   var $206;
   var $207;
   var $208;
   var $209;
   var $210;
   var $211;
   var $212;
   var $213;
   var $214;
   var $215;
   var $216;
   var $217;
   var $218;
   var $219;
   var $220;
   var $221;
   var $222=(__stackBase__)+(104);
   var $223;
   var $224;
   var $225;
   var $226;
   var $227;
   var $228;
   var $229;
   var $230;
   var $231;
   var $232;
   var $233=(__stackBase__)+(112);
   var $234=(__stackBase__)+(120);
   var $235=(__stackBase__)+(128);
   var $236;
   var $237=(__stackBase__)+(136);
   var $238=(__stackBase__)+(144);
   var $239=(__stackBase__)+(152);
   var $240=(__stackBase__)+(160);
   var $241=(__stackBase__)+(168);
   var $242=(__stackBase__)+(176);
   var $243;
   var $244;
   var $245;
   var $246;
   var $247;
   var $248;
   var $249;
   var $250;
   var $251;
   var $252;
   var $253;
   var $254;
   var $255;
   var $256;
   var $257;
   var $258;
   var $259;
   var $260;
   var $261;
   var $262;
   var $263;
   var $264;
   var $265;
   var $266;
   var $267;
   var $268;
   var $269;
   var $270;
   var $__p;
   var $271=(__stackBase__)+(184);
   var $272=(__stackBase__)+(192);
   var $__t;
   var $__d;
   var $__f;
   var $__z;
   var $__ng;
   var $__ig;
   var $__gl;
   var $273=(__stackBase__)+(200);
   var $274=(__stackBase__)+(208);
   var $275=(__stackBase__)+(216);
   $256=$__mb;
   $257=$__mi;
   $258=$__me;
   $259=$__flags;
   $260=$__db;
   $261=$__de;
   $262=$__ct;
   var $276=(($__neg)&(1));
   $263=$276;
   $264=$__pat;
   $265=$__dp;
   $266=$__ts;
   $267=$__grp;
   $268=$__sym;
   $269=$__sn;
   $270=$__fd;
   var $277=$256;
   var $278=$258;
   HEAP32[(($278)>>2)]=$277;
   $__p=0;
   label = 2; break;
  case 2: 
   var $280=$__p;
   var $281=(($280)>>>(0)) < 4;
   if ($281) { label = 3; break; } else { label = 96; break; }
  case 3: 
   var $283=$__p;
   var $284=$264;
   var $285=(($284)|0);
   var $286=(($285+$283)|0);
   var $287=HEAP8[($286)];
   var $288=(($287 << 24) >> 24);
   if ((($288)|(0))==0) {
    label = 4; break;
   }
   else if ((($288)|(0))==1) {
    label = 5; break;
   }
   else if ((($288)|(0))==3) {
    label = 6; break;
   }
   else if ((($288)|(0))==2) {
    label = 15; break;
   }
   else if ((($288)|(0))==4) {
    label = 34; break;
   }
   else {
   label = 94; break;
   }
  case 4: 
   var $290=$258;
   var $291=HEAP32[(($290)>>2)];
   var $292=$257;
   HEAP32[(($292)>>2)]=$291;
   label = 94; break;
  case 5: 
   var $294=$258;
   var $295=HEAP32[(($294)>>2)];
   var $296=$257;
   HEAP32[(($296)>>2)]=$295;
   var $297=$262;
   $254=$297;
   $255=32;
   var $298=$254;
   var $299=$298;
   var $300=HEAP32[(($299)>>2)];
   var $301=(($300+44)|0);
   var $302=HEAP32[(($301)>>2)];
   var $303=$255;
   var $304=FUNCTION_TABLE[$302]($298, $303);
   var $305=$258;
   var $306=HEAP32[(($305)>>2)];
   var $307=(($306+4)|0);
   HEAP32[(($305)>>2)]=$307;
   HEAP32[(($306)>>2)]=$304;
   label = 94; break;
  case 6: 
   var $309=$269;
   $253=$309;
   var $310=$253;
   $252=$310;
   var $311=$252;
   $251=$311;
   var $312=$251;
   var $313=(($312)|0);
   $250=$313;
   var $314=$250;
   var $315=$314;
   $249=$315;
   var $316=$249;
   var $317=(($316)|0);
   var $318=(($317)|0);
   var $319=$318;
   var $320=(($319)|0);
   var $321=$320;
   var $322=HEAP8[($321)];
   var $323=(($322)&(255));
   var $324=$323 & 1;
   var $325=(($324)|(0))!=0;
   if ($325) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $245=$311;
   var $327=$245;
   var $328=(($327)|0);
   $244=$328;
   var $329=$244;
   var $330=$329;
   $243=$330;
   var $331=$243;
   var $332=(($331)|0);
   var $333=(($332)|0);
   var $334=$333;
   var $335=(($334+4)|0);
   var $336=HEAP32[(($335)>>2)];
   var $351 = $336;label = 9; break;
  case 8: 
   $248=$311;
   var $338=$248;
   var $339=(($338)|0);
   $247=$339;
   var $340=$247;
   var $341=$340;
   $246=$341;
   var $342=$246;
   var $343=(($342)|0);
   var $344=(($343)|0);
   var $345=$344;
   var $346=(($345)|0);
   var $347=$346;
   var $348=HEAP8[($347)];
   var $349=(($348)&(255));
   var $350=$349 >> 1;
   var $351 = $350;label = 9; break;
  case 9: 
   var $351;
   var $352=(($351)|(0))==0;
   if ($352) { label = 14; break; } else { label = 10; break; }
  case 10: 
   var $354=$269;
   $91=$354;
   $92=0;
   var $355=$91;
   $90=$355;
   var $356=$90;
   $89=$356;
   var $357=$89;
   $88=$357;
   var $358=$88;
   var $359=(($358)|0);
   $87=$359;
   var $360=$87;
   var $361=$360;
   $86=$361;
   var $362=$86;
   var $363=(($362)|0);
   var $364=(($363)|0);
   var $365=$364;
   var $366=(($365)|0);
   var $367=$366;
   var $368=HEAP8[($367)];
   var $369=(($368)&(255));
   var $370=$369 & 1;
   var $371=(($370)|(0))!=0;
   if ($371) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $82=$357;
   var $373=$82;
   var $374=(($373)|0);
   $81=$374;
   var $375=$81;
   var $376=$375;
   $80=$376;
   var $377=$80;
   var $378=(($377)|0);
   var $379=(($378)|0);
   var $380=$379;
   var $381=(($380+8)|0);
   var $382=HEAP32[(($381)>>2)];
   var $394 = $382;label = 13; break;
  case 12: 
   $85=$357;
   var $384=$85;
   var $385=(($384)|0);
   $84=$385;
   var $386=$84;
   var $387=$386;
   $83=$387;
   var $388=$83;
   var $389=(($388)|0);
   var $390=(($389)|0);
   var $391=$390;
   var $392=(($391+4)|0);
   var $393=(($392)|0);
   var $394 = $393;label = 13; break;
  case 13: 
   var $394;
   var $395=$92;
   var $396=(($394+($395<<2))|0);
   var $397=HEAP32[(($396)>>2)];
   var $398=$258;
   var $399=HEAP32[(($398)>>2)];
   var $400=(($399+4)|0);
   HEAP32[(($398)>>2)]=$400;
   HEAP32[(($399)>>2)]=$397;
   label = 14; break;
  case 14: 
   label = 94; break;
  case 15: 
   var $403=$268;
   $77=$403;
   var $404=$77;
   $76=$404;
   var $405=$76;
   $75=$405;
   var $406=$75;
   var $407=(($406)|0);
   $74=$407;
   var $408=$74;
   var $409=$408;
   $73=$409;
   var $410=$73;
   var $411=(($410)|0);
   var $412=(($411)|0);
   var $413=$412;
   var $414=(($413)|0);
   var $415=$414;
   var $416=HEAP8[($415)];
   var $417=(($416)&(255));
   var $418=$417 & 1;
   var $419=(($418)|(0))!=0;
   if ($419) { label = 16; break; } else { label = 17; break; }
  case 16: 
   $69=$405;
   var $421=$69;
   var $422=(($421)|0);
   $68=$422;
   var $423=$68;
   var $424=$423;
   $67=$424;
   var $425=$67;
   var $426=(($425)|0);
   var $427=(($426)|0);
   var $428=$427;
   var $429=(($428+4)|0);
   var $430=HEAP32[(($429)>>2)];
   var $445 = $430;label = 18; break;
  case 17: 
   $72=$405;
   var $432=$72;
   var $433=(($432)|0);
   $71=$433;
   var $434=$71;
   var $435=$434;
   $70=$435;
   var $436=$70;
   var $437=(($436)|0);
   var $438=(($437)|0);
   var $439=$438;
   var $440=(($439)|0);
   var $441=$440;
   var $442=HEAP8[($441)];
   var $443=(($442)&(255));
   var $444=$443 >> 1;
   var $445 = $444;label = 18; break;
  case 18: 
   var $445;
   var $446=(($445)|(0))==0;
   if ($446) { label = 33; break; } else { label = 19; break; }
  case 19: 
   var $448=$259;
   var $449=$448 & 512;
   var $450=(($449)|(0))!=0;
   if ($450) { label = 20; break; } else { label = 33; break; }
  case 20: 
   var $452=$268;
   $63=$452;
   var $453=$63;
   $62=$453;
   var $454=$62;
   $61=$454;
   var $455=$61;
   $60=$455;
   var $456=$60;
   var $457=(($456)|0);
   $59=$457;
   var $458=$59;
   var $459=$458;
   $58=$459;
   var $460=$58;
   var $461=(($460)|0);
   var $462=(($461)|0);
   var $463=$462;
   var $464=(($463)|0);
   var $465=$464;
   var $466=HEAP8[($465)];
   var $467=(($466)&(255));
   var $468=$467 & 1;
   var $469=(($468)|(0))!=0;
   if ($469) { label = 21; break; } else { label = 22; break; }
  case 21: 
   $54=$455;
   var $471=$54;
   var $472=(($471)|0);
   $53=$472;
   var $473=$53;
   var $474=$473;
   $52=$474;
   var $475=$52;
   var $476=(($475)|0);
   var $477=(($476)|0);
   var $478=$477;
   var $479=(($478+8)|0);
   var $480=HEAP32[(($479)>>2)];
   var $492 = $480;label = 23; break;
  case 22: 
   $57=$455;
   var $482=$57;
   var $483=(($482)|0);
   $56=$483;
   var $484=$56;
   var $485=$484;
   $55=$485;
   var $486=$55;
   var $487=(($486)|0);
   var $488=(($487)|0);
   var $489=$488;
   var $490=(($489+4)|0);
   var $491=(($490)|0);
   var $492 = $491;label = 23; break;
  case 23: 
   var $492;
   $50=$271;
   $51=$492;
   var $493=$50;
   var $494=$51;
   $48=$493;
   $49=$494;
   var $495=$48;
   var $496=(($495)|0);
   var $497=$49;
   HEAP32[(($496)>>2)]=$497;
   var $498=$268;
   $26=$498;
   var $499=$26;
   $25=$499;
   var $500=$25;
   $24=$500;
   var $501=$24;
   $23=$501;
   var $502=$23;
   var $503=(($502)|0);
   $22=$503;
   var $504=$22;
   var $505=$504;
   $21=$505;
   var $506=$21;
   var $507=(($506)|0);
   var $508=(($507)|0);
   var $509=$508;
   var $510=(($509)|0);
   var $511=$510;
   var $512=HEAP8[($511)];
   var $513=(($512)&(255));
   var $514=$513 & 1;
   var $515=(($514)|(0))!=0;
   if ($515) { label = 24; break; } else { label = 25; break; }
  case 24: 
   $17=$501;
   var $517=$17;
   var $518=(($517)|0);
   $16=$518;
   var $519=$16;
   var $520=$519;
   $15=$520;
   var $521=$15;
   var $522=(($521)|0);
   var $523=(($522)|0);
   var $524=$523;
   var $525=(($524+8)|0);
   var $526=HEAP32[(($525)>>2)];
   var $538 = $526;label = 26; break;
  case 25: 
   $20=$501;
   var $528=$20;
   var $529=(($528)|0);
   $19=$529;
   var $530=$19;
   var $531=$530;
   $18=$531;
   var $532=$18;
   var $533=(($532)|0);
   var $534=(($533)|0);
   var $535=$534;
   var $536=(($535+4)|0);
   var $537=(($536)|0);
   var $538 = $537;label = 26; break;
  case 26: 
   var $538;
   $10=$499;
   var $539=$10;
   $9=$539;
   var $540=$9;
   var $541=(($540)|0);
   $8=$541;
   var $542=$8;
   var $543=$542;
   $7=$543;
   var $544=$7;
   var $545=(($544)|0);
   var $546=(($545)|0);
   var $547=$546;
   var $548=(($547)|0);
   var $549=$548;
   var $550=HEAP8[($549)];
   var $551=(($550)&(255));
   var $552=$551 & 1;
   var $553=(($552)|(0))!=0;
   if ($553) { label = 27; break; } else { label = 28; break; }
  case 27: 
   $3=$539;
   var $555=$3;
   var $556=(($555)|0);
   $2=$556;
   var $557=$2;
   var $558=$557;
   $1=$558;
   var $559=$1;
   var $560=(($559)|0);
   var $561=(($560)|0);
   var $562=$561;
   var $563=(($562+4)|0);
   var $564=HEAP32[(($563)>>2)];
   var $579 = $564;label = 29; break;
  case 28: 
   $6=$539;
   var $566=$6;
   var $567=(($566)|0);
   $5=$567;
   var $568=$5;
   var $569=$568;
   $4=$569;
   var $570=$4;
   var $571=(($570)|0);
   var $572=(($571)|0);
   var $573=$572;
   var $574=(($573)|0);
   var $575=$574;
   var $576=HEAP8[($575)];
   var $577=(($576)&(255));
   var $578=$577 >> 1;
   var $579 = $578;label = 29; break;
  case 29: 
   var $579;
   var $580=(($538+($579<<2))|0);
   $13=$272;
   $14=$580;
   var $581=$13;
   var $582=$14;
   $11=$581;
   $12=$582;
   var $583=$11;
   var $584=(($583)|0);
   var $585=$12;
   HEAP32[(($584)>>2)]=$585;
   var $586=$258;
   var $587=HEAP32[(($586)>>2)];
   var $tmp13=$47;
   var $tmp14=$271;
   assert(4 % 1 === 0);HEAP8[($tmp13)]=HEAP8[($tmp14)];HEAP8[((($tmp13)+(1))|0)]=HEAP8[((($tmp14)+(1))|0)];HEAP8[((($tmp13)+(2))|0)]=HEAP8[((($tmp14)+(2))|0)];HEAP8[((($tmp13)+(3))|0)]=HEAP8[((($tmp14)+(3))|0)];
   var $tmp15=$46;
   var $tmp16=$272;
   assert(4 % 1 === 0);HEAP8[($tmp15)]=HEAP8[($tmp16)];HEAP8[((($tmp15)+(1))|0)]=HEAP8[((($tmp16)+(1))|0)];HEAP8[((($tmp15)+(2))|0)]=HEAP8[((($tmp16)+(2))|0)];HEAP8[((($tmp15)+(3))|0)]=HEAP8[((($tmp16)+(3))|0)];
   $41=$587;
   var $588=$43;
   var $589=$47;
   assert(4 % 1 === 0);HEAP32[(($588)>>2)]=HEAP32[(($589)>>2)];
   var $tmp_i17=$40;
   var $tmp1_i18=$43;
   assert(4 % 1 === 0);HEAP8[($tmp_i17)]=HEAP8[($tmp1_i18)];HEAP8[((($tmp_i17)+(1))|0)]=HEAP8[((($tmp1_i18)+(1))|0)];HEAP8[((($tmp_i17)+(2))|0)]=HEAP8[((($tmp1_i18)+(2))|0)];HEAP8[((($tmp_i17)+(3))|0)]=HEAP8[((($tmp1_i18)+(3))|0)];
   var $590=$42;
   var $591=$40;
   assert(4 % 1 === 0);HEAP32[(($590)>>2)]=HEAP32[(($591)>>2)];
   var $592=$45;
   var $593=$46;
   assert(4 % 1 === 0);HEAP32[(($592)>>2)]=HEAP32[(($593)>>2)];
   var $tmp6_i19=$27;
   var $tmp7_i20=$45;
   assert(4 % 1 === 0);HEAP8[($tmp6_i19)]=HEAP8[($tmp7_i20)];HEAP8[((($tmp6_i19)+(1))|0)]=HEAP8[((($tmp7_i20)+(1))|0)];HEAP8[((($tmp6_i19)+(2))|0)]=HEAP8[((($tmp7_i20)+(2))|0)];HEAP8[((($tmp6_i19)+(3))|0)]=HEAP8[((($tmp7_i20)+(3))|0)];
   var $594=$44;
   var $595=$27;
   assert(4 % 1 === 0);HEAP32[(($594)>>2)]=HEAP32[(($595)>>2)];
   var $596=$41;
   $28=$596;
   var $597=$28;
   var $tmp2_i21=$39;
   var $tmp3_i22=$42;
   assert(4 % 1 === 0);HEAP8[($tmp2_i21)]=HEAP8[($tmp3_i22)];HEAP8[((($tmp2_i21)+(1))|0)]=HEAP8[((($tmp3_i22)+(1))|0)];HEAP8[((($tmp2_i21)+(2))|0)]=HEAP8[((($tmp3_i22)+(2))|0)];HEAP8[((($tmp2_i21)+(3))|0)]=HEAP8[((($tmp3_i22)+(3))|0)];
   var $tmp4_i23=$38;
   var $tmp5_i24=$44;
   assert(4 % 1 === 0);HEAP8[($tmp4_i23)]=HEAP8[($tmp5_i24)];HEAP8[((($tmp4_i23)+(1))|0)]=HEAP8[((($tmp5_i24)+(1))|0)];HEAP8[((($tmp4_i23)+(2))|0)]=HEAP8[((($tmp5_i24)+(2))|0)];HEAP8[((($tmp4_i23)+(3))|0)]=HEAP8[((($tmp5_i24)+(3))|0)];
   $37=$597;
   label = 30; break;
  case 30: 
   $35=$39;
   $36=$38;
   var $599=$35;
   var $600=$36;
   $33=$599;
   $34=$600;
   var $601=$33;
   $32=$601;
   var $602=$32;
   var $603=(($602)|0);
   var $604=HEAP32[(($603)>>2)];
   var $605=$34;
   $31=$605;
   var $606=$31;
   var $607=(($606)|0);
   var $608=HEAP32[(($607)>>2)];
   var $609=(($604)|(0))==(($608)|(0));
   var $610=$609 ^ 1;
   if ($610) { label = 31; break; } else { label = 32; break; }
  case 31: 
   $29=$39;
   var $612=$29;
   var $613=(($612)|0);
   var $614=HEAP32[(($613)>>2)];
   var $615=HEAP32[(($614)>>2)];
   var $616=$37;
   HEAP32[(($616)>>2)]=$615;
   $30=$39;
   var $617=$30;
   var $618=(($617)|0);
   var $619=HEAP32[(($618)>>2)];
   var $620=(($619+4)|0);
   HEAP32[(($618)>>2)]=$620;
   var $621=$37;
   var $622=(($621+4)|0);
   $37=$622;
   label = 30; break;
  case 32: 
   var $623=$37;
   var $624=$258;
   HEAP32[(($624)>>2)]=$623;
   label = 33; break;
  case 33: 
   label = 94; break;
  case 34: 
   var $627=$258;
   var $628=HEAP32[(($627)>>2)];
   $__t=$628;
   var $629=$263;
   var $630=(($629) & 1);
   if ($630) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $632=$260;
   var $633=(($632+4)|0);
   $260=$633;
   label = 36; break;
  case 36: 
   var $635=$260;
   $__d=$635;
   label = 37; break;
  case 37: 
   var $637=$__d;
   var $638=$261;
   var $639=(($637)>>>(0)) < (($638)>>>(0));
   if ($639) { label = 38; break; } else { label = 42; break; }
  case 38: 
   var $641=$262;
   var $642=$__d;
   var $643=HEAP32[(($642)>>2)];
   $64=$641;
   $65=2048;
   $66=$643;
   var $644=$64;
   var $645=$644;
   var $646=HEAP32[(($645)>>2)];
   var $647=(($646+12)|0);
   var $648=HEAP32[(($647)>>2)];
   var $649=$65;
   var $650=$66;
   var $651=FUNCTION_TABLE[$648]($644, $649, $650);
   if ($651) { label = 40; break; } else { label = 39; break; }
  case 39: 
   label = 42; break;
  case 40: 
   label = 41; break;
  case 41: 
   var $655=$__d;
   var $656=(($655+4)|0);
   $__d=$656;
   label = 37; break;
  case 42: 
   var $658=$270;
   var $659=(($658)|(0)) > 0;
   if ($659) { label = 43; break; } else { label = 57; break; }
  case 43: 
   var $661=$270;
   $__f=$661;
   label = 44; break;
  case 44: 
   var $663=$__d;
   var $664=$260;
   var $665=(($663)>>>(0)) > (($664)>>>(0));
   if ($665) { label = 45; break; } else { var $670 = 0;label = 46; break; }
  case 45: 
   var $667=$__f;
   var $668=(($667)|(0)) > 0;
   var $670 = $668;label = 46; break;
  case 46: 
   var $670;
   if ($670) { label = 47; break; } else { label = 49; break; }
  case 47: 
   var $672=$__d;
   var $673=((($672)-(4))|0);
   $__d=$673;
   var $674=HEAP32[(($673)>>2)];
   var $675=$258;
   var $676=HEAP32[(($675)>>2)];
   var $677=(($676+4)|0);
   HEAP32[(($675)>>2)]=$677;
   HEAP32[(($676)>>2)]=$674;
   label = 48; break;
  case 48: 
   var $679=$__f;
   var $680=((($679)-(1))|0);
   $__f=$680;
   label = 44; break;
  case 49: 
   var $682=$__f;
   var $683=(($682)|(0)) > 0;
   if ($683) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $685=$262;
   $78=$685;
   $79=48;
   var $686=$78;
   var $687=$686;
   var $688=HEAP32[(($687)>>2)];
   var $689=(($688+44)|0);
   var $690=HEAP32[(($689)>>2)];
   var $691=$79;
   var $692=FUNCTION_TABLE[$690]($686, $691);
   var $695 = $692;label = 52; break;
  case 51: 
   var $695 = 0;label = 52; break;
  case 52: 
   var $695;
   $__z=$695;
   label = 53; break;
  case 53: 
   var $697=$__f;
   var $698=(($697)|(0)) > 0;
   if ($698) { label = 54; break; } else { label = 56; break; }
  case 54: 
   var $700=$__z;
   var $701=$258;
   var $702=HEAP32[(($701)>>2)];
   var $703=(($702+4)|0);
   HEAP32[(($701)>>2)]=$703;
   HEAP32[(($702)>>2)]=$700;
   label = 55; break;
  case 55: 
   var $705=$__f;
   var $706=((($705)-(1))|0);
   $__f=$706;
   label = 53; break;
  case 56: 
   var $708=$265;
   var $709=$258;
   var $710=HEAP32[(($709)>>2)];
   var $711=(($710+4)|0);
   HEAP32[(($709)>>2)]=$711;
   HEAP32[(($710)>>2)]=$708;
   label = 57; break;
  case 57: 
   var $713=$__d;
   var $714=$260;
   var $715=(($713)|(0))==(($714)|(0));
   if ($715) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $717=$262;
   $93=$717;
   $94=48;
   var $718=$93;
   var $719=$718;
   var $720=HEAP32[(($719)>>2)];
   var $721=(($720+44)|0);
   var $722=HEAP32[(($721)>>2)];
   var $723=$94;
   var $724=FUNCTION_TABLE[$722]($718, $723);
   var $725=$258;
   var $726=HEAP32[(($725)>>2)];
   var $727=(($726+4)|0);
   HEAP32[(($725)>>2)]=$727;
   HEAP32[(($726)>>2)]=$724;
   label = 88; break;
  case 59: 
   $__ng=0;
   $__ig=0;
   var $729=$267;
   $105=$729;
   var $730=$105;
   $104=$730;
   var $731=$104;
   $103=$731;
   var $732=$103;
   var $733=(($732)|0);
   $102=$733;
   var $734=$102;
   var $735=$734;
   $101=$735;
   var $736=$101;
   var $737=(($736)|0);
   var $738=(($737)|0);
   var $739=$738;
   var $740=(($739)|0);
   var $741=$740;
   var $742=HEAP8[($741)];
   var $743=(($742)&(255));
   var $744=$743 & 1;
   var $745=(($744)|(0))!=0;
   if ($745) { label = 60; break; } else { label = 61; break; }
  case 60: 
   $97=$731;
   var $747=$97;
   var $748=(($747)|0);
   $96=$748;
   var $749=$96;
   var $750=$749;
   $95=$750;
   var $751=$95;
   var $752=(($751)|0);
   var $753=(($752)|0);
   var $754=$753;
   var $755=(($754+4)|0);
   var $756=HEAP32[(($755)>>2)];
   var $771 = $756;label = 62; break;
  case 61: 
   $100=$731;
   var $758=$100;
   var $759=(($758)|0);
   $99=$759;
   var $760=$99;
   var $761=$760;
   $98=$761;
   var $762=$98;
   var $763=(($762)|0);
   var $764=(($763)|0);
   var $765=$764;
   var $766=(($765)|0);
   var $767=$766;
   var $768=HEAP8[($767)];
   var $769=(($768)&(255));
   var $770=$769 >> 1;
   var $771 = $770;label = 62; break;
  case 62: 
   var $771;
   var $772=(($771)|(0))==0;
   if ($772) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $822 = -1;label = 68; break;
  case 64: 
   var $775=$267;
   var $776=$__ig;
   $117=$775;
   $118=$776;
   var $777=$117;
   $116=$777;
   var $778=$116;
   $115=$778;
   var $779=$115;
   $114=$779;
   var $780=$114;
   var $781=(($780)|0);
   $113=$781;
   var $782=$113;
   var $783=$782;
   $112=$783;
   var $784=$112;
   var $785=(($784)|0);
   var $786=(($785)|0);
   var $787=$786;
   var $788=(($787)|0);
   var $789=$788;
   var $790=HEAP8[($789)];
   var $791=(($790)&(255));
   var $792=$791 & 1;
   var $793=(($792)|(0))!=0;
   if ($793) { label = 65; break; } else { label = 66; break; }
  case 65: 
   $108=$779;
   var $795=$108;
   var $796=(($795)|0);
   $107=$796;
   var $797=$107;
   var $798=$797;
   $106=$798;
   var $799=$106;
   var $800=(($799)|0);
   var $801=(($800)|0);
   var $802=$801;
   var $803=(($802+8)|0);
   var $804=HEAP32[(($803)>>2)];
   var $816 = $804;label = 67; break;
  case 66: 
   $111=$779;
   var $806=$111;
   var $807=(($806)|0);
   $110=$807;
   var $808=$110;
   var $809=$808;
   $109=$809;
   var $810=$109;
   var $811=(($810)|0);
   var $812=(($811)|0);
   var $813=$812;
   var $814=(($813+1)|0);
   var $815=(($814)|0);
   var $816 = $815;label = 67; break;
  case 67: 
   var $816;
   var $817=$118;
   var $818=(($816+$817)|0);
   var $819=HEAP8[($818)];
   var $820=(($819 << 24) >> 24);
   var $822 = $820;label = 68; break;
  case 68: 
   var $822;
   $__gl=$822;
   label = 69; break;
  case 69: 
   var $824=$__d;
   var $825=$260;
   var $826=(($824)|(0))!=(($825)|(0));
   if ($826) { label = 70; break; } else { label = 87; break; }
  case 70: 
   var $828=$__ng;
   var $829=$__gl;
   var $830=(($828)|(0))==(($829)|(0));
   if ($830) { label = 71; break; } else { label = 86; break; }
  case 71: 
   var $832=$266;
   var $833=$258;
   var $834=HEAP32[(($833)>>2)];
   var $835=(($834+4)|0);
   HEAP32[(($833)>>2)]=$835;
   HEAP32[(($834)>>2)]=$832;
   $__ng=0;
   var $836=$__ig;
   var $837=((($836)+(1))|0);
   $__ig=$837;
   var $838=$267;
   $128=$838;
   var $839=$128;
   $127=$839;
   var $840=$127;
   var $841=(($840)|0);
   $126=$841;
   var $842=$126;
   var $843=$842;
   $125=$843;
   var $844=$125;
   var $845=(($844)|0);
   var $846=(($845)|0);
   var $847=$846;
   var $848=(($847)|0);
   var $849=$848;
   var $850=HEAP8[($849)];
   var $851=(($850)&(255));
   var $852=$851 & 1;
   var $853=(($852)|(0))!=0;
   if ($853) { label = 72; break; } else { label = 73; break; }
  case 72: 
   $121=$839;
   var $855=$121;
   var $856=(($855)|0);
   $120=$856;
   var $857=$120;
   var $858=$857;
   $119=$858;
   var $859=$119;
   var $860=(($859)|0);
   var $861=(($860)|0);
   var $862=$861;
   var $863=(($862+4)|0);
   var $864=HEAP32[(($863)>>2)];
   var $879 = $864;label = 74; break;
  case 73: 
   $124=$839;
   var $866=$124;
   var $867=(($866)|0);
   $123=$867;
   var $868=$123;
   var $869=$868;
   $122=$869;
   var $870=$122;
   var $871=(($870)|0);
   var $872=(($871)|0);
   var $873=$872;
   var $874=(($873)|0);
   var $875=$874;
   var $876=HEAP8[($875)];
   var $877=(($876)&(255));
   var $878=$877 >> 1;
   var $879 = $878;label = 74; break;
  case 74: 
   var $879;
   var $880=(($837)>>>(0)) < (($879)>>>(0));
   if ($880) { label = 75; break; } else { label = 85; break; }
  case 75: 
   var $882=$267;
   var $883=$__ig;
   $140=$882;
   $141=$883;
   var $884=$140;
   $139=$884;
   var $885=$139;
   $138=$885;
   var $886=$138;
   $137=$886;
   var $887=$137;
   var $888=(($887)|0);
   $136=$888;
   var $889=$136;
   var $890=$889;
   $135=$890;
   var $891=$135;
   var $892=(($891)|0);
   var $893=(($892)|0);
   var $894=$893;
   var $895=(($894)|0);
   var $896=$895;
   var $897=HEAP8[($896)];
   var $898=(($897)&(255));
   var $899=$898 & 1;
   var $900=(($899)|(0))!=0;
   if ($900) { label = 76; break; } else { label = 77; break; }
  case 76: 
   $131=$886;
   var $902=$131;
   var $903=(($902)|0);
   $130=$903;
   var $904=$130;
   var $905=$904;
   $129=$905;
   var $906=$129;
   var $907=(($906)|0);
   var $908=(($907)|0);
   var $909=$908;
   var $910=(($909+8)|0);
   var $911=HEAP32[(($910)>>2)];
   var $923 = $911;label = 78; break;
  case 77: 
   $134=$886;
   var $913=$134;
   var $914=(($913)|0);
   $133=$914;
   var $915=$133;
   var $916=$915;
   $132=$916;
   var $917=$132;
   var $918=(($917)|0);
   var $919=(($918)|0);
   var $920=$919;
   var $921=(($920+1)|0);
   var $922=(($921)|0);
   var $923 = $922;label = 78; break;
  case 78: 
   var $923;
   var $924=$141;
   var $925=(($923+$924)|0);
   var $926=HEAP8[($925)];
   var $927=(($926 << 24) >> 24);
   var $928=127;
   var $929=(($927)|(0))==(($928)|(0));
   if ($929) { label = 79; break; } else { label = 80; break; }
  case 79: 
   var $979 = -1;label = 84; break;
  case 80: 
   var $932=$267;
   var $933=$__ig;
   $153=$932;
   $154=$933;
   var $934=$153;
   $152=$934;
   var $935=$152;
   $151=$935;
   var $936=$151;
   $150=$936;
   var $937=$150;
   var $938=(($937)|0);
   $149=$938;
   var $939=$149;
   var $940=$939;
   $148=$940;
   var $941=$148;
   var $942=(($941)|0);
   var $943=(($942)|0);
   var $944=$943;
   var $945=(($944)|0);
   var $946=$945;
   var $947=HEAP8[($946)];
   var $948=(($947)&(255));
   var $949=$948 & 1;
   var $950=(($949)|(0))!=0;
   if ($950) { label = 81; break; } else { label = 82; break; }
  case 81: 
   $144=$936;
   var $952=$144;
   var $953=(($952)|0);
   $143=$953;
   var $954=$143;
   var $955=$954;
   $142=$955;
   var $956=$142;
   var $957=(($956)|0);
   var $958=(($957)|0);
   var $959=$958;
   var $960=(($959+8)|0);
   var $961=HEAP32[(($960)>>2)];
   var $973 = $961;label = 83; break;
  case 82: 
   $147=$936;
   var $963=$147;
   var $964=(($963)|0);
   $146=$964;
   var $965=$146;
   var $966=$965;
   $145=$966;
   var $967=$145;
   var $968=(($967)|0);
   var $969=(($968)|0);
   var $970=$969;
   var $971=(($970+1)|0);
   var $972=(($971)|0);
   var $973 = $972;label = 83; break;
  case 83: 
   var $973;
   var $974=$154;
   var $975=(($973+$974)|0);
   var $976=HEAP8[($975)];
   var $977=(($976 << 24) >> 24);
   var $979 = $977;label = 84; break;
  case 84: 
   var $979;
   $__gl=$979;
   label = 85; break;
  case 85: 
   label = 86; break;
  case 86: 
   var $982=$__d;
   var $983=((($982)-(4))|0);
   $__d=$983;
   var $984=HEAP32[(($983)>>2)];
   var $985=$258;
   var $986=HEAP32[(($985)>>2)];
   var $987=(($986+4)|0);
   HEAP32[(($985)>>2)]=$987;
   HEAP32[(($986)>>2)]=$984;
   var $988=$__ng;
   var $989=((($988)+(1))|0);
   $__ng=$989;
   label = 69; break;
  case 87: 
   label = 88; break;
  case 88: 
   var $992=$__t;
   var $993=$258;
   var $994=HEAP32[(($993)>>2)];
   $163=$992;
   $164=$994;
   var $995=$163;
   var $996=$164;
   var $tmp_i5=$162;
   var $tmp1_i6=$165;
   assert(1 % 1 === 0);HEAP8[($tmp_i5)]=HEAP8[($tmp1_i6)];
   $160=$995;
   $161=$996;
   var $997=$160;
   var $998=$161;
   var $999=(($997)|(0))!=(($998)|(0));
   if ($999) { label = 89; break; } else { label = 93; break; }
  case 89: 
   label = 90; break;
  case 90: 
   var $1002=$160;
   var $1003=$161;
   var $1004=((($1003)-(4))|0);
   $161=$1004;
   var $1005=(($1002)>>>(0)) < (($1004)>>>(0));
   if ($1005) { label = 91; break; } else { label = 92; break; }
  case 91: 
   var $1007=$160;
   var $1008=$161;
   $158=$1007;
   $159=$1008;
   var $1009=$158;
   $157=$1009;
   var $1010=$157;
   var $1011=HEAP32[(($1010)>>2)];
   HEAP32[(($__t_i_i_i)>>2)]=$1011;
   var $1012=$159;
   $155=$1012;
   var $1013=$155;
   var $1014=HEAP32[(($1013)>>2)];
   var $1015=$158;
   HEAP32[(($1015)>>2)]=$1014;
   $156=$__t_i_i_i;
   var $1016=$156;
   var $1017=HEAP32[(($1016)>>2)];
   var $1018=$159;
   HEAP32[(($1018)>>2)]=$1017;
   var $1019=$160;
   var $1020=(($1019+4)|0);
   $160=$1020;
   label = 90; break;
  case 92: 
   label = 93; break;
  case 93: 
   label = 94; break;
  case 94: 
   label = 95; break;
  case 95: 
   var $1024=$__p;
   var $1025=((($1024)+(1))|0);
   $__p=$1025;
   label = 2; break;
  case 96: 
   var $1027=$269;
   $175=$1027;
   var $1028=$175;
   $174=$1028;
   var $1029=$174;
   var $1030=(($1029)|0);
   $173=$1030;
   var $1031=$173;
   var $1032=$1031;
   $172=$1032;
   var $1033=$172;
   var $1034=(($1033)|0);
   var $1035=(($1034)|0);
   var $1036=$1035;
   var $1037=(($1036)|0);
   var $1038=$1037;
   var $1039=HEAP8[($1038)];
   var $1040=(($1039)&(255));
   var $1041=$1040 & 1;
   var $1042=(($1041)|(0))!=0;
   if ($1042) { label = 97; break; } else { label = 98; break; }
  case 97: 
   $168=$1028;
   var $1044=$168;
   var $1045=(($1044)|0);
   $167=$1045;
   var $1046=$167;
   var $1047=$1046;
   $166=$1047;
   var $1048=$166;
   var $1049=(($1048)|0);
   var $1050=(($1049)|0);
   var $1051=$1050;
   var $1052=(($1051+4)|0);
   var $1053=HEAP32[(($1052)>>2)];
   var $1068 = $1053;label = 99; break;
  case 98: 
   $171=$1028;
   var $1055=$171;
   var $1056=(($1055)|0);
   $170=$1056;
   var $1057=$170;
   var $1058=$1057;
   $169=$1058;
   var $1059=$169;
   var $1060=(($1059)|0);
   var $1061=(($1060)|0);
   var $1062=$1061;
   var $1063=(($1062)|0);
   var $1064=$1063;
   var $1065=HEAP8[($1064)];
   var $1066=(($1065)&(255));
   var $1067=$1066 >> 1;
   var $1068 = $1067;label = 99; break;
  case 99: 
   var $1068;
   var $1069=(($1068)>>>(0)) > 1;
   if ($1069) { label = 100; break; } else { label = 113; break; }
  case 100: 
   var $1071=$269;
   $191=$1071;
   var $1072=$191;
   $190=$1072;
   var $1073=$190;
   $189=$1073;
   var $1074=$189;
   $188=$1074;
   var $1075=$188;
   var $1076=(($1075)|0);
   $187=$1076;
   var $1077=$187;
   var $1078=$1077;
   $186=$1078;
   var $1079=$186;
   var $1080=(($1079)|0);
   var $1081=(($1080)|0);
   var $1082=$1081;
   var $1083=(($1082)|0);
   var $1084=$1083;
   var $1085=HEAP8[($1084)];
   var $1086=(($1085)&(255));
   var $1087=$1086 & 1;
   var $1088=(($1087)|(0))!=0;
   if ($1088) { label = 101; break; } else { label = 102; break; }
  case 101: 
   $182=$1074;
   var $1090=$182;
   var $1091=(($1090)|0);
   $181=$1091;
   var $1092=$181;
   var $1093=$1092;
   $180=$1093;
   var $1094=$180;
   var $1095=(($1094)|0);
   var $1096=(($1095)|0);
   var $1097=$1096;
   var $1098=(($1097+8)|0);
   var $1099=HEAP32[(($1098)>>2)];
   var $1111 = $1099;label = 103; break;
  case 102: 
   $185=$1074;
   var $1101=$185;
   var $1102=(($1101)|0);
   $184=$1102;
   var $1103=$184;
   var $1104=$1103;
   $183=$1104;
   var $1105=$183;
   var $1106=(($1105)|0);
   var $1107=(($1106)|0);
   var $1108=$1107;
   var $1109=(($1108+4)|0);
   var $1110=(($1109)|0);
   var $1111 = $1110;label = 103; break;
  case 103: 
   var $1111;
   $178=$274;
   $179=$1111;
   var $1112=$178;
   var $1113=$179;
   $176=$1112;
   $177=$1113;
   var $1114=$176;
   var $1115=(($1114)|0);
   var $1116=$177;
   HEAP32[(($1115)>>2)]=$1116;
   $194=$274;
   $195=1;
   var $1117=$194;
   var $1118=$273;
   var $1119=$1117;
   assert(4 % 1 === 0);HEAP32[(($1118)>>2)]=HEAP32[(($1119)>>2)];
   var $1120=$195;
   $192=$273;
   $193=$1120;
   var $1121=$192;
   var $1122=$193;
   var $1123=(($1121)|0);
   var $1124=HEAP32[(($1123)>>2)];
   var $1125=(($1124+($1122<<2))|0);
   HEAP32[(($1123)>>2)]=$1125;
   var $1126=$269;
   $221=$1126;
   var $1127=$221;
   $220=$1127;
   var $1128=$220;
   $219=$1128;
   var $1129=$219;
   $218=$1129;
   var $1130=$218;
   var $1131=(($1130)|0);
   $217=$1131;
   var $1132=$217;
   var $1133=$1132;
   $216=$1133;
   var $1134=$216;
   var $1135=(($1134)|0);
   var $1136=(($1135)|0);
   var $1137=$1136;
   var $1138=(($1137)|0);
   var $1139=$1138;
   var $1140=HEAP8[($1139)];
   var $1141=(($1140)&(255));
   var $1142=$1141 & 1;
   var $1143=(($1142)|(0))!=0;
   if ($1143) { label = 104; break; } else { label = 105; break; }
  case 104: 
   $212=$1129;
   var $1145=$212;
   var $1146=(($1145)|0);
   $211=$1146;
   var $1147=$211;
   var $1148=$1147;
   $210=$1148;
   var $1149=$210;
   var $1150=(($1149)|0);
   var $1151=(($1150)|0);
   var $1152=$1151;
   var $1153=(($1152+8)|0);
   var $1154=HEAP32[(($1153)>>2)];
   var $1166 = $1154;label = 106; break;
  case 105: 
   $215=$1129;
   var $1156=$215;
   var $1157=(($1156)|0);
   $214=$1157;
   var $1158=$214;
   var $1159=$1158;
   $213=$1159;
   var $1160=$213;
   var $1161=(($1160)|0);
   var $1162=(($1161)|0);
   var $1163=$1162;
   var $1164=(($1163+4)|0);
   var $1165=(($1164)|0);
   var $1166 = $1165;label = 106; break;
  case 106: 
   var $1166;
   $205=$1127;
   var $1167=$205;
   $204=$1167;
   var $1168=$204;
   var $1169=(($1168)|0);
   $203=$1169;
   var $1170=$203;
   var $1171=$1170;
   $202=$1171;
   var $1172=$202;
   var $1173=(($1172)|0);
   var $1174=(($1173)|0);
   var $1175=$1174;
   var $1176=(($1175)|0);
   var $1177=$1176;
   var $1178=HEAP8[($1177)];
   var $1179=(($1178)&(255));
   var $1180=$1179 & 1;
   var $1181=(($1180)|(0))!=0;
   if ($1181) { label = 107; break; } else { label = 108; break; }
  case 107: 
   $198=$1167;
   var $1183=$198;
   var $1184=(($1183)|0);
   $197=$1184;
   var $1185=$197;
   var $1186=$1185;
   $196=$1186;
   var $1187=$196;
   var $1188=(($1187)|0);
   var $1189=(($1188)|0);
   var $1190=$1189;
   var $1191=(($1190+4)|0);
   var $1192=HEAP32[(($1191)>>2)];
   var $1207 = $1192;label = 109; break;
  case 108: 
   $201=$1167;
   var $1194=$201;
   var $1195=(($1194)|0);
   $200=$1195;
   var $1196=$200;
   var $1197=$1196;
   $199=$1197;
   var $1198=$199;
   var $1199=(($1198)|0);
   var $1200=(($1199)|0);
   var $1201=$1200;
   var $1202=(($1201)|0);
   var $1203=$1202;
   var $1204=HEAP8[($1203)];
   var $1205=(($1204)&(255));
   var $1206=$1205 >> 1;
   var $1207 = $1206;label = 109; break;
  case 109: 
   var $1207;
   var $1208=(($1166+($1207<<2))|0);
   $208=$275;
   $209=$1208;
   var $1209=$208;
   var $1210=$209;
   $206=$1209;
   $207=$1210;
   var $1211=$206;
   var $1212=(($1211)|0);
   var $1213=$207;
   HEAP32[(($1212)>>2)]=$1213;
   var $1214=$258;
   var $1215=HEAP32[(($1214)>>2)];
   var $tmp=$242;
   var $tmp1=$273;
   assert(4 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];HEAP8[((($tmp)+(1))|0)]=HEAP8[((($tmp1)+(1))|0)];HEAP8[((($tmp)+(2))|0)]=HEAP8[((($tmp1)+(2))|0)];HEAP8[((($tmp)+(3))|0)]=HEAP8[((($tmp1)+(3))|0)];
   var $tmp2=$241;
   var $tmp3=$275;
   assert(4 % 1 === 0);HEAP8[($tmp2)]=HEAP8[($tmp3)];HEAP8[((($tmp2)+(1))|0)]=HEAP8[((($tmp3)+(1))|0)];HEAP8[((($tmp2)+(2))|0)]=HEAP8[((($tmp3)+(2))|0)];HEAP8[((($tmp2)+(3))|0)]=HEAP8[((($tmp3)+(3))|0)];
   $236=$1215;
   var $1216=$238;
   var $1217=$242;
   assert(4 % 1 === 0);HEAP32[(($1216)>>2)]=HEAP32[(($1217)>>2)];
   var $tmp_i=$235;
   var $tmp1_i=$238;
   assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp1_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp1_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp1_i)+(3))|0)];
   var $1218=$237;
   var $1219=$235;
   assert(4 % 1 === 0);HEAP32[(($1218)>>2)]=HEAP32[(($1219)>>2)];
   var $1220=$240;
   var $1221=$241;
   assert(4 % 1 === 0);HEAP32[(($1220)>>2)]=HEAP32[(($1221)>>2)];
   var $tmp6_i=$222;
   var $tmp7_i=$240;
   assert(4 % 1 === 0);HEAP8[($tmp6_i)]=HEAP8[($tmp7_i)];HEAP8[((($tmp6_i)+(1))|0)]=HEAP8[((($tmp7_i)+(1))|0)];HEAP8[((($tmp6_i)+(2))|0)]=HEAP8[((($tmp7_i)+(2))|0)];HEAP8[((($tmp6_i)+(3))|0)]=HEAP8[((($tmp7_i)+(3))|0)];
   var $1222=$239;
   var $1223=$222;
   assert(4 % 1 === 0);HEAP32[(($1222)>>2)]=HEAP32[(($1223)>>2)];
   var $1224=$236;
   $223=$1224;
   var $1225=$223;
   var $tmp2_i=$234;
   var $tmp3_i=$237;
   assert(4 % 1 === 0);HEAP8[($tmp2_i)]=HEAP8[($tmp3_i)];HEAP8[((($tmp2_i)+(1))|0)]=HEAP8[((($tmp3_i)+(1))|0)];HEAP8[((($tmp2_i)+(2))|0)]=HEAP8[((($tmp3_i)+(2))|0)];HEAP8[((($tmp2_i)+(3))|0)]=HEAP8[((($tmp3_i)+(3))|0)];
   var $tmp4_i=$233;
   var $tmp5_i=$239;
   assert(4 % 1 === 0);HEAP8[($tmp4_i)]=HEAP8[($tmp5_i)];HEAP8[((($tmp4_i)+(1))|0)]=HEAP8[((($tmp5_i)+(1))|0)];HEAP8[((($tmp4_i)+(2))|0)]=HEAP8[((($tmp5_i)+(2))|0)];HEAP8[((($tmp4_i)+(3))|0)]=HEAP8[((($tmp5_i)+(3))|0)];
   $232=$1225;
   label = 110; break;
  case 110: 
   $230=$234;
   $231=$233;
   var $1227=$230;
   var $1228=$231;
   $228=$1227;
   $229=$1228;
   var $1229=$228;
   $227=$1229;
   var $1230=$227;
   var $1231=(($1230)|0);
   var $1232=HEAP32[(($1231)>>2)];
   var $1233=$229;
   $226=$1233;
   var $1234=$226;
   var $1235=(($1234)|0);
   var $1236=HEAP32[(($1235)>>2)];
   var $1237=(($1232)|(0))==(($1236)|(0));
   var $1238=$1237 ^ 1;
   if ($1238) { label = 111; break; } else { label = 112; break; }
  case 111: 
   $224=$234;
   var $1240=$224;
   var $1241=(($1240)|0);
   var $1242=HEAP32[(($1241)>>2)];
   var $1243=HEAP32[(($1242)>>2)];
   var $1244=$232;
   HEAP32[(($1244)>>2)]=$1243;
   $225=$234;
   var $1245=$225;
   var $1246=(($1245)|0);
   var $1247=HEAP32[(($1246)>>2)];
   var $1248=(($1247+4)|0);
   HEAP32[(($1246)>>2)]=$1248;
   var $1249=$232;
   var $1250=(($1249+4)|0);
   $232=$1250;
   label = 110; break;
  case 112: 
   var $1251=$232;
   var $1252=$258;
   HEAP32[(($1252)>>2)]=$1251;
   label = 113; break;
  case 113: 
   var $1254=$259;
   var $1255=$1254 & 176;
   var $1256=(($1255)|(0))==32;
   if ($1256) { label = 114; break; } else { label = 115; break; }
  case 114: 
   var $1258=$258;
   var $1259=HEAP32[(($1258)>>2)];
   var $1260=$257;
   HEAP32[(($1260)>>2)]=$1259;
   label = 118; break;
  case 115: 
   var $1262=$259;
   var $1263=$1262 & 176;
   var $1264=(($1263)|(0))!=16;
   if ($1264) { label = 116; break; } else { label = 117; break; }
  case 116: 
   var $1266=$256;
   var $1267=$257;
   HEAP32[(($1267)>>2)]=$1266;
   label = 117; break;
  case 117: 
   label = 118; break;
  case 118: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 560)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $__tmp_i;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $__tmp_i_i_i9;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119=__stackBase__;
   var $120=(__stackBase__)+(8);
   var $121;
   var $122;
   var $123=(__stackBase__)+(16);
   var $124=(__stackBase__)+(24);
   var $125;
   var $126;
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $__a_i_i_i3;
   var $__i_i_i_i4;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $144;
   var $145;
   var $146;
   var $__a_i_i_i1;
   var $__i_i_i_i2;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154;
   var $155;
   var $156;
   var $157;
   var $158;
   var $159;
   var $160;
   var $__tmp_i_i_i;
   var $161;
   var $162;
   var $163;
   var $164;
   var $165;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $166;
   var $167;
   var $168;
   var $169;
   var $170;
   var $171;
   var $172;
   var $173;
   var $174;
   var $175;
   var $176;
   var $177;
   var $178;
   var $179;
   var $180;
   var $181;
   var $182;
   var $183;
   var $184;
   var $185;
   var $186;
   var $187;
   var $188;
   var $189;
   var $190;
   var $191;
   var $192;
   var $193;
   var $194;
   var $195;
   var $196;
   var $197;
   var $198;
   var $199;
   var $200;
   var $201;
   var $202;
   var $__loc=(__stackBase__)+(32);
   var $__ct;
   var $203;
   var $204;
   var $__neg;
   var $__pat=(__stackBase__)+(40);
   var $__dp=(__stackBase__)+(48);
   var $__ts=(__stackBase__)+(56);
   var $__grp=(__stackBase__)+(64);
   var $__sym=(__stackBase__)+(80);
   var $__sn=(__stackBase__)+(96);
   var $__fd=(__stackBase__)+(112);
   var $__mbuf=(__stackBase__)+(120);
   var $__mb;
   var $__h=(__stackBase__)+(520);
   var $205=(__stackBase__)+(528);
   var $__exn;
   var $__mi=(__stackBase__)+(536);
   var $__me=(__stackBase__)+(544);
   var $206=(__stackBase__)+(552);
   var $207;
   $198=$this;
   var $208=(($__intl)&(1));
   $199=$208;
   $200=$__iob;
   $201=$__fl;
   $202=$__digits;
   var $209=$198;
   var $210=$200;
   __ZNKSt3__18ios_base6getlocEv($__loc, $210);
   $197=$__loc;
   var $211=$197;
   var $212 = (function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($211, 19808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 53; break; }
  case 2: 
   var $213=$212;
   label = 3; break;
  case 3: 
   $__ct=$213;
   var $215=$202;
   $196=$215;
   var $216=$196;
   $195=$216;
   var $217=$195;
   var $218=(($217)|0);
   $194=$218;
   var $219=$194;
   var $220=$219;
   $193=$220;
   var $221=$193;
   var $222=(($221)|0);
   var $223=(($222)|0);
   var $224=$223;
   var $225=(($224)|0);
   var $226=$225;
   var $227=HEAP8[($226)];
   var $228=(($227)&(255));
   var $229=$228 & 1;
   var $230=(($229)|(0))!=0;
   if ($230) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $189=$216;
   var $232=$189;
   var $233=(($232)|0);
   $188=$233;
   var $234=$188;
   var $235=$234;
   $187=$235;
   var $236=$187;
   var $237=(($236)|0);
   var $238=(($237)|0);
   var $239=$238;
   var $240=(($239+4)|0);
   var $241=HEAP32[(($240)>>2)];
   var $256 = $241;label = 6; break;
  case 5: 
   $192=$216;
   var $243=$192;
   var $244=(($243)|0);
   $191=$244;
   var $245=$191;
   var $246=$245;
   $190=$246;
   var $247=$190;
   var $248=(($247)|0);
   var $249=(($248)|0);
   var $250=$249;
   var $251=(($250)|0);
   var $252=$251;
   var $253=HEAP8[($252)];
   var $254=(($253)&(255));
   var $255=$254 >> 1;
   var $256 = $255;label = 6; break;
  case 6: 
   var $256;
   var $257=(($256)>>>(0)) > 0;
   if ($257) { label = 7; break; } else { var $315 = 0;label = 14; break; }
  case 7: 
   var $259=$202;
   $185=$259;
   $186=0;
   var $260=$185;
   $184=$260;
   var $261=$184;
   $183=$261;
   var $262=$183;
   $182=$262;
   var $263=$182;
   var $264=(($263)|0);
   $181=$264;
   var $265=$181;
   var $266=$265;
   $180=$266;
   var $267=$180;
   var $268=(($267)|0);
   var $269=(($268)|0);
   var $270=$269;
   var $271=(($270)|0);
   var $272=$271;
   var $273=HEAP8[($272)];
   var $274=(($273)&(255));
   var $275=$274 & 1;
   var $276=(($275)|(0))!=0;
   if ($276) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $176=$262;
   var $278=$176;
   var $279=(($278)|0);
   $175=$279;
   var $280=$175;
   var $281=$280;
   $174=$281;
   var $282=$174;
   var $283=(($282)|0);
   var $284=(($283)|0);
   var $285=$284;
   var $286=(($285+8)|0);
   var $287=HEAP32[(($286)>>2)];
   var $299 = $287;label = 10; break;
  case 9: 
   $179=$262;
   var $289=$179;
   var $290=(($289)|0);
   $178=$290;
   var $291=$178;
   var $292=$291;
   $177=$292;
   var $293=$177;
   var $294=(($293)|0);
   var $295=(($294)|0);
   var $296=$295;
   var $297=(($296+4)|0);
   var $298=(($297)|0);
   var $299 = $298;label = 10; break;
  case 10: 
   var $299;
   var $300=$186;
   var $301=(($299+($300<<2))|0);
   label = 11; break;
  case 11: 
   var $303=HEAP32[(($301)>>2)];
   var $304=$__ct;
   $172=$304;
   $173=45;
   var $305=$172;
   var $306=$305;
   var $307=HEAP32[(($306)>>2)];
   var $308=(($307+44)|0);
   var $309=HEAP32[(($308)>>2)];
   var $310=$173;
   var $311 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$309]($305, $310) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 53; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $313=(($303)|(0))==(($311)|(0));
   var $315 = $313;label = 14; break;
  case 14: 
   var $315;
   var $316=(($315)&(1));
   $__neg=$316;
   $171=$__grp;
   var $317=$171;
   $170=$317;
   var $318=$170;
   var $319=$318;
   var $320=(($318)|0);
   $169=$320;
   var $321=$169;
   $168=$321;
   var $322=$168;
   var $323=$322;
   $167=$323;
   var $324=$167;
   var $325=$324;
   $166=$325;
   var $326=$166;
   var $327=(($324)|0);
   $165=$318;
   var $328=$165;
   var $329=(($328)|0);
   $164=$329;
   var $330=$164;
   var $331=$330;
   $163=$331;
   var $332=$163;
   var $333=(($332)|0);
   var $334=(($333)|0);
   var $335=$334;
   var $336=(($335)|0);
   $__a_i_i_i=$336;
   $__i_i_i_i=0;
   label = 15; break;
  case 15: 
   var $338=$__i_i_i_i;
   var $339=(($338)>>>(0)) < 3;
   if ($339) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $341=$__i_i_i_i;
   var $342=$__a_i_i_i;
   var $343=(($342+($341<<2))|0);
   HEAP32[(($343)>>2)]=0;
   var $344=$__i_i_i_i;
   var $345=((($344)+(1))|0);
   $__i_i_i_i=$345;
   label = 15; break;
  case 17: 
   $152=$__sym;
   var $346=$152;
   $151=$346;
   var $347=$151;
   var $348=$347;
   var $349=(($347)|0);
   $150=$349;
   var $350=$150;
   $149=$350;
   var $351=$149;
   var $352=$351;
   $148=$352;
   var $353=$148;
   var $354=$353;
   $147=$354;
   var $355=$147;
   var $356=(($353)|0);
   $146=$347;
   var $357=$146;
   var $358=(($357)|0);
   $145=$358;
   var $359=$145;
   var $360=$359;
   $144=$360;
   var $361=$144;
   var $362=(($361)|0);
   var $363=(($362)|0);
   var $364=$363;
   var $365=(($364)|0);
   $__a_i_i_i1=$365;
   $__i_i_i_i2=0;
   label = 18; break;
  case 18: 
   var $367=$__i_i_i_i2;
   var $368=(($367)>>>(0)) < 3;
   if ($368) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $370=$__i_i_i_i2;
   var $371=$__a_i_i_i1;
   var $372=(($371+($370<<2))|0);
   HEAP32[(($372)>>2)]=0;
   var $373=$__i_i_i_i2;
   var $374=((($373)+(1))|0);
   $__i_i_i_i2=$374;
   label = 18; break;
  case 20: 
   $143=$__sn;
   var $375=$143;
   $142=$375;
   var $376=$142;
   var $377=$376;
   var $378=(($376)|0);
   $141=$378;
   var $379=$141;
   $140=$379;
   var $380=$140;
   var $381=$380;
   $139=$381;
   var $382=$139;
   var $383=$382;
   $138=$383;
   var $384=$138;
   var $385=(($382)|0);
   $137=$376;
   var $386=$137;
   var $387=(($386)|0);
   $136=$387;
   var $388=$136;
   var $389=$388;
   $135=$389;
   var $390=$135;
   var $391=(($390)|0);
   var $392=(($391)|0);
   var $393=$392;
   var $394=(($393)|0);
   $__a_i_i_i3=$394;
   $__i_i_i_i4=0;
   label = 21; break;
  case 21: 
   var $396=$__i_i_i_i4;
   var $397=(($396)>>>(0)) < 3;
   if ($397) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $399=$__i_i_i_i4;
   var $400=$__a_i_i_i3;
   var $401=(($400+($399<<2))|0);
   HEAP32[(($401)>>2)]=0;
   var $402=$__i_i_i_i4;
   var $403=((($402)+(1))|0);
   $__i_i_i_i4=$403;
   label = 21; break;
  case 23: 
   var $404=$199;
   var $405=(($404) & 1);
   var $406=$__neg;
   var $407=(($406) & 1);
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($405, $407, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 54; break; }
  case 24: 
   var $409=(($__mbuf)|0);
   $__mb=$409;
   HEAP32[(($205)>>2)]=272;
   $132=$__h;
   $133=0;
   $134=$205;
   var $410=$132;
   var $411=$133;
   var $412=$134;
   $129=$410;
   $130=$411;
   $131=$412;
   var $413=$129;
   var $414=(($413)|0);
   var $415=$130;
   var $416=$131;
   $128=$416;
   var $417=$128;
   var $418=HEAP32[(($417)>>2)];
   $125=$414;
   $126=$415;
   $127=$418;
   var $419=$125;
   var $420=$126;
   var $421=$127;
   $122=$419;
   HEAP32[(($123)>>2)]=$420;
   HEAP32[(($124)>>2)]=$421;
   var $422=$122;
   var $423=$422;
   $121=$123;
   var $424=$121;
   var $425=HEAP32[(($424)>>2)];
   $115=$124;
   var $426=$115;
   var $427=HEAP32[(($426)>>2)];
   $118=$423;
   HEAP32[(($119)>>2)]=$425;
   HEAP32[(($120)>>2)]=$427;
   var $428=$118;
   var $429=(($428)|0);
   $117=$119;
   var $430=$117;
   var $431=HEAP32[(($430)>>2)];
   HEAP32[(($429)>>2)]=$431;
   var $432=(($428+4)|0);
   $116=$120;
   var $433=$116;
   var $434=HEAP32[(($433)>>2)];
   HEAP32[(($432)>>2)]=$434;
   var $435=$202;
   $114=$435;
   var $436=$114;
   $113=$436;
   var $437=$113;
   var $438=(($437)|0);
   $112=$438;
   var $439=$112;
   var $440=$439;
   $111=$440;
   var $441=$111;
   var $442=(($441)|0);
   var $443=(($442)|0);
   var $444=$443;
   var $445=(($444)|0);
   var $446=$445;
   var $447=HEAP8[($446)];
   var $448=(($447)&(255));
   var $449=$448 & 1;
   var $450=(($449)|(0))!=0;
   if ($450) { label = 25; break; } else { label = 26; break; }
  case 25: 
   $107=$436;
   var $452=$107;
   var $453=(($452)|0);
   $106=$453;
   var $454=$106;
   var $455=$454;
   $105=$455;
   var $456=$105;
   var $457=(($456)|0);
   var $458=(($457)|0);
   var $459=$458;
   var $460=(($459+4)|0);
   var $461=HEAP32[(($460)>>2)];
   var $476 = $461;label = 27; break;
  case 26: 
   $110=$436;
   var $463=$110;
   var $464=(($463)|0);
   $109=$464;
   var $465=$109;
   var $466=$465;
   $108=$466;
   var $467=$108;
   var $468=(($467)|0);
   var $469=(($468)|0);
   var $470=$469;
   var $471=(($470)|0);
   var $472=$471;
   var $473=HEAP8[($472)];
   var $474=(($473)&(255));
   var $475=$474 >> 1;
   var $476 = $475;label = 27; break;
  case 27: 
   var $476;
   var $477=HEAP32[(($__fd)>>2)];
   var $478=(($476)|(0)) > (($477)|(0));
   if ($478) { label = 28; break; } else { label = 38; break; }
  case 28: 
   var $480=$202;
   $61=$480;
   var $481=$61;
   $60=$481;
   var $482=$60;
   var $483=(($482)|0);
   $59=$483;
   var $484=$59;
   var $485=$484;
   $58=$485;
   var $486=$58;
   var $487=(($486)|0);
   var $488=(($487)|0);
   var $489=$488;
   var $490=(($489)|0);
   var $491=$490;
   var $492=HEAP8[($491)];
   var $493=(($492)&(255));
   var $494=$493 & 1;
   var $495=(($494)|(0))!=0;
   if ($495) { label = 29; break; } else { label = 30; break; }
  case 29: 
   $54=$481;
   var $497=$54;
   var $498=(($497)|0);
   $53=$498;
   var $499=$53;
   var $500=$499;
   $52=$500;
   var $501=$52;
   var $502=(($501)|0);
   var $503=(($502)|0);
   var $504=$503;
   var $505=(($504+4)|0);
   var $506=HEAP32[(($505)>>2)];
   var $521 = $506;label = 31; break;
  case 30: 
   $57=$481;
   var $508=$57;
   var $509=(($508)|0);
   $56=$509;
   var $510=$56;
   var $511=$510;
   $55=$511;
   var $512=$55;
   var $513=(($512)|0);
   var $514=(($513)|0);
   var $515=$514;
   var $516=(($515)|0);
   var $517=$516;
   var $518=HEAP8[($517)];
   var $519=(($518)&(255));
   var $520=$519 >> 1;
   var $521 = $520;label = 31; break;
  case 31: 
   var $521;
   var $522=HEAP32[(($__fd)>>2)];
   var $523=((($521)-($522))|0);
   var $524=($523<<1);
   $51=$__sn;
   var $525=$51;
   $50=$525;
   var $526=$50;
   var $527=(($526)|0);
   $49=$527;
   var $528=$49;
   var $529=$528;
   $48=$529;
   var $530=$48;
   var $531=(($530)|0);
   var $532=(($531)|0);
   var $533=$532;
   var $534=(($533)|0);
   var $535=$534;
   var $536=HEAP8[($535)];
   var $537=(($536)&(255));
   var $538=$537 & 1;
   var $539=(($538)|(0))!=0;
   if ($539) { label = 32; break; } else { label = 33; break; }
  case 32: 
   $44=$525;
   var $541=$44;
   var $542=(($541)|0);
   $43=$542;
   var $543=$43;
   var $544=$543;
   $42=$544;
   var $545=$42;
   var $546=(($545)|0);
   var $547=(($546)|0);
   var $548=$547;
   var $549=(($548+4)|0);
   var $550=HEAP32[(($549)>>2)];
   var $565 = $550;label = 34; break;
  case 33: 
   $47=$525;
   var $552=$47;
   var $553=(($552)|0);
   $46=$553;
   var $554=$46;
   var $555=$554;
   $45=$555;
   var $556=$45;
   var $557=(($556)|0);
   var $558=(($557)|0);
   var $559=$558;
   var $560=(($559)|0);
   var $561=$560;
   var $562=HEAP8[($561)];
   var $563=(($562)&(255));
   var $564=$563 >> 1;
   var $565 = $564;label = 34; break;
  case 34: 
   var $565;
   var $566=((($524)+($565))|0);
   $30=$__sym;
   var $567=$30;
   $29=$567;
   var $568=$29;
   var $569=(($568)|0);
   $28=$569;
   var $570=$28;
   var $571=$570;
   $27=$571;
   var $572=$27;
   var $573=(($572)|0);
   var $574=(($573)|0);
   var $575=$574;
   var $576=(($575)|0);
   var $577=$576;
   var $578=HEAP8[($577)];
   var $579=(($578)&(255));
   var $580=$579 & 1;
   var $581=(($580)|(0))!=0;
   if ($581) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $23=$567;
   var $583=$23;
   var $584=(($583)|0);
   $22=$584;
   var $585=$22;
   var $586=$585;
   $21=$586;
   var $587=$21;
   var $588=(($587)|0);
   var $589=(($588)|0);
   var $590=$589;
   var $591=(($590+4)|0);
   var $592=HEAP32[(($591)>>2)];
   var $607 = $592;label = 37; break;
  case 36: 
   $26=$567;
   var $594=$26;
   var $595=(($594)|0);
   $25=$595;
   var $596=$25;
   var $597=$596;
   $24=$597;
   var $598=$24;
   var $599=(($598)|0);
   var $600=(($599)|0);
   var $601=$600;
   var $602=(($601)|0);
   var $603=$602;
   var $604=HEAP8[($603)];
   var $605=(($604)&(255));
   var $606=$605 >> 1;
   var $607 = $606;label = 37; break;
  case 37: 
   var $607;
   var $608=((($566)+($607))|0);
   var $609=HEAP32[(($__fd)>>2)];
   var $610=((($608)+($609))|0);
   var $611=((($610)+(1))|0);
   var $700 = $611;label = 45; break;
  case 38: 
   $20=$__sn;
   var $613=$20;
   $19=$613;
   var $614=$19;
   var $615=(($614)|0);
   $18=$615;
   var $616=$18;
   var $617=$616;
   $17=$617;
   var $618=$17;
   var $619=(($618)|0);
   var $620=(($619)|0);
   var $621=$620;
   var $622=(($621)|0);
   var $623=$622;
   var $624=HEAP8[($623)];
   var $625=(($624)&(255));
   var $626=$625 & 1;
   var $627=(($626)|(0))!=0;
   if ($627) { label = 39; break; } else { label = 40; break; }
  case 39: 
   $13=$613;
   var $629=$13;
   var $630=(($629)|0);
   $12=$630;
   var $631=$12;
   var $632=$631;
   $11=$632;
   var $633=$11;
   var $634=(($633)|0);
   var $635=(($634)|0);
   var $636=$635;
   var $637=(($636+4)|0);
   var $638=HEAP32[(($637)>>2)];
   var $653 = $638;label = 41; break;
  case 40: 
   $16=$613;
   var $640=$16;
   var $641=(($640)|0);
   $15=$641;
   var $642=$15;
   var $643=$642;
   $14=$643;
   var $644=$14;
   var $645=(($644)|0);
   var $646=(($645)|0);
   var $647=$646;
   var $648=(($647)|0);
   var $649=$648;
   var $650=HEAP8[($649)];
   var $651=(($650)&(255));
   var $652=$651 >> 1;
   var $653 = $652;label = 41; break;
  case 41: 
   var $653;
   $10=$__sym;
   var $654=$10;
   $9=$654;
   var $655=$9;
   var $656=(($655)|0);
   $8=$656;
   var $657=$8;
   var $658=$657;
   $7=$658;
   var $659=$7;
   var $660=(($659)|0);
   var $661=(($660)|0);
   var $662=$661;
   var $663=(($662)|0);
   var $664=$663;
   var $665=HEAP8[($664)];
   var $666=(($665)&(255));
   var $667=$666 & 1;
   var $668=(($667)|(0))!=0;
   if ($668) { label = 42; break; } else { label = 43; break; }
  case 42: 
   $3=$654;
   var $670=$3;
   var $671=(($670)|0);
   $2=$671;
   var $672=$2;
   var $673=$672;
   $1=$673;
   var $674=$1;
   var $675=(($674)|0);
   var $676=(($675)|0);
   var $677=$676;
   var $678=(($677+4)|0);
   var $679=HEAP32[(($678)>>2)];
   var $694 = $679;label = 44; break;
  case 43: 
   $6=$654;
   var $681=$6;
   var $682=(($681)|0);
   $5=$682;
   var $683=$5;
   var $684=$683;
   $4=$684;
   var $685=$4;
   var $686=(($685)|0);
   var $687=(($686)|0);
   var $688=$687;
   var $689=(($688)|0);
   var $690=$689;
   var $691=HEAP8[($690)];
   var $692=(($691)&(255));
   var $693=$692 >> 1;
   var $694 = $693;label = 44; break;
  case 44: 
   var $694;
   var $695=((($653)+($694))|0);
   var $696=HEAP32[(($__fd)>>2)];
   var $697=((($695)+($696))|0);
   var $698=((($697)+(2))|0);
   var $700 = $698;label = 45; break;
  case 45: 
   var $700;
   $__exn=$700;
   var $701=$__exn;
   var $702=(($701)>>>(0)) > 100;
   if ($702) { label = 46; break; } else { label = 61; break; }
  case 46: 
   var $704=$__exn;
   var $705=($704<<2);
   var $706=_malloc($705);
   var $707=$706;
   $37=$__h;
   $38=$707;
   var $708=$37;
   var $709=(($708)|0);
   $36=$709;
   var $710=$36;
   var $711=$710;
   $35=$711;
   var $712=$35;
   var $713=(($712)|0);
   var $714=HEAP32[(($713)>>2)];
   $__tmp_i=$714;
   var $715=$38;
   var $716=(($708)|0);
   $34=$716;
   var $717=$34;
   var $718=$717;
   $33=$718;
   var $719=$33;
   var $720=(($719)|0);
   HEAP32[(($720)>>2)]=$715;
   var $721=$__tmp_i;
   var $722=(($721)|(0))!=0;
   if ($722) { label = 47; break; } else { label = 50; break; }
  case 47: 
   var $724=(($708)|0);
   $32=$724;
   var $725=$32;
   var $726=$725;
   $31=$726;
   var $727=$31;
   var $728=(($727+4)|0);
   var $729=HEAP32[(($728)>>2)];
   var $730=$__tmp_i;
   var $731=$730;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$729]($731) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 49; break; }
  case 48: 
   label = 50; break;
  case 49: 
   var $734$0 = ___cxa_find_matching_catch(-1, -1,0); $734$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 50: 
   $41=$__h;
   var $735=$41;
   var $736=(($735)|0);
   $40=$736;
   var $737=$40;
   var $738=$737;
   $39=$738;
   var $739=$39;
   var $740=(($739)|0);
   var $741=HEAP32[(($740)>>2)];
   $__mb=$741;
   var $742=$__mb;
   var $743=(($742)|(0))==0;
   if ($743) { label = 51; break; } else { label = 60; break; }
  case 51: 
   (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 55; break; }
  case 52: 
   label = 60; break;
  case 53: 
   var $747$0 = ___cxa_find_matching_catch(-1, -1); $747$1 = tempRet0;
   var $748=$747$0;
   $203=$748;
   var $749=$747$1;
   $204=$749;
   label = 79; break;
  case 54: 
   var $751$0 = ___cxa_find_matching_catch(-1, -1); $751$1 = tempRet0;
   var $752=$751$0;
   $203=$752;
   var $753=$751$1;
   $204=$753;
   label = 78; break;
  case 55: 
   var $755$0 = ___cxa_find_matching_catch(-1, -1); $755$1 = tempRet0;
   var $756=$755$0;
   $203=$756;
   var $757=$755$1;
   $204=$757;
   $71=$__h;
   var $758=$71;
   $70=$758;
   var $759=$70;
   $68=$759;
   $69=0;
   var $760=$68;
   var $761=(($760)|0);
   $67=$761;
   var $762=$67;
   var $763=$762;
   $66=$763;
   var $764=$66;
   var $765=(($764)|0);
   var $766=HEAP32[(($765)>>2)];
   $__tmp_i_i_i9=$766;
   var $767=$69;
   var $768=(($760)|0);
   $65=$768;
   var $769=$65;
   var $770=$769;
   $64=$770;
   var $771=$64;
   var $772=(($771)|0);
   HEAP32[(($772)>>2)]=$767;
   var $773=$__tmp_i_i_i9;
   var $774=(($773)|(0))!=0;
   if ($774) { label = 56; break; } else { label = 59; break; }
  case 56: 
   var $776=(($760)|0);
   $63=$776;
   var $777=$63;
   var $778=$777;
   $62=$778;
   var $779=$62;
   var $780=(($779+4)|0);
   var $781=HEAP32[(($780)>>2)];
   var $782=$__tmp_i_i_i9;
   var $783=$782;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$781]($783) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { label = 58; break; }
  case 57: 
   label = 59; break;
  case 58: 
   var $786$0 = ___cxa_find_matching_catch(-1, -1,0); $786$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 59: 
   label = 78; break;
  case 60: 
   label = 61; break;
  case 61: 
   var $789=$__mb;
   var $790=$200;
   $72=$790;
   var $791=$72;
   var $792=(($791+4)|0);
   var $793=HEAP32[(($792)>>2)];
   label = 62; break;
  case 62: 
   var $795=$202;
   $83=$795;
   var $796=$83;
   $82=$796;
   var $797=$82;
   $81=$797;
   var $798=$81;
   var $799=(($798)|0);
   $80=$799;
   var $800=$80;
   var $801=$800;
   $79=$801;
   var $802=$79;
   var $803=(($802)|0);
   var $804=(($803)|0);
   var $805=$804;
   var $806=(($805)|0);
   var $807=$806;
   var $808=HEAP8[($807)];
   var $809=(($808)&(255));
   var $810=$809 & 1;
   var $811=(($810)|(0))!=0;
   if ($811) { label = 63; break; } else { label = 64; break; }
  case 63: 
   $75=$797;
   var $813=$75;
   var $814=(($813)|0);
   $74=$814;
   var $815=$74;
   var $816=$815;
   $73=$816;
   var $817=$73;
   var $818=(($817)|0);
   var $819=(($818)|0);
   var $820=$819;
   var $821=(($820+8)|0);
   var $822=HEAP32[(($821)>>2)];
   var $834 = $822;label = 65; break;
  case 64: 
   $78=$797;
   var $824=$78;
   var $825=(($824)|0);
   $77=$825;
   var $826=$77;
   var $827=$826;
   $76=$827;
   var $828=$76;
   var $829=(($828)|0);
   var $830=(($829)|0);
   var $831=$830;
   var $832=(($831+4)|0);
   var $833=(($832)|0);
   var $834 = $833;label = 65; break;
  case 65: 
   var $834;
   var $835=$202;
   $94=$835;
   var $836=$94;
   $93=$836;
   var $837=$93;
   $92=$837;
   var $838=$92;
   var $839=(($838)|0);
   $91=$839;
   var $840=$91;
   var $841=$840;
   $90=$841;
   var $842=$90;
   var $843=(($842)|0);
   var $844=(($843)|0);
   var $845=$844;
   var $846=(($845)|0);
   var $847=$846;
   var $848=HEAP8[($847)];
   var $849=(($848)&(255));
   var $850=$849 & 1;
   var $851=(($850)|(0))!=0;
   if ($851) { label = 66; break; } else { label = 67; break; }
  case 66: 
   $86=$837;
   var $853=$86;
   var $854=(($853)|0);
   $85=$854;
   var $855=$85;
   var $856=$855;
   $84=$856;
   var $857=$84;
   var $858=(($857)|0);
   var $859=(($858)|0);
   var $860=$859;
   var $861=(($860+8)|0);
   var $862=HEAP32[(($861)>>2)];
   var $874 = $862;label = 68; break;
  case 67: 
   $89=$837;
   var $864=$89;
   var $865=(($864)|0);
   $88=$865;
   var $866=$88;
   var $867=$866;
   $87=$867;
   var $868=$87;
   var $869=(($868)|0);
   var $870=(($869)|0);
   var $871=$870;
   var $872=(($871+4)|0);
   var $873=(($872)|0);
   var $874 = $873;label = 68; break;
  case 68: 
   var $874;
   var $875=$202;
   $104=$875;
   var $876=$104;
   $103=$876;
   var $877=$103;
   var $878=(($877)|0);
   $102=$878;
   var $879=$102;
   var $880=$879;
   $101=$880;
   var $881=$101;
   var $882=(($881)|0);
   var $883=(($882)|0);
   var $884=$883;
   var $885=(($884)|0);
   var $886=$885;
   var $887=HEAP8[($886)];
   var $888=(($887)&(255));
   var $889=$888 & 1;
   var $890=(($889)|(0))!=0;
   if ($890) { label = 69; break; } else { label = 70; break; }
  case 69: 
   $97=$876;
   var $892=$97;
   var $893=(($892)|0);
   $96=$893;
   var $894=$96;
   var $895=$894;
   $95=$895;
   var $896=$95;
   var $897=(($896)|0);
   var $898=(($897)|0);
   var $899=$898;
   var $900=(($899+4)|0);
   var $901=HEAP32[(($900)>>2)];
   var $916 = $901;label = 71; break;
  case 70: 
   $100=$876;
   var $903=$100;
   var $904=(($903)|0);
   $99=$904;
   var $905=$99;
   var $906=$905;
   $98=$906;
   var $907=$98;
   var $908=(($907)|0);
   var $909=(($908)|0);
   var $910=$909;
   var $911=(($910)|0);
   var $912=$911;
   var $913=HEAP8[($912)];
   var $914=(($913)&(255));
   var $915=$914 >> 1;
   var $916 = $915;label = 71; break;
  case 71: 
   var $916;
   var $917=(($874+($916<<2))|0);
   var $918=$__ct;
   var $919=$__neg;
   var $920=(($919) & 1);
   var $921=HEAP32[(($__dp)>>2)];
   var $922=HEAP32[(($__ts)>>2)];
   var $923=HEAP32[(($__fd)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($789, $__mi, $__me, $793, $834, $917, $918, $920, $__pat, $921, $922, $__grp, $__sym, $__sn, $923) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 72; break; } else { label = 55; break; }
  case 72: 
   var $925=$206;
   var $926=$__s;
   assert(4 % 1 === 0);HEAP32[(($925)>>2)]=HEAP32[(($926)>>2)];
   var $927=$__mb;
   var $928=HEAP32[(($__mi)>>2)];
   var $929=HEAP32[(($__me)>>2)];
   var $930=$200;
   var $931=$201;
   (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result, $206, $927, $928, $929, $930, $931) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 73; break; } else { label = 55; break; }
  case 73: 
   $207=1;
   $162=$__h;
   var $933=$162;
   $161=$933;
   var $934=$161;
   $159=$934;
   $160=0;
   var $935=$159;
   var $936=(($935)|0);
   $158=$936;
   var $937=$158;
   var $938=$937;
   $157=$938;
   var $939=$157;
   var $940=(($939)|0);
   var $941=HEAP32[(($940)>>2)];
   $__tmp_i_i_i=$941;
   var $942=$160;
   var $943=(($935)|0);
   $156=$943;
   var $944=$156;
   var $945=$944;
   $155=$945;
   var $946=$155;
   var $947=(($946)|0);
   HEAP32[(($947)>>2)]=$942;
   var $948=$__tmp_i_i_i;
   var $949=(($948)|(0))!=0;
   if ($949) { label = 74; break; } else { label = 77; break; }
  case 74: 
   var $951=(($935)|0);
   $154=$951;
   var $952=$154;
   var $953=$952;
   $153=$953;
   var $954=$153;
   var $955=(($954+4)|0);
   var $956=HEAP32[(($955)>>2)];
   var $957=$__tmp_i_i_i;
   var $958=$957;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$956]($958) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 75; break; } else { label = 76; break; }
  case 75: 
   label = 77; break;
  case 76: 
   var $961$0 = ___cxa_find_matching_catch(-1, -1,0); $961$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 77: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   __ZNSt3__16localeD2Ev($__loc);
   STACKTOP = __stackBase__;
   return;
  case 78: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   label = 79; break;
  case 79: 
   __ZNSt3__16localeD2Ev($__loc);
   label = 80; break;
  case 80: 
   var $965=$203;
   var $966=$204;
   var $967$0=$965;
   var $967$1=0;
   var $968$0=$967$0;
   var $968$1=$966;
   ___resumeException($968$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18messagesIcED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $__cat;
   $14=$this;
   $15=$__nm;
   $16=$0;
   var $17=$14;
   var $18=$15;
   $13=$18;
   var $19=$13;
   $12=$19;
   var $20=$12;
   $11=$20;
   var $21=$11;
   $10=$21;
   var $22=$10;
   var $23=(($22)|0);
   $9=$23;
   var $24=$9;
   var $25=$24;
   $8=$25;
   var $26=$8;
   var $27=(($26)|0);
   var $28=(($27)|0);
   var $29=$28;
   var $30=(($29)|0);
   var $31=$30;
   var $32=HEAP8[($31)];
   var $33=(($32)&(255));
   var $34=$33 & 1;
   var $35=(($34)|(0))!=0;
   if ($35) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $4=$21;
   var $37=$4;
   var $38=(($37)|0);
   $3=$38;
   var $39=$3;
   var $40=$39;
   $2=$40;
   var $41=$2;
   var $42=(($41)|0);
   var $43=(($42)|0);
   var $44=$43;
   var $45=(($44+8)|0);
   var $46=HEAP32[(($45)>>2)];
   var $58 = $46;label = 4; break;
  case 3: 
   $7=$21;
   var $48=$7;
   var $49=(($48)|0);
   $6=$49;
   var $50=$6;
   var $51=$50;
   $5=$51;
   var $52=$5;
   var $53=(($52)|0);
   var $54=(($53)|0);
   var $55=$54;
   var $56=(($55+1)|0);
   var $57=(($56)|0);
   var $58 = $57;label = 4; break;
  case 4: 
   var $58;
   var $59=__Z7catopenPKci($58, 200);
   var $60=$59;
   $__cat=$60;
   var $61=$__cat;
   var $62=(($61)|(0))!=-1;
   if ($62) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $64=$__cat;
   var $65=$64 >>> 1;
   $__cat=$65;
   label = 6; break;
  case 6: 
   var $67=$__cat;
   return $67;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result, $this, $__c, $__set, $__msgid, $__dflt) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42=__stackBase__;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $__a_i_i_i2;
   var $__i_i_i_i3;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81=(__stackBase__)+(8);
   var $82;
   var $83;
   var $84;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $__ndflt=(__stackBase__)+(16);
   var $96=(__stackBase__)+(32);
   var $97=(__stackBase__)+(40);
   var $98;
   var $99;
   var $100=(__stackBase__)+(48);
   var $__cat;
   var $__n;
   var $101;
   var $102=(__stackBase__)+(56);
   var $103=(__stackBase__)+(64);
   var $104=(__stackBase__)+(72);
   var $105;
   $91=$this;
   $92=$__c;
   $93=$__set;
   $94=$__msgid;
   $95=$__dflt;
   var $106=$91;
   $90=$__ndflt;
   var $107=$90;
   $89=$107;
   var $108=$89;
   var $109=$108;
   var $110=(($108)|0);
   $88=$110;
   var $111=$88;
   $87=$111;
   var $112=$87;
   var $113=$112;
   $86=$113;
   var $114=$86;
   var $115=$114;
   $85=$115;
   var $116=$85;
   var $117=(($114)|0);
   $84=$108;
   var $118=$84;
   var $119=(($118)|0);
   $83=$119;
   var $120=$83;
   var $121=$120;
   $82=$121;
   var $122=$82;
   var $123=(($122)|0);
   var $124=(($123)|0);
   var $125=$124;
   var $126=(($125)|0);
   $__a_i_i_i=$126;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $128=$__i_i_i_i;
   var $129=(($128)>>>(0)) < 3;
   if ($129) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $131=$__i_i_i_i;
   var $132=$__a_i_i_i;
   var $133=(($132+($131<<2))|0);
   HEAP32[(($133)>>2)]=0;
   var $134=$__i_i_i_i;
   var $135=((($134)+(1))|0);
   $__i_i_i_i=$135;
   label = 2; break;
  case 4: 
   $73=$__ndflt;
   var $136=$73;
   $71=$97;
   $72=$136;
   var $137=$71;
   var $138=$72;
   $69=$137;
   $70=$138;
   var $139=$69;
   var $140=$139;
   var $141=(($139)|0);
   var $142=$70;
   HEAP32[(($141)>>2)]=$142;
   label = 5; break;
  case 5: 
   var $144=$95;
   $34=$144;
   var $145=$34;
   $33=$145;
   var $146=$33;
   $32=$146;
   var $147=$32;
   $31=$147;
   var $148=$31;
   var $149=(($148)|0);
   $30=$149;
   var $150=$30;
   var $151=$150;
   $29=$151;
   var $152=$29;
   var $153=(($152)|0);
   var $154=(($153)|0);
   var $155=$154;
   var $156=(($155)|0);
   var $157=$156;
   var $158=HEAP8[($157)];
   var $159=(($158)&(255));
   var $160=$159 & 1;
   var $161=(($160)|(0))!=0;
   if ($161) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $25=$147;
   var $163=$25;
   var $164=(($163)|0);
   $24=$164;
   var $165=$24;
   var $166=$165;
   $23=$166;
   var $167=$23;
   var $168=(($167)|0);
   var $169=(($168)|0);
   var $170=$169;
   var $171=(($170+8)|0);
   var $172=HEAP32[(($171)>>2)];
   var $184 = $172;label = 8; break;
  case 7: 
   $28=$147;
   var $174=$28;
   var $175=(($174)|0);
   $27=$175;
   var $176=$27;
   var $177=$176;
   $26=$177;
   var $178=$26;
   var $179=(($178)|0);
   var $180=(($179)|0);
   var $181=$180;
   var $182=(($181+1)|0);
   var $183=(($182)|0);
   var $184 = $183;label = 8; break;
  case 8: 
   var $184;
   var $185=$95;
   $12=$185;
   var $186=$12;
   $11=$186;
   var $187=$11;
   $10=$187;
   var $188=$10;
   $9=$188;
   var $189=$9;
   var $190=(($189)|0);
   $8=$190;
   var $191=$8;
   var $192=$191;
   $7=$192;
   var $193=$7;
   var $194=(($193)|0);
   var $195=(($194)|0);
   var $196=$195;
   var $197=(($196)|0);
   var $198=$197;
   var $199=HEAP8[($198)];
   var $200=(($199)&(255));
   var $201=$200 & 1;
   var $202=(($201)|(0))!=0;
   if ($202) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $3=$188;
   var $204=$3;
   var $205=(($204)|0);
   $2=$205;
   var $206=$2;
   var $207=$206;
   $1=$207;
   var $208=$1;
   var $209=(($208)|0);
   var $210=(($209)|0);
   var $211=$210;
   var $212=(($211+8)|0);
   var $213=HEAP32[(($212)>>2)];
   var $225 = $213;label = 11; break;
  case 10: 
   $6=$188;
   var $215=$6;
   var $216=(($215)|0);
   $5=$216;
   var $217=$5;
   var $218=$217;
   $4=$218;
   var $219=$4;
   var $220=(($219)|0);
   var $221=(($220)|0);
   var $222=$221;
   var $223=(($222+1)|0);
   var $224=(($223)|0);
   var $225 = $224;label = 11; break;
  case 11: 
   var $225;
   var $226=$95;
   $22=$226;
   var $227=$22;
   $21=$227;
   var $228=$21;
   var $229=(($228)|0);
   $20=$229;
   var $230=$20;
   var $231=$230;
   $19=$231;
   var $232=$19;
   var $233=(($232)|0);
   var $234=(($233)|0);
   var $235=$234;
   var $236=(($235)|0);
   var $237=$236;
   var $238=HEAP8[($237)];
   var $239=(($238)&(255));
   var $240=$239 & 1;
   var $241=(($240)|(0))!=0;
   if ($241) { label = 12; break; } else { label = 13; break; }
  case 12: 
   $15=$227;
   var $243=$15;
   var $244=(($243)|0);
   $14=$244;
   var $245=$14;
   var $246=$245;
   $13=$246;
   var $247=$13;
   var $248=(($247)|0);
   var $249=(($248)|0);
   var $250=$249;
   var $251=(($250+4)|0);
   var $252=HEAP32[(($251)>>2)];
   var $267 = $252;label = 14; break;
  case 13: 
   $18=$227;
   var $254=$18;
   var $255=(($254)|0);
   $17=$255;
   var $256=$17;
   var $257=$256;
   $16=$257;
   var $258=$16;
   var $259=(($258)|0);
   var $260=(($259)|0);
   var $261=$260;
   var $262=(($261)|0);
   var $263=$262;
   var $264=HEAP8[($263)];
   var $265=(($264)&(255));
   var $266=$265 >> 1;
   var $267 = $266;label = 14; break;
  case 14: 
   var $267;
   var $268=(($225+$267)|0);
   var $tmp5=$42;
   var $tmp6=$97;
   assert(4 % 1 === 0);HEAP8[($tmp5)]=HEAP8[($tmp6)];HEAP8[((($tmp5)+(1))|0)]=HEAP8[((($tmp6)+(1))|0)];HEAP8[((($tmp5)+(2))|0)]=HEAP8[((($tmp6)+(2))|0)];HEAP8[((($tmp5)+(3))|0)]=HEAP8[((($tmp6)+(3))|0)];
   $39=$96;
   $40=$184;
   $41=$268;
   var $269=$39;
   label = 15; break;
  case 15: 
   var $271=$40;
   var $272=$41;
   var $273=(($271)>>>(0)) < (($272)>>>(0));
   if ($273) { label = 16; break; } else { label = 18; break; }
  case 16: 
   $38=$42;
   var $275=$38;
   var $276=$40;
   $35=$275;
   $36=$276;
   var $277=$35;
   var $278=(($277)|0);
   var $279=HEAP32[(($278)>>2)];
   var $280=$36;
   var $281=HEAP8[($280)];
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($279, $281) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 21; break; }
  case 17: 
   var $282=$40;
   var $283=(($282+1)|0);
   $40=$283;
   $37=$42;
   var $284=$37;
   label = 15; break;
  case 18: 
   var $285=$100;
   var $286=$42;
   assert(4 % 1 === 0);HEAP32[(($285)>>2)]=HEAP32[(($286)>>2)];
   label = 19; break;
  case 19: 
   var $288=$92;
   var $289=(($288)|(0))!=-1;
   if ($289) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $291=$92;
   var $292=$291 << 1;
   $92=$292;
   label = 22; break;
  case 21: 
   var $294$0 = ___cxa_find_matching_catch(-1, -1); $294$1 = tempRet0;
   var $295=$294$0;
   $98=$295;
   var $296=$294$1;
   $99=$296;
   label = 40; break;
  case 22: 
   var $298=$92;
   var $299=$298;
   $__cat=$299;
   var $300=$__cat;
   var $301=$93;
   var $302=$94;
   $54=$__ndflt;
   var $303=$54;
   $53=$303;
   var $304=$53;
   $52=$304;
   var $305=$52;
   $51=$305;
   var $306=$51;
   var $307=(($306)|0);
   $50=$307;
   var $308=$50;
   var $309=$308;
   $49=$309;
   var $310=$49;
   var $311=(($310)|0);
   var $312=(($311)|0);
   var $313=$312;
   var $314=(($313)|0);
   var $315=$314;
   var $316=HEAP8[($315)];
   var $317=(($316)&(255));
   var $318=$317 & 1;
   var $319=(($318)|(0))!=0;
   if ($319) { label = 23; break; } else { label = 24; break; }
  case 23: 
   $45=$305;
   var $321=$45;
   var $322=(($321)|0);
   $44=$322;
   var $323=$44;
   var $324=$323;
   $43=$324;
   var $325=$43;
   var $326=(($325)|0);
   var $327=(($326)|0);
   var $328=$327;
   var $329=(($328+8)|0);
   var $330=HEAP32[(($329)>>2)];
   var $342 = $330;label = 25; break;
  case 24: 
   $48=$305;
   var $332=$48;
   var $333=(($332)|0);
   $47=$333;
   var $334=$47;
   var $335=$334;
   $46=$335;
   var $336=$46;
   var $337=(($336)|0);
   var $338=(($337)|0);
   var $339=$338;
   var $340=(($339+1)|0);
   var $341=(($340)|0);
   var $342 = $341;label = 25; break;
  case 25: 
   var $342;
   var $343 = (function() { try { __THREW__ = 0; return __Z7catgetsP8_nl_catdiiPKc($300, $301, $302, $342) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 21; break; }
  case 26: 
   $__n=$343;
   $101=0;
   $63=$agg_result;
   var $345=$63;
   $62=$345;
   var $346=$62;
   var $347=$346;
   var $348=(($346)|0);
   $61=$348;
   var $349=$61;
   $60=$349;
   var $350=$60;
   var $351=$350;
   $59=$351;
   var $352=$59;
   var $353=$352;
   $58=$353;
   var $354=$58;
   var $355=(($352)|0);
   $57=$346;
   var $356=$57;
   var $357=(($356)|0);
   $56=$357;
   var $358=$56;
   var $359=$358;
   $55=$359;
   var $360=$55;
   var $361=(($360)|0);
   var $362=(($361)|0);
   var $363=$362;
   var $364=(($363)|0);
   $__a_i_i_i2=$364;
   $__i_i_i_i3=0;
   label = 27; break;
  case 27: 
   var $366=$__i_i_i_i3;
   var $367=(($366)>>>(0)) < 3;
   if ($367) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $369=$__i_i_i_i3;
   var $370=$__a_i_i_i2;
   var $371=(($370+($369<<2))|0);
   HEAP32[(($371)>>2)]=0;
   var $372=$__i_i_i_i3;
   var $373=((($372)+(1))|0);
   $__i_i_i_i3=$373;
   label = 27; break;
  case 29: 
   $68=$agg_result;
   var $374=$68;
   $66=$103;
   $67=$374;
   var $375=$66;
   var $376=$67;
   $64=$375;
   $65=$376;
   var $377=$64;
   var $378=$377;
   var $379=(($377)|0);
   var $380=$65;
   HEAP32[(($379)>>2)]=$380;
   label = 30; break;
  case 30: 
   var $382=$__n;
   var $383=$__n;
   var $384=$__n;
   var $385 = (function() { try { __THREW__ = 0; return _strlen($384) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 37; break; }
  case 31: 
   var $387=(($383+$385)|0);
   var $tmp=$81;
   var $tmp1=$103;
   assert(4 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];HEAP8[((($tmp)+(1))|0)]=HEAP8[((($tmp1)+(1))|0)];HEAP8[((($tmp)+(2))|0)]=HEAP8[((($tmp1)+(2))|0)];HEAP8[((($tmp)+(3))|0)]=HEAP8[((($tmp1)+(3))|0)];
   $78=$102;
   $79=$382;
   $80=$387;
   var $388=$78;
   label = 32; break;
  case 32: 
   var $390=$79;
   var $391=$80;
   var $392=(($390)>>>(0)) < (($391)>>>(0));
   if ($392) { label = 33; break; } else { label = 35; break; }
  case 33: 
   $77=$81;
   var $394=$77;
   var $395=$79;
   $74=$394;
   $75=$395;
   var $396=$74;
   var $397=(($396)|0);
   var $398=HEAP32[(($397)>>2)];
   var $399=$75;
   var $400=HEAP8[($399)];
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($398, $400) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 37; break; }
  case 34: 
   var $401=$79;
   var $402=(($401+1)|0);
   $79=$402;
   $76=$81;
   var $403=$76;
   label = 32; break;
  case 35: 
   var $404=$104;
   var $405=$81;
   assert(4 % 1 === 0);HEAP32[(($404)>>2)]=HEAP32[(($405)>>2)];
   label = 36; break;
  case 36: 
   $101=1;
   $105=1;
   var $407=$101;
   if ($407) { label = 39; break; } else { label = 38; break; }
  case 37: 
   var $409$0 = ___cxa_find_matching_catch(-1, -1); $409$1 = tempRet0;
   var $410=$409$0;
   $98=$410;
   var $411=$409$1;
   $99=$411;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result);
   label = 40; break;
  case 38: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result);
   label = 39; break;
  case 39: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = __stackBase__;
   return;
  case 40: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   label = 41; break;
  case 41: 
   var $416=$98;
   var $417=$99;
   var $418$0=$416;
   var $418$1=0;
   var $419$0=$418$0;
   var $419$1=$417;
   ___resumeException($419$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIcE8do_closeEi($this, $__c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $__cat;
   $1=$this;
   $2=$__c;
   var $3=$1;
   var $4=$2;
   var $5=(($4)|(0))!=-1;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$2;
   var $8=$7 << 1;
   $2=$8;
   label = 3; break;
  case 3: 
   var $10=$2;
   var $11=$10;
   $__cat=$11;
   var $12=$__cat;
   var $13=__Z8catcloseP8_nl_catd($12);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18messagesIwED0Ev($this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $3=$this;
 var $4=$3;
 $2=$4;
 var $5=$2;
 $1=$5;
 var $6=$1;
 var $7=$6;
 __ZNSt3__16locale5facetD2Ev($7);
 var $8=$4;
 __ZdlPv($8);
 return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 $1=$3;
 var $4=$1;
 var $5=$4;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $__cat;
   $14=$this;
   $15=$__nm;
   $16=$0;
   var $17=$14;
   var $18=$15;
   $13=$18;
   var $19=$13;
   $12=$19;
   var $20=$12;
   $11=$20;
   var $21=$11;
   $10=$21;
   var $22=$10;
   var $23=(($22)|0);
   $9=$23;
   var $24=$9;
   var $25=$24;
   $8=$25;
   var $26=$8;
   var $27=(($26)|0);
   var $28=(($27)|0);
   var $29=$28;
   var $30=(($29)|0);
   var $31=$30;
   var $32=HEAP8[($31)];
   var $33=(($32)&(255));
   var $34=$33 & 1;
   var $35=(($34)|(0))!=0;
   if ($35) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $4=$21;
   var $37=$4;
   var $38=(($37)|0);
   $3=$38;
   var $39=$3;
   var $40=$39;
   $2=$40;
   var $41=$2;
   var $42=(($41)|0);
   var $43=(($42)|0);
   var $44=$43;
   var $45=(($44+8)|0);
   var $46=HEAP32[(($45)>>2)];
   var $58 = $46;label = 4; break;
  case 3: 
   $7=$21;
   var $48=$7;
   var $49=(($48)|0);
   $6=$49;
   var $50=$6;
   var $51=$50;
   $5=$51;
   var $52=$5;
   var $53=(($52)|0);
   var $54=(($53)|0);
   var $55=$54;
   var $56=(($55+1)|0);
   var $57=(($56)|0);
   var $58 = $57;label = 4; break;
  case 4: 
   var $58;
   var $59=__Z7catopenPKci($58, 200);
   var $60=$59;
   $__cat=$60;
   var $61=$__cat;
   var $62=(($61)|(0))!=-1;
   if ($62) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $64=$__cat;
   var $65=$64 >>> 1;
   $__cat=$65;
   label = 6; break;
  case 6: 
   var $67=$__cat;
   return $67;
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 9109
// WARNING: content after a branch in a label, line: 9111
// WARNING: content after a branch in a label, line: 9112
// WARNING: content after a branch in a label, line: 9113
// WARNING: content after a branch in a label, line: 9114
// WARNING: content after a branch in a label, line: 9115
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg_result, $this, $__c, $__set, $__msgid, $__dflt) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 296)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $__r_i9;
   var $__mb_i10=__stackBase__;
   var $__sz_i11;
   var $__buf_i12=(__stackBase__)+(8);
   var $__bn_i13=(__stackBase__)+(40);
   var $__wn_i=(__stackBase__)+(48);
   var $__p_i14;
   var $8=(__stackBase__)+(56);
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $__a_i_i_i5;
   var $__i_i_i_i6;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74;
   var $75;
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $__r_i;
   var $__mb_i=(__stackBase__)+(64);
   var $__sz_i;
   var $__buf_i=(__stackBase__)+(72);
   var $__bn_i=(__stackBase__)+(200);
   var $__nn_i=(__stackBase__)+(208);
   var $__p_i;
   var $88=(__stackBase__)+(216);
   var $89=(__stackBase__)+(224);
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105;
   var $106;
   var $107;
   var $108;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119;
   var $__ndflt=(__stackBase__)+(232);
   var $120=(__stackBase__)+(248);
   var $121;
   var $122;
   var $123=(__stackBase__)+(256);
   var $124=(__stackBase__)+(264);
   var $__cat;
   var $__n;
   var $125;
   var $126=(__stackBase__)+(272);
   var $127=(__stackBase__)+(280);
   var $128=(__stackBase__)+(288);
   var $129;
   $115=$this;
   $116=$__c;
   $117=$__set;
   $118=$__msgid;
   $119=$__dflt;
   var $130=$115;
   $114=$__ndflt;
   var $131=$114;
   $113=$131;
   var $132=$113;
   var $133=$132;
   var $134=(($132)|0);
   $112=$134;
   var $135=$112;
   $111=$135;
   var $136=$111;
   var $137=$136;
   $110=$137;
   var $138=$110;
   var $139=$138;
   $109=$139;
   var $140=$109;
   var $141=(($138)|0);
   $108=$132;
   var $142=$108;
   var $143=(($142)|0);
   $107=$143;
   var $144=$107;
   var $145=$144;
   $106=$145;
   var $146=$106;
   var $147=(($146)|0);
   var $148=(($147)|0);
   var $149=$148;
   var $150=(($149)|0);
   $__a_i_i_i=$150;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $152=$__i_i_i_i;
   var $153=(($152)>>>(0)) < 3;
   if ($153) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $155=$__i_i_i_i;
   var $156=$__a_i_i_i;
   var $157=(($156+($155<<2))|0);
   HEAP32[(($157)>>2)]=0;
   var $158=$__i_i_i_i;
   var $159=((($158)+(1))|0);
   $__i_i_i_i=$159;
   label = 2; break;
  case 4: 
   $105=$120;
   var $160=$105;
   $104=$160;
   var $161=$104;
   var $162=$161;
   $100=$162;
   $101=1;
   var $163=$100;
   var $164=$163;
   var $165=$101;
   $98=$164;
   $99=$165;
   var $166=$98;
   var $167=$166;
   var $168=$99;
   var $169=((($168)-(1))|0);
   $96=$167;
   $97=$169;
   var $170=$96;
   var $171=$170;
   HEAP32[(($171)>>2)]=((13000)|0);
   var $172=(($170+4)|0);
   var $173=$97;
   HEAP32[(($172)>>2)]=$173;
   var $174=$166;
   HEAP32[(($174)>>2)]=((12344)|0);
   var $175=$163;
   $95=$175;
   var $176=$95;
   var $177=$163;
   HEAP32[(($177)>>2)]=((12288)|0);
   var $178=$161;
   HEAP32[(($178)>>2)]=((12752)|0);
   label = 5; break;
  case 5: 
   $94=$__ndflt;
   var $180=$94;
   $92=$123;
   $93=$180;
   var $181=$92;
   var $182=$93;
   $90=$181;
   $91=$182;
   var $183=$90;
   var $184=$183;
   var $185=(($183)|0);
   var $186=$91;
   HEAP32[(($185)>>2)]=$186;
   label = 6; break;
  case 6: 
   var $188=$119;
   $79=$188;
   var $189=$79;
   $78=$189;
   var $190=$78;
   $77=$190;
   var $191=$77;
   $76=$191;
   var $192=$76;
   var $193=(($192)|0);
   $75=$193;
   var $194=$75;
   var $195=$194;
   $74=$195;
   var $196=$74;
   var $197=(($196)|0);
   var $198=(($197)|0);
   var $199=$198;
   var $200=(($199)|0);
   var $201=$200;
   var $202=HEAP8[($201)];
   var $203=(($202)&(255));
   var $204=$203 & 1;
   var $205=(($204)|(0))!=0;
   if ($205) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $70=$191;
   var $207=$70;
   var $208=(($207)|0);
   $69=$208;
   var $209=$69;
   var $210=$209;
   $68=$210;
   var $211=$68;
   var $212=(($211)|0);
   var $213=(($212)|0);
   var $214=$213;
   var $215=(($214+8)|0);
   var $216=HEAP32[(($215)>>2)];
   var $228 = $216;label = 9; break;
  case 8: 
   $73=$191;
   var $218=$73;
   var $219=(($218)|0);
   $72=$219;
   var $220=$72;
   var $221=$220;
   $71=$221;
   var $222=$71;
   var $223=(($222)|0);
   var $224=(($223)|0);
   var $225=$224;
   var $226=(($225+4)|0);
   var $227=(($226)|0);
   var $228 = $227;label = 9; break;
  case 9: 
   var $228;
   var $229=$119;
   $67=$229;
   var $230=$67;
   $66=$230;
   var $231=$66;
   $65=$231;
   var $232=$65;
   $64=$232;
   var $233=$64;
   var $234=(($233)|0);
   $63=$234;
   var $235=$63;
   var $236=$235;
   $62=$236;
   var $237=$62;
   var $238=(($237)|0);
   var $239=(($238)|0);
   var $240=$239;
   var $241=(($240)|0);
   var $242=$241;
   var $243=HEAP8[($242)];
   var $244=(($243)&(255));
   var $245=$244 & 1;
   var $246=(($245)|(0))!=0;
   if ($246) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $58=$232;
   var $248=$58;
   var $249=(($248)|0);
   $57=$249;
   var $250=$57;
   var $251=$250;
   $56=$251;
   var $252=$56;
   var $253=(($252)|0);
   var $254=(($253)|0);
   var $255=$254;
   var $256=(($255+8)|0);
   var $257=HEAP32[(($256)>>2)];
   var $269 = $257;label = 12; break;
  case 11: 
   $61=$232;
   var $259=$61;
   var $260=(($259)|0);
   $60=$260;
   var $261=$60;
   var $262=$261;
   $59=$262;
   var $263=$59;
   var $264=(($263)|0);
   var $265=(($264)|0);
   var $266=$265;
   var $267=(($266+4)|0);
   var $268=(($267)|0);
   var $269 = $268;label = 12; break;
  case 12: 
   var $269;
   var $270=$119;
   $55=$270;
   var $271=$55;
   $54=$271;
   var $272=$54;
   var $273=(($272)|0);
   $53=$273;
   var $274=$53;
   var $275=$274;
   $52=$275;
   var $276=$52;
   var $277=(($276)|0);
   var $278=(($277)|0);
   var $279=$278;
   var $280=(($279)|0);
   var $281=$280;
   var $282=HEAP8[($281)];
   var $283=(($282)&(255));
   var $284=$283 & 1;
   var $285=(($284)|(0))!=0;
   if ($285) { label = 13; break; } else { label = 14; break; }
  case 13: 
   $48=$271;
   var $287=$48;
   var $288=(($287)|0);
   $47=$288;
   var $289=$47;
   var $290=$289;
   $46=$290;
   var $291=$46;
   var $292=(($291)|0);
   var $293=(($292)|0);
   var $294=$293;
   var $295=(($294+4)|0);
   var $296=HEAP32[(($295)>>2)];
   var $311 = $296;label = 15; break;
  case 14: 
   $51=$271;
   var $298=$51;
   var $299=(($298)|0);
   $50=$299;
   var $300=$50;
   var $301=$300;
   $49=$301;
   var $302=$49;
   var $303=(($302)|0);
   var $304=(($303)|0);
   var $305=$304;
   var $306=(($305)|0);
   var $307=$306;
   var $308=HEAP8[($307)];
   var $309=(($308)&(255));
   var $310=$309 >> 1;
   var $311 = $310;label = 15; break;
  case 15: 
   var $311;
   var $312=(($269+($311<<2))|0);
   var $tmp7=$8;
   var $tmp8=$123;
   assert(4 % 1 === 0);HEAP8[($tmp7)]=HEAP8[($tmp8)];HEAP8[((($tmp7)+(1))|0)]=HEAP8[((($tmp8)+(1))|0)];HEAP8[((($tmp7)+(2))|0)]=HEAP8[((($tmp8)+(2))|0)];HEAP8[((($tmp7)+(3))|0)]=HEAP8[((($tmp8)+(3))|0)];
   $5=$120;
   $6=$228;
   $7=$312;
   var $313=$5;
   $__r_i9=0;
   label = 16; break;
  case 16: 
   var $315=$6;
   var $316=$7;
   var $317=(($315)>>>(0)) < (($316)>>>(0));
   if ($317) { label = 17; break; } else { var $322 = 0;label = 18; break; }
  case 17: 
   var $319=$__r_i9;
   var $320=(($319)|(0))!=2;
   var $322 = $320;label = 18; break;
  case 18: 
   var $322;
   if ($322) { label = 19; break; } else { label = 29; break; }
  case 19: 
   $__sz_i11=32;
   var $324=$6;
   HEAP32[(($__wn_i)>>2)]=$324;
   var $325=$313;
   var $326=$325;
   var $327=HEAP32[(($326)>>2)];
   var $328=(($327+12)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=$6;
   var $331=$7;
   var $332=(($__buf_i12)|0);
   var $333=(($__buf_i12)|0);
   var $334=(($333+32)|0);
   var $335 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$329]($325, $__mb_i10, $330, $331, $__wn_i, $332, $334, $__bn_i13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 33; break; }
  case 20: 
   $__r_i9=$335;
   var $336=$__r_i9;
   var $337=(($336)|(0))==2;
   if ($337) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $339=HEAP32[(($__wn_i)>>2)];
   var $340=$6;
   var $341=(($339)|(0))==(($340)|(0));
   if ($341) { label = 22; break; } else { label = 24; break; }
  case 22: 
   (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(((1976)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 33; break; }
  case 23: 
   label = 24; break;
  case 24: 
   var $344=(($__buf_i12)|0);
   $__p_i14=$344;
   label = 25; break;
  case 25: 
   var $346=$__p_i14;
   var $347=HEAP32[(($__bn_i13)>>2)];
   var $348=(($346)>>>(0)) < (($347)>>>(0));
   if ($348) { label = 26; break; } else { label = 28; break; }
  case 26: 
   $4=$8;
   var $350=$4;
   var $351=$__p_i14;
   $1=$350;
   $2=$351;
   var $352=$1;
   var $353=(($352)|0);
   var $354=HEAP32[(($353)>>2)];
   var $355=$2;
   var $356=HEAP8[($355)];
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($354, $356) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 33; break; }
  case 27: 
   var $357=$__p_i14;
   var $358=(($357+1)|0);
   $__p_i14=$358;
   $3=$8;
   var $359=$3;
   label = 25; break;
  case 28: 
   var $361=HEAP32[(($__wn_i)>>2)];
   $6=$361;
   label = 16; break;
  case 29: 
   var $362=$124;
   var $363=$8;
   assert(4 % 1 === 0);HEAP32[(($362)>>2)]=HEAP32[(($363)>>2)];
   label = 30; break;
  case 30: 
   __ZNSt3__16locale5facetD2Ev($120);
   var $365=$116;
   var $366=(($365)|(0))!=-1;
   if ($366) { label = 31; break; } else { label = 34; break; }
  case 31: 
   var $368=$116;
   var $369=$368 << 1;
   $116=$369;
   label = 34; break;
  case 32: 
   var $371$0 = ___cxa_find_matching_catch(-1, -1); $371$1 = tempRet0;
   var $372=$371$0;
   $121=$372;
   var $373=$371$1;
   $122=$373;
   label = 67; break;
  case 33: 
   var $375$0 = ___cxa_find_matching_catch(-1, -1); $375$1 = tempRet0;
   var $376=$375$0;
   $121=$376;
   var $377=$375$1;
   $122=$377;
   __ZNSt3__16locale5facetD2Ev($120);
   label = 67; break;
  case 34: 
   var $379=$116;
   var $380=$379;
   $__cat=$380;
   var $381=$__cat;
   var $382=$117;
   var $383=$118;
   $20=$__ndflt;
   var $384=$20;
   $19=$384;
   var $385=$19;
   $18=$385;
   var $386=$18;
   $17=$386;
   var $387=$17;
   var $388=(($387)|0);
   $16=$388;
   var $389=$16;
   var $390=$389;
   $15=$390;
   var $391=$15;
   var $392=(($391)|0);
   var $393=(($392)|0);
   var $394=$393;
   var $395=(($394)|0);
   var $396=$395;
   var $397=HEAP8[($396)];
   var $398=(($397)&(255));
   var $399=$398 & 1;
   var $400=(($399)|(0))!=0;
   if ($400) { label = 35; break; } else { label = 36; break; }
  case 35: 
   $11=$386;
   var $402=$11;
   var $403=(($402)|0);
   $10=$403;
   var $404=$10;
   var $405=$404;
   $9=$405;
   var $406=$9;
   var $407=(($406)|0);
   var $408=(($407)|0);
   var $409=$408;
   var $410=(($409+8)|0);
   var $411=HEAP32[(($410)>>2)];
   var $423 = $411;label = 37; break;
  case 36: 
   $14=$386;
   var $413=$14;
   var $414=(($413)|0);
   $13=$414;
   var $415=$13;
   var $416=$415;
   $12=$416;
   var $417=$12;
   var $418=(($417)|0);
   var $419=(($418)|0);
   var $420=$419;
   var $421=(($420+1)|0);
   var $422=(($421)|0);
   var $423 = $422;label = 37; break;
  case 37: 
   var $423;
   var $424 = (function() { try { __THREW__ = 0; return __Z7catgetsP8_nl_catdiiPKc($381, $382, $383, $423) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 32; break; }
  case 38: 
   $__n=$424;
   $125=0;
   $29=$agg_result;
   var $426=$29;
   $28=$426;
   var $427=$28;
   var $428=$427;
   var $429=(($427)|0);
   $27=$429;
   var $430=$27;
   $26=$430;
   var $431=$26;
   var $432=$431;
   $25=$432;
   var $433=$25;
   var $434=$433;
   $24=$434;
   var $435=$24;
   var $436=(($433)|0);
   $23=$427;
   var $437=$23;
   var $438=(($437)|0);
   $22=$438;
   var $439=$22;
   var $440=$439;
   $21=$440;
   var $441=$21;
   var $442=(($441)|0);
   var $443=(($442)|0);
   var $444=$443;
   var $445=(($444)|0);
   $__a_i_i_i5=$445;
   $__i_i_i_i6=0;
   label = 39; break;
  case 39: 
   var $447=$__i_i_i_i6;
   var $448=(($447)>>>(0)) < 3;
   if ($448) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $450=$__i_i_i_i6;
   var $451=$__a_i_i_i5;
   var $452=(($451+($450<<2))|0);
   HEAP32[(($452)>>2)]=0;
   var $453=$__i_i_i_i6;
   var $454=((($453)+(1))|0);
   $__i_i_i_i6=$454;
   label = 39; break;
  case 41: 
   $40=$126;
   var $455=$40;
   $39=$455;
   var $456=$39;
   var $457=$456;
   $35=$457;
   $36=1;
   var $458=$35;
   var $459=$458;
   var $460=$36;
   $33=$459;
   $34=$460;
   var $461=$33;
   var $462=$461;
   var $463=$34;
   var $464=((($463)-(1))|0);
   $31=$462;
   $32=$464;
   var $465=$31;
   var $466=$465;
   HEAP32[(($466)>>2)]=((13000)|0);
   var $467=(($465+4)|0);
   var $468=$32;
   HEAP32[(($467)>>2)]=$468;
   var $469=$461;
   HEAP32[(($469)>>2)]=((12344)|0);
   var $470=$458;
   $30=$470;
   var $471=$30;
   var $472=$458;
   HEAP32[(($472)>>2)]=((12288)|0);
   var $473=$456;
   HEAP32[(($473)>>2)]=((12696)|0);
   label = 42; break;
  case 42: 
   $45=$agg_result;
   var $475=$45;
   $43=$127;
   $44=$475;
   var $476=$43;
   var $477=$44;
   $41=$476;
   $42=$477;
   var $478=$41;
   var $479=$478;
   var $480=(($478)|0);
   var $481=$42;
   HEAP32[(($480)>>2)]=$481;
   label = 43; break;
  case 43: 
   var $483=$__n;
   var $484=$__n;
   var $485=$__n;
   var $486 = (function() { try { __THREW__ = 0; return _strlen($485) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 63; break; }
  case 44: 
   var $488=(($484+$486)|0);
   var $tmp=$89;
   var $tmp1=$127;
   assert(4 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp1)];HEAP8[((($tmp)+(1))|0)]=HEAP8[((($tmp1)+(1))|0)];HEAP8[((($tmp)+(2))|0)]=HEAP8[((($tmp1)+(2))|0)];HEAP8[((($tmp)+(3))|0)]=HEAP8[((($tmp1)+(3))|0)];
   $85=$126;
   $86=$483;
   $87=$488;
   var $489=$85;
   $__r_i=0;
   label = 45; break;
  case 45: 
   var $491=$86;
   var $492=$87;
   var $493=(($491)>>>(0)) < (($492)>>>(0));
   if ($493) { label = 46; break; } else { var $498 = 0;label = 47; break; }
  case 46: 
   var $495=$__r_i;
   var $496=(($495)|(0))!=2;
   var $498 = $496;label = 47; break;
  case 47: 
   var $498;
   if ($498) { label = 48; break; } else { label = 61; break; }
  case 48: 
   $__sz_i=32;
   var $500=$86;
   HEAP32[(($__nn_i)>>2)]=$500;
   var $501=$489;
   var $502=$501;
   var $503=HEAP32[(($502)>>2)];
   var $504=(($503+16)|0);
   var $505=HEAP32[(($504)>>2)];
   var $506=$86;
   var $507=$87;
   var $508=$86;
   var $509=$507;
   var $510=$508;
   var $511=((($509)-($510))|0);
   var $512=(($511)|(0)) > 32;
   if ($512) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $514=$86;
   var $515=(($514+32)|0);
   var $519 = $515;label = 51; break;
  case 50: 
   var $517=$87;
   var $519 = $517;label = 51; break;
  case 51: 
   var $519;
   var $520=(($__buf_i)|0);
   var $521=(($__buf_i)|0);
   var $522=(($521+128)|0);
   var $523 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$505]($501, $__mb_i, $506, $519, $__nn_i, $520, $522, $__bn_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 63; break; }
  case 52: 
   $__r_i=$523;
   var $524=$__r_i;
   var $525=(($524)|(0))==2;
   if ($525) { label = 54; break; } else { label = 53; break; }
  case 53: 
   var $527=HEAP32[(($__nn_i)>>2)];
   var $528=$86;
   var $529=(($527)|(0))==(($528)|(0));
   if ($529) { label = 54; break; } else { label = 56; break; }
  case 54: 
   (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(((1976)|0)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 63; break; }
  case 55: 
   label = 56; break;
  case 56: 
   var $532=(($__buf_i)|0);
   $__p_i=$532;
   label = 57; break;
  case 57: 
   var $534=$__p_i;
   var $535=HEAP32[(($__bn_i)>>2)];
   var $536=(($534)>>>(0)) < (($535)>>>(0));
   if ($536) { label = 58; break; } else { label = 60; break; }
  case 58: 
   $84=$89;
   var $538=$84;
   var $539=$__p_i;
   var $540=HEAP32[(($539)>>2)];
   HEAP32[(($88)>>2)]=$540;
   $81=$538;
   $82=$88;
   var $541=$81;
   var $542=(($541)|0);
   var $543=HEAP32[(($542)>>2)];
   var $544=$82;
   $80=$544;
   var $545=$80;
   var $546=HEAP32[(($545)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($543, $546) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 59; break; } else { label = 63; break; }
  case 59: 
   var $547=$__p_i;
   var $548=(($547+4)|0);
   $__p_i=$548;
   $83=$89;
   var $549=$83;
   label = 57; break;
  case 60: 
   var $551=HEAP32[(($__nn_i)>>2)];
   $86=$551;
   label = 45; break;
  case 61: 
   var $552=$128;
   var $553=$89;
   assert(4 % 1 === 0);HEAP32[(($552)>>2)]=HEAP32[(($553)>>2)];
   label = 62; break;
  case 62: 
   __ZNSt3__16locale5facetD2Ev($126);
   $125=1;
   $129=1;
   var $555=$125;
   if ($555) { label = 65; break; } else { label = 64; break; }
  case 63: 
   var $561$0 = ___cxa_find_matching_catch(-1, -1); $561$1 = tempRet0;
   var $562=$561$0;
   $121=$562;
   var $563=$561$1;
   $122=$563;
   __ZNSt3__16locale5facetD2Ev($126);
   label = 66; break;
  case 64: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg_result);
   label = 65; break;
  case 65: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = __stackBase__;
   return;
  case 66: 
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg_result);
   label = 67; break;
  case 67: 
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   label = 68; break;
  case 68: 
   var $569=$121;
   var $570=$122;
   var $571$0=$569;
   var $571$1=0;
   var $572$0=$571$0;
   var $572$1=$570;
   ___resumeException($572$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIwE8do_closeEi($this, $__c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $__cat;
   $1=$this;
   $2=$__c;
   var $3=$1;
   var $4=$2;
   var $5=(($4)|(0))!=-1;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$2;
   var $8=$7 << 1;
   $2=$8;
   label = 3; break;
  case 3: 
   var $10=$2;
   var $11=$10;
   $__cat=$11;
   var $12=$__cat;
   var $13=__Z8catcloseP8_nl_catd($12);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIwc10_mbstate_tED2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   HEAP32[(($5)>>2)]=((12120)|0);
   var $6=(($4+8)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $10=(($4+8)|0);
   var $11=HEAP32[(($10)>>2)];
   (function() { try { __THREW__ = 0; return _freelocale($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
  case 3: 
   label = 5; break;
  case 4: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1,0); $14$1 = tempRet0;
   var $15=$14$0;
   $2=$15;
   var $16=$14$1;
   $3=$16;
   var $17=$4;
   __ZNSt3__16locale5facetD2Ev($17);
   label = 6; break;
  case 5: 
   var $19=$4;
   __ZNSt3__16locale5facetD2Ev($19);
   return;
  case 6: 
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 9260
function __ZNSt3__112_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   $9=$a0;
   if (0) { var $28 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$9;
   $7=9968;
   $8=$11;
   var $12=$7;
   var $13=$8;
   $5=$12;
   $6=$13;
   var $14=$5;
   var $15=$14;
   var $16=$6;
   $3=$15;
   $4=$16;
   var $17=$3;
   var $18=$17;
   var $19=$4;
   var $20=((($19)-(1))|0);
   $1=$18;
   $2=$20;
   var $21=$1;
   var $22=$21;
   HEAP32[(($22)>>2)]=((13000)|0);
   var $23=(($21+4)|0);
   var $24=$2;
   HEAP32[(($23)>>2)]=$24;
   var $25=$17;
   HEAP32[(($25)>>2)]=((12344)|0);
   var $26=$14;
   HEAP32[(($26)>>2)]=((12080)|0);
   var $28 = 9968;label = 3; break;
  case 3: 
   var $28;
   return 9968;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   $9=$a0;
   if (0) { var $28 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$9;
   $7=9960;
   $8=$11;
   var $12=$7;
   var $13=$8;
   $5=$12;
   $6=$13;
   var $14=$5;
   var $15=$14;
   var $16=$6;
   $3=$15;
   $4=$16;
   var $17=$3;
   var $18=$17;
   var $19=$4;
   var $20=((($19)-(1))|0);
   $1=$18;
   $2=$20;
   var $21=$1;
   var $22=$21;
   HEAP32[(($22)>>2)]=((13000)|0);
   var $23=(($21+4)|0);
   var $24=$2;
   HEAP32[(($23)>>2)]=$24;
   var $25=$17;
   HEAP32[(($25)>>2)]=((12344)|0);
   var $26=$14;
   HEAP32[(($26)>>2)]=((12040)|0);
   var $28 = 9960;label = 3; break;
  case 3: 
   var $28;
   return 9960;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=10176;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((12408)|0);
   var $33 = 10176;label = 3; break;
  case 3: 
   var $33;
   return 10176;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_7codecvtIcc10_mbstate_tEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=9992;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((12176)|0);
   var $33 = 9992;label = 3; break;
  case 3: 
   var $33;
   return 9992;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_7codecvtIDsc10_mbstate_tEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=10000;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((12232)|0);
   var $33 = 10000;label = 3; break;
  case 3: 
   var $33;
   return 10000;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_7codecvtIDic10_mbstate_tEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=10008;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((12288)|0);
   var $33 = 10008;label = 3; break;
  case 3: 
   var $33;
   return 10008;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__impC2Ej($this, $refs) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4=__stackBase__;
   var $5;
   var $6;
   var $7=(__stackBase__)+(8);
   var $8=(__stackBase__)+(16);
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14=(__stackBase__)+(24);
   var $15;
   var $16;
   var $17=(__stackBase__)+(32);
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   $33=$this;
   $34=$refs;
   var $37=$33;
   var $38=$37;
   var $39=$34;
   $31=$38;
   $32=$39;
   var $40=$31;
   var $41=$40;
   var $42=$32;
   var $43=((($42)-(1))|0);
   $29=$41;
   $30=$43;
   var $44=$29;
   var $45=$44;
   HEAP32[(($45)>>2)]=((13000)|0);
   var $46=(($44+4)|0);
   var $47=$30;
   HEAP32[(($46)>>2)]=$47;
   var $48=$40;
   HEAP32[(($48)>>2)]=((12344)|0);
   var $49=$37;
   HEAP32[(($49)>>2)]=((12376)|0);
   var $50=(($37+8)|0);
   (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC1Ej($50, 28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 65; break; }
  case 2: 
   var $52=(($37+144)|0);
   $27=$52;
   $28=((2992)|0);
   var $53=$27;
   var $54=$28;
   $25=$53;
   $26=$54;
   var $55=$25;
   var $56=$55;
   var $57=(($55)|0);
   $24=$57;
   var $58=$24;
   $23=$58;
   var $59=$23;
   var $60=$59;
   $22=$60;
   var $61=$22;
   var $62=$61;
   $21=$62;
   var $63=$21;
   var $64=(($61)|0);
   var $65=$26;
   var $66=$26;
   $20=$66;
   var $67=$20;
   var $68 = (function() { try { __THREW__ = 0; return _strlen($67) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 66; break; }
  case 3: 
   (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($55, $65, $68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 66; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $70=(($37+8)|0);
   $19=$70;
   var $71=$19;
   var $72=$71;
   $18=$72;
   var $73=$18;
   var $74=(($73)|0);
   var $75=HEAP32[(($74)>>2)];
   $15=$73;
   $16=$75;
   var $76=$15;
   var $77=$16;
   var $tmp_i_i_i=$14;
   var $tmp1_i_i_i=$17;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp1_i_i_i)];
   $12=$76;
   $13=$77;
   var $78=$12;
   label = 6; break;
  case 6: 
   var $80=$13;
   var $81=(($78+4)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=(($80)|(0))!=(($82)|(0));
   if ($83) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $11=$78;
   var $85=$11;
   var $86=(($85+8)|0);
   $10=$86;
   var $87=$10;
   var $88=$87;
   $9=$88;
   var $89=$9;
   var $90=(($89+8)|0);
   var $91=(($78+4)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=((($92)-(4))|0);
   HEAP32[(($91)>>2)]=$93;
   $5=$90;
   $6=$93;
   var $94=$8;
   var $95=$5;
   var $96=$6;
   var $tmp_i_i_i_i_i=$4;
   var $tmp1_i_i_i_i_i=$7;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i_i)];
   $2=$95;
   $3=$96;
   var $97=$3;
   label = 6; break;
  case 8: 
   $1=$71;
   var $98=$1;
   var $99 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 67; break; }
  case 9: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($37, $99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 67; break; }
  case 10: 
   var $102 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 67; break; }
  case 11: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($37, $102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 67; break; }
  case 12: 
   var $105 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_5ctypeIcEEPtbjEERT_T0_T1_T2_(0, 0, 1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 67; break; }
  case 13: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($37, $105) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 67; break; }
  case 14: 
   var $108 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 67; break; }
  case 15: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($37, $108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 67; break; }
  case 16: 
   var $111 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_7codecvtIcc10_mbstate_tEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 67; break; }
  case 17: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_7codecvtIcc10_mbstate_tEEEEvPT_($37, $111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 67; break; }
  case 18: 
   var $114 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_7codecvtIwc10_mbstate_tEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 67; break; }
  case 19: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_7codecvtIwc10_mbstate_tEEEEvPT_($37, $114) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 20; break; } else { label = 67; break; }
  case 20: 
   var $117 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_7codecvtIDsc10_mbstate_tEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 21; break; } else { label = 67; break; }
  case 21: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_7codecvtIDsc10_mbstate_tEEEEvPT_($37, $117) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 22; break; } else { label = 67; break; }
  case 22: 
   var $120 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_7codecvtIDic10_mbstate_tEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 67; break; }
  case 23: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_7codecvtIDic10_mbstate_tEEEEvPT_($37, $120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 24; break; } else { label = 67; break; }
  case 24: 
   var $123 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 67; break; }
  case 25: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($37, $123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 26; break; } else { label = 67; break; }
  case 26: 
   var $126 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 67; break; }
  case 27: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($37, $126) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 28; break; } else { label = 67; break; }
  case 28: 
   var $129 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 29; break; } else { label = 67; break; }
  case 29: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($37, $129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 30; break; } else { label = 67; break; }
  case 30: 
   var $132 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 67; break; }
  case 31: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($37, $132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 32; break; } else { label = 67; break; }
  case 32: 
   var $135 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 33; break; } else { label = 67; break; }
  case 33: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($37, $135) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 34; break; } else { label = 67; break; }
  case 34: 
   var $138 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 35; break; } else { label = 67; break; }
  case 35: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($37, $138) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 36; break; } else { label = 67; break; }
  case 36: 
   var $141 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 37; break; } else { label = 67; break; }
  case 37: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($37, $141) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 38; break; } else { label = 67; break; }
  case 38: 
   var $144 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 39; break; } else { label = 67; break; }
  case 39: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($37, $144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 40; break; } else { label = 67; break; }
  case 40: 
   var $147 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 41; break; } else { label = 67; break; }
  case 41: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($37, $147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 42; break; } else { label = 67; break; }
  case 42: 
   var $150 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 43; break; } else { label = 67; break; }
  case 43: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($37, $150) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 44; break; } else { label = 67; break; }
  case 44: 
   var $153 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 67; break; }
  case 45: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($37, $153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 46; break; } else { label = 67; break; }
  case 46: 
   var $156 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 47; break; } else { label = 67; break; }
  case 47: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($37, $156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 67; break; }
  case 48: 
   var $159 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 49; break; } else { label = 67; break; }
  case 49: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($37, $159) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 50; break; } else { label = 67; break; }
  case 50: 
   var $162 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 51; break; } else { label = 67; break; }
  case 51: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($37, $162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 52; break; } else { label = 67; break; }
  case 52: 
   var $165 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 53; break; } else { label = 67; break; }
  case 53: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($37, $165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 54; break; } else { label = 67; break; }
  case 54: 
   var $168 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 55; break; } else { label = 67; break; }
  case 55: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($37, $168) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 56; break; } else { label = 67; break; }
  case 56: 
   var $171 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 57; break; } else { label = 67; break; }
  case 57: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($37, $171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 58; break; } else { label = 67; break; }
  case 58: 
   var $174 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 59; break; } else { label = 67; break; }
  case 59: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($37, $174) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 60; break; } else { label = 67; break; }
  case 60: 
   var $177 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 61; break; } else { label = 67; break; }
  case 61: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($37, $177) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 62; break; } else { label = 67; break; }
  case 62: 
   var $180 = (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_(1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 63; break; } else { label = 67; break; }
  case 63: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($37, $180) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 64; break; } else { label = 67; break; }
  case 64: 
   STACKTOP = __stackBase__;
   return;
  case 65: 
   var $184$0 = ___cxa_find_matching_catch(-1, -1); $184$1 = tempRet0;
   var $185=$184$0;
   $35=$185;
   var $186=$184$1;
   $36=$186;
   label = 69; break;
  case 66: 
   var $188$0 = ___cxa_find_matching_catch(-1, -1); $188$1 = tempRet0;
   var $189=$188$0;
   $35=$189;
   var $190=$188$1;
   $36=$190;
   label = 68; break;
  case 67: 
   var $192$0 = ___cxa_find_matching_catch(-1, -1); $192$1 = tempRet0;
   var $193=$192$0;
   $35=$193;
   var $194=$192$1;
   $36=$194;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($52);
   label = 68; break;
  case 68: 
   __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED1Ev($50);
   label = 69; break;
  case 69: 
   var $197=$37;
   __ZNSt3__16locale5facetD2Ev($197);
   label = 70; break;
  case 70: 
   var $199=$35;
   var $200=$36;
   var $201$0=$199;
   var $201$1=0;
   var $202$0=$201$0;
   var $202$1=$200;
   ___resumeException($202$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC1Ej($this, $__n) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$__n;
 var $3=$1;
 var $4=$2;
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($3, $4);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19496);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19488);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19816);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__112_GLOBAL__N_14makeINS_5ctypeIcEEPtbjEERT_T0_T1_T2_($a0, $a1, $a2) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$a0;
   var $4=(($a1)&(1));
   $2=$4;
   $3=$a2;
   if (0) { var $11 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=$1;
   var $7=$2;
   var $8=(($7) & 1);
   var $9=$3;
   __ZNSt3__15ctypeIcEC2EPKtbj(10184, $6, $8, $9);
   var $11 = 10184;label = 3; break;
  case 3: 
   var $11;
   return 10184;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19808);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc10_mbstate_tEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19512);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc10_mbstate_tEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19504);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__112_GLOBAL__N_14makeINS_7codecvtIwc10_mbstate_tEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$a0;
   if (0) { var $5 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $3=$1;
   __ZNSt3__17codecvtIwc10_mbstate_tEC2Ej(9976, $3);
   var $5 = 9976;label = 3; break;
  case 3: 
   var $5;
   return 9976;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc10_mbstate_tEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19520);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic10_mbstate_tEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19528);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19432);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__112_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$a0;
   if (0) { var $5 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $3=$1;
   __ZNSt3__18numpunctIcEC2Ej(9888, $3);
   var $5 = 9888;label = 3; break;
  case 3: 
   var $5;
   return 9888;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19424);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__112_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$a0;
   if (0) { var $5 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $3=$1;
   __ZNSt3__18numpunctIwEC2Ej(9856, $3);
   var $5 = 9856;label = 3; break;
  case 3: 
   var $5;
   return 9856;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   $5=$this;
   var $8=$5;
   var $9=___cxa_allocate_exception(8);
   var $10=$9;
   $3=$10;
   $4=((3064)|0);
   var $11=$3;
   var $12=$4;
   $1=$11;
   $2=$12;
   var $13=$1;
   var $14=$13;
   var $15=$2;
   (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($14, $15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $16=$13;
   HEAP32[(($16)>>2)]=((11008)|0);
   label = 3; break;
  case 3: 
   ___cxa_throw($9, 17392, (94));
   throw "Reached an unreachable!";
  case 4: 
   var $19$0 = ___cxa_find_matching_catch(-1, -1); $19$1 = tempRet0;
   var $20=$19$0;
   $6=$20;
   var $21=$19$1;
   $7=$21;
   ___cxa_free_exception($9);
   label = 5; break;
  case 5: 
   var $24=$6;
   var $25=$7;
   var $26$0=$24;
   var $26$1=0;
   var $27$0=$26$0;
   var $27$1=$25;
   ___resumeException($27$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   $9=$a0;
   if (0) { var $29 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$9;
   $7=9952;
   $8=$11;
   var $12=$7;
   var $13=$8;
   $5=$12;
   $6=$13;
   var $14=$5;
   var $15=$14;
   var $16=$6;
   $3=$15;
   $4=$16;
   var $17=$3;
   var $18=$17;
   var $19=$4;
   var $20=((($19)-(1))|0);
   $1=$18;
   $2=$20;
   var $21=$1;
   var $22=$21;
   HEAP32[(($22)>>2)]=((13000)|0);
   var $23=(($21+4)|0);
   var $24=$2;
   HEAP32[(($23)>>2)]=$24;
   var $25=$17;
   HEAP32[(($25)>>2)]=((12344)|0);
   var $26=$14;
   var $27=$14;
   HEAP32[(($27)>>2)]=((11968)|0);
   var $29 = 9952;label = 3; break;
  case 3: 
   var $29;
   return 9952;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   $9=$a0;
   if (0) { var $29 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$9;
   $7=9944;
   $8=$11;
   var $12=$7;
   var $13=$8;
   $5=$12;
   $6=$13;
   var $14=$5;
   var $15=$14;
   var $16=$6;
   $3=$15;
   $4=$16;
   var $17=$3;
   var $18=$17;
   var $19=$4;
   var $20=((($19)-(1))|0);
   $1=$18;
   $2=$20;
   var $21=$1;
   var $22=$21;
   HEAP32[(($22)>>2)]=((13000)|0);
   var $23=(($21+4)|0);
   var $24=$2;
   HEAP32[(($23)>>2)]=$24;
   var $25=$17;
   HEAP32[(($25)>>2)]=((12344)|0);
   var $26=$14;
   var $27=$14;
   HEAP32[(($27)>>2)]=((11896)|0);
   var $29 = 9944;label = 3; break;
  case 3: 
   var $29;
   return 9944;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   $9=$a0;
   if (0) { var $29 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$9;
   $7=9936;
   $8=$11;
   var $12=$7;
   var $13=$8;
   $5=$12;
   $6=$13;
   var $14=$5;
   var $15=$14;
   var $16=$6;
   $3=$15;
   $4=$16;
   var $17=$3;
   var $18=$17;
   var $19=$4;
   var $20=((($19)-(1))|0);
   $1=$18;
   $2=$20;
   var $21=$1;
   var $22=$21;
   HEAP32[(($22)>>2)]=((13000)|0);
   var $23=(($21+4)|0);
   var $24=$2;
   HEAP32[(($23)>>2)]=$24;
   var $25=$17;
   HEAP32[(($25)>>2)]=((12344)|0);
   var $26=$14;
   var $27=$14;
   HEAP32[(($27)>>2)]=((11832)|0);
   var $29 = 9936;label = 3; break;
  case 3: 
   var $29;
   return 9936;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   $9=$a0;
   if (0) { var $29 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$9;
   $7=9928;
   $8=$11;
   var $12=$7;
   var $13=$8;
   $5=$12;
   $6=$13;
   var $14=$5;
   var $15=$14;
   var $16=$6;
   $3=$15;
   $4=$16;
   var $17=$3;
   var $18=$17;
   var $19=$4;
   var $20=((($19)-(1))|0);
   $1=$18;
   $2=$20;
   var $21=$1;
   var $22=$21;
   HEAP32[(($22)>>2)]=((13000)|0);
   var $23=(($21+4)|0);
   var $24=$2;
   HEAP32[(($23)>>2)]=$24;
   var $25=$17;
   HEAP32[(($25)>>2)]=((12344)|0);
   var $26=$14;
   var $27=$14;
   HEAP32[(($27)>>2)]=((11768)|0);
   var $29 = 9928;label = 3; break;
  case 3: 
   var $29;
   return 9928;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=10224;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((13640)|0);
   var $33 = 10224;label = 3; break;
  case 3: 
   var $33;
   return 10224;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=10216;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((13576)|0);
   var $33 = 10216;label = 3; break;
  case 3: 
   var $33;
   return 10216;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=10208;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((13512)|0);
   var $33 = 10208;label = 3; break;
  case 3: 
   var $33;
   return 10208;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=10200;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((13448)|0);
   var $33 = 10200;label = 3; break;
  case 3: 
   var $33;
   return 10200;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=9784;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((11192)|0);
   var $33 = 9784;label = 3; break;
  case 3: 
   var $33;
   return 9784;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=9776;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((11152)|0);
   var $33 = 9776;label = 3; break;
  case 3: 
   var $33;
   return 9776;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=9768;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((11112)|0);
   var $33 = 9768;label = 3; break;
  case 3: 
   var $33;
   return 9768;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=9760;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((11072)|0);
   var $33 = 9760;label = 3; break;
  case 3: 
   var $33;
   return 9760;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19480);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19472);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19464);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19456);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(20336);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(20328);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(20320);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(20312);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19384);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19376);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19368);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19360);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19416);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__112_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   $9=$a0;
   if (0) { var $35 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$9;
   $7=9840;
   $8=$11;
   var $12=$7;
   var $13=$8;
   $5=$12;
   $6=$13;
   var $14=$5;
   var $15=$14;
   var $16=$6;
   $3=$15;
   $4=$16;
   var $17=$3;
   var $18=$17;
   var $19=$4;
   var $20=((($19)-(1))|0);
   $1=$18;
   $2=$20;
   var $21=$1;
   var $22=$21;
   HEAP32[(($22)>>2)]=((13000)|0);
   var $23=(($21+4)|0);
   var $24=$2;
   HEAP32[(($23)>>2)]=$24;
   var $25=$17;
   HEAP32[(($25)>>2)]=((12344)|0);
   var $26=$14;
   var $27=$14;
   var $28=(($27+8)|0);
   var $29=$28;
   __ZNSt3__120__time_get_c_storageIcEC2Ev($29);
   var $30=$14;
   HEAP32[(($30)>>2)]=((11440)|0);
   var $31=$14;
   var $32=(($31+8)|0);
   var $33=$32;
   HEAP32[(($33)>>2)]=((11488)|0);
   var $35 = 9840;label = 3; break;
  case 3: 
   var $35;
   return 9840;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19408);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__112_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   $9=$a0;
   if (0) { var $35 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$9;
   $7=9824;
   $8=$11;
   var $12=$7;
   var $13=$8;
   $5=$12;
   $6=$13;
   var $14=$5;
   var $15=$14;
   var $16=$6;
   $3=$15;
   $4=$16;
   var $17=$3;
   var $18=$17;
   var $19=$4;
   var $20=((($19)-(1))|0);
   $1=$18;
   $2=$20;
   var $21=$1;
   var $22=$21;
   HEAP32[(($22)>>2)]=((13000)|0);
   var $23=(($21+4)|0);
   var $24=$2;
   HEAP32[(($23)>>2)]=$24;
   var $25=$17;
   HEAP32[(($25)>>2)]=((12344)|0);
   var $26=$14;
   var $27=$14;
   var $28=(($27+8)|0);
   var $29=$28;
   __ZNSt3__120__time_get_c_storageIwEC2Ev($29);
   var $30=$14;
   HEAP32[(($30)>>2)]=((11344)|0);
   var $31=$14;
   var $32=(($31+8)|0);
   var $33=$32;
   HEAP32[(($33)>>2)]=((11392)|0);
   var $35 = 9824;label = 3; break;
  case 3: 
   var $35;
   return 9824;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19400);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
// WARNING: content after a branch in a label, line: 11702
// WARNING: content after a branch in a label, line: 11704
// WARNING: content after a branch in a label, line: 11705
// WARNING: content after a branch in a label, line: 11706
// WARNING: content after a branch in a label, line: 11707
// WARNING: content after a branch in a label, line: 11708
// WARNING: content after a branch in a label, line: 11709
// WARNING: content after a branch in a label, line: 11710
// WARNING: content after a branch in a label, line: 11711
// WARNING: content after a branch in a label, line: 11712
// WARNING: content after a branch in a label, line: 11713
// WARNING: content after a branch in a label, line: 11714
function __ZNSt3__112_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=9920;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((11672)|0);
   var $33 = 9920;label = 3; break;
  case 3: 
   var $33;
   return 9920;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $33 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=9912;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   $1=$29;
   var $30=$1;
   var $31=$17;
   HEAP32[(($31)>>2)]=((11632)|0);
   var $33 = 9912;label = 3; break;
  case 3: 
   var $33;
   return 9912;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__16locale5__imp9has_facetEl($this, $id) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   $4=$this;
   $5=$id;
   var $6=$4;
   var $7=$5;
   var $8=(($6+8)|0);
   $3=$8;
   var $9=$3;
   var $10=$9;
   var $11=(($10+4)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$9;
   var $14=(($13)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$12;
   var $17=$15;
   var $18=((($16)-($17))|0);
   var $19=((((($18)|(0)))/(4))&-1);
   var $20=(($7)>>>(0)) < (($19)>>>(0));
   if ($20) { label = 2; break; } else { var $33 = 0;label = 3; break; }
  case 2: 
   var $22=(($6+8)|0);
   var $23=$5;
   $1=$22;
   $2=$23;
   var $24=$1;
   var $25=$2;
   var $26=$24;
   var $27=(($26)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+($25<<2))|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|(0))!=0;
   var $33 = $31;label = 3; break;
  case 3: 
   var $33;
   return $33;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale2id6__initEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(tempValue=HEAP32[((19536)>>2)],HEAP32[((19536)>>2)]=tempValue+1,tempValue);
 var $4=((($3)+(1))|0);
 var $5=(($2+4)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function __ZNSt3__112_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $46 = 0;label = 5; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=9808;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   var $30=(($29+8)|0);
   var $31=$30;
   $1=$31;
   var $32=$1;
   var $33=(($32)|0);
   var $34 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $36$0 = ___cxa_find_matching_catch(-1, -1); $36$1 = tempRet0;
   var $37=$36$0;
   $8=$37;
   var $38=$36$1;
   $9=$38;
   var $39=$17;
   __ZNSt3__16locale5facetD2Ev($39);
   var $40=$8;
   var $41=$9;
   var $42$0=$40;
   var $42$1=0;
   var $43$0=$42$0;
   var $43$1=$41;
   ___resumeException($43$0)
  case 4: 
   HEAP32[(($33)>>2)]=$34;
   var $44=$17;
   HEAP32[(($44)>>2)]=((11312)|0);
   var $46 = 9808;label = 5; break;
  case 5: 
   var $46;
   return 9808;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19392);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__112_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   $12=$a0;
   if (0) { var $46 = 0;label = 5; break; } else { label = 2; break; }
  case 2: 
   var $14=$12;
   $10=9792;
   $11=$14;
   var $15=$10;
   var $16=$11;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=$7;
   $4=$18;
   $5=$19;
   var $20=$4;
   var $21=$20;
   var $22=$5;
   var $23=((($22)-(1))|0);
   $2=$21;
   $3=$23;
   var $24=$2;
   var $25=$24;
   HEAP32[(($25)>>2)]=((13000)|0);
   var $26=(($24+4)|0);
   var $27=$3;
   HEAP32[(($26)>>2)]=$27;
   var $28=$20;
   HEAP32[(($28)>>2)]=((12344)|0);
   var $29=$17;
   var $30=(($29+8)|0);
   var $31=$30;
   $1=$31;
   var $32=$1;
   var $33=(($32)|0);
   var $34 = (function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $36$0 = ___cxa_find_matching_catch(-1, -1); $36$1 = tempRet0;
   var $37=$36$0;
   $8=$37;
   var $38=$36$1;
   $9=$38;
   var $39=$17;
   __ZNSt3__16locale5facetD2Ev($39);
   var $40=$8;
   var $41=$9;
   var $42$0=$40;
   var $42$1=0;
   var $43$0=$42$0;
   var $43$1=$41;
   ___resumeException($43$0)
  case 4: 
   HEAP32[(($33)>>2)]=$34;
   var $44=$17;
   HEAP32[(($44)>>2)]=((11280)|0);
   var $46 = 9792;label = 5; break;
  case 5: 
   var $46;
   return 9792;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19448);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this, $f) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$f;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv(19440);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($3, $5, $7);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
 return;
}
function __ZNSt3__16locale7classicEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(20424)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $4=__ZNSt3__16locale5__imp12make_classicEv();
   HEAP32[((9720)>>2)]=$4;
   HEAP8[(20424)]=1;
   label = 3; break;
  case 3: 
   var $6=HEAP32[((9720)>>2)];
   return $6;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $id) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $__t_i;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $hold=__stackBase__;
   var $16;
   var $17;
   $13=$this;
   $14=$f;
   $15=$id;
   var $18=$13;
   var $19=$14;
   var $20=$19;
   __ZNSt3__114__shared_count12__add_sharedEv($20);
   var $21=$14;
   __ZNSt3__110unique_ptrINS_6locale5facetENS_12_GLOBAL__N_17releaseEEC2EPS2_($hold, $21);
   var $22=$15;
   var $23=(($18+8)|0);
   $12=$23;
   var $24=$12;
   var $25=$24;
   var $26=(($25+4)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$24;
   var $29=(($28)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$27;
   var $32=$30;
   var $33=((($31)-($32))|0);
   var $34=((((($33)|(0)))/(4))&-1);
   var $35=(($22)>>>(0)) >= (($34)>>>(0));
   if ($35) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $37=(($18+8)|0);
   var $38=$15;
   var $39=((($38)+(1))|0);
   (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($37, $39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
  case 3: 
   label = 5; break;
  case 4: 
   var $42$0 = ___cxa_find_matching_catch(-1, -1); $42$1 = tempRet0;
   var $43=$42$0;
   $16=$43;
   var $44=$42$1;
   $17=$44;
   __ZNSt3__110unique_ptrINS_6locale5facetENS_12_GLOBAL__N_17releaseEED2Ev($hold);
   label = 11; break;
  case 5: 
   var $46=(($18+8)|0);
   var $47=$15;
   $10=$46;
   $11=$47;
   var $48=$10;
   var $49=$11;
   var $50=$48;
   var $51=(($50)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52+($49<<2))|0);
   label = 6; break;
  case 6: 
   var $55=HEAP32[(($53)>>2)];
   var $56=(($55)|(0))!=0;
   if ($56) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $58=(($18+8)|0);
   var $59=$15;
   $1=$58;
   $2=$59;
   var $60=$1;
   var $61=$2;
   var $62=$60;
   var $63=(($62)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64+($61<<2))|0);
   label = 8; break;
  case 8: 
   var $67=HEAP32[(($65)>>2)];
   var $68=$67;
   var $69=__ZNSt3__114__shared_count16__release_sharedEv($68);
   label = 9; break;
  case 9: 
   $7=$hold;
   var $71=$7;
   var $72=(($71)|0);
   $6=$72;
   var $73=$6;
   var $74=$73;
   $5=$74;
   var $75=$5;
   var $76=(($75)|0);
   var $77=HEAP32[(($76)>>2)];
   $__t_i=$77;
   var $78=(($71)|0);
   $4=$78;
   var $79=$4;
   var $80=$79;
   $3=$80;
   var $81=$3;
   var $82=(($81)|0);
   HEAP32[(($82)>>2)]=0;
   var $83=$__t_i;
   var $84=(($18+8)|0);
   var $85=$15;
   $8=$84;
   $9=$85;
   var $86=$8;
   var $87=$9;
   var $88=$86;
   var $89=(($88)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90+($87<<2))|0);
   label = 10; break;
  case 10: 
   HEAP32[(($91)>>2)]=$83;
   __ZNSt3__110unique_ptrINS_6locale5facetENS_12_GLOBAL__N_17releaseEED2Ev($hold);
   STACKTOP = __stackBase__;
   return;
  case 11: 
   var $94=$16;
   var $95=$17;
   var $96$0=$94;
   var $96$1=0;
   var $97$0=$96$0;
   var $97$1=$95;
   ___resumeException($97$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__impD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16locale5__impD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this, $__sz) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3=__stackBase__;
   var $4;
   var $5;
   var $6=(__stackBase__)+(8);
   var $7=(__stackBase__)+(16);
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13=(__stackBase__)+(24);
   var $14;
   var $15;
   var $16=(__stackBase__)+(32);
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $__cs;
   $20=$this;
   $21=$__sz;
   var $22=$20;
   $19=$22;
   var $23=$19;
   var $24=$23;
   var $25=(($24+4)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$23;
   var $28=(($27)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$26;
   var $31=$29;
   var $32=((($30)-($31))|0);
   var $33=((((($32)|(0)))/(4))&-1);
   $__cs=$33;
   var $34=$__cs;
   var $35=$21;
   var $36=(($34)>>>(0)) < (($35)>>>(0));
   if ($36) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $38=$21;
   var $39=$__cs;
   var $40=((($38)-($39))|0);
   __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($22, $40);
   label = 9; break;
  case 3: 
   var $42=$__cs;
   var $43=$21;
   var $44=(($42)>>>(0)) > (($43)>>>(0));
   if ($44) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $46=$22;
   var $47=(($46)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=$21;
   var $50=(($48+($49<<2))|0);
   $17=$22;
   $18=$50;
   var $51=$17;
   var $52=$51;
   var $53=$18;
   $14=$52;
   $15=$53;
   var $54=$14;
   var $55=$15;
   var $tmp_i_i=$13;
   var $tmp1_i_i=$16;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $11=$54;
   $12=$55;
   var $56=$11;
   label = 5; break;
  case 5: 
   var $58=$12;
   var $59=(($56+4)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($58)|(0))!=(($60)|(0));
   if ($61) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $10=$56;
   var $63=$10;
   var $64=(($63+8)|0);
   $9=$64;
   var $65=$9;
   var $66=$65;
   $8=$66;
   var $67=$8;
   var $68=(($67+8)|0);
   var $69=(($56+4)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=((($70)-(4))|0);
   HEAP32[(($69)>>2)]=$71;
   $4=$68;
   $5=$71;
   var $72=$7;
   var $73=$4;
   var $74=$5;
   var $tmp_i_i_i_i=$3;
   var $tmp1_i_i_i_i=$6;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i)];
   $1=$73;
   $2=$74;
   var $75=$2;
   label = 5; break;
  case 7: 
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0;
 var $c;
 $c=9728;
 var $1=__ZNSt3__112_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_(1);
 var $2=$c;
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=$1;
 var $4=$c;
 return $4;
}
function __ZNSt3__112_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_($a0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$a0;
   if (0) { var $5 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $3=$1;
   __ZNSt3__16locale5__impC2Ej(10016, $3);
   var $5 = 10016;label = 3; break;
  case 3: 
   var $5;
   return 10016;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   if (0) { var $4 = 0;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $2=__ZNSt3__16locale7classicEv();
   __ZNSt3__16localeC2ERKS0_(9736, $2);
   var $4 = 9736;label = 3; break;
  case 3: 
   var $4;
   return 9736;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale8__globalEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP8[(20416)];
   var $2=(($1 << 24) >> 24)==0;
   if ($2) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $4=__ZNSt3__16locale5__imp11make_globalEv();
   HEAP32[((9712)>>2)]=$4;
   HEAP8[(20416)]=1;
   label = 3; break;
  case 3: 
   var $6=HEAP32[((9712)>>2)];
   return $6;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16localeC2ERKS0_($this, $l) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$l;
 var $3=$1;
 var $4=(($3)|0);
 var $5=$2;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 HEAP32[(($4)>>2)]=$7;
 var $8=(($3)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 __ZNSt3__114__shared_count12__add_sharedEv($10);
 return;
}
function __ZNSt3__16localeD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=__ZNSt3__114__shared_count16__release_sharedEv($5);
 return;
}
function __ZNSt3__16locale2id5__getEv($this) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $__p_i=__stackBase__;
   var $6=(__stackBase__)+(16);
   var $7=(__stackBase__)+(32);
   var $8;
   var $9=(__stackBase__)+(48);
   var $10=(__stackBase__)+(64);
   $8=$this;
   var $11=$8;
   var $12=(($11)|0);
   var $$etemp$0=(34);
   var $st$1$0=(($10)|0);
   HEAP32[(($st$1$0)>>2)]=$$etemp$0;
   var $st$2$1=(($10+4)|0);
   HEAP32[(($st$2$1)>>2)]=0;
   __ZNSt3__112_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($9, $10, $11);
   $4=$12;
   $5=$9;
   var $13=$4;
   var $14=(($13)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))!=-1;
   if ($16) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $18=$5;
   $3=$18;
   var $19=$3;
   $2=$19;
   var $20=$2;
   $1=$20;
   var $21=$1;
   var $22=$7;
   var $23=$21;
   assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
   __ZNSt3__15tupleIJNS_12_GLOBAL__N_111__fake_bindEEEC2IJS2_ELb0EEEDpOT_($6, $7);
   __ZNSt3__117__call_once_paramINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEC2EOS4_($__p_i, $6);
   var $24=$4;
   var $25=(($24)|0);
   var $26=$__p_i;
   __ZNSt3__111__call_onceERVmPvPFvS2_E($25, $26, 314);
   label = 3; break;
  case 3: 
   var $27=(($11+4)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=((($28)-(1))|0);
   STACKTOP = __stackBase__;
   return $29;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this, $x) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$x;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=__ZNSt3__16locale2id5__getEv($6);
 var $8=__ZNKSt3__16locale5__imp9use_facetEl($5, $7);
 return $8;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16locale5facetD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2)|(0))==0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $5=$2;
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6+4)|0);
   var $8=HEAP32[(($7)>>2)];
   FUNCTION_TABLE[$8]($2);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16locale5facetD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $7;
   var $8;
   $6=$this;
   var $9=$6;
   var $10=$9;
   HEAP32[(($10)>>2)]=((12376)|0);
   $i=0;
   label = 2; break;
  case 2: 
   var $12=$i;
   var $13=(($9+8)|0);
   $5=$13;
   var $14=$5;
   var $15=$14;
   var $16=(($15+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$14;
   var $19=(($18)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$17;
   var $22=$20;
   var $23=((($21)-($22))|0);
   var $24=((((($23)|(0)))/(4))&-1);
   var $25=(($12)>>>(0)) < (($24)>>>(0));
   if ($25) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $27=(($9+8)|0);
   var $28=$i;
   $3=$27;
   $4=$28;
   var $29=$3;
   var $30=$4;
   var $31=$29;
   var $32=(($31)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33+($30<<2))|0);
   label = 4; break;
  case 4: 
   var $36=HEAP32[(($34)>>2)];
   var $37=(($36)|(0))!=0;
   if ($37) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $39=(($9+8)|0);
   var $40=$i;
   $1=$39;
   $2=$40;
   var $41=$1;
   var $42=$2;
   var $43=$41;
   var $44=(($43)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45+($42<<2))|0);
   label = 6; break;
  case 6: 
   var $48=HEAP32[(($46)>>2)];
   var $49=$48;
   var $50=__ZNSt3__114__shared_count16__release_sharedEv($49);
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $60=$i;
   var $61=((($60)+(1))|0);
   $i=$61;
   label = 2; break;
  case 9: 
   var $63=(($9+144)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($63);
   var $64=(($9+8)|0);
   __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED1Ev($64);
   var $65=$9;
   __ZNSt3__16locale5facetD2Ev($65);
   return;
  case 10: 
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__16locale5__imp9use_facetEl($this, $id) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $3=$this;
   $4=$id;
   var $5=$3;
   var $6=$4;
   var $7=__ZNKSt3__16locale5__imp9has_facetEl($5, $6);
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $9=___cxa_allocate_exception(4);
   var $10=$9;
   __ZNSt8bad_castC2Ev($10);
   ___cxa_throw($9, 17360, (456));
   throw "Reached an unreachable!";
  case 3: 
   var $12=(($5+8)|0);
   var $13=$4;
   $1=$12;
   $2=$13;
   var $14=$1;
   var $15=$2;
   var $16=$14;
   var $17=(($16)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+($15<<2))|0);
   var $20=HEAP32[(($19)>>2)];
   return $20;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16localeC2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2)|0);
   var $4 = (function() { try { __THREW__ = 0; return __ZNSt3__16locale8__globalEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=(($4)|0);
   var $7=HEAP32[(($6)>>2)];
   HEAP32[(($3)>>2)]=$7;
   var $8=(($2)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9;
   __ZNSt3__114__shared_count12__add_sharedEv($10);
   return;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1,0); $12$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 12733
// WARNING: content after a branch in a label, line: 12735
// WARNING: content after a branch in a label, line: 12736
// WARNING: content after a branch in a label, line: 12737
// WARNING: content after a branch in a label, line: 12738
// WARNING: content after a branch in a label, line: 12739
// WARNING: content after a branch in a label, line: 12740
// WARNING: content after a branch in a label, line: 12741
function __ZNKSt3__15ctypeIcE8do_widenEc($this, $c) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$c;
 var $3=$1;
 var $4=$2;
 return $4;
}
function __ZNKSt3__17codecvtIcc10_mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 var label = 0;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 $4=$this;
 $5=$0;
 $6=$frm;
 $7=$1;
 $8=$frm_nxt;
 $9=$to;
 $10=$2;
 $11=$to_nxt;
 var $12=$4;
 var $13=$6;
 var $14=$8;
 HEAP32[(($14)>>2)]=$13;
 var $15=$9;
 var $16=$11;
 HEAP32[(($16)>>2)]=$15;
 return 3;
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this, $c) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$c;
 var $3=$1;
 var $4=$2;
 var $5=(($4 << 24) >> 24);
 return $5;
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $2=$this;
   $3=$c;
   $4=$dfault;
   var $5=$2;
   var $6=$3;
   var $7=(($6)>>>(0)) <= 127;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$3;
   var $10=(($9) & 255);
   $1=$10;
   label = 4; break;
  case 3: 
   var $12=$4;
   $1=$12;
   label = 4; break;
  case 4: 
   var $14=$1;
   return $14;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $2=$this;
   $3=$c;
   $4=$dfault;
   var $5=$2;
   var $6=$3;
   var $7=(($6 << 24) >> 24);
   var $8=(($7)>>>(0)) <= 127;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$3;
   $1=$10;
   label = 4; break;
  case 3: 
   var $12=$4;
   $1=$12;
   label = 4; break;
  case 4: 
   var $14=$1;
   return $14;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$low;
   $3=$high;
   $4=$dest;
   var $5=$1;
   label = 2; break;
  case 2: 
   var $7=$2;
   var $8=$3;
   var $9=(($7)|(0))!=(($8)|(0));
   if ($9) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $11=$2;
   var $12=HEAP8[($11)];
   var $13=(($12 << 24) >> 24);
   var $14=$4;
   HEAP32[(($14)>>2)]=$13;
   label = 4; break;
  case 4: 
   var $16=$2;
   var $17=(($16+1)|0);
   $2=$17;
   var $18=$4;
   var $19=(($18+4)|0);
   $4=$19;
   label = 2; break;
  case 5: 
   var $21=$2;
   return $21;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   $1=$this;
   $2=$low;
   $3=$high;
   $4=$dfault;
   $5=$dest;
   var $6=$1;
   label = 2; break;
  case 2: 
   var $8=$2;
   var $9=$3;
   var $10=(($8)|(0))!=(($9)|(0));
   if ($10) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $12=$2;
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)>>>(0)) <= 127;
   if ($14) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $16=$2;
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17) & 255);
   var $19=$5;
   HEAP8[($19)]=$18;
   label = 6; break;
  case 5: 
   var $21=$4;
   var $22=$5;
   HEAP8[($22)]=$21;
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $25=$2;
   var $26=(($25+4)|0);
   $2=$26;
   var $27=$5;
   var $28=(($27+1)|0);
   $5=$28;
   label = 2; break;
  case 8: 
   var $30=$2;
   return $30;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$low;
   $3=$high;
   $4=$dest;
   var $5=$1;
   label = 2; break;
  case 2: 
   var $7=$2;
   var $8=$3;
   var $9=(($7)|(0))!=(($8)|(0));
   if ($9) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $11=$2;
   var $12=HEAP8[($11)];
   var $13=$4;
   HEAP8[($13)]=$12;
   label = 4; break;
  case 4: 
   var $15=$2;
   var $16=(($15+1)|0);
   $2=$16;
   var $17=$4;
   var $18=(($17+1)|0);
   $4=$18;
   label = 2; break;
  case 5: 
   var $20=$2;
   return $20;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   $1=$this;
   $2=$low;
   $3=$high;
   $4=$dfault;
   $5=$dest;
   var $6=$1;
   label = 2; break;
  case 2: 
   var $8=$2;
   var $9=$3;
   var $10=(($8)|(0))!=(($9)|(0));
   if ($10) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $12=$2;
   var $13=HEAP8[($12)];
   var $14=(($13 << 24) >> 24);
   var $15=(($14)>>>(0)) <= 127;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=$2;
   var $18=HEAP8[($17)];
   var $19=$5;
   HEAP8[($19)]=$18;
   label = 6; break;
  case 5: 
   var $21=$4;
   var $22=$5;
   HEAP8[($22)]=$21;
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $25=$2;
   var $26=(($25+1)|0);
   $2=$26;
   var $27=$5;
   var $28=(($27+1)|0);
   $5=$28;
   label = 2; break;
  case 8: 
   var $30=$2;
   return $30;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this, $m, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   $2=$m;
   $3=$c;
   var $4=$1;
   var $5=$3;
   var $6=(($5)>>>(0)) <= 127;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$3;
   var $9=__ZNSt3__15ctypeIcE13classic_tableEv();
   var $10=(($9+($8<<1))|0);
   var $11=HEAP16[(($10)>>1)];
   var $12=(($11)&(65535));
   var $13=$2;
   var $14=(($13)&(65535));
   var $15=$12 & $14;
   var $18 = $15;label = 4; break;
  case 3: 
   var $18 = 0;label = 4; break;
  case 4: 
   var $18;
   var $19=(($18)|(0))!=0;
   return $19;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$low;
   $3=$high;
   $4=$vec;
   var $5=$1;
   label = 2; break;
  case 2: 
   var $7=$2;
   var $8=$3;
   var $9=(($7)|(0))!=(($8)|(0));
   if ($9) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $11=$2;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)>>>(0)) <= 127;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $15=$2;
   var $16=HEAP32[(($15)>>2)];
   var $17=__ZNSt3__15ctypeIcE13classic_tableEv();
   var $18=(($17+($16<<1))|0);
   var $19=HEAP16[(($18)>>1)];
   var $20=(($19)&(65535));
   var $23 = $20;label = 6; break;
  case 5: 
   var $23 = 0;label = 6; break;
  case 6: 
   var $23;
   var $24=(($23) & 65535);
   var $25=$4;
   HEAP16[(($25)>>1)]=$24;
   label = 7; break;
  case 7: 
   var $27=$2;
   var $28=(($27+4)|0);
   $2=$28;
   var $29=$4;
   var $30=(($29+2)|0);
   $4=$30;
   label = 2; break;
  case 8: 
   var $32=$2;
   return $32;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$m;
   $3=$low;
   $4=$high;
   var $5=$1;
   label = 2; break;
  case 2: 
   var $7=$3;
   var $8=$4;
   var $9=(($7)|(0))!=(($8)|(0));
   if ($9) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $11=$3;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)>>>(0)) <= 127;
   if ($13) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $15=$3;
   var $16=HEAP32[(($15)>>2)];
   var $17=__ZNSt3__15ctypeIcE13classic_tableEv();
   var $18=(($17+($16<<1))|0);
   var $19=HEAP16[(($18)>>1)];
   var $20=(($19)&(65535));
   var $21=$2;
   var $22=(($21)&(65535));
   var $23=$20 & $22;
   var $24=(($23)|(0))!=0;
   if ($24) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 8; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $28=$3;
   var $29=(($28+4)|0);
   $3=$29;
   label = 2; break;
  case 8: 
   var $31=$3;
   return $31;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$m;
   $3=$low;
   $4=$high;
   var $5=$1;
   label = 2; break;
  case 2: 
   var $7=$3;
   var $8=$4;
   var $9=(($7)|(0))!=(($8)|(0));
   if ($9) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $11=$3;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)>>>(0)) <= 127;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $15=$3;
   var $16=HEAP32[(($15)>>2)];
   var $17=__ZNSt3__15ctypeIcE13classic_tableEv();
   var $18=(($17+($16<<1))|0);
   var $19=HEAP16[(($18)>>1)];
   var $20=(($19)&(65535));
   var $21=$2;
   var $22=(($21)&(65535));
   var $23=$20 & $22;
   var $24=(($23)|(0))!=0;
   if ($24) { label = 6; break; } else { label = 5; break; }
  case 5: 
   label = 8; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $28=$3;
   var $29=(($28+4)|0);
   $3=$29;
   label = 2; break;
  case 8: 
   var $31=$3;
   return $31;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$c;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) <= 127;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$2;
   var $8=__ZNSt3__15ctypeIcE21__classic_upper_tableEv();
   var $9=(($8+($7<<2))|0);
   var $10=HEAP32[(($9)>>2)];
   var $14 = $10;label = 4; break;
  case 3: 
   var $12=$2;
   var $14 = $12;label = 4; break;
  case 4: 
   var $14;
   return $14;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   $2=$low;
   $3=$high;
   var $4=$1;
   label = 2; break;
  case 2: 
   var $6=$2;
   var $7=$3;
   var $8=(($6)|(0))!=(($7)|(0));
   if ($8) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $10=$2;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)>>>(0)) <= 127;
   if ($12) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $14=$2;
   var $15=HEAP32[(($14)>>2)];
   var $16=__ZNSt3__15ctypeIcE21__classic_upper_tableEv();
   var $17=(($16+($15<<2))|0);
   var $18=HEAP32[(($17)>>2)];
   var $23 = $18;label = 6; break;
  case 5: 
   var $20=$2;
   var $21=HEAP32[(($20)>>2)];
   var $23 = $21;label = 6; break;
  case 6: 
   var $23;
   var $24=$2;
   HEAP32[(($24)>>2)]=$23;
   label = 7; break;
  case 7: 
   var $26=$2;
   var $27=(($26+4)|0);
   $2=$27;
   label = 2; break;
  case 8: 
   var $29=$2;
   return $29;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$c;
   var $3=$1;
   var $4=$2;
   var $5=(($4)>>>(0)) <= 127;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$2;
   var $8=__ZNSt3__15ctypeIcE21__classic_lower_tableEv();
   var $9=(($8+($7<<2))|0);
   var $10=HEAP32[(($9)>>2)];
   var $14 = $10;label = 4; break;
  case 3: 
   var $12=$2;
   var $14 = $12;label = 4; break;
  case 4: 
   var $14;
   return $14;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   $2=$low;
   $3=$high;
   var $4=$1;
   label = 2; break;
  case 2: 
   var $6=$2;
   var $7=$3;
   var $8=(($6)|(0))!=(($7)|(0));
   if ($8) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $10=$2;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)>>>(0)) <= 127;
   if ($12) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $14=$2;
   var $15=HEAP32[(($14)>>2)];
   var $16=__ZNSt3__15ctypeIcE21__classic_lower_tableEv();
   var $17=(($16+($15<<2))|0);
   var $18=HEAP32[(($17)>>2)];
   var $23 = $18;label = 6; break;
  case 5: 
   var $20=$2;
   var $21=HEAP32[(($20)>>2)];
   var $23 = $21;label = 6; break;
  case 6: 
   var $23;
   var $24=$2;
   HEAP32[(($24)>>2)]=$23;
   label = 7; break;
  case 7: 
   var $26=$2;
   var $27=(($26+4)|0);
   $2=$27;
   label = 2; break;
  case 8: 
   var $29=$2;
   return $29;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcEC2EPKtbj($this, $tab, $del, $refs) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   $6=$this;
   $7=$tab;
   var $12=(($del)&(1));
   $8=$12;
   $9=$refs;
   var $13=$6;
   var $14=$13;
   var $15=$9;
   $4=$14;
   $5=$15;
   var $16=$4;
   var $17=$16;
   var $18=$5;
   var $19=((($18)-(1))|0);
   $2=$17;
   $3=$19;
   var $20=$2;
   var $21=$20;
   HEAP32[(($21)>>2)]=((13000)|0);
   var $22=(($20+4)|0);
   var $23=$3;
   HEAP32[(($22)>>2)]=$23;
   var $24=$16;
   HEAP32[(($24)>>2)]=((12344)|0);
   var $25=$13;
   $1=$25;
   var $26=$1;
   label = 2; break;
  case 2: 
   var $28=$13;
   HEAP32[(($28)>>2)]=((12488)|0);
   var $29=(($13+8)|0);
   var $30=$7;
   HEAP32[(($29)>>2)]=$30;
   var $31=(($13+12)|0);
   var $32=$8;
   var $33=(($32) & 1);
   var $34=(($33)&(1));
   HEAP8[($31)]=$34;
   var $35=(($13+8)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|(0))==0;
   if ($37) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $39=__ZNSt3__15ctypeIcE13classic_tableEv();
   var $40=(($13+8)|0);
   HEAP32[(($40)>>2)]=$39;
   label = 4; break;
  case 4: 
   return;
  case 5: 
   var $48=$10;
   var $49=$11;
   var $50$0=$48;
   var $50$1=0;
   var $51$0=$50$0;
   var $51$1=$49;
   ___resumeException($51$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__15ctypeIcED2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=$2;
   HEAP32[(($3)>>2)]=((12488)|0);
   var $4=(($2+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $8=(($2+12)|0);
   var $9=HEAP8[($8)];
   var $10=(($9) & 1);
   if ($10) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $12=(($2+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))==0;
   if ($14) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $16=$13;
   __ZdaPv($16);
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $19=$2;
   __ZNSt3__16locale5facetD2Ev($19);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$c;
   var $3=$1;
   var $4=$2;
   var $5=(($4 << 24) >> 24);
   var $6=(($5)>>>(0)) <= 127;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$2;
   var $9=(($8 << 24) >> 24);
   var $10=__ZNSt3__15ctypeIcE21__classic_upper_tableEv();
   var $11=(($10+($9<<2))|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12) & 255);
   var $17 = $13;label = 4; break;
  case 3: 
   var $15=$2;
   var $17 = $15;label = 4; break;
  case 4: 
   var $17;
   return $17;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   $2=$low;
   $3=$high;
   var $4=$1;
   label = 2; break;
  case 2: 
   var $6=$2;
   var $7=$3;
   var $8=(($6)|(0))!=(($7)|(0));
   if ($8) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $10=$2;
   var $11=HEAP8[($10)];
   var $12=(($11 << 24) >> 24);
   var $13=(($12)>>>(0)) <= 127;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $15=$2;
   var $16=HEAP8[($15)];
   var $17=(($16 << 24) >> 24);
   var $18=__ZNSt3__15ctypeIcE21__classic_upper_tableEv();
   var $19=(($18+($17<<2))|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20) & 255);
   var $26 = $21;label = 6; break;
  case 5: 
   var $23=$2;
   var $24=HEAP8[($23)];
   var $26 = $24;label = 6; break;
  case 6: 
   var $26;
   var $27=$2;
   HEAP8[($27)]=$26;
   label = 7; break;
  case 7: 
   var $29=$2;
   var $30=(($29+1)|0);
   $2=$30;
   label = 2; break;
  case 8: 
   var $32=$2;
   return $32;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$c;
   var $3=$1;
   var $4=$2;
   var $5=(($4 << 24) >> 24);
   var $6=(($5)>>>(0)) <= 127;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$2;
   var $9=(($8 << 24) >> 24);
   var $10=__ZNSt3__15ctypeIcE21__classic_lower_tableEv();
   var $11=(($10+($9<<2))|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12) & 255);
   var $17 = $13;label = 4; break;
  case 3: 
   var $15=$2;
   var $17 = $15;label = 4; break;
  case 4: 
   var $17;
   return $17;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   $2=$low;
   $3=$high;
   var $4=$1;
   label = 2; break;
  case 2: 
   var $6=$2;
   var $7=$3;
   var $8=(($6)|(0))!=(($7)|(0));
   if ($8) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $10=$2;
   var $11=HEAP8[($10)];
   var $12=(($11 << 24) >> 24);
   var $13=(($12)>>>(0)) <= 127;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $15=$2;
   var $16=HEAP8[($15)];
   var $17=(($16 << 24) >> 24);
   var $18=__ZNSt3__15ctypeIcE21__classic_lower_tableEv();
   var $19=(($18+($17<<2))|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20) & 255);
   var $26 = $21;label = 6; break;
  case 5: 
   var $23=$2;
   var $24=HEAP8[($23)];
   var $26 = $24;label = 6; break;
  case 6: 
   var $26;
   var $27=$2;
   HEAP8[($27)]=$26;
   label = 7; break;
  case 7: 
   var $29=$2;
   var $30=(($29+1)|0);
   $2=$30;
   label = 2; break;
  case 8: 
   var $32=$2;
   return $32;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIcc10_mbstate_tED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16locale5facetD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1 = (function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $3=HEAP32[(($1)>>2)];
   return $3;
  case 3: 
   var $5$0 = ___cxa_find_matching_catch(-1, -1,0); $5$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1 = (function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $3=HEAP32[(($1)>>2)];
   return $3;
  case 3: 
   var $5$0 = ___cxa_find_matching_catch(-1, -1,0); $5$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1 = (function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $3=HEAP32[(($1)>>2)];
   return $3;
  case 3: 
   var $5$0 = ___cxa_find_matching_catch(-1, -1,0); $5$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 13295
// WARNING: content after a branch in a label, line: 13297
// WARNING: content after a branch in a label, line: 13298
// WARNING: content after a branch in a label, line: 13299
// WARNING: content after a branch in a label, line: 13300
// WARNING: content after a branch in a label, line: 13301
// WARNING: content after a branch in a label, line: 13302
// WARNING: content after a branch in a label, line: 13303
function __ZNKSt3__17codecvtIcc10_mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 var label = 0;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 $4=$this;
 $5=$0;
 $6=$frm;
 $7=$1;
 $8=$frm_nxt;
 $9=$to;
 $10=$2;
 $11=$to_nxt;
 var $12=$4;
 var $13=$6;
 var $14=$8;
 HEAP32[(($14)>>2)]=$13;
 var $15=$9;
 var $16=$11;
 HEAP32[(($16)>>2)]=$15;
 return 3;
}
function __ZNKSt3__17codecvtIcc10_mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 var label = 0;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 $3=$this;
 $4=$0;
 $5=$to;
 $6=$1;
 $7=$to_nxt;
 var $8=$3;
 var $9=$5;
 var $10=$7;
 HEAP32[(($10)>>2)]=$9;
 return 3;
}
function __ZNKSt3__17codecvtIcc10_mbstate_tE11do_encodingEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 1;
}
function __ZNKSt3__17codecvtIcc10_mbstate_tE16do_always_noconvEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 1;
}
function __ZNKSt3__17codecvtIcc10_mbstate_tE13do_max_lengthEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 1;
}
function __ZNSt3__17codecvtIwc10_mbstate_tEC2Ej($this, $refs) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   $6=$this;
   $7=$refs;
   var $10=$6;
   var $11=$10;
   var $12=$7;
   $4=$11;
   $5=$12;
   var $13=$4;
   var $14=$13;
   var $15=$5;
   var $16=((($15)-(1))|0);
   $2=$14;
   $3=$16;
   var $17=$2;
   var $18=$17;
   HEAP32[(($18)>>2)]=((13000)|0);
   var $19=(($17+4)|0);
   var $20=$3;
   HEAP32[(($19)>>2)]=$20;
   var $21=$13;
   HEAP32[(($21)>>2)]=((12344)|0);
   var $22=$10;
   $1=$22;
   var $23=$1;
   label = 2; break;
  case 2: 
   var $25=$10;
   HEAP32[(($25)>>2)]=((12120)|0);
   var $26=(($10+8)|0);
   HEAP32[(($26)>>2)]=0;
   return;
  case 3: 
   var $33=$8;
   var $34=$9;
   var $35$0=$33;
   var $35$1=0;
   var $36$0=$35$0;
   var $36$1=$34;
   ___resumeException($36$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIcc10_mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $end, $mx) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7=__stackBase__;
   var $8;
   var $9;
   var $10=(__stackBase__)+(8);
   var $11;
   var $12;
   var $13;
   var $14;
   var $15=(__stackBase__)+(16);
   var $16=(__stackBase__)+(24);
   $11=$this;
   $12=$0;
   $13=$frm;
   $14=$end;
   HEAP32[(($15)>>2)]=$mx;
   var $17=$11;
   var $18=$14;
   var $19=$13;
   var $20=$18;
   var $21=$19;
   var $22=((($20)-($21))|0);
   HEAP32[(($16)>>2)]=$22;
   $8=$15;
   $9=$16;
   var $23=$8;
   var $24=$9;
   var $tmp_i=$7;
   var $tmp1_i=$10;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $5=$23;
   $6=$24;
   var $25=$6;
   var $26=$5;
   $2=$7;
   $3=$25;
   $4=$26;
   var $27=$2;
   var $28=$3;
   var $29=HEAP32[(($28)>>2)];
   var $30=$4;
   var $31=HEAP32[(($30)>>2)];
   var $32=(($29)>>>(0)) < (($31)>>>(0));
   if ($32) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $34=$6;
   var $37 = $34;label = 4; break;
  case 3: 
   var $36=$5;
   var $37 = $36;label = 4; break;
  case 4: 
   var $37;
   var $38=HEAP32[(($37)>>2)];
   STACKTOP = __stackBase__;
   return $38;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIwc10_mbstate_tED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__17codecvtIwc10_mbstate_tED2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i1_i5;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i_i6;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25=__stackBase__;
   var $26=(__stackBase__)+(8);
   var $27;
   var $28;
   var $29=(__stackBase__)+(16);
   var $30=(__stackBase__)+(24);
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $__current_i7=(__stackBase__)+(32);
   var $45=(__stackBase__)+(40);
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $__tmp_i_i_i1_i1;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $__tmp_i_i_i_i2;
   var $67;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73=(__stackBase__)+(48);
   var $74=(__stackBase__)+(56);
   var $75;
   var $76;
   var $77=(__stackBase__)+(64);
   var $78=(__stackBase__)+(72);
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $__current_i3=(__stackBase__)+(80);
   var $93=(__stackBase__)+(88);
   var $94;
   var $95;
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $__tmp_i_i_i1_i;
   var $105;
   var $106;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $__tmp_i_i_i_i;
   var $115;
   var $116;
   var $117;
   var $118;
   var $119;
   var $120;
   var $121=(__stackBase__)+(96);
   var $122=(__stackBase__)+(104);
   var $123;
   var $124;
   var $125=(__stackBase__)+(112);
   var $126=(__stackBase__)+(120);
   var $127;
   var $128;
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $__current_i=(__stackBase__)+(128);
   var $143=(__stackBase__)+(136);
   var $144;
   var $145;
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154;
   var $155;
   var $fend;
   var $save_state=(__stackBase__)+(144);
   var $n;
   var $tmp=(__stackBase__)+(152);
   var $p;
   $148=$this;
   $149=$st;
   $150=$frm;
   $151=$frm_end;
   $152=$frm_nxt;
   $153=$to;
   $154=$to_end;
   $155=$to_nxt;
   var $156=$148;
   var $157=$150;
   $fend=$157;
   label = 2; break;
  case 2: 
   var $159=$fend;
   var $160=$151;
   var $161=(($159)|(0))!=(($160)|(0));
   if ($161) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $163=$fend;
   var $164=HEAP32[(($163)>>2)];
   var $165=(($164)|(0))==0;
   if ($165) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 7; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $169=$fend;
   var $170=(($169+4)|0);
   $fend=$170;
   label = 2; break;
  case 7: 
   var $172=$153;
   var $173=$155;
   HEAP32[(($173)>>2)]=$172;
   var $174=$150;
   var $175=$152;
   HEAP32[(($175)>>2)]=$174;
   label = 8; break;
  case 8: 
   var $177=$150;
   var $178=$151;
   var $179=(($177)|(0))!=(($178)|(0));
   if ($179) { label = 9; break; } else { var $185 = 0;label = 10; break; }
  case 9: 
   var $181=$153;
   var $182=$154;
   var $183=(($181)|(0))!=(($182)|(0));
   var $185 = $183;label = 10; break;
  case 10: 
   var $185;
   if ($185) { label = 11; break; } else { label = 71; break; }
  case 11: 
   var $187=$149;
   var $188=$save_state;
   var $189=$187;
   assert(8 % 1 === 0);HEAP32[(($188)>>2)]=HEAP32[(($189)>>2)];HEAP32[((($188)+(4))>>2)]=HEAP32[((($189)+(4))>>2)];
   var $190=$153;
   var $191=$152;
   var $192=$fend;
   var $193=$150;
   var $194=$192;
   var $195=$193;
   var $196=((($194)-($195))|0);
   var $197=((((($196)|(0)))/(4))&-1);
   var $198=$154;
   var $199=$153;
   var $200=$198;
   var $201=$199;
   var $202=((($200)-($201))|0);
   var $203=$149;
   var $204=(($156+8)|0);
   var $205=HEAP32[(($204)>>2)];
   $137=$190;
   $138=$191;
   $139=$197;
   $140=$202;
   $141=$203;
   $142=$205;
   var $206=$142;
   var $207=_uselocale($206);
   HEAP32[(($143)>>2)]=284;
   $134=$__current_i;
   $135=$207;
   $136=$143;
   var $208=$134;
   var $209=$135;
   var $210=$136;
   $131=$208;
   $132=$209;
   $133=$210;
   var $211=$131;
   var $212=(($211)|0);
   var $213=$132;
   var $214=$133;
   $130=$214;
   var $215=$130;
   var $216=HEAP32[(($215)>>2)];
   $127=$212;
   $128=$213;
   $129=$216;
   var $217=$127;
   var $218=$128;
   var $219=$129;
   $124=$217;
   HEAP32[(($125)>>2)]=$218;
   HEAP32[(($126)>>2)]=$219;
   var $220=$124;
   var $221=$220;
   $123=$125;
   var $222=$123;
   var $223=HEAP32[(($222)>>2)];
   $117=$126;
   var $224=$117;
   var $225=HEAP32[(($224)>>2)];
   $120=$221;
   HEAP32[(($121)>>2)]=$223;
   HEAP32[(($122)>>2)]=$225;
   var $226=$120;
   var $227=(($226)|0);
   $119=$121;
   var $228=$119;
   var $229=HEAP32[(($228)>>2)];
   HEAP32[(($227)>>2)]=$229;
   var $230=(($226+4)|0);
   $118=$122;
   var $231=$118;
   var $232=HEAP32[(($231)>>2)];
   HEAP32[(($230)>>2)]=$232;
   var $233=$137;
   var $234=$138;
   var $235=$139;
   var $236=$140;
   var $237=$141;
   var $238 = (function() { try { __THREW__ = 0; return _wcsnrtombs($233, $234, $235, $236, $237) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 16; break; }
  case 12: 
   $146=1;
   $106=$__current_i;
   var $240=$106;
   $105=$240;
   var $241=$105;
   $103=$241;
   $104=0;
   var $242=$103;
   var $243=(($242)|0);
   $102=$243;
   var $244=$102;
   var $245=$244;
   $101=$245;
   var $246=$101;
   var $247=(($246)|0);
   var $248=HEAP32[(($247)>>2)];
   $__tmp_i_i_i1_i=$248;
   var $249=$104;
   var $250=(($242)|0);
   $100=$250;
   var $251=$100;
   var $252=$251;
   $99=$252;
   var $253=$99;
   var $254=(($253)|0);
   HEAP32[(($254)>>2)]=$249;
   var $255=$__tmp_i_i_i1_i;
   var $256=(($255)|(0))!=0;
   if ($256) { label = 13; break; } else { label = 21; break; }
  case 13: 
   var $258=(($242)|0);
   $98=$258;
   var $259=$98;
   var $260=$259;
   $97=$260;
   var $261=$97;
   var $262=(($261+4)|0);
   var $263=HEAP32[(($262)>>2)];
   var $264=$__tmp_i_i_i1_i;
   var $265 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$263]($264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   label = 21; break;
  case 15: 
   var $268$0 = ___cxa_find_matching_catch(-1, -1,0); $268$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 16: 
   var $270$0 = ___cxa_find_matching_catch(-1, -1); $270$1 = tempRet0;
   var $271=$270$0;
   $144=$271;
   var $272=$270$1;
   $145=$272;
   $116=$__current_i;
   var $273=$116;
   $115=$273;
   var $274=$115;
   $113=$274;
   $114=0;
   var $275=$113;
   var $276=(($275)|0);
   $112=$276;
   var $277=$112;
   var $278=$277;
   $111=$278;
   var $279=$111;
   var $280=(($279)|0);
   var $281=HEAP32[(($280)>>2)];
   $__tmp_i_i_i_i=$281;
   var $282=$114;
   var $283=(($275)|0);
   $110=$283;
   var $284=$110;
   var $285=$284;
   $109=$285;
   var $286=$109;
   var $287=(($286)|0);
   HEAP32[(($287)>>2)]=$282;
   var $288=$__tmp_i_i_i_i;
   var $289=(($288)|(0))!=0;
   if ($289) { label = 17; break; } else { label = 20; break; }
  case 17: 
   var $291=(($275)|0);
   $108=$291;
   var $292=$108;
   var $293=$292;
   $107=$293;
   var $294=$107;
   var $295=(($294+4)|0);
   var $296=HEAP32[(($295)>>2)];
   var $297=$__tmp_i_i_i_i;
   var $298 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$296]($297) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 19; break; }
  case 18: 
   label = 20; break;
  case 19: 
   var $301$0 = ___cxa_find_matching_catch(-1, -1,0); $301$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 20: 
   var $302=$144;
   var $303=$145;
   var $304$0=$302;
   var $304$1=0;
   var $305$0=$304$0;
   var $305$1=$303;
   ___resumeException($305$0)
  case 21: 
   $n=$238;
   var $306=$n;
   var $307=(($306)|(0))==-1;
   if ($307) { label = 22; break; } else { label = 39; break; }
  case 22: 
   var $309=$153;
   var $310=$155;
   HEAP32[(($310)>>2)]=$309;
   label = 23; break;
  case 23: 
   var $312=$150;
   var $313=$152;
   var $314=HEAP32[(($313)>>2)];
   var $315=(($312)|(0))!=(($314)|(0));
   if ($315) { label = 24; break; } else { label = 38; break; }
  case 24: 
   var $317=$155;
   var $318=HEAP32[(($317)>>2)];
   var $319=$150;
   var $320=HEAP32[(($319)>>2)];
   var $321=(($156+8)|0);
   var $322=HEAP32[(($321)>>2)];
   $89=$318;
   $90=$320;
   $91=$save_state;
   $92=$322;
   var $323=$92;
   var $324=_uselocale($323);
   HEAP32[(($93)>>2)]=284;
   $86=$__current_i3;
   $87=$324;
   $88=$93;
   var $325=$86;
   var $326=$87;
   var $327=$88;
   $83=$325;
   $84=$326;
   $85=$327;
   var $328=$83;
   var $329=(($328)|0);
   var $330=$84;
   var $331=$85;
   $82=$331;
   var $332=$82;
   var $333=HEAP32[(($332)>>2)];
   $79=$329;
   $80=$330;
   $81=$333;
   var $334=$79;
   var $335=$80;
   var $336=$81;
   $76=$334;
   HEAP32[(($77)>>2)]=$335;
   HEAP32[(($78)>>2)]=$336;
   var $337=$76;
   var $338=$337;
   $75=$77;
   var $339=$75;
   var $340=HEAP32[(($339)>>2)];
   $69=$78;
   var $341=$69;
   var $342=HEAP32[(($341)>>2)];
   $72=$338;
   HEAP32[(($73)>>2)]=$340;
   HEAP32[(($74)>>2)]=$342;
   var $343=$72;
   var $344=(($343)|0);
   $71=$73;
   var $345=$71;
   var $346=HEAP32[(($345)>>2)];
   HEAP32[(($344)>>2)]=$346;
   var $347=(($343+4)|0);
   $70=$74;
   var $348=$70;
   var $349=HEAP32[(($348)>>2)];
   HEAP32[(($347)>>2)]=$349;
   var $350=$89;
   var $351=$90;
   var $352=$91;
   var $353 = (function() { try { __THREW__ = 0; return _wcrtomb($350, $351, $352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 29; break; }
  case 25: 
   $96=1;
   $58=$__current_i3;
   var $355=$58;
   $57=$355;
   var $356=$57;
   $55=$356;
   $56=0;
   var $357=$55;
   var $358=(($357)|0);
   $54=$358;
   var $359=$54;
   var $360=$359;
   $53=$360;
   var $361=$53;
   var $362=(($361)|0);
   var $363=HEAP32[(($362)>>2)];
   $__tmp_i_i_i1_i1=$363;
   var $364=$56;
   var $365=(($357)|0);
   $52=$365;
   var $366=$52;
   var $367=$366;
   $51=$367;
   var $368=$51;
   var $369=(($368)|0);
   HEAP32[(($369)>>2)]=$364;
   var $370=$__tmp_i_i_i1_i1;
   var $371=(($370)|(0))!=0;
   if ($371) { label = 26; break; } else { label = 34; break; }
  case 26: 
   var $373=(($357)|0);
   $50=$373;
   var $374=$50;
   var $375=$374;
   $49=$375;
   var $376=$49;
   var $377=(($376+4)|0);
   var $378=HEAP32[(($377)>>2)];
   var $379=$__tmp_i_i_i1_i1;
   var $380 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$378]($379) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 28; break; }
  case 27: 
   label = 34; break;
  case 28: 
   var $383$0 = ___cxa_find_matching_catch(-1, -1,0); $383$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 29: 
   var $385$0 = ___cxa_find_matching_catch(-1, -1); $385$1 = tempRet0;
   var $386=$385$0;
   $94=$386;
   var $387=$385$1;
   $95=$387;
   $68=$__current_i3;
   var $388=$68;
   $67=$388;
   var $389=$67;
   $65=$389;
   $66=0;
   var $390=$65;
   var $391=(($390)|0);
   $64=$391;
   var $392=$64;
   var $393=$392;
   $63=$393;
   var $394=$63;
   var $395=(($394)|0);
   var $396=HEAP32[(($395)>>2)];
   $__tmp_i_i_i_i2=$396;
   var $397=$66;
   var $398=(($390)|0);
   $62=$398;
   var $399=$62;
   var $400=$399;
   $61=$400;
   var $401=$61;
   var $402=(($401)|0);
   HEAP32[(($402)>>2)]=$397;
   var $403=$__tmp_i_i_i_i2;
   var $404=(($403)|(0))!=0;
   if ($404) { label = 30; break; } else { label = 33; break; }
  case 30: 
   var $406=(($390)|0);
   $60=$406;
   var $407=$60;
   var $408=$407;
   $59=$408;
   var $409=$59;
   var $410=(($409+4)|0);
   var $411=HEAP32[(($410)>>2)];
   var $412=$__tmp_i_i_i_i2;
   var $413 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$411]($412) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 32; break; }
  case 31: 
   label = 33; break;
  case 32: 
   var $416$0 = ___cxa_find_matching_catch(-1, -1,0); $416$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 33: 
   var $417=$94;
   var $418=$95;
   var $419$0=$417;
   var $419$1=0;
   var $420$0=$419$0;
   var $420$1=$418;
   ___resumeException($420$0)
  case 34: 
   $n=$353;
   var $421=$n;
   var $422=(($421)|(0))==-1;
   if ($422) { label = 35; break; } else { label = 36; break; }
  case 35: 
   label = 38; break;
  case 36: 
   var $425=$n;
   var $426=$155;
   var $427=HEAP32[(($426)>>2)];
   var $428=(($427+$425)|0);
   HEAP32[(($426)>>2)]=$428;
   label = 37; break;
  case 37: 
   var $430=$150;
   var $431=(($430+4)|0);
   $150=$431;
   label = 23; break;
  case 38: 
   var $433=$150;
   var $434=$152;
   HEAP32[(($434)>>2)]=$433;
   $147=2;
   label = 72; break;
  case 39: 
   var $436=$n;
   var $437=(($436)|(0))==0;
   if ($437) { label = 40; break; } else { label = 41; break; }
  case 40: 
   $147=1;
   label = 72; break;
  case 41: 
   var $440=$n;
   var $441=$155;
   var $442=HEAP32[(($441)>>2)];
   var $443=(($442+$440)|0);
   HEAP32[(($441)>>2)]=$443;
   var $444=$155;
   var $445=HEAP32[(($444)>>2)];
   var $446=$154;
   var $447=(($445)|(0))==(($446)|(0));
   if ($447) { label = 42; break; } else { label = 43; break; }
  case 42: 
   label = 71; break;
  case 43: 
   var $450=$fend;
   var $451=$151;
   var $452=(($450)|(0))!=(($451)|(0));
   if ($452) { label = 44; break; } else { label = 69; break; }
  case 44: 
   var $454=(($tmp)|0);
   var $455=$149;
   var $456=(($156+8)|0);
   var $457=HEAP32[(($456)>>2)];
   $41=$454;
   $42=0;
   $43=$455;
   $44=$457;
   var $458=$44;
   var $459=_uselocale($458);
   HEAP32[(($45)>>2)]=284;
   $38=$__current_i7;
   $39=$459;
   $40=$45;
   var $460=$38;
   var $461=$39;
   var $462=$40;
   $35=$460;
   $36=$461;
   $37=$462;
   var $463=$35;
   var $464=(($463)|0);
   var $465=$36;
   var $466=$37;
   $34=$466;
   var $467=$34;
   var $468=HEAP32[(($467)>>2)];
   $31=$464;
   $32=$465;
   $33=$468;
   var $469=$31;
   var $470=$32;
   var $471=$33;
   $28=$469;
   HEAP32[(($29)>>2)]=$470;
   HEAP32[(($30)>>2)]=$471;
   var $472=$28;
   var $473=$472;
   $27=$29;
   var $474=$27;
   var $475=HEAP32[(($474)>>2)];
   $21=$30;
   var $476=$21;
   var $477=HEAP32[(($476)>>2)];
   $24=$473;
   HEAP32[(($25)>>2)]=$475;
   HEAP32[(($26)>>2)]=$477;
   var $478=$24;
   var $479=(($478)|0);
   $23=$25;
   var $480=$23;
   var $481=HEAP32[(($480)>>2)];
   HEAP32[(($479)>>2)]=$481;
   var $482=(($478+4)|0);
   $22=$26;
   var $483=$22;
   var $484=HEAP32[(($483)>>2)];
   HEAP32[(($482)>>2)]=$484;
   var $485=$41;
   var $486=$42;
   var $487=$43;
   var $488 = (function() { try { __THREW__ = 0; return _wcrtomb($485, $486, $487) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 45; break; } else { label = 49; break; }
  case 45: 
   $48=1;
   $10=$__current_i7;
   var $490=$10;
   $9=$490;
   var $491=$9;
   $7=$491;
   $8=0;
   var $492=$7;
   var $493=(($492)|0);
   $6=$493;
   var $494=$6;
   var $495=$494;
   $5=$495;
   var $496=$5;
   var $497=(($496)|0);
   var $498=HEAP32[(($497)>>2)];
   $__tmp_i_i_i1_i5=$498;
   var $499=$8;
   var $500=(($492)|0);
   $4=$500;
   var $501=$4;
   var $502=$501;
   $3=$502;
   var $503=$3;
   var $504=(($503)|0);
   HEAP32[(($504)>>2)]=$499;
   var $505=$__tmp_i_i_i1_i5;
   var $506=(($505)|(0))!=0;
   if ($506) { label = 46; break; } else { label = 54; break; }
  case 46: 
   var $508=(($492)|0);
   $2=$508;
   var $509=$2;
   var $510=$509;
   $1=$510;
   var $511=$1;
   var $512=(($511+4)|0);
   var $513=HEAP32[(($512)>>2)];
   var $514=$__tmp_i_i_i1_i5;
   var $515 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$513]($514) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 47; break; } else { label = 48; break; }
  case 47: 
   label = 54; break;
  case 48: 
   var $518$0 = ___cxa_find_matching_catch(-1, -1,0); $518$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 49: 
   var $520$0 = ___cxa_find_matching_catch(-1, -1); $520$1 = tempRet0;
   var $521=$520$0;
   $46=$521;
   var $522=$520$1;
   $47=$522;
   $20=$__current_i7;
   var $523=$20;
   $19=$523;
   var $524=$19;
   $17=$524;
   $18=0;
   var $525=$17;
   var $526=(($525)|0);
   $16=$526;
   var $527=$16;
   var $528=$527;
   $15=$528;
   var $529=$15;
   var $530=(($529)|0);
   var $531=HEAP32[(($530)>>2)];
   $__tmp_i_i_i_i6=$531;
   var $532=$18;
   var $533=(($525)|0);
   $14=$533;
   var $534=$14;
   var $535=$534;
   $13=$535;
   var $536=$13;
   var $537=(($536)|0);
   HEAP32[(($537)>>2)]=$532;
   var $538=$__tmp_i_i_i_i6;
   var $539=(($538)|(0))!=0;
   if ($539) { label = 50; break; } else { label = 53; break; }
  case 50: 
   var $541=(($525)|0);
   $12=$541;
   var $542=$12;
   var $543=$542;
   $11=$543;
   var $544=$11;
   var $545=(($544+4)|0);
   var $546=HEAP32[(($545)>>2)];
   var $547=$__tmp_i_i_i_i6;
   var $548 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$546]($547) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 51; break; } else { label = 52; break; }
  case 51: 
   label = 53; break;
  case 52: 
   var $551$0 = ___cxa_find_matching_catch(-1, -1,0); $551$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 53: 
   var $552=$46;
   var $553=$47;
   var $554$0=$552;
   var $554$1=0;
   var $555$0=$554$0;
   var $555$1=$553;
   ___resumeException($555$0)
  case 54: 
   $n=$488;
   var $556=$n;
   var $557=(($556)|(0))==-1;
   if ($557) { label = 55; break; } else { label = 56; break; }
  case 55: 
   $147=2;
   label = 72; break;
  case 56: 
   var $560=$n;
   var $561=$154;
   var $562=$155;
   var $563=HEAP32[(($562)>>2)];
   var $564=$561;
   var $565=$563;
   var $566=((($564)-($565))|0);
   var $567=(($560)>>>(0)) > (($566)>>>(0));
   if ($567) { label = 57; break; } else { label = 58; break; }
  case 57: 
   $147=1;
   label = 72; break;
  case 58: 
   var $570=(($tmp)|0);
   $p=$570;
   label = 59; break;
  case 59: 
   var $572=$n;
   var $573=(($572)|(0))!=0;
   if ($573) { label = 60; break; } else { label = 62; break; }
  case 60: 
   var $575=$p;
   var $576=(($575+1)|0);
   $p=$576;
   var $577=HEAP8[($575)];
   var $578=$155;
   var $579=HEAP32[(($578)>>2)];
   var $580=(($579+1)|0);
   HEAP32[(($578)>>2)]=$580;
   HEAP8[($579)]=$577;
   label = 61; break;
  case 61: 
   var $582=$n;
   var $583=((($582)-(1))|0);
   $n=$583;
   label = 59; break;
  case 62: 
   var $585=$152;
   var $586=HEAP32[(($585)>>2)];
   var $587=(($586+4)|0);
   HEAP32[(($585)>>2)]=$587;
   var $588=$152;
   var $589=HEAP32[(($588)>>2)];
   $fend=$589;
   label = 63; break;
  case 63: 
   var $591=$fend;
   var $592=$151;
   var $593=(($591)|(0))!=(($592)|(0));
   if ($593) { label = 64; break; } else { label = 68; break; }
  case 64: 
   var $595=$fend;
   var $596=HEAP32[(($595)>>2)];
   var $597=(($596)|(0))==0;
   if ($597) { label = 65; break; } else { label = 66; break; }
  case 65: 
   label = 68; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $601=$fend;
   var $602=(($601+4)|0);
   $fend=$602;
   label = 63; break;
  case 68: 
   label = 69; break;
  case 69: 
   label = 70; break;
  case 70: 
   var $606=$152;
   var $607=HEAP32[(($606)>>2)];
   $150=$607;
   var $608=$155;
   var $609=HEAP32[(($608)>>2)];
   $153=$609;
   label = 8; break;
  case 71: 
   var $611=$152;
   var $612=HEAP32[(($611)>>2)];
   var $613=$151;
   var $614=(($612)|(0))==(($613)|(0));
   var $615=$614 ? 0 : 1;
   $147=$615;
   label = 72; break;
  case 72: 
   var $617=$147;
   STACKTOP = __stackBase__;
   return $617;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i1_i5;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i_i6;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25=__stackBase__;
   var $26=(__stackBase__)+(8);
   var $27;
   var $28;
   var $29=(__stackBase__)+(16);
   var $30=(__stackBase__)+(24);
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $__current_i7=(__stackBase__)+(32);
   var $46=(__stackBase__)+(40);
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $__tmp_i_i_i1_i1;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $64;
   var $65;
   var $66;
   var $67;
   var $__tmp_i_i_i_i2;
   var $68;
   var $69;
   var $70;
   var $71;
   var $72;
   var $73;
   var $74=(__stackBase__)+(48);
   var $75=(__stackBase__)+(56);
   var $76;
   var $77;
   var $78=(__stackBase__)+(64);
   var $79=(__stackBase__)+(72);
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $90;
   var $91;
   var $92;
   var $93;
   var $94;
   var $__current_i3=(__stackBase__)+(80);
   var $95=(__stackBase__)+(88);
   var $96;
   var $97;
   var $98;
   var $99;
   var $100;
   var $101;
   var $102;
   var $103;
   var $104;
   var $105;
   var $106;
   var $__tmp_i_i_i1_i;
   var $107;
   var $108;
   var $109;
   var $110;
   var $111;
   var $112;
   var $113;
   var $114;
   var $115;
   var $116;
   var $__tmp_i_i_i_i;
   var $117;
   var $118;
   var $119;
   var $120;
   var $121;
   var $122;
   var $123=(__stackBase__)+(96);
   var $124=(__stackBase__)+(104);
   var $125;
   var $126;
   var $127=(__stackBase__)+(112);
   var $128=(__stackBase__)+(120);
   var $129;
   var $130;
   var $131;
   var $132;
   var $133;
   var $134;
   var $135;
   var $136;
   var $137;
   var $138;
   var $139;
   var $140;
   var $141;
   var $142;
   var $143;
   var $144;
   var $__current_i=(__stackBase__)+(128);
   var $145=(__stackBase__)+(136);
   var $146;
   var $147;
   var $148;
   var $149;
   var $150;
   var $151;
   var $152;
   var $153;
   var $154;
   var $155;
   var $156;
   var $157;
   var $fend;
   var $save_state=(__stackBase__)+(144);
   var $n;
   $150=$this;
   $151=$st;
   $152=$frm;
   $153=$frm_end;
   $154=$frm_nxt;
   $155=$to;
   $156=$to_end;
   $157=$to_nxt;
   var $158=$150;
   var $159=$152;
   $fend=$159;
   label = 2; break;
  case 2: 
   var $161=$fend;
   var $162=$153;
   var $163=(($161)|(0))!=(($162)|(0));
   if ($163) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $165=$fend;
   var $166=HEAP8[($165)];
   var $167=(($166 << 24) >> 24);
   var $168=(($167)|(0))==0;
   if ($168) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 7; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $172=$fend;
   var $173=(($172+1)|0);
   $fend=$173;
   label = 2; break;
  case 7: 
   var $175=$155;
   var $176=$157;
   HEAP32[(($176)>>2)]=$175;
   var $177=$152;
   var $178=$154;
   HEAP32[(($178)>>2)]=$177;
   label = 8; break;
  case 8: 
   var $180=$152;
   var $181=$153;
   var $182=(($180)|(0))!=(($181)|(0));
   if ($182) { label = 9; break; } else { var $188 = 0;label = 10; break; }
  case 9: 
   var $184=$155;
   var $185=$156;
   var $186=(($184)|(0))!=(($185)|(0));
   var $188 = $186;label = 10; break;
  case 10: 
   var $188;
   if ($188) { label = 11; break; } else { label = 68; break; }
  case 11: 
   var $190=$151;
   var $191=$save_state;
   var $192=$190;
   assert(8 % 1 === 0);HEAP32[(($191)>>2)]=HEAP32[(($192)>>2)];HEAP32[((($191)+(4))>>2)]=HEAP32[((($192)+(4))>>2)];
   var $193=$155;
   var $194=$154;
   var $195=$fend;
   var $196=$152;
   var $197=$195;
   var $198=$196;
   var $199=((($197)-($198))|0);
   var $200=$156;
   var $201=$155;
   var $202=$200;
   var $203=$201;
   var $204=((($202)-($203))|0);
   var $205=((((($204)|(0)))/(4))&-1);
   var $206=$151;
   var $207=(($158+8)|0);
   var $208=HEAP32[(($207)>>2)];
   $139=$193;
   $140=$194;
   $141=$199;
   $142=$205;
   $143=$206;
   $144=$208;
   var $209=$144;
   var $210=_uselocale($209);
   HEAP32[(($145)>>2)]=284;
   $136=$__current_i;
   $137=$210;
   $138=$145;
   var $211=$136;
   var $212=$137;
   var $213=$138;
   $133=$211;
   $134=$212;
   $135=$213;
   var $214=$133;
   var $215=(($214)|0);
   var $216=$134;
   var $217=$135;
   $132=$217;
   var $218=$132;
   var $219=HEAP32[(($218)>>2)];
   $129=$215;
   $130=$216;
   $131=$219;
   var $220=$129;
   var $221=$130;
   var $222=$131;
   $126=$220;
   HEAP32[(($127)>>2)]=$221;
   HEAP32[(($128)>>2)]=$222;
   var $223=$126;
   var $224=$223;
   $125=$127;
   var $225=$125;
   var $226=HEAP32[(($225)>>2)];
   $119=$128;
   var $227=$119;
   var $228=HEAP32[(($227)>>2)];
   $122=$224;
   HEAP32[(($123)>>2)]=$226;
   HEAP32[(($124)>>2)]=$228;
   var $229=$122;
   var $230=(($229)|0);
   $121=$123;
   var $231=$121;
   var $232=HEAP32[(($231)>>2)];
   HEAP32[(($230)>>2)]=$232;
   var $233=(($229+4)|0);
   $120=$124;
   var $234=$120;
   var $235=HEAP32[(($234)>>2)];
   HEAP32[(($233)>>2)]=$235;
   var $236=$139;
   var $237=$140;
   var $238=$141;
   var $239=$142;
   var $240=$143;
   var $241 = (function() { try { __THREW__ = 0; return _mbsnrtowcs($236, $237, $238, $239, $240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 16; break; }
  case 12: 
   $148=1;
   $108=$__current_i;
   var $243=$108;
   $107=$243;
   var $244=$107;
   $105=$244;
   $106=0;
   var $245=$105;
   var $246=(($245)|0);
   $104=$246;
   var $247=$104;
   var $248=$247;
   $103=$248;
   var $249=$103;
   var $250=(($249)|0);
   var $251=HEAP32[(($250)>>2)];
   $__tmp_i_i_i1_i=$251;
   var $252=$106;
   var $253=(($245)|0);
   $102=$253;
   var $254=$102;
   var $255=$254;
   $101=$255;
   var $256=$101;
   var $257=(($256)|0);
   HEAP32[(($257)>>2)]=$252;
   var $258=$__tmp_i_i_i1_i;
   var $259=(($258)|(0))!=0;
   if ($259) { label = 13; break; } else { label = 21; break; }
  case 13: 
   var $261=(($245)|0);
   $100=$261;
   var $262=$100;
   var $263=$262;
   $99=$263;
   var $264=$99;
   var $265=(($264+4)|0);
   var $266=HEAP32[(($265)>>2)];
   var $267=$__tmp_i_i_i1_i;
   var $268 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$266]($267) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 14; break; } else { label = 15; break; }
  case 14: 
   label = 21; break;
  case 15: 
   var $271$0 = ___cxa_find_matching_catch(-1, -1,0); $271$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 16: 
   var $273$0 = ___cxa_find_matching_catch(-1, -1); $273$1 = tempRet0;
   var $274=$273$0;
   $146=$274;
   var $275=$273$1;
   $147=$275;
   $118=$__current_i;
   var $276=$118;
   $117=$276;
   var $277=$117;
   $115=$277;
   $116=0;
   var $278=$115;
   var $279=(($278)|0);
   $114=$279;
   var $280=$114;
   var $281=$280;
   $113=$281;
   var $282=$113;
   var $283=(($282)|0);
   var $284=HEAP32[(($283)>>2)];
   $__tmp_i_i_i_i=$284;
   var $285=$116;
   var $286=(($278)|0);
   $112=$286;
   var $287=$112;
   var $288=$287;
   $111=$288;
   var $289=$111;
   var $290=(($289)|0);
   HEAP32[(($290)>>2)]=$285;
   var $291=$__tmp_i_i_i_i;
   var $292=(($291)|(0))!=0;
   if ($292) { label = 17; break; } else { label = 20; break; }
  case 17: 
   var $294=(($278)|0);
   $110=$294;
   var $295=$110;
   var $296=$295;
   $109=$296;
   var $297=$109;
   var $298=(($297+4)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=$__tmp_i_i_i_i;
   var $301 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$299]($300) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 18; break; } else { label = 19; break; }
  case 18: 
   label = 20; break;
  case 19: 
   var $304$0 = ___cxa_find_matching_catch(-1, -1,0); $304$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 20: 
   var $305=$146;
   var $306=$147;
   var $307$0=$305;
   var $307$1=0;
   var $308$0=$307$0;
   var $308$1=$306;
   ___resumeException($308$0)
  case 21: 
   $n=$241;
   var $309=$n;
   var $310=(($309)|(0))==-1;
   if ($310) { label = 22; break; } else { label = 42; break; }
  case 22: 
   var $312=$155;
   var $313=$157;
   HEAP32[(($313)>>2)]=$312;
   label = 23; break;
  case 23: 
   var $315=$152;
   var $316=$154;
   var $317=HEAP32[(($316)>>2)];
   var $318=(($315)|(0))!=(($317)|(0));
   if ($318) { label = 24; break; } else { label = 41; break; }
  case 24: 
   var $320=$157;
   var $321=HEAP32[(($320)>>2)];
   var $322=$152;
   var $323=$fend;
   var $324=$152;
   var $325=$323;
   var $326=$324;
   var $327=((($325)-($326))|0);
   var $328=(($158+8)|0);
   var $329=HEAP32[(($328)>>2)];
   $90=$321;
   $91=$322;
   $92=$327;
   $93=$save_state;
   $94=$329;
   var $330=$94;
   var $331=_uselocale($330);
   HEAP32[(($95)>>2)]=284;
   $87=$__current_i3;
   $88=$331;
   $89=$95;
   var $332=$87;
   var $333=$88;
   var $334=$89;
   $84=$332;
   $85=$333;
   $86=$334;
   var $335=$84;
   var $336=(($335)|0);
   var $337=$85;
   var $338=$86;
   $83=$338;
   var $339=$83;
   var $340=HEAP32[(($339)>>2)];
   $80=$336;
   $81=$337;
   $82=$340;
   var $341=$80;
   var $342=$81;
   var $343=$82;
   $77=$341;
   HEAP32[(($78)>>2)]=$342;
   HEAP32[(($79)>>2)]=$343;
   var $344=$77;
   var $345=$344;
   $76=$78;
   var $346=$76;
   var $347=HEAP32[(($346)>>2)];
   $70=$79;
   var $348=$70;
   var $349=HEAP32[(($348)>>2)];
   $73=$345;
   HEAP32[(($74)>>2)]=$347;
   HEAP32[(($75)>>2)]=$349;
   var $350=$73;
   var $351=(($350)|0);
   $72=$74;
   var $352=$72;
   var $353=HEAP32[(($352)>>2)];
   HEAP32[(($351)>>2)]=$353;
   var $354=(($350+4)|0);
   $71=$75;
   var $355=$71;
   var $356=HEAP32[(($355)>>2)];
   HEAP32[(($354)>>2)]=$356;
   var $357=$90;
   var $358=$91;
   var $359=$92;
   var $360=$93;
   var $361 = (function() { try { __THREW__ = 0; return _mbrtowc($357, $358, $359, $360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 25; break; } else { label = 29; break; }
  case 25: 
   $98=1;
   $59=$__current_i3;
   var $363=$59;
   $58=$363;
   var $364=$58;
   $56=$364;
   $57=0;
   var $365=$56;
   var $366=(($365)|0);
   $55=$366;
   var $367=$55;
   var $368=$367;
   $54=$368;
   var $369=$54;
   var $370=(($369)|0);
   var $371=HEAP32[(($370)>>2)];
   $__tmp_i_i_i1_i1=$371;
   var $372=$57;
   var $373=(($365)|0);
   $53=$373;
   var $374=$53;
   var $375=$374;
   $52=$375;
   var $376=$52;
   var $377=(($376)|0);
   HEAP32[(($377)>>2)]=$372;
   var $378=$__tmp_i_i_i1_i1;
   var $379=(($378)|(0))!=0;
   if ($379) { label = 26; break; } else { label = 34; break; }
  case 26: 
   var $381=(($365)|0);
   $51=$381;
   var $382=$51;
   var $383=$382;
   $50=$383;
   var $384=$50;
   var $385=(($384+4)|0);
   var $386=HEAP32[(($385)>>2)];
   var $387=$__tmp_i_i_i1_i1;
   var $388 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$386]($387) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 27; break; } else { label = 28; break; }
  case 27: 
   label = 34; break;
  case 28: 
   var $391$0 = ___cxa_find_matching_catch(-1, -1,0); $391$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 29: 
   var $393$0 = ___cxa_find_matching_catch(-1, -1); $393$1 = tempRet0;
   var $394=$393$0;
   $96=$394;
   var $395=$393$1;
   $97=$395;
   $69=$__current_i3;
   var $396=$69;
   $68=$396;
   var $397=$68;
   $66=$397;
   $67=0;
   var $398=$66;
   var $399=(($398)|0);
   $65=$399;
   var $400=$65;
   var $401=$400;
   $64=$401;
   var $402=$64;
   var $403=(($402)|0);
   var $404=HEAP32[(($403)>>2)];
   $__tmp_i_i_i_i2=$404;
   var $405=$67;
   var $406=(($398)|0);
   $63=$406;
   var $407=$63;
   var $408=$407;
   $62=$408;
   var $409=$62;
   var $410=(($409)|0);
   HEAP32[(($410)>>2)]=$405;
   var $411=$__tmp_i_i_i_i2;
   var $412=(($411)|(0))!=0;
   if ($412) { label = 30; break; } else { label = 33; break; }
  case 30: 
   var $414=(($398)|0);
   $61=$414;
   var $415=$61;
   var $416=$415;
   $60=$416;
   var $417=$60;
   var $418=(($417+4)|0);
   var $419=HEAP32[(($418)>>2)];
   var $420=$__tmp_i_i_i_i2;
   var $421 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$419]($420) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 31; break; } else { label = 32; break; }
  case 31: 
   label = 33; break;
  case 32: 
   var $424$0 = ___cxa_find_matching_catch(-1, -1,0); $424$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 33: 
   var $425=$96;
   var $426=$97;
   var $427$0=$425;
   var $427$1=0;
   var $428$0=$427$0;
   var $428$1=$426;
   ___resumeException($428$0)
  case 34: 
   $n=$361;
   var $429=$n;
   if ((($429)|(0))==0) {
    label = 35; break;
   }
   else if ((($429)|(0))==-1) {
    label = 36; break;
   }
   else if ((($429)|(0))==-2) {
    label = 37; break;
   }
   else {
   label = 38; break;
   }
  case 35: 
   var $431=$152;
   var $432=(($431+1)|0);
   $152=$432;
   label = 39; break;
  case 36: 
   var $434=$152;
   var $435=$154;
   HEAP32[(($435)>>2)]=$434;
   $149=2;
   label = 69; break;
  case 37: 
   var $437=$152;
   var $438=$154;
   HEAP32[(($438)>>2)]=$437;
   $149=1;
   label = 69; break;
  case 38: 
   var $440=$n;
   var $441=$152;
   var $442=(($441+$440)|0);
   $152=$442;
   label = 39; break;
  case 39: 
   label = 40; break;
  case 40: 
   var $445=$157;
   var $446=HEAP32[(($445)>>2)];
   var $447=(($446+4)|0);
   HEAP32[(($445)>>2)]=$447;
   label = 23; break;
  case 41: 
   var $449=$152;
   var $450=$154;
   HEAP32[(($450)>>2)]=$449;
   var $451=$154;
   var $452=HEAP32[(($451)>>2)];
   var $453=$153;
   var $454=(($452)|(0))==(($453)|(0));
   var $455=$454 ? 0 : 1;
   $149=$455;
   label = 69; break;
  case 42: 
   var $457=$n;
   var $458=(($457)|(0))==0;
   if ($458) { label = 43; break; } else { label = 44; break; }
  case 43: 
   $149=2;
   label = 69; break;
  case 44: 
   var $461=$n;
   var $462=$157;
   var $463=HEAP32[(($462)>>2)];
   var $464=(($463+($461<<2))|0);
   HEAP32[(($462)>>2)]=$464;
   var $465=$157;
   var $466=HEAP32[(($465)>>2)];
   var $467=$156;
   var $468=(($466)|(0))==(($467)|(0));
   if ($468) { label = 45; break; } else { label = 46; break; }
  case 45: 
   label = 68; break;
  case 46: 
   var $471=$fend;
   var $472=$153;
   var $473=(($471)|(0))!=(($472)|(0));
   if ($473) { label = 47; break; } else { label = 66; break; }
  case 47: 
   var $475=$157;
   var $476=HEAP32[(($475)>>2)];
   var $477=$154;
   var $478=HEAP32[(($477)>>2)];
   var $479=$151;
   var $480=(($158+8)|0);
   var $481=HEAP32[(($480)>>2)];
   $41=$476;
   $42=$478;
   $43=1;
   $44=$479;
   $45=$481;
   var $482=$45;
   var $483=_uselocale($482);
   HEAP32[(($46)>>2)]=284;
   $38=$__current_i7;
   $39=$483;
   $40=$46;
   var $484=$38;
   var $485=$39;
   var $486=$40;
   $35=$484;
   $36=$485;
   $37=$486;
   var $487=$35;
   var $488=(($487)|0);
   var $489=$36;
   var $490=$37;
   $34=$490;
   var $491=$34;
   var $492=HEAP32[(($491)>>2)];
   $31=$488;
   $32=$489;
   $33=$492;
   var $493=$31;
   var $494=$32;
   var $495=$33;
   $28=$493;
   HEAP32[(($29)>>2)]=$494;
   HEAP32[(($30)>>2)]=$495;
   var $496=$28;
   var $497=$496;
   $27=$29;
   var $498=$27;
   var $499=HEAP32[(($498)>>2)];
   $21=$30;
   var $500=$21;
   var $501=HEAP32[(($500)>>2)];
   $24=$497;
   HEAP32[(($25)>>2)]=$499;
   HEAP32[(($26)>>2)]=$501;
   var $502=$24;
   var $503=(($502)|0);
   $23=$25;
   var $504=$23;
   var $505=HEAP32[(($504)>>2)];
   HEAP32[(($503)>>2)]=$505;
   var $506=(($502+4)|0);
   $22=$26;
   var $507=$22;
   var $508=HEAP32[(($507)>>2)];
   HEAP32[(($506)>>2)]=$508;
   var $509=$41;
   var $510=$42;
   var $511=$43;
   var $512=$44;
   var $513 = (function() { try { __THREW__ = 0; return _mbrtowc($509, $510, $511, $512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 48; break; } else { label = 52; break; }
  case 48: 
   $49=1;
   $10=$__current_i7;
   var $515=$10;
   $9=$515;
   var $516=$9;
   $7=$516;
   $8=0;
   var $517=$7;
   var $518=(($517)|0);
   $6=$518;
   var $519=$6;
   var $520=$519;
   $5=$520;
   var $521=$5;
   var $522=(($521)|0);
   var $523=HEAP32[(($522)>>2)];
   $__tmp_i_i_i1_i5=$523;
   var $524=$8;
   var $525=(($517)|0);
   $4=$525;
   var $526=$4;
   var $527=$526;
   $3=$527;
   var $528=$3;
   var $529=(($528)|0);
   HEAP32[(($529)>>2)]=$524;
   var $530=$__tmp_i_i_i1_i5;
   var $531=(($530)|(0))!=0;
   if ($531) { label = 49; break; } else { label = 57; break; }
  case 49: 
   var $533=(($517)|0);
   $2=$533;
   var $534=$2;
   var $535=$534;
   $1=$535;
   var $536=$1;
   var $537=(($536+4)|0);
   var $538=HEAP32[(($537)>>2)];
   var $539=$__tmp_i_i_i1_i5;
   var $540 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$538]($539) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 50; break; } else { label = 51; break; }
  case 50: 
   label = 57; break;
  case 51: 
   var $543$0 = ___cxa_find_matching_catch(-1, -1,0); $543$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 52: 
   var $545$0 = ___cxa_find_matching_catch(-1, -1); $545$1 = tempRet0;
   var $546=$545$0;
   $47=$546;
   var $547=$545$1;
   $48=$547;
   $20=$__current_i7;
   var $548=$20;
   $19=$548;
   var $549=$19;
   $17=$549;
   $18=0;
   var $550=$17;
   var $551=(($550)|0);
   $16=$551;
   var $552=$16;
   var $553=$552;
   $15=$553;
   var $554=$15;
   var $555=(($554)|0);
   var $556=HEAP32[(($555)>>2)];
   $__tmp_i_i_i_i6=$556;
   var $557=$18;
   var $558=(($550)|0);
   $14=$558;
   var $559=$14;
   var $560=$559;
   $13=$560;
   var $561=$13;
   var $562=(($561)|0);
   HEAP32[(($562)>>2)]=$557;
   var $563=$__tmp_i_i_i_i6;
   var $564=(($563)|(0))!=0;
   if ($564) { label = 53; break; } else { label = 56; break; }
  case 53: 
   var $566=(($550)|0);
   $12=$566;
   var $567=$12;
   var $568=$567;
   $11=$568;
   var $569=$11;
   var $570=(($569+4)|0);
   var $571=HEAP32[(($570)>>2)];
   var $572=$__tmp_i_i_i_i6;
   var $573 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$571]($572) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 54; break; } else { label = 55; break; }
  case 54: 
   label = 56; break;
  case 55: 
   var $576$0 = ___cxa_find_matching_catch(-1, -1,0); $576$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 56: 
   var $577=$47;
   var $578=$48;
   var $579$0=$577;
   var $579$1=0;
   var $580$0=$579$0;
   var $580$1=$578;
   ___resumeException($580$0)
  case 57: 
   $n=$513;
   var $581=$n;
   var $582=(($581)|(0))!=0;
   if ($582) { label = 58; break; } else { label = 59; break; }
  case 58: 
   $149=2;
   label = 69; break;
  case 59: 
   var $585=$157;
   var $586=HEAP32[(($585)>>2)];
   var $587=(($586+4)|0);
   HEAP32[(($585)>>2)]=$587;
   var $588=$154;
   var $589=HEAP32[(($588)>>2)];
   var $590=(($589+1)|0);
   HEAP32[(($588)>>2)]=$590;
   var $591=$154;
   var $592=HEAP32[(($591)>>2)];
   $fend=$592;
   label = 60; break;
  case 60: 
   var $594=$fend;
   var $595=$153;
   var $596=(($594)|(0))!=(($595)|(0));
   if ($596) { label = 61; break; } else { label = 65; break; }
  case 61: 
   var $598=$fend;
   var $599=HEAP8[($598)];
   var $600=(($599 << 24) >> 24);
   var $601=(($600)|(0))==0;
   if ($601) { label = 62; break; } else { label = 63; break; }
  case 62: 
   label = 65; break;
  case 63: 
   label = 64; break;
  case 64: 
   var $605=$fend;
   var $606=(($605+1)|0);
   $fend=$606;
   label = 60; break;
  case 65: 
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $610=$154;
   var $611=HEAP32[(($610)>>2)];
   $152=$611;
   var $612=$157;
   var $613=HEAP32[(($612)>>2)];
   $155=$613;
   label = 8; break;
  case 68: 
   var $615=$154;
   var $616=HEAP32[(($615)>>2)];
   var $617=$153;
   var $618=(($616)|(0))==(($617)|(0));
   var $619=$618 ? 0 : 1;
   $149=$619;
   label = 69; break;
  case 69: 
   var $621=$149;
   STACKTOP = __stackBase__;
   return $621;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE16do_always_noconvEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i1_i;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i_i;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25=__stackBase__;
   var $26=(__stackBase__)+(8);
   var $27;
   var $28;
   var $29=(__stackBase__)+(16);
   var $30=(__stackBase__)+(24);
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $__current_i=(__stackBase__)+(32);
   var $45=(__stackBase__)+(40);
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $tmp=(__stackBase__)+(48);
   var $n;
   var $p;
   $50=$this;
   $51=$st;
   $52=$to;
   $53=$to_end;
   $54=$to_nxt;
   var $55=$50;
   var $56=$52;
   var $57=$54;
   HEAP32[(($57)>>2)]=$56;
   var $58=(($tmp)|0);
   var $59=$51;
   var $60=(($55+8)|0);
   var $61=HEAP32[(($60)>>2)];
   $41=$58;
   $42=0;
   $43=$59;
   $44=$61;
   var $62=$44;
   var $63=_uselocale($62);
   HEAP32[(($45)>>2)]=284;
   $38=$__current_i;
   $39=$63;
   $40=$45;
   var $64=$38;
   var $65=$39;
   var $66=$40;
   $35=$64;
   $36=$65;
   $37=$66;
   var $67=$35;
   var $68=(($67)|0);
   var $69=$36;
   var $70=$37;
   $34=$70;
   var $71=$34;
   var $72=HEAP32[(($71)>>2)];
   $31=$68;
   $32=$69;
   $33=$72;
   var $73=$31;
   var $74=$32;
   var $75=$33;
   $28=$73;
   HEAP32[(($29)>>2)]=$74;
   HEAP32[(($30)>>2)]=$75;
   var $76=$28;
   var $77=$76;
   $27=$29;
   var $78=$27;
   var $79=HEAP32[(($78)>>2)];
   $21=$30;
   var $80=$21;
   var $81=HEAP32[(($80)>>2)];
   $24=$77;
   HEAP32[(($25)>>2)]=$79;
   HEAP32[(($26)>>2)]=$81;
   var $82=$24;
   var $83=(($82)|0);
   $23=$25;
   var $84=$23;
   var $85=HEAP32[(($84)>>2)];
   HEAP32[(($83)>>2)]=$85;
   var $86=(($82+4)|0);
   $22=$26;
   var $87=$22;
   var $88=HEAP32[(($87)>>2)];
   HEAP32[(($86)>>2)]=$88;
   var $89=$41;
   var $90=$42;
   var $91=$43;
   var $92 = (function() { try { __THREW__ = 0; return _wcrtomb($89, $90, $91) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 6; break; }
  case 2: 
   $48=1;
   $10=$__current_i;
   var $94=$10;
   $9=$94;
   var $95=$9;
   $7=$95;
   $8=0;
   var $96=$7;
   var $97=(($96)|0);
   $6=$97;
   var $98=$6;
   var $99=$98;
   $5=$99;
   var $100=$5;
   var $101=(($100)|0);
   var $102=HEAP32[(($101)>>2)];
   $__tmp_i_i_i1_i=$102;
   var $103=$8;
   var $104=(($96)|0);
   $4=$104;
   var $105=$4;
   var $106=$105;
   $3=$106;
   var $107=$3;
   var $108=(($107)|0);
   HEAP32[(($108)>>2)]=$103;
   var $109=$__tmp_i_i_i1_i;
   var $110=(($109)|(0))!=0;
   if ($110) { label = 3; break; } else { label = 11; break; }
  case 3: 
   var $112=(($96)|0);
   $2=$112;
   var $113=$2;
   var $114=$113;
   $1=$114;
   var $115=$1;
   var $116=(($115+4)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=$__tmp_i_i_i1_i;
   var $119 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]($118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 11; break;
  case 5: 
   var $122$0 = ___cxa_find_matching_catch(-1, -1,0); $122$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 6: 
   var $124$0 = ___cxa_find_matching_catch(-1, -1); $124$1 = tempRet0;
   var $125=$124$0;
   $46=$125;
   var $126=$124$1;
   $47=$126;
   $20=$__current_i;
   var $127=$20;
   $19=$127;
   var $128=$19;
   $17=$128;
   $18=0;
   var $129=$17;
   var $130=(($129)|0);
   $16=$130;
   var $131=$16;
   var $132=$131;
   $15=$132;
   var $133=$15;
   var $134=(($133)|0);
   var $135=HEAP32[(($134)>>2)];
   $__tmp_i_i_i_i=$135;
   var $136=$18;
   var $137=(($129)|0);
   $14=$137;
   var $138=$14;
   var $139=$138;
   $13=$139;
   var $140=$13;
   var $141=(($140)|0);
   HEAP32[(($141)>>2)]=$136;
   var $142=$__tmp_i_i_i_i;
   var $143=(($142)|(0))!=0;
   if ($143) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $145=(($129)|0);
   $12=$145;
   var $146=$12;
   var $147=$146;
   $11=$147;
   var $148=$11;
   var $149=(($148+4)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=$__tmp_i_i_i_i;
   var $152 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$150]($151) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 9; break; }
  case 8: 
   label = 10; break;
  case 9: 
   var $155$0 = ___cxa_find_matching_catch(-1, -1,0); $155$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 10: 
   var $156=$46;
   var $157=$47;
   var $158$0=$156;
   var $158$1=0;
   var $159$0=$158$0;
   var $159$1=$157;
   ___resumeException($159$0)
  case 11: 
   $n=$92;
   var $160=$n;
   var $161=(($160)|(0))==-1;
   if ($161) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $163=$n;
   var $164=(($163)|(0))==0;
   if ($164) { label = 13; break; } else { label = 14; break; }
  case 13: 
   $49=2;
   label = 21; break;
  case 14: 
   var $167=$n;
   var $168=((($167)-(1))|0);
   $n=$168;
   var $169=$n;
   var $170=$53;
   var $171=$54;
   var $172=HEAP32[(($171)>>2)];
   var $173=$170;
   var $174=$172;
   var $175=((($173)-($174))|0);
   var $176=(($169)>>>(0)) > (($175)>>>(0));
   if ($176) { label = 15; break; } else { label = 16; break; }
  case 15: 
   $49=1;
   label = 21; break;
  case 16: 
   var $179=(($tmp)|0);
   $p=$179;
   label = 17; break;
  case 17: 
   var $181=$n;
   var $182=(($181)|(0))!=0;
   if ($182) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $184=$p;
   var $185=(($184+1)|0);
   $p=$185;
   var $186=HEAP8[($184)];
   var $187=$54;
   var $188=HEAP32[(($187)>>2)];
   var $189=(($188+1)|0);
   HEAP32[(($187)>>2)]=$189;
   HEAP8[($188)]=$186;
   label = 19; break;
  case 19: 
   var $191=$n;
   var $192=((($191)-(1))|0);
   $n=$192;
   label = 17; break;
  case 20: 
   $49=0;
   label = 21; break;
  case 21: 
   var $195=$49;
   STACKTOP = __stackBase__;
   return $195;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE11do_encodingEv($this) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i1_i1;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i_i2;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25=__stackBase__;
   var $26=(__stackBase__)+(8);
   var $27;
   var $28;
   var $29=(__stackBase__)+(16);
   var $30=(__stackBase__)+(24);
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $__current_i3=(__stackBase__)+(32);
   var $42=(__stackBase__)+(40);
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $__tmp_i_i_i1_i;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58;
   var $59;
   var $60;
   var $61;
   var $62;
   var $63;
   var $__tmp_i_i_i_i;
   var $64;
   var $65;
   var $66;
   var $67;
   var $68;
   var $69;
   var $70=(__stackBase__)+(48);
   var $71=(__stackBase__)+(56);
   var $72;
   var $73;
   var $74=(__stackBase__)+(64);
   var $75=(__stackBase__)+(72);
   var $76;
   var $77;
   var $78;
   var $79;
   var $80;
   var $81;
   var $82;
   var $83;
   var $84;
   var $85;
   var $86;
   var $87;
   var $88;
   var $89;
   var $__current_i=(__stackBase__)+(80);
   var $90=(__stackBase__)+(88);
   var $91;
   var $92;
   var $93;
   var $94;
   var $95;
   $95=$this;
   var $96=$95;
   var $97=(($96+8)|0);
   var $98=HEAP32[(($97)>>2)];
   $86=0;
   $87=0;
   $88=1;
   $89=$98;
   var $99=$89;
   var $100 = (function() { try { __THREW__ = 0; return _uselocale($99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 32; break; }
  case 2: 
   HEAP32[(($90)>>2)]=284;
   $83=$__current_i;
   $84=$100;
   $85=$90;
   var $101=$83;
   var $102=$84;
   var $103=$85;
   $80=$101;
   $81=$102;
   $82=$103;
   var $104=$80;
   var $105=(($104)|0);
   var $106=$81;
   var $107=$82;
   $79=$107;
   var $108=$79;
   var $109=HEAP32[(($108)>>2)];
   $76=$105;
   $77=$106;
   $78=$109;
   var $110=$76;
   var $111=$77;
   var $112=$78;
   $73=$110;
   HEAP32[(($74)>>2)]=$111;
   HEAP32[(($75)>>2)]=$112;
   var $113=$73;
   var $114=$113;
   $72=$74;
   var $115=$72;
   var $116=HEAP32[(($115)>>2)];
   $66=$75;
   var $117=$66;
   var $118=HEAP32[(($117)>>2)];
   $69=$114;
   HEAP32[(($70)>>2)]=$116;
   HEAP32[(($71)>>2)]=$118;
   var $119=$69;
   var $120=(($119)|0);
   $68=$70;
   var $121=$68;
   var $122=HEAP32[(($121)>>2)];
   HEAP32[(($120)>>2)]=$122;
   var $123=(($119+4)|0);
   $67=$71;
   var $124=$67;
   var $125=HEAP32[(($124)>>2)];
   HEAP32[(($123)>>2)]=$125;
   var $126=$86;
   var $127=$87;
   var $128=$88;
   var $129 = (function() { try { __THREW__ = 0; return _mbtowc($126, $127, $128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 7; break; }
  case 3: 
   $93=1;
   $55=$__current_i;
   var $131=$55;
   $54=$131;
   var $132=$54;
   $52=$132;
   $53=0;
   var $133=$52;
   var $134=(($133)|0);
   $51=$134;
   var $135=$51;
   var $136=$135;
   $50=$136;
   var $137=$50;
   var $138=(($137)|0);
   var $139=HEAP32[(($138)>>2)];
   $__tmp_i_i_i1_i=$139;
   var $140=$53;
   var $141=(($133)|0);
   $49=$141;
   var $142=$49;
   var $143=$142;
   $48=$143;
   var $144=$48;
   var $145=(($144)|0);
   HEAP32[(($145)>>2)]=$140;
   var $146=$__tmp_i_i_i1_i;
   var $147=(($146)|(0))!=0;
   if ($147) { label = 4; break; } else { label = 12; break; }
  case 4: 
   var $149=(($133)|0);
   $47=$149;
   var $150=$47;
   var $151=$150;
   $46=$151;
   var $152=$46;
   var $153=(($152+4)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=$__tmp_i_i_i1_i;
   var $156 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$154]($155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 12; break;
  case 6: 
   var $159$0 = ___cxa_find_matching_catch(-1, -1,0,0); $159$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 7: 
   var $161$0 = ___cxa_find_matching_catch(-1, -1,0); $161$1 = tempRet0;
   var $162=$161$0;
   $91=$162;
   var $163=$161$1;
   $92=$163;
   $65=$__current_i;
   var $164=$65;
   $64=$164;
   var $165=$64;
   $62=$165;
   $63=0;
   var $166=$62;
   var $167=(($166)|0);
   $61=$167;
   var $168=$61;
   var $169=$168;
   $60=$169;
   var $170=$60;
   var $171=(($170)|0);
   var $172=HEAP32[(($171)>>2)];
   $__tmp_i_i_i_i=$172;
   var $173=$63;
   var $174=(($166)|0);
   $59=$174;
   var $175=$59;
   var $176=$175;
   $58=$176;
   var $177=$58;
   var $178=(($177)|0);
   HEAP32[(($178)>>2)]=$173;
   var $179=$__tmp_i_i_i_i;
   var $180=(($179)|(0))!=0;
   if ($180) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $182=(($166)|0);
   $57=$182;
   var $183=$57;
   var $184=$183;
   $56=$184;
   var $185=$56;
   var $186=(($185+4)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=$__tmp_i_i_i_i;
   var $189 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($188) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 9; break; } else { label = 10; break; }
  case 9: 
   label = 11; break;
  case 10: 
   var $192$0 = ___cxa_find_matching_catch(-1, -1,0,0); $192$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 11: 
   var $193=$91;
   var $194=$92;
   var $195$0=$193;
   var $195$1=0;
   var $196$0=$195$0;
   var $196$1=$194;
   var $eh_lpad_body$1 = $196$1;var $eh_lpad_body$0 = $196$0;label = 34; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $198=(($129)|(0))==0;
   if ($198) { label = 14; break; } else { label = 30; break; }
  case 14: 
   var $200=(($96+8)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($201)|(0))==0;
   if ($202) { label = 28; break; } else { label = 15; break; }
  case 15: 
   var $204=(($96+8)|0);
   var $205=HEAP32[(($204)>>2)];
   $41=$205;
   var $206=$41;
   var $207 = (function() { try { __THREW__ = 0; return _uselocale($206) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 16; break; } else { label = 32; break; }
  case 16: 
   HEAP32[(($42)>>2)]=284;
   $38=$__current_i3;
   $39=$207;
   $40=$42;
   var $208=$38;
   var $209=$39;
   var $210=$40;
   $35=$208;
   $36=$209;
   $37=$210;
   var $211=$35;
   var $212=(($211)|0);
   var $213=$36;
   var $214=$37;
   $34=$214;
   var $215=$34;
   var $216=HEAP32[(($215)>>2)];
   $31=$212;
   $32=$213;
   $33=$216;
   var $217=$31;
   var $218=$32;
   var $219=$33;
   $28=$217;
   HEAP32[(($29)>>2)]=$218;
   HEAP32[(($30)>>2)]=$219;
   var $220=$28;
   var $221=$220;
   $27=$29;
   var $222=$27;
   var $223=HEAP32[(($222)>>2)];
   $21=$30;
   var $224=$21;
   var $225=HEAP32[(($224)>>2)];
   $24=$221;
   HEAP32[(($25)>>2)]=$223;
   HEAP32[(($26)>>2)]=$225;
   var $226=$24;
   var $227=(($226)|0);
   $23=$25;
   var $228=$23;
   var $229=HEAP32[(($228)>>2)];
   HEAP32[(($227)>>2)]=$229;
   var $230=(($226+4)|0);
   $22=$26;
   var $231=$22;
   var $232=HEAP32[(($231)>>2)];
   HEAP32[(($230)>>2)]=$232;
   var $233 = (function() { try { __THREW__ = 0; return ___locale_mb_cur_max() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 17; break; } else { label = 21; break; }
  case 17: 
   $45=1;
   $10=$__current_i3;
   var $235=$10;
   $9=$235;
   var $236=$9;
   $7=$236;
   $8=0;
   var $237=$7;
   var $238=(($237)|0);
   $6=$238;
   var $239=$6;
   var $240=$239;
   $5=$240;
   var $241=$5;
   var $242=(($241)|0);
   var $243=HEAP32[(($242)>>2)];
   $__tmp_i_i_i1_i1=$243;
   var $244=$8;
   var $245=(($237)|0);
   $4=$245;
   var $246=$4;
   var $247=$246;
   $3=$247;
   var $248=$3;
   var $249=(($248)|0);
   HEAP32[(($249)>>2)]=$244;
   var $250=$__tmp_i_i_i1_i1;
   var $251=(($250)|(0))!=0;
   if ($251) { label = 18; break; } else { label = 26; break; }
  case 18: 
   var $253=(($237)|0);
   $2=$253;
   var $254=$2;
   var $255=$254;
   $1=$255;
   var $256=$1;
   var $257=(($256+4)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=$__tmp_i_i_i1_i1;
   var $260 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$258]($259) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 19; break; } else { label = 20; break; }
  case 19: 
   label = 26; break;
  case 20: 
   var $263$0 = ___cxa_find_matching_catch(-1, -1,0,0); $263$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 21: 
   var $265$0 = ___cxa_find_matching_catch(-1, -1,0); $265$1 = tempRet0;
   var $266=$265$0;
   $43=$266;
   var $267=$265$1;
   $44=$267;
   $20=$__current_i3;
   var $268=$20;
   $19=$268;
   var $269=$19;
   $17=$269;
   $18=0;
   var $270=$17;
   var $271=(($270)|0);
   $16=$271;
   var $272=$16;
   var $273=$272;
   $15=$273;
   var $274=$15;
   var $275=(($274)|0);
   var $276=HEAP32[(($275)>>2)];
   $__tmp_i_i_i_i2=$276;
   var $277=$18;
   var $278=(($270)|0);
   $14=$278;
   var $279=$14;
   var $280=$279;
   $13=$280;
   var $281=$13;
   var $282=(($281)|0);
   HEAP32[(($282)>>2)]=$277;
   var $283=$__tmp_i_i_i_i2;
   var $284=(($283)|(0))!=0;
   if ($284) { label = 22; break; } else { label = 25; break; }
  case 22: 
   var $286=(($270)|0);
   $12=$286;
   var $287=$12;
   var $288=$287;
   $11=$288;
   var $289=$11;
   var $290=(($289+4)|0);
   var $291=HEAP32[(($290)>>2)];
   var $292=$__tmp_i_i_i_i2;
   var $293 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$291]($292) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 23; break; } else { label = 24; break; }
  case 23: 
   label = 25; break;
  case 24: 
   var $296$0 = ___cxa_find_matching_catch(-1, -1,0,0); $296$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 25: 
   var $297=$43;
   var $298=$44;
   var $299$0=$297;
   var $299$1=0;
   var $300$0=$299$0;
   var $300$1=$298;
   var $eh_lpad_body7$1 = $300$1;var $eh_lpad_body7$0 = $300$0;label = 33; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $302=(($233)|(0))==1;
   if ($302) { label = 28; break; } else { label = 29; break; }
  case 28: 
   $94=1;
   label = 31; break;
  case 29: 
   $94=0;
   label = 31; break;
  case 30: 
   $94=-1;
   label = 31; break;
  case 31: 
   var $307=$94;
   STACKTOP = __stackBase__;
   return $307;
  case 32: 
   var $309$0 = ___cxa_find_matching_catch(-1, -1,0); $309$1 = tempRet0;
   var $eh_lpad_body7$1 = $309$1;var $eh_lpad_body7$0 = $309$0;label = 33; break;
  case 33: 
   var $eh_lpad_body7$0;
   var $eh_lpad_body7$1;
   var $eh_lpad_body$1 = $eh_lpad_body7$1;var $eh_lpad_body$0 = $eh_lpad_body7$0;label = 34; break;
  case 34: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIDsc10_mbstate_tED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16locale5facetD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $_frm;
 var $_frm_end;
 var $_frm_nxt=__stackBase__;
 var $_to;
 var $_to_end;
 var $_to_nxt=(__stackBase__)+(8);
 var $r;
 $2=$this;
 $3=$0;
 $4=$frm;
 $5=$frm_end;
 $6=$frm_nxt;
 $7=$to;
 $8=$to_end;
 $9=$to_nxt;
 var $10=$2;
 var $11=$4;
 $_frm=$11;
 var $12=$5;
 $_frm_end=$12;
 var $13=$_frm;
 HEAP32[(($_frm_nxt)>>2)]=$13;
 var $14=$7;
 $_to=$14;
 var $15=$8;
 $_to_end=$15;
 var $16=$_to;
 HEAP32[(($_to_nxt)>>2)]=$16;
 var $17=$_frm;
 var $18=$_frm_end;
 var $19=$_to;
 var $20=$_to_end;
 var $21=__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($17, $18, $_frm_nxt, $19, $20, $_to_nxt, 1114111, 0);
 $r=$21;
 var $22=$4;
 var $23=HEAP32[(($_frm_nxt)>>2)];
 var $24=$_frm;
 var $25=$23;
 var $26=$24;
 var $27=((($25)-($26))|0);
 var $28=((((($27)|(0)))/(2))&-1);
 var $29=(($22+($28<<1))|0);
 var $30=$6;
 HEAP32[(($30)>>2)]=$29;
 var $31=$7;
 var $32=HEAP32[(($_to_nxt)>>2)];
 var $33=$_to;
 var $34=$32;
 var $35=$33;
 var $36=((($34)-($35))|0);
 var $37=(($31+$36)|0);
 var $38=$9;
 HEAP32[(($38)>>2)]=$37;
 var $39=$r;
 STACKTOP = __stackBase__;
 return $39;
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE9do_lengthERS1_PKcS5_j($this, $st, $frm, $frm_end, $mx) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i1_i;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i_i;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25=__stackBase__;
   var $26=(__stackBase__)+(8);
   var $27;
   var $28;
   var $29=(__stackBase__)+(16);
   var $30=(__stackBase__)+(24);
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $__current_i=(__stackBase__)+(32);
   var $45=(__stackBase__)+(40);
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $52;
   var $53;
   var $54;
   var $nbytes;
   var $nwchar_t;
   var $n;
   $50=$this;
   $51=$st;
   $52=$frm;
   $53=$frm_end;
   $54=$mx;
   var $55=$50;
   $nbytes=0;
   $nwchar_t=0;
   label = 2; break;
  case 2: 
   var $57=$nwchar_t;
   var $58=$54;
   var $59=(($57)>>>(0)) < (($58)>>>(0));
   if ($59) { label = 3; break; } else { var $65 = 0;label = 4; break; }
  case 3: 
   var $61=$52;
   var $62=$53;
   var $63=(($61)|(0))!=(($62)|(0));
   var $65 = $63;label = 4; break;
  case 4: 
   var $65;
   if ($65) { label = 5; break; } else { label = 21; break; }
  case 5: 
   var $67=$52;
   var $68=$53;
   var $69=$52;
   var $70=$68;
   var $71=$69;
   var $72=((($70)-($71))|0);
   var $73=$51;
   var $74=(($55+8)|0);
   var $75=HEAP32[(($74)>>2)];
   $41=$67;
   $42=$72;
   $43=$73;
   $44=$75;
   var $76=$44;
   var $77=_uselocale($76);
   HEAP32[(($45)>>2)]=284;
   $38=$__current_i;
   $39=$77;
   $40=$45;
   var $78=$38;
   var $79=$39;
   var $80=$40;
   $35=$78;
   $36=$79;
   $37=$80;
   var $81=$35;
   var $82=(($81)|0);
   var $83=$36;
   var $84=$37;
   $34=$84;
   var $85=$34;
   var $86=HEAP32[(($85)>>2)];
   $31=$82;
   $32=$83;
   $33=$86;
   var $87=$31;
   var $88=$32;
   var $89=$33;
   $28=$87;
   HEAP32[(($29)>>2)]=$88;
   HEAP32[(($30)>>2)]=$89;
   var $90=$28;
   var $91=$90;
   $27=$29;
   var $92=$27;
   var $93=HEAP32[(($92)>>2)];
   $21=$30;
   var $94=$21;
   var $95=HEAP32[(($94)>>2)];
   $24=$91;
   HEAP32[(($25)>>2)]=$93;
   HEAP32[(($26)>>2)]=$95;
   var $96=$24;
   var $97=(($96)|0);
   $23=$25;
   var $98=$23;
   var $99=HEAP32[(($98)>>2)];
   HEAP32[(($97)>>2)]=$99;
   var $100=(($96+4)|0);
   $22=$26;
   var $101=$22;
   var $102=HEAP32[(($101)>>2)];
   HEAP32[(($100)>>2)]=$102;
   var $103=$41;
   var $104=$42;
   var $105=$43;
   var $106 = (function() { try { __THREW__ = 0; return _mbrlen($103, $104, $105) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 10; break; }
  case 6: 
   $48=1;
   $10=$__current_i;
   var $108=$10;
   $9=$108;
   var $109=$9;
   $7=$109;
   $8=0;
   var $110=$7;
   var $111=(($110)|0);
   $6=$111;
   var $112=$6;
   var $113=$112;
   $5=$113;
   var $114=$5;
   var $115=(($114)|0);
   var $116=HEAP32[(($115)>>2)];
   $__tmp_i_i_i1_i=$116;
   var $117=$8;
   var $118=(($110)|0);
   $4=$118;
   var $119=$4;
   var $120=$119;
   $3=$120;
   var $121=$3;
   var $122=(($121)|0);
   HEAP32[(($122)>>2)]=$117;
   var $123=$__tmp_i_i_i1_i;
   var $124=(($123)|(0))!=0;
   if ($124) { label = 7; break; } else { label = 15; break; }
  case 7: 
   var $126=(($110)|0);
   $2=$126;
   var $127=$2;
   var $128=$127;
   $1=$128;
   var $129=$1;
   var $130=(($129+4)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=$__tmp_i_i_i1_i;
   var $133 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 9; break; }
  case 8: 
   label = 15; break;
  case 9: 
   var $136$0 = ___cxa_find_matching_catch(-1, -1,0); $136$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 10: 
   var $138$0 = ___cxa_find_matching_catch(-1, -1); $138$1 = tempRet0;
   var $139=$138$0;
   $46=$139;
   var $140=$138$1;
   $47=$140;
   $20=$__current_i;
   var $141=$20;
   $19=$141;
   var $142=$19;
   $17=$142;
   $18=0;
   var $143=$17;
   var $144=(($143)|0);
   $16=$144;
   var $145=$16;
   var $146=$145;
   $15=$146;
   var $147=$15;
   var $148=(($147)|0);
   var $149=HEAP32[(($148)>>2)];
   $__tmp_i_i_i_i=$149;
   var $150=$18;
   var $151=(($143)|0);
   $14=$151;
   var $152=$14;
   var $153=$152;
   $13=$153;
   var $154=$13;
   var $155=(($154)|0);
   HEAP32[(($155)>>2)]=$150;
   var $156=$__tmp_i_i_i_i;
   var $157=(($156)|(0))!=0;
   if ($157) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $159=(($143)|0);
   $12=$159;
   var $160=$12;
   var $161=$160;
   $11=$161;
   var $162=$11;
   var $163=(($162+4)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=$__tmp_i_i_i_i;
   var $166 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$164]($165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 13; break; }
  case 12: 
   label = 14; break;
  case 13: 
   var $169$0 = ___cxa_find_matching_catch(-1, -1,0); $169$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 14: 
   var $170=$46;
   var $171=$47;
   var $172$0=$170;
   var $172$1=0;
   var $173$0=$172$0;
   var $173$1=$171;
   ___resumeException($173$0)
  case 15: 
   $n=$106;
   var $174=$n;
   if ((($174)|(0))==0) {
    label = 16; break;
   }
   else if ((($174)|(0))==-1 | (($174)|(0))==-2) {
    label = 17; break;
   }
   else {
   label = 18; break;
   }
  case 16: 
   var $176=$nbytes;
   var $177=((($176)+(1))|0);
   $nbytes=$177;
   var $178=$52;
   var $179=(($178+1)|0);
   $52=$179;
   label = 19; break;
  case 17: 
   var $181=$nbytes;
   $49=$181;
   label = 22; break;
  case 18: 
   var $183=$n;
   var $184=$nbytes;
   var $185=((($184)+($183))|0);
   $nbytes=$185;
   var $186=$n;
   var $187=$52;
   var $188=(($187+$186)|0);
   $52=$188;
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $191=$nwchar_t;
   var $192=((($191)+(1))|0);
   $nwchar_t=$192;
   label = 2; break;
  case 21: 
   var $194=$nbytes;
   $49=$194;
   label = 22; break;
  case 22: 
   var $196=$49;
   STACKTOP = __stackBase__;
   return $196;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc10_mbstate_tE13do_max_lengthEv($this) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i_i_i1_i;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $__tmp_i_i_i_i;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25=__stackBase__;
   var $26=(__stackBase__)+(8);
   var $27;
   var $28;
   var $29=(__stackBase__)+(16);
   var $30=(__stackBase__)+(24);
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $__current_i=(__stackBase__)+(32);
   var $42=(__stackBase__)+(40);
   var $43;
   var $44;
   var $45;
   var $46;
   $46=$this;
   var $47=$46;
   var $48=(($47+8)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49)|(0))==0;
   if ($50) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $152 = 1;label = 16; break;
  case 3: 
   var $53=(($47+8)|0);
   var $54=HEAP32[(($53)>>2)];
   $41=$54;
   var $55=$41;
   var $56 = (function() { try { __THREW__ = 0; return _uselocale($55) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 17; break; }
  case 4: 
   HEAP32[(($42)>>2)]=284;
   $38=$__current_i;
   $39=$56;
   $40=$42;
   var $57=$38;
   var $58=$39;
   var $59=$40;
   $35=$57;
   $36=$58;
   $37=$59;
   var $60=$35;
   var $61=(($60)|0);
   var $62=$36;
   var $63=$37;
   $34=$63;
   var $64=$34;
   var $65=HEAP32[(($64)>>2)];
   $31=$61;
   $32=$62;
   $33=$65;
   var $66=$31;
   var $67=$32;
   var $68=$33;
   $28=$66;
   HEAP32[(($29)>>2)]=$67;
   HEAP32[(($30)>>2)]=$68;
   var $69=$28;
   var $70=$69;
   $27=$29;
   var $71=$27;
   var $72=HEAP32[(($71)>>2)];
   $21=$30;
   var $73=$21;
   var $74=HEAP32[(($73)>>2)];
   $24=$70;
   HEAP32[(($25)>>2)]=$72;
   HEAP32[(($26)>>2)]=$74;
   var $75=$24;
   var $76=(($75)|0);
   $23=$25;
   var $77=$23;
   var $78=HEAP32[(($77)>>2)];
   HEAP32[(($76)>>2)]=$78;
   var $79=(($75+4)|0);
   $22=$26;
   var $80=$22;
   var $81=HEAP32[(($80)>>2)];
   HEAP32[(($79)>>2)]=$81;
   var $82 = (function() { try { __THREW__ = 0; return ___locale_mb_cur_max() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 9; break; }
  case 5: 
   $45=1;
   $10=$__current_i;
   var $84=$10;
   $9=$84;
   var $85=$9;
   $7=$85;
   $8=0;
   var $86=$7;
   var $87=(($86)|0);
   $6=$87;
   var $88=$6;
   var $89=$88;
   $5=$89;
   var $90=$5;
   var $91=(($90)|0);
   var $92=HEAP32[(($91)>>2)];
   $__tmp_i_i_i1_i=$92;
   var $93=$8;
   var $94=(($86)|0);
   $4=$94;
   var $95=$4;
   var $96=$95;
   $3=$96;
   var $97=$3;
   var $98=(($97)|0);
   HEAP32[(($98)>>2)]=$93;
   var $99=$__tmp_i_i_i1_i;
   var $100=(($99)|(0))!=0;
   if ($100) { label = 6; break; } else { label = 14; break; }
  case 6: 
   var $102=(($86)|0);
   $2=$102;
   var $103=$2;
   var $104=$103;
   $1=$104;
   var $105=$1;
   var $106=(($105+4)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=$__tmp_i_i_i1_i;
   var $109 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 14; break;
  case 8: 
   var $112$0 = ___cxa_find_matching_catch(-1, -1,0,0); $112$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 9: 
   var $114$0 = ___cxa_find_matching_catch(-1, -1,0); $114$1 = tempRet0;
   var $115=$114$0;
   $43=$115;
   var $116=$114$1;
   $44=$116;
   $20=$__current_i;
   var $117=$20;
   $19=$117;
   var $118=$19;
   $17=$118;
   $18=0;
   var $119=$17;
   var $120=(($119)|0);
   $16=$120;
   var $121=$16;
   var $122=$121;
   $15=$122;
   var $123=$15;
   var $124=(($123)|0);
   var $125=HEAP32[(($124)>>2)];
   $__tmp_i_i_i_i=$125;
   var $126=$18;
   var $127=(($119)|0);
   $14=$127;
   var $128=$14;
   var $129=$128;
   $13=$129;
   var $130=$13;
   var $131=(($130)|0);
   HEAP32[(($131)>>2)]=$126;
   var $132=$__tmp_i_i_i_i;
   var $133=(($132)|(0))!=0;
   if ($133) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $135=(($119)|0);
   $12=$135;
   var $136=$12;
   var $137=$136;
   $11=$137;
   var $138=$11;
   var $139=(($138+4)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=$__tmp_i_i_i_i;
   var $142 = (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$140]($141) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 12; break; }
  case 11: 
   label = 13; break;
  case 12: 
   var $145$0 = ___cxa_find_matching_catch(-1, -1,0,0); $145$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 13: 
   var $146=$43;
   var $147=$44;
   var $148$0=$146;
   var $148$1=0;
   var $149$0=$148$0;
   var $149$1=$147;
   var $eh_lpad_body$1 = $149$1;var $eh_lpad_body$0 = $149$0;label = 18; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $152 = $82;label = 16; break;
  case 16: 
   var $152;
   STACKTOP = __stackBase__;
   return $152;
  case 17: 
   var $154$0 = ___cxa_find_matching_catch(-1, -1,0); $154$1 = tempRet0;
   var $eh_lpad_body$1 = $154$1;var $eh_lpad_body$0 = $154$0;label = 18; break;
  case 18: 
   var $eh_lpad_body$0;
   var $eh_lpad_body$1;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $wc1;
   var $wc2;
   var $z;
   $2=$frm;
   $3=$frm_end;
   $4=$frm_nxt;
   $5=$to;
   $6=$to_end;
   $7=$to_nxt;
   $8=$Maxcode;
   $9=$mode;
   var $10=$2;
   var $11=$4;
   HEAP32[(($11)>>2)]=$10;
   var $12=$5;
   var $13=$7;
   HEAP32[(($13)>>2)]=$12;
   var $14=$9;
   var $15=$14 & 2;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $18=$6;
   var $19=$7;
   var $20=HEAP32[(($19)>>2)];
   var $21=$18;
   var $22=$20;
   var $23=((($21)-($22))|0);
   var $24=(($23)|(0)) < 3;
   if ($24) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $1=1;
   label = 43; break;
  case 4: 
   var $27=$7;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+1)|0);
   HEAP32[(($27)>>2)]=$29;
   HEAP8[($28)]=-17;
   var $30=$7;
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+1)|0);
   HEAP32[(($30)>>2)]=$32;
   HEAP8[($31)]=-69;
   var $33=$7;
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34+1)|0);
   HEAP32[(($33)>>2)]=$35;
   HEAP8[($34)]=-65;
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $38=$4;
   var $39=HEAP32[(($38)>>2)];
   var $40=$3;
   var $41=(($39)>>>(0)) < (($40)>>>(0));
   if ($41) { label = 7; break; } else { label = 42; break; }
  case 7: 
   var $43=$4;
   var $44=HEAP32[(($43)>>2)];
   var $45=HEAP16[(($44)>>1)];
   $wc1=$45;
   var $46=$wc1;
   var $47=(($46)&(65535));
   var $48=$8;
   var $49=(($47)>>>(0)) > (($48)>>>(0));
   if ($49) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $1=2;
   label = 43; break;
  case 9: 
   var $52=$wc1;
   var $53=(($52)&(65535));
   var $54=(($53)|(0)) < 128;
   if ($54) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $56=$6;
   var $57=$7;
   var $58=HEAP32[(($57)>>2)];
   var $59=$56;
   var $60=$58;
   var $61=((($59)-($60))|0);
   var $62=(($61)|(0)) < 1;
   if ($62) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $1=1;
   label = 43; break;
  case 12: 
   var $65=$wc1;
   var $66=(($65) & 255);
   var $67=$7;
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68+1)|0);
   HEAP32[(($67)>>2)]=$69;
   HEAP8[($68)]=$66;
   label = 40; break;
  case 13: 
   var $71=$wc1;
   var $72=(($71)&(65535));
   var $73=(($72)|(0)) < 2048;
   if ($73) { label = 14; break; } else { label = 17; break; }
  case 14: 
   var $75=$6;
   var $76=$7;
   var $77=HEAP32[(($76)>>2)];
   var $78=$75;
   var $79=$77;
   var $80=((($78)-($79))|0);
   var $81=(($80)|(0)) < 2;
   if ($81) { label = 15; break; } else { label = 16; break; }
  case 15: 
   $1=1;
   label = 43; break;
  case 16: 
   var $84=$wc1;
   var $85=(($84)&(65535));
   var $86=$85 >> 6;
   var $87=192 | $86;
   var $88=(($87) & 255);
   var $89=$7;
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90+1)|0);
   HEAP32[(($89)>>2)]=$91;
   HEAP8[($90)]=$88;
   var $92=$wc1;
   var $93=(($92)&(65535));
   var $94=$93 & 63;
   var $95=128 | $94;
   var $96=(($95) & 255);
   var $97=$7;
   var $98=HEAP32[(($97)>>2)];
   var $99=(($98+1)|0);
   HEAP32[(($97)>>2)]=$99;
   HEAP8[($98)]=$96;
   label = 39; break;
  case 17: 
   var $101=$wc1;
   var $102=(($101)&(65535));
   var $103=(($102)|(0)) < 55296;
   if ($103) { label = 18; break; } else { label = 21; break; }
  case 18: 
   var $105=$6;
   var $106=$7;
   var $107=HEAP32[(($106)>>2)];
   var $108=$105;
   var $109=$107;
   var $110=((($108)-($109))|0);
   var $111=(($110)|(0)) < 3;
   if ($111) { label = 19; break; } else { label = 20; break; }
  case 19: 
   $1=1;
   label = 43; break;
  case 20: 
   var $114=$wc1;
   var $115=(($114)&(65535));
   var $116=$115 >> 12;
   var $117=224 | $116;
   var $118=(($117) & 255);
   var $119=$7;
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120+1)|0);
   HEAP32[(($119)>>2)]=$121;
   HEAP8[($120)]=$118;
   var $122=$wc1;
   var $123=(($122)&(65535));
   var $124=$123 & 4032;
   var $125=$124 >> 6;
   var $126=128 | $125;
   var $127=(($126) & 255);
   var $128=$7;
   var $129=HEAP32[(($128)>>2)];
   var $130=(($129+1)|0);
   HEAP32[(($128)>>2)]=$130;
   HEAP8[($129)]=$127;
   var $131=$wc1;
   var $132=(($131)&(65535));
   var $133=$132 & 63;
   var $134=128 | $133;
   var $135=(($134) & 255);
   var $136=$7;
   var $137=HEAP32[(($136)>>2)];
   var $138=(($137+1)|0);
   HEAP32[(($136)>>2)]=$138;
   HEAP8[($137)]=$135;
   label = 38; break;
  case 21: 
   var $140=$wc1;
   var $141=(($140)&(65535));
   var $142=(($141)|(0)) < 56320;
   if ($142) { label = 22; break; } else { label = 31; break; }
  case 22: 
   var $144=$3;
   var $145=$4;
   var $146=HEAP32[(($145)>>2)];
   var $147=$144;
   var $148=$146;
   var $149=((($147)-($148))|0);
   var $150=((((($149)|(0)))/(2))&-1);
   var $151=(($150)|(0)) < 2;
   if ($151) { label = 23; break; } else { label = 24; break; }
  case 23: 
   $1=1;
   label = 43; break;
  case 24: 
   var $154=$4;
   var $155=HEAP32[(($154)>>2)];
   var $156=(($155+2)|0);
   var $157=HEAP16[(($156)>>1)];
   $wc2=$157;
   var $158=$wc2;
   var $159=(($158)&(65535));
   var $160=$159 & 64512;
   var $161=(($160)|(0))!=56320;
   if ($161) { label = 25; break; } else { label = 26; break; }
  case 25: 
   $1=2;
   label = 43; break;
  case 26: 
   var $164=$6;
   var $165=$7;
   var $166=HEAP32[(($165)>>2)];
   var $167=$164;
   var $168=$166;
   var $169=((($167)-($168))|0);
   var $170=(($169)|(0)) < 4;
   if ($170) { label = 27; break; } else { label = 28; break; }
  case 27: 
   $1=1;
   label = 43; break;
  case 28: 
   var $173=$wc1;
   var $174=(($173)&(65535));
   var $175=$174 & 960;
   var $176=$175 >>> 6;
   var $177=((($176)+(1))|0);
   var $178=$177 << 16;
   var $179=$wc1;
   var $180=(($179)&(65535));
   var $181=$180 & 63;
   var $182=$181 << 10;
   var $183=((($178)+($182))|0);
   var $184=$wc2;
   var $185=(($184)&(65535));
   var $186=$185 & 1023;
   var $187=((($183)+($186))|0);
   var $188=$8;
   var $189=(($187)>>>(0)) > (($188)>>>(0));
   if ($189) { label = 29; break; } else { label = 30; break; }
  case 29: 
   $1=2;
   label = 43; break;
  case 30: 
   var $192=$4;
   var $193=HEAP32[(($192)>>2)];
   var $194=(($193+2)|0);
   HEAP32[(($192)>>2)]=$194;
   var $195=$wc1;
   var $196=(($195)&(65535));
   var $197=$196 & 960;
   var $198=$197 >> 6;
   var $199=((($198)+(1))|0);
   var $200=(($199) & 255);
   $z=$200;
   var $201=$z;
   var $202=(($201)&(255));
   var $203=$202 >> 2;
   var $204=240 | $203;
   var $205=(($204) & 255);
   var $206=$7;
   var $207=HEAP32[(($206)>>2)];
   var $208=(($207+1)|0);
   HEAP32[(($206)>>2)]=$208;
   HEAP8[($207)]=$205;
   var $209=$z;
   var $210=(($209)&(255));
   var $211=$210 & 3;
   var $212=$211 << 4;
   var $213=128 | $212;
   var $214=$wc1;
   var $215=(($214)&(65535));
   var $216=$215 & 60;
   var $217=$216 >> 2;
   var $218=$213 | $217;
   var $219=(($218) & 255);
   var $220=$7;
   var $221=HEAP32[(($220)>>2)];
   var $222=(($221+1)|0);
   HEAP32[(($220)>>2)]=$222;
   HEAP8[($221)]=$219;
   var $223=$wc1;
   var $224=(($223)&(65535));
   var $225=$224 & 3;
   var $226=$225 << 4;
   var $227=128 | $226;
   var $228=$wc2;
   var $229=(($228)&(65535));
   var $230=$229 & 960;
   var $231=$230 >> 6;
   var $232=$227 | $231;
   var $233=(($232) & 255);
   var $234=$7;
   var $235=HEAP32[(($234)>>2)];
   var $236=(($235+1)|0);
   HEAP32[(($234)>>2)]=$236;
   HEAP8[($235)]=$233;
   var $237=$wc2;
   var $238=(($237)&(65535));
   var $239=$238 & 63;
   var $240=128 | $239;
   var $241=(($240) & 255);
   var $242=$7;
   var $243=HEAP32[(($242)>>2)];
   var $244=(($243+1)|0);
   HEAP32[(($242)>>2)]=$244;
   HEAP8[($243)]=$241;
   label = 37; break;
  case 31: 
   var $246=$wc1;
   var $247=(($246)&(65535));
   var $248=(($247)|(0)) < 57344;
   if ($248) { label = 32; break; } else { label = 33; break; }
  case 32: 
   $1=2;
   label = 43; break;
  case 33: 
   var $251=$6;
   var $252=$7;
   var $253=HEAP32[(($252)>>2)];
   var $254=$251;
   var $255=$253;
   var $256=((($254)-($255))|0);
   var $257=(($256)|(0)) < 3;
   if ($257) { label = 34; break; } else { label = 35; break; }
  case 34: 
   $1=1;
   label = 43; break;
  case 35: 
   var $260=$wc1;
   var $261=(($260)&(65535));
   var $262=$261 >> 12;
   var $263=224 | $262;
   var $264=(($263) & 255);
   var $265=$7;
   var $266=HEAP32[(($265)>>2)];
   var $267=(($266+1)|0);
   HEAP32[(($265)>>2)]=$267;
   HEAP8[($266)]=$264;
   var $268=$wc1;
   var $269=(($268)&(65535));
   var $270=$269 & 4032;
   var $271=$270 >> 6;
   var $272=128 | $271;
   var $273=(($272) & 255);
   var $274=$7;
   var $275=HEAP32[(($274)>>2)];
   var $276=(($275+1)|0);
   HEAP32[(($274)>>2)]=$276;
   HEAP8[($275)]=$273;
   var $277=$wc1;
   var $278=(($277)&(65535));
   var $279=$278 & 63;
   var $280=128 | $279;
   var $281=(($280) & 255);
   var $282=$7;
   var $283=HEAP32[(($282)>>2)];
   var $284=(($283+1)|0);
   HEAP32[(($282)>>2)]=$284;
   HEAP8[($283)]=$281;
   label = 36; break;
  case 36: 
   label = 37; break;
  case 37: 
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   label = 40; break;
  case 40: 
   label = 41; break;
  case 41: 
   var $291=$4;
   var $292=HEAP32[(($291)>>2)];
   var $293=(($292+2)|0);
   HEAP32[(($291)>>2)]=$293;
   label = 6; break;
  case 42: 
   $1=0;
   label = 43; break;
  case 43: 
   var $296=$1;
   return $296;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $_frm;
 var $_frm_end;
 var $_frm_nxt=__stackBase__;
 var $_to;
 var $_to_end;
 var $_to_nxt=(__stackBase__)+(8);
 var $r;
 $2=$this;
 $3=$0;
 $4=$frm;
 $5=$frm_end;
 $6=$frm_nxt;
 $7=$to;
 $8=$to_end;
 $9=$to_nxt;
 var $10=$2;
 var $11=$4;
 $_frm=$11;
 var $12=$5;
 $_frm_end=$12;
 var $13=$_frm;
 HEAP32[(($_frm_nxt)>>2)]=$13;
 var $14=$7;
 $_to=$14;
 var $15=$8;
 $_to_end=$15;
 var $16=$_to;
 HEAP32[(($_to_nxt)>>2)]=$16;
 var $17=$_frm;
 var $18=$_frm_end;
 var $19=$_to;
 var $20=$_to_end;
 var $21=__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($17, $18, $_frm_nxt, $19, $20, $_to_nxt, 1114111, 0);
 $r=$21;
 var $22=$4;
 var $23=HEAP32[(($_frm_nxt)>>2)];
 var $24=$_frm;
 var $25=$23;
 var $26=$24;
 var $27=((($25)-($26))|0);
 var $28=(($22+$27)|0);
 var $29=$6;
 HEAP32[(($29)>>2)]=$28;
 var $30=$7;
 var $31=HEAP32[(($_to_nxt)>>2)];
 var $32=$_to;
 var $33=$31;
 var $34=$32;
 var $35=((($33)-($34))|0);
 var $36=((((($35)|(0)))/(2))&-1);
 var $37=(($30+($36<<1))|0);
 var $38=$9;
 HEAP32[(($38)>>2)]=$37;
 var $39=$r;
 STACKTOP = __stackBase__;
 return $39;
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 var label = 0;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 $3=$this;
 $4=$0;
 $5=$to;
 $6=$1;
 $7=$to_nxt;
 var $8=$3;
 var $9=$5;
 var $10=$7;
 HEAP32[(($10)>>2)]=$9;
 return 3;
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE11do_encodingEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE16do_always_noconvEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $c1;
   var $c2;
   var $t;
   var $c21;
   var $c3;
   var $t2;
   var $c23;
   var $c34;
   var $c4;
   $2=$frm;
   $3=$frm_end;
   $4=$frm_nxt;
   $5=$to;
   $6=$to_end;
   $7=$to_nxt;
   $8=$Maxcode;
   $9=$mode;
   var $10=$2;
   var $11=$4;
   HEAP32[(($11)>>2)]=$10;
   var $12=$5;
   var $13=$7;
   HEAP32[(($13)>>2)]=$12;
   var $14=$9;
   var $15=$14 & 4;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $18=$3;
   var $19=$4;
   var $20=HEAP32[(($19)>>2)];
   var $21=$18;
   var $22=$20;
   var $23=((($21)-($22))|0);
   var $24=(($23)|(0)) >= 3;
   if ($24) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $26=$4;
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255));
   var $31=(($30)|(0))==239;
   if ($31) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $33=$4;
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34+1)|0);
   var $36=HEAP8[($35)];
   var $37=(($36)&(255));
   var $38=(($37)|(0))==187;
   if ($38) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $40=$4;
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41+2)|0);
   var $43=HEAP8[($42)];
   var $44=(($43)&(255));
   var $45=(($44)|(0))==191;
   if ($45) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $47=$4;
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48+3)|0);
   HEAP32[(($47)>>2)]=$49;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $53=$4;
   var $54=HEAP32[(($53)>>2)];
   var $55=$3;
   var $56=(($54)>>>(0)) < (($55)>>>(0));
   if ($56) { label = 10; break; } else { var $63 = 0;label = 11; break; }
  case 10: 
   var $58=$7;
   var $59=HEAP32[(($58)>>2)];
   var $60=$6;
   var $61=(($59)>>>(0)) < (($60)>>>(0));
   var $63 = $61;label = 11; break;
  case 11: 
   var $63;
   if ($63) { label = 12; break; } else { label = 73; break; }
  case 12: 
   var $65=$4;
   var $66=HEAP32[(($65)>>2)];
   var $67=HEAP8[($66)];
   $c1=$67;
   var $68=$c1;
   var $69=(($68)&(255));
   var $70=$8;
   var $71=(($69)>>>(0)) > (($70)>>>(0));
   if ($71) { label = 13; break; } else { label = 14; break; }
  case 13: 
   $1=2;
   label = 74; break;
  case 14: 
   var $74=$c1;
   var $75=(($74)&(255));
   var $76=(($75)|(0)) < 128;
   if ($76) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $78=$c1;
   var $79=(($78)&(255));
   var $80=$7;
   var $81=HEAP32[(($80)>>2)];
   HEAP16[(($81)>>1)]=$79;
   var $82=$4;
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+1)|0);
   HEAP32[(($82)>>2)]=$84;
   label = 71; break;
  case 16: 
   var $86=$c1;
   var $87=(($86)&(255));
   var $88=(($87)|(0)) < 194;
   if ($88) { label = 17; break; } else { label = 18; break; }
  case 17: 
   $1=2;
   label = 74; break;
  case 18: 
   var $91=$c1;
   var $92=(($91)&(255));
   var $93=(($92)|(0)) < 224;
   if ($93) { label = 19; break; } else { label = 26; break; }
  case 19: 
   var $95=$3;
   var $96=$4;
   var $97=HEAP32[(($96)>>2)];
   var $98=$95;
   var $99=$97;
   var $100=((($98)-($99))|0);
   var $101=(($100)|(0)) < 2;
   if ($101) { label = 20; break; } else { label = 21; break; }
  case 20: 
   $1=1;
   label = 74; break;
  case 21: 
   var $104=$4;
   var $105=HEAP32[(($104)>>2)];
   var $106=(($105+1)|0);
   var $107=HEAP8[($106)];
   $c2=$107;
   var $108=$c2;
   var $109=(($108)&(255));
   var $110=$109 & 192;
   var $111=(($110)|(0))!=128;
   if ($111) { label = 22; break; } else { label = 23; break; }
  case 22: 
   $1=2;
   label = 74; break;
  case 23: 
   var $114=$c1;
   var $115=(($114)&(255));
   var $116=$115 & 31;
   var $117=$116 << 6;
   var $118=$c2;
   var $119=(($118)&(255));
   var $120=$119 & 63;
   var $121=$117 | $120;
   var $122=(($121) & 65535);
   $t=$122;
   var $123=$t;
   var $124=(($123)&(65535));
   var $125=$8;
   var $126=(($124)>>>(0)) > (($125)>>>(0));
   if ($126) { label = 24; break; } else { label = 25; break; }
  case 24: 
   $1=2;
   label = 74; break;
  case 25: 
   var $129=$t;
   var $130=$7;
   var $131=HEAP32[(($130)>>2)];
   HEAP16[(($131)>>1)]=$129;
   var $132=$4;
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133+2)|0);
   HEAP32[(($132)>>2)]=$134;
   label = 69; break;
  case 26: 
   var $136=$c1;
   var $137=(($136)&(255));
   var $138=(($137)|(0)) < 240;
   if ($138) { label = 27; break; } else { label = 44; break; }
  case 27: 
   var $140=$3;
   var $141=$4;
   var $142=HEAP32[(($141)>>2)];
   var $143=$140;
   var $144=$142;
   var $145=((($143)-($144))|0);
   var $146=(($145)|(0)) < 3;
   if ($146) { label = 28; break; } else { label = 29; break; }
  case 28: 
   $1=1;
   label = 74; break;
  case 29: 
   var $149=$4;
   var $150=HEAP32[(($149)>>2)];
   var $151=(($150+1)|0);
   var $152=HEAP8[($151)];
   $c21=$152;
   var $153=$4;
   var $154=HEAP32[(($153)>>2)];
   var $155=(($154+2)|0);
   var $156=HEAP8[($155)];
   $c3=$156;
   var $157=$c1;
   var $158=(($157)&(255));
   if ((($158)|(0))==224) {
    label = 30; break;
   }
   else if ((($158)|(0))==237) {
    label = 33; break;
   }
   else {
   label = 36; break;
   }
  case 30: 
   var $160=$c21;
   var $161=(($160)&(255));
   var $162=$161 & 224;
   var $163=(($162)|(0))!=160;
   if ($163) { label = 31; break; } else { label = 32; break; }
  case 31: 
   $1=2;
   label = 74; break;
  case 32: 
   label = 39; break;
  case 33: 
   var $167=$c21;
   var $168=(($167)&(255));
   var $169=$168 & 224;
   var $170=(($169)|(0))!=128;
   if ($170) { label = 34; break; } else { label = 35; break; }
  case 34: 
   $1=2;
   label = 74; break;
  case 35: 
   label = 39; break;
  case 36: 
   var $174=$c21;
   var $175=(($174)&(255));
   var $176=$175 & 192;
   var $177=(($176)|(0))!=128;
   if ($177) { label = 37; break; } else { label = 38; break; }
  case 37: 
   $1=2;
   label = 74; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $181=$c3;
   var $182=(($181)&(255));
   var $183=$182 & 192;
   var $184=(($183)|(0))!=128;
   if ($184) { label = 40; break; } else { label = 41; break; }
  case 40: 
   $1=2;
   label = 74; break;
  case 41: 
   var $187=$c1;
   var $188=(($187)&(255));
   var $189=$188 & 15;
   var $190=$189 << 12;
   var $191=$c21;
   var $192=(($191)&(255));
   var $193=$192 & 63;
   var $194=$193 << 6;
   var $195=$190 | $194;
   var $196=$c3;
   var $197=(($196)&(255));
   var $198=$197 & 63;
   var $199=$195 | $198;
   var $200=(($199) & 65535);
   $t2=$200;
   var $201=$t2;
   var $202=(($201)&(65535));
   var $203=$8;
   var $204=(($202)>>>(0)) > (($203)>>>(0));
   if ($204) { label = 42; break; } else { label = 43; break; }
  case 42: 
   $1=2;
   label = 74; break;
  case 43: 
   var $207=$t2;
   var $208=$7;
   var $209=HEAP32[(($208)>>2)];
   HEAP16[(($209)>>1)]=$207;
   var $210=$4;
   var $211=HEAP32[(($210)>>2)];
   var $212=(($211+3)|0);
   HEAP32[(($210)>>2)]=$212;
   label = 68; break;
  case 44: 
   var $214=$c1;
   var $215=(($214)&(255));
   var $216=(($215)|(0)) < 245;
   if ($216) { label = 45; break; } else { label = 66; break; }
  case 45: 
   var $218=$3;
   var $219=$4;
   var $220=HEAP32[(($219)>>2)];
   var $221=$218;
   var $222=$220;
   var $223=((($221)-($222))|0);
   var $224=(($223)|(0)) < 4;
   if ($224) { label = 46; break; } else { label = 47; break; }
  case 46: 
   $1=1;
   label = 74; break;
  case 47: 
   var $227=$4;
   var $228=HEAP32[(($227)>>2)];
   var $229=(($228+1)|0);
   var $230=HEAP8[($229)];
   $c23=$230;
   var $231=$4;
   var $232=HEAP32[(($231)>>2)];
   var $233=(($232+2)|0);
   var $234=HEAP8[($233)];
   $c34=$234;
   var $235=$4;
   var $236=HEAP32[(($235)>>2)];
   var $237=(($236+3)|0);
   var $238=HEAP8[($237)];
   $c4=$238;
   var $239=$c1;
   var $240=(($239)&(255));
   if ((($240)|(0))==240) {
    label = 48; break;
   }
   else if ((($240)|(0))==244) {
    label = 52; break;
   }
   else {
   label = 55; break;
   }
  case 48: 
   var $242=$c23;
   var $243=(($242)&(255));
   var $244=144 <= (($243)|(0));
   if ($244) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $246=$c23;
   var $247=(($246)&(255));
   var $248=(($247)|(0)) <= 191;
   if ($248) { label = 51; break; } else { label = 50; break; }
  case 50: 
   $1=2;
   label = 74; break;
  case 51: 
   label = 58; break;
  case 52: 
   var $252=$c23;
   var $253=(($252)&(255));
   var $254=$253 & 240;
   var $255=(($254)|(0))!=128;
   if ($255) { label = 53; break; } else { label = 54; break; }
  case 53: 
   $1=2;
   label = 74; break;
  case 54: 
   label = 58; break;
  case 55: 
   var $259=$c23;
   var $260=(($259)&(255));
   var $261=$260 & 192;
   var $262=(($261)|(0))!=128;
   if ($262) { label = 56; break; } else { label = 57; break; }
  case 56: 
   $1=2;
   label = 74; break;
  case 57: 
   label = 58; break;
  case 58: 
   var $266=$c34;
   var $267=(($266)&(255));
   var $268=$267 & 192;
   var $269=(($268)|(0))!=128;
   if ($269) { label = 60; break; } else { label = 59; break; }
  case 59: 
   var $271=$c4;
   var $272=(($271)&(255));
   var $273=$272 & 192;
   var $274=(($273)|(0))!=128;
   if ($274) { label = 60; break; } else { label = 61; break; }
  case 60: 
   $1=2;
   label = 74; break;
  case 61: 
   var $277=$6;
   var $278=$7;
   var $279=HEAP32[(($278)>>2)];
   var $280=$277;
   var $281=$279;
   var $282=((($280)-($281))|0);
   var $283=((((($282)|(0)))/(2))&-1);
   var $284=(($283)|(0)) < 2;
   if ($284) { label = 62; break; } else { label = 63; break; }
  case 62: 
   $1=1;
   label = 74; break;
  case 63: 
   var $287=$c1;
   var $288=(($287)&(255));
   var $289=$288 & 7;
   var $290=$289 << 18;
   var $291=$c23;
   var $292=(($291)&(255));
   var $293=$292 & 63;
   var $294=$293 << 12;
   var $295=((($290)+($294))|0);
   var $296=$c34;
   var $297=(($296)&(255));
   var $298=$297 & 63;
   var $299=$298 << 6;
   var $300=((($295)+($299))|0);
   var $301=$c4;
   var $302=(($301)&(255));
   var $303=$302 & 63;
   var $304=((($300)+($303))|0);
   var $305=$8;
   var $306=(($304)>>>(0)) > (($305)>>>(0));
   if ($306) { label = 64; break; } else { label = 65; break; }
  case 64: 
   $1=2;
   label = 74; break;
  case 65: 
   var $309=$c1;
   var $310=(($309)&(255));
   var $311=$310 & 7;
   var $312=$311 << 2;
   var $313=$c23;
   var $314=(($313)&(255));
   var $315=$314 & 48;
   var $316=$315 >> 4;
   var $317=$312 | $316;
   var $318=((($317)-(1))|0);
   var $319=$318 << 6;
   var $320=55296 | $319;
   var $321=$c23;
   var $322=(($321)&(255));
   var $323=$322 & 15;
   var $324=$323 << 2;
   var $325=$320 | $324;
   var $326=$c34;
   var $327=(($326)&(255));
   var $328=$327 & 48;
   var $329=$328 >> 4;
   var $330=$325 | $329;
   var $331=(($330) & 65535);
   var $332=$7;
   var $333=HEAP32[(($332)>>2)];
   HEAP16[(($333)>>1)]=$331;
   var $334=$c34;
   var $335=(($334)&(255));
   var $336=$335 & 15;
   var $337=$336 << 6;
   var $338=56320 | $337;
   var $339=$c4;
   var $340=(($339)&(255));
   var $341=$340 & 63;
   var $342=$338 | $341;
   var $343=(($342) & 65535);
   var $344=$7;
   var $345=HEAP32[(($344)>>2)];
   var $346=(($345+2)|0);
   HEAP32[(($344)>>2)]=$346;
   HEAP16[(($346)>>1)]=$343;
   var $347=$4;
   var $348=HEAP32[(($347)>>2)];
   var $349=(($348+4)|0);
   HEAP32[(($347)>>2)]=$349;
   label = 67; break;
  case 66: 
   $1=2;
   label = 74; break;
  case 67: 
   label = 68; break;
  case 68: 
   label = 69; break;
  case 69: 
   label = 70; break;
  case 70: 
   label = 71; break;
  case 71: 
   label = 72; break;
  case 72: 
   var $357=$7;
   var $358=HEAP32[(($357)>>2)];
   var $359=(($358+2)|0);
   HEAP32[(($357)>>2)]=$359;
   label = 9; break;
  case 73: 
   var $361=$4;
   var $362=HEAP32[(($361)>>2)];
   var $363=$3;
   var $364=(($362)>>>(0)) < (($363)>>>(0));
   var $365=$364 ? 1 : 0;
   $1=$365;
   label = 74; break;
  case 74: 
   var $367=$1;
   return $367;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 var label = 0;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $_frm;
 var $_frm_end;
 $2=$this;
 $3=$0;
 $4=$frm;
 $5=$frm_end;
 $6=$mx;
 var $7=$2;
 var $8=$4;
 $_frm=$8;
 var $9=$5;
 $_frm_end=$9;
 var $10=$_frm;
 var $11=$_frm_end;
 var $12=$6;
 var $13=__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($10, $11, $12, 1114111, 0);
 return $13;
}
function __ZNKSt3__17codecvtIDsc10_mbstate_tE13do_max_lengthEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 4;
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $frm_nxt;
   var $nchar16_t;
   var $c1;
   var $t;
   var $c2;
   var $c3;
   var $c21;
   var $c32;
   var $c4;
   $2=$frm;
   $3=$frm_end;
   $4=$mx;
   $5=$Maxcode;
   $6=$mode;
   var $7=$2;
   $frm_nxt=$7;
   var $8=$6;
   var $9=$8 & 4;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $12=$3;
   var $13=$frm_nxt;
   var $14=$12;
   var $15=$13;
   var $16=((($14)-($15))|0);
   var $17=(($16)|(0)) >= 3;
   if ($17) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $19=$frm_nxt;
   var $20=(($19)|0);
   var $21=HEAP8[($20)];
   var $22=(($21)&(255));
   var $23=(($22)|(0))==239;
   if ($23) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $25=$frm_nxt;
   var $26=(($25+1)|0);
   var $27=HEAP8[($26)];
   var $28=(($27)&(255));
   var $29=(($28)|(0))==187;
   if ($29) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $31=$frm_nxt;
   var $32=(($31+2)|0);
   var $33=HEAP8[($32)];
   var $34=(($33)&(255));
   var $35=(($34)|(0))==191;
   if ($35) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $37=$frm_nxt;
   var $38=(($37+3)|0);
   $frm_nxt=$38;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   $nchar16_t=0;
   label = 9; break;
  case 9: 
   var $42=$frm_nxt;
   var $43=$3;
   var $44=(($42)>>>(0)) < (($43)>>>(0));
   if ($44) { label = 10; break; } else { var $50 = 0;label = 11; break; }
  case 10: 
   var $46=$nchar16_t;
   var $47=$4;
   var $48=(($46)>>>(0)) < (($47)>>>(0));
   var $50 = $48;label = 11; break;
  case 11: 
   var $50;
   if ($50) { label = 12; break; } else { label = 71; break; }
  case 12: 
   var $52=$frm_nxt;
   var $53=HEAP8[($52)];
   $c1=$53;
   var $54=$c1;
   var $55=(($54)&(255));
   var $56=$5;
   var $57=(($55)>>>(0)) > (($56)>>>(0));
   if ($57) { label = 13; break; } else { label = 14; break; }
  case 13: 
   label = 71; break;
  case 14: 
   var $60=$c1;
   var $61=(($60)&(255));
   var $62=(($61)|(0)) < 128;
   if ($62) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $64=$frm_nxt;
   var $65=(($64+1)|0);
   $frm_nxt=$65;
   label = 69; break;
  case 16: 
   var $67=$c1;
   var $68=(($67)&(255));
   var $69=(($68)|(0)) < 194;
   if ($69) { label = 17; break; } else { label = 18; break; }
  case 17: 
   label = 71; break;
  case 18: 
   var $72=$c1;
   var $73=(($72)&(255));
   var $74=(($73)|(0)) < 224;
   if ($74) { label = 19; break; } else { label = 25; break; }
  case 19: 
   var $76=$3;
   var $77=$frm_nxt;
   var $78=$76;
   var $79=$77;
   var $80=((($78)-($79))|0);
   var $81=(($80)|(0)) < 2;
   if ($81) { label = 21; break; } else { label = 20; break; }
  case 20: 
   var $83=$frm_nxt;
   var $84=(($83+1)|0);
   var $85=HEAP8[($84)];
   var $86=(($85)&(255));
   var $87=$86 & 192;
   var $88=(($87)|(0))!=128;
   if ($88) { label = 21; break; } else { label = 22; break; }
  case 21: 
   label = 71; break;
  case 22: 
   var $91=$c1;
   var $92=(($91)&(255));
   var $93=$92 & 31;
   var $94=$93 << 6;
   var $95=$frm_nxt;
   var $96=(($95+1)|0);
   var $97=HEAP8[($96)];
   var $98=(($97)&(255));
   var $99=$98 & 63;
   var $100=$94 | $99;
   var $101=(($100) & 65535);
   $t=$101;
   var $102=$t;
   var $103=(($102)&(65535));
   var $104=$5;
   var $105=(($103)>>>(0)) > (($104)>>>(0));
   if ($105) { label = 23; break; } else { label = 24; break; }
  case 23: 
   label = 71; break;
  case 24: 
   var $108=$frm_nxt;
   var $109=(($108+2)|0);
   $frm_nxt=$109;
   label = 67; break;
  case 25: 
   var $111=$c1;
   var $112=(($111)&(255));
   var $113=(($112)|(0)) < 240;
   if ($113) { label = 26; break; } else { label = 43; break; }
  case 26: 
   var $115=$3;
   var $116=$frm_nxt;
   var $117=$115;
   var $118=$116;
   var $119=((($117)-($118))|0);
   var $120=(($119)|(0)) < 3;
   if ($120) { label = 27; break; } else { label = 28; break; }
  case 27: 
   label = 71; break;
  case 28: 
   var $123=$frm_nxt;
   var $124=(($123+1)|0);
   var $125=HEAP8[($124)];
   $c2=$125;
   var $126=$frm_nxt;
   var $127=(($126+2)|0);
   var $128=HEAP8[($127)];
   $c3=$128;
   var $129=$c1;
   var $130=(($129)&(255));
   if ((($130)|(0))==224) {
    label = 29; break;
   }
   else if ((($130)|(0))==237) {
    label = 32; break;
   }
   else {
   label = 35; break;
   }
  case 29: 
   var $132=$c2;
   var $133=(($132)&(255));
   var $134=$133 & 224;
   var $135=(($134)|(0))!=160;
   if ($135) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $137=$frm_nxt;
   var $138=$2;
   var $139=$137;
   var $140=$138;
   var $141=((($139)-($140))|0);
   $1=$141;
   label = 72; break;
  case 31: 
   label = 38; break;
  case 32: 
   var $144=$c2;
   var $145=(($144)&(255));
   var $146=$145 & 224;
   var $147=(($146)|(0))!=128;
   if ($147) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $149=$frm_nxt;
   var $150=$2;
   var $151=$149;
   var $152=$150;
   var $153=((($151)-($152))|0);
   $1=$153;
   label = 72; break;
  case 34: 
   label = 38; break;
  case 35: 
   var $156=$c2;
   var $157=(($156)&(255));
   var $158=$157 & 192;
   var $159=(($158)|(0))!=128;
   if ($159) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $161=$frm_nxt;
   var $162=$2;
   var $163=$161;
   var $164=$162;
   var $165=((($163)-($164))|0);
   $1=$165;
   label = 72; break;
  case 37: 
   label = 38; break;
  case 38: 
   var $168=$c3;
   var $169=(($168)&(255));
   var $170=$169 & 192;
   var $171=(($170)|(0))!=128;
   if ($171) { label = 39; break; } else { label = 40; break; }
  case 39: 
   label = 71; break;
  case 40: 
   var $174=$c1;
   var $175=(($174)&(255));
   var $176=$175 & 15;
   var $177=$176 << 12;
   var $178=$c2;
   var $179=(($178)&(255));
   var $180=$179 & 63;
   var $181=$180 << 6;
   var $182=$177 | $181;
   var $183=$c3;
   var $184=(($183)&(255));
   var $185=$184 & 63;
   var $186=$182 | $185;
   var $187=$5;
   var $188=(($186)>>>(0)) > (($187)>>>(0));
   if ($188) { label = 41; break; } else { label = 42; break; }
  case 41: 
   label = 71; break;
  case 42: 
   var $191=$frm_nxt;
   var $192=(($191+3)|0);
   $frm_nxt=$192;
   label = 66; break;
  case 43: 
   var $194=$c1;
   var $195=(($194)&(255));
   var $196=(($195)|(0)) < 245;
   if ($196) { label = 44; break; } else { label = 64; break; }
  case 44: 
   var $198=$3;
   var $199=$frm_nxt;
   var $200=$198;
   var $201=$199;
   var $202=((($200)-($201))|0);
   var $203=(($202)|(0)) < 4;
   if ($203) { label = 46; break; } else { label = 45; break; }
  case 45: 
   var $205=$4;
   var $206=$nchar16_t;
   var $207=((($205)-($206))|0);
   var $208=(($207)>>>(0)) < 2;
   if ($208) { label = 46; break; } else { label = 47; break; }
  case 46: 
   label = 71; break;
  case 47: 
   var $211=$frm_nxt;
   var $212=(($211+1)|0);
   var $213=HEAP8[($212)];
   $c21=$213;
   var $214=$frm_nxt;
   var $215=(($214+2)|0);
   var $216=HEAP8[($215)];
   $c32=$216;
   var $217=$frm_nxt;
   var $218=(($217+3)|0);
   var $219=HEAP8[($218)];
   $c4=$219;
   var $220=$c1;
   var $221=(($220)&(255));
   if ((($221)|(0))==240) {
    label = 48; break;
   }
   else if ((($221)|(0))==244) {
    label = 52; break;
   }
   else {
   label = 55; break;
   }
  case 48: 
   var $223=$c21;
   var $224=(($223)&(255));
   var $225=144 <= (($224)|(0));
   if ($225) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $227=$c21;
   var $228=(($227)&(255));
   var $229=(($228)|(0)) <= 191;
   if ($229) { label = 51; break; } else { label = 50; break; }
  case 50: 
   var $231=$frm_nxt;
   var $232=$2;
   var $233=$231;
   var $234=$232;
   var $235=((($233)-($234))|0);
   $1=$235;
   label = 72; break;
  case 51: 
   label = 58; break;
  case 52: 
   var $238=$c21;
   var $239=(($238)&(255));
   var $240=$239 & 240;
   var $241=(($240)|(0))!=128;
   if ($241) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $243=$frm_nxt;
   var $244=$2;
   var $245=$243;
   var $246=$244;
   var $247=((($245)-($246))|0);
   $1=$247;
   label = 72; break;
  case 54: 
   label = 58; break;
  case 55: 
   var $250=$c21;
   var $251=(($250)&(255));
   var $252=$251 & 192;
   var $253=(($252)|(0))!=128;
   if ($253) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $255=$frm_nxt;
   var $256=$2;
   var $257=$255;
   var $258=$256;
   var $259=((($257)-($258))|0);
   $1=$259;
   label = 72; break;
  case 57: 
   label = 58; break;
  case 58: 
   var $262=$c32;
   var $263=(($262)&(255));
   var $264=$263 & 192;
   var $265=(($264)|(0))!=128;
   if ($265) { label = 60; break; } else { label = 59; break; }
  case 59: 
   var $267=$c4;
   var $268=(($267)&(255));
   var $269=$268 & 192;
   var $270=(($269)|(0))!=128;
   if ($270) { label = 60; break; } else { label = 61; break; }
  case 60: 
   label = 71; break;
  case 61: 
   var $273=$c1;
   var $274=(($273)&(255));
   var $275=$274 & 7;
   var $276=$275 << 18;
   var $277=$c21;
   var $278=(($277)&(255));
   var $279=$278 & 63;
   var $280=$279 << 12;
   var $281=((($276)+($280))|0);
   var $282=$c32;
   var $283=(($282)&(255));
   var $284=$283 & 63;
   var $285=$284 << 6;
   var $286=((($281)+($285))|0);
   var $287=$c4;
   var $288=(($287)&(255));
   var $289=$288 & 63;
   var $290=((($286)+($289))|0);
   var $291=$5;
   var $292=(($290)>>>(0)) > (($291)>>>(0));
   if ($292) { label = 62; break; } else { label = 63; break; }
  case 62: 
   label = 71; break;
  case 63: 
   var $295=$nchar16_t;
   var $296=((($295)+(1))|0);
   $nchar16_t=$296;
   var $297=$frm_nxt;
   var $298=(($297+4)|0);
   $frm_nxt=$298;
   label = 65; break;
  case 64: 
   label = 71; break;
  case 65: 
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   label = 68; break;
  case 68: 
   label = 69; break;
  case 69: 
   label = 70; break;
  case 70: 
   var $306=$nchar16_t;
   var $307=((($306)+(1))|0);
   $nchar16_t=$307;
   label = 9; break;
  case 71: 
   var $309=$frm_nxt;
   var $310=$2;
   var $311=$309;
   var $312=$310;
   var $313=((($311)-($312))|0);
   $1=$313;
   label = 72; break;
  case 72: 
   var $315=$1;
   return $315;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $wc;
   $2=$frm;
   $3=$frm_end;
   $4=$frm_nxt;
   $5=$to;
   $6=$to_end;
   $7=$to_nxt;
   $8=$Maxcode;
   $9=$mode;
   var $10=$2;
   var $11=$4;
   HEAP32[(($11)>>2)]=$10;
   var $12=$5;
   var $13=$7;
   HEAP32[(($13)>>2)]=$12;
   var $14=$9;
   var $15=$14 & 2;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $18=$6;
   var $19=$7;
   var $20=HEAP32[(($19)>>2)];
   var $21=$18;
   var $22=$20;
   var $23=((($21)-($22))|0);
   var $24=(($23)|(0)) < 3;
   if ($24) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $1=1;
   label = 30; break;
  case 4: 
   var $27=$7;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+1)|0);
   HEAP32[(($27)>>2)]=$29;
   HEAP8[($28)]=-17;
   var $30=$7;
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+1)|0);
   HEAP32[(($30)>>2)]=$32;
   HEAP8[($31)]=-69;
   var $33=$7;
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34+1)|0);
   HEAP32[(($33)>>2)]=$35;
   HEAP8[($34)]=-65;
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $38=$4;
   var $39=HEAP32[(($38)>>2)];
   var $40=$3;
   var $41=(($39)>>>(0)) < (($40)>>>(0));
   if ($41) { label = 7; break; } else { label = 29; break; }
  case 7: 
   var $43=$4;
   var $44=HEAP32[(($43)>>2)];
   var $45=HEAP32[(($44)>>2)];
   $wc=$45;
   var $46=$wc;
   var $47=$46 & -2048;
   var $48=(($47)|(0))==55296;
   if ($48) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $50=$wc;
   var $51=$8;
   var $52=(($50)>>>(0)) > (($51)>>>(0));
   if ($52) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $1=2;
   label = 30; break;
  case 10: 
   var $55=$wc;
   var $56=(($55)>>>(0)) < 128;
   if ($56) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $58=$6;
   var $59=$7;
   var $60=HEAP32[(($59)>>2)];
   var $61=$58;
   var $62=$60;
   var $63=((($61)-($62))|0);
   var $64=(($63)|(0)) < 1;
   if ($64) { label = 12; break; } else { label = 13; break; }
  case 12: 
   $1=1;
   label = 30; break;
  case 13: 
   var $67=$wc;
   var $68=(($67) & 255);
   var $69=$7;
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70+1)|0);
   HEAP32[(($69)>>2)]=$71;
   HEAP8[($70)]=$68;
   label = 27; break;
  case 14: 
   var $73=$wc;
   var $74=(($73)>>>(0)) < 2048;
   if ($74) { label = 15; break; } else { label = 18; break; }
  case 15: 
   var $76=$6;
   var $77=$7;
   var $78=HEAP32[(($77)>>2)];
   var $79=$76;
   var $80=$78;
   var $81=((($79)-($80))|0);
   var $82=(($81)|(0)) < 2;
   if ($82) { label = 16; break; } else { label = 17; break; }
  case 16: 
   $1=1;
   label = 30; break;
  case 17: 
   var $85=$wc;
   var $86=$85 >>> 6;
   var $87=192 | $86;
   var $88=(($87) & 255);
   var $89=$7;
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90+1)|0);
   HEAP32[(($89)>>2)]=$91;
   HEAP8[($90)]=$88;
   var $92=$wc;
   var $93=$92 & 63;
   var $94=128 | $93;
   var $95=(($94) & 255);
   var $96=$7;
   var $97=HEAP32[(($96)>>2)];
   var $98=(($97+1)|0);
   HEAP32[(($96)>>2)]=$98;
   HEAP8[($97)]=$95;
   label = 26; break;
  case 18: 
   var $100=$wc;
   var $101=(($100)>>>(0)) < 65536;
   if ($101) { label = 19; break; } else { label = 22; break; }
  case 19: 
   var $103=$6;
   var $104=$7;
   var $105=HEAP32[(($104)>>2)];
   var $106=$103;
   var $107=$105;
   var $108=((($106)-($107))|0);
   var $109=(($108)|(0)) < 3;
   if ($109) { label = 20; break; } else { label = 21; break; }
  case 20: 
   $1=1;
   label = 30; break;
  case 21: 
   var $112=$wc;
   var $113=$112 >>> 12;
   var $114=224 | $113;
   var $115=(($114) & 255);
   var $116=$7;
   var $117=HEAP32[(($116)>>2)];
   var $118=(($117+1)|0);
   HEAP32[(($116)>>2)]=$118;
   HEAP8[($117)]=$115;
   var $119=$wc;
   var $120=$119 & 4032;
   var $121=$120 >>> 6;
   var $122=128 | $121;
   var $123=(($122) & 255);
   var $124=$7;
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125+1)|0);
   HEAP32[(($124)>>2)]=$126;
   HEAP8[($125)]=$123;
   var $127=$wc;
   var $128=$127 & 63;
   var $129=128 | $128;
   var $130=(($129) & 255);
   var $131=$7;
   var $132=HEAP32[(($131)>>2)];
   var $133=(($132+1)|0);
   HEAP32[(($131)>>2)]=$133;
   HEAP8[($132)]=$130;
   label = 25; break;
  case 22: 
   var $135=$6;
   var $136=$7;
   var $137=HEAP32[(($136)>>2)];
   var $138=$135;
   var $139=$137;
   var $140=((($138)-($139))|0);
   var $141=(($140)|(0)) < 4;
   if ($141) { label = 23; break; } else { label = 24; break; }
  case 23: 
   $1=1;
   label = 30; break;
  case 24: 
   var $144=$wc;
   var $145=$144 >>> 18;
   var $146=240 | $145;
   var $147=(($146) & 255);
   var $148=$7;
   var $149=HEAP32[(($148)>>2)];
   var $150=(($149+1)|0);
   HEAP32[(($148)>>2)]=$150;
   HEAP8[($149)]=$147;
   var $151=$wc;
   var $152=$151 & 258048;
   var $153=$152 >>> 12;
   var $154=128 | $153;
   var $155=(($154) & 255);
   var $156=$7;
   var $157=HEAP32[(($156)>>2)];
   var $158=(($157+1)|0);
   HEAP32[(($156)>>2)]=$158;
   HEAP8[($157)]=$155;
   var $159=$wc;
   var $160=$159 & 4032;
   var $161=$160 >>> 6;
   var $162=128 | $161;
   var $163=(($162) & 255);
   var $164=$7;
   var $165=HEAP32[(($164)>>2)];
   var $166=(($165+1)|0);
   HEAP32[(($164)>>2)]=$166;
   HEAP8[($165)]=$163;
   var $167=$wc;
   var $168=$167 & 63;
   var $169=128 | $168;
   var $170=(($169) & 255);
   var $171=$7;
   var $172=HEAP32[(($171)>>2)];
   var $173=(($172+1)|0);
   HEAP32[(($171)>>2)]=$173;
   HEAP8[($172)]=$170;
   label = 25; break;
  case 25: 
   label = 26; break;
  case 26: 
   label = 27; break;
  case 27: 
   label = 28; break;
  case 28: 
   var $178=$4;
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179+4)|0);
   HEAP32[(($178)>>2)]=$180;
   label = 6; break;
  case 29: 
   $1=0;
   label = 30; break;
  case 30: 
   var $183=$1;
   return $183;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIDic10_mbstate_tED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16locale5facetD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $_frm;
 var $_frm_end;
 var $_frm_nxt=__stackBase__;
 var $_to;
 var $_to_end;
 var $_to_nxt=(__stackBase__)+(8);
 var $r;
 $2=$this;
 $3=$0;
 $4=$frm;
 $5=$frm_end;
 $6=$frm_nxt;
 $7=$to;
 $8=$to_end;
 $9=$to_nxt;
 var $10=$2;
 var $11=$4;
 $_frm=$11;
 var $12=$5;
 $_frm_end=$12;
 var $13=$_frm;
 HEAP32[(($_frm_nxt)>>2)]=$13;
 var $14=$7;
 $_to=$14;
 var $15=$8;
 $_to_end=$15;
 var $16=$_to;
 HEAP32[(($_to_nxt)>>2)]=$16;
 var $17=$_frm;
 var $18=$_frm_end;
 var $19=$_to;
 var $20=$_to_end;
 var $21=__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($17, $18, $_frm_nxt, $19, $20, $_to_nxt, 1114111, 0);
 $r=$21;
 var $22=$4;
 var $23=HEAP32[(($_frm_nxt)>>2)];
 var $24=$_frm;
 var $25=$23;
 var $26=$24;
 var $27=((($25)-($26))|0);
 var $28=((((($27)|(0)))/(4))&-1);
 var $29=(($22+($28<<2))|0);
 var $30=$6;
 HEAP32[(($30)>>2)]=$29;
 var $31=$7;
 var $32=HEAP32[(($_to_nxt)>>2)];
 var $33=$_to;
 var $34=$32;
 var $35=$33;
 var $36=((($34)-($35))|0);
 var $37=(($31+$36)|0);
 var $38=$9;
 HEAP32[(($38)>>2)]=$37;
 var $39=$r;
 STACKTOP = __stackBase__;
 return $39;
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $_frm;
 var $_frm_end;
 var $_frm_nxt=__stackBase__;
 var $_to;
 var $_to_end;
 var $_to_nxt=(__stackBase__)+(8);
 var $r;
 $2=$this;
 $3=$0;
 $4=$frm;
 $5=$frm_end;
 $6=$frm_nxt;
 $7=$to;
 $8=$to_end;
 $9=$to_nxt;
 var $10=$2;
 var $11=$4;
 $_frm=$11;
 var $12=$5;
 $_frm_end=$12;
 var $13=$_frm;
 HEAP32[(($_frm_nxt)>>2)]=$13;
 var $14=$7;
 $_to=$14;
 var $15=$8;
 $_to_end=$15;
 var $16=$_to;
 HEAP32[(($_to_nxt)>>2)]=$16;
 var $17=$_frm;
 var $18=$_frm_end;
 var $19=$_to;
 var $20=$_to_end;
 var $21=__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($17, $18, $_frm_nxt, $19, $20, $_to_nxt, 1114111, 0);
 $r=$21;
 var $22=$4;
 var $23=HEAP32[(($_frm_nxt)>>2)];
 var $24=$_frm;
 var $25=$23;
 var $26=$24;
 var $27=((($25)-($26))|0);
 var $28=(($22+$27)|0);
 var $29=$6;
 HEAP32[(($29)>>2)]=$28;
 var $30=$7;
 var $31=HEAP32[(($_to_nxt)>>2)];
 var $32=$_to;
 var $33=$31;
 var $34=$32;
 var $35=((($33)-($34))|0);
 var $36=((((($35)|(0)))/(4))&-1);
 var $37=(($30+($36<<2))|0);
 var $38=$9;
 HEAP32[(($38)>>2)]=$37;
 var $39=$r;
 STACKTOP = __stackBase__;
 return $39;
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 var label = 0;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 $3=$this;
 $4=$0;
 $5=$to;
 $6=$1;
 $7=$to_nxt;
 var $8=$3;
 var $9=$5;
 var $10=$7;
 HEAP32[(($10)>>2)]=$9;
 return 3;
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE11do_encodingEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE16do_always_noconvEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 0;
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $c1;
   var $c2;
   var $t;
   var $c21;
   var $c3;
   var $t2;
   var $c23;
   var $c34;
   var $c4;
   var $t5;
   $2=$frm;
   $3=$frm_end;
   $4=$frm_nxt;
   $5=$to;
   $6=$to_end;
   $7=$to_nxt;
   $8=$Maxcode;
   $9=$mode;
   var $10=$2;
   var $11=$4;
   HEAP32[(($11)>>2)]=$10;
   var $12=$5;
   var $13=$7;
   HEAP32[(($13)>>2)]=$12;
   var $14=$9;
   var $15=$14 & 4;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $18=$3;
   var $19=$4;
   var $20=HEAP32[(($19)>>2)];
   var $21=$18;
   var $22=$20;
   var $23=((($21)-($22))|0);
   var $24=(($23)|(0)) >= 3;
   if ($24) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $26=$4;
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255));
   var $31=(($30)|(0))==239;
   if ($31) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $33=$4;
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34+1)|0);
   var $36=HEAP8[($35)];
   var $37=(($36)&(255));
   var $38=(($37)|(0))==187;
   if ($38) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $40=$4;
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41+2)|0);
   var $43=HEAP8[($42)];
   var $44=(($43)&(255));
   var $45=(($44)|(0))==191;
   if ($45) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $47=$4;
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48+3)|0);
   HEAP32[(($47)>>2)]=$49;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $53=$4;
   var $54=HEAP32[(($53)>>2)];
   var $55=$3;
   var $56=(($54)>>>(0)) < (($55)>>>(0));
   if ($56) { label = 10; break; } else { var $63 = 0;label = 11; break; }
  case 10: 
   var $58=$7;
   var $59=HEAP32[(($58)>>2)];
   var $60=$6;
   var $61=(($59)>>>(0)) < (($60)>>>(0));
   var $63 = $61;label = 11; break;
  case 11: 
   var $63;
   if ($63) { label = 12; break; } else { label = 71; break; }
  case 12: 
   var $65=$4;
   var $66=HEAP32[(($65)>>2)];
   var $67=HEAP8[($66)];
   $c1=$67;
   var $68=$c1;
   var $69=(($68)&(255));
   var $70=(($69)|(0)) < 128;
   if ($70) { label = 13; break; } else { label = 16; break; }
  case 13: 
   var $72=$c1;
   var $73=(($72)&(255));
   var $74=$8;
   var $75=(($73)>>>(0)) > (($74)>>>(0));
   if ($75) { label = 14; break; } else { label = 15; break; }
  case 14: 
   $1=2;
   label = 72; break;
  case 15: 
   var $78=$c1;
   var $79=(($78)&(255));
   var $80=$7;
   var $81=HEAP32[(($80)>>2)];
   HEAP32[(($81)>>2)]=$79;
   var $82=$4;
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+1)|0);
   HEAP32[(($82)>>2)]=$84;
   label = 69; break;
  case 16: 
   var $86=$c1;
   var $87=(($86)&(255));
   var $88=(($87)|(0)) < 194;
   if ($88) { label = 17; break; } else { label = 18; break; }
  case 17: 
   $1=2;
   label = 72; break;
  case 18: 
   var $91=$c1;
   var $92=(($91)&(255));
   var $93=(($92)|(0)) < 224;
   if ($93) { label = 19; break; } else { label = 26; break; }
  case 19: 
   var $95=$3;
   var $96=$4;
   var $97=HEAP32[(($96)>>2)];
   var $98=$95;
   var $99=$97;
   var $100=((($98)-($99))|0);
   var $101=(($100)|(0)) < 2;
   if ($101) { label = 20; break; } else { label = 21; break; }
  case 20: 
   $1=1;
   label = 72; break;
  case 21: 
   var $104=$4;
   var $105=HEAP32[(($104)>>2)];
   var $106=(($105+1)|0);
   var $107=HEAP8[($106)];
   $c2=$107;
   var $108=$c2;
   var $109=(($108)&(255));
   var $110=$109 & 192;
   var $111=(($110)|(0))!=128;
   if ($111) { label = 22; break; } else { label = 23; break; }
  case 22: 
   $1=2;
   label = 72; break;
  case 23: 
   var $114=$c1;
   var $115=(($114)&(255));
   var $116=$115 & 31;
   var $117=$116 << 6;
   var $118=$c2;
   var $119=(($118)&(255));
   var $120=$119 & 63;
   var $121=$117 | $120;
   $t=$121;
   var $122=$t;
   var $123=$8;
   var $124=(($122)>>>(0)) > (($123)>>>(0));
   if ($124) { label = 24; break; } else { label = 25; break; }
  case 24: 
   $1=2;
   label = 72; break;
  case 25: 
   var $127=$t;
   var $128=$7;
   var $129=HEAP32[(($128)>>2)];
   HEAP32[(($129)>>2)]=$127;
   var $130=$4;
   var $131=HEAP32[(($130)>>2)];
   var $132=(($131+2)|0);
   HEAP32[(($130)>>2)]=$132;
   label = 67; break;
  case 26: 
   var $134=$c1;
   var $135=(($134)&(255));
   var $136=(($135)|(0)) < 240;
   if ($136) { label = 27; break; } else { label = 44; break; }
  case 27: 
   var $138=$3;
   var $139=$4;
   var $140=HEAP32[(($139)>>2)];
   var $141=$138;
   var $142=$140;
   var $143=((($141)-($142))|0);
   var $144=(($143)|(0)) < 3;
   if ($144) { label = 28; break; } else { label = 29; break; }
  case 28: 
   $1=1;
   label = 72; break;
  case 29: 
   var $147=$4;
   var $148=HEAP32[(($147)>>2)];
   var $149=(($148+1)|0);
   var $150=HEAP8[($149)];
   $c21=$150;
   var $151=$4;
   var $152=HEAP32[(($151)>>2)];
   var $153=(($152+2)|0);
   var $154=HEAP8[($153)];
   $c3=$154;
   var $155=$c1;
   var $156=(($155)&(255));
   if ((($156)|(0))==224) {
    label = 30; break;
   }
   else if ((($156)|(0))==237) {
    label = 33; break;
   }
   else {
   label = 36; break;
   }
  case 30: 
   var $158=$c21;
   var $159=(($158)&(255));
   var $160=$159 & 224;
   var $161=(($160)|(0))!=160;
   if ($161) { label = 31; break; } else { label = 32; break; }
  case 31: 
   $1=2;
   label = 72; break;
  case 32: 
   label = 39; break;
  case 33: 
   var $165=$c21;
   var $166=(($165)&(255));
   var $167=$166 & 224;
   var $168=(($167)|(0))!=128;
   if ($168) { label = 34; break; } else { label = 35; break; }
  case 34: 
   $1=2;
   label = 72; break;
  case 35: 
   label = 39; break;
  case 36: 
   var $172=$c21;
   var $173=(($172)&(255));
   var $174=$173 & 192;
   var $175=(($174)|(0))!=128;
   if ($175) { label = 37; break; } else { label = 38; break; }
  case 37: 
   $1=2;
   label = 72; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $179=$c3;
   var $180=(($179)&(255));
   var $181=$180 & 192;
   var $182=(($181)|(0))!=128;
   if ($182) { label = 40; break; } else { label = 41; break; }
  case 40: 
   $1=2;
   label = 72; break;
  case 41: 
   var $185=$c1;
   var $186=(($185)&(255));
   var $187=$186 & 15;
   var $188=$187 << 12;
   var $189=$c21;
   var $190=(($189)&(255));
   var $191=$190 & 63;
   var $192=$191 << 6;
   var $193=$188 | $192;
   var $194=$c3;
   var $195=(($194)&(255));
   var $196=$195 & 63;
   var $197=$193 | $196;
   $t2=$197;
   var $198=$t2;
   var $199=$8;
   var $200=(($198)>>>(0)) > (($199)>>>(0));
   if ($200) { label = 42; break; } else { label = 43; break; }
  case 42: 
   $1=2;
   label = 72; break;
  case 43: 
   var $203=$t2;
   var $204=$7;
   var $205=HEAP32[(($204)>>2)];
   HEAP32[(($205)>>2)]=$203;
   var $206=$4;
   var $207=HEAP32[(($206)>>2)];
   var $208=(($207+3)|0);
   HEAP32[(($206)>>2)]=$208;
   label = 66; break;
  case 44: 
   var $210=$c1;
   var $211=(($210)&(255));
   var $212=(($211)|(0)) < 245;
   if ($212) { label = 45; break; } else { label = 64; break; }
  case 45: 
   var $214=$3;
   var $215=$4;
   var $216=HEAP32[(($215)>>2)];
   var $217=$214;
   var $218=$216;
   var $219=((($217)-($218))|0);
   var $220=(($219)|(0)) < 4;
   if ($220) { label = 46; break; } else { label = 47; break; }
  case 46: 
   $1=1;
   label = 72; break;
  case 47: 
   var $223=$4;
   var $224=HEAP32[(($223)>>2)];
   var $225=(($224+1)|0);
   var $226=HEAP8[($225)];
   $c23=$226;
   var $227=$4;
   var $228=HEAP32[(($227)>>2)];
   var $229=(($228+2)|0);
   var $230=HEAP8[($229)];
   $c34=$230;
   var $231=$4;
   var $232=HEAP32[(($231)>>2)];
   var $233=(($232+3)|0);
   var $234=HEAP8[($233)];
   $c4=$234;
   var $235=$c1;
   var $236=(($235)&(255));
   if ((($236)|(0))==240) {
    label = 48; break;
   }
   else if ((($236)|(0))==244) {
    label = 52; break;
   }
   else {
   label = 55; break;
   }
  case 48: 
   var $238=$c23;
   var $239=(($238)&(255));
   var $240=144 <= (($239)|(0));
   if ($240) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $242=$c23;
   var $243=(($242)&(255));
   var $244=(($243)|(0)) <= 191;
   if ($244) { label = 51; break; } else { label = 50; break; }
  case 50: 
   $1=2;
   label = 72; break;
  case 51: 
   label = 58; break;
  case 52: 
   var $248=$c23;
   var $249=(($248)&(255));
   var $250=$249 & 240;
   var $251=(($250)|(0))!=128;
   if ($251) { label = 53; break; } else { label = 54; break; }
  case 53: 
   $1=2;
   label = 72; break;
  case 54: 
   label = 58; break;
  case 55: 
   var $255=$c23;
   var $256=(($255)&(255));
   var $257=$256 & 192;
   var $258=(($257)|(0))!=128;
   if ($258) { label = 56; break; } else { label = 57; break; }
  case 56: 
   $1=2;
   label = 72; break;
  case 57: 
   label = 58; break;
  case 58: 
   var $262=$c34;
   var $263=(($262)&(255));
   var $264=$263 & 192;
   var $265=(($264)|(0))!=128;
   if ($265) { label = 60; break; } else { label = 59; break; }
  case 59: 
   var $267=$c4;
   var $268=(($267)&(255));
   var $269=$268 & 192;
   var $270=(($269)|(0))!=128;
   if ($270) { label = 60; break; } else { label = 61; break; }
  case 60: 
   $1=2;
   label = 72; break;
  case 61: 
   var $273=$c1;
   var $274=(($273)&(255));
   var $275=$274 & 7;
   var $276=$275 << 18;
   var $277=$c23;
   var $278=(($277)&(255));
   var $279=$278 & 63;
   var $280=$279 << 12;
   var $281=$276 | $280;
   var $282=$c34;
   var $283=(($282)&(255));
   var $284=$283 & 63;
   var $285=$284 << 6;
   var $286=$281 | $285;
   var $287=$c4;
   var $288=(($287)&(255));
   var $289=$288 & 63;
   var $290=$286 | $289;
   $t5=$290;
   var $291=$t5;
   var $292=$8;
   var $293=(($291)>>>(0)) > (($292)>>>(0));
   if ($293) { label = 62; break; } else { label = 63; break; }
  case 62: 
   $1=2;
   label = 72; break;
  case 63: 
   var $296=$t5;
   var $297=$7;
   var $298=HEAP32[(($297)>>2)];
   HEAP32[(($298)>>2)]=$296;
   var $299=$4;
   var $300=HEAP32[(($299)>>2)];
   var $301=(($300+4)|0);
   HEAP32[(($299)>>2)]=$301;
   label = 65; break;
  case 64: 
   $1=2;
   label = 72; break;
  case 65: 
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   label = 68; break;
  case 68: 
   label = 69; break;
  case 69: 
   label = 70; break;
  case 70: 
   var $309=$7;
   var $310=HEAP32[(($309)>>2)];
   var $311=(($310+4)|0);
   HEAP32[(($309)>>2)]=$311;
   label = 9; break;
  case 71: 
   var $313=$4;
   var $314=HEAP32[(($313)>>2)];
   var $315=$3;
   var $316=(($314)>>>(0)) < (($315)>>>(0));
   var $317=$316 ? 1 : 0;
   $1=$317;
   label = 72; break;
  case 72: 
   var $319=$1;
   return $319;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 var label = 0;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $_frm;
 var $_frm_end;
 $2=$this;
 $3=$0;
 $4=$frm;
 $5=$frm_end;
 $6=$mx;
 var $7=$2;
 var $8=$4;
 $_frm=$8;
 var $9=$5;
 $_frm_end=$9;
 var $10=$_frm;
 var $11=$_frm_end;
 var $12=$6;
 var $13=__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($10, $11, $12, 1114111, 0);
 return $13;
}
function __ZNKSt3__17codecvtIDic10_mbstate_tE13do_max_lengthEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return 4;
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $frm_nxt;
   var $nchar32_t;
   var $c1;
   var $c2;
   var $c3;
   var $c21;
   var $c32;
   var $c4;
   $2=$frm;
   $3=$frm_end;
   $4=$mx;
   $5=$Maxcode;
   $6=$mode;
   var $7=$2;
   $frm_nxt=$7;
   var $8=$6;
   var $9=$8 & 4;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $12=$3;
   var $13=$frm_nxt;
   var $14=$12;
   var $15=$13;
   var $16=((($14)-($15))|0);
   var $17=(($16)|(0)) >= 3;
   if ($17) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $19=$frm_nxt;
   var $20=(($19)|0);
   var $21=HEAP8[($20)];
   var $22=(($21)&(255));
   var $23=(($22)|(0))==239;
   if ($23) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $25=$frm_nxt;
   var $26=(($25+1)|0);
   var $27=HEAP8[($26)];
   var $28=(($27)&(255));
   var $29=(($28)|(0))==187;
   if ($29) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $31=$frm_nxt;
   var $32=(($31+2)|0);
   var $33=HEAP8[($32)];
   var $34=(($33)&(255));
   var $35=(($34)|(0))==191;
   if ($35) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $37=$frm_nxt;
   var $38=(($37+3)|0);
   $frm_nxt=$38;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   $nchar32_t=0;
   label = 9; break;
  case 9: 
   var $42=$frm_nxt;
   var $43=$3;
   var $44=(($42)>>>(0)) < (($43)>>>(0));
   if ($44) { label = 10; break; } else { var $50 = 0;label = 11; break; }
  case 10: 
   var $46=$nchar32_t;
   var $47=$4;
   var $48=(($46)>>>(0)) < (($47)>>>(0));
   var $50 = $48;label = 11; break;
  case 11: 
   var $50;
   if ($50) { label = 12; break; } else { label = 70; break; }
  case 12: 
   var $52=$frm_nxt;
   var $53=HEAP8[($52)];
   $c1=$53;
   var $54=$c1;
   var $55=(($54)&(255));
   var $56=(($55)|(0)) < 128;
   if ($56) { label = 13; break; } else { label = 16; break; }
  case 13: 
   var $58=$c1;
   var $59=(($58)&(255));
   var $60=$5;
   var $61=(($59)>>>(0)) > (($60)>>>(0));
   if ($61) { label = 14; break; } else { label = 15; break; }
  case 14: 
   label = 70; break;
  case 15: 
   var $64=$frm_nxt;
   var $65=(($64+1)|0);
   $frm_nxt=$65;
   label = 68; break;
  case 16: 
   var $67=$c1;
   var $68=(($67)&(255));
   var $69=(($68)|(0)) < 194;
   if ($69) { label = 17; break; } else { label = 18; break; }
  case 17: 
   label = 70; break;
  case 18: 
   var $72=$c1;
   var $73=(($72)&(255));
   var $74=(($73)|(0)) < 224;
   if ($74) { label = 19; break; } else { label = 25; break; }
  case 19: 
   var $76=$3;
   var $77=$frm_nxt;
   var $78=$76;
   var $79=$77;
   var $80=((($78)-($79))|0);
   var $81=(($80)|(0)) < 2;
   if ($81) { label = 21; break; } else { label = 20; break; }
  case 20: 
   var $83=$frm_nxt;
   var $84=(($83+1)|0);
   var $85=HEAP8[($84)];
   var $86=(($85)&(255));
   var $87=$86 & 192;
   var $88=(($87)|(0))!=128;
   if ($88) { label = 21; break; } else { label = 22; break; }
  case 21: 
   label = 70; break;
  case 22: 
   var $91=$c1;
   var $92=(($91)&(255));
   var $93=$92 & 31;
   var $94=$93 << 6;
   var $95=$frm_nxt;
   var $96=(($95+1)|0);
   var $97=HEAP8[($96)];
   var $98=(($97)&(255));
   var $99=$98 & 63;
   var $100=$94 | $99;
   var $101=$5;
   var $102=(($100)>>>(0)) > (($101)>>>(0));
   if ($102) { label = 23; break; } else { label = 24; break; }
  case 23: 
   label = 70; break;
  case 24: 
   var $105=$frm_nxt;
   var $106=(($105+2)|0);
   $frm_nxt=$106;
   label = 66; break;
  case 25: 
   var $108=$c1;
   var $109=(($108)&(255));
   var $110=(($109)|(0)) < 240;
   if ($110) { label = 26; break; } else { label = 43; break; }
  case 26: 
   var $112=$3;
   var $113=$frm_nxt;
   var $114=$112;
   var $115=$113;
   var $116=((($114)-($115))|0);
   var $117=(($116)|(0)) < 3;
   if ($117) { label = 27; break; } else { label = 28; break; }
  case 27: 
   label = 70; break;
  case 28: 
   var $120=$frm_nxt;
   var $121=(($120+1)|0);
   var $122=HEAP8[($121)];
   $c2=$122;
   var $123=$frm_nxt;
   var $124=(($123+2)|0);
   var $125=HEAP8[($124)];
   $c3=$125;
   var $126=$c1;
   var $127=(($126)&(255));
   if ((($127)|(0))==224) {
    label = 29; break;
   }
   else if ((($127)|(0))==237) {
    label = 32; break;
   }
   else {
   label = 35; break;
   }
  case 29: 
   var $129=$c2;
   var $130=(($129)&(255));
   var $131=$130 & 224;
   var $132=(($131)|(0))!=160;
   if ($132) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $134=$frm_nxt;
   var $135=$2;
   var $136=$134;
   var $137=$135;
   var $138=((($136)-($137))|0);
   $1=$138;
   label = 71; break;
  case 31: 
   label = 38; break;
  case 32: 
   var $141=$c2;
   var $142=(($141)&(255));
   var $143=$142 & 224;
   var $144=(($143)|(0))!=128;
   if ($144) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $146=$frm_nxt;
   var $147=$2;
   var $148=$146;
   var $149=$147;
   var $150=((($148)-($149))|0);
   $1=$150;
   label = 71; break;
  case 34: 
   label = 38; break;
  case 35: 
   var $153=$c2;
   var $154=(($153)&(255));
   var $155=$154 & 192;
   var $156=(($155)|(0))!=128;
   if ($156) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $158=$frm_nxt;
   var $159=$2;
   var $160=$158;
   var $161=$159;
   var $162=((($160)-($161))|0);
   $1=$162;
   label = 71; break;
  case 37: 
   label = 38; break;
  case 38: 
   var $165=$c3;
   var $166=(($165)&(255));
   var $167=$166 & 192;
   var $168=(($167)|(0))!=128;
   if ($168) { label = 39; break; } else { label = 40; break; }
  case 39: 
   label = 70; break;
  case 40: 
   var $171=$c1;
   var $172=(($171)&(255));
   var $173=$172 & 15;
   var $174=$173 << 12;
   var $175=$c2;
   var $176=(($175)&(255));
   var $177=$176 & 63;
   var $178=$177 << 6;
   var $179=$174 | $178;
   var $180=$c3;
   var $181=(($180)&(255));
   var $182=$181 & 63;
   var $183=$179 | $182;
   var $184=$5;
   var $185=(($183)>>>(0)) > (($184)>>>(0));
   if ($185) { label = 41; break; } else { label = 42; break; }
  case 41: 
   label = 70; break;
  case 42: 
   var $188=$frm_nxt;
   var $189=(($188+3)|0);
   $frm_nxt=$189;
   label = 65; break;
  case 43: 
   var $191=$c1;
   var $192=(($191)&(255));
   var $193=(($192)|(0)) < 245;
   if ($193) { label = 44; break; } else { label = 63; break; }
  case 44: 
   var $195=$3;
   var $196=$frm_nxt;
   var $197=$195;
   var $198=$196;
   var $199=((($197)-($198))|0);
   var $200=(($199)|(0)) < 4;
   if ($200) { label = 45; break; } else { label = 46; break; }
  case 45: 
   label = 70; break;
  case 46: 
   var $203=$frm_nxt;
   var $204=(($203+1)|0);
   var $205=HEAP8[($204)];
   $c21=$205;
   var $206=$frm_nxt;
   var $207=(($206+2)|0);
   var $208=HEAP8[($207)];
   $c32=$208;
   var $209=$frm_nxt;
   var $210=(($209+3)|0);
   var $211=HEAP8[($210)];
   $c4=$211;
   var $212=$c1;
   var $213=(($212)&(255));
   if ((($213)|(0))==240) {
    label = 47; break;
   }
   else if ((($213)|(0))==244) {
    label = 51; break;
   }
   else {
   label = 54; break;
   }
  case 47: 
   var $215=$c21;
   var $216=(($215)&(255));
   var $217=144 <= (($216)|(0));
   if ($217) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $219=$c21;
   var $220=(($219)&(255));
   var $221=(($220)|(0)) <= 191;
   if ($221) { label = 50; break; } else { label = 49; break; }
  case 49: 
   var $223=$frm_nxt;
   var $224=$2;
   var $225=$223;
   var $226=$224;
   var $227=((($225)-($226))|0);
   $1=$227;
   label = 71; break;
  case 50: 
   label = 57; break;
  case 51: 
   var $230=$c21;
   var $231=(($230)&(255));
   var $232=$231 & 240;
   var $233=(($232)|(0))!=128;
   if ($233) { label = 52; break; } else { label = 53; break; }
  case 52: 
   var $235=$frm_nxt;
   var $236=$2;
   var $237=$235;
   var $238=$236;
   var $239=((($237)-($238))|0);
   $1=$239;
   label = 71; break;
  case 53: 
   label = 57; break;
  case 54: 
   var $242=$c21;
   var $243=(($242)&(255));
   var $244=$243 & 192;
   var $245=(($244)|(0))!=128;
   if ($245) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $247=$frm_nxt;
   var $248=$2;
   var $249=$247;
   var $250=$248;
   var $251=((($249)-($250))|0);
   $1=$251;
   label = 71; break;
  case 56: 
   label = 57; break;
  case 57: 
   var $254=$c32;
   var $255=(($254)&(255));
   var $256=$255 & 192;
   var $257=(($256)|(0))!=128;
   if ($257) { label = 59; break; } else { label = 58; break; }
  case 58: 
   var $259=$c4;
   var $260=(($259)&(255));
   var $261=$260 & 192;
   var $262=(($261)|(0))!=128;
   if ($262) { label = 59; break; } else { label = 60; break; }
  case 59: 
   label = 70; break;
  case 60: 
   var $265=$c1;
   var $266=(($265)&(255));
   var $267=$266 & 7;
   var $268=$267 << 18;
   var $269=$c21;
   var $270=(($269)&(255));
   var $271=$270 & 63;
   var $272=$271 << 12;
   var $273=$268 | $272;
   var $274=$c32;
   var $275=(($274)&(255));
   var $276=$275 & 63;
   var $277=$276 << 6;
   var $278=$273 | $277;
   var $279=$c4;
   var $280=(($279)&(255));
   var $281=$280 & 63;
   var $282=$278 | $281;
   var $283=$5;
   var $284=(($282)>>>(0)) > (($283)>>>(0));
   if ($284) { label = 61; break; } else { label = 62; break; }
  case 61: 
   label = 70; break;
  case 62: 
   var $287=$frm_nxt;
   var $288=(($287+4)|0);
   $frm_nxt=$288;
   label = 64; break;
  case 63: 
   label = 70; break;
  case 64: 
   label = 65; break;
  case 65: 
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   label = 68; break;
  case 68: 
   label = 69; break;
  case 69: 
   var $296=$nchar32_t;
   var $297=((($296)+(1))|0);
   $nchar32_t=$297;
   label = 9; break;
  case 70: 
   var $299=$frm_nxt;
   var $300=$2;
   var $301=$299;
   var $302=$300;
   var $303=((($301)-($302))|0);
   $1=$303;
   label = 71; break;
  case 71: 
   var $305=$1;
   return $305;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18numpunctIcEC2Ej($this, $refs) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   $14=$this;
   $15=$refs;
   var $16=$14;
   var $17=$16;
   var $18=$15;
   $12=$17;
   $13=$18;
   var $19=$12;
   var $20=$19;
   var $21=$13;
   var $22=((($21)-(1))|0);
   $10=$20;
   $11=$22;
   var $23=$10;
   var $24=$23;
   HEAP32[(($24)>>2)]=((13000)|0);
   var $25=(($23+4)|0);
   var $26=$11;
   HEAP32[(($25)>>2)]=$26;
   var $27=$19;
   HEAP32[(($27)>>2)]=((12344)|0);
   var $28=$16;
   HEAP32[(($28)>>2)]=((11584)|0);
   var $29=(($16+8)|0);
   HEAP8[($29)]=46;
   var $30=(($16+9)|0);
   HEAP8[($30)]=44;
   var $31=(($16+12)|0);
   $9=$31;
   var $32=$9;
   $8=$32;
   var $33=$8;
   var $34=$33;
   var $35=(($33)|0);
   $7=$35;
   var $36=$7;
   $6=$36;
   var $37=$6;
   var $38=$37;
   $5=$38;
   var $39=$5;
   var $40=$39;
   $4=$40;
   var $41=$4;
   var $42=(($39)|0);
   $3=$33;
   var $43=$3;
   var $44=(($43)|0);
   $2=$44;
   var $45=$2;
   var $46=$45;
   $1=$46;
   var $47=$1;
   var $48=(($47)|0);
   var $49=(($48)|0);
   var $50=$49;
   var $51=(($50)|0);
   $__a_i_i_i=$51;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $53=$__i_i_i_i;
   var $54=(($53)>>>(0)) < 3;
   if ($54) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $56=$__i_i_i_i;
   var $57=$__a_i_i_i;
   var $58=(($57+($56<<2))|0);
   HEAP32[(($58)>>2)]=0;
   var $59=$__i_i_i_i;
   var $60=((($59)+(1))|0);
   $__i_i_i_i=$60;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18numpunctIwEC2Ej($this, $refs) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   $14=$this;
   $15=$refs;
   var $16=$14;
   var $17=$16;
   var $18=$15;
   $12=$17;
   $13=$18;
   var $19=$12;
   var $20=$19;
   var $21=$13;
   var $22=((($21)-(1))|0);
   $10=$20;
   $11=$22;
   var $23=$10;
   var $24=$23;
   HEAP32[(($24)>>2)]=((13000)|0);
   var $25=(($23+4)|0);
   var $26=$11;
   HEAP32[(($25)>>2)]=$26;
   var $27=$19;
   HEAP32[(($27)>>2)]=((12344)|0);
   var $28=$16;
   HEAP32[(($28)>>2)]=((11536)|0);
   var $29=(($16+8)|0);
   HEAP32[(($29)>>2)]=46;
   var $30=(($16+12)|0);
   HEAP32[(($30)>>2)]=44;
   var $31=(($16+16)|0);
   $9=$31;
   var $32=$9;
   $8=$32;
   var $33=$8;
   var $34=$33;
   var $35=(($33)|0);
   $7=$35;
   var $36=$7;
   $6=$36;
   var $37=$6;
   var $38=$37;
   $5=$38;
   var $39=$5;
   var $40=$39;
   $4=$40;
   var $41=$4;
   var $42=(($39)|0);
   $3=$33;
   var $43=$3;
   var $44=(($43)|0);
   $2=$44;
   var $45=$2;
   var $46=$45;
   $1=$46;
   var $47=$1;
   var $48=(($47)|0);
   var $49=(($48)|0);
   var $50=$49;
   var $51=(($50)|0);
   $__a_i_i_i=$51;
   $__i_i_i_i=0;
   label = 2; break;
  case 2: 
   var $53=$__i_i_i_i;
   var $54=(($53)>>>(0)) < 3;
   if ($54) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $56=$__i_i_i_i;
   var $57=$__a_i_i_i;
   var $58=(($57+($56<<2))|0);
   HEAP32[(($58)>>2)]=0;
   var $59=$__i_i_i_i;
   var $60=((($59)+(1))|0);
   $__i_i_i_i=$60;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP8[($3)];
 return $4;
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+9)|0);
 var $4=HEAP8[($3)];
 return $4;
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16locale5facetD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__16locale5facetD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__18numpunctIcED2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((11584)|0);
 var $4=(($2+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 var $5=$2;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__18numpunctIwED2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((11536)|0);
 var $4=(($2+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 var $5=$2;
 __ZNSt3__16locale5facetD2Ev($5);
 return;
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg_result, $this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result, $3);
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg_result, $this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result, $3);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg_result, $this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 $10=$this;
 var $11=$10;
 $8=$agg_result;
 $9=((2608)|0);
 var $12=$8;
 var $13=$9;
 $6=$12;
 $7=$13;
 var $14=$6;
 var $15=$14;
 var $16=(($14)|0);
 $5=$16;
 var $17=$5;
 $4=$17;
 var $18=$4;
 var $19=$18;
 $3=$19;
 var $20=$3;
 var $21=$20;
 $2=$21;
 var $22=$2;
 var $23=(($20)|0);
 var $24=$7;
 var $25=$7;
 $1=$25;
 var $26=$1;
 var $27=_strlen($26);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($14, $24, $27);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg_result, $this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 $10=$this;
 var $11=$10;
 $8=$agg_result;
 $9=((2584)|0);
 var $12=$8;
 var $13=$9;
 $6=$12;
 $7=$13;
 var $14=$6;
 var $15=$14;
 var $16=(($14)|0);
 $5=$16;
 var $17=$5;
 $4=$17;
 var $18=$4;
 var $19=$18;
 $3=$19;
 var $20=$3;
 var $21=$20;
 $2=$21;
 var $22=$2;
 var $23=(($20)|0);
 var $24=$7;
 var $25=$7;
 $1=$25;
 var $26=$1;
 var $27=_wcslen($26);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($14, $24, $27);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg_result, $this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 $10=$this;
 var $11=$10;
 $8=$agg_result;
 $9=((2576)|0);
 var $12=$8;
 var $13=$9;
 $6=$12;
 $7=$13;
 var $14=$6;
 var $15=$14;
 var $16=(($14)|0);
 $5=$16;
 var $17=$5;
 $4=$17;
 var $18=$4;
 var $19=$18;
 $3=$19;
 var $20=$3;
 var $21=$20;
 $2=$21;
 var $22=$2;
 var $23=(($20)|0);
 var $24=$7;
 var $25=$7;
 $1=$25;
 var $26=$1;
 var $27=_strlen($26);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($14, $24, $27);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg_result, $this) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 $10=$this;
 var $11=$10;
 $8=$agg_result;
 $9=((2528)|0);
 var $12=$8;
 var $13=$9;
 $6=$12;
 $7=$13;
 var $14=$6;
 var $15=$14;
 var $16=(($14)|0);
 $5=$16;
 var $17=$5;
 $4=$17;
 var $18=$4;
 var $19=$18;
 $3=$19;
 var $20=$3;
 var $21=$20;
 $2=$21;
 var $22=$2;
 var $23=(($20)|0);
 var $24=$7;
 var $25=$7;
 $1=$25;
 var $26=$1;
 var $27=_wcslen($26);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($14, $24, $27);
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=HEAP8[(20512)];
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=__ZNSt3__1L10init_weeksEv();
   HEAP32[((10728)>>2)]=$6;
   HEAP8[(20512)]=1;
   label = 3; break;
  case 3: 
   var $8=HEAP32[((10728)>>2)];
   return $8;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__1L10init_weeksEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38=HEAP8[(20400)];
   var $39=(($38 << 24) >> 24)==0;
   if ($39) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $42 = ((9256)|0);label = 3; break;
  case 3: 
   var $42;
   $37=$42;
   var $43=$37;
   $36=$43;
   var $44=$36;
   var $45=$44;
   var $46=(($44)|0);
   $35=$46;
   var $47=$35;
   $34=$47;
   var $48=$34;
   var $49=$48;
   $33=$49;
   var $50=$33;
   var $51=$50;
   $32=$51;
   var $52=$32;
   var $53=(($50)|0);
   $31=$44;
   var $54=$31;
   var $55=(($54)|0);
   $30=$55;
   var $56=$30;
   var $57=$56;
   $29=$57;
   var $58=$29;
   var $59=(($58)|0);
   var $60=(($59)|0);
   var $61=$60;
   var $62=(($61)|0);
   $__a_i_i_i=$62;
   $__i_i_i_i=0;
   label = 4; break;
  case 4: 
   var $64=$__i_i_i_i;
   var $65=(($64)>>>(0)) < 3;
   if ($65) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $67=$__i_i_i_i;
   var $68=$__a_i_i_i;
   var $69=(($68+($67<<2))|0);
   HEAP32[(($69)>>2)]=0;
   var $70=$__i_i_i_i;
   var $71=((($70)+(1))|0);
   $__i_i_i_i=$71;
   label = 4; break;
  case 6: 
   var $72=(($42+12)|0);
   var $73=(($72)|(0))==(((((9424)|0)))|(0));
   if ($73) { label = 7; break; } else { var $42 = $72;label = 3; break; }
  case 7: 
   var $75=_atexit(906, 0, ___dso_handle);
   HEAP8[(20400)]=1;
   label = 8; break;
  case 8: 
   $25=((9256)|0);
   $26=((3912)|0);
   var $77=$25;
   var $78=$26;
   var $79=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($77, $78);
   $23=((9268)|0);
   $24=((3840)|0);
   var $80=$23;
   var $81=$24;
   var $82=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($80, $81);
   $21=((9280)|0);
   $22=((3824)|0);
   var $83=$21;
   var $84=$22;
   var $85=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($83, $84);
   $19=((9292)|0);
   $20=((3744)|0);
   var $86=$19;
   var $87=$20;
   var $88=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($86, $87);
   $17=((9304)|0);
   $18=((3728)|0);
   var $89=$17;
   var $90=$18;
   var $91=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($89, $90);
   $15=((9316)|0);
   $16=((3688)|0);
   var $92=$15;
   var $93=$16;
   var $94=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($92, $93);
   $13=((9328)|0);
   $14=((3672)|0);
   var $95=$13;
   var $96=$14;
   var $97=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($95, $96);
   $11=((9340)|0);
   $12=((3664)|0);
   var $98=$11;
   var $99=$12;
   var $100=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($98, $99);
   $9=((9352)|0);
   $10=((3656)|0);
   var $101=$9;
   var $102=$10;
   var $103=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($101, $102);
   $7=((9364)|0);
   $8=((3616)|0);
   var $104=$7;
   var $105=$8;
   var $106=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($104, $105);
   $5=((9376)|0);
   $6=((3608)|0);
   var $107=$5;
   var $108=$6;
   var $109=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($107, $108);
   $3=((9388)|0);
   $4=((3584)|0);
   var $110=$3;
   var $111=$4;
   var $112=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($110, $111);
   $1=((9400)|0);
   $2=((3568)|0);
   var $113=$1;
   var $114=$2;
   var $115=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($113, $114);
   $27=((9412)|0);
   $28=((3456)|0);
   var $116=$27;
   var $117=$28;
   var $118=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($116, $117);
   return ((9256)|0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=HEAP8[(20456)];
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=__ZNSt3__1L11init_wweeksEv();
   HEAP32[((10640)>>2)]=$6;
   HEAP8[(20456)]=1;
   label = 3; break;
  case 3: 
   var $8=HEAP32[((10640)>>2)];
   return $8;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__1L11init_wweeksEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38=HEAP8[(20376)];
   var $39=(($38 << 24) >> 24)==0;
   if ($39) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $42 = ((8512)|0);label = 3; break;
  case 3: 
   var $42;
   $37=$42;
   var $43=$37;
   $36=$43;
   var $44=$36;
   var $45=$44;
   var $46=(($44)|0);
   $35=$46;
   var $47=$35;
   $34=$47;
   var $48=$34;
   var $49=$48;
   $33=$49;
   var $50=$33;
   var $51=$50;
   $32=$51;
   var $52=$32;
   var $53=(($50)|0);
   $31=$44;
   var $54=$31;
   var $55=(($54)|0);
   $30=$55;
   var $56=$30;
   var $57=$56;
   $29=$57;
   var $58=$29;
   var $59=(($58)|0);
   var $60=(($59)|0);
   var $61=$60;
   var $62=(($61)|0);
   $__a_i_i_i=$62;
   $__i_i_i_i=0;
   label = 4; break;
  case 4: 
   var $64=$__i_i_i_i;
   var $65=(($64)>>>(0)) < 3;
   if ($65) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $67=$__i_i_i_i;
   var $68=$__a_i_i_i;
   var $69=(($68+($67<<2))|0);
   HEAP32[(($69)>>2)]=0;
   var $70=$__i_i_i_i;
   var $71=((($70)+(1))|0);
   $__i_i_i_i=$71;
   label = 4; break;
  case 6: 
   var $72=(($42+12)|0);
   var $73=(($72)|(0))==(((((8680)|0)))|(0));
   if ($73) { label = 7; break; } else { var $42 = $72;label = 3; break; }
  case 7: 
   var $75=_atexit(490, 0, ___dso_handle);
   HEAP8[(20376)]=1;
   label = 8; break;
  case 8: 
   $25=((8512)|0);
   $26=((4416)|0);
   var $77=$25;
   var $78=$26;
   var $79=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($77, $78);
   $23=((8524)|0);
   $24=((4384)|0);
   var $80=$23;
   var $81=$24;
   var $82=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($80, $81);
   $21=((8536)|0);
   $22=((4352)|0);
   var $83=$21;
   var $84=$22;
   var $85=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($83, $84);
   $19=((8548)|0);
   $20=((4312)|0);
   var $86=$19;
   var $87=$20;
   var $88=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($86, $87);
   $17=((8560)|0);
   $18=((4232)|0);
   var $89=$17;
   var $90=$18;
   var $91=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($89, $90);
   $15=((8572)|0);
   $16=((4200)|0);
   var $92=$15;
   var $93=$16;
   var $94=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($92, $93);
   $13=((8584)|0);
   $14=((4152)|0);
   var $95=$13;
   var $96=$14;
   var $97=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($95, $96);
   $11=((8596)|0);
   $12=((4136)|0);
   var $98=$11;
   var $99=$12;
   var $100=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($98, $99);
   $9=((8608)|0);
   $10=((4064)|0);
   var $101=$9;
   var $102=$10;
   var $103=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($101, $102);
   $7=((8620)|0);
   $8=((4048)|0);
   var $104=$7;
   var $105=$8;
   var $106=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($104, $105);
   $5=((8632)|0);
   $6=((3992)|0);
   var $107=$5;
   var $108=$6;
   var $109=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($107, $108);
   $3=((8644)|0);
   $4=((3976)|0);
   var $110=$3;
   var $111=$4;
   var $112=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($110, $111);
   $1=((8656)|0);
   $2=((3960)|0);
   var $113=$1;
   var $114=$2;
   var $115=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($113, $114);
   $27=((8668)|0);
   $28=((3944)|0);
   var $116=$27;
   var $117=$28;
   var $118=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($116, $117);
   return ((8512)|0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=HEAP8[(20504)];
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=__ZNSt3__1L11init_monthsEv();
   HEAP32[((10720)>>2)]=$6;
   HEAP8[(20504)]=1;
   label = 3; break;
  case 3: 
   var $8=HEAP32[((10720)>>2)];
   return $8;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__1L11init_monthsEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58=HEAP8[(20392)];
   var $59=(($58 << 24) >> 24)==0;
   if ($59) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $62 = ((8968)|0);label = 3; break;
  case 3: 
   var $62;
   $57=$62;
   var $63=$57;
   $56=$63;
   var $64=$56;
   var $65=$64;
   var $66=(($64)|0);
   $55=$66;
   var $67=$55;
   $54=$67;
   var $68=$54;
   var $69=$68;
   $53=$69;
   var $70=$53;
   var $71=$70;
   $52=$71;
   var $72=$52;
   var $73=(($70)|0);
   $51=$64;
   var $74=$51;
   var $75=(($74)|0);
   $50=$75;
   var $76=$50;
   var $77=$76;
   $49=$77;
   var $78=$49;
   var $79=(($78)|0);
   var $80=(($79)|0);
   var $81=$80;
   var $82=(($81)|0);
   $__a_i_i_i=$82;
   $__i_i_i_i=0;
   label = 4; break;
  case 4: 
   var $84=$__i_i_i_i;
   var $85=(($84)>>>(0)) < 3;
   if ($85) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $87=$__i_i_i_i;
   var $88=$__a_i_i_i;
   var $89=(($88+($87<<2))|0);
   HEAP32[(($89)>>2)]=0;
   var $90=$__i_i_i_i;
   var $91=((($90)+(1))|0);
   $__i_i_i_i=$91;
   label = 4; break;
  case 6: 
   var $92=(($62+12)|0);
   var $93=(($92)|(0))==(((((9256)|0)))|(0));
   if ($93) { label = 7; break; } else { var $62 = $92;label = 3; break; }
  case 7: 
   var $95=_atexit(546, 0, ___dso_handle);
   HEAP8[(20392)]=1;
   label = 8; break;
  case 8: 
   $45=((8968)|0);
   $46=((656)|0);
   var $97=$45;
   var $98=$46;
   var $99=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($97, $98);
   $43=((8980)|0);
   $44=((640)|0);
   var $100=$43;
   var $101=$44;
   var $102=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($100, $101);
   $41=((8992)|0);
   $42=((416)|0);
   var $103=$41;
   var $104=$42;
   var $105=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($103, $104);
   $39=((9004)|0);
   $40=((408)|0);
   var $106=$39;
   var $107=$40;
   var $108=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($106, $107);
   $37=((9016)|0);
   $38=((400)|0);
   var $109=$37;
   var $110=$38;
   var $111=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($109, $110);
   $35=((9028)|0);
   $36=((392)|0);
   var $112=$35;
   var $113=$36;
   var $114=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($112, $113);
   $33=((9040)|0);
   $34=((384)|0);
   var $115=$33;
   var $116=$34;
   var $117=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($115, $116);
   $31=((9052)|0);
   $32=((376)|0);
   var $118=$31;
   var $119=$32;
   var $120=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($118, $119);
   $29=((9064)|0);
   $30=((320)|0);
   var $121=$29;
   var $122=$30;
   var $123=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($121, $122);
   $27=((9076)|0);
   $28=((312)|0);
   var $124=$27;
   var $125=$28;
   var $126=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($124, $125);
   $25=((9088)|0);
   $26=((248)|0);
   var $127=$25;
   var $128=$26;
   var $129=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($127, $128);
   $23=((9100)|0);
   $24=((232)|0);
   var $130=$23;
   var $131=$24;
   var $132=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($130, $131);
   $21=((9112)|0);
   $22=((176)|0);
   var $133=$21;
   var $134=$22;
   var $135=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($133, $134);
   $19=((9124)|0);
   $20=((168)|0);
   var $136=$19;
   var $137=$20;
   var $138=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($136, $137);
   $17=((9136)|0);
   $18=((160)|0);
   var $139=$17;
   var $140=$18;
   var $141=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($139, $140);
   $15=((9148)|0);
   $16=((152)|0);
   var $142=$15;
   var $143=$16;
   var $144=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($142, $143);
   $13=((9160)|0);
   $14=((400)|0);
   var $145=$13;
   var $146=$14;
   var $147=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($145, $146);
   $11=((9172)|0);
   $12=((144)|0);
   var $148=$11;
   var $149=$12;
   var $150=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($148, $149);
   $9=((9184)|0);
   $10=((136)|0);
   var $151=$9;
   var $152=$10;
   var $153=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($151, $152);
   $7=((9196)|0);
   $8=((4544)|0);
   var $154=$7;
   var $155=$8;
   var $156=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($154, $155);
   $5=((9208)|0);
   $6=((4536)|0);
   var $157=$5;
   var $158=$6;
   var $159=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($157, $158);
   $3=((9220)|0);
   $4=((4512)|0);
   var $160=$3;
   var $161=$4;
   var $162=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($160, $161);
   $1=((9232)|0);
   $2=((4504)|0);
   var $163=$1;
   var $164=$2;
   var $165=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($163, $164);
   $47=((9244)|0);
   $48=((4448)|0);
   var $166=$47;
   var $167=$48;
   var $168=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($166, $167);
   return ((8968)|0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=HEAP8[(20448)];
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=__ZNSt3__1L12init_wmonthsEv();
   HEAP32[((10632)>>2)]=$6;
   HEAP8[(20448)]=1;
   label = 3; break;
  case 3: 
   var $8=HEAP32[((10632)>>2)];
   return $8;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__1L12init_wmonthsEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18;
   var $19;
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   var $30;
   var $31;
   var $32;
   var $33;
   var $34;
   var $35;
   var $36;
   var $37;
   var $38;
   var $39;
   var $40;
   var $41;
   var $42;
   var $43;
   var $44;
   var $45;
   var $46;
   var $47;
   var $48;
   var $49;
   var $50;
   var $51;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $52;
   var $53;
   var $54;
   var $55;
   var $56;
   var $57;
   var $58=HEAP8[(20368)];
   var $59=(($58 << 24) >> 24)==0;
   if ($59) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $62 = ((8224)|0);label = 3; break;
  case 3: 
   var $62;
   $57=$62;
   var $63=$57;
   $56=$63;
   var $64=$56;
   var $65=$64;
   var $66=(($64)|0);
   $55=$66;
   var $67=$55;
   $54=$67;
   var $68=$54;
   var $69=$68;
   $53=$69;
   var $70=$53;
   var $71=$70;
   $52=$71;
   var $72=$52;
   var $73=(($70)|0);
   $51=$64;
   var $74=$51;
   var $75=(($74)|0);
   $50=$75;
   var $76=$50;
   var $77=$76;
   $49=$77;
   var $78=$49;
   var $79=(($78)|0);
   var $80=(($79)|0);
   var $81=$80;
   var $82=(($81)|0);
   $__a_i_i_i=$82;
   $__i_i_i_i=0;
   label = 4; break;
  case 4: 
   var $84=$__i_i_i_i;
   var $85=(($84)>>>(0)) < 3;
   if ($85) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $87=$__i_i_i_i;
   var $88=$__a_i_i_i;
   var $89=(($88+($87<<2))|0);
   HEAP32[(($89)>>2)]=0;
   var $90=$__i_i_i_i;
   var $91=((($90)+(1))|0);
   $__i_i_i_i=$91;
   label = 4; break;
  case 6: 
   var $92=(($62+12)|0);
   var $93=(($92)|(0))==(((((8512)|0)))|(0));
   if ($93) { label = 7; break; } else { var $62 = $92;label = 3; break; }
  case 7: 
   var $95=_atexit(412, 0, ___dso_handle);
   HEAP8[(20368)]=1;
   label = 8; break;
  case 8: 
   $45=((8224)|0);
   $46=((1568)|0);
   var $97=$45;
   var $98=$46;
   var $99=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($97, $98);
   $43=((8236)|0);
   $44=((1528)|0);
   var $100=$43;
   var $101=$44;
   var $102=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($100, $101);
   $41=((8248)|0);
   $42=((1504)|0);
   var $103=$41;
   var $104=$42;
   var $105=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($103, $104);
   $39=((8260)|0);
   $40=((1360)|0);
   var $106=$39;
   var $107=$40;
   var $108=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($106, $107);
   $37=((8272)|0);
   $38=((1344)|0);
   var $109=$37;
   var $110=$38;
   var $111=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($109, $110);
   $35=((8284)|0);
   $36=((1280)|0);
   var $112=$35;
   var $113=$36;
   var $114=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($112, $113);
   $33=((8296)|0);
   $34=((1256)|0);
   var $115=$33;
   var $116=$34;
   var $117=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($115, $116);
   $31=((8308)|0);
   $32=((1120)|0);
   var $118=$31;
   var $119=$32;
   var $120=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($118, $119);
   $29=((8320)|0);
   $30=((1080)|0);
   var $121=$29;
   var $122=$30;
   var $123=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($121, $122);
   $27=((8332)|0);
   $28=((1048)|0);
   var $124=$27;
   var $125=$28;
   var $126=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($124, $125);
   $25=((8344)|0);
   $26=((1008)|0);
   var $127=$25;
   var $128=$26;
   var $129=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($127, $128);
   $23=((8356)|0);
   $24=((968)|0);
   var $130=$23;
   var $131=$24;
   var $132=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($130, $131);
   $21=((8368)|0);
   $22=((952)|0);
   var $133=$21;
   var $134=$22;
   var $135=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($133, $134);
   $19=((8380)|0);
   $20=((920)|0);
   var $136=$19;
   var $137=$20;
   var $138=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($136, $137);
   $17=((8392)|0);
   $18=((904)|0);
   var $139=$17;
   var $140=$18;
   var $141=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($139, $140);
   $15=((8404)|0);
   $16=((880)|0);
   var $142=$15;
   var $143=$16;
   var $144=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($142, $143);
   $13=((8416)|0);
   $14=((864)|0);
   var $145=$13;
   var $146=$14;
   var $147=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($145, $146);
   $11=((8428)|0);
   $12=((808)|0);
   var $148=$11;
   var $149=$12;
   var $150=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($148, $149);
   $9=((8440)|0);
   $10=((792)|0);
   var $151=$9;
   var $152=$10;
   var $153=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($151, $152);
   $7=((8452)|0);
   $8=((776)|0);
   var $154=$7;
   var $155=$8;
   var $156=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($154, $155);
   $5=((8464)|0);
   $6=((760)|0);
   var $157=$5;
   var $158=$6;
   var $159=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($157, $158);
   $3=((8476)|0);
   $4=((744)|0);
   var $160=$3;
   var $161=$4;
   var $162=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($160, $161);
   $1=((8488)|0);
   $2=((728)|0);
   var $163=$1;
   var $164=$2;
   var $165=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($163, $164);
   $47=((8500)|0);
   $48=((680)|0);
   var $166=$47;
   var $167=$48;
   var $168=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($166, $167);
   return ((8224)|0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=HEAP8[(20520)];
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=__ZNSt3__1L10init_am_pmEv();
   HEAP32[((10736)>>2)]=$6;
   HEAP8[(20520)]=1;
   label = 3; break;
  case 3: 
   var $8=HEAP32[((10736)>>2)];
   return $8;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112_GLOBAL__N_17countofIcEEjPKT_S4_($begin, $end) {
 var label = 0;
 var $1;
 var $2;
 $1=$begin;
 $2=$end;
 var $3=$2;
 var $4=$1;
 var $5=$3;
 var $6=$4;
 var $7=((($5)-($6))|0);
 return $7;
}
function __ZNSt3__112_GLOBAL__N_17countofIwEEjPKT_S4_($begin, $end) {
 var label = 0;
 var $1;
 var $2;
 $1=$begin;
 $2=$end;
 var $3=$2;
 var $4=$1;
 var $5=$3;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=((((($7)|(0)))/(4))&-1);
 return $8;
}
function __ZNSt3__1L10init_am_pmEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14=HEAP8[(20408)];
   var $15=(($14 << 24) >> 24)==0;
   if ($15) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $18 = ((9424)|0);label = 3; break;
  case 3: 
   var $18;
   $13=$18;
   var $19=$13;
   $12=$19;
   var $20=$12;
   var $21=$20;
   var $22=(($20)|0);
   $11=$22;
   var $23=$11;
   $10=$23;
   var $24=$10;
   var $25=$24;
   $9=$25;
   var $26=$9;
   var $27=$26;
   $8=$27;
   var $28=$8;
   var $29=(($26)|0);
   $7=$20;
   var $30=$7;
   var $31=(($30)|0);
   $6=$31;
   var $32=$6;
   var $33=$32;
   $5=$33;
   var $34=$5;
   var $35=(($34)|0);
   var $36=(($35)|0);
   var $37=$36;
   var $38=(($37)|0);
   $__a_i_i_i=$38;
   $__i_i_i_i=0;
   label = 4; break;
  case 4: 
   var $40=$__i_i_i_i;
   var $41=(($40)>>>(0)) < 3;
   if ($41) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $43=$__i_i_i_i;
   var $44=$__a_i_i_i;
   var $45=(($44+($43<<2))|0);
   HEAP32[(($45)>>2)]=0;
   var $46=$__i_i_i_i;
   var $47=((($46)+(1))|0);
   $__i_i_i_i=$47;
   label = 4; break;
  case 6: 
   var $48=(($18+12)|0);
   var $49=(($48)|(0))==(((((9712)|0)))|(0));
   if ($49) { label = 7; break; } else { var $18 = $48;label = 3; break; }
  case 7: 
   var $51=_atexit(408, 0, ___dso_handle);
   HEAP8[(20408)]=1;
   label = 8; break;
  case 8: 
   $1=((9424)|0);
   $2=((1632)|0);
   var $53=$1;
   var $54=$2;
   var $55=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($53, $54);
   $3=((9436)|0);
   $4=((1600)|0);
   var $56=$3;
   var $57=$4;
   var $58=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($56, $57);
   return ((9424)|0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=HEAP8[(20464)];
   var $4=(($3 << 24) >> 24)==0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=__ZNSt3__1L11init_wam_pmEv();
   HEAP32[((10648)>>2)]=$6;
   HEAP8[(20464)]=1;
   label = 3; break;
  case 3: 
   var $8=HEAP32[((10648)>>2)];
   return $8;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__1L11init_wam_pmEv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $__a_i_i_i;
   var $__i_i_i_i;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14=HEAP8[(20384)];
   var $15=(($14 << 24) >> 24)==0;
   if ($15) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $18 = ((8680)|0);label = 3; break;
  case 3: 
   var $18;
   $13=$18;
   var $19=$13;
   $12=$19;
   var $20=$12;
   var $21=$20;
   var $22=(($20)|0);
   $11=$22;
   var $23=$11;
   $10=$23;
   var $24=$10;
   var $25=$24;
   $9=$25;
   var $26=$9;
   var $27=$26;
   $8=$27;
   var $28=$8;
   var $29=(($26)|0);
   $7=$20;
   var $30=$7;
   var $31=(($30)|0);
   $6=$31;
   var $32=$6;
   var $33=$32;
   $5=$33;
   var $34=$5;
   var $35=(($34)|0);
   var $36=(($35)|0);
   var $37=$36;
   var $38=(($37)|0);
   $__a_i_i_i=$38;
   $__i_i_i_i=0;
   label = 4; break;
  case 4: 
   var $40=$__i_i_i_i;
   var $41=(($40)>>>(0)) < 3;
   if ($41) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $43=$__i_i_i_i;
   var $44=$__a_i_i_i;
   var $45=(($44+($43<<2))|0);
   HEAP32[(($45)>>2)]=0;
   var $46=$__i_i_i_i;
   var $47=((($46)+(1))|0);
   $__i_i_i_i=$47;
   label = 4; break;
  case 6: 
   var $48=(($18+12)|0);
   var $49=(($48)|(0))==(((((8968)|0)))|(0));
   if ($49) { label = 7; break; } else { var $18 = $48;label = 3; break; }
  case 7: 
   var $51=_atexit(856, 0, ___dso_handle);
   HEAP8[(20384)]=1;
   label = 8; break;
  case 8: 
   $1=((8680)|0);
   $2=((1760)|0);
   var $53=$1;
   var $54=$2;
   var $55=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($53, $54);
   $3=((8692)|0);
   $4=((1640)|0);
   var $56=$3;
   var $57=$4;
   var $58=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($56, $57);
   return ((8680)|0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   var $12=HEAP8[(20528)];
   var $13=(($12 << 24) >> 24)==0;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $8=10744;
   $9=((2400)|0);
   var $15=$8;
   var $16=$9;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=(($17)|0);
   $5=$19;
   var $20=$5;
   $4=$20;
   var $21=$4;
   var $22=$21;
   $3=$22;
   var $23=$3;
   var $24=$23;
   $2=$24;
   var $25=$2;
   var $26=(($23)|0);
   var $27=$7;
   var $28=$7;
   $1=$28;
   var $29=$1;
   var $30=_strlen($29);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($17, $27, $30);
   var $31=_atexit((896), 10744, ___dso_handle);
   HEAP8[(20528)]=1;
   label = 3; break;
  case 3: 
   return 10744;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   var $12=HEAP8[(20472)];
   var $13=(($12 << 24) >> 24)==0;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $8=10656;
   $9=((2360)|0);
   var $15=$8;
   var $16=$9;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=(($17)|0);
   $5=$19;
   var $20=$5;
   $4=$20;
   var $21=$4;
   var $22=$21;
   $3=$22;
   var $23=$3;
   var $24=$23;
   $2=$24;
   var $25=$2;
   var $26=(($23)|0);
   var $27=$7;
   var $28=$7;
   $1=$28;
   var $29=$1;
   var $30=_wcslen($29);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($17, $27, $30);
   var $31=_atexit((622), 10656, ___dso_handle);
   HEAP8[(20472)]=1;
   label = 3; break;
  case 3: 
   return 10656;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   var $12=HEAP8[(20552)];
   var $13=(($12 << 24) >> 24)==0;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $8=10792;
   $9=((2344)|0);
   var $15=$8;
   var $16=$9;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=(($17)|0);
   $5=$19;
   var $20=$5;
   $4=$20;
   var $21=$4;
   var $22=$21;
   $3=$22;
   var $23=$3;
   var $24=$23;
   $2=$24;
   var $25=$2;
   var $26=(($23)|0);
   var $27=$7;
   var $28=$7;
   $1=$28;
   var $29=$1;
   var $30=_strlen($29);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($17, $27, $30);
   var $31=_atexit((896), 10792, ___dso_handle);
   HEAP8[(20552)]=1;
   label = 3; break;
  case 3: 
   return 10792;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   var $12=HEAP8[(20496)];
   var $13=(($12 << 24) >> 24)==0;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $8=10704;
   $9=((2280)|0);
   var $15=$8;
   var $16=$9;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=(($17)|0);
   $5=$19;
   var $20=$5;
   $4=$20;
   var $21=$4;
   var $22=$21;
   $3=$22;
   var $23=$3;
   var $24=$23;
   $2=$24;
   var $25=$2;
   var $26=(($23)|0);
   var $27=$7;
   var $28=$7;
   $1=$28;
   var $29=$1;
   var $30=_wcslen($29);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($17, $27, $30);
   var $31=_atexit((622), 10704, ___dso_handle);
   HEAP8[(20496)]=1;
   label = 3; break;
  case 3: 
   return 10704;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   var $12=HEAP8[(20544)];
   var $13=(($12 << 24) >> 24)==0;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $8=10776;
   $9=((2256)|0);
   var $15=$8;
   var $16=$9;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=(($17)|0);
   $5=$19;
   var $20=$5;
   $4=$20;
   var $21=$4;
   var $22=$21;
   $3=$22;
   var $23=$3;
   var $24=$23;
   $2=$24;
   var $25=$2;
   var $26=(($23)|0);
   var $27=$7;
   var $28=$7;
   $1=$28;
   var $29=$1;
   var $30=_strlen($29);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($17, $27, $30);
   var $31=_atexit((896), 10776, ___dso_handle);
   HEAP8[(20544)]=1;
   label = 3; break;
  case 3: 
   return 10776;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   var $12=HEAP8[(20488)];
   var $13=(($12 << 24) >> 24)==0;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $8=10688;
   $9=((2168)|0);
   var $15=$8;
   var $16=$9;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=(($17)|0);
   $5=$19;
   var $20=$5;
   $4=$20;
   var $21=$4;
   var $22=$21;
   $3=$22;
   var $23=$3;
   var $24=$23;
   $2=$24;
   var $25=$2;
   var $26=(($23)|0);
   var $27=$7;
   var $28=$7;
   $1=$28;
   var $29=$1;
   var $30=_wcslen($29);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($17, $27, $30);
   var $31=_atexit((622), 10688, ___dso_handle);
   HEAP8[(20488)]=1;
   label = 3; break;
  case 3: 
   return 10688;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   var $12=HEAP8[(20536)];
   var $13=(($12 << 24) >> 24)==0;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $8=10760;
   $9=((2152)|0);
   var $15=$8;
   var $16=$9;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=(($17)|0);
   $5=$19;
   var $20=$5;
   $4=$20;
   var $21=$4;
   var $22=$21;
   $3=$22;
   var $23=$3;
   var $24=$23;
   $2=$24;
   var $25=$2;
   var $26=(($23)|0);
   var $27=$7;
   var $28=$7;
   $1=$28;
   var $29=$1;
   var $30=_strlen($29);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($17, $27, $30);
   var $31=_atexit((896), 10760, ___dso_handle);
   HEAP8[(20536)]=1;
   label = 3; break;
  case 3: 
   return 10760;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   $10=$this;
   var $11=$10;
   var $12=HEAP8[(20480)];
   var $13=(($12 << 24) >> 24)==0;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $8=10672;
   $9=((2104)|0);
   var $15=$8;
   var $16=$9;
   $6=$15;
   $7=$16;
   var $17=$6;
   var $18=$17;
   var $19=(($17)|0);
   $5=$19;
   var $20=$5;
   $4=$20;
   var $21=$4;
   var $22=$21;
   $3=$22;
   var $23=$3;
   var $24=$23;
   $2=$24;
   var $25=$2;
   var $26=(($23)|0);
   var $27=$7;
   var $28=$7;
   $1=$28;
   var $29=$1;
   var $30=_wcslen($29);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($17, $27, $30);
   var $31=_atexit((622), 10672, ___dso_handle);
   HEAP8[(20480)]=1;
   label = 3; break;
  case 3: 
   return 10672;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=__stackBase__;
 var $8;
 var $9=(__stackBase__)+(8);
 var $10;
 var $__p;
 $10=$__vp;
 var $11=$10;
 var $12=$11;
 $__p=$12;
 var $13=$__p;
 $8=$13;
 var $14=$8;
 var $tmp_i=$7;
 var $tmp1_i=$9;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
 $6=$14;
 var $15=$6;
 var $16=(($15)|0);
 $5=$16;
 var $17=$5;
 var $18=(($17)|0);
 var $19=$18;
 $4=$19;
 var $20=$4;
 var $21=(($20)|0);
 $1=$21;
 var $22=$1;
 $3=$22;
 var $23=$3;
 $2=$23;
 var $24=$2;
 __ZNKSt3__112_GLOBAL__N_111__fake_bindclEv($24);
 STACKTOP = __stackBase__;
 return;
}
function __ZNKSt3__112_GLOBAL__N_111__fake_bindclEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+4)|0);
   var $ld$0$0=(($3)|0);
   var $4$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($3+4)|0);
   var $4$1=HEAP32[(($ld$1$1)>>2)];
   var $5=(($2)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$4$1;
   var $8=$6;
   var $9=(($8+$7)|0);
   var $10=$9;
   var $11=$4$0;
   var $12=$11 & 1;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=$10;
   var $16=HEAP32[(($15)>>2)];
   var $17=((($11)-(1))|0);
   var $18=(($16+$17)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $24 = $20;label = 4; break;
  case 3: 
   var $22=$11;
   var $24 = $22;label = 4; break;
  case 4: 
   var $24;
   FUNCTION_TABLE[$24]($10);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15tupleIJNS_12_GLOBAL__N_111__fake_bindEEEC2IJS2_ELb0EEEDpOT_($this, $__u) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4=__stackBase__;
 var $5=(__stackBase__)+(8);
 var $6=(__stackBase__)+(16);
 var $7=(__stackBase__)+(24);
 $2=$this;
 $3=$__u;
 var $8=$2;
 var $9=(($8)|0);
 var $10=$3;
 $1=$10;
 var $11=$1;
 __ZNSt3__112__tuple_implINS_15__tuple_indicesIJLj0EEEEJNS_12_GLOBAL__N_111__fake_bindEEEC2IJLj0EEJS4_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS8_IJDpT2_EEEDpOT3_($9, $4, $5, $6, $7, $11);
 STACKTOP = __stackBase__;
 return;
}
function __ZNSt3__112__tuple_implINS_15__tuple_indicesIJLj0EEEEJNS_12_GLOBAL__N_111__fake_bindEEEC2IJLj0EEJS4_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS8_IJDpT2_EEEDpOT3_($this, $0, $1, $2, $3, $__u) {
 var label = 0;
 var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0 = STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);;;HEAP8[($0)]=HEAP8[(tempParam)];
 var tempParam = $1; $1 = STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);;;HEAP8[($1)]=HEAP8[(tempParam)];
 var tempParam = $2; $2 = STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);;;HEAP8[($2)]=HEAP8[(tempParam)];
 var tempParam = $3; $3 = STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);;;HEAP8[($3)]=HEAP8[(tempParam)];
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 $9=$this;
 $10=$__u;
 var $11=$9;
 var $12=$11;
 var $13=$10;
 $8=$13;
 var $14=$8;
 $6=$12;
 $7=$14;
 var $15=$6;
 var $16=(($15)|0);
 var $17=$7;
 $5=$17;
 var $18=$5;
 var $19=$16;
 var $20=$18;
 assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 STACKTOP = __stackBase__;
 return;
}
function __ZNSt3__117__call_once_paramINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEC2EOS4_($this, $__f) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $2=$this;
 $3=$__f;
 var $4=$2;
 var $5=(($4)|0);
 var $6=$3;
 $1=$6;
 var $7=$1;
 __ZNSt3__15tupleIJNS_12_GLOBAL__N_111__fake_bindEEEC2IS3_Lb0EEEOT_($5, $7);
 return;
}
function __ZNSt3__15tupleIJNS_12_GLOBAL__N_111__fake_bindEEEC2IS3_Lb0EEEOT_($this, $__t) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $2=$this;
 $3=$__t;
 var $4=$2;
 var $5=(($4)|0);
 var $6=$3;
 $1=$6;
 var $7=$1;
 __ZNSt3__112__tuple_implINS_15__tuple_indicesIJLj0EEEEJNS_12_GLOBAL__N_111__fake_bindEEEC2INS_5tupleIJS4_EEEvEEOT_($5, $7);
 return;
}
function __ZNSt3__112__tuple_implINS_15__tuple_indicesIJLj0EEEEJNS_12_GLOBAL__N_111__fake_bindEEEC2INS_5tupleIJS4_EEEvEEOT_($this, $__t) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 $7=$this;
 $8=$__t;
 var $9=$7;
 var $10=$9;
 var $11=$8;
 $6=$11;
 var $12=$6;
 var $13=(($12)|0);
 var $14=$13;
 $5=$14;
 var $15=$5;
 var $16=(($15)|0);
 $1=$16;
 var $17=$1;
 $3=$10;
 $4=$17;
 var $18=$3;
 var $19=(($18)|0);
 var $20=$4;
 $2=$20;
 var $21=$2;
 var $22=$19;
 var $23=$21;
 assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
 return;
}
// WARNING: content after a branch in a label, line: 2496
// WARNING: content after a branch in a label, line: 2498
// WARNING: content after a branch in a label, line: 2499
// WARNING: content after a branch in a label, line: 2589
// WARNING: content after a branch in a label, line: 2591
// WARNING: content after a branch in a label, line: 2592
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $__n) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7=__stackBase__;
   var $8;
   var $9;
   var $10=(__stackBase__)+(8);
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17;
   var $18=(__stackBase__)+(16);
   var $__ms_i;
   var $__cap_i;
   var $19=(__stackBase__)+(24);
   var $20;
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $__a;
   var $__v=(__stackBase__)+(32);
   var $29;
   var $30;
   $27=$this;
   $28=$__n;
   var $31=$27;
   var $32=$31;
   $26=$32;
   var $33=$26;
   var $34=(($33+8)|0);
   $25=$34;
   var $35=$25;
   var $36=$35;
   $24=$36;
   var $37=$24;
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$31;
   var $41=(($40+4)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$39;
   var $44=$42;
   var $45=((($43)-($44))|0);
   var $46=((((($45)|(0)))/(4))&-1);
   var $47=$28;
   var $48=(($46)>>>(0)) >= (($47)>>>(0));
   if ($48) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $50=$28;
   __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($31, $50);
   label = 15; break;
  case 3: 
   var $52=$31;
   $23=$52;
   var $53=$23;
   var $54=(($53+8)|0);
   $22=$54;
   var $55=$22;
   var $56=$55;
   $21=$56;
   var $57=$21;
   var $58=(($57+8)|0);
   $__a=$58;
   $20=$31;
   var $59=$20;
   var $60=$59;
   var $61=(($60+4)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$59;
   var $64=(($63)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=$62;
   var $67=$65;
   var $68=((($66)-($67))|0);
   var $69=((((($68)|(0)))/(4))&-1);
   var $70=$28;
   var $71=((($69)+($70))|0);
   $17=$31;
   HEAP32[(($18)>>2)]=$71;
   var $72=$17;
   var $73=__ZNKSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($72);
   $__ms_i=$73;
   var $74=HEAP32[(($18)>>2)];
   var $75=$__ms_i;
   var $76=(($74)>>>(0)) > (($75)>>>(0));
   if ($76) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $78=$72;
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($78);
   label = 5; break;
  case 5: 
   $15=$72;
   var $80=$15;
   var $81=$80;
   $14=$81;
   var $82=$14;
   $13=$82;
   var $83=$13;
   var $84=(($83+8)|0);
   $12=$84;
   var $85=$12;
   var $86=$85;
   $11=$86;
   var $87=$11;
   var $88=(($87)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($82)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=$89;
   var $93=$91;
   var $94=((($92)-($93))|0);
   var $95=((((($94)|(0)))/(4))&-1);
   $__cap_i=$95;
   var $96=$__cap_i;
   var $97=$__ms_i;
   var $98=Math.floor(((($97)>>>(0)))/(2));
   var $99=(($96)>>>(0)) >= (($98)>>>(0));
   if ($99) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $101=$__ms_i;
   $16=$101;
   label = 11; break;
  case 7: 
   var $103=$__cap_i;
   var $104=($103<<1);
   HEAP32[(($19)>>2)]=$104;
   $8=$19;
   $9=$18;
   var $105=$8;
   var $106=$9;
   var $tmp_i_i=$7;
   var $tmp1_i_i=$10;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $5=$105;
   $6=$106;
   var $107=$5;
   var $108=$6;
   $2=$7;
   $3=$107;
   $4=$108;
   var $109=$2;
   var $110=$3;
   var $111=HEAP32[(($110)>>2)];
   var $112=$4;
   var $113=HEAP32[(($112)>>2)];
   var $114=(($111)>>>(0)) < (($113)>>>(0));
   if ($114) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $116=$6;
   var $119 = $116;label = 10; break;
  case 9: 
   var $118=$5;
   var $119 = $118;label = 10; break;
  case 10: 
   var $119;
   var $120=HEAP32[(($119)>>2)];
   $16=$120;
   label = 11; break;
  case 11: 
   var $121=$16;
   $1=$31;
   var $122=$1;
   var $123=$122;
   var $124=(($123+4)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=$122;
   var $127=(($126)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=$125;
   var $130=$128;
   var $131=((($129)-($130))|0);
   var $132=((((($131)|(0)))/(4))&-1);
   var $133=$__a;
   __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC1EjjS6_($__v, $121, $132, $133);
   var $134=$28;
   (function() { try { __THREW__ = 0; return __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($__v, $134) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 14; break; }
  case 12: 
   (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($31, $__v) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 14; break; }
  case 13: 
   __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED1Ev($__v);
   label = 15; break;
  case 14: 
   var $138$0 = ___cxa_find_matching_catch(-1, -1); $138$1 = tempRet0;
   var $139=$138$0;
   $29=$139;
   var $140=$138$1;
   $30=$140;
   __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED1Ev($__v);
   label = 16; break;
  case 15: 
   STACKTOP = __stackBase__;
   return;
  case 16: 
   var $143=$29;
   var $144=$30;
   var $145$0=$143;
   var $145$1=0;
   var $146$0=$145$0;
   var $146$1=$144;
   ___resumeException($146$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4=__stackBase__;
   var $5;
   var $6;
   var $7=(__stackBase__)+(8);
   var $8=(__stackBase__)+(16);
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $__a;
   $12=$this;
   $13=$__n;
   var $14=$12;
   var $15=$14;
   $11=$15;
   var $16=$11;
   var $17=(($16+8)|0);
   $10=$17;
   var $18=$10;
   var $19=$18;
   $9=$19;
   var $20=$9;
   var $21=(($20+8)|0);
   $__a=$21;
   label = 2; break;
  case 2: 
   var $23=$__a;
   var $24=$14;
   var $25=(($24+4)|0);
   var $26=HEAP32[(($25)>>2)];
   $1=$26;
   var $27=$1;
   $5=$23;
   $6=$27;
   var $28=$8;
   var $29=$5;
   var $30=$6;
   var $tmp_i=$4;
   var $tmp1_i=$7;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $2=$29;
   $3=$30;
   var $31=$3;
   var $32=$31;
   var $33=(($32)|(0))==0;
   if ($33) { var $36 = 0;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $35=$32;
   HEAP32[(($35)>>2)]=0;
   var $36 = $35;label = 4; break;
  case 4: 
   var $36;
   var $37=$14;
   var $38=(($37+4)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+4)|0);
   HEAP32[(($38)>>2)]=$40;
   var $41=$13;
   var $42=((($41)-(1))|0);
   $13=$42;
   label = 5; break;
  case 5: 
   var $44=$13;
   var $45=(($44)>>>(0)) > 0;
   if ($45) { label = 2; break; } else { label = 6; break; }
  case 6: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC1EjjS6_($this, $__cap, $__start, $__a) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$this;
 $2=$__cap;
 $3=$__start;
 $4=$__a;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=$4;
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($5, $6, $7, $8);
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4=__stackBase__;
   var $5;
   var $6;
   var $7=(__stackBase__)+(8);
   var $8=(__stackBase__)+(16);
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $__a;
   $12=$this;
   $13=$__n;
   var $14=$12;
   $11=$14;
   var $15=$11;
   var $16=(($15+12)|0);
   $10=$16;
   var $17=$10;
   var $18=$17;
   $9=$18;
   var $19=$9;
   var $20=(($19+4)|0);
   var $21=HEAP32[(($20)>>2)];
   $__a=$21;
   label = 2; break;
  case 2: 
   var $23=$__a;
   var $24=(($14+8)|0);
   var $25=HEAP32[(($24)>>2)];
   $1=$25;
   var $26=$1;
   $5=$23;
   $6=$26;
   var $27=$8;
   var $28=$5;
   var $29=$6;
   var $tmp_i=$4;
   var $tmp1_i=$7;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $2=$28;
   $3=$29;
   var $30=$3;
   var $31=$30;
   var $32=(($31)|(0))==0;
   if ($32) { var $35 = 0;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $34=$31;
   HEAP32[(($34)>>2)]=0;
   var $35 = $34;label = 4; break;
  case 4: 
   var $35;
   var $36=(($14+8)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37+4)|0);
   HEAP32[(($36)>>2)]=$38;
   var $39=$13;
   var $40=((($39)-(1))|0);
   $13=$40;
   label = 5; break;
  case 5: 
   var $42=$13;
   var $43=(($42)>>>(0)) > 0;
   if ($43) { label = 2; break; } else { label = 6; break; }
  case 6: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $_Np_i;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $__t_i2=__stackBase__;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $__t_i1=(__stackBase__)+(8);
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $__t_i=(__stackBase__)+(16);
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 $30=$this;
 $31=$__v;
 var $32=$30;
 var $33=$32;
 $29=$33;
 var $34=$29;
 var $35=(($34+8)|0);
 $28=$35;
 var $36=$28;
 var $37=$36;
 $27=$37;
 var $38=$27;
 var $39=(($38+8)|0);
 var $40=$32;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$32;
 var $44=(($43+4)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$31;
 var $47=(($46+4)|0);
 $1=$39;
 $2=$42;
 $3=$45;
 $4=$47;
 var $48=$3;
 var $49=$2;
 var $50=$48;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=((((($52)|(0)))/(4))&-1);
 $_Np_i=$53;
 var $54=$_Np_i;
 var $55=$4;
 var $56=HEAP32[(($55)>>2)];
 var $57=(((-$54))|0);
 var $58=(($56+($57<<2))|0);
 HEAP32[(($55)>>2)]=$58;
 var $59=$4;
 var $60=HEAP32[(($59)>>2)];
 var $61=$60;
 var $62=$2;
 var $63=$62;
 var $64=$_Np_i;
 var $65=($64<<2);
 assert($65 % 1 === 0);(_memcpy($61, $63, $65)|0);
 var $66=$32;
 var $67=(($66)|0);
 var $68=$31;
 var $69=(($68+4)|0);
 $8=$67;
 $9=$69;
 var $70=$8;
 $7=$70;
 var $71=$7;
 var $72=HEAP32[(($71)>>2)];
 HEAP32[(($__t_i2)>>2)]=$72;
 var $73=$9;
 $5=$73;
 var $74=$5;
 var $75=HEAP32[(($74)>>2)];
 var $76=$8;
 HEAP32[(($76)>>2)]=$75;
 $6=$__t_i2;
 var $77=$6;
 var $78=HEAP32[(($77)>>2)];
 var $79=$9;
 HEAP32[(($79)>>2)]=$78;
 var $80=$32;
 var $81=(($80+4)|0);
 var $82=$31;
 var $83=(($82+8)|0);
 $13=$81;
 $14=$83;
 var $84=$13;
 $12=$84;
 var $85=$12;
 var $86=HEAP32[(($85)>>2)];
 HEAP32[(($__t_i1)>>2)]=$86;
 var $87=$14;
 $10=$87;
 var $88=$10;
 var $89=HEAP32[(($88)>>2)];
 var $90=$13;
 HEAP32[(($90)>>2)]=$89;
 $11=$__t_i1;
 var $91=$11;
 var $92=HEAP32[(($91)>>2)];
 var $93=$14;
 HEAP32[(($93)>>2)]=$92;
 var $94=$32;
 $17=$94;
 var $95=$17;
 var $96=(($95+8)|0);
 $16=$96;
 var $97=$16;
 var $98=$97;
 $15=$98;
 var $99=$15;
 var $100=(($99)|0);
 var $101=$31;
 $20=$101;
 var $102=$20;
 var $103=(($102+12)|0);
 $19=$103;
 var $104=$19;
 var $105=$104;
 $18=$105;
 var $106=$18;
 var $107=(($106)|0);
 $24=$100;
 $25=$107;
 var $108=$24;
 $23=$108;
 var $109=$23;
 var $110=HEAP32[(($109)>>2)];
 HEAP32[(($__t_i)>>2)]=$110;
 var $111=$25;
 $21=$111;
 var $112=$21;
 var $113=HEAP32[(($112)>>2)];
 var $114=$24;
 HEAP32[(($114)>>2)]=$113;
 $22=$__t_i;
 var $115=$22;
 var $116=HEAP32[(($115)>>2)];
 var $117=$25;
 HEAP32[(($117)>>2)]=$116;
 var $118=$31;
 var $119=(($118+4)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$31;
 var $122=(($121)|0);
 HEAP32[(($122)>>2)]=$120;
 $26=$32;
 var $123=$26;
 STACKTOP = __stackBase__;
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16=__stackBase__;
   var $17;
   var $18;
   var $19=(__stackBase__)+(8);
   var $20=(__stackBase__)+(16);
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26=(__stackBase__)+(24);
   var $27;
   var $28;
   var $29=(__stackBase__)+(32);
   var $30;
   var $31;
   $31=$this;
   var $32=$31;
   $30=$32;
   var $33=$30;
   var $34=(($33+4)|0);
   var $35=HEAP32[(($34)>>2)];
   $27=$33;
   $28=$35;
   var $36=$27;
   var $37=$28;
   var $tmp_i_i=$26;
   var $tmp1_i_i=$29;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $24=$36;
   $25=$37;
   var $38=$24;
   label = 2; break;
  case 2: 
   var $40=$25;
   var $41=(($38+8)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($40)|(0))!=(($42)|(0));
   if ($43) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $23=$38;
   var $45=$23;
   var $46=(($45+12)|0);
   $22=$46;
   var $47=$22;
   var $48=$47;
   $21=$48;
   var $49=$21;
   var $50=(($49+4)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($38+8)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=((($53)-(4))|0);
   HEAP32[(($52)>>2)]=$54;
   $17=$51;
   $18=$54;
   var $55=$20;
   var $56=$17;
   var $57=$18;
   var $tmp_i_i_i_i=$16;
   var $tmp1_i_i_i_i=$19;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i)];
   $14=$56;
   $15=$57;
   var $58=$15;
   label = 2; break;
  case 4: 
   var $59=(($32)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($60)|(0))!=0;
   if ($61) { label = 5; break; } else { label = 10; break; }
  case 5: 
   $7=$32;
   var $63=$7;
   var $64=(($63+12)|0);
   $6=$64;
   var $65=$6;
   var $66=$65;
   $5=$66;
   var $67=$5;
   var $68=(($67+4)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($32)|0);
   var $71=HEAP32[(($70)>>2)];
   $4=$32;
   var $72=$4;
   $3=$72;
   var $73=$3;
   var $74=(($73+12)|0);
   $2=$74;
   var $75=$2;
   var $76=$75;
   $1=$76;
   var $77=$1;
   var $78=(($77)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($72)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$79;
   var $83=$81;
   var $84=((($82)-($83))|0);
   var $85=((((($84)|(0)))/(4))&-1);
   label = 6; break;
  case 6: 
   $11=$69;
   $12=$71;
   $13=$85;
   var $87=$11;
   var $88=$12;
   var $89=$13;
   $8=$87;
   $9=$88;
   $10=$89;
   var $90=$8;
   var $91=$9;
   var $92=(($90)|0);
   var $93=$92;
   var $94=(($91)|(0))==(($93)|(0));
   if ($94) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $96=(($90+112)|0);
   HEAP8[($96)]=0;
   label = 9; break;
  case 8: 
   var $98=$9;
   var $99=$98;
   __ZdlPv($99);
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($this) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3=__stackBase__;
   var $4;
   var $5=(__stackBase__)+(8);
   var $6=(__stackBase__)+(16);
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12=(__stackBase__)+(24);
   var $13;
   var $14;
   var $15=(__stackBase__)+(32);
   var $16;
   var $17;
   var $18;
   var $19;
   var $20=(__stackBase__)+(40);
   var $21=(__stackBase__)+(48);
   $19=$this;
   var $22=$19;
   var $23=$22;
   $18=$23;
   var $24=$18;
   var $25=(($24+8)|0);
   $17=$25;
   var $26=$17;
   var $27=$26;
   $16=$27;
   var $28=$16;
   var $29=(($28+8)|0);
   $4=$29;
   var $30=$6;
   var $31=$4;
   var $tmp_i1=$3;
   var $tmp1_i2=$5;
   assert(1 % 1 === 0);HEAP8[($tmp_i1)]=HEAP8[($tmp1_i2)];
   $2=$31;
   var $32=$2;
   $1=$32;
   var $33=$1;
   label = 2; break;
  case 2: 
   HEAP32[(($20)>>2)]=1073741823;
   var $35=Math.floor(2147483647);
   HEAP32[(($21)>>2)]=$35;
   $13=$20;
   $14=$21;
   var $36=$13;
   var $37=$14;
   var $tmp_i=$12;
   var $tmp1_i=$15;
   assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp1_i)];
   $10=$36;
   $11=$37;
   var $38=$11;
   var $39=$10;
   $7=$12;
   $8=$38;
   $9=$39;
   var $40=$7;
   var $41=$8;
   var $42=HEAP32[(($41)>>2)];
   var $43=$9;
   var $44=HEAP32[(($43)>>2)];
   var $45=(($42)>>>(0)) < (($44)>>>(0));
   if ($45) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $47=$11;
   var $50 = $47;label = 5; break;
  case 4: 
   var $49=$10;
   var $50 = $49;label = 5; break;
  case 5: 
   var $50;
   label = 6; break;
  case 6: 
   var $52=HEAP32[(($50)>>2)];
   STACKTOP = __stackBase__;
   return $52;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this, $__cap, $__start, $__a) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   var $17=__stackBase__;
   var $18;
   var $19;
   var $20;
   var $21=(__stackBase__)+(8);
   var $22;
   var $23;
   var $24;
   var $25;
   var $26;
   var $27;
   var $28;
   var $29;
   $26=$this;
   $27=$__cap;
   $28=$__start;
   $29=$__a;
   var $30=$26;
   var $31=$30;
   var $32=(($30+12)|0);
   var $33=$29;
   $23=$32;
   $24=0;
   $25=$33;
   var $34=$23;
   var $35=$24;
   var $36=$25;
   $20=$34;
   HEAP32[(($21)>>2)]=$35;
   $22=$36;
   var $37=$20;
   var $38=$37;
   $19=$21;
   var $39=$19;
   var $40=HEAP32[(($39)>>2)];
   var $41=$22;
   $13=$41;
   var $42=$13;
   $16=$38;
   HEAP32[(($17)>>2)]=$40;
   $18=$42;
   var $43=$16;
   var $44=(($43)|0);
   $15=$17;
   var $45=$15;
   var $46=HEAP32[(($45)>>2)];
   HEAP32[(($44)>>2)]=$46;
   var $47=(($43+4)|0);
   var $48=$18;
   $14=$48;
   var $49=$14;
   HEAP32[(($47)>>2)]=$49;
   var $50=$27;
   var $51=(($50)|(0))!=0;
   if ($51) { label = 2; break; } else { label = 7; break; }
  case 2: 
   $3=$30;
   var $53=$3;
   var $54=(($53+12)|0);
   $2=$54;
   var $55=$2;
   var $56=$55;
   $1=$56;
   var $57=$1;
   var $58=(($57+4)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=$27;
   $8=$59;
   $9=$60;
   var $61=$8;
   var $62=$9;
   $5=$61;
   $6=$62;
   $7=0;
   var $63=$5;
   var $64=(($63+112)|0);
   var $65=HEAP8[($64)];
   var $66=(($65) & 1);
   if ($66) { label = 5; break; } else { label = 3; break; }
  case 3: 
   var $68=$6;
   var $69=(($68)>>>(0)) <= 28;
   if ($69) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $71=(($63+112)|0);
   HEAP8[($71)]=1;
   var $72=(($63)|0);
   var $73=$72;
   $4=$73;
   label = 6; break;
  case 5: 
   var $75=$6;
   var $76=($75<<2);
   var $77=__Znwj($76);
   var $78=$77;
   $4=$78;
   label = 6; break;
  case 6: 
   var $79=$4;
   var $82 = $79;label = 8; break;
  case 7: 
   var $82 = 0;label = 8; break;
  case 8: 
   var $82;
   var $83=(($30)|0);
   HEAP32[(($83)>>2)]=$82;
   var $84=(($30)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=$28;
   var $87=(($85+($86<<2))|0);
   var $88=(($30+8)|0);
   HEAP32[(($88)>>2)]=$87;
   var $89=(($30+4)|0);
   HEAP32[(($89)>>2)]=$87;
   var $90=(($30)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=$27;
   var $93=(($91+($92<<2))|0);
   $12=$30;
   var $94=$12;
   var $95=(($94+12)|0);
   $11=$95;
   var $96=$11;
   var $97=$96;
   $10=$97;
   var $98=$10;
   var $99=(($98)|0);
   HEAP32[(($99)>>2)]=$93;
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__117__compressed_pairIPNS_6locale5facetENS_12_GLOBAL__N_17releaseEEC2ES3_($this, $__t1) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3=__stackBase__;
 var $4;
 var $5;
 var $6=(__stackBase__)+(8);
 $5=$this;
 HEAP32[(($6)>>2)]=$__t1;
 var $7=$5;
 var $8=$7;
 $4=$6;
 var $9=$4;
 var $10=HEAP32[(($9)>>2)];
 $2=$8;
 HEAP32[(($3)>>2)]=$10;
 var $11=$2;
 var $12=$11;
 var $13=(($11)|0);
 $1=$3;
 var $14=$1;
 var $15=HEAP32[(($14)>>2)];
 HEAP32[(($13)>>2)]=$15;
 STACKTOP = __stackBase__;
 return;
}
function __ZNSt3__112_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($this, $0, $id) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0 = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $2;
 var $3=__stackBase__;
 var $4;
 $2=$this;
 var $ld$0$0=(($0)|0);
 var $pmf$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($0+4)|0);
 var $pmf$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($3)|0);
 HEAP32[(($st$2$0)>>2)]=$pmf$0;
 var $st$3$1=(($3+4)|0);
 HEAP32[(($st$3$1)>>2)]=$pmf$1;
 $4=$id;
 var $5=$2;
 var $6=(($5)|0);
 var $7=$4;
 HEAP32[(($6)>>2)]=$7;
 var $8=(($5+4)|0);
 var $ld$4$0=(($3)|0);
 var $9$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($3+4)|0);
 var $9$1=HEAP32[(($ld$5$1)>>2)];
 var $st$6$0=(($8)|0);
 HEAP32[(($st$6$0)>>2)]=$9$0;
 var $st$7$1=(($8+4)|0);
 HEAP32[(($st$7$1)>>2)]=$9$1;
 STACKTOP = __stackBase__;
 return;
}
function __ZNSt3__112_GLOBAL__N_17releaseclEPNS_6locale5facetE($this, $p) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$p;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=__ZNSt3__114__shared_count16__release_sharedEv($5);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this, $__n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   $13=$this;
   $14=$__n;
   var $15=$13;
   var $16=$14;
   var $17=__ZNKSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($15);
   var $18=(($16)>>>(0)) > (($17)>>>(0));
   if ($18) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $20=$15;
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($20);
   label = 3; break;
  case 3: 
   var $22=$15;
   $12=$22;
   var $23=$12;
   var $24=(($23+8)|0);
   $11=$24;
   var $25=$11;
   var $26=$25;
   $10=$26;
   var $27=$10;
   var $28=(($27+8)|0);
   var $29=$14;
   $5=$28;
   $6=$29;
   var $30=$5;
   var $31=$6;
   $2=$30;
   $3=$31;
   $4=0;
   var $32=$2;
   var $33=(($32+112)|0);
   var $34=HEAP8[($33)];
   var $35=(($34) & 1);
   if ($35) { label = 6; break; } else { label = 4; break; }
  case 4: 
   var $37=$3;
   var $38=(($37)>>>(0)) <= 28;
   if ($38) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $40=(($32+112)|0);
   HEAP8[($40)]=1;
   var $41=(($32)|0);
   var $42=$41;
   $1=$42;
   label = 7; break;
  case 6: 
   var $44=$3;
   var $45=($44<<2);
   var $46=__Znwj($45);
   var $47=$46;
   $1=$47;
   label = 7; break;
  case 7: 
   var $48=$1;
   var $49=$15;
   var $50=(($49+4)|0);
   HEAP32[(($50)>>2)]=$48;
   var $51=$15;
   var $52=(($51)|0);
   HEAP32[(($52)>>2)]=$48;
   var $53=$15;
   var $54=(($53)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$14;
   var $57=(($55+($56<<2))|0);
   var $58=$15;
   $9=$58;
   var $59=$9;
   var $60=(($59+8)|0);
   $8=$60;
   var $61=$8;
   var $62=$61;
   $7=$62;
   var $63=$7;
   var $64=(($63)|0);
   HEAP32[(($64)>>2)]=$57;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this, $__n) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5=__stackBase__;
   var $6;
   var $7;
   var $8=(__stackBase__)+(8);
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16;
   $13=$this;
   $14=$__n;
   var $17=$13;
   var $18=$17;
   $12=$18;
   var $19=$12;
   var $20=$19;
   $11=$20;
   var $21=$11;
   var $22=(($19)|0);
   HEAP32[(($22)>>2)]=0;
   var $23=(($19+4)|0);
   HEAP32[(($23)>>2)]=0;
   var $24=(($19+8)|0);
   $9=$24;
   $10=0;
   var $25=$9;
   var $26=$10;
   $7=$25;
   HEAP32[(($8)>>2)]=$26;
   var $27=$7;
   var $28=$27;
   $6=$8;
   var $29=$6;
   var $30=HEAP32[(($29)>>2)];
   $4=$28;
   HEAP32[(($5)>>2)]=$30;
   var $31=$4;
   var $32=(($31)|0);
   $3=$5;
   var $33=$3;
   var $34=HEAP32[(($33)>>2)];
   HEAP32[(($32)>>2)]=$34;
   var $35=(($31+8)|0);
   $2=$35;
   var $36=$2;
   $1=$36;
   var $37=$1;
   var $38=(($37)|0);
   var $39=(($37+112)|0);
   HEAP8[($39)]=0;
   var $40=$14;
   var $41=(($40)>>>(0)) > 0;
   if ($41) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $43=$14;
   (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($17, $43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $45=$14;
   (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($17, $45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 6; break;
  case 5: 
   var $48$0 = ___cxa_find_matching_catch(-1, -1); $48$1 = tempRet0;
   var $49=$48$0;
   $15=$49;
   var $50=$48$1;
   $16=$50;
   var $51=$17;
   __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($51);
   label = 7; break;
  case 6: 
   STACKTOP = __stackBase__;
   return;
  case 7: 
   var $54=$15;
   var $55=$16;
   var $56$0=$54;
   var $56$1=0;
   var $57$0=$56$0;
   var $57$1=$55;
   ___resumeException($57$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $11;
   var $12;
   var $13;
   var $14;
   var $15;
   var $16=__stackBase__;
   var $17;
   var $18;
   var $19=(__stackBase__)+(8);
   var $20=(__stackBase__)+(16);
   var $21;
   var $22;
   var $23;
   var $24;
   var $25;
   var $26=(__stackBase__)+(24);
   var $27;
   var $28;
   var $29=(__stackBase__)+(32);
   var $30;
   var $31;
   $31=$this;
   var $32=$31;
   var $33=(($32)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34)|(0))!=0;
   if ($35) { label = 2; break; } else { label = 9; break; }
  case 2: 
   $30=$32;
   var $37=$30;
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   $27=$37;
   $28=$39;
   var $40=$27;
   var $41=$28;
   var $tmp_i_i=$26;
   var $tmp1_i_i=$29;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp1_i_i)];
   $24=$40;
   $25=$41;
   var $42=$24;
   label = 3; break;
  case 3: 
   var $44=$25;
   var $45=(($42+4)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($44)|(0))!=(($46)|(0));
   if ($47) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $23=$42;
   var $49=$23;
   var $50=(($49+8)|0);
   $22=$50;
   var $51=$22;
   var $52=$51;
   $21=$52;
   var $53=$21;
   var $54=(($53+8)|0);
   var $55=(($42+4)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=((($56)-(4))|0);
   HEAP32[(($55)>>2)]=$57;
   $17=$54;
   $18=$57;
   var $58=$20;
   var $59=$17;
   var $60=$18;
   var $tmp_i_i_i_i=$16;
   var $tmp1_i_i_i_i=$19;
   assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp1_i_i_i_i)];
   $14=$59;
   $15=$60;
   var $61=$15;
   label = 3; break;
  case 5: 
   $7=$32;
   var $62=$7;
   var $63=(($62+8)|0);
   $6=$63;
   var $64=$6;
   var $65=$64;
   $5=$65;
   var $66=$5;
   var $67=(($66+8)|0);
   var $68=(($32)|0);
   var $69=HEAP32[(($68)>>2)];
   $4=$32;
   var $70=$4;
   $3=$70;
   var $71=$3;
   var $72=(($71+8)|0);
   $2=$72;
   var $73=$2;
   var $74=$73;
   $1=$74;
   var $75=$1;
   var $76=(($75)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($70)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=$77;
   var $81=$79;
   var $82=((($80)-($81))|0);
   var $83=((((($82)|(0)))/(4))&-1);
   $11=$67;
   $12=$69;
   $13=$83;
   var $84=$11;
   var $85=$12;
   var $86=$13;
   $8=$84;
   $9=$85;
   $10=$86;
   var $87=$8;
   var $88=$9;
   var $89=(($87)|0);
   var $90=$89;
   var $91=(($88)|(0))==(($90)|(0));
   if ($91) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $93=(($87+112)|0);
   HEAP8[($93)]=0;
   label = 8; break;
  case 7: 
   var $95=$9;
   var $96=$95;
   __ZdlPv($96);
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   STACKTOP = __stackBase__;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor($0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   $2=$0;
   var $4 = ((8968)|0);label = 2; break;
  case 2: 
   var $4;
   var $5=((($4)-(12))|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
   var $6=(($5)|(0))==(((((8680)|0)))|(0));
   if ($6) { label = 3; break; } else { var $4 = $5;label = 2; break; }
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor53($0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   $2=$0;
   var $4 = ((9712)|0);label = 2; break;
  case 2: 
   var $4;
   var $5=((($4)-(12))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
   var $6=(($5)|(0))==(((((9424)|0)))|(0));
   if ($6) { label = 3; break; } else { var $4 = $5;label = 2; break; }
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor56($0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   $2=$0;
   var $4 = ((8512)|0);label = 2; break;
  case 2: 
   var $4;
   var $5=((($4)-(12))|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
   var $6=(($5)|(0))==(((((8224)|0)))|(0));
   if ($6) { label = 3; break; } else { var $4 = $5;label = 2; break; }
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor81($0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   $2=$0;
   var $4 = ((9256)|0);label = 2; break;
  case 2: 
   var $4;
   var $5=((($4)-(12))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
   var $6=(($5)|(0))==(((((8968)|0)))|(0));
   if ($6) { label = 3; break; } else { var $4 = $5;label = 2; break; }
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor105($0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   $2=$0;
   var $4 = ((8680)|0);label = 2; break;
  case 2: 
   var $4;
   var $5=((($4)-(12))|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
   var $6=(($5)|(0))==(((((8512)|0)))|(0));
   if ($6) { label = 3; break; } else { var $4 = $5;label = 2; break; }
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor120($0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   $2=$0;
   var $4 = ((9424)|0);label = 2; break;
  case 2: 
   var $4;
   var $5=((($4)-(12))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
   var $6=(($5)|(0))==(((((9256)|0)))|(0));
   if ($6) { label = 3; break; } else { var $4 = $5;label = 2; break; }
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($3);
 return;
}
function _mbrlen($s, $n, $st) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$s;
   $2=$n;
   $3=$st;
   var $4=$1;
   var $5=$2;
   var $6=$3;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$3;
   var $12 = $9;label = 4; break;
  case 3: 
   var $12 = 112;label = 4; break;
  case 4: 
   var $12;
   var $13=_mbrtowc(0, $4, $5, $12);
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _mbrtowc($wc, $src, $n, $st) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2=__stackBase__;
   var $3;
   var $4;
   var $5;
   var $c;
   var $s;
   var $N;
   HEAP32[(($2)>>2)]=$wc;
   $3=$src;
   $4=$n;
   $5=$st;
   var $6=$3;
   $s=$6;
   var $7=$4;
   $N=$7;
   var $8=$5;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $5=104;
   label = 3; break;
  case 3: 
   var $12=$5;
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   $c=$14;
   var $15=$s;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $18=$c;
   var $19=(($18)|(0))!=0;
   if ($19) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 30; break;
  case 6: 
   $1=0;
   label = 31; break;
  case 7: 
   var $23=HEAP32[(($2)>>2)];
   var $24=(($23)|(0))!=0;
   if ($24) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $26=$2;
   var $27=$26;
   HEAP32[(($2)>>2)]=$27;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $30=$4;
   var $31=(($30)|(0))!=0;
   if ($31) { label = 12; break; } else { label = 11; break; }
  case 11: 
   $1=-2;
   label = 31; break;
  case 12: 
   var $34=$c;
   var $35=(($34)|(0))!=0;
   if ($35) { label = 18; break; } else { label = 13; break; }
  case 13: 
   var $37=$s;
   var $38=HEAP8[($37)];
   var $39=(($38)&(255));
   var $40=(($39)|(0)) < 128;
   if ($40) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $42=$s;
   var $43=HEAP8[($42)];
   var $44=(($43)&(255));
   var $45=HEAP32[(($2)>>2)];
   HEAP32[(($45)>>2)]=$44;
   var $46=(($44)|(0))!=0;
   var $47=$46 ^ 1;
   var $48=$47 ^ 1;
   var $49=(($48)&(1));
   $1=$49;
   label = 31; break;
  case 15: 
   var $51=$s;
   var $52=HEAP8[($51)];
   var $53=(($52)&(255));
   var $54=((($53)-(194))|0);
   var $55=(($54)>>>(0)) > 50;
   if ($55) { label = 16; break; } else { label = 17; break; }
  case 16: 
   label = 30; break;
  case 17: 
   var $58=$s;
   var $59=(($58+1)|0);
   $s=$59;
   var $60=HEAP8[($58)];
   var $61=(($60)&(255));
   var $62=((($61)-(194))|0);
   var $63=((___fsmu8+($62<<2))|0);
   var $64=((((HEAPU8[($63)])|(HEAPU8[((($63)+(1))|0)]<<8)|(HEAPU8[((($63)+(2))|0)]<<16)|(HEAPU8[((($63)+(3))|0)]<<24))|(0)));
   $c=$64;
   var $65=$4;
   var $66=((($65)-(1))|0);
   $4=$66;
   label = 18; break;
  case 18: 
   var $68=$4;
   var $69=(($68)|(0))!=0;
   if ($69) { label = 19; break; } else { label = 29; break; }
  case 19: 
   var $71=$s;
   var $72=HEAP8[($71)];
   var $73=(($72)&(255));
   var $74=$73 >> 3;
   var $75=((($74)-(16))|0);
   var $76=$s;
   var $77=HEAP8[($76)];
   var $78=(($77)&(255));
   var $79=$78 >> 3;
   var $80=$c;
   var $81=$80 >> 26;
   var $82=((($79)+($81))|0);
   var $83=$75 | $82;
   var $84=$83 & -8;
   var $85=(($84)|(0))!=0;
   if ($85) { label = 20; break; } else { label = 21; break; }
  case 20: 
   label = 30; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $89=$c;
   var $90=$89 << 6;
   var $91=$s;
   var $92=(($91+1)|0);
   $s=$92;
   var $93=HEAP8[($91)];
   var $94=(($93)&(255));
   var $95=((($94)-(128))|0);
   var $96=$90 | $95;
   $c=$96;
   var $97=$4;
   var $98=((($97)-(1))|0);
   $4=$98;
   var $99=$c;
   var $100=$99 & -2147483648;
   var $101=(($100)|(0))!=0;
   if ($101) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $103=$5;
   var $104=$103;
   HEAP32[(($104)>>2)]=0;
   var $105=$c;
   var $106=HEAP32[(($2)>>2)];
   HEAP32[(($106)>>2)]=$105;
   var $107=$N;
   var $108=$4;
   var $109=((($107)-($108))|0);
   $1=$109;
   label = 31; break;
  case 24: 
   var $111=$4;
   var $112=(($111)|(0))!=0;
   if ($112) { label = 25; break; } else { label = 28; break; }
  case 25: 
   var $114=$s;
   var $115=HEAP8[($114)];
   var $116=(($115)&(255));
   var $117=((($116)-(128))|0);
   var $118=(($117)>>>(0)) >= 64;
   if ($118) { label = 26; break; } else { label = 27; break; }
  case 26: 
   label = 30; break;
  case 27: 
   label = 22; break;
  case 28: 
   label = 29; break;
  case 29: 
   var $123=$c;
   var $124=$5;
   var $125=$124;
   HEAP32[(($125)>>2)]=$123;
   $1=-2;
   label = 31; break;
  case 30: 
   var $127=$5;
   var $128=$127;
   HEAP32[(($128)>>2)]=0;
   var $129=___errno_location();
   HEAP32[(($129)>>2)]=138;
   $1=-1;
   label = 31; break;
  case 31: 
   var $131=$1;
   STACKTOP = __stackBase__;
   return $131;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110unique_ptrINS_6locale5facetENS_12_GLOBAL__N_17releaseEED2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $__tmp_i;
   var $9;
   $9=$this;
   var $10=$9;
   $7=$10;
   $8=0;
   var $11=$7;
   var $12=(($11)|0);
   $6=$12;
   var $13=$6;
   var $14=$13;
   $5=$14;
   var $15=$5;
   var $16=(($15)|0);
   var $17=HEAP32[(($16)>>2)];
   $__tmp_i=$17;
   var $18=$8;
   var $19=(($11)|0);
   $4=$19;
   var $20=$4;
   var $21=$20;
   $3=$21;
   var $22=$3;
   var $23=(($22)|0);
   HEAP32[(($23)>>2)]=$18;
   var $24=$__tmp_i;
   var $25=(($24)|(0))!=0;
   if ($25) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $27=(($11)|0);
   $2=$27;
   var $28=$2;
   var $29=$28;
   $1=$29;
   var $30=$1;
   var $31=$30;
   var $32=$__tmp_i;
   (function() { try { __THREW__ = 0; return __ZNSt3__112_GLOBAL__N_17releaseclEPNS_6locale5facetE($31, $32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 4; break; }
  case 3: 
   label = 5; break;
  case 4: 
   var $35$0 = ___cxa_find_matching_catch(-1, -1,0); $35$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110unique_ptrINS_6locale5facetENS_12_GLOBAL__N_17releaseEEC2EPS2_($this, $__p) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3=__stackBase__;
   $2=$this;
   HEAP32[(($3)>>2)]=$__p;
   var $4=$2;
   var $5=(($4)|0);
   $1=$3;
   var $6=$1;
   var $7=HEAP32[(($6)>>2)];
   (function() { try { __THREW__ = 0; return __ZNSt3__117__compressed_pairIPNS_6locale5facetENS_12_GLOBAL__N_17releaseEEC2ES3_($5, $7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   STACKTOP = __stackBase__;
   return;
  case 3: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1,0); $10$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function _mbsnrtowcs($wcs, $src, $n, $wn, $st) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $l;
   var $cnt;
   var $n2;
   var $ws;
   var $wbuf=__stackBase__;
   var $s=(__stackBase__)+(1024);
   $1=$wcs;
   $2=$src;
   $3=$n;
   $4=$wn;
   $5=$st;
   $cnt=0;
   var $6=$2;
   var $7=HEAP32[(($6)>>2)];
   HEAP32[(($s)>>2)]=$7;
   var $8=$1;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=(($wbuf)|0);
   $ws=$11;
   $4=256;
   label = 4; break;
  case 3: 
   var $13=$1;
   $ws=$13;
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $16=HEAP32[(($s)>>2)];
   var $17=(($16)|(0))!=0;
   if ($17) { label = 6; break; } else { var $32 = 0;label = 10; break; }
  case 6: 
   var $19=$4;
   var $20=(($19)|(0))!=0;
   if ($20) { label = 7; break; } else { var $32 = 0;label = 10; break; }
  case 7: 
   var $22=$3;
   var $23=Math.floor(((($22)>>>(0)))/(4));
   $n2=$23;
   var $24=$4;
   var $25=(($23)>>>(0)) >= (($24)>>>(0));
   if ($25) { var $30 = 1;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $27=$n2;
   var $28=(($27)>>>(0)) > 32;
   var $30 = $28;label = 9; break;
  case 9: 
   var $30;
   var $32 = $30;label = 10; break;
  case 10: 
   var $32;
   if ($32) { label = 11; break; } else { label = 18; break; }
  case 11: 
   var $34=$n2;
   var $35=$4;
   var $36=(($34)>>>(0)) >= (($35)>>>(0));
   if ($36) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $38=$4;
   $n2=$38;
   label = 13; break;
  case 13: 
   var $40=$n2;
   var $41=$3;
   var $42=((($41)-($40))|0);
   $3=$42;
   var $43=$ws;
   var $44=$n2;
   var $45=$5;
   var $46=_mbsrtowcs($43, $s, $44, $45);
   $l=$46;
   var $47=$l;
   var $48=((($47)+(1))|0);
   var $49=(($48)|(0))!=0;
   if ($49) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $51=$l;
   $cnt=$51;
   $4=0;
   label = 18; break;
  case 15: 
   var $53=$ws;
   var $54=(($wbuf)|0);
   var $55=(($53)|(0))!=(($54)|(0));
   if ($55) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $57=$l;
   var $58=$ws;
   var $59=(($58+($57<<2))|0);
   $ws=$59;
   var $60=$l;
   var $61=$4;
   var $62=((($61)-($60))|0);
   $4=$62;
   label = 17; break;
  case 17: 
   var $64=$l;
   var $65=$cnt;
   var $66=((($65)+($64))|0);
   $cnt=$66;
   label = 5; break;
  case 18: 
   var $68=HEAP32[(($s)>>2)];
   var $69=(($68)|(0))!=0;
   if ($69) { label = 19; break; } else { label = 31; break; }
  case 19: 
   label = 20; break;
  case 20: 
   var $72=$4;
   var $73=(($72)|(0))!=0;
   if ($73) { label = 21; break; } else { var $78 = 0;label = 22; break; }
  case 21: 
   var $75=$3;
   var $76=(($75)|(0))!=0;
   var $78 = $76;label = 22; break;
  case 22: 
   var $78;
   if ($78) { label = 23; break; } else { label = 30; break; }
  case 23: 
   var $80=$ws;
   var $81=HEAP32[(($s)>>2)];
   var $82=$3;
   var $83=$5;
   var $84=_mbrtowc($80, $81, $82, $83);
   $l=$84;
   var $85=$l;
   var $86=((($85)+(2))|0);
   var $87=(($86)>>>(0)) <= 2;
   if ($87) { label = 24; break; } else { label = 29; break; }
  case 24: 
   var $89=$l;
   var $90=((($89)+(1))|0);
   var $91=(($90)|(0))!=0;
   if ($91) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $93=$l;
   $cnt=$93;
   label = 30; break;
  case 26: 
   var $95=$l;
   var $96=(($95)|(0))!=0;
   if ($96) { label = 28; break; } else { label = 27; break; }
  case 27: 
   HEAP32[(($s)>>2)]=0;
   label = 30; break;
  case 28: 
   var $99=$5;
   var $100=$99;
   HEAP32[(($100)>>2)]=0;
   label = 30; break;
  case 29: 
   var $102=$l;
   var $103=HEAP32[(($s)>>2)];
   var $104=(($103+$102)|0);
   HEAP32[(($s)>>2)]=$104;
   var $105=$l;
   var $106=$3;
   var $107=((($106)-($105))|0);
   $3=$107;
   var $108=$ws;
   var $109=(($108+4)|0);
   $ws=$109;
   var $110=$4;
   var $111=((($110)-(1))|0);
   $4=$111;
   var $112=$cnt;
   var $113=((($112)+(1))|0);
   $cnt=$113;
   label = 20; break;
  case 30: 
   label = 31; break;
  case 31: 
   var $116=$1;
   var $117=(($116)|(0))!=0;
   if ($117) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $119=HEAP32[(($s)>>2)];
   var $120=$2;
   HEAP32[(($120)>>2)]=$119;
   label = 33; break;
  case 33: 
   var $122=$cnt;
   STACKTOP = __stackBase__;
   return $122;
  default: assert(0, "bad label: " + label);
 }
}
function _mbsrtowcs($ws, $src, $wn, $st) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $s;
   var $wn0;
   var $c;
   $2=$ws;
   $3=$src;
   $4=$wn;
   $5=$st;
   var $6=$3;
   var $7=HEAP32[(($6)>>2)];
   $s=$7;
   var $8=$4;
   $wn0=$8;
   $c=0;
   var $9=$5;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $12=$5;
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   $c=$14;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $17=$2;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $20=$5;
   var $21=$20;
   HEAP32[(($21)>>2)]=0;
   label = 47; break;
  case 5: 
   label = 19; break;
  case 6: 
   var $24=$2;
   var $25=(($24)|(0))!=0;
   if ($25) { label = 31; break; } else { label = 7; break; }
  case 7: 
   label = 8; break;
  case 8: 
   var $28=$s;
   var $29=HEAP8[($28)];
   var $30=(($29)&(255));
   var $31=((($30)-(1))|0);
   var $32=(($31)>>>(0)) < 127;
   if ($32) { label = 9; break; } else { label = 14; break; }
  case 9: 
   var $34=$s;
   var $35=$34;
   var $36=Math.floor(((($35)>>>(0)))%(4));
   var $37=(($36)|(0))==0;
   if ($37) { label = 10; break; } else { label = 14; break; }
  case 10: 
   label = 11; break;
  case 11: 
   var $40=$s;
   var $41=$40;
   var $42=HEAP32[(($41)>>2)];
   var $43=$s;
   var $44=$43;
   var $45=HEAP32[(($44)>>2)];
   var $46=((($45)-(16843009))|0);
   var $47=$42 | $46;
   var $48=$47 & -2139062144;
   var $49=(($48)|(0))!=0;
   var $50=$49 ^ 1;
   if ($50) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $52=$s;
   var $53=(($52+4)|0);
   $s=$53;
   var $54=$4;
   var $55=((($54)-(4))|0);
   $4=$55;
   label = 11; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $58=$s;
   var $59=HEAP8[($58)];
   var $60=(($59)&(255));
   var $61=((($60)-(1))|0);
   var $62=(($61)>>>(0)) < 127;
   if ($62) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $64=$s;
   var $65=(($64+1)|0);
   $s=$65;
   var $66=$4;
   var $67=((($66)-(1))|0);
   $4=$67;
   label = 8; break;
  case 16: 
   var $69=$s;
   var $70=HEAP8[($69)];
   var $71=(($70)&(255));
   var $72=((($71)-(194))|0);
   var $73=(($72)>>>(0)) > 50;
   if ($73) { label = 17; break; } else { label = 18; break; }
  case 17: 
   label = 30; break;
  case 18: 
   var $76=$s;
   var $77=(($76+1)|0);
   $s=$77;
   var $78=HEAP8[($76)];
   var $79=(($78)&(255));
   var $80=((($79)-(194))|0);
   var $81=((___fsmu8+($80<<2))|0);
   var $82=((((HEAPU8[($81)])|(HEAPU8[((($81)+(1))|0)]<<8)|(HEAPU8[((($81)+(2))|0)]<<16)|(HEAPU8[((($81)+(3))|0)]<<24))|(0)));
   $c=$82;
   label = 19; break;
  case 19: 
   var $84=$s;
   var $85=HEAP8[($84)];
   var $86=(($85)&(255));
   var $87=$86 >> 3;
   var $88=((($87)-(16))|0);
   var $89=$s;
   var $90=HEAP8[($89)];
   var $91=(($90)&(255));
   var $92=$91 >> 3;
   var $93=$c;
   var $94=$93 >> 26;
   var $95=((($92)+($94))|0);
   var $96=$88 | $95;
   var $97=$96 & -8;
   var $98=(($97)|(0))!=0;
   if ($98) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $100=$s;
   var $101=((($100)-(1))|0);
   $s=$101;
   label = 30; break;
  case 21: 
   var $103=$s;
   var $104=(($103+1)|0);
   $s=$104;
   var $105=$c;
   var $106=$105 & 33554432;
   var $107=(($106)|(0))!=0;
   if ($107) { label = 22; break; } else { label = 29; break; }
  case 22: 
   var $109=$s;
   var $110=HEAP8[($109)];
   var $111=(($110)&(255));
   var $112=((($111)-(128))|0);
   var $113=(($112)>>>(0)) >= 64;
   if ($113) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $115=$s;
   var $116=((($115)-(2))|0);
   $s=$116;
   label = 30; break;
  case 24: 
   var $118=$s;
   var $119=(($118+1)|0);
   $s=$119;
   var $120=$c;
   var $121=$120 & 524288;
   var $122=(($121)|(0))!=0;
   if ($122) { label = 25; break; } else { label = 28; break; }
  case 25: 
   var $124=$s;
   var $125=HEAP8[($124)];
   var $126=(($125)&(255));
   var $127=((($126)-(128))|0);
   var $128=(($127)>>>(0)) >= 64;
   if ($128) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $130=$s;
   var $131=((($130)-(3))|0);
   $s=$131;
   label = 30; break;
  case 27: 
   var $133=$s;
   var $134=(($133+1)|0);
   $s=$134;
   label = 28; break;
  case 28: 
   label = 29; break;
  case 29: 
   var $137=$4;
   var $138=((($137)-(1))|0);
   $4=$138;
   $c=0;
   label = 8; break;
  case 30: 
   label = 59; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $142=$4;
   var $143=(($142)|(0))!=0;
   if ($143) { label = 34; break; } else { label = 33; break; }
  case 33: 
   var $145=$wn0;
   $1=$145;
   label = 67; break;
  case 34: 
   var $147=$s;
   var $148=HEAP8[($147)];
   var $149=(($148)&(255));
   var $150=((($149)-(1))|0);
   var $151=(($150)>>>(0)) < 127;
   if ($151) { label = 35; break; } else { label = 42; break; }
  case 35: 
   var $153=$s;
   var $154=$153;
   var $155=Math.floor(((($154)>>>(0)))%(4));
   var $156=(($155)|(0))==0;
   if ($156) { label = 36; break; } else { label = 42; break; }
  case 36: 
   label = 37; break;
  case 37: 
   var $159=$4;
   var $160=(($159)>>>(0)) >= 4;
   if ($160) { label = 38; break; } else { var $174 = 0;label = 39; break; }
  case 38: 
   var $162=$s;
   var $163=$162;
   var $164=HEAP32[(($163)>>2)];
   var $165=$s;
   var $166=$165;
   var $167=HEAP32[(($166)>>2)];
   var $168=((($167)-(16843009))|0);
   var $169=$164 | $168;
   var $170=$169 & -2139062144;
   var $171=(($170)|(0))!=0;
   var $172=$171 ^ 1;
   var $174 = $172;label = 39; break;
  case 39: 
   var $174;
   if ($174) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $176=$s;
   var $177=(($176+1)|0);
   $s=$177;
   var $178=HEAP8[($176)];
   var $179=(($178)&(255));
   var $180=$2;
   var $181=(($180+4)|0);
   $2=$181;
   HEAP32[(($180)>>2)]=$179;
   var $182=$s;
   var $183=(($182+1)|0);
   $s=$183;
   var $184=HEAP8[($182)];
   var $185=(($184)&(255));
   var $186=$2;
   var $187=(($186+4)|0);
   $2=$187;
   HEAP32[(($186)>>2)]=$185;
   var $188=$s;
   var $189=(($188+1)|0);
   $s=$189;
   var $190=HEAP8[($188)];
   var $191=(($190)&(255));
   var $192=$2;
   var $193=(($192+4)|0);
   $2=$193;
   HEAP32[(($192)>>2)]=$191;
   var $194=$s;
   var $195=(($194+1)|0);
   $s=$195;
   var $196=HEAP8[($194)];
   var $197=(($196)&(255));
   var $198=$2;
   var $199=(($198+4)|0);
   $2=$199;
   HEAP32[(($198)>>2)]=$197;
   var $200=$4;
   var $201=((($200)-(4))|0);
   $4=$201;
   label = 37; break;
  case 41: 
   label = 42; break;
  case 42: 
   var $204=$s;
   var $205=HEAP8[($204)];
   var $206=(($205)&(255));
   var $207=((($206)-(1))|0);
   var $208=(($207)>>>(0)) < 127;
   if ($208) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $210=$s;
   var $211=(($210+1)|0);
   $s=$211;
   var $212=HEAP8[($210)];
   var $213=(($212)&(255));
   var $214=$2;
   var $215=(($214+4)|0);
   $2=$215;
   HEAP32[(($214)>>2)]=$213;
   var $216=$4;
   var $217=((($216)-(1))|0);
   $4=$217;
   label = 32; break;
  case 44: 
   var $219=$s;
   var $220=HEAP8[($219)];
   var $221=(($220)&(255));
   var $222=((($221)-(194))|0);
   var $223=(($222)>>>(0)) > 50;
   if ($223) { label = 45; break; } else { label = 46; break; }
  case 45: 
   label = 58; break;
  case 46: 
   var $226=$s;
   var $227=(($226+1)|0);
   $s=$227;
   var $228=HEAP8[($226)];
   var $229=(($228)&(255));
   var $230=((($229)-(194))|0);
   var $231=((___fsmu8+($230<<2))|0);
   var $232=((((HEAPU8[($231)])|(HEAPU8[((($231)+(1))|0)]<<8)|(HEAPU8[((($231)+(2))|0)]<<16)|(HEAPU8[((($231)+(3))|0)]<<24))|(0)));
   $c=$232;
   label = 47; break;
  case 47: 
   var $234=$s;
   var $235=HEAP8[($234)];
   var $236=(($235)&(255));
   var $237=$236 >> 3;
   var $238=((($237)-(16))|0);
   var $239=$s;
   var $240=HEAP8[($239)];
   var $241=(($240)&(255));
   var $242=$241 >> 3;
   var $243=$c;
   var $244=$243 >> 26;
   var $245=((($242)+($244))|0);
   var $246=$238 | $245;
   var $247=$246 & -8;
   var $248=(($247)|(0))!=0;
   if ($248) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $250=$s;
   var $251=((($250)-(1))|0);
   $s=$251;
   label = 58; break;
  case 49: 
   var $253=$c;
   var $254=$253 << 6;
   var $255=$s;
   var $256=(($255+1)|0);
   $s=$256;
   var $257=HEAP8[($255)];
   var $258=(($257)&(255));
   var $259=((($258)-(128))|0);
   var $260=$254 | $259;
   $c=$260;
   var $261=$c;
   var $262=$261 & -2147483648;
   var $263=(($262)|(0))!=0;
   if ($263) { label = 50; break; } else { label = 57; break; }
  case 50: 
   var $265=$s;
   var $266=HEAP8[($265)];
   var $267=(($266)&(255));
   var $268=((($267)-(128))|0);
   var $269=(($268)>>>(0)) >= 64;
   if ($269) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $271=$s;
   var $272=((($271)-(2))|0);
   $s=$272;
   label = 58; break;
  case 52: 
   var $274=$c;
   var $275=$274 << 6;
   var $276=$s;
   var $277=(($276+1)|0);
   $s=$277;
   var $278=HEAP8[($276)];
   var $279=(($278)&(255));
   var $280=((($279)-(128))|0);
   var $281=$275 | $280;
   $c=$281;
   var $282=$c;
   var $283=$282 & -2147483648;
   var $284=(($283)|(0))!=0;
   if ($284) { label = 53; break; } else { label = 56; break; }
  case 53: 
   var $286=$s;
   var $287=HEAP8[($286)];
   var $288=(($287)&(255));
   var $289=((($288)-(128))|0);
   var $290=(($289)>>>(0)) >= 64;
   if ($290) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $292=$s;
   var $293=((($292)-(3))|0);
   $s=$293;
   label = 58; break;
  case 55: 
   var $295=$c;
   var $296=$295 << 6;
   var $297=$s;
   var $298=(($297+1)|0);
   $s=$298;
   var $299=HEAP8[($297)];
   var $300=(($299)&(255));
   var $301=((($300)-(128))|0);
   var $302=$296 | $301;
   $c=$302;
   label = 56; break;
  case 56: 
   label = 57; break;
  case 57: 
   var $305=$c;
   var $306=$2;
   var $307=(($306+4)|0);
   $2=$307;
   HEAP32[(($306)>>2)]=$305;
   var $308=$4;
   var $309=((($308)-(1))|0);
   $4=$309;
   $c=0;
   label = 32; break;
  case 58: 
   label = 59; break;
  case 59: 
   var $312=$c;
   var $313=(($312)|(0))!=0;
   if ($313) { label = 64; break; } else { label = 60; break; }
  case 60: 
   var $315=$s;
   var $316=HEAP8[($315)];
   var $317=(($316 << 24) >> 24)!=0;
   if ($317) { label = 64; break; } else { label = 61; break; }
  case 61: 
   var $319=$2;
   var $320=(($319)|(0))!=0;
   if ($320) { label = 62; break; } else { label = 63; break; }
  case 62: 
   var $322=$2;
   HEAP32[(($322)>>2)]=0;
   var $323=$3;
   HEAP32[(($323)>>2)]=0;
   label = 63; break;
  case 63: 
   var $325=$wn0;
   var $326=$4;
   var $327=((($325)-($326))|0);
   $1=$327;
   label = 67; break;
  case 64: 
   var $329=___errno_location();
   HEAP32[(($329)>>2)]=138;
   var $330=$2;
   var $331=(($330)|(0))!=0;
   if ($331) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $333=$s;
   var $334=$3;
   HEAP32[(($334)>>2)]=$333;
   label = 66; break;
  case 66: 
   $1=-1;
   label = 67; break;
  case 67: 
   var $337=$1;
   return $337;
  default: assert(0, "bad label: " + label);
 }
}
function _mbtowc($wc, $src, $n) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2=__stackBase__;
   var $3;
   var $4;
   var $c;
   var $s;
   HEAP32[(($2)>>2)]=$wc;
   $3=$src;
   $4=$n;
   var $5=$3;
   $s=$5;
   var $6=$s;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 26; break;
  case 3: 
   var $10=$4;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 5; break; } else { label = 4; break; }
  case 4: 
   label = 25; break;
  case 5: 
   var $14=HEAP32[(($2)>>2)];
   var $15=(($14)|(0))!=0;
   if ($15) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $17=$2;
   var $18=$17;
   HEAP32[(($2)>>2)]=$18;
   label = 7; break;
  case 7: 
   var $20=$s;
   var $21=HEAP8[($20)];
   var $22=(($21)&(255));
   var $23=(($22)|(0)) < 128;
   if ($23) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $25=$s;
   var $26=HEAP8[($25)];
   var $27=(($26)&(255));
   var $28=HEAP32[(($2)>>2)];
   HEAP32[(($28)>>2)]=$27;
   var $29=(($27)|(0))!=0;
   var $30=$29 ^ 1;
   var $31=$30 ^ 1;
   var $32=(($31)&(1));
   $1=$32;
   label = 26; break;
  case 9: 
   var $34=$s;
   var $35=HEAP8[($34)];
   var $36=(($35)&(255));
   var $37=((($36)-(194))|0);
   var $38=(($37)>>>(0)) > 50;
   if ($38) { label = 10; break; } else { label = 11; break; }
  case 10: 
   label = 25; break;
  case 11: 
   var $41=$s;
   var $42=(($41+1)|0);
   $s=$42;
   var $43=HEAP8[($41)];
   var $44=(($43)&(255));
   var $45=((($44)-(194))|0);
   var $46=((___fsmu8+($45<<2))|0);
   var $47=((((HEAPU8[($46)])|(HEAPU8[((($46)+(1))|0)]<<8)|(HEAPU8[((($46)+(2))|0)]<<16)|(HEAPU8[((($46)+(3))|0)]<<24))|(0)));
   $c=$47;
   var $48=$4;
   var $49=(($48)>>>(0)) < 4;
   if ($49) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $51=$c;
   var $52=$4;
   var $53=((($52)*(6))&-1);
   var $54=((($53)-(6))|0);
   var $55=$51 << $54;
   var $56=$55 & -2147483648;
   var $57=(($56)|(0))!=0;
   if ($57) { label = 13; break; } else { label = 14; break; }
  case 13: 
   label = 25; break;
  case 14: 
   var $60=$s;
   var $61=HEAP8[($60)];
   var $62=(($61)&(255));
   var $63=$62 >> 3;
   var $64=((($63)-(16))|0);
   var $65=$s;
   var $66=HEAP8[($65)];
   var $67=(($66)&(255));
   var $68=$67 >> 3;
   var $69=$c;
   var $70=$69 >> 26;
   var $71=((($68)+($70))|0);
   var $72=$64 | $71;
   var $73=$72 & -8;
   var $74=(($73)|(0))!=0;
   if ($74) { label = 15; break; } else { label = 16; break; }
  case 15: 
   label = 25; break;
  case 16: 
   var $77=$c;
   var $78=$77 << 6;
   var $79=$s;
   var $80=(($79+1)|0);
   $s=$80;
   var $81=HEAP8[($79)];
   var $82=(($81)&(255));
   var $83=((($82)-(128))|0);
   var $84=$78 | $83;
   $c=$84;
   var $85=$c;
   var $86=$85 & -2147483648;
   var $87=(($86)|(0))!=0;
   if ($87) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $89=$c;
   var $90=HEAP32[(($2)>>2)];
   HEAP32[(($90)>>2)]=$89;
   $1=2;
   label = 26; break;
  case 18: 
   var $92=$s;
   var $93=HEAP8[($92)];
   var $94=(($93)&(255));
   var $95=((($94)-(128))|0);
   var $96=(($95)>>>(0)) >= 64;
   if ($96) { label = 19; break; } else { label = 20; break; }
  case 19: 
   label = 25; break;
  case 20: 
   var $99=$c;
   var $100=$99 << 6;
   var $101=$s;
   var $102=(($101+1)|0);
   $s=$102;
   var $103=HEAP8[($101)];
   var $104=(($103)&(255));
   var $105=((($104)-(128))|0);
   var $106=$100 | $105;
   $c=$106;
   var $107=$c;
   var $108=$107 & -2147483648;
   var $109=(($108)|(0))!=0;
   if ($109) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $111=$c;
   var $112=HEAP32[(($2)>>2)];
   HEAP32[(($112)>>2)]=$111;
   $1=3;
   label = 26; break;
  case 22: 
   var $114=$s;
   var $115=HEAP8[($114)];
   var $116=(($115)&(255));
   var $117=((($116)-(128))|0);
   var $118=(($117)>>>(0)) >= 64;
   if ($118) { label = 23; break; } else { label = 24; break; }
  case 23: 
   label = 25; break;
  case 24: 
   var $121=$c;
   var $122=$121 << 6;
   var $123=$s;
   var $124=(($123+1)|0);
   $s=$124;
   var $125=HEAP8[($123)];
   var $126=(($125)&(255));
   var $127=((($126)-(128))|0);
   var $128=$122 | $127;
   var $129=HEAP32[(($2)>>2)];
   HEAP32[(($129)>>2)]=$128;
   $1=4;
   label = 26; break;
  case 25: 
   var $131=___errno_location();
   HEAP32[(($131)>>2)]=138;
   $1=-1;
   label = 26; break;
  case 26: 
   var $133=$1;
   STACKTOP = __stackBase__;
   return $133;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt9type_infoD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return ((2896)|0);
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($x, $y, $0) {
 var label = 0;
 var $2;
 var $3;
 var $4;
 $2=$x;
 $3=$y;
 var $5=(($0)&(1));
 $4=$5;
 var $6=$2;
 var $7=$3;
 var $8=(($6)|(0))==(($7)|(0));
 return $8;
}
function __ZNSt8bad_castC2Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 var $4=$3;
 $1=$4;
 var $5=$1;
 var $6=$5;
 HEAP32[(($6)>>2)]=((10880)|0);
 var $7=$3;
 HEAP32[(($7)>>2)]=((10944)|0);
 return;
}
function _wcslen($s) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   $1=$s;
   var $2=$1;
   $a=$2;
   label = 2; break;
  case 2: 
   var $4=$1;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 5; break; }
  case 3: 
   label = 4; break;
  case 4: 
   var $9=$1;
   var $10=(($9+4)|0);
   $1=$10;
   label = 2; break;
  case 5: 
   var $12=$1;
   var $13=$a;
   var $14=$12;
   var $15=$13;
   var $16=((($14)-($15))|0);
   var $17=((((($16)|(0)))/(4))&-1);
   return $17;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemcpy($d, $s, $n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $a;
   $1=$d;
   $2=$s;
   $3=$n;
   var $4=$1;
   $a=$4;
   label = 2; break;
  case 2: 
   var $6=$3;
   var $7=((($6)-(1))|0);
   $3=$7;
   var $8=(($6)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $10=$2;
   var $11=(($10+4)|0);
   $2=$11;
   var $12=HEAP32[(($10)>>2)];
   var $13=$1;
   var $14=(($13+4)|0);
   $1=$14;
   HEAP32[(($13)>>2)]=$12;
   label = 2; break;
  case 4: 
   var $16=$a;
   return $16;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemmove($d, $s, $n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $d0;
   $1=$d;
   $2=$s;
   $3=$n;
   var $4=$1;
   $d0=$4;
   var $5=$1;
   var $6=$2;
   var $7=$5;
   var $8=$6;
   var $9=((($7)-($8))|0);
   var $10=((((($9)|(0)))/(4))&-1);
   var $11=$3;
   var $12=(($10)>>>(0)) < (($11)>>>(0));
   if ($12) { label = 2; break; } else { label = 6; break; }
  case 2: 
   label = 3; break;
  case 3: 
   var $15=$3;
   var $16=((($15)-(1))|0);
   $3=$16;
   var $17=(($15)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $19=$3;
   var $20=$2;
   var $21=(($20+($19<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$3;
   var $24=$1;
   var $25=(($24+($23<<2))|0);
   HEAP32[(($25)>>2)]=$22;
   label = 3; break;
  case 5: 
   label = 10; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $29=$3;
   var $30=((($29)-(1))|0);
   $3=$30;
   var $31=(($29)|(0))!=0;
   if ($31) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $33=$2;
   var $34=(($33+4)|0);
   $2=$34;
   var $35=HEAP32[(($33)>>2)];
   var $36=$1;
   var $37=(($36+4)|0);
   $1=$37;
   HEAP32[(($36)>>2)]=$35;
   label = 7; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $40=$d0;
   return $40;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemset($d, $c, $n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $ret;
   $1=$d;
   $2=$c;
   $3=$n;
   var $4=$1;
   $ret=$4;
   label = 2; break;
  case 2: 
   var $6=$3;
   var $7=((($6)-(1))|0);
   $3=$7;
   var $8=(($6)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $10=$2;
   var $11=$1;
   var $12=(($11+4)|0);
   $1=$12;
   HEAP32[(($11)>>2)]=$10;
   label = 2; break;
  case 4: 
   var $14=$ret;
   return $14;
  default: assert(0, "bad label: " + label);
 }
}
function _wcrtomb($s, $wc, $st) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $2=$s;
   $3=$wc;
   $4=$st;
   var $5=$2;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=1;
   label = 16; break;
  case 3: 
   var $9=$3;
   var $10=(($9)>>>(0)) < 128;
   if ($10) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $12=$3;
   var $13=(($12) & 255);
   var $14=$2;
   HEAP8[($14)]=$13;
   $1=1;
   label = 16; break;
  case 5: 
   var $16=$3;
   var $17=(($16)>>>(0)) < 2048;
   if ($17) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $19=$3;
   var $20=$19 >> 6;
   var $21=192 | $20;
   var $22=(($21) & 255);
   var $23=$2;
   var $24=(($23+1)|0);
   $2=$24;
   HEAP8[($23)]=$22;
   var $25=$3;
   var $26=$25 & 63;
   var $27=128 | $26;
   var $28=(($27) & 255);
   var $29=$2;
   HEAP8[($29)]=$28;
   $1=2;
   label = 16; break;
  case 7: 
   var $31=$3;
   var $32=(($31)>>>(0)) < 55296;
   if ($32) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $34=$3;
   var $35=((($34)-(57344))|0);
   var $36=(($35)>>>(0)) < 8192;
   if ($36) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $38=$3;
   var $39=$38 >> 12;
   var $40=224 | $39;
   var $41=(($40) & 255);
   var $42=$2;
   var $43=(($42+1)|0);
   $2=$43;
   HEAP8[($42)]=$41;
   var $44=$3;
   var $45=$44 >> 6;
   var $46=$45 & 63;
   var $47=128 | $46;
   var $48=(($47) & 255);
   var $49=$2;
   var $50=(($49+1)|0);
   $2=$50;
   HEAP8[($49)]=$48;
   var $51=$3;
   var $52=$51 & 63;
   var $53=128 | $52;
   var $54=(($53) & 255);
   var $55=$2;
   HEAP8[($55)]=$54;
   $1=3;
   label = 16; break;
  case 10: 
   var $57=$3;
   var $58=((($57)-(65536))|0);
   var $59=(($58)>>>(0)) < 1048576;
   if ($59) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $61=$3;
   var $62=$61 >> 18;
   var $63=240 | $62;
   var $64=(($63) & 255);
   var $65=$2;
   var $66=(($65+1)|0);
   $2=$66;
   HEAP8[($65)]=$64;
   var $67=$3;
   var $68=$67 >> 12;
   var $69=$68 & 63;
   var $70=128 | $69;
   var $71=(($70) & 255);
   var $72=$2;
   var $73=(($72+1)|0);
   $2=$73;
   HEAP8[($72)]=$71;
   var $74=$3;
   var $75=$74 >> 6;
   var $76=$75 & 63;
   var $77=128 | $76;
   var $78=(($77) & 255);
   var $79=$2;
   var $80=(($79+1)|0);
   $2=$80;
   HEAP8[($79)]=$78;
   var $81=$3;
   var $82=$81 & 63;
   var $83=128 | $82;
   var $84=(($83) & 255);
   var $85=$2;
   HEAP8[($85)]=$84;
   $1=4;
   label = 16; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $90=___errno_location();
   HEAP32[(($90)>>2)]=138;
   $1=-1;
   label = 16; break;
  case 16: 
   var $92=$1;
   return $92;
  default: assert(0, "bad label: " + label);
 }
}
function _wcsnrtombs($dst, $wcs, $wn, $n, $st) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $l;
   var $cnt;
   var $n2;
   var $s;
   var $buf=__stackBase__;
   var $ws=(__stackBase__)+(256);
   $1=$dst;
   $2=$wcs;
   $3=$wn;
   $4=$n;
   $5=$st;
   $cnt=0;
   var $6=$2;
   var $7=HEAP32[(($6)>>2)];
   HEAP32[(($ws)>>2)]=$7;
   var $8=$1;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=(($buf)|0);
   $s=$11;
   $4=256;
   label = 4; break;
  case 3: 
   var $13=$1;
   $s=$13;
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $16=HEAP32[(($ws)>>2)];
   var $17=(($16)|(0))!=0;
   if ($17) { label = 6; break; } else { var $31 = 0;label = 10; break; }
  case 6: 
   var $19=$4;
   var $20=(($19)|(0))!=0;
   if ($20) { label = 7; break; } else { var $31 = 0;label = 10; break; }
  case 7: 
   var $22=$3;
   $n2=$22;
   var $23=$4;
   var $24=(($22)>>>(0)) >= (($23)>>>(0));
   if ($24) { var $29 = 1;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $26=$n2;
   var $27=(($26)>>>(0)) > 32;
   var $29 = $27;label = 9; break;
  case 9: 
   var $29;
   var $31 = $29;label = 10; break;
  case 10: 
   var $31;
   if ($31) { label = 11; break; } else { label = 18; break; }
  case 11: 
   var $33=$n2;
   var $34=$4;
   var $35=(($33)>>>(0)) >= (($34)>>>(0));
   if ($35) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $37=$4;
   $n2=$37;
   label = 13; break;
  case 13: 
   var $39=$n2;
   var $40=$3;
   var $41=((($40)-($39))|0);
   $3=$41;
   var $42=$s;
   var $43=$n2;
   var $44=_wcsrtombs($42, $ws, $43, 0);
   $l=$44;
   var $45=$l;
   var $46=((($45)+(1))|0);
   var $47=(($46)|(0))!=0;
   if ($47) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $49=$l;
   $cnt=$49;
   $4=0;
   label = 18; break;
  case 15: 
   var $51=$s;
   var $52=(($buf)|0);
   var $53=(($51)|(0))!=(($52)|(0));
   if ($53) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $55=$l;
   var $56=$s;
   var $57=(($56+$55)|0);
   $s=$57;
   var $58=$l;
   var $59=$4;
   var $60=((($59)-($58))|0);
   $4=$60;
   label = 17; break;
  case 17: 
   var $62=$l;
   var $63=$cnt;
   var $64=((($63)+($62))|0);
   $cnt=$64;
   label = 5; break;
  case 18: 
   var $66=HEAP32[(($ws)>>2)];
   var $67=(($66)|(0))!=0;
   if ($67) { label = 19; break; } else { label = 30; break; }
  case 19: 
   label = 20; break;
  case 20: 
   var $70=$4;
   var $71=(($70)|(0))!=0;
   if ($71) { label = 21; break; } else { var $76 = 0;label = 22; break; }
  case 21: 
   var $73=$3;
   var $74=(($73)|(0))!=0;
   var $76 = $74;label = 22; break;
  case 22: 
   var $76;
   if ($76) { label = 23; break; } else { label = 29; break; }
  case 23: 
   var $78=$s;
   var $79=HEAP32[(($ws)>>2)];
   var $80=HEAP32[(($79)>>2)];
   var $81=_wcrtomb($78, $80, 0);
   $l=$81;
   var $82=$l;
   var $83=((($82)+(1))|0);
   var $84=(($83)>>>(0)) <= 1;
   if ($84) { label = 24; break; } else { label = 28; break; }
  case 24: 
   var $86=$l;
   var $87=(($86)|(0))!=0;
   if ($87) { label = 26; break; } else { label = 25; break; }
  case 25: 
   HEAP32[(($ws)>>2)]=0;
   label = 27; break;
  case 26: 
   var $90=$l;
   $cnt=$90;
   label = 27; break;
  case 27: 
   label = 29; break;
  case 28: 
   var $93=HEAP32[(($ws)>>2)];
   var $94=(($93+4)|0);
   HEAP32[(($ws)>>2)]=$94;
   var $95=$3;
   var $96=((($95)-(1))|0);
   $3=$96;
   var $97=$l;
   var $98=$s;
   var $99=(($98+$97)|0);
   $s=$99;
   var $100=$l;
   var $101=$4;
   var $102=((($101)-($100))|0);
   $4=$102;
   var $103=$cnt;
   var $104=((($103)+(1))|0);
   $cnt=$104;
   label = 20; break;
  case 29: 
   label = 30; break;
  case 30: 
   var $107=$1;
   var $108=(($107)|(0))!=0;
   if ($108) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $110=HEAP32[(($ws)>>2)];
   var $111=$2;
   HEAP32[(($111)>>2)]=$110;
   label = 32; break;
  case 32: 
   var $113=$cnt;
   STACKTOP = __stackBase__;
   return $113;
  default: assert(0, "bad label: " + label);
 }
}
function _wcsrtombs($s, $ws, $n, $st) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $ws2;
   var $buf=__stackBase__;
   var $N;
   var $l;
   $2=$s;
   $3=$ws;
   $4=$n;
   $5=$st;
   var $6=$4;
   $N=$6;
   var $7=$2;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 12; break; } else { label = 2; break; }
  case 2: 
   $4=0;
   var $10=$3;
   var $11=HEAP32[(($10)>>2)];
   $ws2=$11;
   label = 3; break;
  case 3: 
   var $13=$ws2;
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))!=0;
   if ($15) { label = 4; break; } else { label = 11; break; }
  case 4: 
   var $17=$ws2;
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)>>>(0)) >= 128;
   if ($19) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $21=(($buf)|0);
   var $22=$ws2;
   var $23=HEAP32[(($22)>>2)];
   var $24=_wcrtomb($21, $23, 0);
   $l=$24;
   var $25=$l;
   var $26=((($25)+(1))|0);
   var $27=(($26)|(0))!=0;
   if ($27) { label = 7; break; } else { label = 6; break; }
  case 6: 
   $1=-1;
   label = 37; break;
  case 7: 
   var $30=$l;
   var $31=$4;
   var $32=((($31)+($30))|0);
   $4=$32;
   label = 9; break;
  case 8: 
   var $34=$4;
   var $35=((($34)+(1))|0);
   $4=$35;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $38=$ws2;
   var $39=(($38+4)|0);
   $ws2=$39;
   label = 3; break;
  case 11: 
   var $41=$4;
   $1=$41;
   label = 37; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $44=$4;
   var $45=(($44)>>>(0)) >= 4;
   if ($45) { label = 14; break; } else { var $52 = 0;label = 15; break; }
  case 14: 
   var $47=$3;
   var $48=HEAP32[(($47)>>2)];
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49)|(0))!=0;
   var $52 = $50;label = 15; break;
  case 15: 
   var $52;
   if ($52) { label = 16; break; } else { label = 22; break; }
  case 16: 
   var $54=$3;
   var $55=HEAP32[(($54)>>2)];
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56)>>>(0)) >= 128;
   if ($57) { label = 17; break; } else { label = 20; break; }
  case 17: 
   var $59=$2;
   var $60=$3;
   var $61=HEAP32[(($60)>>2)];
   var $62=HEAP32[(($61)>>2)];
   var $63=_wcrtomb($59, $62, 0);
   $l=$63;
   var $64=$l;
   var $65=((($64)+(1))|0);
   var $66=(($65)|(0))!=0;
   if ($66) { label = 19; break; } else { label = 18; break; }
  case 18: 
   $1=-1;
   label = 37; break;
  case 19: 
   var $69=$l;
   var $70=$2;
   var $71=(($70+$69)|0);
   $2=$71;
   var $72=$l;
   var $73=$4;
   var $74=((($73)-($72))|0);
   $4=$74;
   label = 21; break;
  case 20: 
   var $76=$3;
   var $77=HEAP32[(($76)>>2)];
   var $78=HEAP32[(($77)>>2)];
   var $79=(($78) & 255);
   var $80=$2;
   var $81=(($80+1)|0);
   $2=$81;
   HEAP8[($80)]=$79;
   var $82=$4;
   var $83=((($82)-(1))|0);
   $4=$83;
   label = 21; break;
  case 21: 
   var $85=$3;
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86+4)|0);
   HEAP32[(($85)>>2)]=$87;
   label = 13; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $90=$4;
   var $91=(($90)|(0))!=0;
   if ($91) { label = 24; break; } else { var $98 = 0;label = 25; break; }
  case 24: 
   var $93=$3;
   var $94=HEAP32[(($93)>>2)];
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|(0))!=0;
   var $98 = $96;label = 25; break;
  case 25: 
   var $98;
   if ($98) { label = 26; break; } else { label = 34; break; }
  case 26: 
   var $100=$3;
   var $101=HEAP32[(($100)>>2)];
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102)>>>(0)) >= 128;
   if ($103) { label = 27; break; } else { label = 32; break; }
  case 27: 
   var $105=(($buf)|0);
   var $106=$3;
   var $107=HEAP32[(($106)>>2)];
   var $108=HEAP32[(($107)>>2)];
   var $109=_wcrtomb($105, $108, 0);
   $l=$109;
   var $110=$l;
   var $111=((($110)+(1))|0);
   var $112=(($111)|(0))!=0;
   if ($112) { label = 29; break; } else { label = 28; break; }
  case 28: 
   $1=-1;
   label = 37; break;
  case 29: 
   var $115=$l;
   var $116=$4;
   var $117=(($115)>>>(0)) > (($116)>>>(0));
   if ($117) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $119=$N;
   var $120=$4;
   var $121=((($119)-($120))|0);
   $1=$121;
   label = 37; break;
  case 31: 
   var $123=$2;
   var $124=$3;
   var $125=HEAP32[(($124)>>2)];
   var $126=HEAP32[(($125)>>2)];
   var $127=_wcrtomb($123, $126, 0);
   var $128=$l;
   var $129=$2;
   var $130=(($129+$128)|0);
   $2=$130;
   var $131=$l;
   var $132=$4;
   var $133=((($132)-($131))|0);
   $4=$133;
   label = 33; break;
  case 32: 
   var $135=$3;
   var $136=HEAP32[(($135)>>2)];
   var $137=HEAP32[(($136)>>2)];
   var $138=(($137) & 255);
   var $139=$2;
   var $140=(($139+1)|0);
   $2=$140;
   HEAP8[($139)]=$138;
   var $141=$4;
   var $142=((($141)-(1))|0);
   $4=$142;
   label = 33; break;
  case 33: 
   var $144=$3;
   var $145=HEAP32[(($144)>>2)];
   var $146=(($145+4)|0);
   HEAP32[(($144)>>2)]=$146;
   label = 23; break;
  case 34: 
   var $148=$4;
   var $149=(($148)|(0))!=0;
   if ($149) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $151=$2;
   HEAP8[($151)]=0;
   label = 36; break;
  case 36: 
   var $153=$3;
   HEAP32[(($153)>>2)]=0;
   var $154=$N;
   var $155=$4;
   var $156=((($154)-($155))|0);
   $1=$156;
   label = 37; break;
  case 37: 
   var $158=$1;
   STACKTOP = __stackBase__;
   return $158;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt8bad_castD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt8bad_castD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt9exceptionD2Ev($3);
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt9type_infoD2Ev($3);
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
 var label = 0;
 var $2;
 var $3;
 var $4;
 $2=$this;
 $3=$thrown_type;
 $4=$0;
 var $5=$2;
 var $6=$5;
 var $7=$3;
 var $8=$7;
 var $9=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($6, $8, 0);
 return $9;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$info;
   $3=$adjustedPtr;
   $4=$path_below;
   var $5=$1;
   var $6=$2;
   var $7=(($6+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$3;
   var $12=$2;
   var $13=(($12+16)|0);
   HEAP32[(($13)>>2)]=$11;
   var $14=$4;
   var $15=$2;
   var $16=(($15+24)|0);
   HEAP32[(($16)>>2)]=$14;
   var $17=$2;
   var $18=(($17+36)|0);
   HEAP32[(($18)>>2)]=1;
   label = 9; break;
  case 3: 
   var $20=$2;
   var $21=(($20+16)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$3;
   var $24=(($22)|(0))==(($23)|(0));
   if ($24) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $26=$2;
   var $27=(($26+24)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))==2;
   if ($29) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $31=$4;
   var $32=$2;
   var $33=(($32+24)|0);
   HEAP32[(($33)>>2)]=$31;
   label = 6; break;
  case 6: 
   label = 8; break;
  case 7: 
   var $36=$2;
   var $37=(($36+36)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=((($38)+(1))|0);
   HEAP32[(($37)>>2)]=$39;
   var $40=$2;
   var $41=(($40+24)|0);
   HEAP32[(($41)>>2)]=2;
   var $42=$2;
   var $43=(($42+54)|0);
   HEAP8[($43)]=1;
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   $1=$this;
   $2=$info;
   $3=$dst_ptr;
   $4=$current_ptr;
   $5=$path_below;
   var $6=$1;
   var $7=$2;
   var $8=(($7+53)|0);
   HEAP8[($8)]=1;
   var $9=$4;
   var $10=$2;
   var $11=(($10+4)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($9)|(0))==(($12)|(0));
   if ($13) { label = 2; break; } else { label = 17; break; }
  case 2: 
   var $15=$2;
   var $16=(($15+52)|0);
   HEAP8[($16)]=1;
   var $17=$2;
   var $18=(($17+16)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0))==0;
   if ($20) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $22=$3;
   var $23=$2;
   var $24=(($23+16)|0);
   HEAP32[(($24)>>2)]=$22;
   var $25=$5;
   var $26=$2;
   var $27=(($26+24)|0);
   HEAP32[(($27)>>2)]=$25;
   var $28=$2;
   var $29=(($28+36)|0);
   HEAP32[(($29)>>2)]=1;
   var $30=$2;
   var $31=(($30+48)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0))==1;
   if ($33) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $35=$2;
   var $36=(($35+24)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37)|(0))==1;
   if ($38) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $40=$2;
   var $41=(($40+54)|0);
   HEAP8[($41)]=1;
   label = 6; break;
  case 6: 
   label = 16; break;
  case 7: 
   var $44=$2;
   var $45=(($44+16)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$3;
   var $48=(($46)|(0))==(($47)|(0));
   if ($48) { label = 8; break; } else { label = 14; break; }
  case 8: 
   var $50=$2;
   var $51=(($50+24)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|(0))==2;
   if ($53) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $55=$5;
   var $56=$2;
   var $57=(($56+24)|0);
   HEAP32[(($57)>>2)]=$55;
   label = 10; break;
  case 10: 
   var $59=$2;
   var $60=(($59+48)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($61)|(0))==1;
   if ($62) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $64=$2;
   var $65=(($64+24)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=(($66)|(0))==1;
   if ($67) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $69=$2;
   var $70=(($69+54)|0);
   HEAP8[($70)]=1;
   label = 13; break;
  case 13: 
   label = 15; break;
  case 14: 
   var $73=$2;
   var $74=(($73+36)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=((($75)+(1))|0);
   HEAP32[(($74)>>2)]=$76;
   var $77=$2;
   var $78=(($77+54)|0);
   HEAP8[($78)]=1;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this, $info, $current_ptr, $path_below) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$info;
   $3=$current_ptr;
   $4=$path_below;
   var $5=$1;
   var $6=$3;
   var $7=$2;
   var $8=(($7+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($6)|(0))==(($9)|(0));
   if ($10) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $12=$2;
   var $13=(($12+28)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))!=1;
   if ($15) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $17=$4;
   var $18=$2;
   var $19=(($18+28)|0);
   HEAP32[(($19)>>2)]=$17;
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $thrown_class_type;
   var $info=__stackBase__;
   $2=$this;
   $3=$thrown_type;
   $4=$adjustedPtr;
   var $5=$2;
   var $6=$5;
   var $7=$3;
   var $8=$7;
   var $9=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($6, $8, 0);
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=1;
   label = 11; break;
  case 3: 
   var $12=$3;
   var $13=(($12)|(0))==0;
   if ($13) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $15=$12;
   var $16=___dynamic_cast($15, 18976, 18960, -1);
   var $17=$16;
   var $20 = $17;label = 6; break;
  case 5: 
   var $20 = 0;label = 6; break;
  case 6: 
   var $20;
   $thrown_class_type=$20;
   var $21=$thrown_class_type;
   var $22=(($21)|(0))==0;
   if ($22) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $1=0;
   label = 11; break;
  case 8: 
   var $25=$info;
   _memset($25, 0, 56);
   var $26=(($info)|0);
   var $27=$thrown_class_type;
   HEAP32[(($26)>>2)]=$27;
   var $28=(($info+8)|0);
   HEAP32[(($28)>>2)]=$5;
   var $29=(($info+12)|0);
   HEAP32[(($29)>>2)]=-1;
   var $30=(($info+48)|0);
   HEAP32[(($30)>>2)]=1;
   var $31=$thrown_class_type;
   var $32=$31;
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33+28)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$4;
   var $37=HEAP32[(($36)>>2)];
   FUNCTION_TABLE[$35]($31, $info, $37, 1);
   var $38=(($info+24)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39)|(0))==1;
   if ($40) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $42=(($info+16)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=$4;
   HEAP32[(($44)>>2)]=$43;
   $1=1;
   label = 11; break;
  case 10: 
   $1=0;
   label = 11; break;
  case 11: 
   var $47=$1;
   STACKTOP = __stackBase__;
   return $47;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$info;
   $3=$adjustedPtr;
   $4=$path_below;
   var $5=$1;
   var $6=$5;
   var $7=$2;
   var $8=(($7+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9;
   var $11=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($6, $10, 0);
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   var $15=$4;
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($5, $13, $14, $15);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$info;
   $3=$adjustedPtr;
   $4=$path_below;
   var $5=$1;
   var $6=$5;
   var $7=$2;
   var $8=(($7+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9;
   var $11=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($6, $10, 0);
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$5;
   var $14=$2;
   var $15=$3;
   var $16=$4;
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($13, $14, $15, $16);
   label = 4; break;
  case 3: 
   var $18=(($5+8)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+28)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$2;
   var $25=$3;
   var $26=$4;
   FUNCTION_TABLE[$23]($19, $24, $25, $26);
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $offset_to_base;
   var $vtable;
   $1=$this;
   $2=$info;
   $3=$adjustedPtr;
   $4=$path_below;
   var $5=$1;
   var $6=(($5+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 >> 8;
   $offset_to_base=$8;
   var $9=(($5+4)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 & 1;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $14=$3;
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   $vtable=$16;
   var $17=$vtable;
   var $18=$offset_to_base;
   var $19=(($17+$18)|0);
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   $offset_to_base=$21;
   label = 3; break;
  case 3: 
   var $23=(($5)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$24;
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26+28)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$2;
   var $30=$3;
   var $31=$offset_to_base;
   var $32=(($30+$31)|0);
   var $33=(($5+4)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$34 & 2;
   var $36=(($35)|(0))!=0;
   if ($36) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $38=$4;
   var $41 = $38;label = 6; break;
  case 5: 
   var $41 = 2;label = 6; break;
  case 6: 
   var $41;
   FUNCTION_TABLE[$28]($24, $29, $32, $41);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $e;
   var $p;
   $1=$this;
   $2=$info;
   $3=$adjustedPtr;
   $4=$path_below;
   var $5=$1;
   var $6=$5;
   var $7=$2;
   var $8=(($7+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9;
   var $11=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($6, $10, 0);
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$5;
   var $14=$2;
   var $15=$3;
   var $16=$4;
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($13, $14, $15, $16);
   label = 11; break;
  case 3: 
   var $18=(($5+16)|0);
   var $19=(($18)|0);
   var $20=(($5+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($19+($21<<3))|0);
   $e=$22;
   var $23=(($5+16)|0);
   var $24=(($23)|0);
   $p=$24;
   var $25=$p;
   var $26=$2;
   var $27=$3;
   var $28=$4;
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($25, $26, $27, $28);
   var $29=$p;
   var $30=(($29+8)|0);
   $p=$30;
   var $31=$e;
   var $32=(($30)>>>(0)) < (($31)>>>(0));
   if ($32) { label = 4; break; } else { label = 10; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $35=$p;
   var $36=$2;
   var $37=$3;
   var $38=$4;
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($35, $36, $37, $38);
   var $39=$2;
   var $40=(($39+54)|0);
   var $41=HEAP8[($40)];
   var $42=(($41) & 1);
   if ($42) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 9; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $46=$p;
   var $47=(($46+8)|0);
   $p=$47;
   var $48=$e;
   var $49=(($47)>>>(0)) < (($48)>>>(0));
   if ($49) { label = 5; break; } else { label = 9; break; }
  case 9: 
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 var label = 0;
 var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $vtable;
   var $offset_to_derived;
   var $dynamic_ptr;
   var $dynamic_type;
   var $dst_ptr;
   var $info=__stackBase__;
   $1=$static_ptr;
   $2=$static_type;
   $3=$dst_type;
   $4=$src2dst_offset;
   var $5=$1;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   $vtable=$7;
   var $8=$vtable;
   var $9=((($8)-(8))|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   $offset_to_derived=$11;
   var $12=$1;
   var $13=$offset_to_derived;
   var $14=(($12+$13)|0);
   $dynamic_ptr=$14;
   var $15=$vtable;
   var $16=((($15)-(4))|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$17;
   $dynamic_type=$18;
   $dst_ptr=0;
   var $19=(($info)|0);
   var $20=$3;
   HEAP32[(($19)>>2)]=$20;
   var $21=(($info+4)|0);
   var $22=$1;
   HEAP32[(($21)>>2)]=$22;
   var $23=(($info+8)|0);
   var $24=$2;
   HEAP32[(($23)>>2)]=$24;
   var $25=(($info+12)|0);
   var $26=$4;
   HEAP32[(($25)>>2)]=$26;
   var $27=(($info+16)|0);
   HEAP32[(($27)>>2)]=0;
   var $28=(($info+20)|0);
   HEAP32[(($28)>>2)]=0;
   var $29=(($info+24)|0);
   HEAP32[(($29)>>2)]=0;
   var $30=(($info+28)|0);
   HEAP32[(($30)>>2)]=0;
   var $31=(($info+32)|0);
   HEAP32[(($31)>>2)]=0;
   var $32=(($info+36)|0);
   HEAP32[(($32)>>2)]=0;
   var $33=(($info+40)|0);
   HEAP32[(($33)>>2)]=0;
   var $34=(($info+44)|0);
   HEAP32[(($34)>>2)]=0;
   var $35=(($info+48)|0);
   HEAP32[(($35)>>2)]=0;
   var $36=(($info+52)|0);
   HEAP8[($36)]=0;
   var $37=(($info+53)|0);
   HEAP8[($37)]=0;
   var $38=(($info+54)|0);
   HEAP8[($38)]=0;
   var $39=$dynamic_type;
   var $40=$39;
   var $41=$3;
   var $42=$41;
   var $43=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($40, $42, 0);
   if ($43) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $45=(($info+48)|0);
   HEAP32[(($45)>>2)]=1;
   var $46=$dynamic_type;
   var $47=$46;
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48+20)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$dynamic_ptr;
   var $52=$dynamic_ptr;
   FUNCTION_TABLE[$50]($46, $info, $51, $52, 1, 0);
   var $53=(($info+24)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54)|(0))==1;
   if ($55) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $57=$dynamic_ptr;
   $dst_ptr=$57;
   label = 4; break;
  case 4: 
   label = 18; break;
  case 5: 
   var $60=$dynamic_type;
   var $61=$60;
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62+24)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=$dynamic_ptr;
   FUNCTION_TABLE[$64]($60, $info, $65, 1, 0);
   var $66=(($info+36)|0);
   var $67=HEAP32[(($66)>>2)];
   if ((($67)|(0))==0) {
    label = 6; break;
   }
   else if ((($67)|(0))==1) {
    label = 11; break;
   }
   else {
   label = 17; break;
   }
  case 6: 
   var $69=(($info+40)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|(0))==1;
   if ($71) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $73=(($info+28)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($74)|(0))==1;
   if ($75) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $77=(($info+32)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=(($78)|(0))==1;
   if ($79) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $81=(($info+20)|0);
   var $82=HEAP32[(($81)>>2)];
   $dst_ptr=$82;
   label = 10; break;
  case 10: 
   label = 17; break;
  case 11: 
   var $85=(($info+24)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86)|(0))==1;
   if ($87) { label = 15; break; } else { label = 12; break; }
  case 12: 
   var $89=(($info+40)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90)|(0))==0;
   if ($91) { label = 13; break; } else { label = 16; break; }
  case 13: 
   var $93=(($info+28)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($94)|(0))==1;
   if ($95) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $97=(($info+32)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($98)|(0))==1;
   if ($99) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $101=(($info+16)|0);
   var $102=HEAP32[(($101)>>2)];
   $dst_ptr=$102;
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $106=$dst_ptr;
   STACKTOP = __stackBase__;
   return $106;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $is_dst_type_derived_from_static_type;
   var $does_dst_type_point_to_our_static_type;
   var $e;
   var $p;
   var $e1;
   var $p2;
   $1=$this;
   $2=$info;
   $3=$current_ptr;
   $4=$path_below;
   var $6=(($use_strcmp)&(1));
   $5=$6;
   var $7=$1;
   var $8=$7;
   var $9=$2;
   var $10=(($9+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11;
   var $13=$5;
   var $14=(($13) & 1);
   var $15=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($8, $12, $14);
   if ($15) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $17=$7;
   var $18=$2;
   var $19=$3;
   var $20=$4;
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($17, $18, $19, $20);
   label = 69; break;
  case 3: 
   var $22=$7;
   var $23=$2;
   var $24=(($23)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$25;
   var $27=$5;
   var $28=(($27) & 1);
   var $29=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($22, $26, $28);
   if ($29) { label = 4; break; } else { label = 38; break; }
  case 4: 
   var $31=$3;
   var $32=$2;
   var $33=(($32+16)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($31)|(0))==(($34)|(0));
   if ($35) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $37=$3;
   var $38=$2;
   var $39=(($38+20)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($37)|(0))==(($40)|(0));
   if ($41) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $43=$4;
   var $44=(($43)|(0))==1;
   if ($44) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $46=$2;
   var $47=(($46+32)|0);
   HEAP32[(($47)>>2)]=1;
   label = 8; break;
  case 8: 
   label = 37; break;
  case 9: 
   var $50=$4;
   var $51=$2;
   var $52=(($51+32)|0);
   HEAP32[(($52)>>2)]=$50;
   var $53=$2;
   var $54=(($53+44)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55)|(0))!=4;
   if ($56) { label = 10; break; } else { label = 36; break; }
  case 10: 
   $is_dst_type_derived_from_static_type=0;
   $does_dst_type_point_to_our_static_type=0;
   var $58=(($7+16)|0);
   var $59=(($58)|0);
   var $60=(($7+12)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($59+($61<<3))|0);
   $e=$62;
   var $63=(($7+16)|0);
   var $64=(($63)|0);
   $p=$64;
   label = 11; break;
  case 11: 
   var $66=$p;
   var $67=$e;
   var $68=(($66)>>>(0)) < (($67)>>>(0));
   if ($68) { label = 12; break; } else { label = 27; break; }
  case 12: 
   var $70=$2;
   var $71=(($70+52)|0);
   HEAP8[($71)]=0;
   var $72=$2;
   var $73=(($72+53)|0);
   HEAP8[($73)]=0;
   var $74=$p;
   var $75=$2;
   var $76=$3;
   var $77=$3;
   var $78=$5;
   var $79=(($78) & 1);
   __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($74, $75, $76, $77, 1, $79);
   var $80=$2;
   var $81=(($80+54)|0);
   var $82=HEAP8[($81)];
   var $83=(($82) & 1);
   if ($83) { label = 13; break; } else { label = 14; break; }
  case 13: 
   label = 27; break;
  case 14: 
   var $86=$2;
   var $87=(($86+53)|0);
   var $88=HEAP8[($87)];
   var $89=(($88) & 1);
   if ($89) { label = 15; break; } else { label = 25; break; }
  case 15: 
   $is_dst_type_derived_from_static_type=1;
   var $91=$2;
   var $92=(($91+52)|0);
   var $93=HEAP8[($92)];
   var $94=(($93) & 1);
   if ($94) { label = 16; break; } else { label = 21; break; }
  case 16: 
   $does_dst_type_point_to_our_static_type=1;
   var $96=$2;
   var $97=(($96+24)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($98)|(0))==1;
   if ($99) { label = 17; break; } else { label = 18; break; }
  case 17: 
   label = 27; break;
  case 18: 
   var $102=(($7+8)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=$103 & 2;
   var $105=(($104)|(0))!=0;
   if ($105) { label = 20; break; } else { label = 19; break; }
  case 19: 
   label = 27; break;
  case 20: 
   label = 24; break;
  case 21: 
   var $109=(($7+8)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=$110 & 1;
   var $112=(($111)|(0))!=0;
   if ($112) { label = 23; break; } else { label = 22; break; }
  case 22: 
   label = 27; break;
  case 23: 
   label = 24; break;
  case 24: 
   label = 25; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $118=$p;
   var $119=(($118+8)|0);
   $p=$119;
   label = 11; break;
  case 27: 
   var $121=$does_dst_type_point_to_our_static_type;
   var $122=(($121) & 1);
   if ($122) { label = 32; break; } else { label = 28; break; }
  case 28: 
   var $124=$3;
   var $125=$2;
   var $126=(($125+20)|0);
   HEAP32[(($126)>>2)]=$124;
   var $127=$2;
   var $128=(($127+40)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=((($129)+(1))|0);
   HEAP32[(($128)>>2)]=$130;
   var $131=$2;
   var $132=(($131+36)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133)|(0))==1;
   if ($134) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $136=$2;
   var $137=(($136+24)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138)|(0))==2;
   if ($139) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $141=$2;
   var $142=(($141+54)|0);
   HEAP8[($142)]=1;
   label = 31; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $145=$is_dst_type_derived_from_static_type;
   var $146=(($145) & 1);
   if ($146) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $148=$2;
   var $149=(($148+44)|0);
   HEAP32[(($149)>>2)]=3;
   label = 35; break;
  case 34: 
   var $151=$2;
   var $152=(($151+44)|0);
   HEAP32[(($152)>>2)]=4;
   label = 35; break;
  case 35: 
   label = 36; break;
  case 36: 
   label = 37; break;
  case 37: 
   label = 68; break;
  case 38: 
   var $157=(($7+16)|0);
   var $158=(($157)|0);
   var $159=(($7+12)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=(($158+($160<<3))|0);
   $e1=$161;
   var $162=(($7+16)|0);
   var $163=(($162)|0);
   $p2=$163;
   var $164=$p2;
   var $165=$2;
   var $166=$3;
   var $167=$4;
   var $168=$5;
   var $169=(($168) & 1);
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($164, $165, $166, $167, $169);
   var $170=$p2;
   var $171=(($170+8)|0);
   $p2=$171;
   var $172=$e1;
   var $173=(($171)>>>(0)) < (($172)>>>(0));
   if ($173) { label = 39; break; } else { label = 67; break; }
  case 39: 
   var $175=(($7+8)|0);
   var $176=HEAP32[(($175)>>2)];
   var $177=$176 & 2;
   var $178=(($177)|(0))!=0;
   if ($178) { label = 41; break; } else { label = 40; break; }
  case 40: 
   var $180=$2;
   var $181=(($180+36)|0);
   var $182=HEAP32[(($181)>>2)];
   var $183=(($182)|(0))==1;
   if ($183) { label = 41; break; } else { label = 47; break; }
  case 41: 
   label = 42; break;
  case 42: 
   var $186=$2;
   var $187=(($186+54)|0);
   var $188=HEAP8[($187)];
   var $189=(($188) & 1);
   if ($189) { label = 43; break; } else { label = 44; break; }
  case 43: 
   label = 46; break;
  case 44: 
   var $192=$p2;
   var $193=$2;
   var $194=$3;
   var $195=$4;
   var $196=$5;
   var $197=(($196) & 1);
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($192, $193, $194, $195, $197);
   label = 45; break;
  case 45: 
   var $199=$p2;
   var $200=(($199+8)|0);
   $p2=$200;
   var $201=$e1;
   var $202=(($200)>>>(0)) < (($201)>>>(0));
   if ($202) { label = 42; break; } else { label = 46; break; }
  case 46: 
   label = 66; break;
  case 47: 
   var $205=(($7+8)|0);
   var $206=HEAP32[(($205)>>2)];
   var $207=$206 & 1;
   var $208=(($207)|(0))!=0;
   if ($208) { label = 48; break; } else { label = 57; break; }
  case 48: 
   label = 49; break;
  case 49: 
   var $211=$2;
   var $212=(($211+54)|0);
   var $213=HEAP8[($212)];
   var $214=(($213) & 1);
   if ($214) { label = 50; break; } else { label = 51; break; }
  case 50: 
   label = 56; break;
  case 51: 
   var $217=$2;
   var $218=(($217+36)|0);
   var $219=HEAP32[(($218)>>2)];
   var $220=(($219)|(0))==1;
   if ($220) { label = 52; break; } else { label = 54; break; }
  case 52: 
   var $222=$2;
   var $223=(($222+24)|0);
   var $224=HEAP32[(($223)>>2)];
   var $225=(($224)|(0))==1;
   if ($225) { label = 53; break; } else { label = 54; break; }
  case 53: 
   label = 56; break;
  case 54: 
   var $228=$p2;
   var $229=$2;
   var $230=$3;
   var $231=$4;
   var $232=$5;
   var $233=(($232) & 1);
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($228, $229, $230, $231, $233);
   label = 55; break;
  case 55: 
   var $235=$p2;
   var $236=(($235+8)|0);
   $p2=$236;
   var $237=$e1;
   var $238=(($236)>>>(0)) < (($237)>>>(0));
   if ($238) { label = 49; break; } else { label = 56; break; }
  case 56: 
   label = 65; break;
  case 57: 
   label = 58; break;
  case 58: 
   var $242=$2;
   var $243=(($242+54)|0);
   var $244=HEAP8[($243)];
   var $245=(($244) & 1);
   if ($245) { label = 59; break; } else { label = 60; break; }
  case 59: 
   label = 64; break;
  case 60: 
   var $248=$2;
   var $249=(($248+36)|0);
   var $250=HEAP32[(($249)>>2)];
   var $251=(($250)|(0))==1;
   if ($251) { label = 61; break; } else { label = 62; break; }
  case 61: 
   label = 64; break;
  case 62: 
   var $254=$p2;
   var $255=$2;
   var $256=$3;
   var $257=$4;
   var $258=$5;
   var $259=(($258) & 1);
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($254, $255, $256, $257, $259);
   label = 63; break;
  case 63: 
   var $261=$p2;
   var $262=(($261+8)|0);
   $p2=$262;
   var $263=$e1;
   var $264=(($262)>>>(0)) < (($263)>>>(0));
   if ($264) { label = 58; break; } else { label = 64; break; }
  case 64: 
   label = 65; break;
  case 65: 
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   label = 68; break;
  case 68: 
   label = 69; break;
  case 69: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $offset_to_base;
   var $vtable;
   $1=$this;
   $2=$info;
   $3=$dst_ptr;
   $4=$current_ptr;
   $5=$path_below;
   var $7=(($use_strcmp)&(1));
   $6=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 >> 8;
   $offset_to_base=$11;
   var $12=(($8+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$13 & 1;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $17=$4;
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   $vtable=$19;
   var $20=$vtable;
   var $21=$offset_to_base;
   var $22=(($20+$21)|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   $offset_to_base=$24;
   label = 3; break;
  case 3: 
   var $26=(($8)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+20)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$2;
   var $33=$3;
   var $34=$4;
   var $35=$offset_to_base;
   var $36=(($34+$35)|0);
   var $37=(($8+4)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$38 & 2;
   var $40=(($39)|(0))!=0;
   if ($40) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $42=$5;
   var $45 = $42;label = 6; break;
  case 5: 
   var $45 = 2;label = 6; break;
  case 6: 
   var $45;
   var $46=$6;
   var $47=(($46) & 1);
   FUNCTION_TABLE[$31]($27, $32, $33, $36, $45, $47);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $offset_to_base;
   var $vtable;
   $1=$this;
   $2=$info;
   $3=$current_ptr;
   $4=$path_below;
   var $6=(($use_strcmp)&(1));
   $5=$6;
   var $7=$1;
   var $8=(($7+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9 >> 8;
   $offset_to_base=$10;
   var $11=(($7+4)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$12 & 1;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $16=$3;
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   $vtable=$18;
   var $19=$vtable;
   var $20=$offset_to_base;
   var $21=(($19+$20)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   $offset_to_base=$23;
   label = 3; break;
  case 3: 
   var $25=(($7)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+24)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$2;
   var $32=$3;
   var $33=$offset_to_base;
   var $34=(($32+$33)|0);
   var $35=(($7+4)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=$36 & 2;
   var $38=(($37)|(0))!=0;
   if ($38) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $40=$4;
   var $43 = $40;label = 6; break;
  case 5: 
   var $43 = 2;label = 6; break;
  case 6: 
   var $43;
   var $44=$5;
   var $45=(($44) & 1);
   FUNCTION_TABLE[$30]($26, $31, $34, $43, $45);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $is_dst_type_derived_from_static_type;
   var $does_dst_type_point_to_our_static_type;
   $1=$this;
   $2=$info;
   $3=$current_ptr;
   $4=$path_below;
   var $6=(($use_strcmp)&(1));
   $5=$6;
   var $7=$1;
   var $8=$7;
   var $9=$2;
   var $10=(($9+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11;
   var $13=$5;
   var $14=(($13) & 1);
   var $15=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($8, $12, $14);
   if ($15) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $17=$7;
   var $18=$2;
   var $19=$3;
   var $20=$4;
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($17, $18, $19, $20);
   label = 27; break;
  case 3: 
   var $22=$7;
   var $23=$2;
   var $24=(($23)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$25;
   var $27=$5;
   var $28=(($27) & 1);
   var $29=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($22, $26, $28);
   if ($29) { label = 4; break; } else { label = 25; break; }
  case 4: 
   var $31=$3;
   var $32=$2;
   var $33=(($32+16)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($31)|(0))==(($34)|(0));
   if ($35) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $37=$3;
   var $38=$2;
   var $39=(($38+20)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($37)|(0))==(($40)|(0));
   if ($41) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $43=$4;
   var $44=(($43)|(0))==1;
   if ($44) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $46=$2;
   var $47=(($46+32)|0);
   HEAP32[(($47)>>2)]=1;
   label = 8; break;
  case 8: 
   label = 24; break;
  case 9: 
   var $50=$4;
   var $51=$2;
   var $52=(($51+32)|0);
   HEAP32[(($52)>>2)]=$50;
   var $53=$2;
   var $54=(($53+44)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55)|(0))!=4;
   if ($56) { label = 10; break; } else { label = 23; break; }
  case 10: 
   $is_dst_type_derived_from_static_type=0;
   $does_dst_type_point_to_our_static_type=0;
   var $58=$2;
   var $59=(($58+52)|0);
   HEAP8[($59)]=0;
   var $60=$2;
   var $61=(($60+53)|0);
   HEAP8[($61)]=0;
   var $62=(($7+8)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=$63;
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+20)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=$2;
   var $69=$3;
   var $70=$3;
   var $71=$5;
   var $72=(($71) & 1);
   FUNCTION_TABLE[$67]($63, $68, $69, $70, 1, $72);
   var $73=$2;
   var $74=(($73+53)|0);
   var $75=HEAP8[($74)];
   var $76=(($75) & 1);
   if ($76) { label = 11; break; } else { label = 14; break; }
  case 11: 
   $is_dst_type_derived_from_static_type=1;
   var $78=$2;
   var $79=(($78+52)|0);
   var $80=HEAP8[($79)];
   var $81=(($80) & 1);
   if ($81) { label = 12; break; } else { label = 13; break; }
  case 12: 
   $does_dst_type_point_to_our_static_type=1;
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $85=$does_dst_type_point_to_our_static_type;
   var $86=(($85) & 1);
   if ($86) { label = 19; break; } else { label = 15; break; }
  case 15: 
   var $88=$3;
   var $89=$2;
   var $90=(($89+20)|0);
   HEAP32[(($90)>>2)]=$88;
   var $91=$2;
   var $92=(($91+40)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=((($93)+(1))|0);
   HEAP32[(($92)>>2)]=$94;
   var $95=$2;
   var $96=(($95+36)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=(($97)|(0))==1;
   if ($98) { label = 16; break; } else { label = 18; break; }
  case 16: 
   var $100=$2;
   var $101=(($100+24)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102)|(0))==2;
   if ($103) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $105=$2;
   var $106=(($105+54)|0);
   HEAP8[($106)]=1;
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $109=$is_dst_type_derived_from_static_type;
   var $110=(($109) & 1);
   if ($110) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $112=$2;
   var $113=(($112+44)|0);
   HEAP32[(($113)>>2)]=3;
   label = 22; break;
  case 21: 
   var $115=$2;
   var $116=(($115+44)|0);
   HEAP32[(($116)>>2)]=4;
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   label = 24; break;
  case 24: 
   label = 26; break;
  case 25: 
   var $121=(($7+8)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=$122;
   var $124=HEAP32[(($123)>>2)];
   var $125=(($124+24)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=$2;
   var $128=$3;
   var $129=$4;
   var $130=$5;
   var $131=(($130) & 1);
   FUNCTION_TABLE[$126]($122, $127, $128, $129, $131);
   label = 26; break;
  case 26: 
   label = 27; break;
  case 27: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   $1=$this;
   $2=$info;
   $3=$current_ptr;
   $4=$path_below;
   var $6=(($use_strcmp)&(1));
   $5=$6;
   var $7=$1;
   var $8=$7;
   var $9=$2;
   var $10=(($9+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11;
   var $13=$5;
   var $14=(($13) & 1);
   var $15=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($8, $12, $14);
   if ($15) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $17=$2;
   var $18=$3;
   var $19=$4;
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($7, $17, $18, $19);
   label = 15; break;
  case 3: 
   var $21=$7;
   var $22=$2;
   var $23=(($22)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$24;
   var $26=$5;
   var $27=(($26) & 1);
   var $28=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($21, $25, $27);
   if ($28) { label = 4; break; } else { label = 14; break; }
  case 4: 
   var $30=$3;
   var $31=$2;
   var $32=(($31+16)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($30)|(0))==(($33)|(0));
   if ($34) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $36=$3;
   var $37=$2;
   var $38=(($37+20)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($36)|(0))==(($39)|(0));
   if ($40) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $42=$4;
   var $43=(($42)|(0))==1;
   if ($43) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $45=$2;
   var $46=(($45+32)|0);
   HEAP32[(($46)>>2)]=1;
   label = 8; break;
  case 8: 
   label = 13; break;
  case 9: 
   var $49=$4;
   var $50=$2;
   var $51=(($50+32)|0);
   HEAP32[(($51)>>2)]=$49;
   var $52=$3;
   var $53=$2;
   var $54=(($53+20)|0);
   HEAP32[(($54)>>2)]=$52;
   var $55=$2;
   var $56=(($55+40)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=((($57)+(1))|0);
   HEAP32[(($56)>>2)]=$58;
   var $59=$2;
   var $60=(($59+36)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($61)|(0))==1;
   if ($62) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $64=$2;
   var $65=(($64+24)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=(($66)|(0))==2;
   if ($67) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $69=$2;
   var $70=(($69+54)|0);
   HEAP8[($70)]=1;
   label = 12; break;
  case 12: 
   var $72=$2;
   var $73=(($72+44)|0);
   HEAP32[(($73)>>2)]=4;
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $found_our_static_ptr;
   var $found_any_static_type;
   var $e;
   var $p;
   $1=$this;
   $2=$info;
   $3=$dst_ptr;
   $4=$current_ptr;
   $5=$path_below;
   var $7=(($use_strcmp)&(1));
   $6=$7;
   var $8=$1;
   var $9=$8;
   var $10=$2;
   var $11=(($10+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   var $14=$6;
   var $15=(($14) & 1);
   var $16=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($9, $13, $15);
   if ($16) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $18=$8;
   var $19=$2;
   var $20=$3;
   var $21=$4;
   var $22=$5;
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($18, $19, $20, $21, $22);
   label = 22; break;
  case 3: 
   var $24=$2;
   var $25=(($24+52)|0);
   var $26=HEAP8[($25)];
   var $27=(($26) & 1);
   var $28=(($27)&(1));
   $found_our_static_ptr=$28;
   var $29=$2;
   var $30=(($29+53)|0);
   var $31=HEAP8[($30)];
   var $32=(($31) & 1);
   var $33=(($32)&(1));
   $found_any_static_type=$33;
   var $34=(($8+16)|0);
   var $35=(($34)|0);
   var $36=(($8+12)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($35+($37<<3))|0);
   $e=$38;
   var $39=(($8+16)|0);
   var $40=(($39)|0);
   $p=$40;
   var $41=$2;
   var $42=(($41+52)|0);
   HEAP8[($42)]=0;
   var $43=$2;
   var $44=(($43+53)|0);
   HEAP8[($44)]=0;
   var $45=$p;
   var $46=$2;
   var $47=$3;
   var $48=$4;
   var $49=$5;
   var $50=$6;
   var $51=(($50) & 1);
   __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($45, $46, $47, $48, $49, $51);
   var $52=$p;
   var $53=(($52+8)|0);
   $p=$53;
   var $54=$e;
   var $55=(($53)>>>(0)) < (($54)>>>(0));
   if ($55) { label = 4; break; } else { label = 21; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $58=$2;
   var $59=(($58+54)|0);
   var $60=HEAP8[($59)];
   var $61=(($60) & 1);
   if ($61) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 20; break;
  case 7: 
   var $64=$2;
   var $65=(($64+52)|0);
   var $66=HEAP8[($65)];
   var $67=(($66) & 1);
   if ($67) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $69=$2;
   var $70=(($69+24)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71)|(0))==1;
   if ($72) { label = 9; break; } else { label = 10; break; }
  case 9: 
   label = 20; break;
  case 10: 
   var $75=(($8+8)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$76 & 2;
   var $78=(($77)|(0))!=0;
   if ($78) { label = 12; break; } else { label = 11; break; }
  case 11: 
   label = 20; break;
  case 12: 
   label = 18; break;
  case 13: 
   var $82=$2;
   var $83=(($82+53)|0);
   var $84=HEAP8[($83)];
   var $85=(($84) & 1);
   if ($85) { label = 14; break; } else { label = 17; break; }
  case 14: 
   var $87=(($8+8)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=$88 & 1;
   var $90=(($89)|(0))!=0;
   if ($90) { label = 16; break; } else { label = 15; break; }
  case 15: 
   label = 20; break;
  case 16: 
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $95=$2;
   var $96=(($95+52)|0);
   HEAP8[($96)]=0;
   var $97=$2;
   var $98=(($97+53)|0);
   HEAP8[($98)]=0;
   var $99=$p;
   var $100=$2;
   var $101=$3;
   var $102=$4;
   var $103=$5;
   var $104=$6;
   var $105=(($104) & 1);
   __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($99, $100, $101, $102, $103, $105);
   label = 19; break;
  case 19: 
   var $107=$p;
   var $108=(($107+8)|0);
   $p=$108;
   var $109=$e;
   var $110=(($108)>>>(0)) < (($109)>>>(0));
   if ($110) { label = 5; break; } else { label = 20; break; }
  case 20: 
   label = 21; break;
  case 21: 
   var $113=$found_our_static_ptr;
   var $114=(($113) & 1);
   var $115=$2;
   var $116=(($115+52)|0);
   var $117=(($114)&(1));
   HEAP8[($116)]=$117;
   var $118=$found_any_static_type;
   var $119=(($118) & 1);
   var $120=$2;
   var $121=(($120+53)|0);
   var $122=(($119)&(1));
   HEAP8[($121)]=$122;
   label = 22; break;
  case 22: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   $1=$this;
   $2=$info;
   $3=$dst_ptr;
   $4=$current_ptr;
   $5=$path_below;
   var $7=(($use_strcmp)&(1));
   $6=$7;
   var $8=$1;
   var $9=$8;
   var $10=$2;
   var $11=(($10+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   var $14=$6;
   var $15=(($14) & 1);
   var $16=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($9, $13, $15);
   if ($16) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $18=$8;
   var $19=$2;
   var $20=$3;
   var $21=$4;
   var $22=$5;
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($18, $19, $20, $21, $22);
   label = 4; break;
  case 3: 
   var $24=(($8+8)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$25;
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27+20)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$2;
   var $31=$3;
   var $32=$4;
   var $33=$5;
   var $34=$6;
   var $35=(($34) & 1);
   FUNCTION_TABLE[$29]($25, $30, $31, $32, $33, $35);
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   $1=$this;
   $2=$info;
   $3=$dst_ptr;
   $4=$current_ptr;
   $5=$path_below;
   var $7=(($use_strcmp)&(1));
   $6=$7;
   var $8=$1;
   var $9=$8;
   var $10=$2;
   var $11=(($10+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   var $14=$6;
   var $15=(($14) & 1);
   var $16=__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($9, $13, $15);
   if ($16) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $18=$2;
   var $19=$3;
   var $20=$4;
   var $21=$5;
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($8, $18, $19, $20, $21);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc($bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $mem;
   var $nb;
   var $idx;
   var $smallbits;
   var $b;
   var $p;
   var $F;
   var $b1;
   var $p2;
   var $r;
   var $rsize;
   var $i;
   var $leftbits;
   var $leastbit;
   var $Y;
   var $K;
   var $N;
   var $F3;
   var $DVS;
   var $DV;
   var $I;
   var $B;
   var $F4;
   var $rsize5;
   var $p6;
   var $r7;
   var $dvs;
   var $rsize8;
   var $p9;
   var $r10;
   $1=$bytes;
   var $2=$1;
   var $3=(($2)>>>(0)) <= 244;
   if ($3) { label = 2; break; } else { label = 41; break; }
  case 2: 
   var $5=$1;
   var $6=(($5)>>>(0)) < 11;
   if ($6) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $14 = 16;label = 5; break;
  case 4: 
   var $9=$1;
   var $10=((($9)+(4))|0);
   var $11=((($10)+(7))|0);
   var $12=$11 & -8;
   var $14 = $12;label = 5; break;
  case 5: 
   var $14;
   $nb=$14;
   var $15=$nb;
   var $16=$15 >>> 3;
   $idx=$16;
   var $17=HEAP32[((((4680)|0))>>2)];
   var $18=$idx;
   var $19=$17 >>> (($18)>>>(0));
   $smallbits=$19;
   var $20=$smallbits;
   var $21=$20 & 3;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 6; break; } else { label = 15; break; }
  case 6: 
   var $24=$smallbits;
   var $25=$24 ^ -1;
   var $26=$25 & 1;
   var $27=$idx;
   var $28=((($27)+($26))|0);
   $idx=$28;
   var $29=$idx;
   var $30=$29 << 1;
   var $31=((((4720)|0)+($30<<2))|0);
   var $32=$31;
   var $33=$32;
   $b=$33;
   var $34=$b;
   var $35=(($34+8)|0);
   var $36=HEAP32[(($35)>>2)];
   $p=$36;
   var $37=$p;
   var $38=(($37+8)|0);
   var $39=HEAP32[(($38)>>2)];
   $F=$39;
   var $40=$b;
   var $41=$F;
   var $42=(($40)|(0))==(($41)|(0));
   if ($42) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $44=$idx;
   var $45=1 << $44;
   var $46=$45 ^ -1;
   var $47=HEAP32[((((4680)|0))>>2)];
   var $48=$47 & $46;
   HEAP32[((((4680)|0))>>2)]=$48;
   label = 14; break;
  case 8: 
   var $50=$F;
   var $51=$50;
   var $52=HEAP32[((((4696)|0))>>2)];
   var $53=(($51)>>>(0)) >= (($52)>>>(0));
   if ($53) { label = 9; break; } else { var $61 = 0;label = 10; break; }
  case 9: 
   var $55=$F;
   var $56=(($55+12)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=$p;
   var $59=(($57)|(0))==(($58)|(0));
   var $61 = $59;label = 10; break;
  case 10: 
   var $61;
   var $62=(($61)&(1));
   var $63=($62);
   var $64=(($63)|(0))!=0;
   if ($64) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $66=$b;
   var $67=$F;
   var $68=(($67+12)|0);
   HEAP32[(($68)>>2)]=$66;
   var $69=$F;
   var $70=$b;
   var $71=(($70+8)|0);
   HEAP32[(($71)>>2)]=$69;
   label = 13; break;
  case 12: 
   _abort();
   throw "Reached an unreachable!";
  case 13: 
   label = 14; break;
  case 14: 
   var $75=$idx;
   var $76=$75 << 3;
   var $77=$76 | 1;
   var $78=$77 | 2;
   var $79=$p;
   var $80=(($79+4)|0);
   HEAP32[(($80)>>2)]=$78;
   var $81=$p;
   var $82=$81;
   var $83=$idx;
   var $84=$83 << 3;
   var $85=(($82+$84)|0);
   var $86=$85;
   var $87=(($86+4)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=$88 | 1;
   HEAP32[(($87)>>2)]=$89;
   var $90=$p;
   var $91=$90;
   var $92=(($91+8)|0);
   $mem=$92;
   label = 57; break;
  case 15: 
   var $94=$nb;
   var $95=HEAP32[((((4688)|0))>>2)];
   var $96=(($94)>>>(0)) > (($95)>>>(0));
   if ($96) { label = 16; break; } else { label = 39; break; }
  case 16: 
   var $98=$smallbits;
   var $99=(($98)|(0))!=0;
   if ($99) { label = 17; break; } else { label = 34; break; }
  case 17: 
   var $101=$smallbits;
   var $102=$idx;
   var $103=$101 << $102;
   var $104=$idx;
   var $105=1 << $104;
   var $106=$105 << 1;
   var $107=$idx;
   var $108=1 << $107;
   var $109=$108 << 1;
   var $110=(((-$109))|0);
   var $111=$106 | $110;
   var $112=$103 & $111;
   $leftbits=$112;
   var $113=$leftbits;
   var $114=$leftbits;
   var $115=(((-$114))|0);
   var $116=$113 & $115;
   $leastbit=$116;
   var $117=$leastbit;
   var $118=((($117)-(1))|0);
   $Y=$118;
   var $119=$Y;
   var $120=$119 >>> 12;
   var $121=$120 & 16;
   $K=$121;
   var $122=$K;
   $N=$122;
   var $123=$K;
   var $124=$Y;
   var $125=$124 >>> (($123)>>>(0));
   $Y=$125;
   var $126=$Y;
   var $127=$126 >>> 5;
   var $128=$127 & 8;
   $K=$128;
   var $129=$N;
   var $130=((($129)+($128))|0);
   $N=$130;
   var $131=$K;
   var $132=$Y;
   var $133=$132 >>> (($131)>>>(0));
   $Y=$133;
   var $134=$Y;
   var $135=$134 >>> 2;
   var $136=$135 & 4;
   $K=$136;
   var $137=$N;
   var $138=((($137)+($136))|0);
   $N=$138;
   var $139=$K;
   var $140=$Y;
   var $141=$140 >>> (($139)>>>(0));
   $Y=$141;
   var $142=$Y;
   var $143=$142 >>> 1;
   var $144=$143 & 2;
   $K=$144;
   var $145=$N;
   var $146=((($145)+($144))|0);
   $N=$146;
   var $147=$K;
   var $148=$Y;
   var $149=$148 >>> (($147)>>>(0));
   $Y=$149;
   var $150=$Y;
   var $151=$150 >>> 1;
   var $152=$151 & 1;
   $K=$152;
   var $153=$N;
   var $154=((($153)+($152))|0);
   $N=$154;
   var $155=$K;
   var $156=$Y;
   var $157=$156 >>> (($155)>>>(0));
   $Y=$157;
   var $158=$N;
   var $159=$Y;
   var $160=((($158)+($159))|0);
   $i=$160;
   var $161=$i;
   var $162=$161 << 1;
   var $163=((((4720)|0)+($162<<2))|0);
   var $164=$163;
   var $165=$164;
   $b1=$165;
   var $166=$b1;
   var $167=(($166+8)|0);
   var $168=HEAP32[(($167)>>2)];
   $p2=$168;
   var $169=$p2;
   var $170=(($169+8)|0);
   var $171=HEAP32[(($170)>>2)];
   $F3=$171;
   var $172=$b1;
   var $173=$F3;
   var $174=(($172)|(0))==(($173)|(0));
   if ($174) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $176=$i;
   var $177=1 << $176;
   var $178=$177 ^ -1;
   var $179=HEAP32[((((4680)|0))>>2)];
   var $180=$179 & $178;
   HEAP32[((((4680)|0))>>2)]=$180;
   label = 25; break;
  case 19: 
   var $182=$F3;
   var $183=$182;
   var $184=HEAP32[((((4696)|0))>>2)];
   var $185=(($183)>>>(0)) >= (($184)>>>(0));
   if ($185) { label = 20; break; } else { var $193 = 0;label = 21; break; }
  case 20: 
   var $187=$F3;
   var $188=(($187+12)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=$p2;
   var $191=(($189)|(0))==(($190)|(0));
   var $193 = $191;label = 21; break;
  case 21: 
   var $193;
   var $194=(($193)&(1));
   var $195=($194);
   var $196=(($195)|(0))!=0;
   if ($196) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $198=$b1;
   var $199=$F3;
   var $200=(($199+12)|0);
   HEAP32[(($200)>>2)]=$198;
   var $201=$F3;
   var $202=$b1;
   var $203=(($202+8)|0);
   HEAP32[(($203)>>2)]=$201;
   label = 24; break;
  case 23: 
   _abort();
   throw "Reached an unreachable!";
  case 24: 
   label = 25; break;
  case 25: 
   var $207=$i;
   var $208=$207 << 3;
   var $209=$nb;
   var $210=((($208)-($209))|0);
   $rsize=$210;
   var $211=$nb;
   var $212=$211 | 1;
   var $213=$212 | 2;
   var $214=$p2;
   var $215=(($214+4)|0);
   HEAP32[(($215)>>2)]=$213;
   var $216=$p2;
   var $217=$216;
   var $218=$nb;
   var $219=(($217+$218)|0);
   var $220=$219;
   $r=$220;
   var $221=$rsize;
   var $222=$221 | 1;
   var $223=$r;
   var $224=(($223+4)|0);
   HEAP32[(($224)>>2)]=$222;
   var $225=$rsize;
   var $226=$r;
   var $227=$226;
   var $228=$rsize;
   var $229=(($227+$228)|0);
   var $230=$229;
   var $231=(($230)|0);
   HEAP32[(($231)>>2)]=$225;
   var $232=HEAP32[((((4688)|0))>>2)];
   $DVS=$232;
   var $233=$DVS;
   var $234=(($233)|(0))!=0;
   if ($234) { label = 26; break; } else { label = 33; break; }
  case 26: 
   var $236=HEAP32[((((4700)|0))>>2)];
   $DV=$236;
   var $237=$DVS;
   var $238=$237 >>> 3;
   $I=$238;
   var $239=$I;
   var $240=$239 << 1;
   var $241=((((4720)|0)+($240<<2))|0);
   var $242=$241;
   var $243=$242;
   $B=$243;
   var $244=$B;
   $F4=$244;
   var $245=HEAP32[((((4680)|0))>>2)];
   var $246=$I;
   var $247=1 << $246;
   var $248=$245 & $247;
   var $249=(($248)|(0))!=0;
   if ($249) { label = 28; break; } else { label = 27; break; }
  case 27: 
   var $251=$I;
   var $252=1 << $251;
   var $253=HEAP32[((((4680)|0))>>2)];
   var $254=$253 | $252;
   HEAP32[((((4680)|0))>>2)]=$254;
   label = 32; break;
  case 28: 
   var $256=$B;
   var $257=(($256+8)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=$258;
   var $260=HEAP32[((((4696)|0))>>2)];
   var $261=(($259)>>>(0)) >= (($260)>>>(0));
   var $262=(($261)&(1));
   var $263=($262);
   var $264=(($263)|(0))!=0;
   if ($264) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $266=$B;
   var $267=(($266+8)|0);
   var $268=HEAP32[(($267)>>2)];
   $F4=$268;
   label = 31; break;
  case 30: 
   _abort();
   throw "Reached an unreachable!";
  case 31: 
   label = 32; break;
  case 32: 
   var $272=$DV;
   var $273=$B;
   var $274=(($273+8)|0);
   HEAP32[(($274)>>2)]=$272;
   var $275=$DV;
   var $276=$F4;
   var $277=(($276+12)|0);
   HEAP32[(($277)>>2)]=$275;
   var $278=$F4;
   var $279=$DV;
   var $280=(($279+8)|0);
   HEAP32[(($280)>>2)]=$278;
   var $281=$B;
   var $282=$DV;
   var $283=(($282+12)|0);
   HEAP32[(($283)>>2)]=$281;
   label = 33; break;
  case 33: 
   var $285=$rsize;
   HEAP32[((((4688)|0))>>2)]=$285;
   var $286=$r;
   HEAP32[((((4700)|0))>>2)]=$286;
   var $287=$p2;
   var $288=$287;
   var $289=(($288+8)|0);
   $mem=$289;
   label = 57; break;
  case 34: 
   var $291=HEAP32[((((4684)|0))>>2)];
   var $292=(($291)|(0))!=0;
   if ($292) { label = 35; break; } else { label = 37; break; }
  case 35: 
   var $294=$nb;
   var $295=_tmalloc_small(4680, $294);
   $mem=$295;
   var $296=(($295)|(0))!=0;
   if ($296) { label = 36; break; } else { label = 37; break; }
  case 36: 
   label = 57; break;
  case 37: 
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   label = 40; break;
  case 40: 
   label = 48; break;
  case 41: 
   var $303=$1;
   var $304=(($303)>>>(0)) >= 4294967232;
   if ($304) { label = 42; break; } else { label = 43; break; }
  case 42: 
   $nb=-1;
   label = 47; break;
  case 43: 
   var $307=$1;
   var $308=((($307)+(4))|0);
   var $309=((($308)+(7))|0);
   var $310=$309 & -8;
   $nb=$310;
   var $311=HEAP32[((((4684)|0))>>2)];
   var $312=(($311)|(0))!=0;
   if ($312) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $314=$nb;
   var $315=_tmalloc_large(4680, $314);
   $mem=$315;
   var $316=(($315)|(0))!=0;
   if ($316) { label = 45; break; } else { label = 46; break; }
  case 45: 
   label = 57; break;
  case 46: 
   label = 47; break;
  case 47: 
   label = 48; break;
  case 48: 
   var $321=$nb;
   var $322=HEAP32[((((4688)|0))>>2)];
   var $323=(($321)>>>(0)) <= (($322)>>>(0));
   if ($323) { label = 49; break; } else { label = 53; break; }
  case 49: 
   var $325=HEAP32[((((4688)|0))>>2)];
   var $326=$nb;
   var $327=((($325)-($326))|0);
   $rsize5=$327;
   var $328=HEAP32[((((4700)|0))>>2)];
   $p6=$328;
   var $329=$rsize5;
   var $330=(($329)>>>(0)) >= 16;
   if ($330) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $332=$p6;
   var $333=$332;
   var $334=$nb;
   var $335=(($333+$334)|0);
   var $336=$335;
   HEAP32[((((4700)|0))>>2)]=$336;
   $r7=$336;
   var $337=$rsize5;
   HEAP32[((((4688)|0))>>2)]=$337;
   var $338=$rsize5;
   var $339=$338 | 1;
   var $340=$r7;
   var $341=(($340+4)|0);
   HEAP32[(($341)>>2)]=$339;
   var $342=$rsize5;
   var $343=$r7;
   var $344=$343;
   var $345=$rsize5;
   var $346=(($344+$345)|0);
   var $347=$346;
   var $348=(($347)|0);
   HEAP32[(($348)>>2)]=$342;
   var $349=$nb;
   var $350=$349 | 1;
   var $351=$350 | 2;
   var $352=$p6;
   var $353=(($352+4)|0);
   HEAP32[(($353)>>2)]=$351;
   label = 52; break;
  case 51: 
   var $355=HEAP32[((((4688)|0))>>2)];
   $dvs=$355;
   HEAP32[((((4688)|0))>>2)]=0;
   HEAP32[((((4700)|0))>>2)]=0;
   var $356=$dvs;
   var $357=$356 | 1;
   var $358=$357 | 2;
   var $359=$p6;
   var $360=(($359+4)|0);
   HEAP32[(($360)>>2)]=$358;
   var $361=$p6;
   var $362=$361;
   var $363=$dvs;
   var $364=(($362+$363)|0);
   var $365=$364;
   var $366=(($365+4)|0);
   var $367=HEAP32[(($366)>>2)];
   var $368=$367 | 1;
   HEAP32[(($366)>>2)]=$368;
   label = 52; break;
  case 52: 
   var $370=$p6;
   var $371=$370;
   var $372=(($371+8)|0);
   $mem=$372;
   label = 57; break;
  case 53: 
   var $374=$nb;
   var $375=HEAP32[((((4692)|0))>>2)];
   var $376=(($374)>>>(0)) < (($375)>>>(0));
   if ($376) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $378=$nb;
   var $379=HEAP32[((((4692)|0))>>2)];
   var $380=((($379)-($378))|0);
   HEAP32[((((4692)|0))>>2)]=$380;
   $rsize8=$380;
   var $381=HEAP32[((((4704)|0))>>2)];
   $p9=$381;
   var $382=$p9;
   var $383=$382;
   var $384=$nb;
   var $385=(($383+$384)|0);
   var $386=$385;
   HEAP32[((((4704)|0))>>2)]=$386;
   $r10=$386;
   var $387=$rsize8;
   var $388=$387 | 1;
   var $389=$r10;
   var $390=(($389+4)|0);
   HEAP32[(($390)>>2)]=$388;
   var $391=$nb;
   var $392=$391 | 1;
   var $393=$392 | 2;
   var $394=$p9;
   var $395=(($394+4)|0);
   HEAP32[(($395)>>2)]=$393;
   var $396=$p9;
   var $397=$396;
   var $398=(($397+8)|0);
   $mem=$398;
   label = 57; break;
  case 55: 
   label = 56; break;
  case 56: 
   var $401=$nb;
   var $402=_sys_alloc(4680, $401);
   $mem=$402;
   label = 57; break;
  case 57: 
   var $404=$mem;
   return $404;
  default: assert(0, "bad label: " + label);
 }
}
Module["_malloc"] = _malloc;
function _tmalloc_small($m, $nb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $t;
   var $v;
   var $rsize;
   var $i;
   var $leastbit;
   var $Y;
   var $K;
   var $N;
   var $trem;
   var $r;
   var $XP;
   var $R;
   var $F;
   var $RP;
   var $CP;
   var $H;
   var $C0;
   var $C1;
   var $DVS;
   var $DV;
   var $I;
   var $B;
   var $F1;
   $1=$m;
   $2=$nb;
   var $3=$1;
   var $4=(($3+4)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$1;
   var $7=(($6+4)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(((-$8))|0);
   var $10=$5 & $9;
   $leastbit=$10;
   var $11=$leastbit;
   var $12=((($11)-(1))|0);
   $Y=$12;
   var $13=$Y;
   var $14=$13 >>> 12;
   var $15=$14 & 16;
   $K=$15;
   var $16=$K;
   $N=$16;
   var $17=$K;
   var $18=$Y;
   var $19=$18 >>> (($17)>>>(0));
   $Y=$19;
   var $20=$Y;
   var $21=$20 >>> 5;
   var $22=$21 & 8;
   $K=$22;
   var $23=$N;
   var $24=((($23)+($22))|0);
   $N=$24;
   var $25=$K;
   var $26=$Y;
   var $27=$26 >>> (($25)>>>(0));
   $Y=$27;
   var $28=$Y;
   var $29=$28 >>> 2;
   var $30=$29 & 4;
   $K=$30;
   var $31=$N;
   var $32=((($31)+($30))|0);
   $N=$32;
   var $33=$K;
   var $34=$Y;
   var $35=$34 >>> (($33)>>>(0));
   $Y=$35;
   var $36=$Y;
   var $37=$36 >>> 1;
   var $38=$37 & 2;
   $K=$38;
   var $39=$N;
   var $40=((($39)+($38))|0);
   $N=$40;
   var $41=$K;
   var $42=$Y;
   var $43=$42 >>> (($41)>>>(0));
   $Y=$43;
   var $44=$Y;
   var $45=$44 >>> 1;
   var $46=$45 & 1;
   $K=$46;
   var $47=$N;
   var $48=((($47)+($46))|0);
   $N=$48;
   var $49=$K;
   var $50=$Y;
   var $51=$50 >>> (($49)>>>(0));
   $Y=$51;
   var $52=$N;
   var $53=$Y;
   var $54=((($52)+($53))|0);
   $i=$54;
   var $55=$i;
   var $56=$1;
   var $57=(($56+304)|0);
   var $58=(($57+($55<<2))|0);
   var $59=HEAP32[(($58)>>2)];
   $t=$59;
   $v=$59;
   var $60=$t;
   var $61=(($60+4)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$62 & -8;
   var $64=$2;
   var $65=((($63)-($64))|0);
   $rsize=$65;
   label = 2; break;
  case 2: 
   var $67=$t;
   var $68=(($67+16)|0);
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|(0))!=0;
   if ($71) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $73=$t;
   var $74=(($73+16)|0);
   var $75=(($74)|0);
   var $76=HEAP32[(($75)>>2)];
   var $83 = $76;label = 5; break;
  case 4: 
   var $78=$t;
   var $79=(($78+16)|0);
   var $80=(($79+4)|0);
   var $81=HEAP32[(($80)>>2)];
   var $83 = $81;label = 5; break;
  case 5: 
   var $83;
   $t=$83;
   var $84=(($83)|(0))!=0;
   if ($84) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $86=$t;
   var $87=(($86+4)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=$88 & -8;
   var $90=$2;
   var $91=((($89)-($90))|0);
   $trem=$91;
   var $92=$trem;
   var $93=$rsize;
   var $94=(($92)>>>(0)) < (($93)>>>(0));
   if ($94) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $96=$trem;
   $rsize=$96;
   var $97=$t;
   $v=$97;
   label = 8; break;
  case 8: 
   label = 2; break;
  case 9: 
   var $100=$v;
   var $101=$100;
   var $102=$1;
   var $103=(($102+16)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($101)>>>(0)) >= (($104)>>>(0));
   var $106=(($105)&(1));
   var $107=($106);
   var $108=(($107)|(0))!=0;
   if ($108) { label = 10; break; } else { label = 72; break; }
  case 10: 
   var $110=$v;
   var $111=$110;
   var $112=$2;
   var $113=(($111+$112)|0);
   var $114=$113;
   $r=$114;
   var $115=$v;
   var $116=$115;
   var $117=$r;
   var $118=$117;
   var $119=(($116)>>>(0)) < (($118)>>>(0));
   var $120=(($119)&(1));
   var $121=($120);
   var $122=(($121)|(0))!=0;
   if ($122) { label = 11; break; } else { label = 71; break; }
  case 11: 
   var $124=$v;
   var $125=(($124+24)|0);
   var $126=HEAP32[(($125)>>2)];
   $XP=$126;
   var $127=$v;
   var $128=(($127+12)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=$v;
   var $131=(($129)|(0))!=(($130)|(0));
   if ($131) { label = 12; break; } else { label = 19; break; }
  case 12: 
   var $133=$v;
   var $134=(($133+8)|0);
   var $135=HEAP32[(($134)>>2)];
   $F=$135;
   var $136=$v;
   var $137=(($136+12)|0);
   var $138=HEAP32[(($137)>>2)];
   $R=$138;
   var $139=$F;
   var $140=$139;
   var $141=$1;
   var $142=(($141+16)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=(($140)>>>(0)) >= (($143)>>>(0));
   if ($144) { label = 13; break; } else { var $158 = 0;label = 15; break; }
  case 13: 
   var $146=$F;
   var $147=(($146+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=$v;
   var $150=(($148)|(0))==(($149)|(0));
   if ($150) { label = 14; break; } else { var $158 = 0;label = 15; break; }
  case 14: 
   var $152=$R;
   var $153=(($152+8)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=$v;
   var $156=(($154)|(0))==(($155)|(0));
   var $158 = $156;label = 15; break;
  case 15: 
   var $158;
   var $159=(($158)&(1));
   var $160=($159);
   var $161=(($160)|(0))!=0;
   if ($161) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $163=$R;
   var $164=$F;
   var $165=(($164+12)|0);
   HEAP32[(($165)>>2)]=$163;
   var $166=$F;
   var $167=$R;
   var $168=(($167+8)|0);
   HEAP32[(($168)>>2)]=$166;
   label = 18; break;
  case 17: 
   _abort();
   throw "Reached an unreachable!";
  case 18: 
   label = 31; break;
  case 19: 
   var $172=$v;
   var $173=(($172+16)|0);
   var $174=(($173+4)|0);
   $RP=$174;
   var $175=HEAP32[(($174)>>2)];
   $R=$175;
   var $176=(($175)|(0))!=0;
   if ($176) { label = 21; break; } else { label = 20; break; }
  case 20: 
   var $178=$v;
   var $179=(($178+16)|0);
   var $180=(($179)|0);
   $RP=$180;
   var $181=HEAP32[(($180)>>2)];
   $R=$181;
   var $182=(($181)|(0))!=0;
   if ($182) { label = 21; break; } else { label = 30; break; }
  case 21: 
   label = 22; break;
  case 22: 
   var $185=$R;
   var $186=(($185+16)|0);
   var $187=(($186+4)|0);
   $CP=$187;
   var $188=HEAP32[(($187)>>2)];
   var $189=(($188)|(0))!=0;
   if ($189) { var $197 = 1;label = 24; break; } else { label = 23; break; }
  case 23: 
   var $191=$R;
   var $192=(($191+16)|0);
   var $193=(($192)|0);
   $CP=$193;
   var $194=HEAP32[(($193)>>2)];
   var $195=(($194)|(0))!=0;
   var $197 = $195;label = 24; break;
  case 24: 
   var $197;
   if ($197) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $199=$CP;
   $RP=$199;
   var $200=HEAP32[(($199)>>2)];
   $R=$200;
   label = 22; break;
  case 26: 
   var $202=$RP;
   var $203=$202;
   var $204=$1;
   var $205=(($204+16)|0);
   var $206=HEAP32[(($205)>>2)];
   var $207=(($203)>>>(0)) >= (($206)>>>(0));
   var $208=(($207)&(1));
   var $209=($208);
   var $210=(($209)|(0))!=0;
   if ($210) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $212=$RP;
   HEAP32[(($212)>>2)]=0;
   label = 29; break;
  case 28: 
   _abort();
   throw "Reached an unreachable!";
  case 29: 
   label = 30; break;
  case 30: 
   label = 31; break;
  case 31: 
   var $217=$XP;
   var $218=(($217)|(0))!=0;
   if ($218) { label = 32; break; } else { label = 59; break; }
  case 32: 
   var $220=$v;
   var $221=(($220+28)|0);
   var $222=HEAP32[(($221)>>2)];
   var $223=$1;
   var $224=(($223+304)|0);
   var $225=(($224+($222<<2))|0);
   $H=$225;
   var $226=$v;
   var $227=$H;
   var $228=HEAP32[(($227)>>2)];
   var $229=(($226)|(0))==(($228)|(0));
   if ($229) { label = 33; break; } else { label = 36; break; }
  case 33: 
   var $231=$R;
   var $232=$H;
   HEAP32[(($232)>>2)]=$231;
   var $233=(($231)|(0))==0;
   if ($233) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $235=$v;
   var $236=(($235+28)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=1 << $237;
   var $239=$238 ^ -1;
   var $240=$1;
   var $241=(($240+4)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=$242 & $239;
   HEAP32[(($241)>>2)]=$243;
   label = 35; break;
  case 35: 
   label = 43; break;
  case 36: 
   var $246=$XP;
   var $247=$246;
   var $248=$1;
   var $249=(($248+16)|0);
   var $250=HEAP32[(($249)>>2)];
   var $251=(($247)>>>(0)) >= (($250)>>>(0));
   var $252=(($251)&(1));
   var $253=($252);
   var $254=(($253)|(0))!=0;
   if ($254) { label = 37; break; } else { label = 41; break; }
  case 37: 
   var $256=$XP;
   var $257=(($256+16)|0);
   var $258=(($257)|0);
   var $259=HEAP32[(($258)>>2)];
   var $260=$v;
   var $261=(($259)|(0))==(($260)|(0));
   if ($261) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $263=$R;
   var $264=$XP;
   var $265=(($264+16)|0);
   var $266=(($265)|0);
   HEAP32[(($266)>>2)]=$263;
   label = 40; break;
  case 39: 
   var $268=$R;
   var $269=$XP;
   var $270=(($269+16)|0);
   var $271=(($270+4)|0);
   HEAP32[(($271)>>2)]=$268;
   label = 40; break;
  case 40: 
   label = 42; break;
  case 41: 
   _abort();
   throw "Reached an unreachable!";
  case 42: 
   label = 43; break;
  case 43: 
   var $276=$R;
   var $277=(($276)|(0))!=0;
   if ($277) { label = 44; break; } else { label = 58; break; }
  case 44: 
   var $279=$R;
   var $280=$279;
   var $281=$1;
   var $282=(($281+16)|0);
   var $283=HEAP32[(($282)>>2)];
   var $284=(($280)>>>(0)) >= (($283)>>>(0));
   var $285=(($284)&(1));
   var $286=($285);
   var $287=(($286)|(0))!=0;
   if ($287) { label = 45; break; } else { label = 56; break; }
  case 45: 
   var $289=$XP;
   var $290=$R;
   var $291=(($290+24)|0);
   HEAP32[(($291)>>2)]=$289;
   var $292=$v;
   var $293=(($292+16)|0);
   var $294=(($293)|0);
   var $295=HEAP32[(($294)>>2)];
   $C0=$295;
   var $296=(($295)|(0))!=0;
   if ($296) { label = 46; break; } else { label = 50; break; }
  case 46: 
   var $298=$C0;
   var $299=$298;
   var $300=$1;
   var $301=(($300+16)|0);
   var $302=HEAP32[(($301)>>2)];
   var $303=(($299)>>>(0)) >= (($302)>>>(0));
   var $304=(($303)&(1));
   var $305=($304);
   var $306=(($305)|(0))!=0;
   if ($306) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $308=$C0;
   var $309=$R;
   var $310=(($309+16)|0);
   var $311=(($310)|0);
   HEAP32[(($311)>>2)]=$308;
   var $312=$R;
   var $313=$C0;
   var $314=(($313+24)|0);
   HEAP32[(($314)>>2)]=$312;
   label = 49; break;
  case 48: 
   _abort();
   throw "Reached an unreachable!";
  case 49: 
   label = 50; break;
  case 50: 
   var $318=$v;
   var $319=(($318+16)|0);
   var $320=(($319+4)|0);
   var $321=HEAP32[(($320)>>2)];
   $C1=$321;
   var $322=(($321)|(0))!=0;
   if ($322) { label = 51; break; } else { label = 55; break; }
  case 51: 
   var $324=$C1;
   var $325=$324;
   var $326=$1;
   var $327=(($326+16)|0);
   var $328=HEAP32[(($327)>>2)];
   var $329=(($325)>>>(0)) >= (($328)>>>(0));
   var $330=(($329)&(1));
   var $331=($330);
   var $332=(($331)|(0))!=0;
   if ($332) { label = 52; break; } else { label = 53; break; }
  case 52: 
   var $334=$C1;
   var $335=$R;
   var $336=(($335+16)|0);
   var $337=(($336+4)|0);
   HEAP32[(($337)>>2)]=$334;
   var $338=$R;
   var $339=$C1;
   var $340=(($339+24)|0);
   HEAP32[(($340)>>2)]=$338;
   label = 54; break;
  case 53: 
   _abort();
   throw "Reached an unreachable!";
  case 54: 
   label = 55; break;
  case 55: 
   label = 57; break;
  case 56: 
   _abort();
   throw "Reached an unreachable!";
  case 57: 
   label = 58; break;
  case 58: 
   label = 59; break;
  case 59: 
   var $348=$rsize;
   var $349=(($348)>>>(0)) < 16;
   if ($349) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $351=$rsize;
   var $352=$2;
   var $353=((($351)+($352))|0);
   var $354=$353 | 1;
   var $355=$354 | 2;
   var $356=$v;
   var $357=(($356+4)|0);
   HEAP32[(($357)>>2)]=$355;
   var $358=$v;
   var $359=$358;
   var $360=$rsize;
   var $361=$2;
   var $362=((($360)+($361))|0);
   var $363=(($359+$362)|0);
   var $364=$363;
   var $365=(($364+4)|0);
   var $366=HEAP32[(($365)>>2)];
   var $367=$366 | 1;
   HEAP32[(($365)>>2)]=$367;
   label = 70; break;
  case 61: 
   var $369=$2;
   var $370=$369 | 1;
   var $371=$370 | 2;
   var $372=$v;
   var $373=(($372+4)|0);
   HEAP32[(($373)>>2)]=$371;
   var $374=$rsize;
   var $375=$374 | 1;
   var $376=$r;
   var $377=(($376+4)|0);
   HEAP32[(($377)>>2)]=$375;
   var $378=$rsize;
   var $379=$r;
   var $380=$379;
   var $381=$rsize;
   var $382=(($380+$381)|0);
   var $383=$382;
   var $384=(($383)|0);
   HEAP32[(($384)>>2)]=$378;
   var $385=$1;
   var $386=(($385+8)|0);
   var $387=HEAP32[(($386)>>2)];
   $DVS=$387;
   var $388=$DVS;
   var $389=(($388)|(0))!=0;
   if ($389) { label = 62; break; } else { label = 69; break; }
  case 62: 
   var $391=$1;
   var $392=(($391+20)|0);
   var $393=HEAP32[(($392)>>2)];
   $DV=$393;
   var $394=$DVS;
   var $395=$394 >>> 3;
   $I=$395;
   var $396=$I;
   var $397=$396 << 1;
   var $398=$1;
   var $399=(($398+40)|0);
   var $400=(($399+($397<<2))|0);
   var $401=$400;
   var $402=$401;
   $B=$402;
   var $403=$B;
   $F1=$403;
   var $404=$1;
   var $405=(($404)|0);
   var $406=HEAP32[(($405)>>2)];
   var $407=$I;
   var $408=1 << $407;
   var $409=$406 & $408;
   var $410=(($409)|(0))!=0;
   if ($410) { label = 64; break; } else { label = 63; break; }
  case 63: 
   var $412=$I;
   var $413=1 << $412;
   var $414=$1;
   var $415=(($414)|0);
   var $416=HEAP32[(($415)>>2)];
   var $417=$416 | $413;
   HEAP32[(($415)>>2)]=$417;
   label = 68; break;
  case 64: 
   var $419=$B;
   var $420=(($419+8)|0);
   var $421=HEAP32[(($420)>>2)];
   var $422=$421;
   var $423=$1;
   var $424=(($423+16)|0);
   var $425=HEAP32[(($424)>>2)];
   var $426=(($422)>>>(0)) >= (($425)>>>(0));
   var $427=(($426)&(1));
   var $428=($427);
   var $429=(($428)|(0))!=0;
   if ($429) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $431=$B;
   var $432=(($431+8)|0);
   var $433=HEAP32[(($432)>>2)];
   $F1=$433;
   label = 67; break;
  case 66: 
   _abort();
   throw "Reached an unreachable!";
  case 67: 
   label = 68; break;
  case 68: 
   var $437=$DV;
   var $438=$B;
   var $439=(($438+8)|0);
   HEAP32[(($439)>>2)]=$437;
   var $440=$DV;
   var $441=$F1;
   var $442=(($441+12)|0);
   HEAP32[(($442)>>2)]=$440;
   var $443=$F1;
   var $444=$DV;
   var $445=(($444+8)|0);
   HEAP32[(($445)>>2)]=$443;
   var $446=$B;
   var $447=$DV;
   var $448=(($447+12)|0);
   HEAP32[(($448)>>2)]=$446;
   label = 69; break;
  case 69: 
   var $450=$rsize;
   var $451=$1;
   var $452=(($451+8)|0);
   HEAP32[(($452)>>2)]=$450;
   var $453=$r;
   var $454=$1;
   var $455=(($454+20)|0);
   HEAP32[(($455)>>2)]=$453;
   label = 70; break;
  case 70: 
   var $457=$v;
   var $458=$457;
   var $459=(($458+8)|0);
   return $459;
  case 71: 
   label = 72; break;
  case 72: 
   _abort();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function _tmalloc_large($m, $nb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $v;
   var $rsize;
   var $t;
   var $idx;
   var $X;
   var $Y;
   var $N;
   var $K;
   var $sizebits;
   var $rst;
   var $rt;
   var $trem;
   var $leftbits;
   var $i;
   var $leastbit;
   var $Y1;
   var $K2;
   var $N3;
   var $trem4;
   var $r;
   var $XP;
   var $R;
   var $F;
   var $RP;
   var $CP;
   var $H;
   var $C0;
   var $C1;
   var $I;
   var $B;
   var $F5;
   var $TP;
   var $H6;
   var $I7;
   var $X8;
   var $Y9;
   var $N10;
   var $K11;
   var $T;
   var $K12;
   var $C;
   var $F13;
   $2=$m;
   $3=$nb;
   $v=0;
   var $4=$3;
   var $5=(((-$4))|0);
   $rsize=$5;
   var $6=$3;
   var $7=$6 >>> 8;
   $X=$7;
   var $8=$X;
   var $9=(($8)|(0))==0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $idx=0;
   label = 7; break;
  case 3: 
   var $12=$X;
   var $13=(($12)>>>(0)) > 65535;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $idx=31;
   label = 6; break;
  case 5: 
   var $16=$X;
   $Y=$16;
   var $17=$Y;
   var $18=((($17)-(256))|0);
   var $19=$18 >>> 16;
   var $20=$19 & 8;
   $N=$20;
   var $21=$N;
   var $22=$Y;
   var $23=$22 << $21;
   $Y=$23;
   var $24=((($23)-(4096))|0);
   var $25=$24 >>> 16;
   var $26=$25 & 4;
   $K=$26;
   var $27=$K;
   var $28=$N;
   var $29=((($28)+($27))|0);
   $N=$29;
   var $30=$K;
   var $31=$Y;
   var $32=$31 << $30;
   $Y=$32;
   var $33=((($32)-(16384))|0);
   var $34=$33 >>> 16;
   var $35=$34 & 2;
   $K=$35;
   var $36=$N;
   var $37=((($36)+($35))|0);
   $N=$37;
   var $38=$N;
   var $39=(((14)-($38))|0);
   var $40=$K;
   var $41=$Y;
   var $42=$41 << $40;
   $Y=$42;
   var $43=$42 >>> 15;
   var $44=((($39)+($43))|0);
   $K=$44;
   var $45=$K;
   var $46=$45 << 1;
   var $47=$3;
   var $48=$K;
   var $49=((($48)+(7))|0);
   var $50=$47 >>> (($49)>>>(0));
   var $51=$50 & 1;
   var $52=((($46)+($51))|0);
   $idx=$52;
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $55=$idx;
   var $56=$2;
   var $57=(($56+304)|0);
   var $58=(($57+($55<<2))|0);
   var $59=HEAP32[(($58)>>2)];
   $t=$59;
   var $60=(($59)|(0))!=0;
   if ($60) { label = 8; break; } else { label = 23; break; }
  case 8: 
   var $62=$3;
   var $63=$idx;
   var $64=(($63)|(0))==31;
   if ($64) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $73 = 0;label = 11; break;
  case 10: 
   var $67=$idx;
   var $68=$67 >>> 1;
   var $69=((($68)+(8))|0);
   var $70=((($69)-(2))|0);
   var $71=(((31)-($70))|0);
   var $73 = $71;label = 11; break;
  case 11: 
   var $73;
   var $74=$62 << $73;
   $sizebits=$74;
   $rst=0;
   label = 12; break;
  case 12: 
   var $76=$t;
   var $77=(($76+4)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$78 & -8;
   var $80=$3;
   var $81=((($79)-($80))|0);
   $trem=$81;
   var $82=$trem;
   var $83=$rsize;
   var $84=(($82)>>>(0)) < (($83)>>>(0));
   if ($84) { label = 13; break; } else { label = 16; break; }
  case 13: 
   var $86=$t;
   $v=$86;
   var $87=$trem;
   $rsize=$87;
   var $88=(($87)|(0))==0;
   if ($88) { label = 14; break; } else { label = 15; break; }
  case 14: 
   label = 22; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $92=$t;
   var $93=(($92+16)|0);
   var $94=(($93+4)|0);
   var $95=HEAP32[(($94)>>2)];
   $rt=$95;
   var $96=$sizebits;
   var $97=$96 >>> 31;
   var $98=$97 & 1;
   var $99=$t;
   var $100=(($99+16)|0);
   var $101=(($100+($98<<2))|0);
   var $102=HEAP32[(($101)>>2)];
   $t=$102;
   var $103=$rt;
   var $104=(($103)|(0))!=0;
   if ($104) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $106=$rt;
   var $107=$t;
   var $108=(($106)|(0))!=(($107)|(0));
   if ($108) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $110=$rt;
   $rst=$110;
   label = 19; break;
  case 19: 
   var $112=$t;
   var $113=(($112)|(0))==0;
   if ($113) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $115=$rst;
   $t=$115;
   label = 22; break;
  case 21: 
   var $117=$sizebits;
   var $118=$117 << 1;
   $sizebits=$118;
   label = 12; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $121=$t;
   var $122=(($121)|(0))==0;
   if ($122) { label = 24; break; } else { label = 28; break; }
  case 24: 
   var $124=$v;
   var $125=(($124)|(0))==0;
   if ($125) { label = 25; break; } else { label = 28; break; }
  case 25: 
   var $127=$idx;
   var $128=1 << $127;
   var $129=$128 << 1;
   var $130=$idx;
   var $131=1 << $130;
   var $132=$131 << 1;
   var $133=(((-$132))|0);
   var $134=$129 | $133;
   var $135=$2;
   var $136=(($135+4)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=$134 & $137;
   $leftbits=$138;
   var $139=$leftbits;
   var $140=(($139)|(0))!=0;
   if ($140) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $142=$leftbits;
   var $143=$leftbits;
   var $144=(((-$143))|0);
   var $145=$142 & $144;
   $leastbit=$145;
   var $146=$leastbit;
   var $147=((($146)-(1))|0);
   $Y1=$147;
   var $148=$Y1;
   var $149=$148 >>> 12;
   var $150=$149 & 16;
   $K2=$150;
   var $151=$K2;
   $N3=$151;
   var $152=$K2;
   var $153=$Y1;
   var $154=$153 >>> (($152)>>>(0));
   $Y1=$154;
   var $155=$Y1;
   var $156=$155 >>> 5;
   var $157=$156 & 8;
   $K2=$157;
   var $158=$N3;
   var $159=((($158)+($157))|0);
   $N3=$159;
   var $160=$K2;
   var $161=$Y1;
   var $162=$161 >>> (($160)>>>(0));
   $Y1=$162;
   var $163=$Y1;
   var $164=$163 >>> 2;
   var $165=$164 & 4;
   $K2=$165;
   var $166=$N3;
   var $167=((($166)+($165))|0);
   $N3=$167;
   var $168=$K2;
   var $169=$Y1;
   var $170=$169 >>> (($168)>>>(0));
   $Y1=$170;
   var $171=$Y1;
   var $172=$171 >>> 1;
   var $173=$172 & 2;
   $K2=$173;
   var $174=$N3;
   var $175=((($174)+($173))|0);
   $N3=$175;
   var $176=$K2;
   var $177=$Y1;
   var $178=$177 >>> (($176)>>>(0));
   $Y1=$178;
   var $179=$Y1;
   var $180=$179 >>> 1;
   var $181=$180 & 1;
   $K2=$181;
   var $182=$N3;
   var $183=((($182)+($181))|0);
   $N3=$183;
   var $184=$K2;
   var $185=$Y1;
   var $186=$185 >>> (($184)>>>(0));
   $Y1=$186;
   var $187=$N3;
   var $188=$Y1;
   var $189=((($187)+($188))|0);
   $i=$189;
   var $190=$i;
   var $191=$2;
   var $192=(($191+304)|0);
   var $193=(($192+($190<<2))|0);
   var $194=HEAP32[(($193)>>2)];
   $t=$194;
   label = 27; break;
  case 27: 
   label = 28; break;
  case 28: 
   label = 29; break;
  case 29: 
   var $198=$t;
   var $199=(($198)|(0))!=0;
   if ($199) { label = 30; break; } else { label = 36; break; }
  case 30: 
   var $201=$t;
   var $202=(($201+4)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=$203 & -8;
   var $205=$3;
   var $206=((($204)-($205))|0);
   $trem4=$206;
   var $207=$trem4;
   var $208=$rsize;
   var $209=(($207)>>>(0)) < (($208)>>>(0));
   if ($209) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $211=$trem4;
   $rsize=$211;
   var $212=$t;
   $v=$212;
   label = 32; break;
  case 32: 
   var $214=$t;
   var $215=(($214+16)|0);
   var $216=(($215)|0);
   var $217=HEAP32[(($216)>>2)];
   var $218=(($217)|(0))!=0;
   if ($218) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $220=$t;
   var $221=(($220+16)|0);
   var $222=(($221)|0);
   var $223=HEAP32[(($222)>>2)];
   var $230 = $223;label = 35; break;
  case 34: 
   var $225=$t;
   var $226=(($225+16)|0);
   var $227=(($226+4)|0);
   var $228=HEAP32[(($227)>>2)];
   var $230 = $228;label = 35; break;
  case 35: 
   var $230;
   $t=$230;
   label = 29; break;
  case 36: 
   var $232=$v;
   var $233=(($232)|(0))!=0;
   if ($233) { label = 37; break; } else { label = 129; break; }
  case 37: 
   var $235=$rsize;
   var $236=$2;
   var $237=(($236+8)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239=$3;
   var $240=((($238)-($239))|0);
   var $241=(($235)>>>(0)) < (($240)>>>(0));
   if ($241) { label = 38; break; } else { label = 129; break; }
  case 38: 
   var $243=$v;
   var $244=$243;
   var $245=$2;
   var $246=(($245+16)|0);
   var $247=HEAP32[(($246)>>2)];
   var $248=(($244)>>>(0)) >= (($247)>>>(0));
   var $249=(($248)&(1));
   var $250=($249);
   var $251=(($250)|(0))!=0;
   if ($251) { label = 39; break; } else { label = 128; break; }
  case 39: 
   var $253=$v;
   var $254=$253;
   var $255=$3;
   var $256=(($254+$255)|0);
   var $257=$256;
   $r=$257;
   var $258=$v;
   var $259=$258;
   var $260=$r;
   var $261=$260;
   var $262=(($259)>>>(0)) < (($261)>>>(0));
   var $263=(($262)&(1));
   var $264=($263);
   var $265=(($264)|(0))!=0;
   if ($265) { label = 40; break; } else { label = 127; break; }
  case 40: 
   var $267=$v;
   var $268=(($267+24)|0);
   var $269=HEAP32[(($268)>>2)];
   $XP=$269;
   var $270=$v;
   var $271=(($270+12)|0);
   var $272=HEAP32[(($271)>>2)];
   var $273=$v;
   var $274=(($272)|(0))!=(($273)|(0));
   if ($274) { label = 41; break; } else { label = 48; break; }
  case 41: 
   var $276=$v;
   var $277=(($276+8)|0);
   var $278=HEAP32[(($277)>>2)];
   $F=$278;
   var $279=$v;
   var $280=(($279+12)|0);
   var $281=HEAP32[(($280)>>2)];
   $R=$281;
   var $282=$F;
   var $283=$282;
   var $284=$2;
   var $285=(($284+16)|0);
   var $286=HEAP32[(($285)>>2)];
   var $287=(($283)>>>(0)) >= (($286)>>>(0));
   if ($287) { label = 42; break; } else { var $301 = 0;label = 44; break; }
  case 42: 
   var $289=$F;
   var $290=(($289+12)|0);
   var $291=HEAP32[(($290)>>2)];
   var $292=$v;
   var $293=(($291)|(0))==(($292)|(0));
   if ($293) { label = 43; break; } else { var $301 = 0;label = 44; break; }
  case 43: 
   var $295=$R;
   var $296=(($295+8)|0);
   var $297=HEAP32[(($296)>>2)];
   var $298=$v;
   var $299=(($297)|(0))==(($298)|(0));
   var $301 = $299;label = 44; break;
  case 44: 
   var $301;
   var $302=(($301)&(1));
   var $303=($302);
   var $304=(($303)|(0))!=0;
   if ($304) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $306=$R;
   var $307=$F;
   var $308=(($307+12)|0);
   HEAP32[(($308)>>2)]=$306;
   var $309=$F;
   var $310=$R;
   var $311=(($310+8)|0);
   HEAP32[(($311)>>2)]=$309;
   label = 47; break;
  case 46: 
   _abort();
   throw "Reached an unreachable!";
  case 47: 
   label = 60; break;
  case 48: 
   var $315=$v;
   var $316=(($315+16)|0);
   var $317=(($316+4)|0);
   $RP=$317;
   var $318=HEAP32[(($317)>>2)];
   $R=$318;
   var $319=(($318)|(0))!=0;
   if ($319) { label = 50; break; } else { label = 49; break; }
  case 49: 
   var $321=$v;
   var $322=(($321+16)|0);
   var $323=(($322)|0);
   $RP=$323;
   var $324=HEAP32[(($323)>>2)];
   $R=$324;
   var $325=(($324)|(0))!=0;
   if ($325) { label = 50; break; } else { label = 59; break; }
  case 50: 
   label = 51; break;
  case 51: 
   var $328=$R;
   var $329=(($328+16)|0);
   var $330=(($329+4)|0);
   $CP=$330;
   var $331=HEAP32[(($330)>>2)];
   var $332=(($331)|(0))!=0;
   if ($332) { var $340 = 1;label = 53; break; } else { label = 52; break; }
  case 52: 
   var $334=$R;
   var $335=(($334+16)|0);
   var $336=(($335)|0);
   $CP=$336;
   var $337=HEAP32[(($336)>>2)];
   var $338=(($337)|(0))!=0;
   var $340 = $338;label = 53; break;
  case 53: 
   var $340;
   if ($340) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $342=$CP;
   $RP=$342;
   var $343=HEAP32[(($342)>>2)];
   $R=$343;
   label = 51; break;
  case 55: 
   var $345=$RP;
   var $346=$345;
   var $347=$2;
   var $348=(($347+16)|0);
   var $349=HEAP32[(($348)>>2)];
   var $350=(($346)>>>(0)) >= (($349)>>>(0));
   var $351=(($350)&(1));
   var $352=($351);
   var $353=(($352)|(0))!=0;
   if ($353) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $355=$RP;
   HEAP32[(($355)>>2)]=0;
   label = 58; break;
  case 57: 
   _abort();
   throw "Reached an unreachable!";
  case 58: 
   label = 59; break;
  case 59: 
   label = 60; break;
  case 60: 
   var $360=$XP;
   var $361=(($360)|(0))!=0;
   if ($361) { label = 61; break; } else { label = 88; break; }
  case 61: 
   var $363=$v;
   var $364=(($363+28)|0);
   var $365=HEAP32[(($364)>>2)];
   var $366=$2;
   var $367=(($366+304)|0);
   var $368=(($367+($365<<2))|0);
   $H=$368;
   var $369=$v;
   var $370=$H;
   var $371=HEAP32[(($370)>>2)];
   var $372=(($369)|(0))==(($371)|(0));
   if ($372) { label = 62; break; } else { label = 65; break; }
  case 62: 
   var $374=$R;
   var $375=$H;
   HEAP32[(($375)>>2)]=$374;
   var $376=(($374)|(0))==0;
   if ($376) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $378=$v;
   var $379=(($378+28)|0);
   var $380=HEAP32[(($379)>>2)];
   var $381=1 << $380;
   var $382=$381 ^ -1;
   var $383=$2;
   var $384=(($383+4)|0);
   var $385=HEAP32[(($384)>>2)];
   var $386=$385 & $382;
   HEAP32[(($384)>>2)]=$386;
   label = 64; break;
  case 64: 
   label = 72; break;
  case 65: 
   var $389=$XP;
   var $390=$389;
   var $391=$2;
   var $392=(($391+16)|0);
   var $393=HEAP32[(($392)>>2)];
   var $394=(($390)>>>(0)) >= (($393)>>>(0));
   var $395=(($394)&(1));
   var $396=($395);
   var $397=(($396)|(0))!=0;
   if ($397) { label = 66; break; } else { label = 70; break; }
  case 66: 
   var $399=$XP;
   var $400=(($399+16)|0);
   var $401=(($400)|0);
   var $402=HEAP32[(($401)>>2)];
   var $403=$v;
   var $404=(($402)|(0))==(($403)|(0));
   if ($404) { label = 67; break; } else { label = 68; break; }
  case 67: 
   var $406=$R;
   var $407=$XP;
   var $408=(($407+16)|0);
   var $409=(($408)|0);
   HEAP32[(($409)>>2)]=$406;
   label = 69; break;
  case 68: 
   var $411=$R;
   var $412=$XP;
   var $413=(($412+16)|0);
   var $414=(($413+4)|0);
   HEAP32[(($414)>>2)]=$411;
   label = 69; break;
  case 69: 
   label = 71; break;
  case 70: 
   _abort();
   throw "Reached an unreachable!";
  case 71: 
   label = 72; break;
  case 72: 
   var $419=$R;
   var $420=(($419)|(0))!=0;
   if ($420) { label = 73; break; } else { label = 87; break; }
  case 73: 
   var $422=$R;
   var $423=$422;
   var $424=$2;
   var $425=(($424+16)|0);
   var $426=HEAP32[(($425)>>2)];
   var $427=(($423)>>>(0)) >= (($426)>>>(0));
   var $428=(($427)&(1));
   var $429=($428);
   var $430=(($429)|(0))!=0;
   if ($430) { label = 74; break; } else { label = 85; break; }
  case 74: 
   var $432=$XP;
   var $433=$R;
   var $434=(($433+24)|0);
   HEAP32[(($434)>>2)]=$432;
   var $435=$v;
   var $436=(($435+16)|0);
   var $437=(($436)|0);
   var $438=HEAP32[(($437)>>2)];
   $C0=$438;
   var $439=(($438)|(0))!=0;
   if ($439) { label = 75; break; } else { label = 79; break; }
  case 75: 
   var $441=$C0;
   var $442=$441;
   var $443=$2;
   var $444=(($443+16)|0);
   var $445=HEAP32[(($444)>>2)];
   var $446=(($442)>>>(0)) >= (($445)>>>(0));
   var $447=(($446)&(1));
   var $448=($447);
   var $449=(($448)|(0))!=0;
   if ($449) { label = 76; break; } else { label = 77; break; }
  case 76: 
   var $451=$C0;
   var $452=$R;
   var $453=(($452+16)|0);
   var $454=(($453)|0);
   HEAP32[(($454)>>2)]=$451;
   var $455=$R;
   var $456=$C0;
   var $457=(($456+24)|0);
   HEAP32[(($457)>>2)]=$455;
   label = 78; break;
  case 77: 
   _abort();
   throw "Reached an unreachable!";
  case 78: 
   label = 79; break;
  case 79: 
   var $461=$v;
   var $462=(($461+16)|0);
   var $463=(($462+4)|0);
   var $464=HEAP32[(($463)>>2)];
   $C1=$464;
   var $465=(($464)|(0))!=0;
   if ($465) { label = 80; break; } else { label = 84; break; }
  case 80: 
   var $467=$C1;
   var $468=$467;
   var $469=$2;
   var $470=(($469+16)|0);
   var $471=HEAP32[(($470)>>2)];
   var $472=(($468)>>>(0)) >= (($471)>>>(0));
   var $473=(($472)&(1));
   var $474=($473);
   var $475=(($474)|(0))!=0;
   if ($475) { label = 81; break; } else { label = 82; break; }
  case 81: 
   var $477=$C1;
   var $478=$R;
   var $479=(($478+16)|0);
   var $480=(($479+4)|0);
   HEAP32[(($480)>>2)]=$477;
   var $481=$R;
   var $482=$C1;
   var $483=(($482+24)|0);
   HEAP32[(($483)>>2)]=$481;
   label = 83; break;
  case 82: 
   _abort();
   throw "Reached an unreachable!";
  case 83: 
   label = 84; break;
  case 84: 
   label = 86; break;
  case 85: 
   _abort();
   throw "Reached an unreachable!";
  case 86: 
   label = 87; break;
  case 87: 
   label = 88; break;
  case 88: 
   var $491=$rsize;
   var $492=(($491)>>>(0)) < 16;
   if ($492) { label = 89; break; } else { label = 90; break; }
  case 89: 
   var $494=$rsize;
   var $495=$3;
   var $496=((($494)+($495))|0);
   var $497=$496 | 1;
   var $498=$497 | 2;
   var $499=$v;
   var $500=(($499+4)|0);
   HEAP32[(($500)>>2)]=$498;
   var $501=$v;
   var $502=$501;
   var $503=$rsize;
   var $504=$3;
   var $505=((($503)+($504))|0);
   var $506=(($502+$505)|0);
   var $507=$506;
   var $508=(($507+4)|0);
   var $509=HEAP32[(($508)>>2)];
   var $510=$509 | 1;
   HEAP32[(($508)>>2)]=$510;
   label = 126; break;
  case 90: 
   var $512=$3;
   var $513=$512 | 1;
   var $514=$513 | 2;
   var $515=$v;
   var $516=(($515+4)|0);
   HEAP32[(($516)>>2)]=$514;
   var $517=$rsize;
   var $518=$517 | 1;
   var $519=$r;
   var $520=(($519+4)|0);
   HEAP32[(($520)>>2)]=$518;
   var $521=$rsize;
   var $522=$r;
   var $523=$522;
   var $524=$rsize;
   var $525=(($523+$524)|0);
   var $526=$525;
   var $527=(($526)|0);
   HEAP32[(($527)>>2)]=$521;
   var $528=$rsize;
   var $529=$528 >>> 3;
   var $530=(($529)>>>(0)) < 32;
   if ($530) { label = 91; break; } else { label = 98; break; }
  case 91: 
   var $532=$rsize;
   var $533=$532 >>> 3;
   $I=$533;
   var $534=$I;
   var $535=$534 << 1;
   var $536=$2;
   var $537=(($536+40)|0);
   var $538=(($537+($535<<2))|0);
   var $539=$538;
   var $540=$539;
   $B=$540;
   var $541=$B;
   $F5=$541;
   var $542=$2;
   var $543=(($542)|0);
   var $544=HEAP32[(($543)>>2)];
   var $545=$I;
   var $546=1 << $545;
   var $547=$544 & $546;
   var $548=(($547)|(0))!=0;
   if ($548) { label = 93; break; } else { label = 92; break; }
  case 92: 
   var $550=$I;
   var $551=1 << $550;
   var $552=$2;
   var $553=(($552)|0);
   var $554=HEAP32[(($553)>>2)];
   var $555=$554 | $551;
   HEAP32[(($553)>>2)]=$555;
   label = 97; break;
  case 93: 
   var $557=$B;
   var $558=(($557+8)|0);
   var $559=HEAP32[(($558)>>2)];
   var $560=$559;
   var $561=$2;
   var $562=(($561+16)|0);
   var $563=HEAP32[(($562)>>2)];
   var $564=(($560)>>>(0)) >= (($563)>>>(0));
   var $565=(($564)&(1));
   var $566=($565);
   var $567=(($566)|(0))!=0;
   if ($567) { label = 94; break; } else { label = 95; break; }
  case 94: 
   var $569=$B;
   var $570=(($569+8)|0);
   var $571=HEAP32[(($570)>>2)];
   $F5=$571;
   label = 96; break;
  case 95: 
   _abort();
   throw "Reached an unreachable!";
  case 96: 
   label = 97; break;
  case 97: 
   var $575=$r;
   var $576=$B;
   var $577=(($576+8)|0);
   HEAP32[(($577)>>2)]=$575;
   var $578=$r;
   var $579=$F5;
   var $580=(($579+12)|0);
   HEAP32[(($580)>>2)]=$578;
   var $581=$F5;
   var $582=$r;
   var $583=(($582+8)|0);
   HEAP32[(($583)>>2)]=$581;
   var $584=$B;
   var $585=$r;
   var $586=(($585+12)|0);
   HEAP32[(($586)>>2)]=$584;
   label = 125; break;
  case 98: 
   var $588=$r;
   var $589=$588;
   $TP=$589;
   var $590=$rsize;
   var $591=$590 >>> 8;
   $X8=$591;
   var $592=$X8;
   var $593=(($592)|(0))==0;
   if ($593) { label = 99; break; } else { label = 100; break; }
  case 99: 
   $I7=0;
   label = 104; break;
  case 100: 
   var $596=$X8;
   var $597=(($596)>>>(0)) > 65535;
   if ($597) { label = 101; break; } else { label = 102; break; }
  case 101: 
   $I7=31;
   label = 103; break;
  case 102: 
   var $600=$X8;
   $Y9=$600;
   var $601=$Y9;
   var $602=((($601)-(256))|0);
   var $603=$602 >>> 16;
   var $604=$603 & 8;
   $N10=$604;
   var $605=$N10;
   var $606=$Y9;
   var $607=$606 << $605;
   $Y9=$607;
   var $608=((($607)-(4096))|0);
   var $609=$608 >>> 16;
   var $610=$609 & 4;
   $K11=$610;
   var $611=$K11;
   var $612=$N10;
   var $613=((($612)+($611))|0);
   $N10=$613;
   var $614=$K11;
   var $615=$Y9;
   var $616=$615 << $614;
   $Y9=$616;
   var $617=((($616)-(16384))|0);
   var $618=$617 >>> 16;
   var $619=$618 & 2;
   $K11=$619;
   var $620=$N10;
   var $621=((($620)+($619))|0);
   $N10=$621;
   var $622=$N10;
   var $623=(((14)-($622))|0);
   var $624=$K11;
   var $625=$Y9;
   var $626=$625 << $624;
   $Y9=$626;
   var $627=$626 >>> 15;
   var $628=((($623)+($627))|0);
   $K11=$628;
   var $629=$K11;
   var $630=$629 << 1;
   var $631=$rsize;
   var $632=$K11;
   var $633=((($632)+(7))|0);
   var $634=$631 >>> (($633)>>>(0));
   var $635=$634 & 1;
   var $636=((($630)+($635))|0);
   $I7=$636;
   label = 103; break;
  case 103: 
   label = 104; break;
  case 104: 
   var $639=$I7;
   var $640=$2;
   var $641=(($640+304)|0);
   var $642=(($641+($639<<2))|0);
   $H6=$642;
   var $643=$I7;
   var $644=$TP;
   var $645=(($644+28)|0);
   HEAP32[(($645)>>2)]=$643;
   var $646=$TP;
   var $647=(($646+16)|0);
   var $648=(($647+4)|0);
   HEAP32[(($648)>>2)]=0;
   var $649=$TP;
   var $650=(($649+16)|0);
   var $651=(($650)|0);
   HEAP32[(($651)>>2)]=0;
   var $652=$2;
   var $653=(($652+4)|0);
   var $654=HEAP32[(($653)>>2)];
   var $655=$I7;
   var $656=1 << $655;
   var $657=$654 & $656;
   var $658=(($657)|(0))!=0;
   if ($658) { label = 106; break; } else { label = 105; break; }
  case 105: 
   var $660=$I7;
   var $661=1 << $660;
   var $662=$2;
   var $663=(($662+4)|0);
   var $664=HEAP32[(($663)>>2)];
   var $665=$664 | $661;
   HEAP32[(($663)>>2)]=$665;
   var $666=$TP;
   var $667=$H6;
   HEAP32[(($667)>>2)]=$666;
   var $668=$H6;
   var $669=$668;
   var $670=$TP;
   var $671=(($670+24)|0);
   HEAP32[(($671)>>2)]=$669;
   var $672=$TP;
   var $673=$TP;
   var $674=(($673+12)|0);
   HEAP32[(($674)>>2)]=$672;
   var $675=$TP;
   var $676=(($675+8)|0);
   HEAP32[(($676)>>2)]=$672;
   label = 124; break;
  case 106: 
   var $678=$H6;
   var $679=HEAP32[(($678)>>2)];
   $T=$679;
   var $680=$rsize;
   var $681=$I7;
   var $682=(($681)|(0))==31;
   if ($682) { label = 107; break; } else { label = 108; break; }
  case 107: 
   var $691 = 0;label = 109; break;
  case 108: 
   var $685=$I7;
   var $686=$685 >>> 1;
   var $687=((($686)+(8))|0);
   var $688=((($687)-(2))|0);
   var $689=(((31)-($688))|0);
   var $691 = $689;label = 109; break;
  case 109: 
   var $691;
   var $692=$680 << $691;
   $K12=$692;
   label = 110; break;
  case 110: 
   var $694=$T;
   var $695=(($694+4)|0);
   var $696=HEAP32[(($695)>>2)];
   var $697=$696 & -8;
   var $698=$rsize;
   var $699=(($697)|(0))!=(($698)|(0));
   if ($699) { label = 111; break; } else { label = 117; break; }
  case 111: 
   var $701=$K12;
   var $702=$701 >>> 31;
   var $703=$702 & 1;
   var $704=$T;
   var $705=(($704+16)|0);
   var $706=(($705+($703<<2))|0);
   $C=$706;
   var $707=$K12;
   var $708=$707 << 1;
   $K12=$708;
   var $709=$C;
   var $710=HEAP32[(($709)>>2)];
   var $711=(($710)|(0))!=0;
   if ($711) { label = 112; break; } else { label = 113; break; }
  case 112: 
   var $713=$C;
   var $714=HEAP32[(($713)>>2)];
   $T=$714;
   label = 116; break;
  case 113: 
   var $716=$C;
   var $717=$716;
   var $718=$2;
   var $719=(($718+16)|0);
   var $720=HEAP32[(($719)>>2)];
   var $721=(($717)>>>(0)) >= (($720)>>>(0));
   var $722=(($721)&(1));
   var $723=($722);
   var $724=(($723)|(0))!=0;
   if ($724) { label = 114; break; } else { label = 115; break; }
  case 114: 
   var $726=$TP;
   var $727=$C;
   HEAP32[(($727)>>2)]=$726;
   var $728=$T;
   var $729=$TP;
   var $730=(($729+24)|0);
   HEAP32[(($730)>>2)]=$728;
   var $731=$TP;
   var $732=$TP;
   var $733=(($732+12)|0);
   HEAP32[(($733)>>2)]=$731;
   var $734=$TP;
   var $735=(($734+8)|0);
   HEAP32[(($735)>>2)]=$731;
   label = 123; break;
  case 115: 
   _abort();
   throw "Reached an unreachable!";
  case 116: 
   label = 122; break;
  case 117: 
   var $739=$T;
   var $740=(($739+8)|0);
   var $741=HEAP32[(($740)>>2)];
   $F13=$741;
   var $742=$T;
   var $743=$742;
   var $744=$2;
   var $745=(($744+16)|0);
   var $746=HEAP32[(($745)>>2)];
   var $747=(($743)>>>(0)) >= (($746)>>>(0));
   if ($747) { label = 118; break; } else { var $756 = 0;label = 119; break; }
  case 118: 
   var $749=$F13;
   var $750=$749;
   var $751=$2;
   var $752=(($751+16)|0);
   var $753=HEAP32[(($752)>>2)];
   var $754=(($750)>>>(0)) >= (($753)>>>(0));
   var $756 = $754;label = 119; break;
  case 119: 
   var $756;
   var $757=(($756)&(1));
   var $758=($757);
   var $759=(($758)|(0))!=0;
   if ($759) { label = 120; break; } else { label = 121; break; }
  case 120: 
   var $761=$TP;
   var $762=$F13;
   var $763=(($762+12)|0);
   HEAP32[(($763)>>2)]=$761;
   var $764=$T;
   var $765=(($764+8)|0);
   HEAP32[(($765)>>2)]=$761;
   var $766=$F13;
   var $767=$TP;
   var $768=(($767+8)|0);
   HEAP32[(($768)>>2)]=$766;
   var $769=$T;
   var $770=$TP;
   var $771=(($770+12)|0);
   HEAP32[(($771)>>2)]=$769;
   var $772=$TP;
   var $773=(($772+24)|0);
   HEAP32[(($773)>>2)]=0;
   label = 123; break;
  case 121: 
   _abort();
   throw "Reached an unreachable!";
  case 122: 
   label = 110; break;
  case 123: 
   label = 124; break;
  case 124: 
   label = 125; break;
  case 125: 
   label = 126; break;
  case 126: 
   var $780=$v;
   var $781=$780;
   var $782=(($781+8)|0);
   $1=$782;
   label = 130; break;
  case 127: 
   label = 128; break;
  case 128: 
   _abort();
   throw "Reached an unreachable!";
  case 129: 
   $1=0;
   label = 130; break;
  case 130: 
   var $787=$1;
   return $787;
  default: assert(0, "bad label: " + label);
 }
}
function _sys_alloc($m, $nb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $tbase;
   var $tsize;
   var $mmap_flag;
   var $asize;
   var $mem;
   var $fp;
   var $br;
   var $ssize;
   var $ss;
   var $base;
   var $fp1;
   var $esize;
   var $end;
   var $br2;
   var $end3;
   var $ssize4;
   var $mn;
   var $sp;
   var $oldbase;
   var $rsize;
   var $p;
   var $r;
   $2=$m;
   $3=$nb;
   $tbase=-1;
   $tsize=0;
   $mmap_flag=0;
   var $4=HEAP32[((((80)|0))>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { var $10 = 1;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=_init_mparams();
   var $8=(($7)|(0))!=0;
   var $10 = $8;label = 3; break;
  case 3: 
   var $10;
   var $11=(($10)&(1));
   var $12=$2;
   var $13=(($12+444)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$14 & 0;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $18=$3;
   var $19=HEAP32[((((92)|0))>>2)];
   var $20=(($18)>>>(0)) >= (($19)>>>(0));
   if ($20) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $22=$2;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))!=0;
   if ($25) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $27=$2;
   var $28=$3;
   var $29=_mmap_alloc($27, $28);
   $mem=$29;
   var $30=$mem;
   var $31=(($30)|(0))!=0;
   if ($31) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $33=$mem;
   $1=$33;
   label = 103; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $36=$3;
   var $37=((($36)+(48))|0);
   var $38=HEAP32[((((88)|0))>>2)];
   var $39=((($38)-(1))|0);
   var $40=((($37)+($39))|0);
   var $41=HEAP32[((((88)|0))>>2)];
   var $42=((($41)-(1))|0);
   var $43=$42 ^ -1;
   var $44=$40 & $43;
   $asize=$44;
   var $45=$asize;
   var $46=$3;
   var $47=(($45)>>>(0)) <= (($46)>>>(0));
   if ($47) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $1=0;
   label = 103; break;
  case 11: 
   var $50=$2;
   var $51=(($50+440)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|(0))!=0;
   if ($53) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $55=$2;
   var $56=(($55+432)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=$asize;
   var $59=((($57)+($58))|0);
   $fp=$59;
   var $60=$fp;
   var $61=$2;
   var $62=(($61+432)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($60)>>>(0)) <= (($63)>>>(0));
   if ($64) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $66=$fp;
   var $67=$2;
   var $68=(($67+440)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($66)>>>(0)) > (($69)>>>(0));
   if ($70) { label = 14; break; } else { label = 15; break; }
  case 14: 
   $1=0;
   label = 103; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $74=$2;
   var $75=(($74+444)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$76 & 4;
   var $78=(($77)|(0))!=0;
   if ($78) { label = 53; break; } else { label = 17; break; }
  case 17: 
   $br=-1;
   var $80=$asize;
   $ssize=$80;
   var $81=$2;
   var $82=(($81+24)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83)|(0))==0;
   if ($84) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $94 = 0;label = 20; break;
  case 19: 
   var $87=$2;
   var $88=$2;
   var $89=(($88+24)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=$90;
   var $92=_segment_holding($87, $91);
   var $94 = $92;label = 20; break;
  case 20: 
   var $94;
   $ss=$94;
   var $95=$ss;
   var $96=(($95)|(0))==0;
   if ($96) { label = 21; break; } else { label = 33; break; }
  case 21: 
   var $98=_sbrk(0);
   $base=$98;
   var $99=$base;
   var $100=(($99)|(0))!=-1;
   if ($100) { label = 22; break; } else { label = 32; break; }
  case 22: 
   var $102=$base;
   var $103=$102;
   var $104=HEAP32[((((84)|0))>>2)];
   var $105=((($104)-(1))|0);
   var $106=$103 & $105;
   var $107=(($106)|(0))==0;
   if ($107) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $109=$base;
   var $110=$109;
   var $111=HEAP32[((((84)|0))>>2)];
   var $112=((($111)-(1))|0);
   var $113=((($110)+($112))|0);
   var $114=HEAP32[((((84)|0))>>2)];
   var $115=((($114)-(1))|0);
   var $116=$115 ^ -1;
   var $117=$113 & $116;
   var $118=$base;
   var $119=$118;
   var $120=((($117)-($119))|0);
   var $121=$ssize;
   var $122=((($121)+($120))|0);
   $ssize=$122;
   label = 24; break;
  case 24: 
   var $124=$2;
   var $125=(($124+432)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=$ssize;
   var $128=((($126)+($127))|0);
   $fp1=$128;
   var $129=$ssize;
   var $130=$3;
   var $131=(($129)>>>(0)) > (($130)>>>(0));
   if ($131) { label = 25; break; } else { label = 31; break; }
  case 25: 
   var $133=$ssize;
   var $134=(($133)>>>(0)) < 2147483647;
   if ($134) { label = 26; break; } else { label = 31; break; }
  case 26: 
   var $136=$2;
   var $137=(($136+440)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138)|(0))==0;
   if ($139) { label = 29; break; } else { label = 27; break; }
  case 27: 
   var $141=$fp1;
   var $142=$2;
   var $143=(($142+432)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=(($141)>>>(0)) > (($144)>>>(0));
   if ($145) { label = 28; break; } else { label = 31; break; }
  case 28: 
   var $147=$fp1;
   var $148=$2;
   var $149=(($148+440)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($147)>>>(0)) <= (($150)>>>(0));
   if ($151) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $153=$ssize;
   var $154=_sbrk($153);
   $br=$154;
   var $155=$base;
   var $156=(($154)|(0))==(($155)|(0));
   if ($156) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $158=$base;
   $tbase=$158;
   var $159=$ssize;
   $tsize=$159;
   label = 31; break;
  case 31: 
   label = 32; break;
  case 32: 
   label = 37; break;
  case 33: 
   var $163=$3;
   var $164=$2;
   var $165=(($164+12)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=((($163)-($166))|0);
   var $168=((($167)+(48))|0);
   var $169=HEAP32[((((88)|0))>>2)];
   var $170=((($169)-(1))|0);
   var $171=((($168)+($170))|0);
   var $172=HEAP32[((((88)|0))>>2)];
   var $173=((($172)-(1))|0);
   var $174=$173 ^ -1;
   var $175=$171 & $174;
   $ssize=$175;
   var $176=$ssize;
   var $177=(($176)>>>(0)) < 2147483647;
   if ($177) { label = 34; break; } else { label = 36; break; }
  case 34: 
   var $179=$ssize;
   var $180=_sbrk($179);
   $br=$180;
   var $181=$ss;
   var $182=(($181)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=$ss;
   var $185=(($184+4)|0);
   var $186=HEAP32[(($185)>>2)];
   var $187=(($183+$186)|0);
   var $188=(($180)|(0))==(($187)|(0));
   if ($188) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $190=$br;
   $tbase=$190;
   var $191=$ssize;
   $tsize=$191;
   label = 36; break;
  case 36: 
   label = 37; break;
  case 37: 
   var $194=$tbase;
   var $195=(($194)|(0))==-1;
   if ($195) { label = 38; break; } else { label = 52; break; }
  case 38: 
   var $197=$br;
   var $198=(($197)|(0))!=-1;
   if ($198) { label = 39; break; } else { label = 48; break; }
  case 39: 
   var $200=$ssize;
   var $201=(($200)>>>(0)) < 2147483647;
   if ($201) { label = 40; break; } else { label = 47; break; }
  case 40: 
   var $203=$ssize;
   var $204=$3;
   var $205=((($204)+(48))|0);
   var $206=(($203)>>>(0)) < (($205)>>>(0));
   if ($206) { label = 41; break; } else { label = 47; break; }
  case 41: 
   var $208=$3;
   var $209=((($208)+(48))|0);
   var $210=$ssize;
   var $211=((($209)-($210))|0);
   var $212=HEAP32[((((88)|0))>>2)];
   var $213=((($212)-(1))|0);
   var $214=((($211)+($213))|0);
   var $215=HEAP32[((((88)|0))>>2)];
   var $216=((($215)-(1))|0);
   var $217=$216 ^ -1;
   var $218=$214 & $217;
   $esize=$218;
   var $219=$esize;
   var $220=(($219)>>>(0)) < 2147483647;
   if ($220) { label = 42; break; } else { label = 46; break; }
  case 42: 
   var $222=$esize;
   var $223=_sbrk($222);
   $end=$223;
   var $224=$end;
   var $225=(($224)|(0))!=-1;
   if ($225) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $227=$esize;
   var $228=$ssize;
   var $229=((($228)+($227))|0);
   $ssize=$229;
   label = 45; break;
  case 44: 
   var $231=$ssize;
   var $232=(((-$231))|0);
   var $233=_sbrk($232);
   $br=-1;
   label = 45; break;
  case 45: 
   label = 46; break;
  case 46: 
   label = 47; break;
  case 47: 
   label = 48; break;
  case 48: 
   var $238=$br;
   var $239=(($238)|(0))!=-1;
   if ($239) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $241=$br;
   $tbase=$241;
   var $242=$ssize;
   $tsize=$242;
   label = 51; break;
  case 50: 
   var $244=$2;
   var $245=(($244+444)|0);
   var $246=HEAP32[(($245)>>2)];
   var $247=$246 | 4;
   HEAP32[(($245)>>2)]=$247;
   label = 51; break;
  case 51: 
   label = 52; break;
  case 52: 
   label = 53; break;
  case 53: 
   var $251=$tbase;
   var $252=(($251)|(0))==-1;
   if ($252) { label = 54; break; } else { label = 63; break; }
  case 54: 
   var $254=$asize;
   var $255=(($254)>>>(0)) < 2147483647;
   if ($255) { label = 55; break; } else { label = 62; break; }
  case 55: 
   $br2=-1;
   $end3=-1;
   var $257=$asize;
   var $258=_sbrk($257);
   $br2=$258;
   var $259=_sbrk(0);
   $end3=$259;
   var $260=$br2;
   var $261=(($260)|(0))!=-1;
   if ($261) { label = 56; break; } else { label = 61; break; }
  case 56: 
   var $263=$end3;
   var $264=(($263)|(0))!=-1;
   if ($264) { label = 57; break; } else { label = 61; break; }
  case 57: 
   var $266=$br2;
   var $267=$end3;
   var $268=(($266)>>>(0)) < (($267)>>>(0));
   if ($268) { label = 58; break; } else { label = 61; break; }
  case 58: 
   var $270=$end3;
   var $271=$br2;
   var $272=$270;
   var $273=$271;
   var $274=((($272)-($273))|0);
   $ssize4=$274;
   var $275=$ssize4;
   var $276=$3;
   var $277=((($276)+(40))|0);
   var $278=(($275)>>>(0)) > (($277)>>>(0));
   if ($278) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $280=$br2;
   $tbase=$280;
   var $281=$ssize4;
   $tsize=$281;
   label = 60; break;
  case 60: 
   label = 61; break;
  case 61: 
   label = 62; break;
  case 62: 
   label = 63; break;
  case 63: 
   var $286=$tbase;
   var $287=(($286)|(0))!=-1;
   if ($287) { label = 64; break; } else { label = 102; break; }
  case 64: 
   var $289=$tsize;
   var $290=$2;
   var $291=(($290+432)|0);
   var $292=HEAP32[(($291)>>2)];
   var $293=((($292)+($289))|0);
   HEAP32[(($291)>>2)]=$293;
   var $294=$2;
   var $295=(($294+436)|0);
   var $296=HEAP32[(($295)>>2)];
   var $297=(($293)>>>(0)) > (($296)>>>(0));
   if ($297) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $299=$2;
   var $300=(($299+432)|0);
   var $301=HEAP32[(($300)>>2)];
   var $302=$2;
   var $303=(($302+436)|0);
   HEAP32[(($303)>>2)]=$301;
   label = 66; break;
  case 66: 
   var $305=$2;
   var $306=(($305+24)|0);
   var $307=HEAP32[(($306)>>2)];
   var $308=(($307)|(0))!=0;
   if ($308) { label = 74; break; } else { label = 67; break; }
  case 67: 
   var $310=$2;
   var $311=(($310+16)|0);
   var $312=HEAP32[(($311)>>2)];
   var $313=(($312)|(0))==0;
   if ($313) { label = 69; break; } else { label = 68; break; }
  case 68: 
   var $315=$tbase;
   var $316=$2;
   var $317=(($316+16)|0);
   var $318=HEAP32[(($317)>>2)];
   var $319=(($315)>>>(0)) < (($318)>>>(0));
   if ($319) { label = 69; break; } else { label = 70; break; }
  case 69: 
   var $321=$tbase;
   var $322=$2;
   var $323=(($322+16)|0);
   HEAP32[(($323)>>2)]=$321;
   label = 70; break;
  case 70: 
   var $325=$tbase;
   var $326=$2;
   var $327=(($326+448)|0);
   var $328=(($327)|0);
   HEAP32[(($328)>>2)]=$325;
   var $329=$tsize;
   var $330=$2;
   var $331=(($330+448)|0);
   var $332=(($331+4)|0);
   HEAP32[(($332)>>2)]=$329;
   var $333=$mmap_flag;
   var $334=$2;
   var $335=(($334+448)|0);
   var $336=(($335+12)|0);
   HEAP32[(($336)>>2)]=$333;
   var $337=HEAP32[((((80)|0))>>2)];
   var $338=$2;
   var $339=(($338+36)|0);
   HEAP32[(($339)>>2)]=$337;
   var $340=$2;
   var $341=(($340+32)|0);
   HEAP32[(($341)>>2)]=-1;
   var $342=$2;
   _init_bins($342);
   var $343=$2;
   var $344=(($343)|(0))==4680;
   if ($344) { label = 71; break; } else { label = 72; break; }
  case 71: 
   var $346=$2;
   var $347=$tbase;
   var $348=$347;
   var $349=$tsize;
   var $350=((($349)-(40))|0);
   _init_top($346, $348, $350);
   label = 73; break;
  case 72: 
   var $352=$2;
   var $353=$352;
   var $354=((($353)-(8))|0);
   var $355=$354;
   var $356=$355;
   var $357=$2;
   var $358=$357;
   var $359=((($358)-(8))|0);
   var $360=$359;
   var $361=(($360+4)|0);
   var $362=HEAP32[(($361)>>2)];
   var $363=$362 & -8;
   var $364=(($356+$363)|0);
   var $365=$364;
   $mn=$365;
   var $366=$2;
   var $367=$mn;
   var $368=$tbase;
   var $369=$tsize;
   var $370=(($368+$369)|0);
   var $371=$mn;
   var $372=$371;
   var $373=$370;
   var $374=$372;
   var $375=((($373)-($374))|0);
   var $376=((($375)-(40))|0);
   _init_top($366, $367, $376);
   label = 73; break;
  case 73: 
   label = 99; break;
  case 74: 
   var $379=$2;
   var $380=(($379+448)|0);
   $sp=$380;
   label = 75; break;
  case 75: 
   var $382=$sp;
   var $383=(($382)|(0))!=0;
   if ($383) { label = 76; break; } else { var $395 = 0;label = 77; break; }
  case 76: 
   var $385=$tbase;
   var $386=$sp;
   var $387=(($386)|0);
   var $388=HEAP32[(($387)>>2)];
   var $389=$sp;
   var $390=(($389+4)|0);
   var $391=HEAP32[(($390)>>2)];
   var $392=(($388+$391)|0);
   var $393=(($385)|(0))!=(($392)|(0));
   var $395 = $393;label = 77; break;
  case 77: 
   var $395;
   if ($395) { label = 78; break; } else { label = 79; break; }
  case 78: 
   var $397=$sp;
   var $398=(($397+8)|0);
   var $399=HEAP32[(($398)>>2)];
   $sp=$399;
   label = 75; break;
  case 79: 
   var $401=$sp;
   var $402=(($401)|(0))!=0;
   if ($402) { label = 80; break; } else { label = 85; break; }
  case 80: 
   var $404=$sp;
   var $405=(($404+12)|0);
   var $406=HEAP32[(($405)>>2)];
   var $407=$406 & 8;
   var $408=(($407)|(0))!=0;
   if ($408) { label = 85; break; } else { label = 81; break; }
  case 81: 
   var $410=$sp;
   var $411=(($410+12)|0);
   var $412=HEAP32[(($411)>>2)];
   var $413=$412 & 0;
   var $414=$mmap_flag;
   var $415=(($413)|(0))==(($414)|(0));
   if ($415) { label = 82; break; } else { label = 85; break; }
  case 82: 
   var $417=$2;
   var $418=(($417+24)|0);
   var $419=HEAP32[(($418)>>2)];
   var $420=$419;
   var $421=$sp;
   var $422=(($421)|0);
   var $423=HEAP32[(($422)>>2)];
   var $424=(($420)>>>(0)) >= (($423)>>>(0));
   if ($424) { label = 83; break; } else { label = 85; break; }
  case 83: 
   var $426=$2;
   var $427=(($426+24)|0);
   var $428=HEAP32[(($427)>>2)];
   var $429=$428;
   var $430=$sp;
   var $431=(($430)|0);
   var $432=HEAP32[(($431)>>2)];
   var $433=$sp;
   var $434=(($433+4)|0);
   var $435=HEAP32[(($434)>>2)];
   var $436=(($432+$435)|0);
   var $437=(($429)>>>(0)) < (($436)>>>(0));
   if ($437) { label = 84; break; } else { label = 85; break; }
  case 84: 
   var $439=$tsize;
   var $440=$sp;
   var $441=(($440+4)|0);
   var $442=HEAP32[(($441)>>2)];
   var $443=((($442)+($439))|0);
   HEAP32[(($441)>>2)]=$443;
   var $444=$2;
   var $445=$2;
   var $446=(($445+24)|0);
   var $447=HEAP32[(($446)>>2)];
   var $448=$2;
   var $449=(($448+12)|0);
   var $450=HEAP32[(($449)>>2)];
   var $451=$tsize;
   var $452=((($450)+($451))|0);
   _init_top($444, $447, $452);
   label = 98; break;
  case 85: 
   var $454=$tbase;
   var $455=$2;
   var $456=(($455+16)|0);
   var $457=HEAP32[(($456)>>2)];
   var $458=(($454)>>>(0)) < (($457)>>>(0));
   if ($458) { label = 86; break; } else { label = 87; break; }
  case 86: 
   var $460=$tbase;
   var $461=$2;
   var $462=(($461+16)|0);
   HEAP32[(($462)>>2)]=$460;
   label = 87; break;
  case 87: 
   var $464=$2;
   var $465=(($464+448)|0);
   $sp=$465;
   label = 88; break;
  case 88: 
   var $467=$sp;
   var $468=(($467)|(0))!=0;
   if ($468) { label = 89; break; } else { var $478 = 0;label = 90; break; }
  case 89: 
   var $470=$sp;
   var $471=(($470)|0);
   var $472=HEAP32[(($471)>>2)];
   var $473=$tbase;
   var $474=$tsize;
   var $475=(($473+$474)|0);
   var $476=(($472)|(0))!=(($475)|(0));
   var $478 = $476;label = 90; break;
  case 90: 
   var $478;
   if ($478) { label = 91; break; } else { label = 92; break; }
  case 91: 
   var $480=$sp;
   var $481=(($480+8)|0);
   var $482=HEAP32[(($481)>>2)];
   $sp=$482;
   label = 88; break;
  case 92: 
   var $484=$sp;
   var $485=(($484)|(0))!=0;
   if ($485) { label = 93; break; } else { label = 96; break; }
  case 93: 
   var $487=$sp;
   var $488=(($487+12)|0);
   var $489=HEAP32[(($488)>>2)];
   var $490=$489 & 8;
   var $491=(($490)|(0))!=0;
   if ($491) { label = 96; break; } else { label = 94; break; }
  case 94: 
   var $493=$sp;
   var $494=(($493+12)|0);
   var $495=HEAP32[(($494)>>2)];
   var $496=$495 & 0;
   var $497=$mmap_flag;
   var $498=(($496)|(0))==(($497)|(0));
   if ($498) { label = 95; break; } else { label = 96; break; }
  case 95: 
   var $500=$sp;
   var $501=(($500)|0);
   var $502=HEAP32[(($501)>>2)];
   $oldbase=$502;
   var $503=$tbase;
   var $504=$sp;
   var $505=(($504)|0);
   HEAP32[(($505)>>2)]=$503;
   var $506=$tsize;
   var $507=$sp;
   var $508=(($507+4)|0);
   var $509=HEAP32[(($508)>>2)];
   var $510=((($509)+($506))|0);
   HEAP32[(($508)>>2)]=$510;
   var $511=$2;
   var $512=$tbase;
   var $513=$oldbase;
   var $514=$3;
   var $515=_prepend_alloc($511, $512, $513, $514);
   $1=$515;
   label = 103; break;
  case 96: 
   var $517=$2;
   var $518=$tbase;
   var $519=$tsize;
   var $520=$mmap_flag;
   _add_segment($517, $518, $519, $520);
   label = 97; break;
  case 97: 
   label = 98; break;
  case 98: 
   label = 99; break;
  case 99: 
   var $524=$3;
   var $525=$2;
   var $526=(($525+12)|0);
   var $527=HEAP32[(($526)>>2)];
   var $528=(($524)>>>(0)) < (($527)>>>(0));
   if ($528) { label = 100; break; } else { label = 101; break; }
  case 100: 
   var $530=$3;
   var $531=$2;
   var $532=(($531+12)|0);
   var $533=HEAP32[(($532)>>2)];
   var $534=((($533)-($530))|0);
   HEAP32[(($532)>>2)]=$534;
   $rsize=$534;
   var $535=$2;
   var $536=(($535+24)|0);
   var $537=HEAP32[(($536)>>2)];
   $p=$537;
   var $538=$p;
   var $539=$538;
   var $540=$3;
   var $541=(($539+$540)|0);
   var $542=$541;
   var $543=$2;
   var $544=(($543+24)|0);
   HEAP32[(($544)>>2)]=$542;
   $r=$542;
   var $545=$rsize;
   var $546=$545 | 1;
   var $547=$r;
   var $548=(($547+4)|0);
   HEAP32[(($548)>>2)]=$546;
   var $549=$3;
   var $550=$549 | 1;
   var $551=$550 | 2;
   var $552=$p;
   var $553=(($552+4)|0);
   HEAP32[(($553)>>2)]=$551;
   var $554=$p;
   var $555=$554;
   var $556=(($555+8)|0);
   $1=$556;
   label = 103; break;
  case 101: 
   label = 102; break;
  case 102: 
   var $559=___errno_location();
   HEAP32[(($559)>>2)]=12;
   $1=0;
   label = 103; break;
  case 103: 
   var $561=$1;
   return $561;
  default: assert(0, "bad label: " + label);
 }
}
function _free($mem) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $p;
   var $psize;
   var $next;
   var $prevsize;
   var $prev;
   var $F;
   var $B;
   var $I;
   var $TP;
   var $XP;
   var $R;
   var $F1;
   var $RP;
   var $CP;
   var $H;
   var $C0;
   var $C1;
   var $tsize;
   var $dsize;
   var $nsize;
   var $F2;
   var $B3;
   var $I4;
   var $TP5;
   var $XP6;
   var $R7;
   var $F8;
   var $RP9;
   var $CP10;
   var $H11;
   var $C012;
   var $C113;
   var $I14;
   var $B15;
   var $F16;
   var $tp;
   var $H17;
   var $I18;
   var $X;
   var $Y;
   var $N;
   var $K;
   var $T;
   var $K19;
   var $C;
   var $F20;
   $1=$mem;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 214; break; }
  case 2: 
   var $5=$1;
   var $6=((($5)-(8))|0);
   var $7=$6;
   $p=$7;
   var $8=$p;
   var $9=$8;
   var $10=HEAP32[((((4696)|0))>>2)];
   var $11=(($9)>>>(0)) >= (($10)>>>(0));
   if ($11) { label = 3; break; } else { var $19 = 0;label = 4; break; }
  case 3: 
   var $13=$p;
   var $14=(($13+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 3;
   var $17=(($16)|(0))!=1;
   var $19 = $17;label = 4; break;
  case 4: 
   var $19;
   var $20=(($19)&(1));
   var $21=($20);
   var $22=(($21)|(0))!=0;
   if ($22) { label = 5; break; } else { label = 211; break; }
  case 5: 
   var $24=$p;
   var $25=(($24+4)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$26 & -8;
   $psize=$27;
   var $28=$p;
   var $29=$28;
   var $30=$psize;
   var $31=(($29+$30)|0);
   var $32=$31;
   $next=$32;
   var $33=$p;
   var $34=(($33+4)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$35 & 1;
   var $37=(($36)|(0))!=0;
   if ($37) { label = 86; break; } else { label = 6; break; }
  case 6: 
   var $39=$p;
   var $40=(($39)|0);
   var $41=HEAP32[(($40)>>2)];
   $prevsize=$41;
   var $42=$p;
   var $43=(($42+4)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$44 & 3;
   var $46=(($45)|(0))==0;
   if ($46) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $48=$prevsize;
   var $49=((($48)+(16))|0);
   var $50=$psize;
   var $51=((($50)+($49))|0);
   $psize=$51;
   label = 213; break;
  case 8: 
   var $53=$p;
   var $54=$53;
   var $55=$prevsize;
   var $56=(((-$55))|0);
   var $57=(($54+$56)|0);
   var $58=$57;
   $prev=$58;
   var $59=$prevsize;
   var $60=$psize;
   var $61=((($60)+($59))|0);
   $psize=$61;
   var $62=$prev;
   $p=$62;
   var $63=$prev;
   var $64=$63;
   var $65=HEAP32[((((4696)|0))>>2)];
   var $66=(($64)>>>(0)) >= (($65)>>>(0));
   var $67=(($66)&(1));
   var $68=($67);
   var $69=(($68)|(0))!=0;
   if ($69) { label = 9; break; } else { label = 83; break; }
  case 9: 
   var $71=$p;
   var $72=HEAP32[((((4700)|0))>>2)];
   var $73=(($71)|(0))!=(($72)|(0));
   if ($73) { label = 10; break; } else { label = 79; break; }
  case 10: 
   var $75=$prevsize;
   var $76=$75 >>> 3;
   var $77=(($76)>>>(0)) < 32;
   if ($77) { label = 11; break; } else { label = 29; break; }
  case 11: 
   var $79=$p;
   var $80=(($79+8)|0);
   var $81=HEAP32[(($80)>>2)];
   $F=$81;
   var $82=$p;
   var $83=(($82+12)|0);
   var $84=HEAP32[(($83)>>2)];
   $B=$84;
   var $85=$prevsize;
   var $86=$85 >>> 3;
   $I=$86;
   var $87=$F;
   var $88=$I;
   var $89=$88 << 1;
   var $90=((((4720)|0)+($89<<2))|0);
   var $91=$90;
   var $92=$91;
   var $93=(($87)|(0))==(($92)|(0));
   if ($93) { var $108 = 1;label = 15; break; } else { label = 12; break; }
  case 12: 
   var $95=$F;
   var $96=$95;
   var $97=HEAP32[((((4696)|0))>>2)];
   var $98=(($96)>>>(0)) >= (($97)>>>(0));
   if ($98) { label = 13; break; } else { var $106 = 0;label = 14; break; }
  case 13: 
   var $100=$F;
   var $101=(($100+12)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=$p;
   var $104=(($102)|(0))==(($103)|(0));
   var $106 = $104;label = 14; break;
  case 14: 
   var $106;
   var $108 = $106;label = 15; break;
  case 15: 
   var $108;
   var $109=(($108)&(1));
   var $110=($109);
   var $111=(($110)|(0))!=0;
   if ($111) { label = 16; break; } else { label = 27; break; }
  case 16: 
   var $113=$B;
   var $114=$F;
   var $115=(($113)|(0))==(($114)|(0));
   if ($115) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $117=$I;
   var $118=1 << $117;
   var $119=$118 ^ -1;
   var $120=HEAP32[((((4680)|0))>>2)];
   var $121=$120 & $119;
   HEAP32[((((4680)|0))>>2)]=$121;
   label = 26; break;
  case 18: 
   var $123=$B;
   var $124=$I;
   var $125=$124 << 1;
   var $126=((((4720)|0)+($125<<2))|0);
   var $127=$126;
   var $128=$127;
   var $129=(($123)|(0))==(($128)|(0));
   if ($129) { var $144 = 1;label = 22; break; } else { label = 19; break; }
  case 19: 
   var $131=$B;
   var $132=$131;
   var $133=HEAP32[((((4696)|0))>>2)];
   var $134=(($132)>>>(0)) >= (($133)>>>(0));
   if ($134) { label = 20; break; } else { var $142 = 0;label = 21; break; }
  case 20: 
   var $136=$B;
   var $137=(($136+8)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=$p;
   var $140=(($138)|(0))==(($139)|(0));
   var $142 = $140;label = 21; break;
  case 21: 
   var $142;
   var $144 = $142;label = 22; break;
  case 22: 
   var $144;
   var $145=(($144)&(1));
   var $146=($145);
   var $147=(($146)|(0))!=0;
   if ($147) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $149=$B;
   var $150=$F;
   var $151=(($150+12)|0);
   HEAP32[(($151)>>2)]=$149;
   var $152=$F;
   var $153=$B;
   var $154=(($153+8)|0);
   HEAP32[(($154)>>2)]=$152;
   label = 25; break;
  case 24: 
   _abort();
   throw "Reached an unreachable!";
  case 25: 
   label = 26; break;
  case 26: 
   label = 28; break;
  case 27: 
   _abort();
   throw "Reached an unreachable!";
  case 28: 
   label = 78; break;
  case 29: 
   var $161=$p;
   var $162=$161;
   $TP=$162;
   var $163=$TP;
   var $164=(($163+24)|0);
   var $165=HEAP32[(($164)>>2)];
   $XP=$165;
   var $166=$TP;
   var $167=(($166+12)|0);
   var $168=HEAP32[(($167)>>2)];
   var $169=$TP;
   var $170=(($168)|(0))!=(($169)|(0));
   if ($170) { label = 30; break; } else { label = 37; break; }
  case 30: 
   var $172=$TP;
   var $173=(($172+8)|0);
   var $174=HEAP32[(($173)>>2)];
   $F1=$174;
   var $175=$TP;
   var $176=(($175+12)|0);
   var $177=HEAP32[(($176)>>2)];
   $R=$177;
   var $178=$F1;
   var $179=$178;
   var $180=HEAP32[((((4696)|0))>>2)];
   var $181=(($179)>>>(0)) >= (($180)>>>(0));
   if ($181) { label = 31; break; } else { var $195 = 0;label = 33; break; }
  case 31: 
   var $183=$F1;
   var $184=(($183+12)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=$TP;
   var $187=(($185)|(0))==(($186)|(0));
   if ($187) { label = 32; break; } else { var $195 = 0;label = 33; break; }
  case 32: 
   var $189=$R;
   var $190=(($189+8)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=$TP;
   var $193=(($191)|(0))==(($192)|(0));
   var $195 = $193;label = 33; break;
  case 33: 
   var $195;
   var $196=(($195)&(1));
   var $197=($196);
   var $198=(($197)|(0))!=0;
   if ($198) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $200=$R;
   var $201=$F1;
   var $202=(($201+12)|0);
   HEAP32[(($202)>>2)]=$200;
   var $203=$F1;
   var $204=$R;
   var $205=(($204+8)|0);
   HEAP32[(($205)>>2)]=$203;
   label = 36; break;
  case 35: 
   _abort();
   throw "Reached an unreachable!";
  case 36: 
   label = 49; break;
  case 37: 
   var $209=$TP;
   var $210=(($209+16)|0);
   var $211=(($210+4)|0);
   $RP=$211;
   var $212=HEAP32[(($211)>>2)];
   $R=$212;
   var $213=(($212)|(0))!=0;
   if ($213) { label = 39; break; } else { label = 38; break; }
  case 38: 
   var $215=$TP;
   var $216=(($215+16)|0);
   var $217=(($216)|0);
   $RP=$217;
   var $218=HEAP32[(($217)>>2)];
   $R=$218;
   var $219=(($218)|(0))!=0;
   if ($219) { label = 39; break; } else { label = 48; break; }
  case 39: 
   label = 40; break;
  case 40: 
   var $222=$R;
   var $223=(($222+16)|0);
   var $224=(($223+4)|0);
   $CP=$224;
   var $225=HEAP32[(($224)>>2)];
   var $226=(($225)|(0))!=0;
   if ($226) { var $234 = 1;label = 42; break; } else { label = 41; break; }
  case 41: 
   var $228=$R;
   var $229=(($228+16)|0);
   var $230=(($229)|0);
   $CP=$230;
   var $231=HEAP32[(($230)>>2)];
   var $232=(($231)|(0))!=0;
   var $234 = $232;label = 42; break;
  case 42: 
   var $234;
   if ($234) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $236=$CP;
   $RP=$236;
   var $237=HEAP32[(($236)>>2)];
   $R=$237;
   label = 40; break;
  case 44: 
   var $239=$RP;
   var $240=$239;
   var $241=HEAP32[((((4696)|0))>>2)];
   var $242=(($240)>>>(0)) >= (($241)>>>(0));
   var $243=(($242)&(1));
   var $244=($243);
   var $245=(($244)|(0))!=0;
   if ($245) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $247=$RP;
   HEAP32[(($247)>>2)]=0;
   label = 47; break;
  case 46: 
   _abort();
   throw "Reached an unreachable!";
  case 47: 
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $252=$XP;
   var $253=(($252)|(0))!=0;
   if ($253) { label = 50; break; } else { label = 77; break; }
  case 50: 
   var $255=$TP;
   var $256=(($255+28)|0);
   var $257=HEAP32[(($256)>>2)];
   var $258=((((4984)|0)+($257<<2))|0);
   $H=$258;
   var $259=$TP;
   var $260=$H;
   var $261=HEAP32[(($260)>>2)];
   var $262=(($259)|(0))==(($261)|(0));
   if ($262) { label = 51; break; } else { label = 54; break; }
  case 51: 
   var $264=$R;
   var $265=$H;
   HEAP32[(($265)>>2)]=$264;
   var $266=(($264)|(0))==0;
   if ($266) { label = 52; break; } else { label = 53; break; }
  case 52: 
   var $268=$TP;
   var $269=(($268+28)|0);
   var $270=HEAP32[(($269)>>2)];
   var $271=1 << $270;
   var $272=$271 ^ -1;
   var $273=HEAP32[((((4684)|0))>>2)];
   var $274=$273 & $272;
   HEAP32[((((4684)|0))>>2)]=$274;
   label = 53; break;
  case 53: 
   label = 61; break;
  case 54: 
   var $277=$XP;
   var $278=$277;
   var $279=HEAP32[((((4696)|0))>>2)];
   var $280=(($278)>>>(0)) >= (($279)>>>(0));
   var $281=(($280)&(1));
   var $282=($281);
   var $283=(($282)|(0))!=0;
   if ($283) { label = 55; break; } else { label = 59; break; }
  case 55: 
   var $285=$XP;
   var $286=(($285+16)|0);
   var $287=(($286)|0);
   var $288=HEAP32[(($287)>>2)];
   var $289=$TP;
   var $290=(($288)|(0))==(($289)|(0));
   if ($290) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $292=$R;
   var $293=$XP;
   var $294=(($293+16)|0);
   var $295=(($294)|0);
   HEAP32[(($295)>>2)]=$292;
   label = 58; break;
  case 57: 
   var $297=$R;
   var $298=$XP;
   var $299=(($298+16)|0);
   var $300=(($299+4)|0);
   HEAP32[(($300)>>2)]=$297;
   label = 58; break;
  case 58: 
   label = 60; break;
  case 59: 
   _abort();
   throw "Reached an unreachable!";
  case 60: 
   label = 61; break;
  case 61: 
   var $305=$R;
   var $306=(($305)|(0))!=0;
   if ($306) { label = 62; break; } else { label = 76; break; }
  case 62: 
   var $308=$R;
   var $309=$308;
   var $310=HEAP32[((((4696)|0))>>2)];
   var $311=(($309)>>>(0)) >= (($310)>>>(0));
   var $312=(($311)&(1));
   var $313=($312);
   var $314=(($313)|(0))!=0;
   if ($314) { label = 63; break; } else { label = 74; break; }
  case 63: 
   var $316=$XP;
   var $317=$R;
   var $318=(($317+24)|0);
   HEAP32[(($318)>>2)]=$316;
   var $319=$TP;
   var $320=(($319+16)|0);
   var $321=(($320)|0);
   var $322=HEAP32[(($321)>>2)];
   $C0=$322;
   var $323=(($322)|(0))!=0;
   if ($323) { label = 64; break; } else { label = 68; break; }
  case 64: 
   var $325=$C0;
   var $326=$325;
   var $327=HEAP32[((((4696)|0))>>2)];
   var $328=(($326)>>>(0)) >= (($327)>>>(0));
   var $329=(($328)&(1));
   var $330=($329);
   var $331=(($330)|(0))!=0;
   if ($331) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $333=$C0;
   var $334=$R;
   var $335=(($334+16)|0);
   var $336=(($335)|0);
   HEAP32[(($336)>>2)]=$333;
   var $337=$R;
   var $338=$C0;
   var $339=(($338+24)|0);
   HEAP32[(($339)>>2)]=$337;
   label = 67; break;
  case 66: 
   _abort();
   throw "Reached an unreachable!";
  case 67: 
   label = 68; break;
  case 68: 
   var $343=$TP;
   var $344=(($343+16)|0);
   var $345=(($344+4)|0);
   var $346=HEAP32[(($345)>>2)];
   $C1=$346;
   var $347=(($346)|(0))!=0;
   if ($347) { label = 69; break; } else { label = 73; break; }
  case 69: 
   var $349=$C1;
   var $350=$349;
   var $351=HEAP32[((((4696)|0))>>2)];
   var $352=(($350)>>>(0)) >= (($351)>>>(0));
   var $353=(($352)&(1));
   var $354=($353);
   var $355=(($354)|(0))!=0;
   if ($355) { label = 70; break; } else { label = 71; break; }
  case 70: 
   var $357=$C1;
   var $358=$R;
   var $359=(($358+16)|0);
   var $360=(($359+4)|0);
   HEAP32[(($360)>>2)]=$357;
   var $361=$R;
   var $362=$C1;
   var $363=(($362+24)|0);
   HEAP32[(($363)>>2)]=$361;
   label = 72; break;
  case 71: 
   _abort();
   throw "Reached an unreachable!";
  case 72: 
   label = 73; break;
  case 73: 
   label = 75; break;
  case 74: 
   _abort();
   throw "Reached an unreachable!";
  case 75: 
   label = 76; break;
  case 76: 
   label = 77; break;
  case 77: 
   label = 78; break;
  case 78: 
   label = 82; break;
  case 79: 
   var $373=$next;
   var $374=(($373+4)|0);
   var $375=HEAP32[(($374)>>2)];
   var $376=$375 & 3;
   var $377=(($376)|(0))==3;
   if ($377) { label = 80; break; } else { label = 81; break; }
  case 80: 
   var $379=$psize;
   HEAP32[((((4688)|0))>>2)]=$379;
   var $380=$next;
   var $381=(($380+4)|0);
   var $382=HEAP32[(($381)>>2)];
   var $383=$382 & -2;
   HEAP32[(($381)>>2)]=$383;
   var $384=$psize;
   var $385=$384 | 1;
   var $386=$p;
   var $387=(($386+4)|0);
   HEAP32[(($387)>>2)]=$385;
   var $388=$psize;
   var $389=$p;
   var $390=$389;
   var $391=$psize;
   var $392=(($390+$391)|0);
   var $393=$392;
   var $394=(($393)|0);
   HEAP32[(($394)>>2)]=$388;
   label = 213; break;
  case 81: 
   label = 82; break;
  case 82: 
   label = 84; break;
  case 83: 
   label = 212; break;
  case 84: 
   label = 85; break;
  case 85: 
   label = 86; break;
  case 86: 
   var $401=$p;
   var $402=$401;
   var $403=$next;
   var $404=$403;
   var $405=(($402)>>>(0)) < (($404)>>>(0));
   if ($405) { label = 87; break; } else { var $413 = 0;label = 88; break; }
  case 87: 
   var $407=$next;
   var $408=(($407+4)|0);
   var $409=HEAP32[(($408)>>2)];
   var $410=$409 & 1;
   var $411=(($410)|(0))!=0;
   var $413 = $411;label = 88; break;
  case 88: 
   var $413;
   var $414=(($413)&(1));
   var $415=($414);
   var $416=(($415)|(0))!=0;
   if ($416) { label = 89; break; } else { label = 210; break; }
  case 89: 
   var $418=$next;
   var $419=(($418+4)|0);
   var $420=HEAP32[(($419)>>2)];
   var $421=$420 & 2;
   var $422=(($421)|(0))!=0;
   if ($422) { label = 171; break; } else { label = 90; break; }
  case 90: 
   var $424=$next;
   var $425=HEAP32[((((4704)|0))>>2)];
   var $426=(($424)|(0))==(($425)|(0));
   if ($426) { label = 91; break; } else { label = 96; break; }
  case 91: 
   var $428=$psize;
   var $429=HEAP32[((((4692)|0))>>2)];
   var $430=((($429)+($428))|0);
   HEAP32[((((4692)|0))>>2)]=$430;
   $tsize=$430;
   var $431=$p;
   HEAP32[((((4704)|0))>>2)]=$431;
   var $432=$tsize;
   var $433=$432 | 1;
   var $434=$p;
   var $435=(($434+4)|0);
   HEAP32[(($435)>>2)]=$433;
   var $436=$p;
   var $437=HEAP32[((((4700)|0))>>2)];
   var $438=(($436)|(0))==(($437)|(0));
   if ($438) { label = 92; break; } else { label = 93; break; }
  case 92: 
   HEAP32[((((4700)|0))>>2)]=0;
   HEAP32[((((4688)|0))>>2)]=0;
   label = 93; break;
  case 93: 
   var $441=$tsize;
   var $442=HEAP32[((((4708)|0))>>2)];
   var $443=(($441)>>>(0)) > (($442)>>>(0));
   if ($443) { label = 94; break; } else { label = 95; break; }
  case 94: 
   var $445=_sys_trim(4680, 0);
   label = 95; break;
  case 95: 
   label = 213; break;
  case 96: 
   var $448=$next;
   var $449=HEAP32[((((4700)|0))>>2)];
   var $450=(($448)|(0))==(($449)|(0));
   if ($450) { label = 97; break; } else { label = 98; break; }
  case 97: 
   var $452=$psize;
   var $453=HEAP32[((((4688)|0))>>2)];
   var $454=((($453)+($452))|0);
   HEAP32[((((4688)|0))>>2)]=$454;
   $dsize=$454;
   var $455=$p;
   HEAP32[((((4700)|0))>>2)]=$455;
   var $456=$dsize;
   var $457=$456 | 1;
   var $458=$p;
   var $459=(($458+4)|0);
   HEAP32[(($459)>>2)]=$457;
   var $460=$dsize;
   var $461=$p;
   var $462=$461;
   var $463=$dsize;
   var $464=(($462+$463)|0);
   var $465=$464;
   var $466=(($465)|0);
   HEAP32[(($466)>>2)]=$460;
   label = 213; break;
  case 98: 
   var $468=$next;
   var $469=(($468+4)|0);
   var $470=HEAP32[(($469)>>2)];
   var $471=$470 & -8;
   $nsize=$471;
   var $472=$nsize;
   var $473=$psize;
   var $474=((($473)+($472))|0);
   $psize=$474;
   var $475=$nsize;
   var $476=$475 >>> 3;
   var $477=(($476)>>>(0)) < 32;
   if ($477) { label = 99; break; } else { label = 117; break; }
  case 99: 
   var $479=$next;
   var $480=(($479+8)|0);
   var $481=HEAP32[(($480)>>2)];
   $F2=$481;
   var $482=$next;
   var $483=(($482+12)|0);
   var $484=HEAP32[(($483)>>2)];
   $B3=$484;
   var $485=$nsize;
   var $486=$485 >>> 3;
   $I4=$486;
   var $487=$F2;
   var $488=$I4;
   var $489=$488 << 1;
   var $490=((((4720)|0)+($489<<2))|0);
   var $491=$490;
   var $492=$491;
   var $493=(($487)|(0))==(($492)|(0));
   if ($493) { var $508 = 1;label = 103; break; } else { label = 100; break; }
  case 100: 
   var $495=$F2;
   var $496=$495;
   var $497=HEAP32[((((4696)|0))>>2)];
   var $498=(($496)>>>(0)) >= (($497)>>>(0));
   if ($498) { label = 101; break; } else { var $506 = 0;label = 102; break; }
  case 101: 
   var $500=$F2;
   var $501=(($500+12)|0);
   var $502=HEAP32[(($501)>>2)];
   var $503=$next;
   var $504=(($502)|(0))==(($503)|(0));
   var $506 = $504;label = 102; break;
  case 102: 
   var $506;
   var $508 = $506;label = 103; break;
  case 103: 
   var $508;
   var $509=(($508)&(1));
   var $510=($509);
   var $511=(($510)|(0))!=0;
   if ($511) { label = 104; break; } else { label = 115; break; }
  case 104: 
   var $513=$B3;
   var $514=$F2;
   var $515=(($513)|(0))==(($514)|(0));
   if ($515) { label = 105; break; } else { label = 106; break; }
  case 105: 
   var $517=$I4;
   var $518=1 << $517;
   var $519=$518 ^ -1;
   var $520=HEAP32[((((4680)|0))>>2)];
   var $521=$520 & $519;
   HEAP32[((((4680)|0))>>2)]=$521;
   label = 114; break;
  case 106: 
   var $523=$B3;
   var $524=$I4;
   var $525=$524 << 1;
   var $526=((((4720)|0)+($525<<2))|0);
   var $527=$526;
   var $528=$527;
   var $529=(($523)|(0))==(($528)|(0));
   if ($529) { var $544 = 1;label = 110; break; } else { label = 107; break; }
  case 107: 
   var $531=$B3;
   var $532=$531;
   var $533=HEAP32[((((4696)|0))>>2)];
   var $534=(($532)>>>(0)) >= (($533)>>>(0));
   if ($534) { label = 108; break; } else { var $542 = 0;label = 109; break; }
  case 108: 
   var $536=$B3;
   var $537=(($536+8)|0);
   var $538=HEAP32[(($537)>>2)];
   var $539=$next;
   var $540=(($538)|(0))==(($539)|(0));
   var $542 = $540;label = 109; break;
  case 109: 
   var $542;
   var $544 = $542;label = 110; break;
  case 110: 
   var $544;
   var $545=(($544)&(1));
   var $546=($545);
   var $547=(($546)|(0))!=0;
   if ($547) { label = 111; break; } else { label = 112; break; }
  case 111: 
   var $549=$B3;
   var $550=$F2;
   var $551=(($550+12)|0);
   HEAP32[(($551)>>2)]=$549;
   var $552=$F2;
   var $553=$B3;
   var $554=(($553+8)|0);
   HEAP32[(($554)>>2)]=$552;
   label = 113; break;
  case 112: 
   _abort();
   throw "Reached an unreachable!";
  case 113: 
   label = 114; break;
  case 114: 
   label = 116; break;
  case 115: 
   _abort();
   throw "Reached an unreachable!";
  case 116: 
   label = 166; break;
  case 117: 
   var $561=$next;
   var $562=$561;
   $TP5=$562;
   var $563=$TP5;
   var $564=(($563+24)|0);
   var $565=HEAP32[(($564)>>2)];
   $XP6=$565;
   var $566=$TP5;
   var $567=(($566+12)|0);
   var $568=HEAP32[(($567)>>2)];
   var $569=$TP5;
   var $570=(($568)|(0))!=(($569)|(0));
   if ($570) { label = 118; break; } else { label = 125; break; }
  case 118: 
   var $572=$TP5;
   var $573=(($572+8)|0);
   var $574=HEAP32[(($573)>>2)];
   $F8=$574;
   var $575=$TP5;
   var $576=(($575+12)|0);
   var $577=HEAP32[(($576)>>2)];
   $R7=$577;
   var $578=$F8;
   var $579=$578;
   var $580=HEAP32[((((4696)|0))>>2)];
   var $581=(($579)>>>(0)) >= (($580)>>>(0));
   if ($581) { label = 119; break; } else { var $595 = 0;label = 121; break; }
  case 119: 
   var $583=$F8;
   var $584=(($583+12)|0);
   var $585=HEAP32[(($584)>>2)];
   var $586=$TP5;
   var $587=(($585)|(0))==(($586)|(0));
   if ($587) { label = 120; break; } else { var $595 = 0;label = 121; break; }
  case 120: 
   var $589=$R7;
   var $590=(($589+8)|0);
   var $591=HEAP32[(($590)>>2)];
   var $592=$TP5;
   var $593=(($591)|(0))==(($592)|(0));
   var $595 = $593;label = 121; break;
  case 121: 
   var $595;
   var $596=(($595)&(1));
   var $597=($596);
   var $598=(($597)|(0))!=0;
   if ($598) { label = 122; break; } else { label = 123; break; }
  case 122: 
   var $600=$R7;
   var $601=$F8;
   var $602=(($601+12)|0);
   HEAP32[(($602)>>2)]=$600;
   var $603=$F8;
   var $604=$R7;
   var $605=(($604+8)|0);
   HEAP32[(($605)>>2)]=$603;
   label = 124; break;
  case 123: 
   _abort();
   throw "Reached an unreachable!";
  case 124: 
   label = 137; break;
  case 125: 
   var $609=$TP5;
   var $610=(($609+16)|0);
   var $611=(($610+4)|0);
   $RP9=$611;
   var $612=HEAP32[(($611)>>2)];
   $R7=$612;
   var $613=(($612)|(0))!=0;
   if ($613) { label = 127; break; } else { label = 126; break; }
  case 126: 
   var $615=$TP5;
   var $616=(($615+16)|0);
   var $617=(($616)|0);
   $RP9=$617;
   var $618=HEAP32[(($617)>>2)];
   $R7=$618;
   var $619=(($618)|(0))!=0;
   if ($619) { label = 127; break; } else { label = 136; break; }
  case 127: 
   label = 128; break;
  case 128: 
   var $622=$R7;
   var $623=(($622+16)|0);
   var $624=(($623+4)|0);
   $CP10=$624;
   var $625=HEAP32[(($624)>>2)];
   var $626=(($625)|(0))!=0;
   if ($626) { var $634 = 1;label = 130; break; } else { label = 129; break; }
  case 129: 
   var $628=$R7;
   var $629=(($628+16)|0);
   var $630=(($629)|0);
   $CP10=$630;
   var $631=HEAP32[(($630)>>2)];
   var $632=(($631)|(0))!=0;
   var $634 = $632;label = 130; break;
  case 130: 
   var $634;
   if ($634) { label = 131; break; } else { label = 132; break; }
  case 131: 
   var $636=$CP10;
   $RP9=$636;
   var $637=HEAP32[(($636)>>2)];
   $R7=$637;
   label = 128; break;
  case 132: 
   var $639=$RP9;
   var $640=$639;
   var $641=HEAP32[((((4696)|0))>>2)];
   var $642=(($640)>>>(0)) >= (($641)>>>(0));
   var $643=(($642)&(1));
   var $644=($643);
   var $645=(($644)|(0))!=0;
   if ($645) { label = 133; break; } else { label = 134; break; }
  case 133: 
   var $647=$RP9;
   HEAP32[(($647)>>2)]=0;
   label = 135; break;
  case 134: 
   _abort();
   throw "Reached an unreachable!";
  case 135: 
   label = 136; break;
  case 136: 
   label = 137; break;
  case 137: 
   var $652=$XP6;
   var $653=(($652)|(0))!=0;
   if ($653) { label = 138; break; } else { label = 165; break; }
  case 138: 
   var $655=$TP5;
   var $656=(($655+28)|0);
   var $657=HEAP32[(($656)>>2)];
   var $658=((((4984)|0)+($657<<2))|0);
   $H11=$658;
   var $659=$TP5;
   var $660=$H11;
   var $661=HEAP32[(($660)>>2)];
   var $662=(($659)|(0))==(($661)|(0));
   if ($662) { label = 139; break; } else { label = 142; break; }
  case 139: 
   var $664=$R7;
   var $665=$H11;
   HEAP32[(($665)>>2)]=$664;
   var $666=(($664)|(0))==0;
   if ($666) { label = 140; break; } else { label = 141; break; }
  case 140: 
   var $668=$TP5;
   var $669=(($668+28)|0);
   var $670=HEAP32[(($669)>>2)];
   var $671=1 << $670;
   var $672=$671 ^ -1;
   var $673=HEAP32[((((4684)|0))>>2)];
   var $674=$673 & $672;
   HEAP32[((((4684)|0))>>2)]=$674;
   label = 141; break;
  case 141: 
   label = 149; break;
  case 142: 
   var $677=$XP6;
   var $678=$677;
   var $679=HEAP32[((((4696)|0))>>2)];
   var $680=(($678)>>>(0)) >= (($679)>>>(0));
   var $681=(($680)&(1));
   var $682=($681);
   var $683=(($682)|(0))!=0;
   if ($683) { label = 143; break; } else { label = 147; break; }
  case 143: 
   var $685=$XP6;
   var $686=(($685+16)|0);
   var $687=(($686)|0);
   var $688=HEAP32[(($687)>>2)];
   var $689=$TP5;
   var $690=(($688)|(0))==(($689)|(0));
   if ($690) { label = 144; break; } else { label = 145; break; }
  case 144: 
   var $692=$R7;
   var $693=$XP6;
   var $694=(($693+16)|0);
   var $695=(($694)|0);
   HEAP32[(($695)>>2)]=$692;
   label = 146; break;
  case 145: 
   var $697=$R7;
   var $698=$XP6;
   var $699=(($698+16)|0);
   var $700=(($699+4)|0);
   HEAP32[(($700)>>2)]=$697;
   label = 146; break;
  case 146: 
   label = 148; break;
  case 147: 
   _abort();
   throw "Reached an unreachable!";
  case 148: 
   label = 149; break;
  case 149: 
   var $705=$R7;
   var $706=(($705)|(0))!=0;
   if ($706) { label = 150; break; } else { label = 164; break; }
  case 150: 
   var $708=$R7;
   var $709=$708;
   var $710=HEAP32[((((4696)|0))>>2)];
   var $711=(($709)>>>(0)) >= (($710)>>>(0));
   var $712=(($711)&(1));
   var $713=($712);
   var $714=(($713)|(0))!=0;
   if ($714) { label = 151; break; } else { label = 162; break; }
  case 151: 
   var $716=$XP6;
   var $717=$R7;
   var $718=(($717+24)|0);
   HEAP32[(($718)>>2)]=$716;
   var $719=$TP5;
   var $720=(($719+16)|0);
   var $721=(($720)|0);
   var $722=HEAP32[(($721)>>2)];
   $C012=$722;
   var $723=(($722)|(0))!=0;
   if ($723) { label = 152; break; } else { label = 156; break; }
  case 152: 
   var $725=$C012;
   var $726=$725;
   var $727=HEAP32[((((4696)|0))>>2)];
   var $728=(($726)>>>(0)) >= (($727)>>>(0));
   var $729=(($728)&(1));
   var $730=($729);
   var $731=(($730)|(0))!=0;
   if ($731) { label = 153; break; } else { label = 154; break; }
  case 153: 
   var $733=$C012;
   var $734=$R7;
   var $735=(($734+16)|0);
   var $736=(($735)|0);
   HEAP32[(($736)>>2)]=$733;
   var $737=$R7;
   var $738=$C012;
   var $739=(($738+24)|0);
   HEAP32[(($739)>>2)]=$737;
   label = 155; break;
  case 154: 
   _abort();
   throw "Reached an unreachable!";
  case 155: 
   label = 156; break;
  case 156: 
   var $743=$TP5;
   var $744=(($743+16)|0);
   var $745=(($744+4)|0);
   var $746=HEAP32[(($745)>>2)];
   $C113=$746;
   var $747=(($746)|(0))!=0;
   if ($747) { label = 157; break; } else { label = 161; break; }
  case 157: 
   var $749=$C113;
   var $750=$749;
   var $751=HEAP32[((((4696)|0))>>2)];
   var $752=(($750)>>>(0)) >= (($751)>>>(0));
   var $753=(($752)&(1));
   var $754=($753);
   var $755=(($754)|(0))!=0;
   if ($755) { label = 158; break; } else { label = 159; break; }
  case 158: 
   var $757=$C113;
   var $758=$R7;
   var $759=(($758+16)|0);
   var $760=(($759+4)|0);
   HEAP32[(($760)>>2)]=$757;
   var $761=$R7;
   var $762=$C113;
   var $763=(($762+24)|0);
   HEAP32[(($763)>>2)]=$761;
   label = 160; break;
  case 159: 
   _abort();
   throw "Reached an unreachable!";
  case 160: 
   label = 161; break;
  case 161: 
   label = 163; break;
  case 162: 
   _abort();
   throw "Reached an unreachable!";
  case 163: 
   label = 164; break;
  case 164: 
   label = 165; break;
  case 165: 
   label = 166; break;
  case 166: 
   var $772=$psize;
   var $773=$772 | 1;
   var $774=$p;
   var $775=(($774+4)|0);
   HEAP32[(($775)>>2)]=$773;
   var $776=$psize;
   var $777=$p;
   var $778=$777;
   var $779=$psize;
   var $780=(($778+$779)|0);
   var $781=$780;
   var $782=(($781)|0);
   HEAP32[(($782)>>2)]=$776;
   var $783=$p;
   var $784=HEAP32[((((4700)|0))>>2)];
   var $785=(($783)|(0))==(($784)|(0));
   if ($785) { label = 167; break; } else { label = 168; break; }
  case 167: 
   var $787=$psize;
   HEAP32[((((4688)|0))>>2)]=$787;
   label = 213; break;
  case 168: 
   label = 169; break;
  case 169: 
   label = 170; break;
  case 170: 
   label = 172; break;
  case 171: 
   var $792=$next;
   var $793=(($792+4)|0);
   var $794=HEAP32[(($793)>>2)];
   var $795=$794 & -2;
   HEAP32[(($793)>>2)]=$795;
   var $796=$psize;
   var $797=$796 | 1;
   var $798=$p;
   var $799=(($798+4)|0);
   HEAP32[(($799)>>2)]=$797;
   var $800=$psize;
   var $801=$p;
   var $802=$801;
   var $803=$psize;
   var $804=(($802+$803)|0);
   var $805=$804;
   var $806=(($805)|0);
   HEAP32[(($806)>>2)]=$800;
   label = 172; break;
  case 172: 
   var $808=$psize;
   var $809=$808 >>> 3;
   var $810=(($809)>>>(0)) < 32;
   if ($810) { label = 173; break; } else { label = 180; break; }
  case 173: 
   var $812=$psize;
   var $813=$812 >>> 3;
   $I14=$813;
   var $814=$I14;
   var $815=$814 << 1;
   var $816=((((4720)|0)+($815<<2))|0);
   var $817=$816;
   var $818=$817;
   $B15=$818;
   var $819=$B15;
   $F16=$819;
   var $820=HEAP32[((((4680)|0))>>2)];
   var $821=$I14;
   var $822=1 << $821;
   var $823=$820 & $822;
   var $824=(($823)|(0))!=0;
   if ($824) { label = 175; break; } else { label = 174; break; }
  case 174: 
   var $826=$I14;
   var $827=1 << $826;
   var $828=HEAP32[((((4680)|0))>>2)];
   var $829=$828 | $827;
   HEAP32[((((4680)|0))>>2)]=$829;
   label = 179; break;
  case 175: 
   var $831=$B15;
   var $832=(($831+8)|0);
   var $833=HEAP32[(($832)>>2)];
   var $834=$833;
   var $835=HEAP32[((((4696)|0))>>2)];
   var $836=(($834)>>>(0)) >= (($835)>>>(0));
   var $837=(($836)&(1));
   var $838=($837);
   var $839=(($838)|(0))!=0;
   if ($839) { label = 176; break; } else { label = 177; break; }
  case 176: 
   var $841=$B15;
   var $842=(($841+8)|0);
   var $843=HEAP32[(($842)>>2)];
   $F16=$843;
   label = 178; break;
  case 177: 
   _abort();
   throw "Reached an unreachable!";
  case 178: 
   label = 179; break;
  case 179: 
   var $847=$p;
   var $848=$B15;
   var $849=(($848+8)|0);
   HEAP32[(($849)>>2)]=$847;
   var $850=$p;
   var $851=$F16;
   var $852=(($851+12)|0);
   HEAP32[(($852)>>2)]=$850;
   var $853=$F16;
   var $854=$p;
   var $855=(($854+8)|0);
   HEAP32[(($855)>>2)]=$853;
   var $856=$B15;
   var $857=$p;
   var $858=(($857+12)|0);
   HEAP32[(($858)>>2)]=$856;
   label = 209; break;
  case 180: 
   var $860=$p;
   var $861=$860;
   $tp=$861;
   var $862=$psize;
   var $863=$862 >>> 8;
   $X=$863;
   var $864=$X;
   var $865=(($864)|(0))==0;
   if ($865) { label = 181; break; } else { label = 182; break; }
  case 181: 
   $I18=0;
   label = 186; break;
  case 182: 
   var $868=$X;
   var $869=(($868)>>>(0)) > 65535;
   if ($869) { label = 183; break; } else { label = 184; break; }
  case 183: 
   $I18=31;
   label = 185; break;
  case 184: 
   var $872=$X;
   $Y=$872;
   var $873=$Y;
   var $874=((($873)-(256))|0);
   var $875=$874 >>> 16;
   var $876=$875 & 8;
   $N=$876;
   var $877=$N;
   var $878=$Y;
   var $879=$878 << $877;
   $Y=$879;
   var $880=((($879)-(4096))|0);
   var $881=$880 >>> 16;
   var $882=$881 & 4;
   $K=$882;
   var $883=$K;
   var $884=$N;
   var $885=((($884)+($883))|0);
   $N=$885;
   var $886=$K;
   var $887=$Y;
   var $888=$887 << $886;
   $Y=$888;
   var $889=((($888)-(16384))|0);
   var $890=$889 >>> 16;
   var $891=$890 & 2;
   $K=$891;
   var $892=$N;
   var $893=((($892)+($891))|0);
   $N=$893;
   var $894=$N;
   var $895=(((14)-($894))|0);
   var $896=$K;
   var $897=$Y;
   var $898=$897 << $896;
   $Y=$898;
   var $899=$898 >>> 15;
   var $900=((($895)+($899))|0);
   $K=$900;
   var $901=$K;
   var $902=$901 << 1;
   var $903=$psize;
   var $904=$K;
   var $905=((($904)+(7))|0);
   var $906=$903 >>> (($905)>>>(0));
   var $907=$906 & 1;
   var $908=((($902)+($907))|0);
   $I18=$908;
   label = 185; break;
  case 185: 
   label = 186; break;
  case 186: 
   var $911=$I18;
   var $912=((((4984)|0)+($911<<2))|0);
   $H17=$912;
   var $913=$I18;
   var $914=$tp;
   var $915=(($914+28)|0);
   HEAP32[(($915)>>2)]=$913;
   var $916=$tp;
   var $917=(($916+16)|0);
   var $918=(($917+4)|0);
   HEAP32[(($918)>>2)]=0;
   var $919=$tp;
   var $920=(($919+16)|0);
   var $921=(($920)|0);
   HEAP32[(($921)>>2)]=0;
   var $922=HEAP32[((((4684)|0))>>2)];
   var $923=$I18;
   var $924=1 << $923;
   var $925=$922 & $924;
   var $926=(($925)|(0))!=0;
   if ($926) { label = 188; break; } else { label = 187; break; }
  case 187: 
   var $928=$I18;
   var $929=1 << $928;
   var $930=HEAP32[((((4684)|0))>>2)];
   var $931=$930 | $929;
   HEAP32[((((4684)|0))>>2)]=$931;
   var $932=$tp;
   var $933=$H17;
   HEAP32[(($933)>>2)]=$932;
   var $934=$H17;
   var $935=$934;
   var $936=$tp;
   var $937=(($936+24)|0);
   HEAP32[(($937)>>2)]=$935;
   var $938=$tp;
   var $939=$tp;
   var $940=(($939+12)|0);
   HEAP32[(($940)>>2)]=$938;
   var $941=$tp;
   var $942=(($941+8)|0);
   HEAP32[(($942)>>2)]=$938;
   label = 206; break;
  case 188: 
   var $944=$H17;
   var $945=HEAP32[(($944)>>2)];
   $T=$945;
   var $946=$psize;
   var $947=$I18;
   var $948=(($947)|(0))==31;
   if ($948) { label = 189; break; } else { label = 190; break; }
  case 189: 
   var $957 = 0;label = 191; break;
  case 190: 
   var $951=$I18;
   var $952=$951 >>> 1;
   var $953=((($952)+(8))|0);
   var $954=((($953)-(2))|0);
   var $955=(((31)-($954))|0);
   var $957 = $955;label = 191; break;
  case 191: 
   var $957;
   var $958=$946 << $957;
   $K19=$958;
   label = 192; break;
  case 192: 
   var $960=$T;
   var $961=(($960+4)|0);
   var $962=HEAP32[(($961)>>2)];
   var $963=$962 & -8;
   var $964=$psize;
   var $965=(($963)|(0))!=(($964)|(0));
   if ($965) { label = 193; break; } else { label = 199; break; }
  case 193: 
   var $967=$K19;
   var $968=$967 >>> 31;
   var $969=$968 & 1;
   var $970=$T;
   var $971=(($970+16)|0);
   var $972=(($971+($969<<2))|0);
   $C=$972;
   var $973=$K19;
   var $974=$973 << 1;
   $K19=$974;
   var $975=$C;
   var $976=HEAP32[(($975)>>2)];
   var $977=(($976)|(0))!=0;
   if ($977) { label = 194; break; } else { label = 195; break; }
  case 194: 
   var $979=$C;
   var $980=HEAP32[(($979)>>2)];
   $T=$980;
   label = 198; break;
  case 195: 
   var $982=$C;
   var $983=$982;
   var $984=HEAP32[((((4696)|0))>>2)];
   var $985=(($983)>>>(0)) >= (($984)>>>(0));
   var $986=(($985)&(1));
   var $987=($986);
   var $988=(($987)|(0))!=0;
   if ($988) { label = 196; break; } else { label = 197; break; }
  case 196: 
   var $990=$tp;
   var $991=$C;
   HEAP32[(($991)>>2)]=$990;
   var $992=$T;
   var $993=$tp;
   var $994=(($993+24)|0);
   HEAP32[(($994)>>2)]=$992;
   var $995=$tp;
   var $996=$tp;
   var $997=(($996+12)|0);
   HEAP32[(($997)>>2)]=$995;
   var $998=$tp;
   var $999=(($998+8)|0);
   HEAP32[(($999)>>2)]=$995;
   label = 205; break;
  case 197: 
   _abort();
   throw "Reached an unreachable!";
  case 198: 
   label = 204; break;
  case 199: 
   var $1003=$T;
   var $1004=(($1003+8)|0);
   var $1005=HEAP32[(($1004)>>2)];
   $F20=$1005;
   var $1006=$T;
   var $1007=$1006;
   var $1008=HEAP32[((((4696)|0))>>2)];
   var $1009=(($1007)>>>(0)) >= (($1008)>>>(0));
   if ($1009) { label = 200; break; } else { var $1016 = 0;label = 201; break; }
  case 200: 
   var $1011=$F20;
   var $1012=$1011;
   var $1013=HEAP32[((((4696)|0))>>2)];
   var $1014=(($1012)>>>(0)) >= (($1013)>>>(0));
   var $1016 = $1014;label = 201; break;
  case 201: 
   var $1016;
   var $1017=(($1016)&(1));
   var $1018=($1017);
   var $1019=(($1018)|(0))!=0;
   if ($1019) { label = 202; break; } else { label = 203; break; }
  case 202: 
   var $1021=$tp;
   var $1022=$F20;
   var $1023=(($1022+12)|0);
   HEAP32[(($1023)>>2)]=$1021;
   var $1024=$T;
   var $1025=(($1024+8)|0);
   HEAP32[(($1025)>>2)]=$1021;
   var $1026=$F20;
   var $1027=$tp;
   var $1028=(($1027+8)|0);
   HEAP32[(($1028)>>2)]=$1026;
   var $1029=$T;
   var $1030=$tp;
   var $1031=(($1030+12)|0);
   HEAP32[(($1031)>>2)]=$1029;
   var $1032=$tp;
   var $1033=(($1032+24)|0);
   HEAP32[(($1033)>>2)]=0;
   label = 205; break;
  case 203: 
   _abort();
   throw "Reached an unreachable!";
  case 204: 
   label = 192; break;
  case 205: 
   label = 206; break;
  case 206: 
   var $1038=HEAP32[((((4712)|0))>>2)];
   var $1039=((($1038)-(1))|0);
   HEAP32[((((4712)|0))>>2)]=$1039;
   var $1040=(($1039)|(0))==0;
   if ($1040) { label = 207; break; } else { label = 208; break; }
  case 207: 
   var $1042=_release_unused_segments(4680);
   label = 208; break;
  case 208: 
   label = 209; break;
  case 209: 
   label = 213; break;
  case 210: 
   label = 211; break;
  case 211: 
   label = 212; break;
  case 212: 
   _abort();
   throw "Reached an unreachable!";
  case 213: 
   label = 214; break;
  case 214: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _sys_trim($m, $pad) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $released;
   var $unit;
   var $extra;
   var $sp;
   var $old_br;
   var $rel_br;
   var $new_br;
   $1=$m;
   $2=$pad;
   $released=0;
   var $3=HEAP32[((((80)|0))>>2)];
   var $4=(($3)|(0))!=0;
   if ($4) { var $9 = 1;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=_init_mparams();
   var $7=(($6)|(0))!=0;
   var $9 = $7;label = 3; break;
  case 3: 
   var $9;
   var $10=(($9)&(1));
   var $11=$2;
   var $12=(($11)>>>(0)) < 4294967232;
   if ($12) { label = 4; break; } else { label = 25; break; }
  case 4: 
   var $14=$1;
   var $15=(($14+24)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))!=0;
   if ($17) { label = 5; break; } else { label = 25; break; }
  case 5: 
   var $19=$2;
   var $20=((($19)+(40))|0);
   $2=$20;
   var $21=$1;
   var $22=(($21+12)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$2;
   var $25=(($23)>>>(0)) > (($24)>>>(0));
   if ($25) { label = 6; break; } else { label = 21; break; }
  case 6: 
   var $27=HEAP32[((((88)|0))>>2)];
   $unit=$27;
   var $28=$1;
   var $29=(($28+12)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$2;
   var $32=((($30)-($31))|0);
   var $33=$unit;
   var $34=((($33)-(1))|0);
   var $35=((($32)+($34))|0);
   var $36=$unit;
   var $37=Math.floor(((($35)>>>(0)))/((($36)>>>(0))));
   var $38=((($37)-(1))|0);
   var $39=$unit;
   var $40=(Math.imul($38,$39)|0);
   $extra=$40;
   var $41=$1;
   var $42=$1;
   var $43=(($42+24)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$44;
   var $46=_segment_holding($41, $45);
   $sp=$46;
   var $47=$sp;
   var $48=(($47+12)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=$49 & 8;
   var $51=(($50)|(0))!=0;
   if ($51) { label = 18; break; } else { label = 7; break; }
  case 7: 
   var $53=$sp;
   var $54=(($53+12)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$55 & 0;
   var $57=(($56)|(0))!=0;
   if ($57) { label = 8; break; } else { label = 9; break; }
  case 8: 
   label = 17; break;
  case 9: 
   var $60=$extra;
   var $61=(($60)>>>(0)) >= 2147483647;
   if ($61) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $63=$unit;
   var $64=(((-2147483648)-($63))|0);
   $extra=$64;
   label = 11; break;
  case 11: 
   var $66=_sbrk(0);
   $old_br=$66;
   var $67=$old_br;
   var $68=$sp;
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=$sp;
   var $72=(($71+4)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($70+$73)|0);
   var $75=(($67)|(0))==(($74)|(0));
   if ($75) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $77=$extra;
   var $78=(((-$77))|0);
   var $79=_sbrk($78);
   $rel_br=$79;
   var $80=_sbrk(0);
   $new_br=$80;
   var $81=$rel_br;
   var $82=(($81)|(0))!=-1;
   if ($82) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $84=$new_br;
   var $85=$old_br;
   var $86=(($84)>>>(0)) < (($85)>>>(0));
   if ($86) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $88=$old_br;
   var $89=$new_br;
   var $90=$88;
   var $91=$89;
   var $92=((($90)-($91))|0);
   $released=$92;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $97=$released;
   var $98=(($97)|(0))!=0;
   if ($98) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $100=$released;
   var $101=$sp;
   var $102=(($101+4)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=((($103)-($100))|0);
   HEAP32[(($102)>>2)]=$104;
   var $105=$released;
   var $106=$1;
   var $107=(($106+432)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=((($108)-($105))|0);
   HEAP32[(($107)>>2)]=$109;
   var $110=$1;
   var $111=$1;
   var $112=(($111+24)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=$1;
   var $115=(($114+12)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=$released;
   var $118=((($116)-($117))|0);
   _init_top($110, $113, $118);
   label = 20; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $121=$released;
   var $122=(($121)|(0))==0;
   if ($122) { label = 22; break; } else { label = 24; break; }
  case 22: 
   var $124=$1;
   var $125=(($124+12)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=$1;
   var $128=(($127+28)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(($126)>>>(0)) > (($129)>>>(0));
   if ($130) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $132=$1;
   var $133=(($132+28)|0);
   HEAP32[(($133)>>2)]=-1;
   label = 24; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $136=$released;
   var $137=(($136)|(0))!=0;
   var $138=$137 ? 1 : 0;
   return $138;
  default: assert(0, "bad label: " + label);
 }
}
function _realloc($oldmem, $bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $mem;
   var $nb;
   var $oldp;
   var $m;
   var $newp;
   var $oc;
   $1=$oldmem;
   $2=$bytes;
   $mem=0;
   var $3=$1;
   var $4=(($3)|(0))==0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$2;
   var $7=_malloc($6);
   $mem=$7;
   label = 18; break;
  case 3: 
   var $9=$2;
   var $10=(($9)>>>(0)) >= 4294967232;
   if ($10) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $12=___errno_location();
   HEAP32[(($12)>>2)]=12;
   label = 17; break;
  case 5: 
   var $14=$2;
   var $15=(($14)>>>(0)) < 11;
   if ($15) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $23 = 16;label = 8; break;
  case 7: 
   var $18=$2;
   var $19=((($18)+(4))|0);
   var $20=((($19)+(7))|0);
   var $21=$20 & -8;
   var $23 = $21;label = 8; break;
  case 8: 
   var $23;
   $nb=$23;
   var $24=$1;
   var $25=((($24)-(8))|0);
   var $26=$25;
   $oldp=$26;
   $m=4680;
   var $27=$m;
   var $28=$oldp;
   var $29=$nb;
   var $30=_try_realloc_chunk($27, $28, $29, 1);
   $newp=$30;
   var $31=$newp;
   var $32=(($31)|(0))!=0;
   if ($32) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $34=$newp;
   var $35=$34;
   var $36=(($35+8)|0);
   $mem=$36;
   label = 16; break;
  case 10: 
   var $38=$2;
   var $39=_malloc($38);
   $mem=$39;
   var $40=$mem;
   var $41=(($40)|(0))!=0;
   if ($41) { label = 11; break; } else { label = 15; break; }
  case 11: 
   var $43=$oldp;
   var $44=(($43+4)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$45 & -8;
   var $47=$oldp;
   var $48=(($47+4)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=$49 & 3;
   var $51=(($50)|(0))==0;
   var $52=$51 ? 8 : 4;
   var $53=((($46)-($52))|0);
   $oc=$53;
   var $54=$mem;
   var $55=$1;
   var $56=$oc;
   var $57=$2;
   var $58=(($56)>>>(0)) < (($57)>>>(0));
   if ($58) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $60=$oc;
   var $64 = $60;label = 14; break;
  case 13: 
   var $62=$2;
   var $64 = $62;label = 14; break;
  case 14: 
   var $64;
   assert($64 % 1 === 0);(_memcpy($54, $55, $64)|0);
   var $65=$1;
   _free($65);
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $70=$mem;
   return $70;
  default: assert(0, "bad label: " + label);
 }
}
Module["_realloc"] = _realloc;
function _release_unused_segments($m) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $released;
   var $nsegs;
   var $pred;
   var $sp;
   var $base;
   var $size;
   var $next;
   var $p;
   var $psize;
   var $tp;
   var $XP;
   var $R;
   var $F;
   var $RP;
   var $CP;
   var $H;
   var $C0;
   var $C1;
   var $H1;
   var $I;
   var $X;
   var $Y;
   var $N;
   var $K;
   var $T;
   var $K2;
   var $C;
   var $F3;
   $1=$m;
   $released=0;
   $nsegs=0;
   var $2=$1;
   var $3=(($2+448)|0);
   $pred=$3;
   var $4=$pred;
   var $5=(($4+8)|0);
   var $6=HEAP32[(($5)>>2)];
   $sp=$6;
   label = 2; break;
  case 2: 
   var $8=$sp;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 90; break; }
  case 3: 
   var $11=$sp;
   var $12=(($11)|0);
   var $13=HEAP32[(($12)>>2)];
   $base=$13;
   var $14=$sp;
   var $15=(($14+4)|0);
   var $16=HEAP32[(($15)>>2)];
   $size=$16;
   var $17=$sp;
   var $18=(($17+8)|0);
   var $19=HEAP32[(($18)>>2)];
   $next=$19;
   var $20=$nsegs;
   var $21=((($20)+(1))|0);
   $nsegs=$21;
   var $22=$sp;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$24 & 0;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 4; break; } else { label = 89; break; }
  case 4: 
   var $28=$sp;
   var $29=(($28+12)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$30 & 8;
   var $32=(($31)|(0))!=0;
   if ($32) { label = 89; break; } else { label = 5; break; }
  case 5: 
   var $34=$base;
   var $35=$base;
   var $36=(($35+8)|0);
   var $37=$36;
   var $38=$37 & 7;
   var $39=(($38)|(0))==0;
   if ($39) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $49 = 0;label = 8; break;
  case 7: 
   var $42=$base;
   var $43=(($42+8)|0);
   var $44=$43;
   var $45=$44 & 7;
   var $46=(((8)-($45))|0);
   var $47=$46 & 7;
   var $49 = $47;label = 8; break;
  case 8: 
   var $49;
   var $50=(($34+$49)|0);
   var $51=$50;
   $p=$51;
   var $52=$p;
   var $53=(($52+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$54 & -8;
   $psize=$55;
   var $56=$p;
   var $57=(($56+4)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$58 & 3;
   var $60=(($59)|(0))!=1;
   if ($60) { label = 88; break; } else { label = 9; break; }
  case 9: 
   var $62=$p;
   var $63=$62;
   var $64=$psize;
   var $65=(($63+$64)|0);
   var $66=$base;
   var $67=$size;
   var $68=(($66+$67)|0);
   var $69=((($68)-(40))|0);
   var $70=(($65)>>>(0)) >= (($69)>>>(0));
   if ($70) { label = 10; break; } else { label = 88; break; }
  case 10: 
   var $72=$p;
   var $73=$72;
   $tp=$73;
   var $74=$p;
   var $75=$1;
   var $76=(($75+20)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($74)|(0))==(($77)|(0));
   if ($78) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $80=$1;
   var $81=(($80+20)|0);
   HEAP32[(($81)>>2)]=0;
   var $82=$1;
   var $83=(($82+8)|0);
   HEAP32[(($83)>>2)]=0;
   label = 61; break;
  case 12: 
   var $85=$tp;
   var $86=(($85+24)|0);
   var $87=HEAP32[(($86)>>2)];
   $XP=$87;
   var $88=$tp;
   var $89=(($88+12)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=$tp;
   var $92=(($90)|(0))!=(($91)|(0));
   if ($92) { label = 13; break; } else { label = 20; break; }
  case 13: 
   var $94=$tp;
   var $95=(($94+8)|0);
   var $96=HEAP32[(($95)>>2)];
   $F=$96;
   var $97=$tp;
   var $98=(($97+12)|0);
   var $99=HEAP32[(($98)>>2)];
   $R=$99;
   var $100=$F;
   var $101=$100;
   var $102=$1;
   var $103=(($102+16)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($101)>>>(0)) >= (($104)>>>(0));
   if ($105) { label = 14; break; } else { var $119 = 0;label = 16; break; }
  case 14: 
   var $107=$F;
   var $108=(($107+12)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=$tp;
   var $111=(($109)|(0))==(($110)|(0));
   if ($111) { label = 15; break; } else { var $119 = 0;label = 16; break; }
  case 15: 
   var $113=$R;
   var $114=(($113+8)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=$tp;
   var $117=(($115)|(0))==(($116)|(0));
   var $119 = $117;label = 16; break;
  case 16: 
   var $119;
   var $120=(($119)&(1));
   var $121=($120);
   var $122=(($121)|(0))!=0;
   if ($122) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $124=$R;
   var $125=$F;
   var $126=(($125+12)|0);
   HEAP32[(($126)>>2)]=$124;
   var $127=$F;
   var $128=$R;
   var $129=(($128+8)|0);
   HEAP32[(($129)>>2)]=$127;
   label = 19; break;
  case 18: 
   _abort();
   throw "Reached an unreachable!";
  case 19: 
   label = 32; break;
  case 20: 
   var $133=$tp;
   var $134=(($133+16)|0);
   var $135=(($134+4)|0);
   $RP=$135;
   var $136=HEAP32[(($135)>>2)];
   $R=$136;
   var $137=(($136)|(0))!=0;
   if ($137) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $139=$tp;
   var $140=(($139+16)|0);
   var $141=(($140)|0);
   $RP=$141;
   var $142=HEAP32[(($141)>>2)];
   $R=$142;
   var $143=(($142)|(0))!=0;
   if ($143) { label = 22; break; } else { label = 31; break; }
  case 22: 
   label = 23; break;
  case 23: 
   var $146=$R;
   var $147=(($146+16)|0);
   var $148=(($147+4)|0);
   $CP=$148;
   var $149=HEAP32[(($148)>>2)];
   var $150=(($149)|(0))!=0;
   if ($150) { var $158 = 1;label = 25; break; } else { label = 24; break; }
  case 24: 
   var $152=$R;
   var $153=(($152+16)|0);
   var $154=(($153)|0);
   $CP=$154;
   var $155=HEAP32[(($154)>>2)];
   var $156=(($155)|(0))!=0;
   var $158 = $156;label = 25; break;
  case 25: 
   var $158;
   if ($158) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $160=$CP;
   $RP=$160;
   var $161=HEAP32[(($160)>>2)];
   $R=$161;
   label = 23; break;
  case 27: 
   var $163=$RP;
   var $164=$163;
   var $165=$1;
   var $166=(($165+16)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=(($164)>>>(0)) >= (($167)>>>(0));
   var $169=(($168)&(1));
   var $170=($169);
   var $171=(($170)|(0))!=0;
   if ($171) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $173=$RP;
   HEAP32[(($173)>>2)]=0;
   label = 30; break;
  case 29: 
   _abort();
   throw "Reached an unreachable!";
  case 30: 
   label = 31; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $178=$XP;
   var $179=(($178)|(0))!=0;
   if ($179) { label = 33; break; } else { label = 60; break; }
  case 33: 
   var $181=$tp;
   var $182=(($181+28)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=$1;
   var $185=(($184+304)|0);
   var $186=(($185+($183<<2))|0);
   $H=$186;
   var $187=$tp;
   var $188=$H;
   var $189=HEAP32[(($188)>>2)];
   var $190=(($187)|(0))==(($189)|(0));
   if ($190) { label = 34; break; } else { label = 37; break; }
  case 34: 
   var $192=$R;
   var $193=$H;
   HEAP32[(($193)>>2)]=$192;
   var $194=(($192)|(0))==0;
   if ($194) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $196=$tp;
   var $197=(($196+28)|0);
   var $198=HEAP32[(($197)>>2)];
   var $199=1 << $198;
   var $200=$199 ^ -1;
   var $201=$1;
   var $202=(($201+4)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=$203 & $200;
   HEAP32[(($202)>>2)]=$204;
   label = 36; break;
  case 36: 
   label = 44; break;
  case 37: 
   var $207=$XP;
   var $208=$207;
   var $209=$1;
   var $210=(($209+16)|0);
   var $211=HEAP32[(($210)>>2)];
   var $212=(($208)>>>(0)) >= (($211)>>>(0));
   var $213=(($212)&(1));
   var $214=($213);
   var $215=(($214)|(0))!=0;
   if ($215) { label = 38; break; } else { label = 42; break; }
  case 38: 
   var $217=$XP;
   var $218=(($217+16)|0);
   var $219=(($218)|0);
   var $220=HEAP32[(($219)>>2)];
   var $221=$tp;
   var $222=(($220)|(0))==(($221)|(0));
   if ($222) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $224=$R;
   var $225=$XP;
   var $226=(($225+16)|0);
   var $227=(($226)|0);
   HEAP32[(($227)>>2)]=$224;
   label = 41; break;
  case 40: 
   var $229=$R;
   var $230=$XP;
   var $231=(($230+16)|0);
   var $232=(($231+4)|0);
   HEAP32[(($232)>>2)]=$229;
   label = 41; break;
  case 41: 
   label = 43; break;
  case 42: 
   _abort();
   throw "Reached an unreachable!";
  case 43: 
   label = 44; break;
  case 44: 
   var $237=$R;
   var $238=(($237)|(0))!=0;
   if ($238) { label = 45; break; } else { label = 59; break; }
  case 45: 
   var $240=$R;
   var $241=$240;
   var $242=$1;
   var $243=(($242+16)|0);
   var $244=HEAP32[(($243)>>2)];
   var $245=(($241)>>>(0)) >= (($244)>>>(0));
   var $246=(($245)&(1));
   var $247=($246);
   var $248=(($247)|(0))!=0;
   if ($248) { label = 46; break; } else { label = 57; break; }
  case 46: 
   var $250=$XP;
   var $251=$R;
   var $252=(($251+24)|0);
   HEAP32[(($252)>>2)]=$250;
   var $253=$tp;
   var $254=(($253+16)|0);
   var $255=(($254)|0);
   var $256=HEAP32[(($255)>>2)];
   $C0=$256;
   var $257=(($256)|(0))!=0;
   if ($257) { label = 47; break; } else { label = 51; break; }
  case 47: 
   var $259=$C0;
   var $260=$259;
   var $261=$1;
   var $262=(($261+16)|0);
   var $263=HEAP32[(($262)>>2)];
   var $264=(($260)>>>(0)) >= (($263)>>>(0));
   var $265=(($264)&(1));
   var $266=($265);
   var $267=(($266)|(0))!=0;
   if ($267) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $269=$C0;
   var $270=$R;
   var $271=(($270+16)|0);
   var $272=(($271)|0);
   HEAP32[(($272)>>2)]=$269;
   var $273=$R;
   var $274=$C0;
   var $275=(($274+24)|0);
   HEAP32[(($275)>>2)]=$273;
   label = 50; break;
  case 49: 
   _abort();
   throw "Reached an unreachable!";
  case 50: 
   label = 51; break;
  case 51: 
   var $279=$tp;
   var $280=(($279+16)|0);
   var $281=(($280+4)|0);
   var $282=HEAP32[(($281)>>2)];
   $C1=$282;
   var $283=(($282)|(0))!=0;
   if ($283) { label = 52; break; } else { label = 56; break; }
  case 52: 
   var $285=$C1;
   var $286=$285;
   var $287=$1;
   var $288=(($287+16)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($286)>>>(0)) >= (($289)>>>(0));
   var $291=(($290)&(1));
   var $292=($291);
   var $293=(($292)|(0))!=0;
   if ($293) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $295=$C1;
   var $296=$R;
   var $297=(($296+16)|0);
   var $298=(($297+4)|0);
   HEAP32[(($298)>>2)]=$295;
   var $299=$R;
   var $300=$C1;
   var $301=(($300+24)|0);
   HEAP32[(($301)>>2)]=$299;
   label = 55; break;
  case 54: 
   _abort();
   throw "Reached an unreachable!";
  case 55: 
   label = 56; break;
  case 56: 
   label = 58; break;
  case 57: 
   _abort();
   throw "Reached an unreachable!";
  case 58: 
   label = 59; break;
  case 59: 
   label = 60; break;
  case 60: 
   label = 61; break;
  case 61: 
   var $310=$psize;
   var $311=$310 >>> 8;
   $X=$311;
   var $312=$X;
   var $313=(($312)|(0))==0;
   if ($313) { label = 62; break; } else { label = 63; break; }
  case 62: 
   $I=0;
   label = 67; break;
  case 63: 
   var $316=$X;
   var $317=(($316)>>>(0)) > 65535;
   if ($317) { label = 64; break; } else { label = 65; break; }
  case 64: 
   $I=31;
   label = 66; break;
  case 65: 
   var $320=$X;
   $Y=$320;
   var $321=$Y;
   var $322=((($321)-(256))|0);
   var $323=$322 >>> 16;
   var $324=$323 & 8;
   $N=$324;
   var $325=$N;
   var $326=$Y;
   var $327=$326 << $325;
   $Y=$327;
   var $328=((($327)-(4096))|0);
   var $329=$328 >>> 16;
   var $330=$329 & 4;
   $K=$330;
   var $331=$K;
   var $332=$N;
   var $333=((($332)+($331))|0);
   $N=$333;
   var $334=$K;
   var $335=$Y;
   var $336=$335 << $334;
   $Y=$336;
   var $337=((($336)-(16384))|0);
   var $338=$337 >>> 16;
   var $339=$338 & 2;
   $K=$339;
   var $340=$N;
   var $341=((($340)+($339))|0);
   $N=$341;
   var $342=$N;
   var $343=(((14)-($342))|0);
   var $344=$K;
   var $345=$Y;
   var $346=$345 << $344;
   $Y=$346;
   var $347=$346 >>> 15;
   var $348=((($343)+($347))|0);
   $K=$348;
   var $349=$K;
   var $350=$349 << 1;
   var $351=$psize;
   var $352=$K;
   var $353=((($352)+(7))|0);
   var $354=$351 >>> (($353)>>>(0));
   var $355=$354 & 1;
   var $356=((($350)+($355))|0);
   $I=$356;
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $359=$I;
   var $360=$1;
   var $361=(($360+304)|0);
   var $362=(($361+($359<<2))|0);
   $H1=$362;
   var $363=$I;
   var $364=$tp;
   var $365=(($364+28)|0);
   HEAP32[(($365)>>2)]=$363;
   var $366=$tp;
   var $367=(($366+16)|0);
   var $368=(($367+4)|0);
   HEAP32[(($368)>>2)]=0;
   var $369=$tp;
   var $370=(($369+16)|0);
   var $371=(($370)|0);
   HEAP32[(($371)>>2)]=0;
   var $372=$1;
   var $373=(($372+4)|0);
   var $374=HEAP32[(($373)>>2)];
   var $375=$I;
   var $376=1 << $375;
   var $377=$374 & $376;
   var $378=(($377)|(0))!=0;
   if ($378) { label = 69; break; } else { label = 68; break; }
  case 68: 
   var $380=$I;
   var $381=1 << $380;
   var $382=$1;
   var $383=(($382+4)|0);
   var $384=HEAP32[(($383)>>2)];
   var $385=$384 | $381;
   HEAP32[(($383)>>2)]=$385;
   var $386=$tp;
   var $387=$H1;
   HEAP32[(($387)>>2)]=$386;
   var $388=$H1;
   var $389=$388;
   var $390=$tp;
   var $391=(($390+24)|0);
   HEAP32[(($391)>>2)]=$389;
   var $392=$tp;
   var $393=$tp;
   var $394=(($393+12)|0);
   HEAP32[(($394)>>2)]=$392;
   var $395=$tp;
   var $396=(($395+8)|0);
   HEAP32[(($396)>>2)]=$392;
   label = 87; break;
  case 69: 
   var $398=$H1;
   var $399=HEAP32[(($398)>>2)];
   $T=$399;
   var $400=$psize;
   var $401=$I;
   var $402=(($401)|(0))==31;
   if ($402) { label = 70; break; } else { label = 71; break; }
  case 70: 
   var $411 = 0;label = 72; break;
  case 71: 
   var $405=$I;
   var $406=$405 >>> 1;
   var $407=((($406)+(8))|0);
   var $408=((($407)-(2))|0);
   var $409=(((31)-($408))|0);
   var $411 = $409;label = 72; break;
  case 72: 
   var $411;
   var $412=$400 << $411;
   $K2=$412;
   label = 73; break;
  case 73: 
   var $414=$T;
   var $415=(($414+4)|0);
   var $416=HEAP32[(($415)>>2)];
   var $417=$416 & -8;
   var $418=$psize;
   var $419=(($417)|(0))!=(($418)|(0));
   if ($419) { label = 74; break; } else { label = 80; break; }
  case 74: 
   var $421=$K2;
   var $422=$421 >>> 31;
   var $423=$422 & 1;
   var $424=$T;
   var $425=(($424+16)|0);
   var $426=(($425+($423<<2))|0);
   $C=$426;
   var $427=$K2;
   var $428=$427 << 1;
   $K2=$428;
   var $429=$C;
   var $430=HEAP32[(($429)>>2)];
   var $431=(($430)|(0))!=0;
   if ($431) { label = 75; break; } else { label = 76; break; }
  case 75: 
   var $433=$C;
   var $434=HEAP32[(($433)>>2)];
   $T=$434;
   label = 79; break;
  case 76: 
   var $436=$C;
   var $437=$436;
   var $438=$1;
   var $439=(($438+16)|0);
   var $440=HEAP32[(($439)>>2)];
   var $441=(($437)>>>(0)) >= (($440)>>>(0));
   var $442=(($441)&(1));
   var $443=($442);
   var $444=(($443)|(0))!=0;
   if ($444) { label = 77; break; } else { label = 78; break; }
  case 77: 
   var $446=$tp;
   var $447=$C;
   HEAP32[(($447)>>2)]=$446;
   var $448=$T;
   var $449=$tp;
   var $450=(($449+24)|0);
   HEAP32[(($450)>>2)]=$448;
   var $451=$tp;
   var $452=$tp;
   var $453=(($452+12)|0);
   HEAP32[(($453)>>2)]=$451;
   var $454=$tp;
   var $455=(($454+8)|0);
   HEAP32[(($455)>>2)]=$451;
   label = 86; break;
  case 78: 
   _abort();
   throw "Reached an unreachable!";
  case 79: 
   label = 85; break;
  case 80: 
   var $459=$T;
   var $460=(($459+8)|0);
   var $461=HEAP32[(($460)>>2)];
   $F3=$461;
   var $462=$T;
   var $463=$462;
   var $464=$1;
   var $465=(($464+16)|0);
   var $466=HEAP32[(($465)>>2)];
   var $467=(($463)>>>(0)) >= (($466)>>>(0));
   if ($467) { label = 81; break; } else { var $476 = 0;label = 82; break; }
  case 81: 
   var $469=$F3;
   var $470=$469;
   var $471=$1;
   var $472=(($471+16)|0);
   var $473=HEAP32[(($472)>>2)];
   var $474=(($470)>>>(0)) >= (($473)>>>(0));
   var $476 = $474;label = 82; break;
  case 82: 
   var $476;
   var $477=(($476)&(1));
   var $478=($477);
   var $479=(($478)|(0))!=0;
   if ($479) { label = 83; break; } else { label = 84; break; }
  case 83: 
   var $481=$tp;
   var $482=$F3;
   var $483=(($482+12)|0);
   HEAP32[(($483)>>2)]=$481;
   var $484=$T;
   var $485=(($484+8)|0);
   HEAP32[(($485)>>2)]=$481;
   var $486=$F3;
   var $487=$tp;
   var $488=(($487+8)|0);
   HEAP32[(($488)>>2)]=$486;
   var $489=$T;
   var $490=$tp;
   var $491=(($490+12)|0);
   HEAP32[(($491)>>2)]=$489;
   var $492=$tp;
   var $493=(($492+24)|0);
   HEAP32[(($493)>>2)]=0;
   label = 86; break;
  case 84: 
   _abort();
   throw "Reached an unreachable!";
  case 85: 
   label = 73; break;
  case 86: 
   label = 87; break;
  case 87: 
   label = 88; break;
  case 88: 
   label = 89; break;
  case 89: 
   var $500=$sp;
   $pred=$500;
   var $501=$next;
   $sp=$501;
   label = 2; break;
  case 90: 
   var $503=$nsegs;
   var $504=(($503)>>>(0)) > 4294967295;
   if ($504) { label = 91; break; } else { label = 92; break; }
  case 91: 
   var $506=$nsegs;
   var $509 = $506;label = 93; break;
  case 92: 
   var $509 = -1;label = 93; break;
  case 93: 
   var $509;
   var $510=$1;
   var $511=(($510+32)|0);
   HEAP32[(($511)>>2)]=$509;
   var $512=$released;
   return $512;
  default: assert(0, "bad label: " + label);
 }
}
function _try_realloc_chunk($m, $p, $nb, $can_move) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $newp;
   var $oldsize;
   var $next;
   var $rsize;
   var $r;
   var $newsize;
   var $newtopsize;
   var $newtop;
   var $dvs;
   var $dsize;
   var $r1;
   var $n;
   var $newsize2;
   var $nextsize;
   var $rsize3;
   var $F;
   var $B;
   var $I;
   var $TP;
   var $XP;
   var $R;
   var $F4;
   var $RP;
   var $CP;
   var $H;
   var $C0;
   var $C1;
   var $newsize5;
   var $r6;
   $1=$m;
   $2=$p;
   $3=$nb;
   $4=$can_move;
   $newp=0;
   var $5=$2;
   var $6=(($5+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & -8;
   $oldsize=$8;
   var $9=$2;
   var $10=$9;
   var $11=$oldsize;
   var $12=(($10+$11)|0);
   var $13=$12;
   $next=$13;
   var $14=$2;
   var $15=$14;
   var $16=$1;
   var $17=(($16+16)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($15)>>>(0)) >= (($18)>>>(0));
   if ($19) { label = 2; break; } else { var $39 = 0;label = 5; break; }
  case 2: 
   var $21=$2;
   var $22=(($21+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$23 & 3;
   var $25=(($24)|(0))!=1;
   if ($25) { label = 3; break; } else { var $39 = 0;label = 5; break; }
  case 3: 
   var $27=$2;
   var $28=$27;
   var $29=$next;
   var $30=$29;
   var $31=(($28)>>>(0)) < (($30)>>>(0));
   if ($31) { label = 4; break; } else { var $39 = 0;label = 5; break; }
  case 4: 
   var $33=$next;
   var $34=(($33+4)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$35 & 1;
   var $37=(($36)|(0))!=0;
   var $39 = $37;label = 5; break;
  case 5: 
   var $39;
   var $40=(($39)&(1));
   var $41=($40);
   var $42=(($41)|(0))!=0;
   if ($42) { label = 6; break; } else { label = 103; break; }
  case 6: 
   var $44=$2;
   var $45=(($44+4)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$46 & 3;
   var $48=(($47)|(0))==0;
   if ($48) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $50=$1;
   var $51=$2;
   var $52=$3;
   var $53=$4;
   var $54=_mmap_resize($50, $51, $52, $53);
   $newp=$54;
   label = 102; break;
  case 8: 
   var $56=$oldsize;
   var $57=$3;
   var $58=(($56)>>>(0)) >= (($57)>>>(0));
   if ($58) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $60=$oldsize;
   var $61=$3;
   var $62=((($60)-($61))|0);
   $rsize=$62;
   var $63=$rsize;
   var $64=(($63)>>>(0)) >= 16;
   if ($64) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $66=$2;
   var $67=$66;
   var $68=$3;
   var $69=(($67+$68)|0);
   var $70=$69;
   $r=$70;
   var $71=$2;
   var $72=(($71+4)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$73 & 1;
   var $75=$3;
   var $76=$74 | $75;
   var $77=$76 | 2;
   var $78=$2;
   var $79=(($78+4)|0);
   HEAP32[(($79)>>2)]=$77;
   var $80=$2;
   var $81=$80;
   var $82=$3;
   var $83=(($81+$82)|0);
   var $84=$83;
   var $85=(($84+4)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=$86 | 1;
   HEAP32[(($85)>>2)]=$87;
   var $88=$r;
   var $89=(($88+4)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=$90 & 1;
   var $92=$rsize;
   var $93=$91 | $92;
   var $94=$93 | 2;
   var $95=$r;
   var $96=(($95+4)|0);
   HEAP32[(($96)>>2)]=$94;
   var $97=$r;
   var $98=$97;
   var $99=$rsize;
   var $100=(($98+$99)|0);
   var $101=$100;
   var $102=(($101+4)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=$103 | 1;
   HEAP32[(($102)>>2)]=$104;
   var $105=$1;
   var $106=$r;
   var $107=$rsize;
   _dispose_chunk($105, $106, $107);
   label = 11; break;
  case 11: 
   var $109=$2;
   $newp=$109;
   label = 101; break;
  case 12: 
   var $111=$next;
   var $112=$1;
   var $113=(($112+24)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($111)|(0))==(($114)|(0));
   if ($115) { label = 13; break; } else { label = 16; break; }
  case 13: 
   var $117=$oldsize;
   var $118=$1;
   var $119=(($118+12)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=((($117)+($120))|0);
   var $122=$3;
   var $123=(($121)>>>(0)) > (($122)>>>(0));
   if ($123) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $125=$oldsize;
   var $126=$1;
   var $127=(($126+12)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=((($125)+($128))|0);
   $newsize=$129;
   var $130=$newsize;
   var $131=$3;
   var $132=((($130)-($131))|0);
   $newtopsize=$132;
   var $133=$2;
   var $134=$133;
   var $135=$3;
   var $136=(($134+$135)|0);
   var $137=$136;
   $newtop=$137;
   var $138=$2;
   var $139=(($138+4)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=$140 & 1;
   var $142=$3;
   var $143=$141 | $142;
   var $144=$143 | 2;
   var $145=$2;
   var $146=(($145+4)|0);
   HEAP32[(($146)>>2)]=$144;
   var $147=$2;
   var $148=$147;
   var $149=$3;
   var $150=(($148+$149)|0);
   var $151=$150;
   var $152=(($151+4)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=$153 | 1;
   HEAP32[(($152)>>2)]=$154;
   var $155=$newtopsize;
   var $156=$155 | 1;
   var $157=$newtop;
   var $158=(($157+4)|0);
   HEAP32[(($158)>>2)]=$156;
   var $159=$newtop;
   var $160=$1;
   var $161=(($160+24)|0);
   HEAP32[(($161)>>2)]=$159;
   var $162=$newtopsize;
   var $163=$1;
   var $164=(($163+12)|0);
   HEAP32[(($164)>>2)]=$162;
   var $165=$2;
   $newp=$165;
   label = 15; break;
  case 15: 
   label = 100; break;
  case 16: 
   var $168=$next;
   var $169=$1;
   var $170=(($169+20)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=(($168)|(0))==(($171)|(0));
   if ($172) { label = 17; break; } else { label = 23; break; }
  case 17: 
   var $174=$1;
   var $175=(($174+8)|0);
   var $176=HEAP32[(($175)>>2)];
   $dvs=$176;
   var $177=$oldsize;
   var $178=$dvs;
   var $179=((($177)+($178))|0);
   var $180=$3;
   var $181=(($179)>>>(0)) >= (($180)>>>(0));
   if ($181) { label = 18; break; } else { label = 22; break; }
  case 18: 
   var $183=$oldsize;
   var $184=$dvs;
   var $185=((($183)+($184))|0);
   var $186=$3;
   var $187=((($185)-($186))|0);
   $dsize=$187;
   var $188=$dsize;
   var $189=(($188)>>>(0)) >= 16;
   if ($189) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $191=$2;
   var $192=$191;
   var $193=$3;
   var $194=(($192+$193)|0);
   var $195=$194;
   $r1=$195;
   var $196=$r1;
   var $197=$196;
   var $198=$dsize;
   var $199=(($197+$198)|0);
   var $200=$199;
   $n=$200;
   var $201=$2;
   var $202=(($201+4)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=$203 & 1;
   var $205=$3;
   var $206=$204 | $205;
   var $207=$206 | 2;
   var $208=$2;
   var $209=(($208+4)|0);
   HEAP32[(($209)>>2)]=$207;
   var $210=$2;
   var $211=$210;
   var $212=$3;
   var $213=(($211+$212)|0);
   var $214=$213;
   var $215=(($214+4)|0);
   var $216=HEAP32[(($215)>>2)];
   var $217=$216 | 1;
   HEAP32[(($215)>>2)]=$217;
   var $218=$dsize;
   var $219=$218 | 1;
   var $220=$r1;
   var $221=(($220+4)|0);
   HEAP32[(($221)>>2)]=$219;
   var $222=$dsize;
   var $223=$r1;
   var $224=$223;
   var $225=$dsize;
   var $226=(($224+$225)|0);
   var $227=$226;
   var $228=(($227)|0);
   HEAP32[(($228)>>2)]=$222;
   var $229=$n;
   var $230=(($229+4)|0);
   var $231=HEAP32[(($230)>>2)];
   var $232=$231 & -2;
   HEAP32[(($230)>>2)]=$232;
   var $233=$dsize;
   var $234=$1;
   var $235=(($234+8)|0);
   HEAP32[(($235)>>2)]=$233;
   var $236=$r1;
   var $237=$1;
   var $238=(($237+20)|0);
   HEAP32[(($238)>>2)]=$236;
   label = 21; break;
  case 20: 
   var $240=$oldsize;
   var $241=$dvs;
   var $242=((($240)+($241))|0);
   $newsize2=$242;
   var $243=$2;
   var $244=(($243+4)|0);
   var $245=HEAP32[(($244)>>2)];
   var $246=$245 & 1;
   var $247=$newsize2;
   var $248=$246 | $247;
   var $249=$248 | 2;
   var $250=$2;
   var $251=(($250+4)|0);
   HEAP32[(($251)>>2)]=$249;
   var $252=$2;
   var $253=$252;
   var $254=$newsize2;
   var $255=(($253+$254)|0);
   var $256=$255;
   var $257=(($256+4)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=$258 | 1;
   HEAP32[(($257)>>2)]=$259;
   var $260=$1;
   var $261=(($260+8)|0);
   HEAP32[(($261)>>2)]=0;
   var $262=$1;
   var $263=(($262+20)|0);
   HEAP32[(($263)>>2)]=0;
   label = 21; break;
  case 21: 
   var $265=$2;
   $newp=$265;
   label = 22; break;
  case 22: 
   label = 99; break;
  case 23: 
   var $268=$next;
   var $269=(($268+4)|0);
   var $270=HEAP32[(($269)>>2)];
   var $271=$270 & 2;
   var $272=(($271)|(0))!=0;
   if ($272) { label = 98; break; } else { label = 24; break; }
  case 24: 
   var $274=$next;
   var $275=(($274+4)|0);
   var $276=HEAP32[(($275)>>2)];
   var $277=$276 & -8;
   $nextsize=$277;
   var $278=$oldsize;
   var $279=$nextsize;
   var $280=((($278)+($279))|0);
   var $281=$3;
   var $282=(($280)>>>(0)) >= (($281)>>>(0));
   if ($282) { label = 25; break; } else { label = 97; break; }
  case 25: 
   var $284=$oldsize;
   var $285=$nextsize;
   var $286=((($284)+($285))|0);
   var $287=$3;
   var $288=((($286)-($287))|0);
   $rsize3=$288;
   var $289=$nextsize;
   var $290=$289 >>> 3;
   var $291=(($290)>>>(0)) < 32;
   if ($291) { label = 26; break; } else { label = 44; break; }
  case 26: 
   var $293=$next;
   var $294=(($293+8)|0);
   var $295=HEAP32[(($294)>>2)];
   $F=$295;
   var $296=$next;
   var $297=(($296+12)|0);
   var $298=HEAP32[(($297)>>2)];
   $B=$298;
   var $299=$nextsize;
   var $300=$299 >>> 3;
   $I=$300;
   var $301=$F;
   var $302=$I;
   var $303=$302 << 1;
   var $304=$1;
   var $305=(($304+40)|0);
   var $306=(($305+($303<<2))|0);
   var $307=$306;
   var $308=$307;
   var $309=(($301)|(0))==(($308)|(0));
   if ($309) { var $326 = 1;label = 30; break; } else { label = 27; break; }
  case 27: 
   var $311=$F;
   var $312=$311;
   var $313=$1;
   var $314=(($313+16)|0);
   var $315=HEAP32[(($314)>>2)];
   var $316=(($312)>>>(0)) >= (($315)>>>(0));
   if ($316) { label = 28; break; } else { var $324 = 0;label = 29; break; }
  case 28: 
   var $318=$F;
   var $319=(($318+12)|0);
   var $320=HEAP32[(($319)>>2)];
   var $321=$next;
   var $322=(($320)|(0))==(($321)|(0));
   var $324 = $322;label = 29; break;
  case 29: 
   var $324;
   var $326 = $324;label = 30; break;
  case 30: 
   var $326;
   var $327=(($326)&(1));
   var $328=($327);
   var $329=(($328)|(0))!=0;
   if ($329) { label = 31; break; } else { label = 42; break; }
  case 31: 
   var $331=$B;
   var $332=$F;
   var $333=(($331)|(0))==(($332)|(0));
   if ($333) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $335=$I;
   var $336=1 << $335;
   var $337=$336 ^ -1;
   var $338=$1;
   var $339=(($338)|0);
   var $340=HEAP32[(($339)>>2)];
   var $341=$340 & $337;
   HEAP32[(($339)>>2)]=$341;
   label = 41; break;
  case 33: 
   var $343=$B;
   var $344=$I;
   var $345=$344 << 1;
   var $346=$1;
   var $347=(($346+40)|0);
   var $348=(($347+($345<<2))|0);
   var $349=$348;
   var $350=$349;
   var $351=(($343)|(0))==(($350)|(0));
   if ($351) { var $368 = 1;label = 37; break; } else { label = 34; break; }
  case 34: 
   var $353=$B;
   var $354=$353;
   var $355=$1;
   var $356=(($355+16)|0);
   var $357=HEAP32[(($356)>>2)];
   var $358=(($354)>>>(0)) >= (($357)>>>(0));
   if ($358) { label = 35; break; } else { var $366 = 0;label = 36; break; }
  case 35: 
   var $360=$B;
   var $361=(($360+8)|0);
   var $362=HEAP32[(($361)>>2)];
   var $363=$next;
   var $364=(($362)|(0))==(($363)|(0));
   var $366 = $364;label = 36; break;
  case 36: 
   var $366;
   var $368 = $366;label = 37; break;
  case 37: 
   var $368;
   var $369=(($368)&(1));
   var $370=($369);
   var $371=(($370)|(0))!=0;
   if ($371) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $373=$B;
   var $374=$F;
   var $375=(($374+12)|0);
   HEAP32[(($375)>>2)]=$373;
   var $376=$F;
   var $377=$B;
   var $378=(($377+8)|0);
   HEAP32[(($378)>>2)]=$376;
   label = 40; break;
  case 39: 
   _abort();
   throw "Reached an unreachable!";
  case 40: 
   label = 41; break;
  case 41: 
   label = 43; break;
  case 42: 
   _abort();
   throw "Reached an unreachable!";
  case 43: 
   label = 93; break;
  case 44: 
   var $385=$next;
   var $386=$385;
   $TP=$386;
   var $387=$TP;
   var $388=(($387+24)|0);
   var $389=HEAP32[(($388)>>2)];
   $XP=$389;
   var $390=$TP;
   var $391=(($390+12)|0);
   var $392=HEAP32[(($391)>>2)];
   var $393=$TP;
   var $394=(($392)|(0))!=(($393)|(0));
   if ($394) { label = 45; break; } else { label = 52; break; }
  case 45: 
   var $396=$TP;
   var $397=(($396+8)|0);
   var $398=HEAP32[(($397)>>2)];
   $F4=$398;
   var $399=$TP;
   var $400=(($399+12)|0);
   var $401=HEAP32[(($400)>>2)];
   $R=$401;
   var $402=$F4;
   var $403=$402;
   var $404=$1;
   var $405=(($404+16)|0);
   var $406=HEAP32[(($405)>>2)];
   var $407=(($403)>>>(0)) >= (($406)>>>(0));
   if ($407) { label = 46; break; } else { var $421 = 0;label = 48; break; }
  case 46: 
   var $409=$F4;
   var $410=(($409+12)|0);
   var $411=HEAP32[(($410)>>2)];
   var $412=$TP;
   var $413=(($411)|(0))==(($412)|(0));
   if ($413) { label = 47; break; } else { var $421 = 0;label = 48; break; }
  case 47: 
   var $415=$R;
   var $416=(($415+8)|0);
   var $417=HEAP32[(($416)>>2)];
   var $418=$TP;
   var $419=(($417)|(0))==(($418)|(0));
   var $421 = $419;label = 48; break;
  case 48: 
   var $421;
   var $422=(($421)&(1));
   var $423=($422);
   var $424=(($423)|(0))!=0;
   if ($424) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $426=$R;
   var $427=$F4;
   var $428=(($427+12)|0);
   HEAP32[(($428)>>2)]=$426;
   var $429=$F4;
   var $430=$R;
   var $431=(($430+8)|0);
   HEAP32[(($431)>>2)]=$429;
   label = 51; break;
  case 50: 
   _abort();
   throw "Reached an unreachable!";
  case 51: 
   label = 64; break;
  case 52: 
   var $435=$TP;
   var $436=(($435+16)|0);
   var $437=(($436+4)|0);
   $RP=$437;
   var $438=HEAP32[(($437)>>2)];
   $R=$438;
   var $439=(($438)|(0))!=0;
   if ($439) { label = 54; break; } else { label = 53; break; }
  case 53: 
   var $441=$TP;
   var $442=(($441+16)|0);
   var $443=(($442)|0);
   $RP=$443;
   var $444=HEAP32[(($443)>>2)];
   $R=$444;
   var $445=(($444)|(0))!=0;
   if ($445) { label = 54; break; } else { label = 63; break; }
  case 54: 
   label = 55; break;
  case 55: 
   var $448=$R;
   var $449=(($448+16)|0);
   var $450=(($449+4)|0);
   $CP=$450;
   var $451=HEAP32[(($450)>>2)];
   var $452=(($451)|(0))!=0;
   if ($452) { var $460 = 1;label = 57; break; } else { label = 56; break; }
  case 56: 
   var $454=$R;
   var $455=(($454+16)|0);
   var $456=(($455)|0);
   $CP=$456;
   var $457=HEAP32[(($456)>>2)];
   var $458=(($457)|(0))!=0;
   var $460 = $458;label = 57; break;
  case 57: 
   var $460;
   if ($460) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $462=$CP;
   $RP=$462;
   var $463=HEAP32[(($462)>>2)];
   $R=$463;
   label = 55; break;
  case 59: 
   var $465=$RP;
   var $466=$465;
   var $467=$1;
   var $468=(($467+16)|0);
   var $469=HEAP32[(($468)>>2)];
   var $470=(($466)>>>(0)) >= (($469)>>>(0));
   var $471=(($470)&(1));
   var $472=($471);
   var $473=(($472)|(0))!=0;
   if ($473) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $475=$RP;
   HEAP32[(($475)>>2)]=0;
   label = 62; break;
  case 61: 
   _abort();
   throw "Reached an unreachable!";
  case 62: 
   label = 63; break;
  case 63: 
   label = 64; break;
  case 64: 
   var $480=$XP;
   var $481=(($480)|(0))!=0;
   if ($481) { label = 65; break; } else { label = 92; break; }
  case 65: 
   var $483=$TP;
   var $484=(($483+28)|0);
   var $485=HEAP32[(($484)>>2)];
   var $486=$1;
   var $487=(($486+304)|0);
   var $488=(($487+($485<<2))|0);
   $H=$488;
   var $489=$TP;
   var $490=$H;
   var $491=HEAP32[(($490)>>2)];
   var $492=(($489)|(0))==(($491)|(0));
   if ($492) { label = 66; break; } else { label = 69; break; }
  case 66: 
   var $494=$R;
   var $495=$H;
   HEAP32[(($495)>>2)]=$494;
   var $496=(($494)|(0))==0;
   if ($496) { label = 67; break; } else { label = 68; break; }
  case 67: 
   var $498=$TP;
   var $499=(($498+28)|0);
   var $500=HEAP32[(($499)>>2)];
   var $501=1 << $500;
   var $502=$501 ^ -1;
   var $503=$1;
   var $504=(($503+4)|0);
   var $505=HEAP32[(($504)>>2)];
   var $506=$505 & $502;
   HEAP32[(($504)>>2)]=$506;
   label = 68; break;
  case 68: 
   label = 76; break;
  case 69: 
   var $509=$XP;
   var $510=$509;
   var $511=$1;
   var $512=(($511+16)|0);
   var $513=HEAP32[(($512)>>2)];
   var $514=(($510)>>>(0)) >= (($513)>>>(0));
   var $515=(($514)&(1));
   var $516=($515);
   var $517=(($516)|(0))!=0;
   if ($517) { label = 70; break; } else { label = 74; break; }
  case 70: 
   var $519=$XP;
   var $520=(($519+16)|0);
   var $521=(($520)|0);
   var $522=HEAP32[(($521)>>2)];
   var $523=$TP;
   var $524=(($522)|(0))==(($523)|(0));
   if ($524) { label = 71; break; } else { label = 72; break; }
  case 71: 
   var $526=$R;
   var $527=$XP;
   var $528=(($527+16)|0);
   var $529=(($528)|0);
   HEAP32[(($529)>>2)]=$526;
   label = 73; break;
  case 72: 
   var $531=$R;
   var $532=$XP;
   var $533=(($532+16)|0);
   var $534=(($533+4)|0);
   HEAP32[(($534)>>2)]=$531;
   label = 73; break;
  case 73: 
   label = 75; break;
  case 74: 
   _abort();
   throw "Reached an unreachable!";
  case 75: 
   label = 76; break;
  case 76: 
   var $539=$R;
   var $540=(($539)|(0))!=0;
   if ($540) { label = 77; break; } else { label = 91; break; }
  case 77: 
   var $542=$R;
   var $543=$542;
   var $544=$1;
   var $545=(($544+16)|0);
   var $546=HEAP32[(($545)>>2)];
   var $547=(($543)>>>(0)) >= (($546)>>>(0));
   var $548=(($547)&(1));
   var $549=($548);
   var $550=(($549)|(0))!=0;
   if ($550) { label = 78; break; } else { label = 89; break; }
  case 78: 
   var $552=$XP;
   var $553=$R;
   var $554=(($553+24)|0);
   HEAP32[(($554)>>2)]=$552;
   var $555=$TP;
   var $556=(($555+16)|0);
   var $557=(($556)|0);
   var $558=HEAP32[(($557)>>2)];
   $C0=$558;
   var $559=(($558)|(0))!=0;
   if ($559) { label = 79; break; } else { label = 83; break; }
  case 79: 
   var $561=$C0;
   var $562=$561;
   var $563=$1;
   var $564=(($563+16)|0);
   var $565=HEAP32[(($564)>>2)];
   var $566=(($562)>>>(0)) >= (($565)>>>(0));
   var $567=(($566)&(1));
   var $568=($567);
   var $569=(($568)|(0))!=0;
   if ($569) { label = 80; break; } else { label = 81; break; }
  case 80: 
   var $571=$C0;
   var $572=$R;
   var $573=(($572+16)|0);
   var $574=(($573)|0);
   HEAP32[(($574)>>2)]=$571;
   var $575=$R;
   var $576=$C0;
   var $577=(($576+24)|0);
   HEAP32[(($577)>>2)]=$575;
   label = 82; break;
  case 81: 
   _abort();
   throw "Reached an unreachable!";
  case 82: 
   label = 83; break;
  case 83: 
   var $581=$TP;
   var $582=(($581+16)|0);
   var $583=(($582+4)|0);
   var $584=HEAP32[(($583)>>2)];
   $C1=$584;
   var $585=(($584)|(0))!=0;
   if ($585) { label = 84; break; } else { label = 88; break; }
  case 84: 
   var $587=$C1;
   var $588=$587;
   var $589=$1;
   var $590=(($589+16)|0);
   var $591=HEAP32[(($590)>>2)];
   var $592=(($588)>>>(0)) >= (($591)>>>(0));
   var $593=(($592)&(1));
   var $594=($593);
   var $595=(($594)|(0))!=0;
   if ($595) { label = 85; break; } else { label = 86; break; }
  case 85: 
   var $597=$C1;
   var $598=$R;
   var $599=(($598+16)|0);
   var $600=(($599+4)|0);
   HEAP32[(($600)>>2)]=$597;
   var $601=$R;
   var $602=$C1;
   var $603=(($602+24)|0);
   HEAP32[(($603)>>2)]=$601;
   label = 87; break;
  case 86: 
   _abort();
   throw "Reached an unreachable!";
  case 87: 
   label = 88; break;
  case 88: 
   label = 90; break;
  case 89: 
   _abort();
   throw "Reached an unreachable!";
  case 90: 
   label = 91; break;
  case 91: 
   label = 92; break;
  case 92: 
   label = 93; break;
  case 93: 
   var $612=$rsize3;
   var $613=(($612)>>>(0)) < 16;
   if ($613) { label = 94; break; } else { label = 95; break; }
  case 94: 
   var $615=$oldsize;
   var $616=$nextsize;
   var $617=((($615)+($616))|0);
   $newsize5=$617;
   var $618=$2;
   var $619=(($618+4)|0);
   var $620=HEAP32[(($619)>>2)];
   var $621=$620 & 1;
   var $622=$newsize5;
   var $623=$621 | $622;
   var $624=$623 | 2;
   var $625=$2;
   var $626=(($625+4)|0);
   HEAP32[(($626)>>2)]=$624;
   var $627=$2;
   var $628=$627;
   var $629=$newsize5;
   var $630=(($628+$629)|0);
   var $631=$630;
   var $632=(($631+4)|0);
   var $633=HEAP32[(($632)>>2)];
   var $634=$633 | 1;
   HEAP32[(($632)>>2)]=$634;
   label = 96; break;
  case 95: 
   var $636=$2;
   var $637=$636;
   var $638=$3;
   var $639=(($637+$638)|0);
   var $640=$639;
   $r6=$640;
   var $641=$2;
   var $642=(($641+4)|0);
   var $643=HEAP32[(($642)>>2)];
   var $644=$643 & 1;
   var $645=$3;
   var $646=$644 | $645;
   var $647=$646 | 2;
   var $648=$2;
   var $649=(($648+4)|0);
   HEAP32[(($649)>>2)]=$647;
   var $650=$2;
   var $651=$650;
   var $652=$3;
   var $653=(($651+$652)|0);
   var $654=$653;
   var $655=(($654+4)|0);
   var $656=HEAP32[(($655)>>2)];
   var $657=$656 | 1;
   HEAP32[(($655)>>2)]=$657;
   var $658=$r6;
   var $659=(($658+4)|0);
   var $660=HEAP32[(($659)>>2)];
   var $661=$660 & 1;
   var $662=$rsize3;
   var $663=$661 | $662;
   var $664=$663 | 2;
   var $665=$r6;
   var $666=(($665+4)|0);
   HEAP32[(($666)>>2)]=$664;
   var $667=$r6;
   var $668=$667;
   var $669=$rsize3;
   var $670=(($668+$669)|0);
   var $671=$670;
   var $672=(($671+4)|0);
   var $673=HEAP32[(($672)>>2)];
   var $674=$673 | 1;
   HEAP32[(($672)>>2)]=$674;
   var $675=$1;
   var $676=$r6;
   var $677=$rsize3;
   _dispose_chunk($675, $676, $677);
   label = 96; break;
  case 96: 
   var $679=$2;
   $newp=$679;
   label = 97; break;
  case 97: 
   label = 98; break;
  case 98: 
   label = 99; break;
  case 99: 
   label = 100; break;
  case 100: 
   label = 101; break;
  case 101: 
   label = 102; break;
  case 102: 
   label = 104; break;
  case 103: 
   _abort();
   throw "Reached an unreachable!";
  case 104: 
   var $688=$newp;
   return $688;
  default: assert(0, "bad label: " + label);
 }
}
function _init_mparams() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $magic;
   var $psize;
   var $gsize;
   var $1=HEAP32[((((80)|0))>>2)];
   var $2=(($1)|(0))==0;
   if ($2) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $4=_sysconf(8);
   $psize=$4;
   var $5=$psize;
   $gsize=$5;
   var $6=$gsize;
   var $7=$gsize;
   var $8=((($7)-(1))|0);
   var $9=$6 & $8;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $12=$psize;
   var $13=$psize;
   var $14=((($13)-(1))|0);
   var $15=$12 & $14;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _abort();
   throw "Reached an unreachable!";
  case 5: 
   var $19=$gsize;
   HEAP32[((((88)|0))>>2)]=$19;
   var $20=$psize;
   HEAP32[((((84)|0))>>2)]=$20;
   HEAP32[((((92)|0))>>2)]=-1;
   HEAP32[((((96)|0))>>2)]=2097152;
   HEAP32[((((100)|0))>>2)]=0;
   var $21=HEAP32[((((100)|0))>>2)];
   HEAP32[((((5124)|0))>>2)]=$21;
   var $22=_time(0);
   var $23=$22 ^ 1431655765;
   $magic=$23;
   var $24=$magic;
   var $25=$24 | 8;
   $magic=$25;
   var $26=$magic;
   var $27=$26 & -8;
   $magic=$27;
   var $28=$magic;
   HEAP32[((((80)|0))>>2)]=$28;
   label = 6; break;
  case 6: 
   return 1;
  default: assert(0, "bad label: " + label);
 }
}
function _dispose_chunk($m, $p, $psize) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $next;
   var $prev;
   var $prevsize;
   var $F;
   var $B;
   var $I;
   var $TP;
   var $XP;
   var $R;
   var $F1;
   var $RP;
   var $CP;
   var $H;
   var $C0;
   var $C1;
   var $tsize;
   var $dsize;
   var $nsize;
   var $F2;
   var $B3;
   var $I4;
   var $TP5;
   var $XP6;
   var $R7;
   var $F8;
   var $RP9;
   var $CP10;
   var $H11;
   var $C012;
   var $C113;
   var $I14;
   var $B15;
   var $F16;
   var $TP17;
   var $H18;
   var $I19;
   var $X;
   var $Y;
   var $N;
   var $K;
   var $T;
   var $K20;
   var $C;
   var $F21;
   $1=$m;
   $2=$p;
   $3=$psize;
   var $4=$2;
   var $5=$4;
   var $6=$3;
   var $7=(($5+$6)|0);
   var $8=$7;
   $next=$8;
   var $9=$2;
   var $10=(($9+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11 & 1;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 81; break; } else { label = 2; break; }
  case 2: 
   var $15=$2;
   var $16=(($15)|0);
   var $17=HEAP32[(($16)>>2)];
   $prevsize=$17;
   var $18=$2;
   var $19=(($18+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$20 & 3;
   var $22=(($21)|(0))==0;
   if ($22) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $24=$prevsize;
   var $25=((($24)+(16))|0);
   var $26=$3;
   var $27=((($26)+($25))|0);
   $3=$27;
   label = 200; break;
  case 4: 
   var $29=$2;
   var $30=$29;
   var $31=$prevsize;
   var $32=(((-$31))|0);
   var $33=(($30+$32)|0);
   var $34=$33;
   $prev=$34;
   var $35=$prevsize;
   var $36=$3;
   var $37=((($36)+($35))|0);
   $3=$37;
   var $38=$prev;
   $2=$38;
   var $39=$prev;
   var $40=$39;
   var $41=$1;
   var $42=(($41+16)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($40)>>>(0)) >= (($43)>>>(0));
   var $45=(($44)&(1));
   var $46=($45);
   var $47=(($46)|(0))!=0;
   if ($47) { label = 5; break; } else { label = 79; break; }
  case 5: 
   var $49=$2;
   var $50=$1;
   var $51=(($50+20)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($49)|(0))!=(($52)|(0));
   if ($53) { label = 6; break; } else { label = 75; break; }
  case 6: 
   var $55=$prevsize;
   var $56=$55 >>> 3;
   var $57=(($56)>>>(0)) < 32;
   if ($57) { label = 7; break; } else { label = 25; break; }
  case 7: 
   var $59=$2;
   var $60=(($59+8)|0);
   var $61=HEAP32[(($60)>>2)];
   $F=$61;
   var $62=$2;
   var $63=(($62+12)|0);
   var $64=HEAP32[(($63)>>2)];
   $B=$64;
   var $65=$prevsize;
   var $66=$65 >>> 3;
   $I=$66;
   var $67=$F;
   var $68=$I;
   var $69=$68 << 1;
   var $70=$1;
   var $71=(($70+40)|0);
   var $72=(($71+($69<<2))|0);
   var $73=$72;
   var $74=$73;
   var $75=(($67)|(0))==(($74)|(0));
   if ($75) { var $92 = 1;label = 11; break; } else { label = 8; break; }
  case 8: 
   var $77=$F;
   var $78=$77;
   var $79=$1;
   var $80=(($79+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($78)>>>(0)) >= (($81)>>>(0));
   if ($82) { label = 9; break; } else { var $90 = 0;label = 10; break; }
  case 9: 
   var $84=$F;
   var $85=(($84+12)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=$2;
   var $88=(($86)|(0))==(($87)|(0));
   var $90 = $88;label = 10; break;
  case 10: 
   var $90;
   var $92 = $90;label = 11; break;
  case 11: 
   var $92;
   var $93=(($92)&(1));
   var $94=($93);
   var $95=(($94)|(0))!=0;
   if ($95) { label = 12; break; } else { label = 23; break; }
  case 12: 
   var $97=$B;
   var $98=$F;
   var $99=(($97)|(0))==(($98)|(0));
   if ($99) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $101=$I;
   var $102=1 << $101;
   var $103=$102 ^ -1;
   var $104=$1;
   var $105=(($104)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=$106 & $103;
   HEAP32[(($105)>>2)]=$107;
   label = 22; break;
  case 14: 
   var $109=$B;
   var $110=$I;
   var $111=$110 << 1;
   var $112=$1;
   var $113=(($112+40)|0);
   var $114=(($113+($111<<2))|0);
   var $115=$114;
   var $116=$115;
   var $117=(($109)|(0))==(($116)|(0));
   if ($117) { var $134 = 1;label = 18; break; } else { label = 15; break; }
  case 15: 
   var $119=$B;
   var $120=$119;
   var $121=$1;
   var $122=(($121+16)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=(($120)>>>(0)) >= (($123)>>>(0));
   if ($124) { label = 16; break; } else { var $132 = 0;label = 17; break; }
  case 16: 
   var $126=$B;
   var $127=(($126+8)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=$2;
   var $130=(($128)|(0))==(($129)|(0));
   var $132 = $130;label = 17; break;
  case 17: 
   var $132;
   var $134 = $132;label = 18; break;
  case 18: 
   var $134;
   var $135=(($134)&(1));
   var $136=($135);
   var $137=(($136)|(0))!=0;
   if ($137) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $139=$B;
   var $140=$F;
   var $141=(($140+12)|0);
   HEAP32[(($141)>>2)]=$139;
   var $142=$F;
   var $143=$B;
   var $144=(($143+8)|0);
   HEAP32[(($144)>>2)]=$142;
   label = 21; break;
  case 20: 
   _abort();
   throw "Reached an unreachable!";
  case 21: 
   label = 22; break;
  case 22: 
   label = 24; break;
  case 23: 
   _abort();
   throw "Reached an unreachable!";
  case 24: 
   label = 74; break;
  case 25: 
   var $151=$2;
   var $152=$151;
   $TP=$152;
   var $153=$TP;
   var $154=(($153+24)|0);
   var $155=HEAP32[(($154)>>2)];
   $XP=$155;
   var $156=$TP;
   var $157=(($156+12)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=$TP;
   var $160=(($158)|(0))!=(($159)|(0));
   if ($160) { label = 26; break; } else { label = 33; break; }
  case 26: 
   var $162=$TP;
   var $163=(($162+8)|0);
   var $164=HEAP32[(($163)>>2)];
   $F1=$164;
   var $165=$TP;
   var $166=(($165+12)|0);
   var $167=HEAP32[(($166)>>2)];
   $R=$167;
   var $168=$F1;
   var $169=$168;
   var $170=$1;
   var $171=(($170+16)|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=(($169)>>>(0)) >= (($172)>>>(0));
   if ($173) { label = 27; break; } else { var $187 = 0;label = 29; break; }
  case 27: 
   var $175=$F1;
   var $176=(($175+12)|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=$TP;
   var $179=(($177)|(0))==(($178)|(0));
   if ($179) { label = 28; break; } else { var $187 = 0;label = 29; break; }
  case 28: 
   var $181=$R;
   var $182=(($181+8)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=$TP;
   var $185=(($183)|(0))==(($184)|(0));
   var $187 = $185;label = 29; break;
  case 29: 
   var $187;
   var $188=(($187)&(1));
   var $189=($188);
   var $190=(($189)|(0))!=0;
   if ($190) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $192=$R;
   var $193=$F1;
   var $194=(($193+12)|0);
   HEAP32[(($194)>>2)]=$192;
   var $195=$F1;
   var $196=$R;
   var $197=(($196+8)|0);
   HEAP32[(($197)>>2)]=$195;
   label = 32; break;
  case 31: 
   _abort();
   throw "Reached an unreachable!";
  case 32: 
   label = 45; break;
  case 33: 
   var $201=$TP;
   var $202=(($201+16)|0);
   var $203=(($202+4)|0);
   $RP=$203;
   var $204=HEAP32[(($203)>>2)];
   $R=$204;
   var $205=(($204)|(0))!=0;
   if ($205) { label = 35; break; } else { label = 34; break; }
  case 34: 
   var $207=$TP;
   var $208=(($207+16)|0);
   var $209=(($208)|0);
   $RP=$209;
   var $210=HEAP32[(($209)>>2)];
   $R=$210;
   var $211=(($210)|(0))!=0;
   if ($211) { label = 35; break; } else { label = 44; break; }
  case 35: 
   label = 36; break;
  case 36: 
   var $214=$R;
   var $215=(($214+16)|0);
   var $216=(($215+4)|0);
   $CP=$216;
   var $217=HEAP32[(($216)>>2)];
   var $218=(($217)|(0))!=0;
   if ($218) { var $226 = 1;label = 38; break; } else { label = 37; break; }
  case 37: 
   var $220=$R;
   var $221=(($220+16)|0);
   var $222=(($221)|0);
   $CP=$222;
   var $223=HEAP32[(($222)>>2)];
   var $224=(($223)|(0))!=0;
   var $226 = $224;label = 38; break;
  case 38: 
   var $226;
   if ($226) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $228=$CP;
   $RP=$228;
   var $229=HEAP32[(($228)>>2)];
   $R=$229;
   label = 36; break;
  case 40: 
   var $231=$RP;
   var $232=$231;
   var $233=$1;
   var $234=(($233+16)|0);
   var $235=HEAP32[(($234)>>2)];
   var $236=(($232)>>>(0)) >= (($235)>>>(0));
   var $237=(($236)&(1));
   var $238=($237);
   var $239=(($238)|(0))!=0;
   if ($239) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $241=$RP;
   HEAP32[(($241)>>2)]=0;
   label = 43; break;
  case 42: 
   _abort();
   throw "Reached an unreachable!";
  case 43: 
   label = 44; break;
  case 44: 
   label = 45; break;
  case 45: 
   var $246=$XP;
   var $247=(($246)|(0))!=0;
   if ($247) { label = 46; break; } else { label = 73; break; }
  case 46: 
   var $249=$TP;
   var $250=(($249+28)|0);
   var $251=HEAP32[(($250)>>2)];
   var $252=$1;
   var $253=(($252+304)|0);
   var $254=(($253+($251<<2))|0);
   $H=$254;
   var $255=$TP;
   var $256=$H;
   var $257=HEAP32[(($256)>>2)];
   var $258=(($255)|(0))==(($257)|(0));
   if ($258) { label = 47; break; } else { label = 50; break; }
  case 47: 
   var $260=$R;
   var $261=$H;
   HEAP32[(($261)>>2)]=$260;
   var $262=(($260)|(0))==0;
   if ($262) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $264=$TP;
   var $265=(($264+28)|0);
   var $266=HEAP32[(($265)>>2)];
   var $267=1 << $266;
   var $268=$267 ^ -1;
   var $269=$1;
   var $270=(($269+4)|0);
   var $271=HEAP32[(($270)>>2)];
   var $272=$271 & $268;
   HEAP32[(($270)>>2)]=$272;
   label = 49; break;
  case 49: 
   label = 57; break;
  case 50: 
   var $275=$XP;
   var $276=$275;
   var $277=$1;
   var $278=(($277+16)|0);
   var $279=HEAP32[(($278)>>2)];
   var $280=(($276)>>>(0)) >= (($279)>>>(0));
   var $281=(($280)&(1));
   var $282=($281);
   var $283=(($282)|(0))!=0;
   if ($283) { label = 51; break; } else { label = 55; break; }
  case 51: 
   var $285=$XP;
   var $286=(($285+16)|0);
   var $287=(($286)|0);
   var $288=HEAP32[(($287)>>2)];
   var $289=$TP;
   var $290=(($288)|(0))==(($289)|(0));
   if ($290) { label = 52; break; } else { label = 53; break; }
  case 52: 
   var $292=$R;
   var $293=$XP;
   var $294=(($293+16)|0);
   var $295=(($294)|0);
   HEAP32[(($295)>>2)]=$292;
   label = 54; break;
  case 53: 
   var $297=$R;
   var $298=$XP;
   var $299=(($298+16)|0);
   var $300=(($299+4)|0);
   HEAP32[(($300)>>2)]=$297;
   label = 54; break;
  case 54: 
   label = 56; break;
  case 55: 
   _abort();
   throw "Reached an unreachable!";
  case 56: 
   label = 57; break;
  case 57: 
   var $305=$R;
   var $306=(($305)|(0))!=0;
   if ($306) { label = 58; break; } else { label = 72; break; }
  case 58: 
   var $308=$R;
   var $309=$308;
   var $310=$1;
   var $311=(($310+16)|0);
   var $312=HEAP32[(($311)>>2)];
   var $313=(($309)>>>(0)) >= (($312)>>>(0));
   var $314=(($313)&(1));
   var $315=($314);
   var $316=(($315)|(0))!=0;
   if ($316) { label = 59; break; } else { label = 70; break; }
  case 59: 
   var $318=$XP;
   var $319=$R;
   var $320=(($319+24)|0);
   HEAP32[(($320)>>2)]=$318;
   var $321=$TP;
   var $322=(($321+16)|0);
   var $323=(($322)|0);
   var $324=HEAP32[(($323)>>2)];
   $C0=$324;
   var $325=(($324)|(0))!=0;
   if ($325) { label = 60; break; } else { label = 64; break; }
  case 60: 
   var $327=$C0;
   var $328=$327;
   var $329=$1;
   var $330=(($329+16)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332=(($328)>>>(0)) >= (($331)>>>(0));
   var $333=(($332)&(1));
   var $334=($333);
   var $335=(($334)|(0))!=0;
   if ($335) { label = 61; break; } else { label = 62; break; }
  case 61: 
   var $337=$C0;
   var $338=$R;
   var $339=(($338+16)|0);
   var $340=(($339)|0);
   HEAP32[(($340)>>2)]=$337;
   var $341=$R;
   var $342=$C0;
   var $343=(($342+24)|0);
   HEAP32[(($343)>>2)]=$341;
   label = 63; break;
  case 62: 
   _abort();
   throw "Reached an unreachable!";
  case 63: 
   label = 64; break;
  case 64: 
   var $347=$TP;
   var $348=(($347+16)|0);
   var $349=(($348+4)|0);
   var $350=HEAP32[(($349)>>2)];
   $C1=$350;
   var $351=(($350)|(0))!=0;
   if ($351) { label = 65; break; } else { label = 69; break; }
  case 65: 
   var $353=$C1;
   var $354=$353;
   var $355=$1;
   var $356=(($355+16)|0);
   var $357=HEAP32[(($356)>>2)];
   var $358=(($354)>>>(0)) >= (($357)>>>(0));
   var $359=(($358)&(1));
   var $360=($359);
   var $361=(($360)|(0))!=0;
   if ($361) { label = 66; break; } else { label = 67; break; }
  case 66: 
   var $363=$C1;
   var $364=$R;
   var $365=(($364+16)|0);
   var $366=(($365+4)|0);
   HEAP32[(($366)>>2)]=$363;
   var $367=$R;
   var $368=$C1;
   var $369=(($368+24)|0);
   HEAP32[(($369)>>2)]=$367;
   label = 68; break;
  case 67: 
   _abort();
   throw "Reached an unreachable!";
  case 68: 
   label = 69; break;
  case 69: 
   label = 71; break;
  case 70: 
   _abort();
   throw "Reached an unreachable!";
  case 71: 
   label = 72; break;
  case 72: 
   label = 73; break;
  case 73: 
   label = 74; break;
  case 74: 
   label = 78; break;
  case 75: 
   var $379=$next;
   var $380=(($379+4)|0);
   var $381=HEAP32[(($380)>>2)];
   var $382=$381 & 3;
   var $383=(($382)|(0))==3;
   if ($383) { label = 76; break; } else { label = 77; break; }
  case 76: 
   var $385=$3;
   var $386=$1;
   var $387=(($386+8)|0);
   HEAP32[(($387)>>2)]=$385;
   var $388=$next;
   var $389=(($388+4)|0);
   var $390=HEAP32[(($389)>>2)];
   var $391=$390 & -2;
   HEAP32[(($389)>>2)]=$391;
   var $392=$3;
   var $393=$392 | 1;
   var $394=$2;
   var $395=(($394+4)|0);
   HEAP32[(($395)>>2)]=$393;
   var $396=$3;
   var $397=$2;
   var $398=$397;
   var $399=$3;
   var $400=(($398+$399)|0);
   var $401=$400;
   var $402=(($401)|0);
   HEAP32[(($402)>>2)]=$396;
   label = 200; break;
  case 77: 
   label = 78; break;
  case 78: 
   label = 80; break;
  case 79: 
   _abort();
   throw "Reached an unreachable!";
  case 80: 
   label = 81; break;
  case 81: 
   var $408=$next;
   var $409=$408;
   var $410=$1;
   var $411=(($410+16)|0);
   var $412=HEAP32[(($411)>>2)];
   var $413=(($409)>>>(0)) >= (($412)>>>(0));
   var $414=(($413)&(1));
   var $415=($414);
   var $416=(($415)|(0))!=0;
   if ($416) { label = 82; break; } else { label = 199; break; }
  case 82: 
   var $418=$next;
   var $419=(($418+4)|0);
   var $420=HEAP32[(($419)>>2)];
   var $421=$420 & 2;
   var $422=(($421)|(0))!=0;
   if ($422) { label = 162; break; } else { label = 83; break; }
  case 83: 
   var $424=$next;
   var $425=$1;
   var $426=(($425+24)|0);
   var $427=HEAP32[(($426)>>2)];
   var $428=(($424)|(0))==(($427)|(0));
   if ($428) { label = 84; break; } else { label = 87; break; }
  case 84: 
   var $430=$3;
   var $431=$1;
   var $432=(($431+12)|0);
   var $433=HEAP32[(($432)>>2)];
   var $434=((($433)+($430))|0);
   HEAP32[(($432)>>2)]=$434;
   $tsize=$434;
   var $435=$2;
   var $436=$1;
   var $437=(($436+24)|0);
   HEAP32[(($437)>>2)]=$435;
   var $438=$tsize;
   var $439=$438 | 1;
   var $440=$2;
   var $441=(($440+4)|0);
   HEAP32[(($441)>>2)]=$439;
   var $442=$2;
   var $443=$1;
   var $444=(($443+20)|0);
   var $445=HEAP32[(($444)>>2)];
   var $446=(($442)|(0))==(($445)|(0));
   if ($446) { label = 85; break; } else { label = 86; break; }
  case 85: 
   var $448=$1;
   var $449=(($448+20)|0);
   HEAP32[(($449)>>2)]=0;
   var $450=$1;
   var $451=(($450+8)|0);
   HEAP32[(($451)>>2)]=0;
   label = 86; break;
  case 86: 
   label = 200; break;
  case 87: 
   var $454=$next;
   var $455=$1;
   var $456=(($455+20)|0);
   var $457=HEAP32[(($456)>>2)];
   var $458=(($454)|(0))==(($457)|(0));
   if ($458) { label = 88; break; } else { label = 89; break; }
  case 88: 
   var $460=$3;
   var $461=$1;
   var $462=(($461+8)|0);
   var $463=HEAP32[(($462)>>2)];
   var $464=((($463)+($460))|0);
   HEAP32[(($462)>>2)]=$464;
   $dsize=$464;
   var $465=$2;
   var $466=$1;
   var $467=(($466+20)|0);
   HEAP32[(($467)>>2)]=$465;
   var $468=$dsize;
   var $469=$468 | 1;
   var $470=$2;
   var $471=(($470+4)|0);
   HEAP32[(($471)>>2)]=$469;
   var $472=$dsize;
   var $473=$2;
   var $474=$473;
   var $475=$dsize;
   var $476=(($474+$475)|0);
   var $477=$476;
   var $478=(($477)|0);
   HEAP32[(($478)>>2)]=$472;
   label = 200; break;
  case 89: 
   var $480=$next;
   var $481=(($480+4)|0);
   var $482=HEAP32[(($481)>>2)];
   var $483=$482 & -8;
   $nsize=$483;
   var $484=$nsize;
   var $485=$3;
   var $486=((($485)+($484))|0);
   $3=$486;
   var $487=$nsize;
   var $488=$487 >>> 3;
   var $489=(($488)>>>(0)) < 32;
   if ($489) { label = 90; break; } else { label = 108; break; }
  case 90: 
   var $491=$next;
   var $492=(($491+8)|0);
   var $493=HEAP32[(($492)>>2)];
   $F2=$493;
   var $494=$next;
   var $495=(($494+12)|0);
   var $496=HEAP32[(($495)>>2)];
   $B3=$496;
   var $497=$nsize;
   var $498=$497 >>> 3;
   $I4=$498;
   var $499=$F2;
   var $500=$I4;
   var $501=$500 << 1;
   var $502=$1;
   var $503=(($502+40)|0);
   var $504=(($503+($501<<2))|0);
   var $505=$504;
   var $506=$505;
   var $507=(($499)|(0))==(($506)|(0));
   if ($507) { var $524 = 1;label = 94; break; } else { label = 91; break; }
  case 91: 
   var $509=$F2;
   var $510=$509;
   var $511=$1;
   var $512=(($511+16)|0);
   var $513=HEAP32[(($512)>>2)];
   var $514=(($510)>>>(0)) >= (($513)>>>(0));
   if ($514) { label = 92; break; } else { var $522 = 0;label = 93; break; }
  case 92: 
   var $516=$F2;
   var $517=(($516+12)|0);
   var $518=HEAP32[(($517)>>2)];
   var $519=$next;
   var $520=(($518)|(0))==(($519)|(0));
   var $522 = $520;label = 93; break;
  case 93: 
   var $522;
   var $524 = $522;label = 94; break;
  case 94: 
   var $524;
   var $525=(($524)&(1));
   var $526=($525);
   var $527=(($526)|(0))!=0;
   if ($527) { label = 95; break; } else { label = 106; break; }
  case 95: 
   var $529=$B3;
   var $530=$F2;
   var $531=(($529)|(0))==(($530)|(0));
   if ($531) { label = 96; break; } else { label = 97; break; }
  case 96: 
   var $533=$I4;
   var $534=1 << $533;
   var $535=$534 ^ -1;
   var $536=$1;
   var $537=(($536)|0);
   var $538=HEAP32[(($537)>>2)];
   var $539=$538 & $535;
   HEAP32[(($537)>>2)]=$539;
   label = 105; break;
  case 97: 
   var $541=$B3;
   var $542=$I4;
   var $543=$542 << 1;
   var $544=$1;
   var $545=(($544+40)|0);
   var $546=(($545+($543<<2))|0);
   var $547=$546;
   var $548=$547;
   var $549=(($541)|(0))==(($548)|(0));
   if ($549) { var $566 = 1;label = 101; break; } else { label = 98; break; }
  case 98: 
   var $551=$B3;
   var $552=$551;
   var $553=$1;
   var $554=(($553+16)|0);
   var $555=HEAP32[(($554)>>2)];
   var $556=(($552)>>>(0)) >= (($555)>>>(0));
   if ($556) { label = 99; break; } else { var $564 = 0;label = 100; break; }
  case 99: 
   var $558=$B3;
   var $559=(($558+8)|0);
   var $560=HEAP32[(($559)>>2)];
   var $561=$next;
   var $562=(($560)|(0))==(($561)|(0));
   var $564 = $562;label = 100; break;
  case 100: 
   var $564;
   var $566 = $564;label = 101; break;
  case 101: 
   var $566;
   var $567=(($566)&(1));
   var $568=($567);
   var $569=(($568)|(0))!=0;
   if ($569) { label = 102; break; } else { label = 103; break; }
  case 102: 
   var $571=$B3;
   var $572=$F2;
   var $573=(($572+12)|0);
   HEAP32[(($573)>>2)]=$571;
   var $574=$F2;
   var $575=$B3;
   var $576=(($575+8)|0);
   HEAP32[(($576)>>2)]=$574;
   label = 104; break;
  case 103: 
   _abort();
   throw "Reached an unreachable!";
  case 104: 
   label = 105; break;
  case 105: 
   label = 107; break;
  case 106: 
   _abort();
   throw "Reached an unreachable!";
  case 107: 
   label = 157; break;
  case 108: 
   var $583=$next;
   var $584=$583;
   $TP5=$584;
   var $585=$TP5;
   var $586=(($585+24)|0);
   var $587=HEAP32[(($586)>>2)];
   $XP6=$587;
   var $588=$TP5;
   var $589=(($588+12)|0);
   var $590=HEAP32[(($589)>>2)];
   var $591=$TP5;
   var $592=(($590)|(0))!=(($591)|(0));
   if ($592) { label = 109; break; } else { label = 116; break; }
  case 109: 
   var $594=$TP5;
   var $595=(($594+8)|0);
   var $596=HEAP32[(($595)>>2)];
   $F8=$596;
   var $597=$TP5;
   var $598=(($597+12)|0);
   var $599=HEAP32[(($598)>>2)];
   $R7=$599;
   var $600=$F8;
   var $601=$600;
   var $602=$1;
   var $603=(($602+16)|0);
   var $604=HEAP32[(($603)>>2)];
   var $605=(($601)>>>(0)) >= (($604)>>>(0));
   if ($605) { label = 110; break; } else { var $619 = 0;label = 112; break; }
  case 110: 
   var $607=$F8;
   var $608=(($607+12)|0);
   var $609=HEAP32[(($608)>>2)];
   var $610=$TP5;
   var $611=(($609)|(0))==(($610)|(0));
   if ($611) { label = 111; break; } else { var $619 = 0;label = 112; break; }
  case 111: 
   var $613=$R7;
   var $614=(($613+8)|0);
   var $615=HEAP32[(($614)>>2)];
   var $616=$TP5;
   var $617=(($615)|(0))==(($616)|(0));
   var $619 = $617;label = 112; break;
  case 112: 
   var $619;
   var $620=(($619)&(1));
   var $621=($620);
   var $622=(($621)|(0))!=0;
   if ($622) { label = 113; break; } else { label = 114; break; }
  case 113: 
   var $624=$R7;
   var $625=$F8;
   var $626=(($625+12)|0);
   HEAP32[(($626)>>2)]=$624;
   var $627=$F8;
   var $628=$R7;
   var $629=(($628+8)|0);
   HEAP32[(($629)>>2)]=$627;
   label = 115; break;
  case 114: 
   _abort();
   throw "Reached an unreachable!";
  case 115: 
   label = 128; break;
  case 116: 
   var $633=$TP5;
   var $634=(($633+16)|0);
   var $635=(($634+4)|0);
   $RP9=$635;
   var $636=HEAP32[(($635)>>2)];
   $R7=$636;
   var $637=(($636)|(0))!=0;
   if ($637) { label = 118; break; } else { label = 117; break; }
  case 117: 
   var $639=$TP5;
   var $640=(($639+16)|0);
   var $641=(($640)|0);
   $RP9=$641;
   var $642=HEAP32[(($641)>>2)];
   $R7=$642;
   var $643=(($642)|(0))!=0;
   if ($643) { label = 118; break; } else { label = 127; break; }
  case 118: 
   label = 119; break;
  case 119: 
   var $646=$R7;
   var $647=(($646+16)|0);
   var $648=(($647+4)|0);
   $CP10=$648;
   var $649=HEAP32[(($648)>>2)];
   var $650=(($649)|(0))!=0;
   if ($650) { var $658 = 1;label = 121; break; } else { label = 120; break; }
  case 120: 
   var $652=$R7;
   var $653=(($652+16)|0);
   var $654=(($653)|0);
   $CP10=$654;
   var $655=HEAP32[(($654)>>2)];
   var $656=(($655)|(0))!=0;
   var $658 = $656;label = 121; break;
  case 121: 
   var $658;
   if ($658) { label = 122; break; } else { label = 123; break; }
  case 122: 
   var $660=$CP10;
   $RP9=$660;
   var $661=HEAP32[(($660)>>2)];
   $R7=$661;
   label = 119; break;
  case 123: 
   var $663=$RP9;
   var $664=$663;
   var $665=$1;
   var $666=(($665+16)|0);
   var $667=HEAP32[(($666)>>2)];
   var $668=(($664)>>>(0)) >= (($667)>>>(0));
   var $669=(($668)&(1));
   var $670=($669);
   var $671=(($670)|(0))!=0;
   if ($671) { label = 124; break; } else { label = 125; break; }
  case 124: 
   var $673=$RP9;
   HEAP32[(($673)>>2)]=0;
   label = 126; break;
  case 125: 
   _abort();
   throw "Reached an unreachable!";
  case 126: 
   label = 127; break;
  case 127: 
   label = 128; break;
  case 128: 
   var $678=$XP6;
   var $679=(($678)|(0))!=0;
   if ($679) { label = 129; break; } else { label = 156; break; }
  case 129: 
   var $681=$TP5;
   var $682=(($681+28)|0);
   var $683=HEAP32[(($682)>>2)];
   var $684=$1;
   var $685=(($684+304)|0);
   var $686=(($685+($683<<2))|0);
   $H11=$686;
   var $687=$TP5;
   var $688=$H11;
   var $689=HEAP32[(($688)>>2)];
   var $690=(($687)|(0))==(($689)|(0));
   if ($690) { label = 130; break; } else { label = 133; break; }
  case 130: 
   var $692=$R7;
   var $693=$H11;
   HEAP32[(($693)>>2)]=$692;
   var $694=(($692)|(0))==0;
   if ($694) { label = 131; break; } else { label = 132; break; }
  case 131: 
   var $696=$TP5;
   var $697=(($696+28)|0);
   var $698=HEAP32[(($697)>>2)];
   var $699=1 << $698;
   var $700=$699 ^ -1;
   var $701=$1;
   var $702=(($701+4)|0);
   var $703=HEAP32[(($702)>>2)];
   var $704=$703 & $700;
   HEAP32[(($702)>>2)]=$704;
   label = 132; break;
  case 132: 
   label = 140; break;
  case 133: 
   var $707=$XP6;
   var $708=$707;
   var $709=$1;
   var $710=(($709+16)|0);
   var $711=HEAP32[(($710)>>2)];
   var $712=(($708)>>>(0)) >= (($711)>>>(0));
   var $713=(($712)&(1));
   var $714=($713);
   var $715=(($714)|(0))!=0;
   if ($715) { label = 134; break; } else { label = 138; break; }
  case 134: 
   var $717=$XP6;
   var $718=(($717+16)|0);
   var $719=(($718)|0);
   var $720=HEAP32[(($719)>>2)];
   var $721=$TP5;
   var $722=(($720)|(0))==(($721)|(0));
   if ($722) { label = 135; break; } else { label = 136; break; }
  case 135: 
   var $724=$R7;
   var $725=$XP6;
   var $726=(($725+16)|0);
   var $727=(($726)|0);
   HEAP32[(($727)>>2)]=$724;
   label = 137; break;
  case 136: 
   var $729=$R7;
   var $730=$XP6;
   var $731=(($730+16)|0);
   var $732=(($731+4)|0);
   HEAP32[(($732)>>2)]=$729;
   label = 137; break;
  case 137: 
   label = 139; break;
  case 138: 
   _abort();
   throw "Reached an unreachable!";
  case 139: 
   label = 140; break;
  case 140: 
   var $737=$R7;
   var $738=(($737)|(0))!=0;
   if ($738) { label = 141; break; } else { label = 155; break; }
  case 141: 
   var $740=$R7;
   var $741=$740;
   var $742=$1;
   var $743=(($742+16)|0);
   var $744=HEAP32[(($743)>>2)];
   var $745=(($741)>>>(0)) >= (($744)>>>(0));
   var $746=(($745)&(1));
   var $747=($746);
   var $748=(($747)|(0))!=0;
   if ($748) { label = 142; break; } else { label = 153; break; }
  case 142: 
   var $750=$XP6;
   var $751=$R7;
   var $752=(($751+24)|0);
   HEAP32[(($752)>>2)]=$750;
   var $753=$TP5;
   var $754=(($753+16)|0);
   var $755=(($754)|0);
   var $756=HEAP32[(($755)>>2)];
   $C012=$756;
   var $757=(($756)|(0))!=0;
   if ($757) { label = 143; break; } else { label = 147; break; }
  case 143: 
   var $759=$C012;
   var $760=$759;
   var $761=$1;
   var $762=(($761+16)|0);
   var $763=HEAP32[(($762)>>2)];
   var $764=(($760)>>>(0)) >= (($763)>>>(0));
   var $765=(($764)&(1));
   var $766=($765);
   var $767=(($766)|(0))!=0;
   if ($767) { label = 144; break; } else { label = 145; break; }
  case 144: 
   var $769=$C012;
   var $770=$R7;
   var $771=(($770+16)|0);
   var $772=(($771)|0);
   HEAP32[(($772)>>2)]=$769;
   var $773=$R7;
   var $774=$C012;
   var $775=(($774+24)|0);
   HEAP32[(($775)>>2)]=$773;
   label = 146; break;
  case 145: 
   _abort();
   throw "Reached an unreachable!";
  case 146: 
   label = 147; break;
  case 147: 
   var $779=$TP5;
   var $780=(($779+16)|0);
   var $781=(($780+4)|0);
   var $782=HEAP32[(($781)>>2)];
   $C113=$782;
   var $783=(($782)|(0))!=0;
   if ($783) { label = 148; break; } else { label = 152; break; }
  case 148: 
   var $785=$C113;
   var $786=$785;
   var $787=$1;
   var $788=(($787+16)|0);
   var $789=HEAP32[(($788)>>2)];
   var $790=(($786)>>>(0)) >= (($789)>>>(0));
   var $791=(($790)&(1));
   var $792=($791);
   var $793=(($792)|(0))!=0;
   if ($793) { label = 149; break; } else { label = 150; break; }
  case 149: 
   var $795=$C113;
   var $796=$R7;
   var $797=(($796+16)|0);
   var $798=(($797+4)|0);
   HEAP32[(($798)>>2)]=$795;
   var $799=$R7;
   var $800=$C113;
   var $801=(($800+24)|0);
   HEAP32[(($801)>>2)]=$799;
   label = 151; break;
  case 150: 
   _abort();
   throw "Reached an unreachable!";
  case 151: 
   label = 152; break;
  case 152: 
   label = 154; break;
  case 153: 
   _abort();
   throw "Reached an unreachable!";
  case 154: 
   label = 155; break;
  case 155: 
   label = 156; break;
  case 156: 
   label = 157; break;
  case 157: 
   var $810=$3;
   var $811=$810 | 1;
   var $812=$2;
   var $813=(($812+4)|0);
   HEAP32[(($813)>>2)]=$811;
   var $814=$3;
   var $815=$2;
   var $816=$815;
   var $817=$3;
   var $818=(($816+$817)|0);
   var $819=$818;
   var $820=(($819)|0);
   HEAP32[(($820)>>2)]=$814;
   var $821=$2;
   var $822=$1;
   var $823=(($822+20)|0);
   var $824=HEAP32[(($823)>>2)];
   var $825=(($821)|(0))==(($824)|(0));
   if ($825) { label = 158; break; } else { label = 159; break; }
  case 158: 
   var $827=$3;
   var $828=$1;
   var $829=(($828+8)|0);
   HEAP32[(($829)>>2)]=$827;
   label = 200; break;
  case 159: 
   label = 160; break;
  case 160: 
   label = 161; break;
  case 161: 
   label = 163; break;
  case 162: 
   var $834=$next;
   var $835=(($834+4)|0);
   var $836=HEAP32[(($835)>>2)];
   var $837=$836 & -2;
   HEAP32[(($835)>>2)]=$837;
   var $838=$3;
   var $839=$838 | 1;
   var $840=$2;
   var $841=(($840+4)|0);
   HEAP32[(($841)>>2)]=$839;
   var $842=$3;
   var $843=$2;
   var $844=$843;
   var $845=$3;
   var $846=(($844+$845)|0);
   var $847=$846;
   var $848=(($847)|0);
   HEAP32[(($848)>>2)]=$842;
   label = 163; break;
  case 163: 
   var $850=$3;
   var $851=$850 >>> 3;
   var $852=(($851)>>>(0)) < 32;
   if ($852) { label = 164; break; } else { label = 171; break; }
  case 164: 
   var $854=$3;
   var $855=$854 >>> 3;
   $I14=$855;
   var $856=$I14;
   var $857=$856 << 1;
   var $858=$1;
   var $859=(($858+40)|0);
   var $860=(($859+($857<<2))|0);
   var $861=$860;
   var $862=$861;
   $B15=$862;
   var $863=$B15;
   $F16=$863;
   var $864=$1;
   var $865=(($864)|0);
   var $866=HEAP32[(($865)>>2)];
   var $867=$I14;
   var $868=1 << $867;
   var $869=$866 & $868;
   var $870=(($869)|(0))!=0;
   if ($870) { label = 166; break; } else { label = 165; break; }
  case 165: 
   var $872=$I14;
   var $873=1 << $872;
   var $874=$1;
   var $875=(($874)|0);
   var $876=HEAP32[(($875)>>2)];
   var $877=$876 | $873;
   HEAP32[(($875)>>2)]=$877;
   label = 170; break;
  case 166: 
   var $879=$B15;
   var $880=(($879+8)|0);
   var $881=HEAP32[(($880)>>2)];
   var $882=$881;
   var $883=$1;
   var $884=(($883+16)|0);
   var $885=HEAP32[(($884)>>2)];
   var $886=(($882)>>>(0)) >= (($885)>>>(0));
   var $887=(($886)&(1));
   var $888=($887);
   var $889=(($888)|(0))!=0;
   if ($889) { label = 167; break; } else { label = 168; break; }
  case 167: 
   var $891=$B15;
   var $892=(($891+8)|0);
   var $893=HEAP32[(($892)>>2)];
   $F16=$893;
   label = 169; break;
  case 168: 
   _abort();
   throw "Reached an unreachable!";
  case 169: 
   label = 170; break;
  case 170: 
   var $897=$2;
   var $898=$B15;
   var $899=(($898+8)|0);
   HEAP32[(($899)>>2)]=$897;
   var $900=$2;
   var $901=$F16;
   var $902=(($901+12)|0);
   HEAP32[(($902)>>2)]=$900;
   var $903=$F16;
   var $904=$2;
   var $905=(($904+8)|0);
   HEAP32[(($905)>>2)]=$903;
   var $906=$B15;
   var $907=$2;
   var $908=(($907+12)|0);
   HEAP32[(($908)>>2)]=$906;
   label = 198; break;
  case 171: 
   var $910=$2;
   var $911=$910;
   $TP17=$911;
   var $912=$3;
   var $913=$912 >>> 8;
   $X=$913;
   var $914=$X;
   var $915=(($914)|(0))==0;
   if ($915) { label = 172; break; } else { label = 173; break; }
  case 172: 
   $I19=0;
   label = 177; break;
  case 173: 
   var $918=$X;
   var $919=(($918)>>>(0)) > 65535;
   if ($919) { label = 174; break; } else { label = 175; break; }
  case 174: 
   $I19=31;
   label = 176; break;
  case 175: 
   var $922=$X;
   $Y=$922;
   var $923=$Y;
   var $924=((($923)-(256))|0);
   var $925=$924 >>> 16;
   var $926=$925 & 8;
   $N=$926;
   var $927=$N;
   var $928=$Y;
   var $929=$928 << $927;
   $Y=$929;
   var $930=((($929)-(4096))|0);
   var $931=$930 >>> 16;
   var $932=$931 & 4;
   $K=$932;
   var $933=$K;
   var $934=$N;
   var $935=((($934)+($933))|0);
   $N=$935;
   var $936=$K;
   var $937=$Y;
   var $938=$937 << $936;
   $Y=$938;
   var $939=((($938)-(16384))|0);
   var $940=$939 >>> 16;
   var $941=$940 & 2;
   $K=$941;
   var $942=$N;
   var $943=((($942)+($941))|0);
   $N=$943;
   var $944=$N;
   var $945=(((14)-($944))|0);
   var $946=$K;
   var $947=$Y;
   var $948=$947 << $946;
   $Y=$948;
   var $949=$948 >>> 15;
   var $950=((($945)+($949))|0);
   $K=$950;
   var $951=$K;
   var $952=$951 << 1;
   var $953=$3;
   var $954=$K;
   var $955=((($954)+(7))|0);
   var $956=$953 >>> (($955)>>>(0));
   var $957=$956 & 1;
   var $958=((($952)+($957))|0);
   $I19=$958;
   label = 176; break;
  case 176: 
   label = 177; break;
  case 177: 
   var $961=$I19;
   var $962=$1;
   var $963=(($962+304)|0);
   var $964=(($963+($961<<2))|0);
   $H18=$964;
   var $965=$I19;
   var $966=$TP17;
   var $967=(($966+28)|0);
   HEAP32[(($967)>>2)]=$965;
   var $968=$TP17;
   var $969=(($968+16)|0);
   var $970=(($969+4)|0);
   HEAP32[(($970)>>2)]=0;
   var $971=$TP17;
   var $972=(($971+16)|0);
   var $973=(($972)|0);
   HEAP32[(($973)>>2)]=0;
   var $974=$1;
   var $975=(($974+4)|0);
   var $976=HEAP32[(($975)>>2)];
   var $977=$I19;
   var $978=1 << $977;
   var $979=$976 & $978;
   var $980=(($979)|(0))!=0;
   if ($980) { label = 179; break; } else { label = 178; break; }
  case 178: 
   var $982=$I19;
   var $983=1 << $982;
   var $984=$1;
   var $985=(($984+4)|0);
   var $986=HEAP32[(($985)>>2)];
   var $987=$986 | $983;
   HEAP32[(($985)>>2)]=$987;
   var $988=$TP17;
   var $989=$H18;
   HEAP32[(($989)>>2)]=$988;
   var $990=$H18;
   var $991=$990;
   var $992=$TP17;
   var $993=(($992+24)|0);
   HEAP32[(($993)>>2)]=$991;
   var $994=$TP17;
   var $995=$TP17;
   var $996=(($995+12)|0);
   HEAP32[(($996)>>2)]=$994;
   var $997=$TP17;
   var $998=(($997+8)|0);
   HEAP32[(($998)>>2)]=$994;
   label = 197; break;
  case 179: 
   var $1000=$H18;
   var $1001=HEAP32[(($1000)>>2)];
   $T=$1001;
   var $1002=$3;
   var $1003=$I19;
   var $1004=(($1003)|(0))==31;
   if ($1004) { label = 180; break; } else { label = 181; break; }
  case 180: 
   var $1013 = 0;label = 182; break;
  case 181: 
   var $1007=$I19;
   var $1008=$1007 >>> 1;
   var $1009=((($1008)+(8))|0);
   var $1010=((($1009)-(2))|0);
   var $1011=(((31)-($1010))|0);
   var $1013 = $1011;label = 182; break;
  case 182: 
   var $1013;
   var $1014=$1002 << $1013;
   $K20=$1014;
   label = 183; break;
  case 183: 
   var $1016=$T;
   var $1017=(($1016+4)|0);
   var $1018=HEAP32[(($1017)>>2)];
   var $1019=$1018 & -8;
   var $1020=$3;
   var $1021=(($1019)|(0))!=(($1020)|(0));
   if ($1021) { label = 184; break; } else { label = 190; break; }
  case 184: 
   var $1023=$K20;
   var $1024=$1023 >>> 31;
   var $1025=$1024 & 1;
   var $1026=$T;
   var $1027=(($1026+16)|0);
   var $1028=(($1027+($1025<<2))|0);
   $C=$1028;
   var $1029=$K20;
   var $1030=$1029 << 1;
   $K20=$1030;
   var $1031=$C;
   var $1032=HEAP32[(($1031)>>2)];
   var $1033=(($1032)|(0))!=0;
   if ($1033) { label = 185; break; } else { label = 186; break; }
  case 185: 
   var $1035=$C;
   var $1036=HEAP32[(($1035)>>2)];
   $T=$1036;
   label = 189; break;
  case 186: 
   var $1038=$C;
   var $1039=$1038;
   var $1040=$1;
   var $1041=(($1040+16)|0);
   var $1042=HEAP32[(($1041)>>2)];
   var $1043=(($1039)>>>(0)) >= (($1042)>>>(0));
   var $1044=(($1043)&(1));
   var $1045=($1044);
   var $1046=(($1045)|(0))!=0;
   if ($1046) { label = 187; break; } else { label = 188; break; }
  case 187: 
   var $1048=$TP17;
   var $1049=$C;
   HEAP32[(($1049)>>2)]=$1048;
   var $1050=$T;
   var $1051=$TP17;
   var $1052=(($1051+24)|0);
   HEAP32[(($1052)>>2)]=$1050;
   var $1053=$TP17;
   var $1054=$TP17;
   var $1055=(($1054+12)|0);
   HEAP32[(($1055)>>2)]=$1053;
   var $1056=$TP17;
   var $1057=(($1056+8)|0);
   HEAP32[(($1057)>>2)]=$1053;
   label = 196; break;
  case 188: 
   _abort();
   throw "Reached an unreachable!";
  case 189: 
   label = 195; break;
  case 190: 
   var $1061=$T;
   var $1062=(($1061+8)|0);
   var $1063=HEAP32[(($1062)>>2)];
   $F21=$1063;
   var $1064=$T;
   var $1065=$1064;
   var $1066=$1;
   var $1067=(($1066+16)|0);
   var $1068=HEAP32[(($1067)>>2)];
   var $1069=(($1065)>>>(0)) >= (($1068)>>>(0));
   if ($1069) { label = 191; break; } else { var $1078 = 0;label = 192; break; }
  case 191: 
   var $1071=$F21;
   var $1072=$1071;
   var $1073=$1;
   var $1074=(($1073+16)|0);
   var $1075=HEAP32[(($1074)>>2)];
   var $1076=(($1072)>>>(0)) >= (($1075)>>>(0));
   var $1078 = $1076;label = 192; break;
  case 192: 
   var $1078;
   var $1079=(($1078)&(1));
   var $1080=($1079);
   var $1081=(($1080)|(0))!=0;
   if ($1081) { label = 193; break; } else { label = 194; break; }
  case 193: 
   var $1083=$TP17;
   var $1084=$F21;
   var $1085=(($1084+12)|0);
   HEAP32[(($1085)>>2)]=$1083;
   var $1086=$T;
   var $1087=(($1086+8)|0);
   HEAP32[(($1087)>>2)]=$1083;
   var $1088=$F21;
   var $1089=$TP17;
   var $1090=(($1089+8)|0);
   HEAP32[(($1090)>>2)]=$1088;
   var $1091=$T;
   var $1092=$TP17;
   var $1093=(($1092+12)|0);
   HEAP32[(($1093)>>2)]=$1091;
   var $1094=$TP17;
   var $1095=(($1094+24)|0);
   HEAP32[(($1095)>>2)]=0;
   label = 196; break;
  case 194: 
   _abort();
   throw "Reached an unreachable!";
  case 195: 
   label = 183; break;
  case 196: 
   label = 197; break;
  case 197: 
   label = 198; break;
  case 198: 
   label = 200; break;
  case 199: 
   _abort();
   throw "Reached an unreachable!";
  case 200: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mmap_resize($m, $oldp, $nb, $flags) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $oldsize;
   var $offset;
   var $oldmmsize;
   var $newmmsize;
   var $cp;
   var $newp;
   var $psize;
   $2=$m;
   $3=$oldp;
   $4=$nb;
   $5=$flags;
   var $6=$3;
   var $7=(($6+4)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & -8;
   $oldsize=$9;
   var $10=$5;
   var $11=$4;
   var $12=$11 >>> 3;
   var $13=(($12)>>>(0)) < 32;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 14; break;
  case 3: 
   var $16=$oldsize;
   var $17=$4;
   var $18=((($17)+(4))|0);
   var $19=(($16)>>>(0)) >= (($18)>>>(0));
   if ($19) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $21=$oldsize;
   var $22=$4;
   var $23=((($21)-($22))|0);
   var $24=HEAP32[((((88)|0))>>2)];
   var $25=$24 << 1;
   var $26=(($23)>>>(0)) <= (($25)>>>(0));
   if ($26) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $28=$3;
   $1=$28;
   label = 14; break;
  case 6: 
   var $30=$3;
   var $31=(($30)|0);
   var $32=HEAP32[(($31)>>2)];
   $offset=$32;
   var $33=$oldsize;
   var $34=$offset;
   var $35=((($33)+($34))|0);
   var $36=((($35)+(16))|0);
   $oldmmsize=$36;
   var $37=$4;
   var $38=((($37)+(24))|0);
   var $39=((($38)+(7))|0);
   var $40=HEAP32[((((84)|0))>>2)];
   var $41=((($40)-(1))|0);
   var $42=((($39)+($41))|0);
   var $43=HEAP32[((((84)|0))>>2)];
   var $44=((($43)-(1))|0);
   var $45=$44 ^ -1;
   var $46=$42 & $45;
   $newmmsize=$46;
   $cp=-1;
   var $47=$cp;
   var $48=(($47)|(0))!=-1;
   if ($48) { label = 7; break; } else { label = 12; break; }
  case 7: 
   var $50=$cp;
   var $51=$offset;
   var $52=(($50+$51)|0);
   var $53=$52;
   $newp=$53;
   var $54=$newmmsize;
   var $55=$offset;
   var $56=((($54)-($55))|0);
   var $57=((($56)-(16))|0);
   $psize=$57;
   var $58=$psize;
   var $59=$newp;
   var $60=(($59+4)|0);
   HEAP32[(($60)>>2)]=$58;
   var $61=$newp;
   var $62=$61;
   var $63=$psize;
   var $64=(($62+$63)|0);
   var $65=$64;
   var $66=(($65+4)|0);
   HEAP32[(($66)>>2)]=7;
   var $67=$newp;
   var $68=$67;
   var $69=$psize;
   var $70=((($69)+(4))|0);
   var $71=(($68+$70)|0);
   var $72=$71;
   var $73=(($72+4)|0);
   HEAP32[(($73)>>2)]=0;
   var $74=$cp;
   var $75=$2;
   var $76=(($75+16)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($74)>>>(0)) < (($77)>>>(0));
   if ($78) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $80=$cp;
   var $81=$2;
   var $82=(($81+16)|0);
   HEAP32[(($82)>>2)]=$80;
   label = 9; break;
  case 9: 
   var $84=$newmmsize;
   var $85=$oldmmsize;
   var $86=((($84)-($85))|0);
   var $87=$2;
   var $88=(($87+432)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=((($89)+($86))|0);
   HEAP32[(($88)>>2)]=$90;
   var $91=$2;
   var $92=(($91+436)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=(($90)>>>(0)) > (($93)>>>(0));
   if ($94) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $96=$2;
   var $97=(($96+432)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$2;
   var $100=(($99+436)|0);
   HEAP32[(($100)>>2)]=$98;
   label = 11; break;
  case 11: 
   var $102=$newp;
   $1=$102;
   label = 14; break;
  case 12: 
   label = 13; break;
  case 13: 
   $1=0;
   label = 14; break;
  case 14: 
   var $106=$1;
   return $106;
  default: assert(0, "bad label: " + label);
 }
}
function _segment_holding($m, $addr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $sp;
   $2=$m;
   $3=$addr;
   var $4=$2;
   var $5=(($4+448)|0);
   $sp=$5;
   label = 2; break;
  case 2: 
   var $7=$3;
   var $8=$sp;
   var $9=(($8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($7)>>>(0)) >= (($10)>>>(0));
   if ($11) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $13=$3;
   var $14=$sp;
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$sp;
   var $18=(($17+4)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($16+$19)|0);
   var $21=(($13)>>>(0)) < (($20)>>>(0));
   if ($21) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=$sp;
   $1=$23;
   label = 8; break;
  case 5: 
   var $25=$sp;
   var $26=(($25+8)|0);
   var $27=HEAP32[(($26)>>2)];
   $sp=$27;
   var $28=(($27)|(0))==0;
   if ($28) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=0;
   label = 8; break;
  case 7: 
   label = 2; break;
  case 8: 
   var $32=$1;
   return $32;
  default: assert(0, "bad label: " + label);
 }
}
function _init_top($m, $p, $psize) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $offset;
   $1=$m;
   $2=$p;
   $3=$psize;
   var $4=$2;
   var $5=$4;
   var $6=(($5+8)|0);
   var $7=$6;
   var $8=$7 & 7;
   var $9=(($8)|(0))==0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $20 = 0;label = 4; break;
  case 3: 
   var $12=$2;
   var $13=$12;
   var $14=(($13+8)|0);
   var $15=$14;
   var $16=$15 & 7;
   var $17=(((8)-($16))|0);
   var $18=$17 & 7;
   var $20 = $18;label = 4; break;
  case 4: 
   var $20;
   $offset=$20;
   var $21=$2;
   var $22=$21;
   var $23=$offset;
   var $24=(($22+$23)|0);
   var $25=$24;
   $2=$25;
   var $26=$offset;
   var $27=$3;
   var $28=((($27)-($26))|0);
   $3=$28;
   var $29=$2;
   var $30=$1;
   var $31=(($30+24)|0);
   HEAP32[(($31)>>2)]=$29;
   var $32=$3;
   var $33=$1;
   var $34=(($33+12)|0);
   HEAP32[(($34)>>2)]=$32;
   var $35=$3;
   var $36=$35 | 1;
   var $37=$2;
   var $38=(($37+4)|0);
   HEAP32[(($38)>>2)]=$36;
   var $39=$2;
   var $40=$39;
   var $41=$3;
   var $42=(($40+$41)|0);
   var $43=$42;
   var $44=(($43+4)|0);
   HEAP32[(($44)>>2)]=40;
   var $45=HEAP32[((((96)|0))>>2)];
   var $46=$1;
   var $47=(($46+28)|0);
   HEAP32[(($47)>>2)]=$45;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mmap_alloc($m, $nb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $mmsize;
   var $fp;
   var $mm;
   var $offset;
   var $psize;
   var $p;
   $2=$m;
   $3=$nb;
   var $4=$3;
   var $5=((($4)+(24))|0);
   var $6=((($5)+(7))|0);
   var $7=HEAP32[((((84)|0))>>2)];
   var $8=((($7)-(1))|0);
   var $9=((($6)+($8))|0);
   var $10=HEAP32[((((84)|0))>>2)];
   var $11=((($10)-(1))|0);
   var $12=$11 ^ -1;
   var $13=$9 & $12;
   $mmsize=$13;
   var $14=$2;
   var $15=(($14+440)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))!=0;
   if ($17) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $19=$2;
   var $20=(($19+432)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$mmsize;
   var $23=((($21)+($22))|0);
   $fp=$23;
   var $24=$fp;
   var $25=$2;
   var $26=(($25+432)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($24)>>>(0)) <= (($27)>>>(0));
   if ($28) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $30=$fp;
   var $31=$2;
   var $32=(($31+440)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($30)>>>(0)) > (($33)>>>(0));
   if ($34) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $1=0;
   label = 19; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $38=$mmsize;
   var $39=$3;
   var $40=(($38)>>>(0)) > (($39)>>>(0));
   if ($40) { label = 7; break; } else { label = 18; break; }
  case 7: 
   $mm=-1;
   var $42=$mm;
   var $43=(($42)|(0))!=-1;
   if ($43) { label = 8; break; } else { label = 17; break; }
  case 8: 
   var $45=$mm;
   var $46=(($45+8)|0);
   var $47=$46;
   var $48=$47 & 7;
   var $49=(($48)|(0))==0;
   if ($49) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $59 = 0;label = 11; break;
  case 10: 
   var $52=$mm;
   var $53=(($52+8)|0);
   var $54=$53;
   var $55=$54 & 7;
   var $56=(((8)-($55))|0);
   var $57=$56 & 7;
   var $59 = $57;label = 11; break;
  case 11: 
   var $59;
   $offset=$59;
   var $60=$mmsize;
   var $61=$offset;
   var $62=((($60)-($61))|0);
   var $63=((($62)-(16))|0);
   $psize=$63;
   var $64=$mm;
   var $65=$offset;
   var $66=(($64+$65)|0);
   var $67=$66;
   $p=$67;
   var $68=$offset;
   var $69=$p;
   var $70=(($69)|0);
   HEAP32[(($70)>>2)]=$68;
   var $71=$psize;
   var $72=$p;
   var $73=(($72+4)|0);
   HEAP32[(($73)>>2)]=$71;
   var $74=$p;
   var $75=$74;
   var $76=$psize;
   var $77=(($75+$76)|0);
   var $78=$77;
   var $79=(($78+4)|0);
   HEAP32[(($79)>>2)]=7;
   var $80=$p;
   var $81=$80;
   var $82=$psize;
   var $83=((($82)+(4))|0);
   var $84=(($81+$83)|0);
   var $85=$84;
   var $86=(($85+4)|0);
   HEAP32[(($86)>>2)]=0;
   var $87=$2;
   var $88=(($87+16)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($89)|(0))==0;
   if ($90) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $92=$mm;
   var $93=$2;
   var $94=(($93+16)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($92)>>>(0)) < (($95)>>>(0));
   if ($96) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $98=$mm;
   var $99=$2;
   var $100=(($99+16)|0);
   HEAP32[(($100)>>2)]=$98;
   label = 14; break;
  case 14: 
   var $102=$mmsize;
   var $103=$2;
   var $104=(($103+432)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=((($105)+($102))|0);
   HEAP32[(($104)>>2)]=$106;
   var $107=$2;
   var $108=(($107+436)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=(($106)>>>(0)) > (($109)>>>(0));
   if ($110) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $112=$2;
   var $113=(($112+432)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=$2;
   var $116=(($115+436)|0);
   HEAP32[(($116)>>2)]=$114;
   label = 16; break;
  case 16: 
   var $118=$p;
   var $119=$118;
   var $120=(($119+8)|0);
   $1=$120;
   label = 19; break;
  case 17: 
   label = 18; break;
  case 18: 
   $1=0;
   label = 19; break;
  case 19: 
   var $124=$1;
   return $124;
  default: assert(0, "bad label: " + label);
 }
}
function _init_bins($m) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   var $bin;
   $1=$m;
   $i=0;
   label = 2; break;
  case 2: 
   var $3=$i;
   var $4=(($3)>>>(0)) < 32;
   if ($4) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $6=$i;
   var $7=$6 << 1;
   var $8=$1;
   var $9=(($8+40)|0);
   var $10=(($9+($7<<2))|0);
   var $11=$10;
   var $12=$11;
   $bin=$12;
   var $13=$bin;
   var $14=$bin;
   var $15=(($14+12)|0);
   HEAP32[(($15)>>2)]=$13;
   var $16=$bin;
   var $17=(($16+8)|0);
   HEAP32[(($17)>>2)]=$13;
   label = 4; break;
  case 4: 
   var $19=$i;
   var $20=((($19)+(1))|0);
   $i=$20;
   label = 2; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _prepend_alloc($m, $newbase, $oldbase, $nb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $p;
   var $oldfirst;
   var $psize;
   var $q;
   var $qsize;
   var $tsize;
   var $dsize;
   var $nsize;
   var $F;
   var $B;
   var $I;
   var $TP;
   var $XP;
   var $R;
   var $F1;
   var $RP;
   var $CP;
   var $H;
   var $C0;
   var $C1;
   var $I2;
   var $B3;
   var $F4;
   var $TP5;
   var $H6;
   var $I7;
   var $X;
   var $Y;
   var $N;
   var $K;
   var $T;
   var $K8;
   var $C;
   var $F9;
   $1=$m;
   $2=$newbase;
   $3=$oldbase;
   $4=$nb;
   var $5=$2;
   var $6=$2;
   var $7=(($6+8)|0);
   var $8=$7;
   var $9=$8 & 7;
   var $10=(($9)|(0))==0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $20 = 0;label = 4; break;
  case 3: 
   var $13=$2;
   var $14=(($13+8)|0);
   var $15=$14;
   var $16=$15 & 7;
   var $17=(((8)-($16))|0);
   var $18=$17 & 7;
   var $20 = $18;label = 4; break;
  case 4: 
   var $20;
   var $21=(($5+$20)|0);
   var $22=$21;
   $p=$22;
   var $23=$3;
   var $24=$3;
   var $25=(($24+8)|0);
   var $26=$25;
   var $27=$26 & 7;
   var $28=(($27)|(0))==0;
   if ($28) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $38 = 0;label = 7; break;
  case 6: 
   var $31=$3;
   var $32=(($31+8)|0);
   var $33=$32;
   var $34=$33 & 7;
   var $35=(((8)-($34))|0);
   var $36=$35 & 7;
   var $38 = $36;label = 7; break;
  case 7: 
   var $38;
   var $39=(($23+$38)|0);
   var $40=$39;
   $oldfirst=$40;
   var $41=$oldfirst;
   var $42=$41;
   var $43=$p;
   var $44=$43;
   var $45=$42;
   var $46=$44;
   var $47=((($45)-($46))|0);
   $psize=$47;
   var $48=$p;
   var $49=$48;
   var $50=$4;
   var $51=(($49+$50)|0);
   var $52=$51;
   $q=$52;
   var $53=$psize;
   var $54=$4;
   var $55=((($53)-($54))|0);
   $qsize=$55;
   var $56=$4;
   var $57=$56 | 1;
   var $58=$57 | 2;
   var $59=$p;
   var $60=(($59+4)|0);
   HEAP32[(($60)>>2)]=$58;
   var $61=$oldfirst;
   var $62=$1;
   var $63=(($62+24)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($61)|(0))==(($64)|(0));
   if ($65) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $67=$qsize;
   var $68=$1;
   var $69=(($68+12)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=((($70)+($67))|0);
   HEAP32[(($69)>>2)]=$71;
   $tsize=$71;
   var $72=$q;
   var $73=$1;
   var $74=(($73+24)|0);
   HEAP32[(($74)>>2)]=$72;
   var $75=$tsize;
   var $76=$75 | 1;
   var $77=$q;
   var $78=(($77+4)|0);
   HEAP32[(($78)>>2)]=$76;
   label = 118; break;
  case 9: 
   var $80=$oldfirst;
   var $81=$1;
   var $82=(($81+20)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($80)|(0))==(($83)|(0));
   if ($84) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $86=$qsize;
   var $87=$1;
   var $88=(($87+8)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=((($89)+($86))|0);
   HEAP32[(($88)>>2)]=$90;
   $dsize=$90;
   var $91=$q;
   var $92=$1;
   var $93=(($92+20)|0);
   HEAP32[(($93)>>2)]=$91;
   var $94=$dsize;
   var $95=$94 | 1;
   var $96=$q;
   var $97=(($96+4)|0);
   HEAP32[(($97)>>2)]=$95;
   var $98=$dsize;
   var $99=$q;
   var $100=$99;
   var $101=$dsize;
   var $102=(($100+$101)|0);
   var $103=$102;
   var $104=(($103)|0);
   HEAP32[(($104)>>2)]=$98;
   label = 117; break;
  case 11: 
   var $106=$oldfirst;
   var $107=(($106+4)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=$108 & 3;
   var $110=(($109)|(0))!=1;
   if ($110) { label = 81; break; } else { label = 12; break; }
  case 12: 
   var $112=$oldfirst;
   var $113=(($112+4)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=$114 & -8;
   $nsize=$115;
   var $116=$nsize;
   var $117=$116 >>> 3;
   var $118=(($117)>>>(0)) < 32;
   if ($118) { label = 13; break; } else { label = 31; break; }
  case 13: 
   var $120=$oldfirst;
   var $121=(($120+8)|0);
   var $122=HEAP32[(($121)>>2)];
   $F=$122;
   var $123=$oldfirst;
   var $124=(($123+12)|0);
   var $125=HEAP32[(($124)>>2)];
   $B=$125;
   var $126=$nsize;
   var $127=$126 >>> 3;
   $I=$127;
   var $128=$F;
   var $129=$I;
   var $130=$129 << 1;
   var $131=$1;
   var $132=(($131+40)|0);
   var $133=(($132+($130<<2))|0);
   var $134=$133;
   var $135=$134;
   var $136=(($128)|(0))==(($135)|(0));
   if ($136) { var $153 = 1;label = 17; break; } else { label = 14; break; }
  case 14: 
   var $138=$F;
   var $139=$138;
   var $140=$1;
   var $141=(($140+16)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=(($139)>>>(0)) >= (($142)>>>(0));
   if ($143) { label = 15; break; } else { var $151 = 0;label = 16; break; }
  case 15: 
   var $145=$F;
   var $146=(($145+12)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=$oldfirst;
   var $149=(($147)|(0))==(($148)|(0));
   var $151 = $149;label = 16; break;
  case 16: 
   var $151;
   var $153 = $151;label = 17; break;
  case 17: 
   var $153;
   var $154=(($153)&(1));
   var $155=($154);
   var $156=(($155)|(0))!=0;
   if ($156) { label = 18; break; } else { label = 29; break; }
  case 18: 
   var $158=$B;
   var $159=$F;
   var $160=(($158)|(0))==(($159)|(0));
   if ($160) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $162=$I;
   var $163=1 << $162;
   var $164=$163 ^ -1;
   var $165=$1;
   var $166=(($165)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=$167 & $164;
   HEAP32[(($166)>>2)]=$168;
   label = 28; break;
  case 20: 
   var $170=$B;
   var $171=$I;
   var $172=$171 << 1;
   var $173=$1;
   var $174=(($173+40)|0);
   var $175=(($174+($172<<2))|0);
   var $176=$175;
   var $177=$176;
   var $178=(($170)|(0))==(($177)|(0));
   if ($178) { var $195 = 1;label = 24; break; } else { label = 21; break; }
  case 21: 
   var $180=$B;
   var $181=$180;
   var $182=$1;
   var $183=(($182+16)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=(($181)>>>(0)) >= (($184)>>>(0));
   if ($185) { label = 22; break; } else { var $193 = 0;label = 23; break; }
  case 22: 
   var $187=$B;
   var $188=(($187+8)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=$oldfirst;
   var $191=(($189)|(0))==(($190)|(0));
   var $193 = $191;label = 23; break;
  case 23: 
   var $193;
   var $195 = $193;label = 24; break;
  case 24: 
   var $195;
   var $196=(($195)&(1));
   var $197=($196);
   var $198=(($197)|(0))!=0;
   if ($198) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $200=$B;
   var $201=$F;
   var $202=(($201+12)|0);
   HEAP32[(($202)>>2)]=$200;
   var $203=$F;
   var $204=$B;
   var $205=(($204+8)|0);
   HEAP32[(($205)>>2)]=$203;
   label = 27; break;
  case 26: 
   _abort();
   throw "Reached an unreachable!";
  case 27: 
   label = 28; break;
  case 28: 
   label = 30; break;
  case 29: 
   _abort();
   throw "Reached an unreachable!";
  case 30: 
   label = 80; break;
  case 31: 
   var $212=$oldfirst;
   var $213=$212;
   $TP=$213;
   var $214=$TP;
   var $215=(($214+24)|0);
   var $216=HEAP32[(($215)>>2)];
   $XP=$216;
   var $217=$TP;
   var $218=(($217+12)|0);
   var $219=HEAP32[(($218)>>2)];
   var $220=$TP;
   var $221=(($219)|(0))!=(($220)|(0));
   if ($221) { label = 32; break; } else { label = 39; break; }
  case 32: 
   var $223=$TP;
   var $224=(($223+8)|0);
   var $225=HEAP32[(($224)>>2)];
   $F1=$225;
   var $226=$TP;
   var $227=(($226+12)|0);
   var $228=HEAP32[(($227)>>2)];
   $R=$228;
   var $229=$F1;
   var $230=$229;
   var $231=$1;
   var $232=(($231+16)|0);
   var $233=HEAP32[(($232)>>2)];
   var $234=(($230)>>>(0)) >= (($233)>>>(0));
   if ($234) { label = 33; break; } else { var $248 = 0;label = 35; break; }
  case 33: 
   var $236=$F1;
   var $237=(($236+12)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239=$TP;
   var $240=(($238)|(0))==(($239)|(0));
   if ($240) { label = 34; break; } else { var $248 = 0;label = 35; break; }
  case 34: 
   var $242=$R;
   var $243=(($242+8)|0);
   var $244=HEAP32[(($243)>>2)];
   var $245=$TP;
   var $246=(($244)|(0))==(($245)|(0));
   var $248 = $246;label = 35; break;
  case 35: 
   var $248;
   var $249=(($248)&(1));
   var $250=($249);
   var $251=(($250)|(0))!=0;
   if ($251) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $253=$R;
   var $254=$F1;
   var $255=(($254+12)|0);
   HEAP32[(($255)>>2)]=$253;
   var $256=$F1;
   var $257=$R;
   var $258=(($257+8)|0);
   HEAP32[(($258)>>2)]=$256;
   label = 38; break;
  case 37: 
   _abort();
   throw "Reached an unreachable!";
  case 38: 
   label = 51; break;
  case 39: 
   var $262=$TP;
   var $263=(($262+16)|0);
   var $264=(($263+4)|0);
   $RP=$264;
   var $265=HEAP32[(($264)>>2)];
   $R=$265;
   var $266=(($265)|(0))!=0;
   if ($266) { label = 41; break; } else { label = 40; break; }
  case 40: 
   var $268=$TP;
   var $269=(($268+16)|0);
   var $270=(($269)|0);
   $RP=$270;
   var $271=HEAP32[(($270)>>2)];
   $R=$271;
   var $272=(($271)|(0))!=0;
   if ($272) { label = 41; break; } else { label = 50; break; }
  case 41: 
   label = 42; break;
  case 42: 
   var $275=$R;
   var $276=(($275+16)|0);
   var $277=(($276+4)|0);
   $CP=$277;
   var $278=HEAP32[(($277)>>2)];
   var $279=(($278)|(0))!=0;
   if ($279) { var $287 = 1;label = 44; break; } else { label = 43; break; }
  case 43: 
   var $281=$R;
   var $282=(($281+16)|0);
   var $283=(($282)|0);
   $CP=$283;
   var $284=HEAP32[(($283)>>2)];
   var $285=(($284)|(0))!=0;
   var $287 = $285;label = 44; break;
  case 44: 
   var $287;
   if ($287) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $289=$CP;
   $RP=$289;
   var $290=HEAP32[(($289)>>2)];
   $R=$290;
   label = 42; break;
  case 46: 
   var $292=$RP;
   var $293=$292;
   var $294=$1;
   var $295=(($294+16)|0);
   var $296=HEAP32[(($295)>>2)];
   var $297=(($293)>>>(0)) >= (($296)>>>(0));
   var $298=(($297)&(1));
   var $299=($298);
   var $300=(($299)|(0))!=0;
   if ($300) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $302=$RP;
   HEAP32[(($302)>>2)]=0;
   label = 49; break;
  case 48: 
   _abort();
   throw "Reached an unreachable!";
  case 49: 
   label = 50; break;
  case 50: 
   label = 51; break;
  case 51: 
   var $307=$XP;
   var $308=(($307)|(0))!=0;
   if ($308) { label = 52; break; } else { label = 79; break; }
  case 52: 
   var $310=$TP;
   var $311=(($310+28)|0);
   var $312=HEAP32[(($311)>>2)];
   var $313=$1;
   var $314=(($313+304)|0);
   var $315=(($314+($312<<2))|0);
   $H=$315;
   var $316=$TP;
   var $317=$H;
   var $318=HEAP32[(($317)>>2)];
   var $319=(($316)|(0))==(($318)|(0));
   if ($319) { label = 53; break; } else { label = 56; break; }
  case 53: 
   var $321=$R;
   var $322=$H;
   HEAP32[(($322)>>2)]=$321;
   var $323=(($321)|(0))==0;
   if ($323) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $325=$TP;
   var $326=(($325+28)|0);
   var $327=HEAP32[(($326)>>2)];
   var $328=1 << $327;
   var $329=$328 ^ -1;
   var $330=$1;
   var $331=(($330+4)|0);
   var $332=HEAP32[(($331)>>2)];
   var $333=$332 & $329;
   HEAP32[(($331)>>2)]=$333;
   label = 55; break;
  case 55: 
   label = 63; break;
  case 56: 
   var $336=$XP;
   var $337=$336;
   var $338=$1;
   var $339=(($338+16)|0);
   var $340=HEAP32[(($339)>>2)];
   var $341=(($337)>>>(0)) >= (($340)>>>(0));
   var $342=(($341)&(1));
   var $343=($342);
   var $344=(($343)|(0))!=0;
   if ($344) { label = 57; break; } else { label = 61; break; }
  case 57: 
   var $346=$XP;
   var $347=(($346+16)|0);
   var $348=(($347)|0);
   var $349=HEAP32[(($348)>>2)];
   var $350=$TP;
   var $351=(($349)|(0))==(($350)|(0));
   if ($351) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $353=$R;
   var $354=$XP;
   var $355=(($354+16)|0);
   var $356=(($355)|0);
   HEAP32[(($356)>>2)]=$353;
   label = 60; break;
  case 59: 
   var $358=$R;
   var $359=$XP;
   var $360=(($359+16)|0);
   var $361=(($360+4)|0);
   HEAP32[(($361)>>2)]=$358;
   label = 60; break;
  case 60: 
   label = 62; break;
  case 61: 
   _abort();
   throw "Reached an unreachable!";
  case 62: 
   label = 63; break;
  case 63: 
   var $366=$R;
   var $367=(($366)|(0))!=0;
   if ($367) { label = 64; break; } else { label = 78; break; }
  case 64: 
   var $369=$R;
   var $370=$369;
   var $371=$1;
   var $372=(($371+16)|0);
   var $373=HEAP32[(($372)>>2)];
   var $374=(($370)>>>(0)) >= (($373)>>>(0));
   var $375=(($374)&(1));
   var $376=($375);
   var $377=(($376)|(0))!=0;
   if ($377) { label = 65; break; } else { label = 76; break; }
  case 65: 
   var $379=$XP;
   var $380=$R;
   var $381=(($380+24)|0);
   HEAP32[(($381)>>2)]=$379;
   var $382=$TP;
   var $383=(($382+16)|0);
   var $384=(($383)|0);
   var $385=HEAP32[(($384)>>2)];
   $C0=$385;
   var $386=(($385)|(0))!=0;
   if ($386) { label = 66; break; } else { label = 70; break; }
  case 66: 
   var $388=$C0;
   var $389=$388;
   var $390=$1;
   var $391=(($390+16)|0);
   var $392=HEAP32[(($391)>>2)];
   var $393=(($389)>>>(0)) >= (($392)>>>(0));
   var $394=(($393)&(1));
   var $395=($394);
   var $396=(($395)|(0))!=0;
   if ($396) { label = 67; break; } else { label = 68; break; }
  case 67: 
   var $398=$C0;
   var $399=$R;
   var $400=(($399+16)|0);
   var $401=(($400)|0);
   HEAP32[(($401)>>2)]=$398;
   var $402=$R;
   var $403=$C0;
   var $404=(($403+24)|0);
   HEAP32[(($404)>>2)]=$402;
   label = 69; break;
  case 68: 
   _abort();
   throw "Reached an unreachable!";
  case 69: 
   label = 70; break;
  case 70: 
   var $408=$TP;
   var $409=(($408+16)|0);
   var $410=(($409+4)|0);
   var $411=HEAP32[(($410)>>2)];
   $C1=$411;
   var $412=(($411)|(0))!=0;
   if ($412) { label = 71; break; } else { label = 75; break; }
  case 71: 
   var $414=$C1;
   var $415=$414;
   var $416=$1;
   var $417=(($416+16)|0);
   var $418=HEAP32[(($417)>>2)];
   var $419=(($415)>>>(0)) >= (($418)>>>(0));
   var $420=(($419)&(1));
   var $421=($420);
   var $422=(($421)|(0))!=0;
   if ($422) { label = 72; break; } else { label = 73; break; }
  case 72: 
   var $424=$C1;
   var $425=$R;
   var $426=(($425+16)|0);
   var $427=(($426+4)|0);
   HEAP32[(($427)>>2)]=$424;
   var $428=$R;
   var $429=$C1;
   var $430=(($429+24)|0);
   HEAP32[(($430)>>2)]=$428;
   label = 74; break;
  case 73: 
   _abort();
   throw "Reached an unreachable!";
  case 74: 
   label = 75; break;
  case 75: 
   label = 77; break;
  case 76: 
   _abort();
   throw "Reached an unreachable!";
  case 77: 
   label = 78; break;
  case 78: 
   label = 79; break;
  case 79: 
   label = 80; break;
  case 80: 
   var $439=$oldfirst;
   var $440=$439;
   var $441=$nsize;
   var $442=(($440+$441)|0);
   var $443=$442;
   $oldfirst=$443;
   var $444=$nsize;
   var $445=$qsize;
   var $446=((($445)+($444))|0);
   $qsize=$446;
   label = 81; break;
  case 81: 
   var $448=$oldfirst;
   var $449=(($448+4)|0);
   var $450=HEAP32[(($449)>>2)];
   var $451=$450 & -2;
   HEAP32[(($449)>>2)]=$451;
   var $452=$qsize;
   var $453=$452 | 1;
   var $454=$q;
   var $455=(($454+4)|0);
   HEAP32[(($455)>>2)]=$453;
   var $456=$qsize;
   var $457=$q;
   var $458=$457;
   var $459=$qsize;
   var $460=(($458+$459)|0);
   var $461=$460;
   var $462=(($461)|0);
   HEAP32[(($462)>>2)]=$456;
   var $463=$qsize;
   var $464=$463 >>> 3;
   var $465=(($464)>>>(0)) < 32;
   if ($465) { label = 82; break; } else { label = 89; break; }
  case 82: 
   var $467=$qsize;
   var $468=$467 >>> 3;
   $I2=$468;
   var $469=$I2;
   var $470=$469 << 1;
   var $471=$1;
   var $472=(($471+40)|0);
   var $473=(($472+($470<<2))|0);
   var $474=$473;
   var $475=$474;
   $B3=$475;
   var $476=$B3;
   $F4=$476;
   var $477=$1;
   var $478=(($477)|0);
   var $479=HEAP32[(($478)>>2)];
   var $480=$I2;
   var $481=1 << $480;
   var $482=$479 & $481;
   var $483=(($482)|(0))!=0;
   if ($483) { label = 84; break; } else { label = 83; break; }
  case 83: 
   var $485=$I2;
   var $486=1 << $485;
   var $487=$1;
   var $488=(($487)|0);
   var $489=HEAP32[(($488)>>2)];
   var $490=$489 | $486;
   HEAP32[(($488)>>2)]=$490;
   label = 88; break;
  case 84: 
   var $492=$B3;
   var $493=(($492+8)|0);
   var $494=HEAP32[(($493)>>2)];
   var $495=$494;
   var $496=$1;
   var $497=(($496+16)|0);
   var $498=HEAP32[(($497)>>2)];
   var $499=(($495)>>>(0)) >= (($498)>>>(0));
   var $500=(($499)&(1));
   var $501=($500);
   var $502=(($501)|(0))!=0;
   if ($502) { label = 85; break; } else { label = 86; break; }
  case 85: 
   var $504=$B3;
   var $505=(($504+8)|0);
   var $506=HEAP32[(($505)>>2)];
   $F4=$506;
   label = 87; break;
  case 86: 
   _abort();
   throw "Reached an unreachable!";
  case 87: 
   label = 88; break;
  case 88: 
   var $510=$q;
   var $511=$B3;
   var $512=(($511+8)|0);
   HEAP32[(($512)>>2)]=$510;
   var $513=$q;
   var $514=$F4;
   var $515=(($514+12)|0);
   HEAP32[(($515)>>2)]=$513;
   var $516=$F4;
   var $517=$q;
   var $518=(($517+8)|0);
   HEAP32[(($518)>>2)]=$516;
   var $519=$B3;
   var $520=$q;
   var $521=(($520+12)|0);
   HEAP32[(($521)>>2)]=$519;
   label = 116; break;
  case 89: 
   var $523=$q;
   var $524=$523;
   $TP5=$524;
   var $525=$qsize;
   var $526=$525 >>> 8;
   $X=$526;
   var $527=$X;
   var $528=(($527)|(0))==0;
   if ($528) { label = 90; break; } else { label = 91; break; }
  case 90: 
   $I7=0;
   label = 95; break;
  case 91: 
   var $531=$X;
   var $532=(($531)>>>(0)) > 65535;
   if ($532) { label = 92; break; } else { label = 93; break; }
  case 92: 
   $I7=31;
   label = 94; break;
  case 93: 
   var $535=$X;
   $Y=$535;
   var $536=$Y;
   var $537=((($536)-(256))|0);
   var $538=$537 >>> 16;
   var $539=$538 & 8;
   $N=$539;
   var $540=$N;
   var $541=$Y;
   var $542=$541 << $540;
   $Y=$542;
   var $543=((($542)-(4096))|0);
   var $544=$543 >>> 16;
   var $545=$544 & 4;
   $K=$545;
   var $546=$K;
   var $547=$N;
   var $548=((($547)+($546))|0);
   $N=$548;
   var $549=$K;
   var $550=$Y;
   var $551=$550 << $549;
   $Y=$551;
   var $552=((($551)-(16384))|0);
   var $553=$552 >>> 16;
   var $554=$553 & 2;
   $K=$554;
   var $555=$N;
   var $556=((($555)+($554))|0);
   $N=$556;
   var $557=$N;
   var $558=(((14)-($557))|0);
   var $559=$K;
   var $560=$Y;
   var $561=$560 << $559;
   $Y=$561;
   var $562=$561 >>> 15;
   var $563=((($558)+($562))|0);
   $K=$563;
   var $564=$K;
   var $565=$564 << 1;
   var $566=$qsize;
   var $567=$K;
   var $568=((($567)+(7))|0);
   var $569=$566 >>> (($568)>>>(0));
   var $570=$569 & 1;
   var $571=((($565)+($570))|0);
   $I7=$571;
   label = 94; break;
  case 94: 
   label = 95; break;
  case 95: 
   var $574=$I7;
   var $575=$1;
   var $576=(($575+304)|0);
   var $577=(($576+($574<<2))|0);
   $H6=$577;
   var $578=$I7;
   var $579=$TP5;
   var $580=(($579+28)|0);
   HEAP32[(($580)>>2)]=$578;
   var $581=$TP5;
   var $582=(($581+16)|0);
   var $583=(($582+4)|0);
   HEAP32[(($583)>>2)]=0;
   var $584=$TP5;
   var $585=(($584+16)|0);
   var $586=(($585)|0);
   HEAP32[(($586)>>2)]=0;
   var $587=$1;
   var $588=(($587+4)|0);
   var $589=HEAP32[(($588)>>2)];
   var $590=$I7;
   var $591=1 << $590;
   var $592=$589 & $591;
   var $593=(($592)|(0))!=0;
   if ($593) { label = 97; break; } else { label = 96; break; }
  case 96: 
   var $595=$I7;
   var $596=1 << $595;
   var $597=$1;
   var $598=(($597+4)|0);
   var $599=HEAP32[(($598)>>2)];
   var $600=$599 | $596;
   HEAP32[(($598)>>2)]=$600;
   var $601=$TP5;
   var $602=$H6;
   HEAP32[(($602)>>2)]=$601;
   var $603=$H6;
   var $604=$603;
   var $605=$TP5;
   var $606=(($605+24)|0);
   HEAP32[(($606)>>2)]=$604;
   var $607=$TP5;
   var $608=$TP5;
   var $609=(($608+12)|0);
   HEAP32[(($609)>>2)]=$607;
   var $610=$TP5;
   var $611=(($610+8)|0);
   HEAP32[(($611)>>2)]=$607;
   label = 115; break;
  case 97: 
   var $613=$H6;
   var $614=HEAP32[(($613)>>2)];
   $T=$614;
   var $615=$qsize;
   var $616=$I7;
   var $617=(($616)|(0))==31;
   if ($617) { label = 98; break; } else { label = 99; break; }
  case 98: 
   var $626 = 0;label = 100; break;
  case 99: 
   var $620=$I7;
   var $621=$620 >>> 1;
   var $622=((($621)+(8))|0);
   var $623=((($622)-(2))|0);
   var $624=(((31)-($623))|0);
   var $626 = $624;label = 100; break;
  case 100: 
   var $626;
   var $627=$615 << $626;
   $K8=$627;
   label = 101; break;
  case 101: 
   var $629=$T;
   var $630=(($629+4)|0);
   var $631=HEAP32[(($630)>>2)];
   var $632=$631 & -8;
   var $633=$qsize;
   var $634=(($632)|(0))!=(($633)|(0));
   if ($634) { label = 102; break; } else { label = 108; break; }
  case 102: 
   var $636=$K8;
   var $637=$636 >>> 31;
   var $638=$637 & 1;
   var $639=$T;
   var $640=(($639+16)|0);
   var $641=(($640+($638<<2))|0);
   $C=$641;
   var $642=$K8;
   var $643=$642 << 1;
   $K8=$643;
   var $644=$C;
   var $645=HEAP32[(($644)>>2)];
   var $646=(($645)|(0))!=0;
   if ($646) { label = 103; break; } else { label = 104; break; }
  case 103: 
   var $648=$C;
   var $649=HEAP32[(($648)>>2)];
   $T=$649;
   label = 107; break;
  case 104: 
   var $651=$C;
   var $652=$651;
   var $653=$1;
   var $654=(($653+16)|0);
   var $655=HEAP32[(($654)>>2)];
   var $656=(($652)>>>(0)) >= (($655)>>>(0));
   var $657=(($656)&(1));
   var $658=($657);
   var $659=(($658)|(0))!=0;
   if ($659) { label = 105; break; } else { label = 106; break; }
  case 105: 
   var $661=$TP5;
   var $662=$C;
   HEAP32[(($662)>>2)]=$661;
   var $663=$T;
   var $664=$TP5;
   var $665=(($664+24)|0);
   HEAP32[(($665)>>2)]=$663;
   var $666=$TP5;
   var $667=$TP5;
   var $668=(($667+12)|0);
   HEAP32[(($668)>>2)]=$666;
   var $669=$TP5;
   var $670=(($669+8)|0);
   HEAP32[(($670)>>2)]=$666;
   label = 114; break;
  case 106: 
   _abort();
   throw "Reached an unreachable!";
  case 107: 
   label = 113; break;
  case 108: 
   var $674=$T;
   var $675=(($674+8)|0);
   var $676=HEAP32[(($675)>>2)];
   $F9=$676;
   var $677=$T;
   var $678=$677;
   var $679=$1;
   var $680=(($679+16)|0);
   var $681=HEAP32[(($680)>>2)];
   var $682=(($678)>>>(0)) >= (($681)>>>(0));
   if ($682) { label = 109; break; } else { var $691 = 0;label = 110; break; }
  case 109: 
   var $684=$F9;
   var $685=$684;
   var $686=$1;
   var $687=(($686+16)|0);
   var $688=HEAP32[(($687)>>2)];
   var $689=(($685)>>>(0)) >= (($688)>>>(0));
   var $691 = $689;label = 110; break;
  case 110: 
   var $691;
   var $692=(($691)&(1));
   var $693=($692);
   var $694=(($693)|(0))!=0;
   if ($694) { label = 111; break; } else { label = 112; break; }
  case 111: 
   var $696=$TP5;
   var $697=$F9;
   var $698=(($697+12)|0);
   HEAP32[(($698)>>2)]=$696;
   var $699=$T;
   var $700=(($699+8)|0);
   HEAP32[(($700)>>2)]=$696;
   var $701=$F9;
   var $702=$TP5;
   var $703=(($702+8)|0);
   HEAP32[(($703)>>2)]=$701;
   var $704=$T;
   var $705=$TP5;
   var $706=(($705+12)|0);
   HEAP32[(($706)>>2)]=$704;
   var $707=$TP5;
   var $708=(($707+24)|0);
   HEAP32[(($708)>>2)]=0;
   label = 114; break;
  case 112: 
   _abort();
   throw "Reached an unreachable!";
  case 113: 
   label = 101; break;
  case 114: 
   label = 115; break;
  case 115: 
   label = 116; break;
  case 116: 
   label = 117; break;
  case 117: 
   label = 118; break;
  case 118: 
   var $716=$p;
   var $717=$716;
   var $718=(($717+8)|0);
   return $718;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt9bad_alloc4whatEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return ((2320)|0);
}
function __ZSt15get_new_handlerv() {
 var label = 0;
 var $1=(tempValue=HEAP32[((20360)>>2)],HEAP32[((20360)>>2)]=tempValue+0,tempValue);
 var $2=$1;
 return $2;
}
function __ZNSt9bad_allocC2Ev($this) {
 var label = 0;
 var $1;
 var $2;
 $2=$this;
 var $3=$2;
 var $4=$3;
 $1=$4;
 var $5=$1;
 var $6=$5;
 HEAP32[(($6)>>2)]=((10880)|0);
 var $7=$3;
 HEAP32[(($7)>>2)]=((10912)|0);
 return;
}
function __ZdlPv($ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$ptr;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=$1;
   _free($5);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZdaPv($ptr) {
 var label = 0;
 var $1;
 $1=$ptr;
 var $2=$1;
 __ZdlPv($2);
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZNSt9bad_allocD2Ev($2);
 var $3=$2;
 __ZdlPv($3);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZNSt9exceptionD2Ev($3);
 return;
}
function _add_segment($m, $tbase, $tsize, $mmapped) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $old_top;
   var $oldsp;
   var $old_end;
   var $ssize;
   var $rawsp;
   var $offset;
   var $asp;
   var $csp;
   var $sp;
   var $ss;
   var $tnext;
   var $p;
   var $nfences;
   var $nextp;
   var $q;
   var $psize;
   var $tn;
   var $I;
   var $B;
   var $F;
   var $TP;
   var $H;
   var $I1;
   var $X;
   var $Y;
   var $N;
   var $K;
   var $T;
   var $K2;
   var $C;
   var $F3;
   $1=$m;
   $2=$tbase;
   $3=$tsize;
   $4=$mmapped;
   var $5=$1;
   var $6=(($5+24)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   $old_top=$8;
   var $9=$1;
   var $10=$old_top;
   var $11=_segment_holding($9, $10);
   $oldsp=$11;
   var $12=$oldsp;
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$oldsp;
   var $16=(($15+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($14+$17)|0);
   $old_end=$18;
   $ssize=24;
   var $19=$old_end;
   var $20=$ssize;
   var $21=((($20)+(16))|0);
   var $22=((($21)+(7))|0);
   var $23=(((-$22))|0);
   var $24=(($19+$23)|0);
   $rawsp=$24;
   var $25=$rawsp;
   var $26=(($25+8)|0);
   var $27=$26;
   var $28=$27 & 7;
   var $29=(($28)|(0))==0;
   if ($29) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $39 = 0;label = 4; break;
  case 3: 
   var $32=$rawsp;
   var $33=(($32+8)|0);
   var $34=$33;
   var $35=$34 & 7;
   var $36=(((8)-($35))|0);
   var $37=$36 & 7;
   var $39 = $37;label = 4; break;
  case 4: 
   var $39;
   $offset=$39;
   var $40=$rawsp;
   var $41=$offset;
   var $42=(($40+$41)|0);
   $asp=$42;
   var $43=$asp;
   var $44=$old_top;
   var $45=(($44+16)|0);
   var $46=(($43)>>>(0)) < (($45)>>>(0));
   if ($46) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $48=$old_top;
   var $52 = $48;label = 7; break;
  case 6: 
   var $50=$asp;
   var $52 = $50;label = 7; break;
  case 7: 
   var $52;
   $csp=$52;
   var $53=$csp;
   var $54=$53;
   $sp=$54;
   var $55=$sp;
   var $56=$55;
   var $57=(($56+8)|0);
   var $58=$57;
   $ss=$58;
   var $59=$sp;
   var $60=$59;
   var $61=$ssize;
   var $62=(($60+$61)|0);
   var $63=$62;
   $tnext=$63;
   var $64=$tnext;
   $p=$64;
   $nfences=0;
   var $65=$1;
   var $66=$2;
   var $67=$66;
   var $68=$3;
   var $69=((($68)-(40))|0);
   _init_top($65, $67, $69);
   var $70=$ssize;
   var $71=$70 | 1;
   var $72=$71 | 2;
   var $73=$sp;
   var $74=(($73+4)|0);
   HEAP32[(($74)>>2)]=$72;
   var $75=$ss;
   var $76=$1;
   var $77=(($76+448)|0);
   var $78=$75;
   var $79=$77;
   assert(16 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($79)+(8))>>2)];HEAP32[((($78)+(12))>>2)]=HEAP32[((($79)+(12))>>2)];
   var $80=$2;
   var $81=$1;
   var $82=(($81+448)|0);
   var $83=(($82)|0);
   HEAP32[(($83)>>2)]=$80;
   var $84=$3;
   var $85=$1;
   var $86=(($85+448)|0);
   var $87=(($86+4)|0);
   HEAP32[(($87)>>2)]=$84;
   var $88=$4;
   var $89=$1;
   var $90=(($89+448)|0);
   var $91=(($90+12)|0);
   HEAP32[(($91)>>2)]=$88;
   var $92=$ss;
   var $93=$1;
   var $94=(($93+448)|0);
   var $95=(($94+8)|0);
   HEAP32[(($95)>>2)]=$92;
   label = 8; break;
  case 8: 
   var $97=$p;
   var $98=$97;
   var $99=(($98+4)|0);
   var $100=$99;
   $nextp=$100;
   var $101=$p;
   var $102=(($101+4)|0);
   HEAP32[(($102)>>2)]=7;
   var $103=$nfences;
   var $104=((($103)+(1))|0);
   $nfences=$104;
   var $105=$nextp;
   var $106=(($105+4)|0);
   var $107=$106;
   var $108=$old_end;
   var $109=(($107)>>>(0)) < (($108)>>>(0));
   if ($109) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $111=$nextp;
   $p=$111;
   label = 11; break;
  case 10: 
   label = 12; break;
  case 11: 
   label = 8; break;
  case 12: 
   var $115=$csp;
   var $116=$old_top;
   var $117=(($115)|(0))!=(($116)|(0));
   if ($117) { label = 13; break; } else { label = 49; break; }
  case 13: 
   var $119=$old_top;
   var $120=$119;
   $q=$120;
   var $121=$csp;
   var $122=$old_top;
   var $123=$121;
   var $124=$122;
   var $125=((($123)-($124))|0);
   $psize=$125;
   var $126=$q;
   var $127=$126;
   var $128=$psize;
   var $129=(($127+$128)|0);
   var $130=$129;
   $tn=$130;
   var $131=$tn;
   var $132=(($131+4)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=$133 & -2;
   HEAP32[(($132)>>2)]=$134;
   var $135=$psize;
   var $136=$135 | 1;
   var $137=$q;
   var $138=(($137+4)|0);
   HEAP32[(($138)>>2)]=$136;
   var $139=$psize;
   var $140=$q;
   var $141=$140;
   var $142=$psize;
   var $143=(($141+$142)|0);
   var $144=$143;
   var $145=(($144)|0);
   HEAP32[(($145)>>2)]=$139;
   var $146=$psize;
   var $147=$146 >>> 3;
   var $148=(($147)>>>(0)) < 32;
   if ($148) { label = 14; break; } else { label = 21; break; }
  case 14: 
   var $150=$psize;
   var $151=$150 >>> 3;
   $I=$151;
   var $152=$I;
   var $153=$152 << 1;
   var $154=$1;
   var $155=(($154+40)|0);
   var $156=(($155+($153<<2))|0);
   var $157=$156;
   var $158=$157;
   $B=$158;
   var $159=$B;
   $F=$159;
   var $160=$1;
   var $161=(($160)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=$I;
   var $164=1 << $163;
   var $165=$162 & $164;
   var $166=(($165)|(0))!=0;
   if ($166) { label = 16; break; } else { label = 15; break; }
  case 15: 
   var $168=$I;
   var $169=1 << $168;
   var $170=$1;
   var $171=(($170)|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=$172 | $169;
   HEAP32[(($171)>>2)]=$173;
   label = 20; break;
  case 16: 
   var $175=$B;
   var $176=(($175+8)|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=$177;
   var $179=$1;
   var $180=(($179+16)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($178)>>>(0)) >= (($181)>>>(0));
   var $183=(($182)&(1));
   var $184=($183);
   var $185=(($184)|(0))!=0;
   if ($185) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $187=$B;
   var $188=(($187+8)|0);
   var $189=HEAP32[(($188)>>2)];
   $F=$189;
   label = 19; break;
  case 18: 
   _abort();
   throw "Reached an unreachable!";
  case 19: 
   label = 20; break;
  case 20: 
   var $193=$q;
   var $194=$B;
   var $195=(($194+8)|0);
   HEAP32[(($195)>>2)]=$193;
   var $196=$q;
   var $197=$F;
   var $198=(($197+12)|0);
   HEAP32[(($198)>>2)]=$196;
   var $199=$F;
   var $200=$q;
   var $201=(($200+8)|0);
   HEAP32[(($201)>>2)]=$199;
   var $202=$B;
   var $203=$q;
   var $204=(($203+12)|0);
   HEAP32[(($204)>>2)]=$202;
   label = 48; break;
  case 21: 
   var $206=$q;
   var $207=$206;
   $TP=$207;
   var $208=$psize;
   var $209=$208 >>> 8;
   $X=$209;
   var $210=$X;
   var $211=(($210)|(0))==0;
   if ($211) { label = 22; break; } else { label = 23; break; }
  case 22: 
   $I1=0;
   label = 27; break;
  case 23: 
   var $214=$X;
   var $215=(($214)>>>(0)) > 65535;
   if ($215) { label = 24; break; } else { label = 25; break; }
  case 24: 
   $I1=31;
   label = 26; break;
  case 25: 
   var $218=$X;
   $Y=$218;
   var $219=$Y;
   var $220=((($219)-(256))|0);
   var $221=$220 >>> 16;
   var $222=$221 & 8;
   $N=$222;
   var $223=$N;
   var $224=$Y;
   var $225=$224 << $223;
   $Y=$225;
   var $226=((($225)-(4096))|0);
   var $227=$226 >>> 16;
   var $228=$227 & 4;
   $K=$228;
   var $229=$K;
   var $230=$N;
   var $231=((($230)+($229))|0);
   $N=$231;
   var $232=$K;
   var $233=$Y;
   var $234=$233 << $232;
   $Y=$234;
   var $235=((($234)-(16384))|0);
   var $236=$235 >>> 16;
   var $237=$236 & 2;
   $K=$237;
   var $238=$N;
   var $239=((($238)+($237))|0);
   $N=$239;
   var $240=$N;
   var $241=(((14)-($240))|0);
   var $242=$K;
   var $243=$Y;
   var $244=$243 << $242;
   $Y=$244;
   var $245=$244 >>> 15;
   var $246=((($241)+($245))|0);
   $K=$246;
   var $247=$K;
   var $248=$247 << 1;
   var $249=$psize;
   var $250=$K;
   var $251=((($250)+(7))|0);
   var $252=$249 >>> (($251)>>>(0));
   var $253=$252 & 1;
   var $254=((($248)+($253))|0);
   $I1=$254;
   label = 26; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $257=$I1;
   var $258=$1;
   var $259=(($258+304)|0);
   var $260=(($259+($257<<2))|0);
   $H=$260;
   var $261=$I1;
   var $262=$TP;
   var $263=(($262+28)|0);
   HEAP32[(($263)>>2)]=$261;
   var $264=$TP;
   var $265=(($264+16)|0);
   var $266=(($265+4)|0);
   HEAP32[(($266)>>2)]=0;
   var $267=$TP;
   var $268=(($267+16)|0);
   var $269=(($268)|0);
   HEAP32[(($269)>>2)]=0;
   var $270=$1;
   var $271=(($270+4)|0);
   var $272=HEAP32[(($271)>>2)];
   var $273=$I1;
   var $274=1 << $273;
   var $275=$272 & $274;
   var $276=(($275)|(0))!=0;
   if ($276) { label = 29; break; } else { label = 28; break; }
  case 28: 
   var $278=$I1;
   var $279=1 << $278;
   var $280=$1;
   var $281=(($280+4)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=$282 | $279;
   HEAP32[(($281)>>2)]=$283;
   var $284=$TP;
   var $285=$H;
   HEAP32[(($285)>>2)]=$284;
   var $286=$H;
   var $287=$286;
   var $288=$TP;
   var $289=(($288+24)|0);
   HEAP32[(($289)>>2)]=$287;
   var $290=$TP;
   var $291=$TP;
   var $292=(($291+12)|0);
   HEAP32[(($292)>>2)]=$290;
   var $293=$TP;
   var $294=(($293+8)|0);
   HEAP32[(($294)>>2)]=$290;
   label = 47; break;
  case 29: 
   var $296=$H;
   var $297=HEAP32[(($296)>>2)];
   $T=$297;
   var $298=$psize;
   var $299=$I1;
   var $300=(($299)|(0))==31;
   if ($300) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $309 = 0;label = 32; break;
  case 31: 
   var $303=$I1;
   var $304=$303 >>> 1;
   var $305=((($304)+(8))|0);
   var $306=((($305)-(2))|0);
   var $307=(((31)-($306))|0);
   var $309 = $307;label = 32; break;
  case 32: 
   var $309;
   var $310=$298 << $309;
   $K2=$310;
   label = 33; break;
  case 33: 
   var $312=$T;
   var $313=(($312+4)|0);
   var $314=HEAP32[(($313)>>2)];
   var $315=$314 & -8;
   var $316=$psize;
   var $317=(($315)|(0))!=(($316)|(0));
   if ($317) { label = 34; break; } else { label = 40; break; }
  case 34: 
   var $319=$K2;
   var $320=$319 >>> 31;
   var $321=$320 & 1;
   var $322=$T;
   var $323=(($322+16)|0);
   var $324=(($323+($321<<2))|0);
   $C=$324;
   var $325=$K2;
   var $326=$325 << 1;
   $K2=$326;
   var $327=$C;
   var $328=HEAP32[(($327)>>2)];
   var $329=(($328)|(0))!=0;
   if ($329) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $331=$C;
   var $332=HEAP32[(($331)>>2)];
   $T=$332;
   label = 39; break;
  case 36: 
   var $334=$C;
   var $335=$334;
   var $336=$1;
   var $337=(($336+16)|0);
   var $338=HEAP32[(($337)>>2)];
   var $339=(($335)>>>(0)) >= (($338)>>>(0));
   var $340=(($339)&(1));
   var $341=($340);
   var $342=(($341)|(0))!=0;
   if ($342) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $344=$TP;
   var $345=$C;
   HEAP32[(($345)>>2)]=$344;
   var $346=$T;
   var $347=$TP;
   var $348=(($347+24)|0);
   HEAP32[(($348)>>2)]=$346;
   var $349=$TP;
   var $350=$TP;
   var $351=(($350+12)|0);
   HEAP32[(($351)>>2)]=$349;
   var $352=$TP;
   var $353=(($352+8)|0);
   HEAP32[(($353)>>2)]=$349;
   label = 46; break;
  case 38: 
   _abort();
   throw "Reached an unreachable!";
  case 39: 
   label = 45; break;
  case 40: 
   var $357=$T;
   var $358=(($357+8)|0);
   var $359=HEAP32[(($358)>>2)];
   $F3=$359;
   var $360=$T;
   var $361=$360;
   var $362=$1;
   var $363=(($362+16)|0);
   var $364=HEAP32[(($363)>>2)];
   var $365=(($361)>>>(0)) >= (($364)>>>(0));
   if ($365) { label = 41; break; } else { var $374 = 0;label = 42; break; }
  case 41: 
   var $367=$F3;
   var $368=$367;
   var $369=$1;
   var $370=(($369+16)|0);
   var $371=HEAP32[(($370)>>2)];
   var $372=(($368)>>>(0)) >= (($371)>>>(0));
   var $374 = $372;label = 42; break;
  case 42: 
   var $374;
   var $375=(($374)&(1));
   var $376=($375);
   var $377=(($376)|(0))!=0;
   if ($377) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $379=$TP;
   var $380=$F3;
   var $381=(($380+12)|0);
   HEAP32[(($381)>>2)]=$379;
   var $382=$T;
   var $383=(($382+8)|0);
   HEAP32[(($383)>>2)]=$379;
   var $384=$F3;
   var $385=$TP;
   var $386=(($385+8)|0);
   HEAP32[(($386)>>2)]=$384;
   var $387=$T;
   var $388=$TP;
   var $389=(($388+12)|0);
   HEAP32[(($389)>>2)]=$387;
   var $390=$TP;
   var $391=(($390+24)|0);
   HEAP32[(($391)>>2)]=0;
   label = 46; break;
  case 44: 
   _abort();
   throw "Reached an unreachable!";
  case 45: 
   label = 33; break;
  case 46: 
   label = 47; break;
  case 47: 
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Znwj($size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $p;
   var $nh;
   var $2;
   var $3;
   $1=$size;
   var $4=$1;
   var $5=(($4)|(0))==0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=1;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $9=$1;
   var $10=_malloc($9);
   $p=$10;
   var $11=(($10)|(0))==0;
   if ($11) { label = 5; break; } else { label = 13; break; }
  case 5: 
   var $13=__ZSt15get_new_handlerv();
   $nh=$13;
   var $14=$nh;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 6; break; } else { label = 11; break; }
  case 6: 
   var $17=$nh;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$17]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 12; break;
  case 8: 
   var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
   var $21=$20$0;
   $2=$21;
   var $22=$20$1;
   $3=$22;
   label = 9; break;
  case 9: 
   var $24=$3;
   var $25=(($24)|(0)) < 0;
   if ($25) { label = 10; break; } else { label = 14; break; }
  case 10: 
   var $27=$2;
   ___cxa_call_unexpected($27);
   throw "Reached an unreachable!";
  case 11: 
   var $29=___cxa_allocate_exception(4);
   var $30=$29;
   __ZNSt9bad_allocC2Ev($30);
   (function() { try { __THREW__ = 0; return ___cxa_throw($29, 17344, (424)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 15; break; } else { label = 8; break; }
  case 12: 
   label = 4; break;
  case 13: 
   var $33=$p;
   return $33;
  case 14: 
   var $35=$2;
   var $36=$3;
   var $37$0=$35;
   var $37$1=0;
   var $38$0=$37$0;
   var $38$1=$36;
   ___resumeException($38$0)
  case 15: 
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Znaj($size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$size;
   var $4=$1;
   var $5 = (function() { try { __THREW__ = 0; return __Znwj($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   return $5;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   label = 4; break;
  case 4: 
   var $12=$3;
   var $13=(($12)|(0)) < 0;
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $15=$2;
   ___cxa_call_unexpected($15);
   throw "Reached an unreachable!";
  case 6: 
   var $17=$2;
   var $18=$3;
   var $19$0=$17;
   var $19$1=0;
   var $20$0=$19$0;
   var $20$1=$18;
   ___resumeException($20$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZSt17__throw_bad_allocv() {
 var label = 0;
 var $1=___cxa_allocate_exception(4);
 var $2=$1;
 __ZNSt9bad_allocC2Ev($2);
 ___cxa_throw($1, 17344, (424));
 throw "Reached an unreachable!";
 return;
}
function _strtod($string, $endPtr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $sign;
   var $expSign;
   var $fraction;
   var $dblExp;
   var $d;
   var $p;
   var $c;
   var $exp;
   var $fracExp;
   var $mantSize;
   var $decPt;
   var $pExp;
   var $frac1;
   var $frac2;
   $2=$string;
   $3=$endPtr;
   $expSign=0;
   $exp=0;
   $fracExp=0;
   var $4=$2;
   $p=$4;
   label = 2; break;
  case 2: 
   var $6=$p;
   var $7=HEAP8[($6)];
   var $8=(($7 << 24) >> 24);
   var $9=_isspace($8);
   var $10=(($9)|(0))!=0;
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $12=$p;
   var $13=(($12+1)|0);
   $p=$13;
   label = 2; break;
  case 4: 
   var $15=$p;
   var $16=HEAP8[($15)];
   var $17=(($16 << 24) >> 24);
   var $18=(($17)|(0))==45;
   if ($18) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $sign=1;
   var $20=$p;
   var $21=(($20+1)|0);
   $p=$21;
   label = 9; break;
  case 6: 
   var $23=$p;
   var $24=HEAP8[($23)];
   var $25=(($24 << 24) >> 24);
   var $26=(($25)|(0))==43;
   if ($26) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $28=$p;
   var $29=(($28+1)|0);
   $p=$29;
   label = 8; break;
  case 8: 
   $sign=0;
   label = 9; break;
  case 9: 
   $decPt=-1;
   $mantSize=0;
   label = 10; break;
  case 10: 
   var $33=$p;
   var $34=HEAP8[($33)];
   var $35=(($34 << 24) >> 24);
   $c=$35;
   var $36=$c;
   var $37=_isdigit($36);
   var $38=(($37)|(0))!=0;
   if ($38) { label = 15; break; } else { label = 11; break; }
  case 11: 
   var $40=$c;
   var $41=(($40)|(0))!=46;
   if ($41) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $43=$decPt;
   var $44=(($43)|(0)) >= 0;
   if ($44) { label = 13; break; } else { label = 14; break; }
  case 13: 
   label = 17; break;
  case 14: 
   var $47=$mantSize;
   $decPt=$47;
   label = 15; break;
  case 15: 
   var $49=$p;
   var $50=(($49+1)|0);
   $p=$50;
   label = 16; break;
  case 16: 
   var $52=$mantSize;
   var $53=((($52)+(1))|0);
   $mantSize=$53;
   label = 10; break;
  case 17: 
   var $55=$p;
   $pExp=$55;
   var $56=$mantSize;
   var $57=$p;
   var $58=(((-$56))|0);
   var $59=(($57+$58)|0);
   $p=$59;
   var $60=$decPt;
   var $61=(($60)|(0)) < 0;
   if ($61) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $63=$mantSize;
   $decPt=$63;
   label = 20; break;
  case 19: 
   var $65=$mantSize;
   var $66=((($65)-(1))|0);
   $mantSize=$66;
   label = 20; break;
  case 20: 
   var $68=$mantSize;
   var $69=(($68)|(0)) > 18;
   if ($69) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $71=$decPt;
   var $72=((($71)-(18))|0);
   $fracExp=$72;
   $mantSize=18;
   label = 23; break;
  case 22: 
   var $74=$decPt;
   var $75=$mantSize;
   var $76=((($74)-($75))|0);
   $fracExp=$76;
   label = 23; break;
  case 23: 
   var $78=$mantSize;
   var $79=(($78)|(0))==0;
   if ($79) { label = 24; break; } else { label = 25; break; }
  case 24: 
   $fraction=0;
   var $81=$2;
   $p=$81;
   label = 67; break;
  case 25: 
   $frac1=0;
   label = 26; break;
  case 26: 
   var $84=$mantSize;
   var $85=(($84)|(0)) > 9;
   if ($85) { label = 27; break; } else { label = 31; break; }
  case 27: 
   var $87=$p;
   var $88=HEAP8[($87)];
   var $89=(($88 << 24) >> 24);
   $c=$89;
   var $90=$p;
   var $91=(($90+1)|0);
   $p=$91;
   var $92=$c;
   var $93=(($92)|(0))==46;
   if ($93) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $95=$p;
   var $96=HEAP8[($95)];
   var $97=(($96 << 24) >> 24);
   $c=$97;
   var $98=$p;
   var $99=(($98+1)|0);
   $p=$99;
   label = 29; break;
  case 29: 
   var $101=$frac1;
   var $102=((($101)*(10))&-1);
   var $103=$c;
   var $104=((($103)-(48))|0);
   var $105=((($102)+($104))|0);
   $frac1=$105;
   label = 30; break;
  case 30: 
   var $107=$mantSize;
   var $108=((($107)-(1))|0);
   $mantSize=$108;
   label = 26; break;
  case 31: 
   $frac2=0;
   label = 32; break;
  case 32: 
   var $111=$mantSize;
   var $112=(($111)|(0)) > 0;
   if ($112) { label = 33; break; } else { label = 37; break; }
  case 33: 
   var $114=$p;
   var $115=HEAP8[($114)];
   var $116=(($115 << 24) >> 24);
   $c=$116;
   var $117=$p;
   var $118=(($117+1)|0);
   $p=$118;
   var $119=$c;
   var $120=(($119)|(0))==46;
   if ($120) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $122=$p;
   var $123=HEAP8[($122)];
   var $124=(($123 << 24) >> 24);
   $c=$124;
   var $125=$p;
   var $126=(($125+1)|0);
   $p=$126;
   label = 35; break;
  case 35: 
   var $128=$frac2;
   var $129=((($128)*(10))&-1);
   var $130=$c;
   var $131=((($130)-(48))|0);
   var $132=((($129)+($131))|0);
   $frac2=$132;
   label = 36; break;
  case 36: 
   var $134=$mantSize;
   var $135=((($134)-(1))|0);
   $mantSize=$135;
   label = 32; break;
  case 37: 
   var $137=$frac1;
   var $138=(($137)|(0));
   var $139=($138)*(1000000000);
   var $140=$frac2;
   var $141=(($140)|(0));
   var $142=($139)+($141);
   $fraction=$142;
   label = 38; break;
  case 38: 
   var $144=$pExp;
   $p=$144;
   var $145=$p;
   var $146=HEAP8[($145)];
   var $147=(($146 << 24) >> 24);
   var $148=(($147)|(0))==69;
   if ($148) { label = 40; break; } else { label = 39; break; }
  case 39: 
   var $150=$p;
   var $151=HEAP8[($150)];
   var $152=(($151 << 24) >> 24);
   var $153=(($152)|(0))==101;
   if ($153) { label = 40; break; } else { label = 49; break; }
  case 40: 
   var $155=$p;
   var $156=(($155+1)|0);
   $p=$156;
   var $157=$p;
   var $158=HEAP8[($157)];
   var $159=(($158 << 24) >> 24);
   var $160=(($159)|(0))==45;
   if ($160) { label = 41; break; } else { label = 42; break; }
  case 41: 
   $expSign=1;
   var $162=$p;
   var $163=(($162+1)|0);
   $p=$163;
   label = 45; break;
  case 42: 
   var $165=$p;
   var $166=HEAP8[($165)];
   var $167=(($166 << 24) >> 24);
   var $168=(($167)|(0))==43;
   if ($168) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $170=$p;
   var $171=(($170+1)|0);
   $p=$171;
   label = 44; break;
  case 44: 
   $expSign=0;
   label = 45; break;
  case 45: 
   label = 46; break;
  case 46: 
   var $175=$p;
   var $176=HEAP8[($175)];
   var $177=(($176 << 24) >> 24);
   var $178=_isdigit($177);
   var $179=(($178)|(0))!=0;
   if ($179) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $181=$exp;
   var $182=((($181)*(10))&-1);
   var $183=$p;
   var $184=HEAP8[($183)];
   var $185=(($184 << 24) >> 24);
   var $186=((($185)-(48))|0);
   var $187=((($182)+($186))|0);
   $exp=$187;
   var $188=$p;
   var $189=(($188+1)|0);
   $p=$189;
   label = 46; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $192=$expSign;
   var $193=(($192)|(0))!=0;
   if ($193) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $195=$fracExp;
   var $196=$exp;
   var $197=((($195)-($196))|0);
   $exp=$197;
   label = 52; break;
  case 51: 
   var $199=$fracExp;
   var $200=$exp;
   var $201=((($199)+($200))|0);
   $exp=$201;
   label = 52; break;
  case 52: 
   var $203=$exp;
   var $204=(($203)|(0)) < 0;
   if ($204) { label = 53; break; } else { label = 54; break; }
  case 53: 
   $expSign=1;
   var $206=$exp;
   var $207=(((-$206))|0);
   $exp=$207;
   label = 55; break;
  case 54: 
   $expSign=0;
   label = 55; break;
  case 55: 
   var $210=$exp;
   var $211=HEAP32[((120)>>2)];
   var $212=(($210)|(0)) > (($211)|(0));
   if ($212) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $214=HEAP32[((120)>>2)];
   $exp=$214;
   var $215=___errno_location();
   HEAP32[(($215)>>2)]=34;
   label = 57; break;
  case 57: 
   $dblExp=1;
   $d=((8)|0);
   label = 58; break;
  case 58: 
   var $218=$exp;
   var $219=(($218)|(0))!=0;
   if ($219) { label = 59; break; } else { label = 63; break; }
  case 59: 
   var $221=$exp;
   var $222=$221 & 1;
   var $223=(($222)|(0))!=0;
   if ($223) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $225=$d;
   var $226=HEAPF64[(($225)>>3)];
   var $227=$dblExp;
   var $228=($227)*($226);
   $dblExp=$228;
   label = 61; break;
  case 61: 
   label = 62; break;
  case 62: 
   var $231=$exp;
   var $232=$231 >> 1;
   $exp=$232;
   var $233=$d;
   var $234=(($233+8)|0);
   $d=$234;
   label = 58; break;
  case 63: 
   var $236=$expSign;
   var $237=(($236)|(0))!=0;
   if ($237) { label = 64; break; } else { label = 65; break; }
  case 64: 
   var $239=$dblExp;
   var $240=$fraction;
   var $241=($240)/($239);
   $fraction=$241;
   label = 66; break;
  case 65: 
   var $243=$dblExp;
   var $244=$fraction;
   var $245=($244)*($243);
   $fraction=$245;
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $248=$3;
   var $249=(($248)|(0))!=0;
   if ($249) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $251=$p;
   var $252=$3;
   HEAP32[(($252)>>2)]=$251;
   label = 69; break;
  case 69: 
   var $254=$sign;
   var $255=(($254)|(0))!=0;
   if ($255) { label = 70; break; } else { label = 71; break; }
  case 70: 
   var $257=$fraction;
   var $258=(-$257);
   $1=$258;
   label = 72; break;
  case 71: 
   var $260=$fraction;
   $1=$260;
   label = 72; break;
  case 72: 
   var $262=$1;
   return $262;
  default: assert(0, "bad label: " + label);
 }
}
function _strtold($nptr, $endptr) {
 var label = 0;
 var $1;
 var $2;
 $1=$nptr;
 $2=$endptr;
 var $3=$1;
 var $4=$2;
 var $5=_strtod($3, $4);
 return $5;
}
function _strtold_l($nptr, $endptr, $loc) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$nptr;
 $2=$endptr;
 $3=$loc;
 var $4=$1;
 var $5=$2;
 var $6=_strtold($4, $5);
 return $6;
}
// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    var ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    var ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    var ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    var ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math.imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math.imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math.imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math.imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math.imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math.imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================
// EMSCRIPTEN_END_FUNCS
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(!Module['preRun'] || Module['preRun'].length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  var ret;
  var initialStackTop = STACKTOP;
  try {
    ret = Module['_main'](argc, argv, 0);
  }
  catch(e) {
    if (e.name == 'ExitStatus') {
      return e.status;
    } else if (e == 'SimulateInfiniteLoop') {
      Module['noExitRuntime'] = true;
    } else {
      throw e;
    }
  } finally {
    STACKTOP = initialStackTop;
  }
  return ret;
}
function run(args) {
  args = args || Module['arguments'];
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    var ret = 0;
    calledRun = true;
    if (Module['_main'] && shouldRunNow) {
      ret = Module['callMain'](args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;
// {{PRE_RUN_ADDITIONS}}
/*global Module*/
/*global _malloc, _free, _memcpy*/
/*global FUNCTION_TABLE, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32*/
/*global readLatin1String*/
/*global __emval_register, _emval_handle_array, __emval_decref*/
/*global ___getTypeName*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */
var InternalError = Module.InternalError = extendError(Error, 'InternalError');
var BindingError = Module.BindingError = extendError(Error, 'BindingError');
var UnboundTypeError = Module.UnboundTypeError = extendError(BindingError, 'UnboundTypeError');
function throwInternalError(message) {
    throw new InternalError(message);
}
function throwBindingError(message) {
    throw new BindingError(message);
}
function throwUnboundTypeError(message, types) {
    var unboundTypes = [];
    var seen = {};
    function visit(type) {
        if (seen[type]) {
            return;
        }
        if (registeredTypes[type]) {
            return;
        }
        if (typeDependencies[type]) {
            typeDependencies[type].forEach(visit);
            return;
        }
        unboundTypes.push(type);
        seen[type] = true;
    }
    types.forEach(visit);
    throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
}
// Creates a function overload resolution table to the given method 'methodName' in the given prototype,
// if the overload table doesn't yet exist.
function ensureOverloadTable(proto, methodName, humanName) {
    if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function() {
            // TODO This check can be removed in -O3 level "unsafe" optimizations.
            if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
            }
            return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
    }            
}
/* Registers a symbol (function, class, enum, ...) as part of the Module JS object so that
   hand-written code is able to access that symbol via 'Module.name'.
   name: The name of the symbol that's being exposed.
   value: The object itself to expose (function, class, ...)
   numArguments: For functions, specifies the number of arguments the function takes in. For other types, unused and undefined.
   To implement support for multiple overloads of a function, an 'overload selector' function is used. That selector function chooses
   the appropriate overload to call from an function overload table. This selector function is only used if multiple overloads are
   actually registered, since it carries a slight performance penalty. */
function exposePublicSymbol(name, value, numArguments) {
    if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
            throwBindingError("Cannot register public name '" + name + "' twice");
        }
        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
            throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
        if (undefined !== numArguments) {
            Module[name].numArguments = numArguments;
        }
    }
}
function replacePublicSymbol(name, value, numArguments) {
    if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
    }
    // If there's an overload table for this symbol, replace the symbol in the overload table instead.
    if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
    }
}
// from https://github.com/imvu/imvujs/blob/master/src/error.js
function extendError(baseErrorType, errorName) {
    var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;
        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
            this.stack = this.toString() + '\n' +
                stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
    });
    errorClass.prototype = Object.create(baseErrorType.prototype);
    errorClass.prototype.constructor = errorClass;
    errorClass.prototype.toString = function() {
        if (this.message === undefined) {
            return this.name;
        } else {
            return this.name + ': ' + this.message;
        }
    };
    return errorClass;
}
// from https://github.com/imvu/imvujs/blob/master/src/function.js
function createNamedFunction(name, body) {
    name = makeLegalFunctionName(name);
    /*jshint evil:true*/
    return new Function(
        "body",
        "return function " + name + "() {\n" +
        "    \"use strict\";" +
        "    return body.apply(this, arguments);\n" +
        "};\n"
    )(body);
}
function _embind_repr(v) {
    var t = typeof v;
    if (t === 'object' || t === 'array' || t === 'function') {
        return v.toString();
    } else {
        return '' + v;
    }
}
// typeID -> { toWireType: ..., fromWireType: ... }
var registeredTypes = {};
// typeID -> [callback]
var awaitingDependencies = {};
// typeID -> [dependentTypes]
var typeDependencies = {};
// class typeID -> {pointerType: ..., constPointerType: ...}
var registeredPointers = {};
function registerType(rawType, registeredInstance) {
    var name = registeredInstance.name;
    if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
    }
    if (registeredTypes.hasOwnProperty(rawType)) {
        throwBindingError("Cannot register type '" + name + "' twice");
    }
    registeredTypes[rawType] = registeredInstance;
    delete typeDependencies[rawType];
    if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function(cb) {
            cb();
        });
    }
}
function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
    myTypes.forEach(function(type) {
        typeDependencies[type] = dependentTypes;
    });
    function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);
        if (myTypeConverters.length !== myTypes.length) {
            throwInternalError('Mismatched type converter count');
        }
        for (var i = 0; i < myTypes.length; ++i) {
            registerType(myTypes[i], myTypeConverters[i]);
        }
    }
    var typeConverters = new Array(dependentTypes.length);
    var unregisteredTypes = [];
    var registered = 0;
    dependentTypes.forEach(function(dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
            typeConverters[i] = registeredTypes[dt];
        } else {
            unregisteredTypes.push(dt);
            if (!awaitingDependencies.hasOwnProperty(dt)) {
                awaitingDependencies[dt] = [];
            }
            awaitingDependencies[dt].push(function() {
                typeConverters[i] = registeredTypes[dt];
                ++registered;
                if (registered === unregisteredTypes.length) {
                    onComplete(typeConverters);
                }
            });
        }
    });
    if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
    }
}
var __charCodes = (function() {
    var codes = new Array(256);
    for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
    }
    return codes;
})();
function readLatin1String(ptr) {
    var ret = "";
    var c = ptr;
    while (HEAPU8[c]) {
        ret += __charCodes[HEAPU8[c++]];
    }
    return ret;
}
function getTypeName(type) {
    var ptr = ___getTypeName(type);
    var rv = readLatin1String(ptr);
    _free(ptr);
    return rv;
}
function heap32VectorToArray(count, firstElement) {
    var array = [];
    for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
    }
    return array;
}
function requireRegisteredType(rawType, humanName) {
    var impl = registeredTypes[rawType];
    if (undefined === impl) {
        throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
    }
    return impl;
}
function __embind_register_void(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function() {
            return undefined;
        },
        'toWireType': function(destructors, o) {
            // TODO: assert if anything else is given?
            return undefined;
        },
    });
}
function __embind_register_bool(rawType, name, trueValue, falseValue) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(wt) {
            // ambiguous emscripten ABI: sometimes return values are
            // true or false, and sometimes integers (0 or 1)
            return !!wt;
        },
        'toWireType': function(destructors, o) {
            return o ? trueValue : falseValue;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}
// When converting a number from JS to C++ side, the valid range of the number is
// [minRange, maxRange], inclusive.
function __embind_register_integer(primitiveType, name, minRange, maxRange) {
    name = readLatin1String(name);
    if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
        maxRange = 4294967295;
    }
    registerType(primitiveType, {
        name: name,
        minRange: minRange,
        maxRange: maxRange,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following two if()s and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            if (value < minRange || value > maxRange) {
                throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
            }
            return value | 0;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}
function __embind_register_float(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following if() and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            return value;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}
function __embind_register_std_string(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            if (value instanceof ArrayBuffer) {
                value = new Uint8Array(value);
            }
            function getTAElement(ta, index) {
                return ta[index];
            }
            function getStringElement(string, index) {
                return string.charCodeAt(index);
            }
            var getElement;
            if (value instanceof Uint8Array) {
                getElement = getTAElement;
            } else if (value instanceof Int8Array) {
                getElement = getTAElement;
            } else if (typeof value === 'string') {
                getElement = getStringElement;
            } else {
                throwBindingError('Cannot pass non-string to std::string');
            }
            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length);
            HEAPU32[ptr >> 2] = length;
            for (var i = 0; i < length; ++i) {
                var charCode = getElement(value, i);
                if (charCode > 255) {
                    _free(ptr);
                    throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + 4 + i] = charCode;
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        destructorFunction: function(ptr) { _free(ptr); },
    });
}
function __embind_register_std_wstring(rawType, charSize, name) {
    name = readLatin1String(name);
    var HEAP, shift;
    if (charSize === 2) {
        HEAP = HEAPU16;
        shift = 1;
    } else if (charSize === 4) {
        HEAP = HEAPU32;
        shift = 2;
    }
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            var start = (value + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAP[start + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length * charSize);
            HEAPU32[ptr >> 2] = length;
            var start = (ptr + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                HEAP[start + i] = value.charCodeAt(i);
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        destructorFunction: function(ptr) { _free(ptr); },
    });
}
function __embind_register_emval(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var rv = _emval_handle_array[handle].value;
            __emval_decref(handle);
            return rv;
        },
        'toWireType': function(destructors, value) {
            return __emval_register(value);
        },
        destructorFunction: null, // This type does not need a destructor
    });
}
function __embind_register_memory_view(rawType, name) {
    var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,        
    ];
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var type = HEAPU32[handle >> 2];
            var size = HEAPU32[(handle >> 2) + 1]; // in elements
            var data = HEAPU32[(handle >> 2) + 2]; // byte offset into emscripten heap
            var TA = typeMapping[type];
            return new TA(HEAP8.buffer, data, size);
        },
    });
}
function runDestructors(destructors) {
    while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
    }
}
// Function implementation of operator new, per
// http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
// 13.2.2
// ES3
function new_(constructor, argumentList) {
    if (!(constructor instanceof Function)) {
        throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
    }
    /*
     * Previously, the following line was just:
     function dummy() {};
     * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
     * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
     * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
     * to write a test for this behavior.  -NRD 2013.02.22
     */
    var dummy = createNamedFunction(constructor.name, function(){});
    dummy.prototype = constructor.prototype;
    var obj = new dummy;
    var r = constructor.apply(obj, argumentList);
    return (r instanceof Object) ? r : obj;
}
// The path to interop from JS code to C++ code:
// (hand-written JS code) -> (autogenerated JS invoker) -> (template-generated C++ invoker) -> (target C++ function)
// craftInvokerFunction generates the JS invoker function for each function exposed to JS through embind.
function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
    // humanName: a human-readable string name for the function to be generated.
    // argTypes: An array that contains the embind type objects for all types in the function signature.
    //    argTypes[0] is the type object for the function return value.
    //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
    //    argTypes[2...] are the actual function parameters.
    // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
    // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
    // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
    var argCount = argTypes.length;
    if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
    }
    var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
    if (!isClassMethodFunc && !FUNCTION_TABLE[cppTargetFunc]) {
        throwBindingError('Global function '+humanName+' is not defined!');
    }
    // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
// TODO: This omits argument count check - enable only at -O3 or similar.
//    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
//       return FUNCTION_TABLE[fn];
//    }
    var argsList = "";
    var argsListWired = "";
    for(var i = 0; i < argCount-2; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i;
        argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
    }
    var invokerFnBody =
        "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
        "if (arguments.length !== "+(argCount - 2)+") {\n" +
            "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
        "}\n";
    // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
    // TODO: Remove this completely once all function invokers are being dynamically generated.
    var needsDestructorStack = false;
    for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
            needsDestructorStack = true;
            break;
        }
    }
    if (needsDestructorStack) {
        invokerFnBody +=
            "var destructors = [];\n";
    }
    var dtorStack = needsDestructorStack ? "destructors" : "null";
    var args1 = ["throwBindingError", "classType", "invoker", "fn", "runDestructors", "retType", "classParam"];
    var args2 = [throwBindingError, classType, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
    if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
    }
    for(var i = 0; i < argCount-2; ++i) {
        invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
        args1.push("argType"+i);
        args2.push(argTypes[i+2]);
    }
    if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
    }
    var returns = (argTypes[0].name !== "void");
    invokerFnBody +=
        (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
    if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
    } else {
        for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
            var paramName = (i === 1 ? "thisWired" : ("arg"+(i-2)+"Wired"));
            if (argTypes[i].destructorFunction !== null) {
                invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                args1.push(paramName+"_dtor");
                args2.push(argTypes[i].destructorFunction);
            }
        }
    }
    if (returns) {
        invokerFnBody += "return retType.fromWireType(rv);\n";
    }
    invokerFnBody += "}\n";
    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}
function __embind_register_function(name, argCount, rawArgTypesAddr, rawInvoker, fn) {
    var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    name = readLatin1String(name);
    rawInvoker = FUNCTION_TABLE[rawInvoker];
    exposePublicSymbol(name, function() {
        throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
    }, argCount - 1);
    whenDependentTypesAreResolved([], argTypes, function(argTypes) {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
        return [];
    });
}
var tupleRegistrations = {};
function __embind_register_tuple(rawType, name, rawConstructor, rawDestructor) {
    tupleRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: FUNCTION_TABLE[rawConstructor],
        rawDestructor: FUNCTION_TABLE[rawDestructor],
        elements: [],
    };
}
function __embind_register_tuple_element(
    rawTupleType,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    tupleRegistrations[rawTupleType].elements.push({
        getterReturnType: getterReturnType,
        getter: FUNCTION_TABLE[getter],
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: FUNCTION_TABLE[setter],
        setterContext: setterContext,
    });
}
function __embind_finalize_tuple(rawTupleType) {
    var reg = tupleRegistrations[rawTupleType];
    delete tupleRegistrations[rawTupleType];
    var elements = reg.elements;
    var elementsLength = elements.length;
    var elementTypes = elements.map(function(elt) { return elt.getterReturnType; }).
                concat(elements.map(function(elt) { return elt.setterArgumentType; }));
    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
    whenDependentTypesAreResolved([rawTupleType], elementTypes, function(elementTypes) {
        elements.forEach(function(elt, i) {
            var getterReturnType = elementTypes[i];
            var getter = elt.getter;
            var getterContext = elt.getterContext;
            var setterArgumentType = elementTypes[i + elementsLength];
            var setter = elt.setter;
            var setterContext = elt.setterContext;
            elt.read = function(ptr) {
                return getterReturnType['fromWireType'](getter(getterContext, ptr));
            };
            elt.write = function(ptr, o) {
                var destructors = [];
                setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                runDestructors(destructors);
            };
        });
        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = new Array(elementsLength);
                for (var i = 0; i < elementsLength; ++i) {
                    rv[i] = elements[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                if (elementsLength !== o.length) {
                    throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
                }
                var ptr = rawConstructor();
                for (var i = 0; i < elementsLength; ++i) {
                    elements[i].write(ptr, o[i]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            destructorFunction: rawDestructor,
        }];
    });
}
var structRegistrations = {};
function __embind_register_struct(
    rawType,
    name,
    rawConstructor,
    rawDestructor
) {
    structRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: FUNCTION_TABLE[rawConstructor],
        rawDestructor: FUNCTION_TABLE[rawDestructor],
        fields: [],
    };
}
function __embind_register_struct_field(
    structType,
    fieldName,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    structRegistrations[structType].fields.push({
        fieldName: readLatin1String(fieldName),
        getterReturnType: getterReturnType,
        getter: FUNCTION_TABLE[getter],
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: FUNCTION_TABLE[setter],
        setterContext: setterContext,
    });
}
function __embind_finalize_struct(structType) {
    var reg = structRegistrations[structType];
    delete structRegistrations[structType];
    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
    var fieldRecords = reg.fields;
    var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
              concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
    whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
        var fields = {};
        fieldRecords.forEach(function(field, i) {
            var fieldName = field.fieldName;
            var getterReturnType = fieldTypes[i];
            var getter = field.getter;
            var getterContext = field.getterContext;
            var setterArgumentType = fieldTypes[i + fieldRecords.length];
            var setter = field.setter;
            var setterContext = field.setterContext;
            fields[fieldName] = {
                read: function(ptr) {
                    return getterReturnType['fromWireType'](
                        getter(getterContext, ptr));
                },
                write: function(ptr, o) {
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                    runDestructors(destructors);
                }
            };
        });
        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = {};
                for (var i in fields) {
                    rv[i] = fields[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                // assume all fields are present without checking.
                for (var fieldName in fields) {
                    if (!(fieldName in o)) {
                        throw new TypeError('Missing field');
                    }
                }
                var ptr = rawConstructor();
                for (fieldName in fields) {
                    fields[fieldName].write(ptr, o[fieldName]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            destructorFunction: rawDestructor,
        }];
    });
}
var genericPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        if (this.isSmartPointer) {
            var ptr = this.rawConstructor();
            if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
            }
            return ptr;
        } else {
            return 0;
        }
    }
    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
            throwBindingError('Passing raw pointer to smart pointer is illegal');
        }
        switch (this.sharingPolicy) {
            case 0: // NONE
                // no upcasting
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                }
                break;
            case 1: // INTRUSIVE
                ptr = handle.$$.smartPtr;
                break;
            case 2: // BY_EMVAL
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    var clonedHandle = handle.clone();
                    ptr = this.rawShare(
                        ptr,
                        __emval_register(function() {
                            clonedHandle.delete();
                        })
                    );
                    if (destructors !== null) {
                        destructors.push(this.rawDestructor, ptr);
                    }
                }
                break;
            default:
                throwBindingError('Unsupporting sharing policy');
        }
    }
    return ptr;
};
// If we know a pointer type is not going to have SmartPtr logic in it, we can
// special-case optimize it a bit (compare to genericPointerToWireType)
var constNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }
    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};
// An optimized version for non-const method accesses - there we must additionally restrict that
// the pointer is not a const-pointer.
var nonConstNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }
    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};
function RegisteredPointer(
    name,
    registeredClass,
    isReference,
    isConst,
    // smart pointer properties
    isSmartPointer,
    pointeeType,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    this.name = name;
    this.registeredClass = registeredClass;
    this.isReference = isReference;
    this.isConst = isConst;
    // smart pointer properties
    this.isSmartPointer = isSmartPointer;
    this.pointeeType = pointeeType;
    this.sharingPolicy = sharingPolicy;
    this.rawGetPointee = rawGetPointee;
    this.rawConstructor = rawConstructor;
    this.rawShare = rawShare;
    this.rawDestructor = rawDestructor;
    if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
            this['toWireType'] = constNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        } else {
            this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        }
    } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in 
        //       craftInvokerFunction altogether.
    }
}
RegisteredPointer.prototype.getPointee = function(ptr) {
    if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
    }
    return ptr;
};
RegisteredPointer.prototype.destructor = function(ptr) {
    if (this.rawDestructor) {
        this.rawDestructor(ptr);
    }
};
RegisteredPointer.prototype['fromWireType'] = function(ptr) {
    // ptr is a raw pointer (or a raw smartpointer)
    // rawPointer is a maybe-null raw pointer
    var rawPointer = this.getPointee(ptr);
    if (!rawPointer) {
        this.destructor(ptr);
        return null;
    }
    function makeDefaultHandle() {
        if (this.isSmartPointer) {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this.pointeeType,
                ptr: rawPointer,
                smartPtrType: this,
                smartPtr: ptr,
            });
        } else {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this,
                ptr: ptr,
            });
        }
    }
    var actualType = this.registeredClass.getActualType(rawPointer);
    var registeredPointerRecord = registeredPointers[actualType];
    if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
    }
    var toType;
    if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
    } else {
        toType = registeredPointerRecord.pointerType;
    }
    var dp = downcastPointer(
        rawPointer,
        this.registeredClass,
        toType.registeredClass);
    if (dp === null) {
        return makeDefaultHandle.call(this);
    }
    if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
            smartPtrType: this,
            smartPtr: ptr,
        });
    } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
        });
    }
};
function makeClassHandle(prototype, record) {
    if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
    }
    var hasSmartPtrType = !!record.smartPtrType;
    var hasSmartPtr = !!record.smartPtr;
    if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
    }
    record.count = { value: 1 };
    return Object.create(prototype, {
        $$: {
            value: record,
        },
    });
}
// root of all pointer and smart pointer handles in embind
function ClassHandle() {
}
function getInstanceTypeName(handle) {
    return handle.$$.ptrType.registeredClass.name;
}
ClassHandle.prototype.isAliasOf = function(other) {
    if (!(this instanceof ClassHandle)) {
        return false;
    }
    if (!(other instanceof ClassHandle)) {
        return false;
    }
    var leftClass = this.$$.ptrType.registeredClass;
    var left = this.$$.ptr;
    var rightClass = other.$$.ptrType.registeredClass;
    var right = other.$$.ptr;
    while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
    }
    while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
    }
    return leftClass === rightClass && left === right;
};
function throwInstanceAlreadyDeleted(obj) {
    throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
}
ClassHandle.prototype.clone = function() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    var clone = Object.create(Object.getPrototypeOf(this), {
        $$: {
            value: shallowCopy(this.$$),
        }
    });
    clone.$$.count.value += 1;
    return clone;
};
function runDestructor(handle) {
    var $$ = handle.$$;
    if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
    } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
    }
}
ClassHandle.prototype['delete'] = function ClassHandle_delete() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled) {
        throwBindingError('Object already scheduled for deletion');
    }
    this.$$.count.value -= 1;
    if (0 === this.$$.count.value) {
        runDestructor(this);
    }
    this.$$.smartPtr = undefined;
    this.$$.ptr = undefined;
};
var deletionQueue = [];
ClassHandle.prototype['isDeleted'] = function isDeleted() {
    return !this.$$.ptr;
};
ClassHandle.prototype['deleteLater'] = function deleteLater() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled) {
        throwBindingError('Object already scheduled for deletion');
    }
    deletionQueue.push(this);
    if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
    this.$$.deleteScheduled = true;
    return this;
};
function flushPendingDeletes() {
    while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
    }
}
Module['flushPendingDeletes'] = flushPendingDeletes;
var delayFunction;
Module['setDelayFunction'] = function setDelayFunction(fn) {
    delayFunction = fn;
    if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
};
function RegisteredClass(
    name,
    constructor,
    instancePrototype,
    rawDestructor,
    baseClass,
    getActualType,
    upcast,
    downcast
) {
    this.name = name;
    this.constructor = constructor;
    this.instancePrototype = instancePrototype;
    this.rawDestructor = rawDestructor;
    this.baseClass = baseClass;
    this.getActualType = getActualType;
    this.upcast = upcast;
    this.downcast = downcast;
}
function shallowCopy(o) {
    var rv = {};
    for (var k in o) {
        rv[k] = o[k];
    }
    return rv;
}
function __embind_register_class(
    rawType,
    rawPointerType,
    rawConstPointerType,
    baseClassRawType,
    getActualType,
    upcast,
    downcast,
    name,
    rawDestructor
) {
    name = readLatin1String(name);
    rawDestructor = FUNCTION_TABLE[rawDestructor];
    getActualType = FUNCTION_TABLE[getActualType];
    upcast = FUNCTION_TABLE[upcast];
    downcast = FUNCTION_TABLE[downcast];
    var legalFunctionName = makeLegalFunctionName(name);
    exposePublicSymbol(legalFunctionName, function() {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
    });
    whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function(base) {
            base = base[0];
            var baseClass;
            var basePrototype;
            if (baseClassRawType) {
                baseClass = base.registeredClass;
                basePrototype = baseClass.instancePrototype;
            } else {
                basePrototype = ClassHandle.prototype;
            }
            var constructor = createNamedFunction(legalFunctionName, function() {
                if (Object.getPrototypeOf(this) !== instancePrototype) {
                    throw new BindingError("Use 'new' to construct " + name);
                }
                if (undefined === registeredClass.constructor_body) {
                    throw new BindingError(name + " has no accessible constructor");
                }
                var body = registeredClass.constructor_body[arguments.length];
                if (undefined === body) {
                    throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                }
                return body.apply(this, arguments);
            });
            var instancePrototype = Object.create(basePrototype, {
                constructor: { value: constructor },
            });
            constructor.prototype = instancePrototype;
            var registeredClass = new RegisteredClass(
                name,
                constructor,
                instancePrototype,
                rawDestructor,
                baseClass,
                getActualType,
                upcast,
                downcast);
            var referenceConverter = new RegisteredPointer(
                name,
                registeredClass,
                true,
                false,
                false);
            var pointerConverter = new RegisteredPointer(
                name + '*',
                registeredClass,
                false,
                false,
                false);
            var constPointerConverter = new RegisteredPointer(
                name + ' const*',
                registeredClass,
                false,
                true,
                false);
            registeredPointers[rawType] = {
                pointerType: pointerConverter,
                constPointerType: constPointerConverter
            };
            replacePublicSymbol(legalFunctionName, constructor);
            return [referenceConverter, pointerConverter, constPointerConverter];
        }
    );
}
function __embind_register_class_constructor(
    rawClassType,
    argCount,
    rawArgTypesAddr,
    invoker,
    rawConstructor
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    invoker = FUNCTION_TABLE[invoker];
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = 'constructor ' + classType.name;
        if (undefined === classType.registeredClass.constructor_body) {
            classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
            throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }
        classType.registeredClass.constructor_body[argCount - 1] = function() {
            throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
        };
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            classType.registeredClass.constructor_body[argCount - 1] = function() {
                if (arguments.length !== argCount - 1) {
                    throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                }
                var destructors = [];
                var args = new Array(argCount);
                args[0] = rawConstructor;
                for (var i = 1; i < argCount; ++i) {
                    args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                }
                var ptr = invoker.apply(null, args);
                runDestructors(destructors);
                return argTypes[0]['fromWireType'](ptr);
            };
            return [];
        });
        return [];
    });
}
function downcastPointer(ptr, ptrClass, desiredClass) {
    if (ptrClass === desiredClass) {
        return ptr;
    }
    if (undefined === desiredClass.baseClass) {
        return null; // no conversion
    }
    // O(depth) stack space used
    return desiredClass.downcast(
        downcastPointer(ptr, ptrClass, desiredClass.baseClass));
}
function upcastPointer(ptr, ptrClass, desiredClass) {
    while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
            throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
    }
    return ptr;
}
function validateThis(this_, classType, humanName) {
    if (!(this_ instanceof Object)) {
        throwBindingError(humanName + ' with invalid "this": ' + this_);
    }
    if (!(this_ instanceof classType.registeredClass.constructor)) {
        throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
    }
    if (!this_.$$.ptr) {
        throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
    }
    // todo: kill this
    return upcastPointer(
        this_.$$.ptr,
        this_.$$.ptrType.registeredClass,
        classType.registeredClass);
}
function __embind_register_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr, // [ReturnType, ThisType, Args...]
    rawInvoker,
    context
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = FUNCTION_TABLE[rawInvoker];
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;
        var unboundTypesHandler = function() {
            throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        };
        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount-2)) {
            // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
            unboundTypesHandler.argCount = argCount-2;
            unboundTypesHandler.className = classType.name;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-2] = unboundTypesHandler;
        }
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
            // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
            // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = memberFunction;
            } else {
                proto[methodName].overloadTable[argCount-2] = memberFunction;
            }
            return [];
        });
        return [];
    });
}
function __embind_register_class_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr,
    rawInvoker,
    fn
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = FUNCTION_TABLE[rawInvoker];
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;
        var unboundTypesHandler = function() {
                throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
            };
        var proto = classType.registeredClass.constructor;
        if (undefined === proto[methodName]) {
            // This is the first function to be registered with this name.
            unboundTypesHandler.argCount = argCount-1;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
        }
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
            // the function handlers go into an overload table.
            var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
            var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = func;
            } else {
                proto[methodName].overloadTable[argCount-1] = func;
            }
            return [];
        });
        return [];
    });
}
function __embind_register_class_property(
    classType,
    fieldName,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    fieldName = readLatin1String(fieldName);
    getter = FUNCTION_TABLE[getter];
    whenDependentTypesAreResolved([], [classType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + fieldName;
        var desc = {
            get: function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            },
            enumerable: true,
            configurable: true
        };
        if (setter) {
            desc.set = function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            };
        } else {
            desc.set = function(v) {
                throwBindingError(humanName + ' is a read-only property');
            };
        }
        Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
        whenDependentTypesAreResolved(
            [],
            (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
        function(types) {
            var getterReturnType = types[0];
            var desc = {
                get: function() {
                    var ptr = validateThis(this, classType, humanName + ' getter');
                    return getterReturnType['fromWireType'](getter(getterContext, ptr));
                },
                enumerable: true
            };
            if (setter) {
                setter = FUNCTION_TABLE[setter];
                var setterArgumentType = types[1];
                desc.set = function(v) {
                    var ptr = validateThis(this, classType, humanName + ' setter');
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                    runDestructors(destructors);
                };
            }
            Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
            return [];
        });
        return [];
    });
}
var char_0 = '0'.charCodeAt(0);
var char_9 = '9'.charCodeAt(0);
function makeLegalFunctionName(name) {
    name = name.replace(/[^a-zA-Z0-9_]/g, '$');
    var f = name.charCodeAt(0);
    if (f >= char_0 && f <= char_9) {
        return '_' + name;
    } else {
        return name;
    }
}
function __embind_register_smart_ptr(
    rawType,
    rawPointeeType,
    name,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    name = readLatin1String(name);
    rawGetPointee = FUNCTION_TABLE[rawGetPointee];
    rawConstructor = FUNCTION_TABLE[rawConstructor];
    rawShare = FUNCTION_TABLE[rawShare];
    rawDestructor = FUNCTION_TABLE[rawDestructor];
    whenDependentTypesAreResolved([rawType], [rawPointeeType], function(pointeeType) {
        pointeeType = pointeeType[0];
        var registeredPointer = new RegisteredPointer(
            name,
            pointeeType.registeredClass,
            false,
            false,
            // smart pointer properties
            true,
            pointeeType,
            sharingPolicy,
            rawGetPointee,
            rawConstructor,
            rawShare,
            rawDestructor);
        return [registeredPointer];
    });
}
function __embind_register_enum(
    rawType,
    name
) {
    name = readLatin1String(name);
    function constructor() {
    }
    constructor.values = {};
    registerType(rawType, {
        name: name,
        constructor: constructor,
        'fromWireType': function(c) {
            return this.constructor.values[c];
        },
        'toWireType': function(destructors, c) {
            return c.value;
        },
        destructorFunction: null,
    });
    exposePublicSymbol(name, constructor);
}
function __embind_register_enum_value(
    rawEnumType,
    name,
    enumValue
) {
    var enumType = requireRegisteredType(rawEnumType, 'enum');
    name = readLatin1String(name);
    var Enum = enumType.constructor;
    var Value = Object.create(enumType.constructor.prototype, {
        value: {value: enumValue},
        constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
    });
    Enum.values[enumValue] = Value;
    Enum[name] = Value;
}
function __embind_register_constant(name, type, value) {
    name = readLatin1String(name);
    whenDependentTypesAreResolved([], [type], function(type) {
        type = type[0];
        Module[name] = type['fromWireType'](value);
        return [];
    });
}
/*global Module:true, Runtime*/
/*global HEAP32*/
/*global new_*/
/*global createNamedFunction*/
/*global readLatin1String, writeStringToMemory*/
/*global requireRegisteredType, throwBindingError*/
var Module = Module || {};
var _emval_handle_array = [{}]; // reserve zero
var _emval_free_list = [];
// Public JS API
/** @expose */
Module.count_emval_handles = function() {
    var count = 0;
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            ++count;
        }
    }
    return count;
};
/** @expose */
Module.get_first_emval = function() {
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            return _emval_handle_array[i];
        }
    }
    return null;
};
// Private C++ API
var _emval_symbols = {}; // address -> string
function __emval_register_symbol(address) {
    _emval_symbols[address] = readLatin1String(address);
}
function getStringOrSymbol(address) {
    var symbol = _emval_symbols[address];
    if (symbol === undefined) {
        return readLatin1String(address);
    } else {
        return symbol;
    }
}
function requireHandle(handle) {
    if (!handle) {
        throwBindingError('Cannot use deleted val. handle = ' + handle);
    }
}
function __emval_register(value) {
    var handle = _emval_free_list.length ?
        _emval_free_list.pop() :
        _emval_handle_array.length;
    _emval_handle_array[handle] = {refcount: 1, value: value};
    return handle;
}
function __emval_incref(handle) {
    if (handle) {
        _emval_handle_array[handle].refcount += 1;
    }
}
function __emval_decref(handle) {
    if (handle && 0 === --_emval_handle_array[handle].refcount) {
        _emval_handle_array[handle] = undefined;
        _emval_free_list.push(handle);
    }
}
function __emval_new_array() {
    return __emval_register([]);
}
function __emval_new_object() {
    return __emval_register({});
}
function __emval_undefined() {
    return __emval_register(undefined);
}
function __emval_null() {
    return __emval_register(null);
}
function __emval_new_cstring(v) {
    return __emval_register(getStringOrSymbol(v));
}
function __emval_take_value(type, v) {
    type = requireRegisteredType(type, '_emval_take_value');
    v = type.fromWireType(v);
    return __emval_register(v);
}
var __newers = {}; // arity -> function
function craftEmvalAllocator(argCount) {
    /*This function returns a new function that looks like this:
    function emval_allocator_3(handle, argTypes, arg0Wired, arg1Wired, arg2Wired) {
        var argType0 = requireRegisteredType(HEAP32[(argTypes >> 2)], "parameter 0");
        var arg0 = argType0.fromWireType(arg0Wired);
        var argType1 = requireRegisteredType(HEAP32[(argTypes >> 2) + 1], "parameter 1");
        var arg1 = argType1.fromWireType(arg1Wired);
        var argType2 = requireRegisteredType(HEAP32[(argTypes >> 2) + 2], "parameter 2");
        var arg2 = argType2.fromWireType(arg2Wired);
        var constructor = _emval_handle_array[handle].value;
        var emval = new constructor(arg0, arg1, arg2);
        return emval;
    } */
    var args1 = ["requireRegisteredType", "HEAP32", "_emval_handle_array", "__emval_register"];
    var args2 = [requireRegisteredType, HEAP32, _emval_handle_array, __emval_register];
    var argsList = "";
    var argsListWired = "";
    for(var i = 0; i < argCount; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i; // 'arg0, arg1, ..., argn'
        argsListWired += ", arg"+i+"Wired"; // ', arg0Wired, arg1Wired, ..., argnWired'
    }
    var invokerFnBody =
        "return function emval_allocator_"+argCount+"(handle, argTypes " + argsListWired + ") {\n";
    for(var i = 0; i < argCount; ++i) {
        invokerFnBody += 
            "var argType"+i+" = requireRegisteredType(HEAP32[(argTypes >> 2) + "+i+"], \"parameter "+i+"\");\n" +
            "var arg"+i+" = argType"+i+".fromWireType(arg"+i+"Wired);\n";
    }
    invokerFnBody +=
        "var constructor = _emval_handle_array[handle].value;\n" +
        "var obj = new constructor("+argsList+");\n" +
        "return __emval_register(obj);\n" +
        "}\n";
    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}
function __emval_new(handle, argCount, argTypes) {
    requireHandle(handle);
    var newer = __newers[argCount];
    if (!newer) {
        newer = craftEmvalAllocator(argCount);
        __newers[argCount] = newer;
    }
    if (argCount === 0) {
        return newer(handle, argTypes);
    } else if (argCount === 1) {
        return newer(handle, argTypes, arguments[3]);
    } else if (argCount === 2) {
        return newer(handle, argTypes, arguments[3], arguments[4]);
    } else if (argCount === 3) {
        return newer(handle, argTypes, arguments[3], arguments[4], arguments[5]);
    } else if (argCount === 4) {
        return newer(handle, argTypes, arguments[3], arguments[4], arguments[5], arguments[6]);
    } else {
        // This is a slow path! (.apply and .splice are slow), so a few specializations are present above.
        return newer.apply(null, arguments.splice(1));
    }
}
// appease jshint (technically this code uses eval)
var global = (function(){return Function;})()('return this')();
function __emval_get_global(name) {
    name = getStringOrSymbol(name);
    return __emval_register(global[name]);
}
function __emval_get_module_property(name) {
    name = getStringOrSymbol(name);
    return __emval_register(Module[name]);
}
function __emval_get_property(handle, key) {
    requireHandle(handle);
    return __emval_register(_emval_handle_array[handle].value[_emval_handle_array[key].value]);
}
function __emval_set_property(handle, key, value) {
    requireHandle(handle);
    _emval_handle_array[handle].value[_emval_handle_array[key].value] = _emval_handle_array[value].value;
}
function __emval_as(handle, returnType) {
    requireHandle(handle);
    returnType = requireRegisteredType(returnType, 'emval::as');
    var destructors = [];
    // caller owns destructing
    return returnType.toWireType(destructors, _emval_handle_array[handle].value);
}
function parseParameters(argCount, argTypes, argWireTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        var argType = requireRegisteredType(
            HEAP32[(argTypes >> 2) + i],
            "parameter " + i);
        a[i] = argType.fromWireType(argWireTypes[i]);
    }
    return a;
}
function __emval_call(handle, argCount, argTypes) {
    requireHandle(handle);
    var types = lookupTypes(argCount, argTypes);
    var args = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        args[i] = types[i].fromWireType(arguments[3 + i]);
    }
    var fn = _emval_handle_array[handle].value;
    var rv = fn.apply(undefined, args);
    return __emval_register(rv);
}
function lookupTypes(argCount, argTypes, argWireTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(
            HEAP32[(argTypes >> 2) + i],
            "parameter " + i);
    }
    return a;
}
function __emval_get_method_caller(argCount, argTypes) {
    var types = lookupTypes(argCount, argTypes);
    var retType = types[0];
    var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
    var args1 = ["Runtime", "createNamedFunction", "requireHandle", "getStringOrSymbol", "_emval_handle_array", "retType"];
    var args2 = [Runtime, createNamedFunction, requireHandle, getStringOrSymbol, _emval_handle_array, retType];
    var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
    var argsListWired = ""; // 'arg0Wired, ..., argNWired'
    for (var i = 0; i < argCount - 1; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        argsListWired += ", arg" + i + "Wired";
        args1.push("argType" + i);
        args2.push(types[1 + i]);
    }
    var invokerFnBody =
        "return Runtime.addFunction(createNamedFunction('" + signatureName + "', function (handle, name" + argsListWired + ") {\n" +
        "requireHandle(handle);\n" +
        "name = getStringOrSymbol(name);\n";
    for (var i = 0; i < argCount - 1; ++i) {
        invokerFnBody += "var arg" + i + " = argType" + i + ".fromWireType(arg" + i + "Wired);\n";
    }
    invokerFnBody +=
        "var obj = _emval_handle_array[handle].value;\n" +
        "return retType.toWireType(null, obj[name](" + argsList + "));\n" + 
        "}));\n";
    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}
function __emval_has_function(handle, name) {
    name = getStringOrSymbol(name);
    return _emval_handle_array[handle].value[name] instanceof Function;
}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
